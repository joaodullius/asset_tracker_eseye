
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return pm_state;
}


enum power_states pm_system_suspend(int32_t ticks)
{
   0:	20019b80 	.word	0x20019b80
	pm_state = (forced_pm_state == POWER_STATE_AUTO) ?
   4:	000022a9 	.word	0x000022a9
		   pm_policy_next_state(ticks) : forced_pm_state;
   8:	00005f1f 	.word	0x00005f1f
   c:	000022d9 	.word	0x000022d9
  10:	000022d9 	.word	0x000022d9
	if (pm_state == POWER_STATE_ACTIVE) {
  14:	000022d9 	.word	0x000022d9
  18:	000022d9 	.word	0x000022d9
	post_ops_done = 0;
  1c:	000022d9 	.word	0x000022d9
	...
	pm_power_state_set(pm_state);
  2c:	000020b5 	.word	0x000020b5
	if (!post_ops_done) {
  30:	000022d9 	.word	0x000022d9
		post_ops_done = 1;
  34:	00000000 	.word	0x00000000
		forced_pm_state = POWER_STATE_AUTO;
  38:	0000205d 	.word	0x0000205d
		pm_state_notify(false);
  3c:	00005efb 	.word	0x00005efb

00000040 <_irq_vector_table>:
		pm_power_state_exit_post_ops(pm_state);
  40:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
	return pm_policy_mgr(ticks);
}
  50:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  60:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  70:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  80:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  90:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  a0:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  b0:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  c0:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  d0:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  e0:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
  f0:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
 100:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
 110:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
 120:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
 130:	00002269 00002269 00002269 00002269     i"..i"..i"..i"..
 140:	00002269                                i"..

Disassembly of section text:

00000144 <__aeabi_uldivmod>:
     144:	b953      	cbnz	r3, 15c <__aeabi_uldivmod+0x18>
     146:	b94a      	cbnz	r2, 15c <__aeabi_uldivmod+0x18>
     148:	2900      	cmp	r1, #0
     14a:	bf08      	it	eq
     14c:	2800      	cmpeq	r0, #0
     14e:	bf1c      	itt	ne
     150:	f04f 31ff 	movne.w	r1, #4294967295
     154:	f04f 30ff 	movne.w	r0, #4294967295
     158:	f000 b970 	b.w	43c <__aeabi_idiv0>
     15c:	f1ad 0c08 	sub.w	ip, sp, #8
     160:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     164:	f000 f806 	bl	174 <__udivmoddi4>
     168:	f8dd e004 	ldr.w	lr, [sp, #4]
     16c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     170:	b004      	add	sp, #16
     172:	4770      	bx	lr

00000174 <__udivmoddi4>:
     174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     178:	9e08      	ldr	r6, [sp, #32]
     17a:	460d      	mov	r5, r1
     17c:	4604      	mov	r4, r0
     17e:	468a      	mov	sl, r1
     180:	2b00      	cmp	r3, #0
     182:	d17f      	bne.n	284 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x4>
     184:	428a      	cmp	r2, r1
     186:	4617      	mov	r7, r2
     188:	d941      	bls.n	20e <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xe>
     18a:	fab2 f282 	clz	r2, r2
     18e:	b14a      	cbz	r2, 1a4 <__udivmoddi4+0x30>
     190:	f1c2 0120 	rsb	r1, r2, #32
     194:	fa05 f302 	lsl.w	r3, r5, r2
     198:	4097      	lsls	r7, r2
     19a:	4094      	lsls	r4, r2
     19c:	fa20 f101 	lsr.w	r1, r0, r1
     1a0:	ea41 0a03 	orr.w	sl, r1, r3
     1a4:	ea4f 4817 	mov.w	r8, r7, lsr #16
     1a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     1ac:	fa1f f987 	uxth.w	r9, r7
     1b0:	fbba fef8 	udiv	lr, sl, r8
     1b4:	fb08 a31e 	mls	r3, r8, lr, sl
     1b8:	fb0e f109 	mul.w	r1, lr, r9
     1bc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     1c0:	4299      	cmp	r1, r3
     1c2:	d906      	bls.n	1d2 <__udivmoddi4+0x5e>
     1c4:	18fb      	adds	r3, r7, r3
     1c6:	d202      	bcs.n	1ce <__udivmoddi4+0x5a>
     1c8:	4299      	cmp	r1, r3
     1ca:	f200 8124 	bhi.w	416 <CONFIG_FLASH_SIZE+0x16>
     1ce:	f10e 3eff 	add.w	lr, lr, #4294967295
     1d2:	1a59      	subs	r1, r3, r1
     1d4:	b2a3      	uxth	r3, r4
     1d6:	fbb1 f0f8 	udiv	r0, r1, r8
     1da:	fb08 1110 	mls	r1, r8, r0, r1
     1de:	fb00 f909 	mul.w	r9, r0, r9
     1e2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     1e6:	45a1      	cmp	r9, r4
     1e8:	d905      	bls.n	1f6 <__udivmoddi4+0x82>
     1ea:	193c      	adds	r4, r7, r4
     1ec:	d202      	bcs.n	1f4 <__udivmoddi4+0x80>
     1ee:	45a1      	cmp	r9, r4
     1f0:	f200 810e 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     1f4:	3801      	subs	r0, #1
     1f6:	eba4 0409 	sub.w	r4, r4, r9
     1fa:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1fe:	2100      	movs	r1, #0
     200:	b11e      	cbz	r6, 20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     202:	40d4      	lsrs	r4, r2
     204:	2300      	movs	r3, #0
     206:	e9c6 4300 	strd	r4, r3, [r6]
     20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     20e:	b902      	cbnz	r2, 212 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x12>
     210:	deff      	udf	#255	; 0xff
     212:	fab2 f282 	clz	r2, r2
     216:	2a00      	cmp	r2, #0
     218:	d14f      	bne.n	2ba <CONFIG_PM_PARTITION_SIZE_PROVISION+0x3a>
     21a:	1bcb      	subs	r3, r1, r7
     21c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     220:	fa1f f887 	uxth.w	r8, r7
     224:	2101      	movs	r1, #1
     226:	0c25      	lsrs	r5, r4, #16
     228:	fbb3 fcfe 	udiv	ip, r3, lr
     22c:	fb0e 301c 	mls	r0, lr, ip, r3
     230:	462b      	mov	r3, r5
     232:	fb08 f90c 	mul.w	r9, r8, ip
     236:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     23a:	45a9      	cmp	r9, r5
     23c:	d90a      	bls.n	254 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x54>
     23e:	197d      	adds	r5, r7, r5
     240:	bf2c      	ite	cs
     242:	2301      	movcs	r3, #1
     244:	2300      	movcc	r3, #0
     246:	45a9      	cmp	r9, r5
     248:	d902      	bls.n	250 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x50>
     24a:	2b00      	cmp	r3, #0
     24c:	f000 80d9 	beq.w	402 <CONFIG_FLASH_SIZE+0x2>
     250:	f10c 3cff 	add.w	ip, ip, #4294967295
     254:	eba5 0509 	sub.w	r5, r5, r9
     258:	b2a3      	uxth	r3, r4
     25a:	fbb5 f0fe 	udiv	r0, r5, lr
     25e:	fb0e 5510 	mls	r5, lr, r0, r5
     262:	fb08 f800 	mul.w	r8, r8, r0
     266:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     26a:	45a0      	cmp	r8, r4
     26c:	d905      	bls.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     26e:	193c      	adds	r4, r7, r4
     270:	d202      	bcs.n	278 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x78>
     272:	45a0      	cmp	r8, r4
     274:	f200 80c9 	bhi.w	40a <CONFIG_FLASH_SIZE+0xa>
     278:	3801      	subs	r0, #1
     27a:	eba4 0408 	sub.w	r4, r4, r8
     27e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     282:	e7bd      	b.n	200 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD>
     284:	428b      	cmp	r3, r1
     286:	d908      	bls.n	29a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1a>
     288:	2e00      	cmp	r6, #0
     28a:	f000 80b1 	beq.w	3f0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x170>
     28e:	2100      	movs	r1, #0
     290:	e9c6 0500 	strd	r0, r5, [r6]
     294:	4608      	mov	r0, r1
     296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     29a:	fab3 f183 	clz	r1, r3
     29e:	2900      	cmp	r1, #0
     2a0:	d146      	bne.n	330 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb0>
     2a2:	42ab      	cmp	r3, r5
     2a4:	f0c0 80a7 	bcc.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2a8:	4282      	cmp	r2, r0
     2aa:	f240 80a4 	bls.w	3f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x176>
     2ae:	4608      	mov	r0, r1
     2b0:	2e00      	cmp	r6, #0
     2b2:	d0aa      	beq.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     2b4:	e9c6 4a00 	strd	r4, sl, [r6]
     2b8:	e7a7      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     2ba:	f1c2 0020 	rsb	r0, r2, #32
     2be:	4097      	lsls	r7, r2
     2c0:	fa01 f302 	lsl.w	r3, r1, r2
     2c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2c8:	40c1      	lsrs	r1, r0
     2ca:	fa24 f500 	lsr.w	r5, r4, r0
     2ce:	fa1f f887 	uxth.w	r8, r7
     2d2:	4094      	lsls	r4, r2
     2d4:	431d      	orrs	r5, r3
     2d6:	fbb1 f0fe 	udiv	r0, r1, lr
     2da:	0c2b      	lsrs	r3, r5, #16
     2dc:	fb0e 1110 	mls	r1, lr, r0, r1
     2e0:	fb00 fc08 	mul.w	ip, r0, r8
     2e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2e8:	459c      	cmp	ip, r3
     2ea:	d909      	bls.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2ec:	18fb      	adds	r3, r7, r3
     2ee:	bf2c      	ite	cs
     2f0:	2101      	movcs	r1, #1
     2f2:	2100      	movcc	r1, #0
     2f4:	459c      	cmp	ip, r3
     2f6:	d902      	bls.n	2fe <CONFIG_PM_PARTITION_SIZE_PROVISION+0x7e>
     2f8:	2900      	cmp	r1, #0
     2fa:	f000 8095 	beq.w	428 <CONFIG_FLASH_SIZE+0x28>
     2fe:	3801      	subs	r0, #1
     300:	eba3 030c 	sub.w	r3, r3, ip
     304:	b2ad      	uxth	r5, r5
     306:	fbb3 f1fe 	udiv	r1, r3, lr
     30a:	fb0e 3311 	mls	r3, lr, r1, r3
     30e:	fb01 fc08 	mul.w	ip, r1, r8
     312:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     316:	45ac      	cmp	ip, r5
     318:	d905      	bls.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>
     31a:	197d      	adds	r5, r7, r5
     31c:	d202      	bcs.n	324 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa4>
     31e:	45ac      	cmp	ip, r5
     320:	f200 8089 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     324:	3901      	subs	r1, #1
     326:	eba5 030c 	sub.w	r3, r5, ip
     32a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     32e:	e77a      	b.n	226 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x26>
     330:	f1c1 0420 	rsb	r4, r1, #32
     334:	408b      	lsls	r3, r1
     336:	fa02 f701 	lsl.w	r7, r2, r1
     33a:	fa05 fc01 	lsl.w	ip, r5, r1
     33e:	40e2      	lsrs	r2, r4
     340:	fa20 f804 	lsr.w	r8, r0, r4
     344:	40e5      	lsrs	r5, r4
     346:	fa00 fe01 	lsl.w	lr, r0, r1
     34a:	4313      	orrs	r3, r2
     34c:	ea48 020c 	orr.w	r2, r8, ip
     350:	ea4f 4813 	mov.w	r8, r3, lsr #16
     354:	ea4f 4c12 	mov.w	ip, r2, lsr #16
     358:	fa1f f983 	uxth.w	r9, r3
     35c:	fbb5 faf8 	udiv	sl, r5, r8
     360:	fb08 551a 	mls	r5, r8, sl, r5
     364:	fb0a f009 	mul.w	r0, sl, r9
     368:	ea4c 4c05 	orr.w	ip, ip, r5, lsl #16
     36c:	4560      	cmp	r0, ip
     36e:	d90a      	bls.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     370:	eb13 0c0c 	adds.w	ip, r3, ip
     374:	bf2c      	ite	cs
     376:	2501      	movcs	r5, #1
     378:	2500      	movcc	r5, #0
     37a:	4560      	cmp	r0, ip
     37c:	d901      	bls.n	382 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x102>
     37e:	2d00      	cmp	r5, #0
     380:	d055      	beq.n	42e <CONFIG_FLASH_SIZE+0x2e>
     382:	f10a 3aff 	add.w	sl, sl, #4294967295
     386:	ebac 0c00 	sub.w	ip, ip, r0
     38a:	b292      	uxth	r2, r2
     38c:	fbbc f0f8 	udiv	r0, ip, r8
     390:	fb08 cc10 	mls	ip, r8, r0, ip
     394:	fb00 f909 	mul.w	r9, r0, r9
     398:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
     39c:	45e1      	cmp	r9, ip
     39e:	d905      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a0:	eb13 0c0c 	adds.w	ip, r3, ip
     3a4:	d201      	bcs.n	3aa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12a>
     3a6:	45e1      	cmp	r9, ip
     3a8:	d83b      	bhi.n	422 <CONFIG_FLASH_SIZE+0x22>
     3aa:	3801      	subs	r0, #1
     3ac:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     3b0:	ebac 0c09 	sub.w	ip, ip, r9
     3b4:	fba0 8907 	umull	r8, r9, r0, r7
     3b8:	45cc      	cmp	ip, r9
     3ba:	4645      	mov	r5, r8
     3bc:	464a      	mov	r2, r9
     3be:	d302      	bcc.n	3c6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x146>
     3c0:	d106      	bne.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c2:	45c6      	cmp	lr, r8
     3c4:	d204      	bcs.n	3d0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x150>
     3c6:	3801      	subs	r0, #1
     3c8:	ebb8 0507 	subs.w	r5, r8, r7
     3cc:	eb69 0203 	sbc.w	r2, r9, r3
     3d0:	b32e      	cbz	r6, 41e <CONFIG_FLASH_SIZE+0x1e>
     3d2:	ebbe 0305 	subs.w	r3, lr, r5
     3d6:	eb6c 0c02 	sbc.w	ip, ip, r2
     3da:	fa23 f201 	lsr.w	r2, r3, r1
     3de:	fa0c f404 	lsl.w	r4, ip, r4
     3e2:	fa2c f301 	lsr.w	r3, ip, r1
     3e6:	2100      	movs	r1, #0
     3e8:	4314      	orrs	r4, r2
     3ea:	e9c6 4300 	strd	r4, r3, [r6]
     3ee:	e70c      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     3f0:	4631      	mov	r1, r6
     3f2:	4630      	mov	r0, r6
     3f4:	e709      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     3f6:	1a84      	subs	r4, r0, r2
     3f8:	eb65 0303 	sbc.w	r3, r5, r3
     3fc:	2001      	movs	r0, #1
     3fe:	469a      	mov	sl, r3
     400:	e756      	b.n	2b0 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x30>
     402:	f1ac 0c02 	sub.w	ip, ip, #2
     406:	443d      	add	r5, r7
     408:	e724      	b.n	254 <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x54>
     40a:	3802      	subs	r0, #2
     40c:	443c      	add	r4, r7
     40e:	e734      	b.n	27a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0x7a>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e6ef      	b.n	1f6 <__udivmoddi4+0x82>
     416:	f1ae 0e02 	sub.w	lr, lr, #2
     41a:	443b      	add	r3, r7
     41c:	e6d9      	b.n	1d2 <__udivmoddi4+0x5e>
     41e:	4631      	mov	r1, r6
     420:	e6f3      	b.n	20a <CONFIG_PM_PARTITION_SIZE_MCUBOOT_PAD+0xa>
     422:	3802      	subs	r0, #2
     424:	449c      	add	ip, r3
     426:	e7c1      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     428:	3802      	subs	r0, #2
     42a:	443b      	add	r3, r7
     42c:	e768      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     42e:	f1aa 0a02 	sub.w	sl, sl, #2
     432:	449c      	add	ip, r3
     434:	e7a7      	b.n	386 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x106>
     436:	3902      	subs	r1, #2
     438:	443d      	add	r5, r7
     43a:	e774      	b.n	326 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa6>

0000043c <__aeabi_idiv0>:
     43c:	4770      	bx	lr
     43e:	bf00      	nop

00000440 <main>:
}
#endif/* defined(CONFIG_LOG) && !defined(CONFIG_LOG_IMMEDIATE) &&\
        !defined(CONFIG_LOG_PROCESS_THREAD) */

void main(void)
{
     440:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
     442:	4b31      	ldr	r3, [pc, #196]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     444:	4a31      	ldr	r2, [pc, #196]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
    int rc;
    fih_int fih_rc = FIH_FAILURE;

    MCUBOOT_WATCHDOG_FEED();

    BOOT_LOG_INF("Starting bootloader");
     446:	4832      	ldr	r0, [pc, #200]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     448:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
     44c:	2149      	movs	r1, #73	; 0x49
     44e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
     452:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
     456:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
     45a:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
     45e:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
     462:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
     466:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
     46a:	f005 fa18 	bl	589e <printk>

    os_heap_init();
     46e:	f000 f87d 	bl	56c <os_heap_init>
    ZEPHYR_BOOT_LOG_START();

    (void)rc;

#if (!defined(CONFIG_XTENSA) && defined(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL))
    if (!flash_device_get_binding(DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL)) {
     472:	4828      	ldr	r0, [pc, #160]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     474:	f000 f85e 	bl	534 <flash_device_get_binding>
     478:	b928      	cbnz	r0, 486 <FIH_LABEL_FIH_CALL_START_260>
        BOOT_LOG_ERR("Flash device %s not found",
     47a:	2145      	movs	r1, #69	; 0x45
     47c:	4a25      	ldr	r2, [pc, #148]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     47e:	4826      	ldr	r0, [pc, #152]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     480:	f005 fa0d 	bl	589e <printk>
		     DT_CHOSEN_ZEPHYR_FLASH_CONTROLLER_LABEL);
        while (1)
     484:	e7fe      	b.n	484 <main+0x44>

00000486 <FIH_LABEL_FIH_CALL_START_260>:
        wait_for_usb_dfu();
        BOOT_LOG_INF("USB DFU wait time elapsed");
    }
#endif

    FIH_CALL(boot_go, fih_rc, &rsp);
     486:	a801      	add	r0, sp, #4
     488:	f000 fcc6 	bl	e18 <boot_go>

0000048c <FIH_LABEL_FIH_CALL_END_273>:
    if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     48c:	4b23      	ldr	r3, [pc, #140]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     48e:	681b      	ldr	r3, [r3, #0]
     490:	4283      	cmp	r3, r0
     492:	d004      	beq.n	49e <FIH_LABEL_FIH_CALL_END_273+0x12>
        BOOT_LOG_ERR("Unable to find bootable image");
     494:	2145      	movs	r1, #69	; 0x45
     496:	4822      	ldr	r0, [pc, #136]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     498:	f005 fa01 	bl	589e <printk>
        FIH_PANIC;
     49c:	e7fe      	b.n	49c <FIH_LABEL_FIH_CALL_END_273+0x10>
    }

    BOOT_LOG_INF("Bootloader chainload address offset: 0x%x",
     49e:	2149      	movs	r1, #73	; 0x49
     4a0:	9a03      	ldr	r2, [sp, #12]
     4a2:	4820      	ldr	r0, [pc, #128]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     4a4:	f005 f9fb 	bl	589e <printk>
                 rsp.br_image_off);

    BOOT_LOG_INF("Jumping to the first image slot");
     4a8:	2149      	movs	r1, #73	; 0x49
     4aa:	481f      	ldr	r0, [pc, #124]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     4ac:	f005 f9f7 	bl	589e <printk>
/* There is only one instance of MCUBoot */
#define PROTECT_SIZE (PM_MCUBOOT_PRIMARY_ADDRESS - PM_MCUBOOT_ADDRESS)
#define PROTECT_ADDR PM_MCUBOOT_ADDRESS
#endif

    rc = fprotect_area(PROTECT_ADDR, PROTECT_SIZE);
     4b0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4b4:	2000      	movs	r0, #0
     4b6:	f002 feb9 	bl	322c <fprotect_area>

    if (rc != 0) {
     4ba:	b120      	cbz	r0, 4c6 <FIH_LABEL_FIH_CALL_END_273+0x3a>
        BOOT_LOG_ERR("Protect mcuboot flash failed, cancel startup.");
     4bc:	2145      	movs	r1, #69	; 0x45
     4be:	481b      	ldr	r0, [pc, #108]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4c0:	f005 f9ed 	bl	589e <printk>
        while (1)
     4c4:	e7fe      	b.n	4c4 <FIH_LABEL_FIH_CALL_END_273+0x38>
    rc = flash_device_base(rsp->br_flash_dev_id, &flash_base);
     4c6:	4669      	mov	r1, sp
     4c8:	f89d 0008 	ldrb.w	r0, [sp, #8]
     4cc:	f000 f83e 	bl	54c <flash_device_base>
    vt = (struct arm_vector_table *)(flash_base +
     4d0:	9b00      	ldr	r3, [sp, #0]
     4d2:	9c03      	ldr	r4, [sp, #12]
     4d4:	441c      	add	r4, r3
                                     rsp->br_hdr->ih_hdr_size);
     4d6:	9b01      	ldr	r3, [sp, #4]
     4d8:	891d      	ldrh	r5, [r3, #8]
                                     rsp->br_image_off +
     4da:	1966      	adds	r6, r4, r5
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     4dc:	f04f 0220 	mov.w	r2, #32
     4e0:	f3ef 8311 	mrs	r3, BASEPRI
     4e4:	f382 8811 	msr	BASEPRI, r2
     4e8:	f3bf 8f6f 	isb	sy
    sys_clock_disable();
     4ec:	f005 fd07 	bl	5efe <sys_clock_disable>
    nrf_cleanup_peripheral();
     4f0:	f000 ff30 	bl	1354 <nrf_cleanup_peripheral>
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
     4f4:	5963      	ldr	r3, [r4, r5]
     4f6:	f383 8808 	msr	MSP, r3
    ((void (*)(void))vt->reset)();
     4fa:	6873      	ldr	r3, [r6, #4]
     4fc:	4798      	blx	r3

    ZEPHYR_BOOT_LOG_STOP();

    do_boot(&rsp);

    BOOT_LOG_ERR("Never should get here");
     4fe:	2145      	movs	r1, #69	; 0x45
     500:	480b      	ldr	r0, [pc, #44]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     502:	f005 f9cc 	bl	589e <printk>
    while (1)
     506:	e7fe      	b.n	506 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e>
     508:	50018000 	.word	0x50018000
     50c:	6e524635 	.word	0x6e524635
     510:	00008694 	.word	0x00008694
     514:	000086ad 	.word	0x000086ad
     518:	000086c0 	.word	0x000086c0
     51c:	2001475c 	.word	0x2001475c
     520:	000086df 	.word	0x000086df
     524:	00008702 	.word	0x00008702
     528:	00008731 	.word	0x00008731
     52c:	00008756 	.word	0x00008756
     530:	00008789 	.word	0x00008789

00000534 <flash_device_get_binding>:
#endif

static const struct device *flash_dev;

const struct device *flash_device_get_binding(char *dev_name)
{
     534:	b510      	push	{r4, lr}
    if (!flash_dev) {
     536:	4c04      	ldr	r4, [pc, #16]	; (548 <flash_device_get_binding+0x14>)
     538:	6823      	ldr	r3, [r4, #0]
     53a:	b913      	cbnz	r3, 542 <flash_device_get_binding+0xe>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     53c:	f003 ffd6 	bl	44ec <z_impl_device_get_binding>
        flash_dev = device_get_binding(dev_name);
     540:	6020      	str	r0, [r4, #0]
    }
    return flash_dev;
}
     542:	6820      	ldr	r0, [r4, #0]
     544:	bd10      	pop	{r4, pc}
     546:	bf00      	nop
     548:	20014758 	.word	0x20014758

0000054c <flash_device_base>:

int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    if (fd_id != FLASH_DEVICE_ID) {
     54c:	4602      	mov	r2, r0
{
     54e:	b508      	push	{r3, lr}
    if (fd_id != FLASH_DEVICE_ID) {
     550:	b138      	cbz	r0, 562 <flash_device_base+0x16>
        BOOT_LOG_ERR("invalid flash ID %d; expected %d",
     552:	4805      	ldr	r0, [pc, #20]	; (568 <flash_device_base+0x1c>)
     554:	2300      	movs	r3, #0
     556:	2145      	movs	r1, #69	; 0x45
     558:	f005 f9a1 	bl	589e <printk>
                     fd_id, FLASH_DEVICE_ID);
        return -EINVAL;
     55c:	f06f 0015 	mvn.w	r0, #21
    }
    *ret = FLASH_DEVICE_BASE;
    return 0;
}
     560:	bd08      	pop	{r3, pc}
    *ret = FLASH_DEVICE_BASE;
     562:	6008      	str	r0, [r1, #0]
    return 0;
     564:	e7fc      	b.n	560 <flash_device_base+0x14>
     566:	bf00      	nop
     568:	000087ac 	.word	0x000087ac

0000056c <os_heap_init>:
/*
 * Initialize mbedtls to be able to use the local heap.
 */
void os_heap_init(void)
{
    mbedtls_memory_buffer_alloc_init(mempool, sizeof(mempool));
     56c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
     570:	4801      	ldr	r0, [pc, #4]	; (578 <os_heap_init+0xc>)
     572:	f003 babb 	b.w	3aec <mbedtls_memory_buffer_alloc_init>
     576:	bf00      	nop
     578:	2001563c 	.word	0x2001563c

0000057c <bootutil_img_validate>:
fih_int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
     57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t off;
    uint16_t len;
    uint16_t type;
    int sha256_valid = 0;
#ifdef EXPECTED_SIG_TLV
    fih_int valid_signature = FIH_FAILURE;
     580:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 77c <FIH_LABEL_FIH_CALL_END_644+0x34>
{
     584:	b0f9      	sub	sp, #484	; 0x1e4
#if defined(MCUBOOT_USE_MBED_TLS)
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
     586:	a838      	add	r0, sp, #224	; 0xe0
     588:	4617      	mov	r7, r2
     58a:	e9dd 4884 	ldrd	r4, r8, [sp, #528]	; 0x210
     58e:	461d      	mov	r5, r3
     590:	f8dd b208 	ldr.w	fp, [sp, #520]	; 0x208
    fih_int valid_signature = FIH_FAILURE;
     594:	f8d9 6000 	ldr.w	r6, [r9]
     598:	f007 fb68 	bl	7c6c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     59c:	2100      	movs	r1, #0
     59e:	a838      	add	r0, sp, #224	; 0xe0
     5a0:	f003 fbb4 	bl	3d0c <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
     5a4:	f8cd 900c 	str.w	r9, [sp, #12]
     5a8:	b13c      	cbz	r4, 5ba <bootutil_img_validate+0x3e>
     5aa:	f1b8 0f00 	cmp.w	r8, #0
     5ae:	dd04      	ble.n	5ba <bootutil_img_validate+0x3e>

static inline int bootutil_sha256_update(bootutil_sha256_context *ctx,
                                         const void *data,
                                         uint32_t data_len)
{
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     5b0:	4642      	mov	r2, r8
     5b2:	4621      	mov	r1, r4
     5b4:	a838      	add	r0, sp, #224	; 0xe0
     5b6:	f007 fb5d 	bl	7c74 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
     5ba:	f04f 0900 	mov.w	r9, #0
    size += hdr->ih_protect_tlv_size;
     5be:	897b      	ldrh	r3, [r7, #10]
    size = hdr_size = hdr->ih_hdr_size;
     5c0:	f8b7 8008 	ldrh.w	r8, [r7, #8]
     5c4:	4498      	add	r8, r3
    size += hdr->ih_protect_tlv_size;
     5c6:	68fb      	ldr	r3, [r7, #12]
     5c8:	4498      	add	r8, r3
    for (off = 0; off < size; off += blk_sz) {
     5ca:	45c8      	cmp	r8, r9
     5cc:	d84b      	bhi.n	666 <FIH_LABEL_FIH_CALL_END_310+0x10>
}

static inline int bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    return mbedtls_sha256_finish_ret(ctx, output);
     5ce:	a90d      	add	r1, sp, #52	; 0x34
     5d0:	a838      	add	r0, sp, #224	; 0xe0
     5d2:	f007 fb8c 	bl	7cee <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        goto out;
    }

    if (out_hash) {
     5d6:	9b86      	ldr	r3, [sp, #536]	; 0x218
     5d8:	b123      	cbz	r3, 5e4 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x8>
        memcpy(out_hash, hash, 32);
     5da:	2220      	movs	r2, #32
     5dc:	4618      	mov	r0, r3
     5de:	a90d      	add	r1, sp, #52	; 0x34
     5e0:	f005 fcc9 	bl	5f76 <memcpy>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
     5e4:	2300      	movs	r3, #0
     5e6:	462a      	mov	r2, r5
     5e8:	9300      	str	r3, [sp, #0]
     5ea:	4639      	mov	r1, r7
     5ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
     5f0:	a807      	add	r0, sp, #28
     5f2:	f004 fe9a 	bl	532a <bootutil_tlv_iter_begin>
    if (rc) {
     5f6:	4604      	mov	r4, r0
     5f8:	2800      	cmp	r0, #0
     5fa:	f040 80b5 	bne.w	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
    int sha256_valid = 0;
     5fe:	4680      	mov	r8, r0
    int key_id = -1;
     600:	f04f 37ff 	mov.w	r7, #4294967295
             * can be multiple signatures, each preceded by a key.
             */
#endif /* !MCUBOOT_HW_KEY */
        } else if (type == EXPECTED_SIG_TLV) {
            /* Ignore this signature if it is out of bounds. */
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     604:	f8df 9178 	ldr.w	r9, [pc, #376]	; 780 <FIH_LABEL_FIH_CALL_END_644+0x38>
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
     608:	f10d 0316 	add.w	r3, sp, #22
     60c:	aa05      	add	r2, sp, #20
     60e:	a906      	add	r1, sp, #24
     610:	a807      	add	r0, sp, #28
     612:	f004 fed6 	bl	53c2 <bootutil_tlv_iter_next>
        if (rc < 0) {
     616:	1e04      	subs	r4, r0, #0
     618:	f2c0 80a6 	blt.w	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
        } else if (rc > 0) {
     61c:	f040 8097 	bne.w	74e <FIH_LABEL_FIH_CALL_END_644+0x6>
        if (type == IMAGE_TLV_SHA256) {
     620:	f8bd a016 	ldrh.w	sl, [sp, #22]
     624:	f1ba 0f10 	cmp.w	sl, #16
     628:	d134      	bne.n	694 <FIH_LABEL_FIH_CALL_END_310+0x3e>
            if (len != sizeof(hash)) {
     62a:	f8bd 8014 	ldrh.w	r8, [sp, #20]
     62e:	f1b8 0f20 	cmp.w	r8, #32
     632:	f040 8097 	bne.w	764 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, sizeof(hash));
     636:	4643      	mov	r3, r8
     638:	4628      	mov	r0, r5
     63a:	9906      	ldr	r1, [sp, #24]
     63c:	aa38      	add	r2, sp, #224	; 0xe0
     63e:	f005 fb48 	bl	5cd2 <flash_area_read>
            if (rc) {
     642:	4604      	mov	r4, r0
     644:	2800      	cmp	r0, #0
     646:	f040 808f 	bne.w	768 <FIH_LABEL_FIH_CALL_END_644+0x20>

0000064a <FIH_LABEL_FIH_CALL_START_291>:
            FIH_CALL(boot_fih_memequal, fih_rc, hash, buf, sizeof(hash));
     64a:	4642      	mov	r2, r8
     64c:	a938      	add	r1, sp, #224	; 0xe0
     64e:	a80d      	add	r0, sp, #52	; 0x34
     650:	f004 ff2f 	bl	54b2 <boot_fih_memequal>
     654:	4604      	mov	r4, r0

00000656 <FIH_LABEL_FIH_CALL_END_310>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     656:	4b47      	ldr	r3, [pc, #284]	; (774 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
     658:	681b      	ldr	r3, [r3, #0]
     65a:	4283      	cmp	r3, r0
     65c:	f040 8084 	bne.w	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
            sha256_valid = 1;
     660:	f04f 0801 	mov.w	r8, #1
     664:	e7d0      	b.n	608 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x2c>
        blk_sz = size - off;
     666:	9a83      	ldr	r2, [sp, #524]	; 0x20c
     668:	eba8 0309 	sub.w	r3, r8, r9
        if (blk_sz > tmp_buf_sz) {
     66c:	429a      	cmp	r2, r3
     66e:	bf28      	it	cs
     670:	461a      	movcs	r2, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
     672:	4649      	mov	r1, r9
     674:	4613      	mov	r3, r2
     676:	4692      	mov	sl, r2
     678:	4628      	mov	r0, r5
     67a:	465a      	mov	r2, fp
     67c:	f005 fb29 	bl	5cd2 <flash_area_read>
        if (rc) {
     680:	4604      	mov	r4, r0
     682:	2800      	cmp	r0, #0
     684:	d170      	bne.n	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     686:	4652      	mov	r2, sl
     688:	4659      	mov	r1, fp
     68a:	a838      	add	r0, sp, #224	; 0xe0
     68c:	f007 faf2 	bl	7c74 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
     690:	44d1      	add	r9, sl
     692:	e79a      	b.n	5ca <bootutil_img_validate+0x4e>
        } else if (type == IMAGE_TLV_KEYHASH) {
     694:	f1ba 0f01 	cmp.w	sl, #1
     698:	d136      	bne.n	708 <FIH_LABEL_FIH_CALL_END_310+0xb2>
            if (len > 32) {
     69a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     69e:	2b20      	cmp	r3, #32
     6a0:	d860      	bhi.n	764 <FIH_LABEL_FIH_CALL_END_644+0x1c>
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     6a2:	4628      	mov	r0, r5
     6a4:	9906      	ldr	r1, [sp, #24]
     6a6:	aa38      	add	r2, sp, #224	; 0xe0
     6a8:	f005 fb13 	bl	5cd2 <flash_area_read>
            if (rc) {
     6ac:	4604      	mov	r4, r0
     6ae:	2800      	cmp	r0, #0
     6b0:	d15a      	bne.n	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
            key_id = bootutil_find_key(buf, len);
     6b2:	f89d a014 	ldrb.w	sl, [sp, #20]
    if (keyhash_len > 32) {
     6b6:	f1ba 0f20 	cmp.w	sl, #32
     6ba:	d903      	bls.n	6c4 <FIH_LABEL_FIH_CALL_END_310+0x6e>
        return -1;
     6bc:	f04f 34ff 	mov.w	r4, #4294967295
            key_id = bootutil_find_key(buf, len);
     6c0:	4627      	mov	r7, r4
     6c2:	e7a1      	b.n	608 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x2c>
    for (i = 0; i < bootutil_key_cnt; i++) {
     6c4:	f8d9 3000 	ldr.w	r3, [r9]
     6c8:	4f2b      	ldr	r7, [pc, #172]	; (778 <FIH_LABEL_FIH_CALL_END_644+0x30>)
     6ca:	9302      	str	r3, [sp, #8]
     6cc:	9b02      	ldr	r3, [sp, #8]
     6ce:	429c      	cmp	r4, r3
     6d0:	daf4      	bge.n	6bc <FIH_LABEL_FIH_CALL_END_310+0x66>
    mbedtls_sha256_init(ctx);
     6d2:	a81d      	add	r0, sp, #116	; 0x74
     6d4:	f007 faca 	bl	7c6c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     6d8:	2100      	movs	r1, #0
     6da:	a81d      	add	r0, sp, #116	; 0x74
     6dc:	f003 fb16 	bl	3d0c <mbedtls_sha256_starts_ret>
        bootutil_sha256_update(&sha256_ctx, key->key, *key->len);
     6e0:	687b      	ldr	r3, [r7, #4]
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     6e2:	a81d      	add	r0, sp, #116	; 0x74
     6e4:	681a      	ldr	r2, [r3, #0]
     6e6:	f857 1b08 	ldr.w	r1, [r7], #8
     6ea:	f007 fac3 	bl	7c74 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     6ee:	a915      	add	r1, sp, #84	; 0x54
     6f0:	a81d      	add	r0, sp, #116	; 0x74
     6f2:	f007 fafc 	bl	7cee <mbedtls_sha256_finish_ret>
        if (!memcmp(hash, keyhash, keyhash_len)) {
     6f6:	4652      	mov	r2, sl
     6f8:	a938      	add	r1, sp, #224	; 0xe0
     6fa:	a815      	add	r0, sp, #84	; 0x54
     6fc:	f005 fc2b 	bl	5f56 <memcmp>
     700:	2800      	cmp	r0, #0
     702:	d0dd      	beq.n	6c0 <FIH_LABEL_FIH_CALL_END_310+0x6a>
    for (i = 0; i < bootutil_key_cnt; i++) {
     704:	3401      	adds	r4, #1
     706:	e7e1      	b.n	6cc <FIH_LABEL_FIH_CALL_END_310+0x76>
        } else if (type == EXPECTED_SIG_TLV) {
     708:	f1ba 0f20 	cmp.w	sl, #32
     70c:	f47f af7c 	bne.w	608 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x2c>
            if (key_id < 0 || key_id >= bootutil_key_cnt) {
     710:	2f00      	cmp	r7, #0
     712:	db19      	blt.n	748 <FIH_LABEL_FIH_CALL_END_644>
     714:	f8d9 3000 	ldr.w	r3, [r9]
     718:	42bb      	cmp	r3, r7
     71a:	dd15      	ble.n	748 <FIH_LABEL_FIH_CALL_END_644>
                key_id = -1;
                continue;
            }
            if (!EXPECTED_SIG_LEN(len) || len > sizeof(buf)) {
     71c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
     724:	d11e      	bne.n	764 <FIH_LABEL_FIH_CALL_END_644+0x1c>
                rc = -1;
                goto out;
            }
            rc = LOAD_IMAGE_DATA(hdr, fap, off, buf, len);
     726:	4628      	mov	r0, r5
     728:	9906      	ldr	r1, [sp, #24]
     72a:	aa38      	add	r2, sp, #224	; 0xe0
     72c:	f005 fad1 	bl	5cd2 <flash_area_read>
            if (rc) {
     730:	4604      	mov	r4, r0
     732:	b9c8      	cbnz	r0, 768 <FIH_LABEL_FIH_CALL_END_644+0x20>

00000734 <FIH_LABEL_FIH_CALL_START_622>:
                goto out;
            }
            FIH_CALL(bootutil_verify_sig, valid_signature, hash, sizeof(hash),
     734:	b2ff      	uxtb	r7, r7
     736:	4651      	mov	r1, sl
     738:	f8bd 3014 	ldrh.w	r3, [sp, #20]
     73c:	9700      	str	r7, [sp, #0]
     73e:	aa38      	add	r2, sp, #224	; 0xe0
     740:	a80d      	add	r0, sp, #52	; 0x34
     742:	f000 f81f 	bl	784 <bootutil_verify_sig>
     746:	4606      	mov	r6, r0

00000748 <FIH_LABEL_FIH_CALL_END_644>:
                key_id = -1;
     748:	f04f 37ff 	mov.w	r7, #4294967295
     74c:	e75c      	b.n	608 <CONFIG_MBEDTLS_SSL_MAX_CONTENT_LEN+0x2c>
#endif /* MCUBOOT_HW_ROLLBACK_PROT */
        }
    }

    rc = !sha256_valid;
    if (rc) {
     74e:	f1b8 0f00 	cmp.w	r8, #0
     752:	d00d      	beq.n	770 <FIH_LABEL_FIH_CALL_END_644+0x28>
        goto out;
    }
#ifdef EXPECTED_SIG_TLV
    fih_rc = fih_int_encode_zero_equality(fih_not_eq(valid_signature,
     754:	4b07      	ldr	r3, [pc, #28]	; (774 <FIH_LABEL_FIH_CALL_END_644+0x2c>)
 * value that is not FIH_SUCCESS
 */
__attribute__((always_inline)) inline
fih_int fih_int_encode_zero_equality(int x)
{
    if (x) {
     756:	681b      	ldr	r3, [r3, #0]
     758:	42b3      	cmp	r3, r6
     75a:	d001      	beq.n	760 <FIH_LABEL_FIH_CALL_END_644+0x18>
        return FIH_FAILURE;
     75c:	9b03      	ldr	r3, [sp, #12]
     75e:	681e      	ldr	r6, [r3, #0]
                rc = -1;
     760:	4634      	mov	r4, r6
     762:	e001      	b.n	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
     764:	f04f 34ff 	mov.w	r4, #4294967295
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     768:	4620      	mov	r0, r4
     76a:	b079      	add	sp, #484	; 0x1e4
     76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     770:	2401      	movs	r4, #1
    FIH_RET(fih_rc);
     772:	e7f9      	b.n	768 <FIH_LABEL_FIH_CALL_END_644+0x20>
     774:	2001475c 	.word	0x2001475c
     778:	000082dc 	.word	0x000082dc
     77c:	20014500 	.word	0x20014500
     780:	000082d8 	.word	0x000082d8

00000784 <bootutil_verify_sig>:
}

fih_int
bootutil_verify_sig(uint8_t *hash, uint32_t hlen, uint8_t *sig, size_t slen,
  uint8_t key_id)
{
     784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     788:	4691      	mov	r9, r2
    int rc;
    fih_int fih_rc = FIH_FAILURE;
    uint8_t *cp;
    uint8_t *end;

    mbedtls_rsa_init(&ctx, 0, 0);
     78a:	2200      	movs	r2, #0
{
     78c:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
     790:	4698      	mov	r8, r3
    fih_int fih_rc = FIH_FAILURE;
     792:	4b6b      	ldr	r3, [pc, #428]	; (940 <FIH_LABEL_FIH_CALL_END_688+0x4>)
{
     794:	4607      	mov	r7, r0
     796:	468a      	mov	sl, r1
    mbedtls_rsa_init(&ctx, 0, 0);
     798:	a827      	add	r0, sp, #156	; 0x9c
     79a:	4611      	mov	r1, r2
{
     79c:	f89d 6350 	ldrb.w	r6, [sp, #848]	; 0x350
    fih_int fih_rc = FIH_FAILURE;
     7a0:	681d      	ldr	r5, [r3, #0]
    mbedtls_rsa_init(&ctx, 0, 0);
     7a2:	f007 fa1f 	bl	7be4 <mbedtls_rsa_init>

    cp = (uint8_t *)bootutil_keys[key_id].key;
     7a6:	4b67      	ldr	r3, [pc, #412]	; (944 <FIH_LABEL_FIH_CALL_END_688+0x8>)
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7a8:	aa8a      	add	r2, sp, #552	; 0x228
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7aa:	f853 4036 	ldr.w	r4, [r3, r6, lsl #3]
    end = cp + *bootutil_keys[key_id].len;
     7ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
     7b2:	685b      	ldr	r3, [r3, #4]
    cp = (uint8_t *)bootutil_keys[key_id].key;
     7b4:	9402      	str	r4, [sp, #8]
    end = cp + *bootutil_keys[key_id].len;
     7b6:	6819      	ldr	r1, [r3, #0]
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7b8:	a802      	add	r0, sp, #8
    end = cp + *bootutil_keys[key_id].len;
     7ba:	440c      	add	r4, r1
    if ((rc = mbedtls_asn1_get_tag(p, end, &len,
     7bc:	2330      	movs	r3, #48	; 0x30
     7be:	4621      	mov	r1, r4
     7c0:	f005 ff01 	bl	65c6 <mbedtls_asn1_get_tag>
     7c4:	bb68      	cbnz	r0, 822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
    if (*p + len != end) {
     7c6:	9b02      	ldr	r3, [sp, #8]
     7c8:	9a8a      	ldr	r2, [sp, #552]	; 0x228
     7ca:	4413      	add	r3, r2
     7cc:	429c      	cmp	r4, r3
     7ce:	d128      	bne.n	822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     7d0:	4621      	mov	r1, r4
     7d2:	aa29      	add	r2, sp, #164	; 0xa4
     7d4:	a802      	add	r0, sp, #8
     7d6:	f005 ff0a 	bl	65ee <mbedtls_asn1_get_mpi>
     7da:	bb10      	cbnz	r0, 822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
      (rc = mbedtls_asn1_get_mpi(p, end, &ctx->E)) != 0) {
     7dc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
     7e0:	465a      	mov	r2, fp
     7e2:	4621      	mov	r1, r4
     7e4:	a802      	add	r0, sp, #8
     7e6:	f005 ff02 	bl	65ee <mbedtls_asn1_get_mpi>
    if ((rc = mbedtls_asn1_get_mpi(p, end, &ctx->N)) != 0 ||
     7ea:	4606      	mov	r6, r0
     7ec:	b9c8      	cbnz	r0, 822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7ee:	a829      	add	r0, sp, #164	; 0xa4
     7f0:	f006 fae8 	bl	6dc4 <mbedtls_mpi_size>
    if (*p != end) {
     7f4:	9b02      	ldr	r3, [sp, #8]
    ctx->len = mbedtls_mpi_size(&ctx->N);
     7f6:	9028      	str	r0, [sp, #160]	; 0xa0
    if (*p != end) {
     7f8:	429c      	cmp	r4, r3
     7fa:	d112      	bne.n	822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
    rc = mbedtls_rsa_import(ctx, &ctx->N, NULL, NULL, NULL, &ctx->E);
     7fc:	4633      	mov	r3, r6
     7fe:	4632      	mov	r2, r6
     800:	e9cd 6b00 	strd	r6, fp, [sp]
     804:	a929      	add	r1, sp, #164	; 0xa4
     806:	a827      	add	r0, sp, #156	; 0x9c
     808:	f007 f9a8 	bl	7b5c <mbedtls_rsa_import>
    if (rc != 0) {
     80c:	b948      	cbnz	r0, 822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
    rc = mbedtls_rsa_check_pubkey(ctx);
     80e:	a827      	add	r0, sp, #156	; 0x9c
     810:	f003 fa1a 	bl	3c48 <mbedtls_rsa_check_pubkey>
    if (rc != 0) {
     814:	b928      	cbnz	r0, 822 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x22>
    ctx->len = mbedtls_mpi_size(&ctx->N);
     816:	a829      	add	r0, sp, #164	; 0xa4
     818:	f006 fad4 	bl	6dc4 <mbedtls_mpi_size>

    rc = bootutil_parse_rsakey(&ctx, &cp, end);
    if (rc || slen != ctx.len) {
     81c:	4580      	cmp	r8, r0
    ctx->len = mbedtls_mpi_size(&ctx->N);
     81e:	9028      	str	r0, [sp, #160]	; 0xa0
    if (rc || slen != ctx.len) {
     820:	d00a      	beq.n	838 <FIH_LABEL_FIH_CALL_START_231>
        mbedtls_rsa_free(&ctx);
     822:	a827      	add	r0, sp, #156	; 0x9c
     824:	f007 f9e9 	bl	7bfa <mbedtls_rsa_free>
        goto out;
    }
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);

out:
    mbedtls_rsa_free(&ctx);
     828:	a827      	add	r0, sp, #156	; 0x9c
     82a:	f007 f9e6 	bl	7bfa <mbedtls_rsa_free>

    FIH_RET(fih_rc);
}
     82e:	4628      	mov	r0, r5
     830:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
     834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000838 <FIH_LABEL_FIH_CALL_START_231>:
    if (ctx->len != PSS_EMLEN || PSS_EMLEN > MBEDTLS_MPI_MAX_SIZE) {
     838:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
     83c:	d002      	beq.n	844 <FIH_LABEL_FIH_CALL_END_292+0x2>
     83e:	f04f 35ff 	mov.w	r5, #4294967295

00000842 <FIH_LABEL_FIH_CALL_END_292>:
    FIH_CALL(bootutil_cmp_rsasig, fih_rc, &ctx, hash, hlen, sig);
     842:	e7f1      	b.n	828 <CONFIG_BOOT_SIGNATURE_TYPE_RSA_LEN+0x28>
    if (hlen != PSS_HLEN) {
     844:	f1ba 0f20 	cmp.w	sl, #32
     848:	d1f9      	bne.n	83e <FIH_LABEL_FIH_CALL_START_231+0x6>
    if (mbedtls_rsa_public(ctx, sig, em)) {
     84a:	4649      	mov	r1, r9
     84c:	aa8a      	add	r2, sp, #552	; 0x228
     84e:	a827      	add	r0, sp, #156	; 0x9c
     850:	f003 fa1e 	bl	3c90 <mbedtls_rsa_public>
     854:	4604      	mov	r4, r0
     856:	2800      	cmp	r0, #0
     858:	d1f1      	bne.n	83e <FIH_LABEL_FIH_CALL_START_231+0x6>
    if (em[PSS_EMLEN - 1] != 0xbc) {
     85a:	f89d 3327 	ldrb.w	r3, [sp, #807]	; 0x327
     85e:	2bbc      	cmp	r3, #188	; 0xbc
     860:	d1ed      	bne.n	83e <FIH_LABEL_FIH_CALL_START_231+0x6>
    uint8_t counter[4] = { 0, 0, 0, 0 };
     862:	f50d 78a4 	add.w	r8, sp, #328	; 0x148
    int count = PSS_MASK_LEN;
     866:	26df      	movs	r6, #223	; 0xdf
     868:	4645      	mov	r5, r8
    uint8_t counter[4] = { 0, 0, 0, 0 };
     86a:	9003      	str	r0, [sp, #12]
    mbedtls_sha256_init(ctx);
     86c:	a80c      	add	r0, sp, #48	; 0x30
     86e:	f007 f9fd 	bl	7c6c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     872:	2100      	movs	r1, #0
     874:	a80c      	add	r0, sp, #48	; 0x30
     876:	f003 fa49 	bl	3d0c <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     87a:	2220      	movs	r2, #32
     87c:	f20d 3107 	addw	r1, sp, #775	; 0x307
     880:	a80c      	add	r0, sp, #48	; 0x30
     882:	f007 f9f7 	bl	7c74 <mbedtls_sha256_update_ret>
     886:	2204      	movs	r2, #4
     888:	a903      	add	r1, sp, #12
     88a:	a80c      	add	r0, sp, #48	; 0x30
     88c:	f007 f9f2 	bl	7c74 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     890:	a904      	add	r1, sp, #16
     892:	a80c      	add	r0, sp, #48	; 0x30
     894:	f007 fa2b 	bl	7cee <mbedtls_sha256_finish_ret>
        if (bytes > count)
     898:	2e1f      	cmp	r6, #31
     89a:	bfd4      	ite	le
     89c:	46b1      	movle	r9, r6
     89e:	f04f 0920 	movgt.w	r9, #32
        counter[3]++;
     8a2:	f89d 300f 	ldrb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8a6:	4640      	mov	r0, r8
        counter[3]++;
     8a8:	3301      	adds	r3, #1
        memcpy(mask, htmp, bytes);
     8aa:	464a      	mov	r2, r9
     8ac:	a904      	add	r1, sp, #16
        count -= bytes;
     8ae:	eba6 0609 	sub.w	r6, r6, r9
        counter[3]++;
     8b2:	f88d 300f 	strb.w	r3, [sp, #15]
        memcpy(mask, htmp, bytes);
     8b6:	f005 fb5e 	bl	5f76 <memcpy>
    while (count > 0) {
     8ba:	2e00      	cmp	r6, #0
        mask += bytes;
     8bc:	44c8      	add	r8, r9
    while (count > 0) {
     8be:	dcd5      	bgt.n	86c <FIH_LABEL_FIH_CALL_END_292+0x2a>
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8c0:	4628      	mov	r0, r5
     8c2:	462a      	mov	r2, r5
     8c4:	23df      	movs	r3, #223	; 0xdf
     8c6:	ae8a      	add	r6, sp, #552	; 0x228
        db_mask[i] ^= em[i];
     8c8:	7811      	ldrb	r1, [r2, #0]
     8ca:	f816 cb01 	ldrb.w	ip, [r6], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8ce:	3b01      	subs	r3, #1
        db_mask[i] ^= em[i];
     8d0:	ea81 010c 	eor.w	r1, r1, ip
     8d4:	f802 1b01 	strb.w	r1, [r2], #1
    for (i = 0; i < PSS_MASK_LEN; i++) {
     8d8:	d1f6      	bne.n	8c8 <FIH_LABEL_FIH_CALL_END_292+0x86>
    db_mask[0] &= 0x7F;
     8da:	782b      	ldrb	r3, [r5, #0]
     8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     8e0:	702b      	strb	r3, [r5, #0]
        if (db_mask[i] != 0) {
     8e2:	f810 6b01 	ldrb.w	r6, [r0], #1
     8e6:	2e00      	cmp	r6, #0
     8e8:	d1a9      	bne.n	83e <FIH_LABEL_FIH_CALL_START_231+0x6>
    for (i = 0; i < PSS_MASK_ZERO_COUNT; i++) {
     8ea:	3401      	adds	r4, #1
     8ec:	2cbe      	cmp	r4, #190	; 0xbe
     8ee:	d1f8      	bne.n	8e2 <FIH_LABEL_FIH_CALL_END_292+0xa0>
    if (db_mask[PSS_MASK_ONE_POS] != 1) {
     8f0:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
     8f4:	2b01      	cmp	r3, #1
     8f6:	d1a2      	bne.n	83e <FIH_LABEL_FIH_CALL_START_231+0x6>
    mbedtls_sha256_init(ctx);
     8f8:	a80c      	add	r0, sp, #48	; 0x30
     8fa:	f007 f9b7 	bl	7c6c <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
     8fe:	4631      	mov	r1, r6
     900:	a80c      	add	r0, sp, #48	; 0x30
     902:	f003 fa03 	bl	3d0c <mbedtls_sha256_starts_ret>
    return mbedtls_sha256_update_ret(ctx, data, data_len);
     906:	2208      	movs	r2, #8
     908:	490f      	ldr	r1, [pc, #60]	; (948 <FIH_LABEL_FIH_CALL_END_688+0xc>)
     90a:	a80c      	add	r0, sp, #48	; 0x30
     90c:	f007 f9b2 	bl	7c74 <mbedtls_sha256_update_ret>
     910:	4639      	mov	r1, r7
     912:	2220      	movs	r2, #32
     914:	a80c      	add	r0, sp, #48	; 0x30
     916:	f007 f9ad 	bl	7c74 <mbedtls_sha256_update_ret>
     91a:	2220      	movs	r2, #32
     91c:	f20d 2107 	addw	r1, sp, #519	; 0x207
     920:	a80c      	add	r0, sp, #48	; 0x30
     922:	f007 f9a7 	bl	7c74 <mbedtls_sha256_update_ret>
    return mbedtls_sha256_finish_ret(ctx, output);
     926:	a904      	add	r1, sp, #16
     928:	a80c      	add	r0, sp, #48	; 0x30
     92a:	f007 f9e0 	bl	7cee <mbedtls_sha256_finish_ret>

0000092e <FIH_LABEL_FIH_CALL_START_667>:
    FIH_CALL(boot_fih_memequal, fih_rc, h2, &em[PSS_HASH_OFFSET], PSS_HLEN);
     92e:	2220      	movs	r2, #32
     930:	f20d 3107 	addw	r1, sp, #775	; 0x307
     934:	a804      	add	r0, sp, #16
     936:	f004 fdbc 	bl	54b2 <boot_fih_memequal>
     93a:	4605      	mov	r5, r0

0000093c <FIH_LABEL_FIH_CALL_END_688>:
    if (rc) {
     93c:	e781      	b.n	842 <FIH_LABEL_FIH_CALL_END_292>
     93e:	bf00      	nop
     940:	20014500 	.word	0x20014500
     944:	000082dc 	.word	0x000082dc
     948:	000087d2 	.word	0x000087d2

0000094c <boot_read_swap_size>:
    return -1;
}

int
boot_read_swap_size(int image_index, uint32_t *swap_size)
{
     94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint8_t areas[2] = {
     950:	2303      	movs	r3, #3
{
     952:	b086      	sub	sp, #24
     954:	460d      	mov	r5, r1
     956:	466f      	mov	r7, sp
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     958:	2600      	movs	r6, #0
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     95a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 9c8 <boot_read_swap_size+0x7c>
    uint8_t areas[2] = {
     95e:	f8ad 3000 	strh.w	r3, [sp]
        rc = flash_area_open(areas[i], fap);
     962:	f817 0b01 	ldrb.w	r0, [r7], #1
     966:	a901      	add	r1, sp, #4
     968:	f000 ffba 	bl	18e0 <flash_area_open>
        if (rc != 0) {
     96c:	4604      	mov	r4, r0
     96e:	b9d8      	cbnz	r0, 9a8 <boot_read_swap_size+0x5c>
        off = boot_magic_off(*fap);
     970:	9801      	ldr	r0, [sp, #4]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     972:	2310      	movs	r3, #16
    return fap->fa_size - BOOT_MAGIC_SZ;
     974:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
     976:	aa02      	add	r2, sp, #8
     978:	3910      	subs	r1, #16
     97a:	f005 f9aa 	bl	5cd2 <flash_area_read>
        if (rc != 0) {
     97e:	4604      	mov	r4, r0
     980:	b128      	cbz	r0, 98e <boot_read_swap_size+0x42>

    rc = boot_find_status(image_index, &fap);
    if (rc == 0) {
        off = boot_swap_size_off(fap);
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
        flash_area_close(fap);
     982:	9801      	ldr	r0, [sp, #4]
     984:	f005 f9a4 	bl	5cd0 <flash_area_close>
     988:	e00e      	b.n	9a8 <boot_read_swap_size+0x5c>
     98a:	2601      	movs	r6, #1
     98c:	e7e9      	b.n	962 <boot_read_swap_size+0x16>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
     98e:	2210      	movs	r2, #16
     990:	4641      	mov	r1, r8
     992:	a802      	add	r0, sp, #8
     994:	f005 fadf 	bl	5f56 <memcmp>
     998:	b150      	cbz	r0, 9b0 <boot_read_swap_size+0x64>
        flash_area_close(*fap);
     99a:	9801      	ldr	r0, [sp, #4]
     99c:	f005 f998 	bl	5cd0 <flash_area_close>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
     9a0:	2e00      	cmp	r6, #0
     9a2:	d0f2      	beq.n	98a <boot_read_swap_size+0x3e>
    return -1;
     9a4:	f04f 34ff 	mov.w	r4, #4294967295
    }

    return rc;
}
     9a8:	4620      	mov	r0, r4
     9aa:	b006      	add	sp, #24
     9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
     9b0:	9801      	ldr	r0, [sp, #4]
     9b2:	f005 fd41 	bl	6438 <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
     9b6:	2304      	movs	r3, #4
     9b8:	f1a0 0108 	sub.w	r1, r0, #8
     9bc:	462a      	mov	r2, r5
     9be:	9801      	ldr	r0, [sp, #4]
     9c0:	f005 f987 	bl	5cd2 <flash_area_read>
     9c4:	4604      	mov	r4, r0
     9c6:	e7dc      	b.n	982 <boot_read_swap_size+0x36>
     9c8:	000084d0 	.word	0x000084d0

000009cc <boot_validate_slot.isra.0>:
 *         FIH_SUCCESS                      if image was successfully validated
 *         1 (or its fih_int encoded form)  if no bootloable image was found
 *         FIH_FAILURE                      on any errors
 */
static fih_int
boot_validate_slot(struct boot_loader_state *state, int slot,
     9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                   struct boot_status *bs)
{
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    fih_int fih_rc = FIH_FAILURE;
     9d0:	4b38      	ldr	r3, [pc, #224]	; (ab4 <FIH_LABEL_FIH_CALL_END_453+0x80>)
boot_validate_slot(struct boot_loader_state *state, int slot,
     9d2:	b088      	sub	sp, #32
     9d4:	4606      	mov	r6, r0
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9d6:	2000      	movs	r0, #0
boot_validate_slot(struct boot_loader_state *state, int slot,
     9d8:	460d      	mov	r5, r1
    fih_int fih_rc = FIH_FAILURE;
     9da:	681c      	ldr	r4, [r3, #0]
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9dc:	f004 fc9c 	bl	5318 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     9e0:	a906      	add	r1, sp, #24
     9e2:	b2c0      	uxtb	r0, r0
     9e4:	f000 ff7c 	bl	18e0 <flash_area_open>
    if (rc != 0) {
     9e8:	2800      	cmp	r0, #0
     9ea:	d157      	bne.n	a9c <FIH_LABEL_FIH_CALL_END_453+0x68>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     9ec:	4629      	mov	r1, r5
     9ee:	f004 fc93 	bl	5318 <flash_area_id_from_multi_image_slot>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
     9f2:	242c      	movs	r4, #44	; 0x2c
    rc = flash_area_open(area_id, &fap);
     9f4:	a907      	add	r1, sp, #28
     9f6:	b2c0      	uxtb	r0, r0
     9f8:	fb04 6405 	mla	r4, r4, r5, r6
     9fc:	f000 ff70 	bl	18e0 <flash_area_open>
    if (rc != 0) {
     a00:	2800      	cmp	r0, #0
     a02:	d036      	beq.n	a72 <FIH_LABEL_FIH_CALL_END_453+0x3e>
        FIH_RET(fih_rc);
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
     a04:	f04f 082c 	mov.w	r8, #44	; 0x2c
     a08:	fb08 f805 	mul.w	r8, r8, r5
     a0c:	eb06 0708 	add.w	r7, r6, r8
     a10:	6939      	ldr	r1, [r7, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
     a12:	f011 0110 	ands.w	r1, r1, #16
     a16:	d137      	bne.n	a88 <FIH_LABEL_FIH_CALL_END_453+0x54>

00000a18 <FIH_LABEL_FIH_CALL_START_397>:
    FIH_CALL(bootutil_img_validate, fih_rc, BOOT_CURR_ENC(state), image_index,
     a18:	f44f 7380 	mov.w	r3, #256	; 0x100
     a1c:	9301      	str	r3, [sp, #4]
     a1e:	4b26      	ldr	r3, [pc, #152]	; (ab8 <FIH_LABEL_FIH_CALL_END_453+0x84>)
     a20:	4622      	mov	r2, r4
     a22:	9300      	str	r3, [sp, #0]
     a24:	4608      	mov	r0, r1
     a26:	e9cd 1103 	strd	r1, r1, [sp, #12]
     a2a:	9b06      	ldr	r3, [sp, #24]
     a2c:	9102      	str	r1, [sp, #8]
     a2e:	f7ff fda5 	bl	57c <bootutil_img_validate>
     a32:	4604      	mov	r4, r0

00000a34 <FIH_LABEL_FIH_CALL_END_453>:
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a34:	4b21      	ldr	r3, [pc, #132]	; (abc <FIH_LABEL_FIH_CALL_END_453+0x88>)
     a36:	f856 2008 	ldr.w	r2, [r6, r8]
        }
    }
#endif

    FIH_CALL(boot_image_check, fih_rc, state, hdr, fap, bs);
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a3a:	9806      	ldr	r0, [sp, #24]
    if (hdr->ih_magic != IMAGE_MAGIC) {
     a3c:	429a      	cmp	r2, r3
     a3e:	d10c      	bne.n	a5a <FIH_LABEL_FIH_CALL_END_453+0x26>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
     a40:	893a      	ldrh	r2, [r7, #8]
     a42:	68fb      	ldr	r3, [r7, #12]
    if (a > UINT32_MAX - b) {
     a44:	43d1      	mvns	r1, r2
     a46:	428b      	cmp	r3, r1
     a48:	d807      	bhi.n	a5a <FIH_LABEL_FIH_CALL_END_453+0x26>
        *dest = a + b;
     a4a:	4413      	add	r3, r2
    if (size >= fap->fa_size) {
     a4c:	6882      	ldr	r2, [r0, #8]
     a4e:	4293      	cmp	r3, r2
     a50:	d203      	bcs.n	a5a <FIH_LABEL_FIH_CALL_END_453+0x26>
    if (!boot_is_header_valid(hdr, fap) || fih_not_eq(fih_rc, FIH_SUCCESS)) {
     a52:	4b1b      	ldr	r3, [pc, #108]	; (ac0 <FIH_LABEL_FIH_CALL_END_453+0x8c>)
     a54:	681b      	ldr	r3, [r3, #0]
     a56:	42a3      	cmp	r3, r4
     a58:	d01d      	beq.n	a96 <FIH_LABEL_FIH_CALL_END_453+0x62>
        if ((slot != BOOT_PRIMARY_SLOT) || ARE_SLOTS_EQUIVALENT()) {
     a5a:	b345      	cbz	r5, aae <FIH_LABEL_FIH_CALL_END_453+0x7a>
            flash_area_erase(fap, 0, fap->fa_size);
     a5c:	6882      	ldr	r2, [r0, #8]
     a5e:	2100      	movs	r1, #0
     a60:	f005 f97d 	bl	5d5e <flash_area_erase>
            /* Image is invalid, erase it to prevent further unnecessary
             * attempts to validate and boot it.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     a64:	4a17      	ldr	r2, [pc, #92]	; (ac4 <FIH_LABEL_FIH_CALL_END_453+0x90>)
     a66:	2145      	movs	r1, #69	; 0x45
     a68:	4817      	ldr	r0, [pc, #92]	; (ac8 <FIH_LABEL_FIH_CALL_END_453+0x94>)
     a6a:	f004 ff18 	bl	589e <printk>
        fih_rc = fih_int_encode(1);
     a6e:	2401      	movs	r4, #1
     a70:	e011      	b.n	a96 <FIH_LABEL_FIH_CALL_END_453+0x62>
    erased_val = flash_area_erased_val(fap);
     a72:	9807      	ldr	r0, [sp, #28]
     a74:	f005 f9a2 	bl	5dbc <flash_area_erased_val>
     a78:	4607      	mov	r7, r0
    flash_area_close(fap);
     a7a:	9807      	ldr	r0, [sp, #28]
     a7c:	f005 f928 	bl	5cd0 <flash_area_close>
boot_data_is_set_to(uint8_t val, void *data, size_t len)
     a80:	1e63      	subs	r3, r4, #1
     a82:	1ce2      	adds	r2, r4, #3
    for (i = 0; i < len; i++) {
     a84:	4293      	cmp	r3, r2
     a86:	d10d      	bne.n	aa4 <FIH_LABEL_FIH_CALL_END_453+0x70>
        if (slot != BOOT_PRIMARY_SLOT) {
     a88:	2d00      	cmp	r5, #0
     a8a:	d0f0      	beq.n	a6e <FIH_LABEL_FIH_CALL_END_453+0x3a>
            swap_erase_trailer_sectors(state, fap);
     a8c:	4630      	mov	r0, r6
     a8e:	9906      	ldr	r1, [sp, #24]
     a90:	f004 fe0f 	bl	56b2 <swap_erase_trailer_sectors>
        fih_rc = fih_int_encode(1);
     a94:	462c      	mov	r4, r5
        fih_rc = fih_int_encode(1);
        goto out;
    }

out:
    flash_area_close(fap);
     a96:	9806      	ldr	r0, [sp, #24]
     a98:	f005 f91a 	bl	5cd0 <flash_area_close>

    FIH_RET(fih_rc);
}
     a9c:	4620      	mov	r0, r4
     a9e:	b008      	add	sp, #32
     aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (val != p[i]) {
     aa4:	f813 1f01 	ldrb.w	r1, [r3, #1]!
     aa8:	42b9      	cmp	r1, r7
     aaa:	d0eb      	beq.n	a84 <FIH_LABEL_FIH_CALL_END_453+0x50>
     aac:	e7aa      	b.n	a04 <boot_validate_slot.isra.0+0x38>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
     aae:	4a07      	ldr	r2, [pc, #28]	; (acc <FIH_LABEL_FIH_CALL_END_453+0x98>)
     ab0:	e7d9      	b.n	a66 <FIH_LABEL_FIH_CALL_END_453+0x32>
     ab2:	bf00      	nop
     ab4:	20014500 	.word	0x20014500
     ab8:	2001723c 	.word	0x2001723c
     abc:	96f3b83d 	.word	0x96f3b83d
     ac0:	2001475c 	.word	0x2001475c
     ac4:	000087da 	.word	0x000087da
     ac8:	000087ec 	.word	0x000087ec
     acc:	000087e4 	.word	0x000087e4

00000ad0 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
     ad0:	b573      	push	{r0, r1, r4, r5, r6, lr}
     ad2:	460d      	mov	r5, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
     ad4:	2100      	movs	r1, #0
{
     ad6:	4604      	mov	r4, r0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
     ad8:	4628      	mov	r0, r5
    size = copy_size = 0;
     ada:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
     ade:	f004 fda7 	bl	5630 <boot_status_is_reset>
     ae2:	b330      	cbz	r0, b32 <boot_swap_image+0x62>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     ae4:	4e16      	ldr	r6, [pc, #88]	; (b40 <boot_swap_image+0x70>)
     ae6:	6822      	ldr	r2, [r4, #0]
     ae8:	42b2      	cmp	r2, r6
     aea:	d103      	bne.n	af4 <boot_swap_image+0x24>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
     aec:	4620      	mov	r0, r4
     aee:	aa01      	add	r2, sp, #4
     af0:	f004 fd16 	bl	5520 <boot_read_image_size>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
     af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     af6:	42b3      	cmp	r3, r6
     af8:	d104      	bne.n	b04 <boot_swap_image+0x34>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
     afa:	466a      	mov	r2, sp
     afc:	2101      	movs	r1, #1
     afe:	4620      	mov	r0, r4
     b00:	f004 fd0e 	bl	5520 <boot_read_image_size>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
     b04:	e9dd 3200 	ldrd	r3, r2, [sp]
     b08:	4293      	cmp	r3, r2
            copy_size = size;
     b0a:	bf88      	it	hi
     b0c:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
     b0e:	9b01      	ldr	r3, [sp, #4]
     b10:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
     b12:	9a01      	ldr	r2, [sp, #4]
     b14:	4629      	mov	r1, r5
     b16:	4620      	mov	r0, r4
     b18:	f000 fb20 	bl	115c <swap_run>

#ifdef MCUBOOT_VALIDATE_PRIMARY_SLOT
    extern int boot_status_fails;
    if (boot_status_fails > 0) {
     b1c:	4b09      	ldr	r3, [pc, #36]	; (b44 <boot_swap_image+0x74>)
     b1e:	681a      	ldr	r2, [r3, #0]
     b20:	2a00      	cmp	r2, #0
     b22:	dd03      	ble.n	b2c <boot_swap_image+0x5c>
        BOOT_LOG_WRN("%d status write fails performing the swap",
     b24:	2157      	movs	r1, #87	; 0x57
     b26:	4808      	ldr	r0, [pc, #32]	; (b48 <boot_swap_image+0x78>)
     b28:	f004 feb9 	bl	589e <printk>
                     boot_status_fails);
    }
#endif

    return 0;
}
     b2c:	2000      	movs	r0, #0
     b2e:	b002      	add	sp, #8
     b30:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
     b32:	f105 0108 	add.w	r1, r5, #8
     b36:	f7ff ff09 	bl	94c <boot_read_swap_size>
        copy_size = bs->swap_size;
     b3a:	68ab      	ldr	r3, [r5, #8]
     b3c:	9301      	str	r3, [sp, #4]
     b3e:	e7e8      	b.n	b12 <boot_swap_image+0x42>
     b40:	96f3b83d 	.word	0x96f3b83d
     b44:	20014fc0 	.word	0x20014fc0
     b48:	00008814 	.word	0x00008814

00000b4c <boot_copy_region>:
{
     b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b50:	4688      	mov	r8, r1
     b52:	4691      	mov	r9, r2
     b54:	469a      	mov	sl, r3
    bytes_copied = 0;
     b56:	2600      	movs	r6, #0
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b58:	f8df b070 	ldr.w	fp, [pc, #112]	; bcc <boot_copy_region+0x80>
     b5c:	4c19      	ldr	r4, [pc, #100]	; (bc4 <boot_copy_region+0x78>)
     b5e:	4d1a      	ldr	r5, [pc, #104]	; (bc8 <boot_copy_region+0x7c>)
    while (bytes_copied < sz) {
     b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b62:	429e      	cmp	r6, r3
     b64:	d301      	bcc.n	b6a <boot_copy_region+0x1e>
    return 0;
     b66:	2000      	movs	r0, #0
     b68:	e00f      	b.n	b8a <boot_copy_region+0x3e>
        if (sz - bytes_copied > sizeof buf) {
     b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b6c:	4640      	mov	r0, r8
        if (sz - bytes_copied > sizeof buf) {
     b6e:	1b9f      	subs	r7, r3, r6
     b70:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
     b74:	bf28      	it	cs
     b76:	f44f 6780 	movcs.w	r7, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
     b7a:	4a14      	ldr	r2, [pc, #80]	; (bcc <boot_copy_region+0x80>)
     b7c:	463b      	mov	r3, r7
     b7e:	eb06 010a 	add.w	r1, r6, sl
     b82:	f005 f8a6 	bl	5cd2 <flash_area_read>
        if (rc != 0) {
     b86:	b110      	cbz	r0, b8e <boot_copy_region+0x42>
            return BOOT_EFLASH;
     b88:	2001      	movs	r0, #1
}
     b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
     b8e:	990a      	ldr	r1, [sp, #40]	; 0x28
     b90:	463b      	mov	r3, r7
     b92:	465a      	mov	r2, fp
     b94:	4648      	mov	r0, r9
     b96:	1871      	adds	r1, r6, r1
     b98:	f005 f8b8 	bl	5d0c <flash_area_write>
        if (rc != 0) {
     b9c:	2800      	cmp	r0, #0
     b9e:	d1f3      	bne.n	b88 <boot_copy_region+0x3c>
     ba0:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        bytes_copied += chunk_sz;
     ba4:	443e      	add	r6, r7
     ba6:	f8c4 5604 	str.w	r5, [r4, #1540]	; 0x604
     baa:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
     bae:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
     bb2:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
     bb6:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
     bba:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
     bbe:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
        MCUBOOT_WATCHDOG_FEED();
     bc2:	e7cd      	b.n	b60 <boot_copy_region+0x14>
     bc4:	50018000 	.word	0x50018000
     bc8:	6e524635 	.word	0x6e524635
     bcc:	20016e3c 	.word	0x20016e3c

00000bd0 <context_boot_go>:
    }
}

fih_int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
     bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    size_t slot;
    struct boot_status bs;
    int rc = -1;
    fih_int fih_rc = FIH_FAILURE;
     bd4:	4b88      	ldr	r3, [pc, #544]	; (df8 <FIH_LABEL_FIH_CALL_END_2440+0x40>)
{
     bd6:	4604      	mov	r4, r0
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
     bd8:	2260      	movs	r2, #96	; 0x60
{
     bda:	b085      	sub	sp, #20
     bdc:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
     bde:	2100      	movs	r1, #0
    fih_int fih_rc = FIH_FAILURE;
     be0:	681e      	ldr	r6, [r3, #0]
    memset(state, 0, sizeof(struct boot_loader_state));
     be2:	f005 f9f3 	bl	5fcc <memset>

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     be6:	2100      	movs	r1, #0
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     be8:	4b84      	ldr	r3, [pc, #528]	; (dfc <FIH_LABEL_FIH_CALL_END_2440+0x44>)
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bea:	4608      	mov	r0, r1
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
     bec:	6263      	str	r3, [r4, #36]	; 0x24
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
     bee:	4b84      	ldr	r3, [pc, #528]	; (e00 <FIH_LABEL_FIH_CALL_END_2440+0x48>)
     bf0:	6523      	str	r3, [r4, #80]	; 0x50
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     bf2:	f004 fb91 	bl	5318 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     bf6:	f104 0120 	add.w	r1, r4, #32
     bfa:	b2c0      	uxtb	r0, r0
     bfc:	f000 fe70 	bl	18e0 <flash_area_open>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
     c00:	2101      	movs	r1, #1
     c02:	2000      	movs	r0, #0
     c04:	f004 fb88 	bl	5318 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
     c08:	f104 014c 	add.w	r1, r4, #76	; 0x4c
     c0c:	b2c0      	uxtb	r0, r0
     c0e:	f000 fe67 	bl	18e0 <flash_area_open>
     c12:	4605      	mov	r5, r0
    rc = boot_read_sectors(state);
     c14:	4620      	mov	r0, r4
     c16:	f004 fce3 	bl	55e0 <boot_read_sectors>
    if (rc != 0) {
     c1a:	4602      	mov	r2, r0
     c1c:	b130      	cbz	r0, c2c <context_boot_go+0x5c>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
     c1e:	2280      	movs	r2, #128	; 0x80
     c20:	2157      	movs	r1, #87	; 0x57
     c22:	4878      	ldr	r0, [pc, #480]	; (e04 <FIH_LABEL_FIH_CALL_END_2440+0x4c>)
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c24:	f004 fe3b 	bl	589e <printk>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     c28:	2301      	movs	r3, #1
     c2a:	e08d      	b.n	d48 <FIH_LABEL_FIH_CALL_END_2218+0xe>
    rc = boot_read_image_headers(state, false, NULL);
     c2c:	4601      	mov	r1, r0
     c2e:	4620      	mov	r0, r4
     c30:	f004 fcbe 	bl	55b0 <boot_read_image_headers>
    if (rc != 0) {
     c34:	4680      	mov	r8, r0
     c36:	b118      	cbz	r0, c40 <context_boot_go+0x70>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
     c38:	2200      	movs	r2, #0
     c3a:	2157      	movs	r1, #87	; 0x57
     c3c:	4872      	ldr	r0, [pc, #456]	; (e08 <FIH_LABEL_FIH_CALL_END_2440+0x50>)
     c3e:	e7f1      	b.n	c24 <context_boot_go+0x54>
    if (boot_slots_compatible(state)) {
     c40:	4620      	mov	r0, r4
     c42:	f000 f9a3 	bl	f8c <boot_slots_compatible>
     c46:	2800      	cmp	r0, #0
     c48:	d0ee      	beq.n	c28 <context_boot_go+0x58>
        boot_status_reset(bs);
     c4a:	4668      	mov	r0, sp
     c4c:	f004 fce7 	bl	561e <boot_status_reset>
        rc = swap_read_status(state, bs);
     c50:	4669      	mov	r1, sp
     c52:	4620      	mov	r0, r4
     c54:	f004 fd81 	bl	575a <swap_read_status>
        if (rc != 0) {
     c58:	b118      	cbz	r0, c62 <context_boot_go+0x92>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
     c5a:	4642      	mov	r2, r8
     c5c:	2157      	movs	r1, #87	; 0x57
     c5e:	486b      	ldr	r0, [pc, #428]	; (e0c <FIH_LABEL_FIH_CALL_END_2440+0x54>)
     c60:	e7e0      	b.n	c24 <context_boot_go+0x54>
        rc = boot_read_image_headers(state, !boot_status_is_reset(bs), bs);
     c62:	4668      	mov	r0, sp
     c64:	f004 fce4 	bl	5630 <boot_status_is_reset>
     c68:	f080 0101 	eor.w	r1, r0, #1
     c6c:	466a      	mov	r2, sp
     c6e:	4620      	mov	r0, r4
     c70:	b2c9      	uxtb	r1, r1
     c72:	f004 fc9d 	bl	55b0 <boot_read_image_headers>
        if (rc != 0) {
     c76:	4602      	mov	r2, r0
     c78:	2800      	cmp	r0, #0
     c7a:	d1dd      	bne.n	c38 <context_boot_go+0x68>
        if (!boot_status_is_reset(bs)) {
     c7c:	4668      	mov	r0, sp
     c7e:	f004 fcd7 	bl	5630 <boot_status_is_reset>
     c82:	4680      	mov	r8, r0
     c84:	bb60      	cbnz	r0, ce0 <context_boot_go+0x110>
    rc = boot_swap_image(state, bs);
     c86:	4669      	mov	r1, sp
     c88:	4620      	mov	r0, r4
     c8a:	f7ff ff21 	bl	ad0 <boot_swap_image>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
     c8e:	f89d 3007 	ldrb.w	r3, [sp, #7]
     c92:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
     c96:	3b03      	subs	r3, #3
     c98:	2b01      	cmp	r3, #1
     c9a:	d806      	bhi.n	caa <context_boot_go+0xda>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     c9c:	4640      	mov	r0, r8
     c9e:	f004 fdaa 	bl	57f6 <swap_set_image_ok>
        if (rc != 0) {
     ca2:	b110      	cbz	r0, caa <context_boot_go+0xda>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     ca4:	23ff      	movs	r3, #255	; 0xff
     ca6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
     caa:	f89d 3007 	ldrb.w	r3, [sp, #7]
     cae:	3b02      	subs	r3, #2
     cb0:	2b02      	cmp	r3, #2
     cb2:	d80b      	bhi.n	ccc <context_boot_go+0xfc>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     cb4:	2000      	movs	r0, #0
     cb6:	f004 fd8c 	bl	57d2 <swap_set_copy_done>
        if (rc != 0) {
     cba:	b138      	cbz	r0, ccc <context_boot_go+0xfc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     cbc:	23ff      	movs	r3, #255	; 0xff
     cbe:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        BOOT_LOG_ERR("panic!");
     cc2:	2145      	movs	r1, #69	; 0x45
     cc4:	4852      	ldr	r0, [pc, #328]	; (e10 <FIH_LABEL_FIH_CALL_END_2440+0x58>)
     cc6:	f004 fdea 	bl	589e <printk>
        while (1) {}
     cca:	e7fe      	b.n	cca <context_boot_go+0xfa>
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     ccc:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     cd0:	2bff      	cmp	r3, #255	; 0xff
     cd2:	d0f6      	beq.n	cc2 <context_boot_go+0xf2>
            rc = boot_read_image_headers(state, false, bs);
     cd4:	466a      	mov	r2, sp
     cd6:	2100      	movs	r1, #0
     cd8:	4620      	mov	r0, r4
     cda:	f004 fc69 	bl	55b0 <boot_read_image_headers>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     cde:	e7a3      	b.n	c28 <context_boot_go+0x58>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
     ce0:	f89d 9007 	ldrb.w	r9, [sp, #7]
     ce4:	f1b9 0f01 	cmp.w	r9, #1
     ce8:	d123      	bne.n	d32 <FIH_LABEL_FIH_CALL_START_2198>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cea:	4610      	mov	r0, r2
     cec:	f002 fb24 	bl	3338 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
     cf0:	1e83      	subs	r3, r0, #2
     cf2:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
     cf4:	4680      	mov	r8, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
     cf6:	d80d      	bhi.n	d14 <FIH_LABEL_FIH_CALL_END_2098+0x14>

00000cf8 <FIH_LABEL_FIH_CALL_START_2074>:
        FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_SECONDARY_SLOT, bs);
     cf8:	4649      	mov	r1, r9
     cfa:	4620      	mov	r0, r4
     cfc:	f7ff fe66 	bl	9cc <boot_validate_slot.isra.0>

00000d00 <FIH_LABEL_FIH_CALL_END_2098>:
        if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d00:	4b44      	ldr	r3, [pc, #272]	; (e14 <FIH_LABEL_FIH_CALL_END_2440+0x5c>)
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	4298      	cmp	r0, r3
     d06:	d005      	beq.n	d14 <FIH_LABEL_FIH_CALL_END_2098+0x14>
                swap_type = BOOT_SWAP_TYPE_FAIL;
     d08:	2801      	cmp	r0, #1
     d0a:	bf0c      	ite	eq
     d0c:	f04f 0801 	moveq.w	r8, #1
     d10:	f04f 0805 	movne.w	r8, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
     d14:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
     d18:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);

        switch (BOOT_SWAP_TYPE(state)) {
     d1c:	2b04      	cmp	r3, #4
        bs.swap_type = BOOT_SWAP_TYPE(state);
     d1e:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
     d22:	d814      	bhi.n	d4e <FIH_LABEL_FIH_CALL_END_2218+0x14>
     d24:	2b01      	cmp	r3, #1
     d26:	d818      	bhi.n	d5a <FIH_LABEL_FIH_CALL_END_2218+0x20>
     d28:	d02f      	beq.n	d8a <FIH_LABEL_FIH_CALL_END_2218+0x50>
            }
#endif /* !MCUBOOT_OVERWRITE_ONLY */
            break;

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
     d2a:	23ff      	movs	r3, #255	; 0xff
     d2c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d30:	e02b      	b.n	d8a <FIH_LABEL_FIH_CALL_END_2218+0x50>

00000d32 <FIH_LABEL_FIH_CALL_START_2198>:
                FIH_CALL(boot_validate_slot, fih_rc,
     d32:	2101      	movs	r1, #1
     d34:	4620      	mov	r0, r4
     d36:	f7ff fe49 	bl	9cc <boot_validate_slot.isra.0>

00000d3a <FIH_LABEL_FIH_CALL_END_2218>:
                if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     d3a:	4b36      	ldr	r3, [pc, #216]	; (e14 <FIH_LABEL_FIH_CALL_END_2440+0x5c>)
     d3c:	681b      	ldr	r3, [r3, #0]
     d3e:	4298      	cmp	r0, r3
                    BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
     d40:	bf14      	ite	ne
     d42:	2305      	movne	r3, #5
                    BOOT_SWAP_TYPE(state) = bs->swap_type;
     d44:	f89d 3007 	ldrbeq.w	r3, [sp, #7]
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
     d48:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
     d4c:	e7e4      	b.n	d18 <FIH_LABEL_FIH_CALL_END_2098+0x18>
        switch (BOOT_SWAP_TYPE(state)) {
     d4e:	2b05      	cmp	r3, #5
     d50:	d1eb      	bne.n	d2a <FIH_LABEL_FIH_CALL_END_2098+0x2a>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d52:	2000      	movs	r0, #0
     d54:	f004 fd4f 	bl	57f6 <swap_set_image_ok>
     d58:	e012      	b.n	d80 <FIH_LABEL_FIH_CALL_END_2218+0x46>
        rc = boot_swap_image(state, bs);
     d5a:	4669      	mov	r1, sp
     d5c:	4620      	mov	r0, r4
     d5e:	f7ff feb7 	bl	ad0 <boot_swap_image>
    swap_type = BOOT_SWAP_TYPE(state);
     d62:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
        rc = boot_swap_image(state, bs);
     d66:	4605      	mov	r5, r0
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
     d68:	1eda      	subs	r2, r3, #3
     d6a:	2a01      	cmp	r2, #1
     d6c:	d80b      	bhi.n	d86 <FIH_LABEL_FIH_CALL_END_2218+0x4c>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
     d6e:	2000      	movs	r0, #0
     d70:	f004 fd41 	bl	57f6 <swap_set_image_ok>
        if (rc != 0) {
     d74:	4605      	mov	r5, r0
     d76:	2800      	cmp	r0, #0
     d78:	d1d7      	bne.n	d2a <FIH_LABEL_FIH_CALL_END_2098+0x2a>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
     d7a:	2000      	movs	r0, #0
     d7c:	f004 fd29 	bl	57d2 <swap_set_copy_done>
            if (rc != 0) {
     d80:	4605      	mov	r5, r0
     d82:	b110      	cbz	r0, d8a <FIH_LABEL_FIH_CALL_END_2218+0x50>
     d84:	e7d1      	b.n	d2a <FIH_LABEL_FIH_CALL_END_2098+0x2a>
    if (BOOT_IS_UPGRADE(swap_type)) {
     d86:	2b02      	cmp	r3, #2
     d88:	d0f7      	beq.n	d7a <FIH_LABEL_FIH_CALL_END_2218+0x40>
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
     d8a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
     d8e:	2bff      	cmp	r3, #255	; 0xff
     d90:	d104      	bne.n	d9c <FIH_LABEL_FIH_CALL_END_2218+0x62>
            BOOT_LOG_ERR("panic!");
     d92:	2145      	movs	r1, #69	; 0x45
     d94:	481e      	ldr	r0, [pc, #120]	; (e10 <FIH_LABEL_FIH_CALL_END_2440+0x58>)
     d96:	f004 fd82 	bl	589e <printk>
            assert(0);

            /* Loop forever... */
            FIH_PANIC;
     d9a:	e7fe      	b.n	d9a <FIH_LABEL_FIH_CALL_END_2218+0x60>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
     d9c:	2b01      	cmp	r3, #1
     d9e:	d006      	beq.n	dae <FIH_LABEL_FIH_CALL_START_2424>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
     da0:	466a      	mov	r2, sp
     da2:	2100      	movs	r1, #0
     da4:	4620      	mov	r0, r4
     da6:	f004 fc03 	bl	55b0 <boot_read_image_headers>
            if (rc != 0) {
     daa:	4605      	mov	r5, r0
     dac:	b9b8      	cbnz	r0, dde <FIH_LABEL_FIH_CALL_END_2440+0x26>

00000dae <FIH_LABEL_FIH_CALL_START_2424>:
	 * primary.
	 */
	if (BOOT_CURR_IMG(state) == 0)
#endif
	{
            FIH_CALL(boot_validate_slot, fih_rc, state, BOOT_PRIMARY_SLOT, NULL);
     dae:	2100      	movs	r1, #0
     db0:	4620      	mov	r0, r4
     db2:	f7ff fe0b 	bl	9cc <boot_validate_slot.isra.0>
     db6:	4606      	mov	r6, r0

00000db8 <FIH_LABEL_FIH_CALL_END_2440>:
            if (fih_not_eq(fih_rc, FIH_SUCCESS)) {
     db8:	f8df 8058 	ldr.w	r8, [pc, #88]	; e14 <FIH_LABEL_FIH_CALL_END_2440+0x5c>
     dbc:	f8d8 3000 	ldr.w	r3, [r8]
     dc0:	4283      	cmp	r3, r0
     dc2:	d10c      	bne.n	dde <FIH_LABEL_FIH_CALL_END_2440+0x26>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
     dc4:	2210      	movs	r2, #16
     dc6:	2100      	movs	r1, #0
     dc8:	4668      	mov	r0, sp
     dca:	f005 f8ff 	bl	5fcc <memset>

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     dce:	6a23      	ldr	r3, [r4, #32]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);

    fih_rc = FIH_SUCCESS;
     dd0:	f8d8 6000 	ldr.w	r6, [r8]
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
     dd4:	785a      	ldrb	r2, [r3, #1]
     dd6:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     dd8:	685b      	ldr	r3, [r3, #4]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
     dda:	603c      	str	r4, [r7, #0]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
     ddc:	60bb      	str	r3, [r7, #8]
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
     dde:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     de0:	f004 ff76 	bl	5cd0 <flash_area_close>
     de4:	6a20      	ldr	r0, [r4, #32]
     de6:	f004 ff73 	bl	5cd0 <flash_area_close>
    if (rc) {
        fih_rc = fih_int_encode(rc);
    }

    FIH_RET(fih_rc);
}
     dea:	2d00      	cmp	r5, #0
     dec:	bf14      	ite	ne
     dee:	4628      	movne	r0, r5
     df0:	4630      	moveq	r0, r6
     df2:	b005      	add	sp, #20
     df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     df8:	20014500 	.word	0x20014500
     dfc:	200147c0 	.word	0x200147c0
     e00:	20014bc0 	.word	0x20014bc0
     e04:	00008843 	.word	0x00008843
     e08:	00008885 	.word	0x00008885
     e0c:	000088b1 	.word	0x000088b1
     e10:	000088db 	.word	0x000088db
     e14:	2001475c 	.word	0x2001475c

00000e18 <boot_go>:
 *
 * @return                      FIH_SUCCESS on success; nonzero on failure.
 */
fih_int
boot_go(struct boot_rsp *rsp)
{
     e18:	b508      	push	{r3, lr}
     e1a:	4601      	mov	r1, r0

00000e1c <FIH_LABEL_FIH_CALL_START_3001>:
    fih_int fih_rc = FIH_FAILURE;
    FIH_CALL(context_boot_go, fih_rc, &boot_data, rsp);
     e1c:	4801      	ldr	r0, [pc, #4]	; (e24 <FIH_LABEL_FIH_CALL_END_3017+0x2>)
     e1e:	f7ff fed7 	bl	bd0 <context_boot_go>

00000e22 <FIH_LABEL_FIH_CALL_END_3017>:
    FIH_RET(fih_rc);
}
     e22:	bd08      	pop	{r3, pc}
     e24:	20014760 	.word	0x20014760

00000e28 <boot_read_image_header>:
static uint32_t g_last_idx = UINT32_MAX;

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
     e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
     e2a:	4616      	mov	r6, r2
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    off = 0;
    if (bs) {
     e2c:	461c      	mov	r4, r3
     e2e:	b333      	cbz	r3, e7e <boot_read_image_header+0x56>

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     e30:	6a43      	ldr	r3, [r0, #36]	; 0x24
     e32:	685d      	ldr	r5, [r3, #4]
        sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
        if (bs->op == BOOT_STATUS_OP_MOVE) {
     e34:	7963      	ldrb	r3, [r4, #5]
     e36:	2b01      	cmp	r3, #1
     e38:	d115      	bne.n	e66 <boot_read_image_header+0x3e>
            if (slot == 0 && bs->idx > g_last_idx) {
     e3a:	bb01      	cbnz	r1, e7e <boot_read_image_header+0x56>
     e3c:	4b1f      	ldr	r3, [pc, #124]	; (ebc <boot_read_image_header+0x94>)
     e3e:	6822      	ldr	r2, [r4, #0]
     e40:	681b      	ldr	r3, [r3, #0]
    off = 0;
     e42:	429a      	cmp	r2, r3
     e44:	bf98      	it	ls
     e46:	2500      	movls	r5, #0
                }
            }
        }
    }

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
     e48:	2000      	movs	r0, #0
     e4a:	f004 fa65 	bl	5318 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
     e4e:	a901      	add	r1, sp, #4
     e50:	b2c0      	uxtb	r0, r0
     e52:	f000 fd45 	bl	18e0 <flash_area_open>
    if (rc != 0) {
     e56:	b1f0      	cbz	r0, e96 <boot_read_image_header+0x6e>
        rc = BOOT_EFLASH;
     e58:	2501      	movs	r5, #1
    }

    rc = 0;

done:
    flash_area_close(fap);
     e5a:	9801      	ldr	r0, [sp, #4]
     e5c:	f004 ff38 	bl	5cd0 <flash_area_close>
    return rc;
}
     e60:	4628      	mov	r0, r5
     e62:	b002      	add	sp, #8
     e64:	bd70      	pop	{r4, r5, r6, pc}
        } else if (bs->op == BOOT_STATUS_OP_SWAP) {
     e66:	2b02      	cmp	r3, #2
     e68:	d109      	bne.n	e7e <boot_read_image_header+0x56>
            if (bs->idx > 1 && bs->idx <= g_last_idx) {
     e6a:	6823      	ldr	r3, [r4, #0]
     e6c:	2b01      	cmp	r3, #1
     e6e:	d908      	bls.n	e82 <boot_read_image_header+0x5a>
     e70:	4a12      	ldr	r2, [pc, #72]	; (ebc <boot_read_image_header+0x94>)
     e72:	6812      	ldr	r2, [r2, #0]
     e74:	4293      	cmp	r3, r2
     e76:	d802      	bhi.n	e7e <boot_read_image_header+0x56>
                if (slot == 0) {
     e78:	fab1 f181 	clz	r1, r1
     e7c:	0949      	lsrs	r1, r1, #5
    off = 0;
     e7e:	2500      	movs	r5, #0
     e80:	e7e2      	b.n	e48 <boot_read_image_header+0x20>
            } else if (bs->idx == 1) {
     e82:	d1fc      	bne.n	e7e <boot_read_image_header+0x56>
                if (slot == 0) {
     e84:	2900      	cmp	r1, #0
     e86:	d0df      	beq.n	e48 <boot_read_image_header+0x20>
                if (slot == 1 && bs->state == 2) {
     e88:	2901      	cmp	r1, #1
     e8a:	d1f8      	bne.n	e7e <boot_read_image_header+0x56>
     e8c:	7921      	ldrb	r1, [r4, #4]
     e8e:	3902      	subs	r1, #2
     e90:	bf18      	it	ne
     e92:	2101      	movne	r1, #1
     e94:	e7f3      	b.n	e7e <boot_read_image_header+0x56>
    rc = flash_area_read(fap, off, out_hdr, sizeof *out_hdr);
     e96:	4629      	mov	r1, r5
     e98:	2320      	movs	r3, #32
     e9a:	4632      	mov	r2, r6
     e9c:	9801      	ldr	r0, [sp, #4]
     e9e:	f004 ff18 	bl	5cd2 <flash_area_read>
    if (rc != 0) {
     ea2:	4605      	mov	r5, r0
     ea4:	2800      	cmp	r0, #0
     ea6:	d1d7      	bne.n	e58 <boot_read_image_header+0x30>
    if (bs != NULL && out_hdr->ih_magic != IMAGE_MAGIC) {
     ea8:	2c00      	cmp	r4, #0
     eaa:	d0d6      	beq.n	e5a <boot_read_image_header+0x32>
     eac:	6835      	ldr	r5, [r6, #0]
     eae:	4804      	ldr	r0, [pc, #16]	; (ec0 <boot_read_image_header+0x98>)
     eb0:	1a2d      	subs	r5, r5, r0
     eb2:	bf18      	it	ne
     eb4:	f04f 35ff 	movne.w	r5, #4294967295
     eb8:	e7cf      	b.n	e5a <boot_read_image_header+0x32>
     eba:	bf00      	nop
     ebc:	20014504 	.word	0x20014504
     ec0:	96f3b83d 	.word	0x96f3b83d

00000ec4 <swap_read_status_bytes>:

int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
     ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ec8:	4607      	mov	r7, r0
     eca:	460c      	mov	r4, r1
     ecc:	b085      	sub	sp, #20
    int rc;
    int last_rc;
    int erased_sections;
    int i;

    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     ece:	4601      	mov	r1, r0
     ed0:	2000      	movs	r0, #0
{
     ed2:	4616      	mov	r6, r2
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
     ed4:	f004 faf4 	bl	54c0 <boot_status_entries>
    if (max_entries < 0) {
     ed8:	1e05      	subs	r5, r0, #0
     eda:	db51      	blt.n	f80 <swap_read_status_bytes+0xbc>
    erased_sections = 0;
    found_idx = -1;
    /* skip erased sectors at the end */
    last_rc = 1;
    write_sz = BOOT_WRITE_SZ(state);
    off = boot_status_off(fap);
     edc:	4638      	mov	r0, r7
    write_sz = BOOT_WRITE_SZ(state);
     ede:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    off = boot_status_off(fap);
     ee0:	f004 faf8 	bl	54d4 <boot_status_off>
    for (i = max_entries; i > 0; i--) {
     ee4:	fa5f f984 	uxtb.w	r9, r4
    erased_sections = 0;
     ee8:	f04f 0a00 	mov.w	sl, #0
    last_rc = 1;
     eec:	f04f 0b01 	mov.w	fp, #1
    found_idx = -1;
     ef0:	f04f 34ff 	mov.w	r4, #4294967295
     ef4:	f105 38ff 	add.w	r8, r5, #4294967295
     ef8:	fb09 0808 	mla	r8, r9, r8, r0
    for (i = max_entries; i > 0; i--) {
     efc:	b99d      	cbnz	r5, f26 <swap_read_status_bytes+0x62>
            }
        }
        last_rc = rc;
    }

    if (erased_sections > 1) {
     efe:	f1ba 0f01 	cmp.w	sl, #1
     f02:	dd03      	ble.n	f0c <swap_read_status_bytes+0x48>
        /* This means there was an error writing status on the last
         * swap. Tell user and move on to validation!
         */
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Detected inconsistent status!");
     f04:	2145      	movs	r1, #69	; 0x45
     f06:	4820      	ldr	r0, [pc, #128]	; (f88 <swap_read_status_bytes+0xc4>)
     f08:	f004 fcc9 	bl	589e <printk>
        assert(0);
#endif
    }

    move_entries = BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT;
    if (found_idx == -1) {
     f0c:	1c63      	adds	r3, r4, #1
     f0e:	d006      	beq.n	f1e <swap_read_status_bytes+0x5a>
        /* no swap status found; nothing to do */
    } else if (found_idx < move_entries) {
     f10:	2c7f      	cmp	r4, #127	; 0x7f
     f12:	dc2a      	bgt.n	f6a <swap_read_status_bytes+0xa6>
        bs->op = BOOT_STATUS_OP_MOVE;
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f14:	f240 1301 	movw	r3, #257	; 0x101
        bs->idx = (found_idx  / BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f18:	3401      	adds	r4, #1
     f1a:	6034      	str	r4, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_MOVE_STATE_COUNT) + BOOT_STATUS_STATE_0;;
     f1c:	80b3      	strh	r3, [r6, #4]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
    }

    return 0;
}
     f1e:	4628      	mov	r0, r5
     f20:	b005      	add	sp, #20
     f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read(fap, off + (i - 1) * write_sz, &status, 1);
     f26:	1e6b      	subs	r3, r5, #1
     f28:	9300      	str	r3, [sp, #0]
     f2a:	4641      	mov	r1, r8
     f2c:	2301      	movs	r3, #1
     f2e:	4638      	mov	r0, r7
     f30:	f10d 020f 	add.w	r2, sp, #15
     f34:	f004 fecd 	bl	5cd2 <flash_area_read>
        if (rc < 0) {
     f38:	1e03      	subs	r3, r0, #0
     f3a:	9301      	str	r3, [sp, #4]
     f3c:	db22      	blt.n	f84 <swap_read_status_bytes+0xc0>
        if (bootutil_buffer_is_erased(fap, &status, 1)) {
     f3e:	2201      	movs	r2, #1
     f40:	4638      	mov	r0, r7
     f42:	f10d 010f 	add.w	r1, sp, #15
     f46:	f005 fa88 	bl	645a <bootutil_buffer_is_erased>
     f4a:	9b01      	ldr	r3, [sp, #4]
     f4c:	b140      	cbz	r0, f60 <swap_read_status_bytes+0x9c>
            if (rc != last_rc) {
     f4e:	459b      	cmp	fp, r3
     f50:	d001      	beq.n	f56 <swap_read_status_bytes+0x92>
                erased_sections++;
     f52:	f10a 0a01 	add.w	sl, sl, #1
            if (found_idx == -1) {
     f56:	469b      	mov	fp, r3
     f58:	9d00      	ldr	r5, [sp, #0]
     f5a:	eba8 0809 	sub.w	r8, r8, r9
     f5e:	e7cd      	b.n	efc <swap_read_status_bytes+0x38>
     f60:	f1b4 3fff 	cmp.w	r4, #4294967295
     f64:	bf08      	it	eq
     f66:	462c      	moveq	r4, r5
     f68:	e7f5      	b.n	f56 <swap_read_status_bytes+0x92>
        bs->op = BOOT_STATUS_OP_SWAP;
     f6a:	2302      	movs	r3, #2
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f6c:	3c80      	subs	r4, #128	; 0x80
        bs->op = BOOT_STATUS_OP_SWAP;
     f6e:	7173      	strb	r3, [r6, #5]
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f70:	1063      	asrs	r3, r4, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f72:	f004 0401 	and.w	r4, r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f76:	3301      	adds	r3, #1
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f78:	3401      	adds	r4, #1
        bs->idx = ((found_idx - move_entries) / BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_IDX_0;
     f7a:	6033      	str	r3, [r6, #0]
        bs->state = ((found_idx - move_entries) % BOOT_STATUS_SWAP_STATE_COUNT) + BOOT_STATUS_STATE_0;
     f7c:	7134      	strb	r4, [r6, #4]
     f7e:	e7ce      	b.n	f1e <swap_read_status_bytes+0x5a>
        return BOOT_EBADARGS;
     f80:	2507      	movs	r5, #7
     f82:	e7cc      	b.n	f1e <swap_read_status_bytes+0x5a>
            return BOOT_EFLASH;
     f84:	2501      	movs	r5, #1
     f86:	e7ca      	b.n	f1e <swap_read_status_bytes+0x5a>
     f88:	000088e7 	.word	0x000088e7

00000f8c <boot_slots_compatible>:
    return off;
}

int
boot_slots_compatible(struct boot_loader_state *state)
{
     f8c:	b538      	push	{r3, r4, r5, lr}
    return BOOT_IMG(state, slot).num_sectors;
     f8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
     f90:	6d44      	ldr	r4, [r0, #84]	; 0x54
    size_t sector_sz_sec = 0;
    size_t i;

    num_sectors_pri = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_sec = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_pri != num_sectors_sec) &&
     f92:	42a2      	cmp	r2, r4
     f94:	d008      	beq.n	fa8 <boot_slots_compatible+0x1c>
            (num_sectors_pri != (num_sectors_sec + 1))) {
     f96:	1c63      	adds	r3, r4, #1
    if ((num_sectors_pri != num_sectors_sec) &&
     f98:	4293      	cmp	r3, r2
     f9a:	d005      	beq.n	fa8 <boot_slots_compatible+0x1c>
        BOOT_LOG_WRN("Cannot upgrade: not a compatible amount of sectors");
     f9c:	2157      	movs	r1, #87	; 0x57
     f9e:	4813      	ldr	r0, [pc, #76]	; (fec <boot_slots_compatible+0x60>)

    for (i = 0; i < num_sectors_sec; i++) {
        sector_sz_pri = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
        sector_sz_sec = boot_img_sector_size(state, BOOT_SECONDARY_SLOT, i);
        if (sector_sz_pri != sector_sz_sec) {
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     fa0:	f004 fc7d 	bl	589e <printk>
            return 0;
     fa4:	2000      	movs	r0, #0
        }
    }

    return 1;
#endif /* PM_S1_ADDRESS */
}
     fa6:	bd38      	pop	{r3, r4, r5, pc}
    if (num_sectors_pri > BOOT_MAX_IMG_SECTORS) {
     fa8:	2a80      	cmp	r2, #128	; 0x80
     faa:	d91c      	bls.n	fe6 <boot_slots_compatible+0x5a>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
     fac:	2157      	movs	r1, #87	; 0x57
     fae:	4810      	ldr	r0, [pc, #64]	; (ff0 <boot_slots_compatible+0x64>)
     fb0:	e7f6      	b.n	fa0 <boot_slots_compatible+0x14>
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
     fb2:	6a41      	ldr	r1, [r0, #36]	; 0x24
     fb4:	6d05      	ldr	r5, [r0, #80]	; 0x50
     fb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
     fba:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
     fbe:	6849      	ldr	r1, [r1, #4]
        if (sector_sz_pri != sector_sz_sec) {
     fc0:	686d      	ldr	r5, [r5, #4]
     fc2:	428d      	cmp	r5, r1
     fc4:	d002      	beq.n	fcc <boot_slots_compatible+0x40>
            BOOT_LOG_WRN("Cannot upgrade: not same sector layout");
     fc6:	2157      	movs	r1, #87	; 0x57
     fc8:	480a      	ldr	r0, [pc, #40]	; (ff4 <boot_slots_compatible+0x68>)
     fca:	e7e9      	b.n	fa0 <boot_slots_compatible+0x14>
    for (i = 0; i < num_sectors_sec; i++) {
     fcc:	3301      	adds	r3, #1
     fce:	42a3      	cmp	r3, r4
     fd0:	d1ef      	bne.n	fb2 <boot_slots_compatible+0x26>
    if (num_sectors_pri > num_sectors_sec) {
     fd2:	429a      	cmp	r2, r3
     fd4:	d905      	bls.n	fe2 <boot_slots_compatible+0x56>
     fd6:	6a42      	ldr	r2, [r0, #36]	; 0x24
     fd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        if (sector_sz_pri != boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i)) {
     fdc:	685b      	ldr	r3, [r3, #4]
     fde:	4299      	cmp	r1, r3
     fe0:	d1f1      	bne.n	fc6 <boot_slots_compatible+0x3a>
    return 1;
     fe2:	2001      	movs	r0, #1
     fe4:	e7df      	b.n	fa6 <boot_slots_compatible+0x1a>
    for (i = 0; i < num_sectors_sec; i++) {
     fe6:	2300      	movs	r3, #0
    size_t sector_sz_pri = 0;
     fe8:	4619      	mov	r1, r3
     fea:	e7f0      	b.n	fce <boot_slots_compatible+0x42>
     fec:	0000890a 	.word	0x0000890a
     ff0:	00008942 	.word	0x00008942
     ff4:	00008971 	.word	0x00008971

00000ff8 <swap_status_source>:
                 (state)->copy_done,                                \
                 (state)->image_ok)

int
swap_status_source(struct boot_loader_state *state)
{
     ff8:	b500      	push	{lr}
     ffa:	b089      	sub	sp, #36	; 0x24
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
     ffc:	2003      	movs	r0, #3
     ffe:	a904      	add	r1, sp, #16
    1000:	f005 fa5e 	bl	64c0 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1004:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1008:	2a01      	cmp	r2, #1
    100a:	d041      	beq.n	1090 <swap_status_source+0x98>
    100c:	4b25      	ldr	r3, [pc, #148]	; (10a4 <swap_status_source+0xac>)
    100e:	4926      	ldr	r1, [pc, #152]	; (10a8 <swap_status_source+0xb0>)
    1010:	2a03      	cmp	r2, #3
    1012:	bf18      	it	ne
    1014:	460b      	movne	r3, r1
    1016:	f89d 2013 	ldrb.w	r2, [sp, #19]
    101a:	2149      	movs	r1, #73	; 0x49
    101c:	9202      	str	r2, [sp, #8]
    101e:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1022:	4822      	ldr	r0, [pc, #136]	; (10ac <swap_status_source+0xb4>)
    1024:	9201      	str	r2, [sp, #4]
    1026:	f89d 2011 	ldrb.w	r2, [sp, #17]
    102a:	9200      	str	r2, [sp, #0]
    102c:	4a20      	ldr	r2, [pc, #128]	; (10b0 <swap_status_source+0xb8>)
    102e:	f004 fc36 	bl	589e <printk>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    1032:	2007      	movs	r0, #7
    1034:	a906      	add	r1, sp, #24
    1036:	f005 fa43 	bl	64c0 <boot_read_swap_state_by_id>
            &state_secondary_slot);
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    103a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    103e:	2a01      	cmp	r2, #1
    1040:	d028      	beq.n	1094 <swap_status_source+0x9c>
    1042:	4b18      	ldr	r3, [pc, #96]	; (10a4 <swap_status_source+0xac>)
    1044:	4918      	ldr	r1, [pc, #96]	; (10a8 <swap_status_source+0xb0>)
    1046:	2a03      	cmp	r2, #3
    1048:	bf18      	it	ne
    104a:	460b      	movne	r3, r1
    104c:	f89d 201b 	ldrb.w	r2, [sp, #27]
    1050:	2149      	movs	r1, #73	; 0x49
    1052:	9202      	str	r2, [sp, #8]
    1054:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1058:	4814      	ldr	r0, [pc, #80]	; (10ac <swap_status_source+0xb4>)
    105a:	9201      	str	r2, [sp, #4]
    105c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    1060:	9200      	str	r2, [sp, #0]
    1062:	4a14      	ldr	r2, [pc, #80]	; (10b4 <swap_status_source+0xbc>)
    1064:	f004 fc1b 	bl	589e <printk>

    if (state_primary_slot.magic == BOOT_MAGIC_GOOD &&
    1068:	f89d 3010 	ldrb.w	r3, [sp, #16]
    106c:	2b01      	cmp	r3, #1
    106e:	d113      	bne.n	1098 <swap_status_source+0xa0>
    1070:	f89d 3012 	ldrb.w	r3, [sp, #18]
    1074:	2b03      	cmp	r3, #3
    1076:	d10f      	bne.n	1098 <swap_status_source+0xa0>
            state_primary_slot.copy_done == BOOT_FLAG_UNSET &&
    1078:	f89d 3018 	ldrb.w	r3, [sp, #24]
    107c:	2b01      	cmp	r3, #1
    107e:	d00b      	beq.n	1098 <swap_status_source+0xa0>
            state_secondary_slot.magic != BOOT_MAGIC_GOOD) {

        source = BOOT_STATUS_SOURCE_PRIMARY_SLOT;

        BOOT_LOG_INF("Boot source: primary slot");
    1080:	480d      	ldr	r0, [pc, #52]	; (10b8 <swap_status_source+0xc0>)
    1082:	2149      	movs	r1, #73	; 0x49
    1084:	f004 fc0b 	bl	589e <printk>
        return source;
    1088:	2002      	movs	r0, #2
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    108a:	b009      	add	sp, #36	; 0x24
    108c:	f85d fb04 	ldr.w	pc, [sp], #4
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    1090:	4b0a      	ldr	r3, [pc, #40]	; (10bc <swap_status_source+0xc4>)
    1092:	e7c0      	b.n	1016 <swap_status_source+0x1e>
    BOOT_LOG_SWAP_STATE("Secondary image", &state_secondary_slot);
    1094:	4b09      	ldr	r3, [pc, #36]	; (10bc <swap_status_source+0xc4>)
    1096:	e7d9      	b.n	104c <swap_status_source+0x54>
    BOOT_LOG_INF("Boot source: none");
    1098:	4809      	ldr	r0, [pc, #36]	; (10c0 <swap_status_source+0xc8>)
    109a:	2149      	movs	r1, #73	; 0x49
    109c:	f004 fbff 	bl	589e <printk>
    return BOOT_STATUS_SOURCE_NONE;
    10a0:	2000      	movs	r0, #0
    10a2:	e7f2      	b.n	108a <swap_status_source+0x92>
    10a4:	000089a2 	.word	0x000089a2
    10a8:	000089a8 	.word	0x000089a8
    10ac:	000089ba 	.word	0x000089ba
    10b0:	000089ac 	.word	0x000089ac
    10b4:	000089fb 	.word	0x000089fb
    10b8:	00008a0b 	.word	0x00008a0b
    10bc:	0000899d 	.word	0x0000899d
    10c0:	00008a2a 	.word	0x00008a2a

000010c4 <fixup_revert>:
 * upgrade (by initializing the secondary slot).
 */
void
fixup_revert(const struct boot_loader_state *state, struct boot_status *bs,
        const struct flash_area *fap_sec, uint8_t sec_id)
{
    10c4:	b570      	push	{r4, r5, r6, lr}
    10c6:	4606      	mov	r6, r0
    10c8:	4618      	mov	r0, r3
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    /* No fixup required */
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    10ca:	684b      	ldr	r3, [r1, #4]
{
    10cc:	4614      	mov	r4, r2
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    10ce:	4a1d      	ldr	r2, [pc, #116]	; (1144 <fixup_revert+0x80>)
    10d0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
    10d4:	4293      	cmp	r3, r2
{
    10d6:	460d      	mov	r5, r1
    10d8:	b086      	sub	sp, #24
    if (bs->swap_type != BOOT_SWAP_TYPE_REVERT ||
    10da:	d12e      	bne.n	113a <fixup_revert+0x76>
        bs->op != BOOT_STATUS_OP_MOVE ||
    10dc:	680b      	ldr	r3, [r1, #0]
    10de:	2b01      	cmp	r3, #1
    10e0:	d12b      	bne.n	113a <fixup_revert+0x76>
        bs->idx != BOOT_STATUS_IDX_0) {
        return;
    }

    rc = boot_read_swap_state_by_id(sec_id, &swap_state);
    10e2:	a904      	add	r1, sp, #16
    10e4:	f005 f9ec 	bl	64c0 <boot_read_swap_state_by_id>
    assert(rc == 0);

    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    10e8:	f89d 2010 	ldrb.w	r2, [sp, #16]
    10ec:	2a01      	cmp	r2, #1
    10ee:	d026      	beq.n	113e <fixup_revert+0x7a>
    10f0:	4b15      	ldr	r3, [pc, #84]	; (1148 <fixup_revert+0x84>)
    10f2:	4916      	ldr	r1, [pc, #88]	; (114c <fixup_revert+0x88>)
    10f4:	2a03      	cmp	r2, #3
    10f6:	bf18      	it	ne
    10f8:	460b      	movne	r3, r1
    10fa:	f89d 2013 	ldrb.w	r2, [sp, #19]
    10fe:	2149      	movs	r1, #73	; 0x49
    1100:	9202      	str	r2, [sp, #8]
    1102:	f89d 2012 	ldrb.w	r2, [sp, #18]
    1106:	4812      	ldr	r0, [pc, #72]	; (1150 <fixup_revert+0x8c>)
    1108:	9201      	str	r2, [sp, #4]
    110a:	f89d 2011 	ldrb.w	r2, [sp, #17]
    110e:	9200      	str	r2, [sp, #0]
    1110:	4a10      	ldr	r2, [pc, #64]	; (1154 <fixup_revert+0x90>)
    1112:	f004 fbc4 	bl	589e <printk>

    if (swap_state.magic == BOOT_MAGIC_UNSET) {
    1116:	f89d 3010 	ldrb.w	r3, [sp, #16]
    111a:	2b03      	cmp	r3, #3
    111c:	d10d      	bne.n	113a <fixup_revert+0x76>
        rc = swap_erase_trailer_sectors(state, fap_sec);
    111e:	4621      	mov	r1, r4
    1120:	4630      	mov	r0, r6
    1122:	f004 fac6 	bl	56b2 <swap_erase_trailer_sectors>
        assert(rc == 0);

        rc = boot_write_image_ok(fap_sec);
    1126:	4620      	mov	r0, r4
    1128:	f005 f9ba 	bl	64a0 <boot_write_image_ok>
        assert(rc == 0);

        rc = boot_write_swap_size(fap_sec, bs->swap_size);
    112c:	4620      	mov	r0, r4
    112e:	68a9      	ldr	r1, [r5, #8]
    1130:	f004 f9e7 	bl	5502 <boot_write_swap_size>
        assert(rc == 0);

        rc = boot_write_magic(fap_sec);
    1134:	4620      	mov	r0, r4
    1136:	f002 f8a1 	bl	327c <boot_write_magic>
        assert(rc == 0);
    }
}
    113a:	b006      	add	sp, #24
    113c:	bd70      	pop	{r4, r5, r6, pc}
    BOOT_LOG_SWAP_STATE("Secondary image", &swap_state);
    113e:	4b06      	ldr	r3, [pc, #24]	; (1158 <fixup_revert+0x94>)
    1140:	e7db      	b.n	10fa <fixup_revert+0x36>
    1142:	bf00      	nop
    1144:	04000100 	.word	0x04000100
    1148:	000089a2 	.word	0x000089a2
    114c:	000089a8 	.word	0x000089a8
    1150:	000089ba 	.word	0x000089ba
    1154:	000089fb 	.word	0x000089fb
    1158:	0000899d 	.word	0x0000899d

0000115c <swap_run>:
    115c:	6a43      	ldr	r3, [r0, #36]	; 0x24

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    115e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1162:	460c      	mov	r4, r1
    1164:	685e      	ldr	r6, [r3, #4]
    1166:	4605      	mov	r5, r0
    1168:	2101      	movs	r1, #1
    uint8_t image_index;
    const struct flash_area *fap_pri;
    const struct flash_area *fap_sec;
    int rc;

    sz = 0;
    116a:	2300      	movs	r3, #0
{
    116c:	b08b      	sub	sp, #44	; 0x2c
    g_last_idx = 0;

    sector_sz = boot_img_sector_size(state, BOOT_PRIMARY_SLOT, 0);
    while (1) {
        sz += sector_sz;
    116e:	4433      	add	r3, r6
        /* Skip to next sector because all sectors will be moved up. */
        g_last_idx++;
        if (sz >= copy_size) {
    1170:	4293      	cmp	r3, r2
    1172:	4608      	mov	r0, r1
    1174:	f101 0101 	add.w	r1, r1, #1
    1178:	d3f9      	bcc.n	116e <swap_run+0x12>
    117a:	4f73      	ldr	r7, [pc, #460]	; (1348 <swap_run+0x1ec>)
    117c:	6038      	str	r0, [r7, #0]
    }

    /*
     * When starting a new swap upgrade, check that there is enough space.
     */
    if (boot_status_is_reset(bs)) {
    117e:	4620      	mov	r0, r4
    1180:	f004 fa56 	bl	5630 <boot_status_is_reset>
    1184:	9703      	str	r7, [sp, #12]
    1186:	b1b8      	cbz	r0, 11b8 <swap_run+0x5c>
        sz = 0;
        trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    1188:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    118a:	f004 f994 	bl	54b6 <boot_trailer_sz>
        sz = 0;
    118e:	2200      	movs	r2, #0
        first_trailer_idx = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    1190:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1192:	3b01      	subs	r3, #1

        while (1) {
            sz += sector_sz;
    1194:	4432      	add	r2, r6
            if  (sz >= trailer_sz) {
    1196:	4290      	cmp	r0, r2
    1198:	d901      	bls.n	119e <swap_run+0x42>
                break;
            }
            first_trailer_idx--;
    119a:	3b01      	subs	r3, #1
            sz += sector_sz;
    119c:	e7fa      	b.n	1194 <swap_run+0x38>
        }

        if (g_last_idx >= first_trailer_idx) {
    119e:	9a03      	ldr	r2, [sp, #12]
    11a0:	6812      	ldr	r2, [r2, #0]
    11a2:	429a      	cmp	r2, r3
    11a4:	d308      	bcc.n	11b8 <swap_run+0x5c>
            BOOT_LOG_WRN("Not enough free space to run swap upgrade");
    11a6:	2157      	movs	r1, #87	; 0x57
    11a8:	4868      	ldr	r0, [pc, #416]	; (134c <swap_run+0x1f0>)
    11aa:	f004 fb78 	bl	589e <printk>
            bs->swap_type = BOOT_SWAP_TYPE_NONE;
    11ae:	2301      	movs	r3, #1
    11b0:	71e3      	strb	r3, [r4, #7]
        idx++;
    }

    flash_area_close(fap_pri);
    flash_area_close(fap_sec);
}
    11b2:	b00b      	add	sp, #44	; 0x2c
    11b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index), &fap_pri);
    11b8:	a908      	add	r1, sp, #32
    11ba:	2003      	movs	r0, #3
    11bc:	f000 fb90 	bl	18e0 <flash_area_open>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index), &fap_sec);
    11c0:	a909      	add	r1, sp, #36	; 0x24
    11c2:	2007      	movs	r0, #7
    11c4:	f000 fb8c 	bl	18e0 <flash_area_open>
    fixup_revert(state, bs, fap_sec, FLASH_AREA_IMAGE_SECONDARY(image_index));
    11c8:	2307      	movs	r3, #7
    11ca:	4621      	mov	r1, r4
    11cc:	4628      	mov	r0, r5
    11ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    11d0:	f7ff ff78 	bl	10c4 <fixup_revert>
    if (bs->op == BOOT_STATUS_OP_MOVE) {
    11d4:	7963      	ldrb	r3, [r4, #5]
    11d6:	2b01      	cmp	r3, #1
    11d8:	d108      	bne.n	11ec <swap_run+0x90>
        idx = g_last_idx;
    11da:	9b03      	ldr	r3, [sp, #12]
    BOOT_STATUS_ASSERT(rc == 0);
    11dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 1350 <swap_run+0x1f4>
        idx = g_last_idx;
    11e0:	681f      	ldr	r7, [r3, #0]
        while (idx > 0) {
    11e2:	9b03      	ldr	r3, [sp, #12]
    11e4:	681b      	ldr	r3, [r3, #0]
    11e6:	b9a7      	cbnz	r7, 1212 <swap_run+0xb6>
        bs->idx = BOOT_STATUS_IDX_0;
    11e8:	2301      	movs	r3, #1
    11ea:	6023      	str	r3, [r4, #0]
    bs->op = BOOT_STATUS_OP_SWAP;
    11ec:	2302      	movs	r3, #2
    idx = 1;
    11ee:	2701      	movs	r7, #1
        BOOT_STATUS_ASSERT(rc == 0);
    11f0:	f8df 815c 	ldr.w	r8, [pc, #348]	; 1350 <swap_run+0x1f4>
    bs->op = BOOT_STATUS_OP_SWAP;
    11f4:	7163      	strb	r3, [r4, #5]
        bs->state = BOOT_STATUS_STATE_1;
    11f6:	9306      	str	r3, [sp, #24]
    while (idx <= g_last_idx) {
    11f8:	9b03      	ldr	r3, [sp, #12]
    11fa:	f8dd 9020 	ldr.w	r9, [sp, #32]
    11fe:	681b      	ldr	r3, [r3, #0]
    1200:	429f      	cmp	r7, r3
    1202:	d94a      	bls.n	129a <swap_run+0x13e>
    flash_area_close(fap_pri);
    1204:	4648      	mov	r0, r9
    1206:	f004 fd63 	bl	5cd0 <flash_area_close>
    flash_area_close(fap_sec);
    120a:	9809      	ldr	r0, [sp, #36]	; 0x24
    120c:	f004 fd60 	bl	5cd0 <flash_area_close>
    1210:	e7cf      	b.n	11b2 <swap_run+0x56>
            if (idx <= (g_last_idx - bs->idx + 1)) {
    1212:	6822      	ldr	r2, [r4, #0]
    1214:	3301      	adds	r3, #1
    1216:	1a9b      	subs	r3, r3, r2
    1218:	429f      	cmp	r7, r3
    121a:	d83c      	bhi.n	1296 <swap_run+0x13a>

static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    121c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    if (bs->idx == BOOT_STATUS_IDX_0) {
    121e:	2a01      	cmp	r2, #1
           BOOT_IMG(state, slot).sectors[0].fs_off;
    1220:	6819      	ldr	r1, [r3, #0]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    1222:	f853 0037 	ldr.w	r0, [r3, r7, lsl #3]
    1226:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    122a:	f853 3c08 	ldr.w	r3, [r3, #-8]
    122e:	f8dd 8020 	ldr.w	r8, [sp, #32]
    1232:	eba0 0901 	sub.w	r9, r0, r1
    1236:	eba3 0a01 	sub.w	sl, r3, r1
    123a:	d112      	bne.n	1262 <swap_run+0x106>
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    123c:	68e2      	ldr	r2, [r4, #12]
                boot_move_sector_up(idx, sector_sz, state, bs, fap_pri, fap_sec);
    123e:	9b09      	ldr	r3, [sp, #36]	; 0x24
        if (bs->source != BOOT_STATUS_SOURCE_PRIMARY_SLOT) {
    1240:	2a02      	cmp	r2, #2
    1242:	d00a      	beq.n	125a <swap_run+0xfe>
            rc = swap_erase_trailer_sectors(state, fap_pri);
    1244:	4641      	mov	r1, r8
    1246:	4628      	mov	r0, r5
    1248:	9304      	str	r3, [sp, #16]
    124a:	f004 fa32 	bl	56b2 <swap_erase_trailer_sectors>
            rc = swap_status_init(state, fap_pri, bs);
    124e:	4622      	mov	r2, r4
    1250:	4641      	mov	r1, r8
    1252:	4628      	mov	r0, r5
    1254:	f004 fa62 	bl	571c <swap_status_init>
    1258:	9b04      	ldr	r3, [sp, #16]
        rc = swap_erase_trailer_sectors(state, fap_sec);
    125a:	4619      	mov	r1, r3
    125c:	4628      	mov	r0, r5
    125e:	f004 fa28 	bl	56b2 <swap_erase_trailer_sectors>
    rc = boot_erase_region(fap_pri, new_off, sz);
    1262:	4632      	mov	r2, r6
    1264:	4649      	mov	r1, r9
    1266:	4640      	mov	r0, r8
    1268:	f004 fa21 	bl	56ae <boot_erase_region>
    rc = boot_copy_region(state, fap_pri, fap_pri, old_off, new_off, sz);
    126c:	4653      	mov	r3, sl
    126e:	4642      	mov	r2, r8
    1270:	4641      	mov	r1, r8
    1272:	4628      	mov	r0, r5
    1274:	e9cd 9600 	strd	r9, r6, [sp]
    1278:	f7ff fc68 	bl	b4c <boot_copy_region>
    rc = boot_write_status(state, bs);
    127c:	4621      	mov	r1, r4
    127e:	4628      	mov	r0, r5
    1280:	f004 f9e3 	bl	564a <boot_write_status>
    bs->idx++;
    1284:	6823      	ldr	r3, [r4, #0]
    1286:	3301      	adds	r3, #1
    1288:	6023      	str	r3, [r4, #0]
    BOOT_STATUS_ASSERT(rc == 0);
    128a:	b120      	cbz	r0, 1296 <swap_run+0x13a>
    128c:	f8db 3000 	ldr.w	r3, [fp]
    1290:	3301      	adds	r3, #1
    1292:	f8cb 3000 	str.w	r3, [fp]
            idx--;
    1296:	3f01      	subs	r7, #1
    1298:	e7a3      	b.n	11e2 <swap_run+0x86>
        if (idx >= bs->idx) {
    129a:	6823      	ldr	r3, [r4, #0]
    129c:	429f      	cmp	r7, r3
    129e:	d350      	bcc.n	1342 <swap_run+0x1e6>
    12a0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    12a2:	00fb      	lsls	r3, r7, #3
    12a4:	f852 1037 	ldr.w	r1, [r2, r7, lsl #3]
    12a8:	3b08      	subs	r3, #8
    12aa:	9105      	str	r1, [sp, #20]
           BOOT_IMG(state, slot).sectors[0].fs_off;
    12ac:	6811      	ldr	r1, [r2, #0]
            boot_swap_sectors(idx, sector_sz, state, bs, fap_pri, fap_sec);
    12ae:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
    12b2:	9104      	str	r1, [sp, #16]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    12b4:	6d29      	ldr	r1, [r5, #80]	; 0x50
    12b6:	58c8      	ldr	r0, [r1, r3]
    12b8:	6809      	ldr	r1, [r1, #0]
    12ba:	eba0 0b01 	sub.w	fp, r0, r1
    if (bs->state == BOOT_STATUS_STATE_0) {
    12be:	7921      	ldrb	r1, [r4, #4]
    12c0:	2901      	cmp	r1, #1
    12c2:	d13c      	bne.n	133e <swap_run+0x1e2>
    12c4:	58d1      	ldr	r1, [r2, r3]
    12c6:	9b04      	ldr	r3, [sp, #16]
        rc = boot_erase_region(fap_pri, pri_off, sz);
    12c8:	4632      	mov	r2, r6
    12ca:	1ac9      	subs	r1, r1, r3
    12cc:	4648      	mov	r0, r9
    12ce:	9107      	str	r1, [sp, #28]
    12d0:	f004 f9ed 	bl	56ae <boot_erase_region>
        rc = boot_copy_region(state, fap_sec, fap_pri, sec_off, pri_off, sz);
    12d4:	9907      	ldr	r1, [sp, #28]
    12d6:	465b      	mov	r3, fp
    12d8:	464a      	mov	r2, r9
    12da:	9100      	str	r1, [sp, #0]
    12dc:	4628      	mov	r0, r5
    12de:	4651      	mov	r1, sl
    12e0:	9601      	str	r6, [sp, #4]
    12e2:	f7ff fc33 	bl	b4c <boot_copy_region>
        rc = boot_write_status(state, bs);
    12e6:	4621      	mov	r1, r4
    12e8:	4628      	mov	r0, r5
    12ea:	f004 f9ae 	bl	564a <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    12ee:	9b06      	ldr	r3, [sp, #24]
    12f0:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    12f2:	b120      	cbz	r0, 12fe <swap_run+0x1a2>
    12f4:	f8d8 3000 	ldr.w	r3, [r8]
    12f8:	3301      	adds	r3, #1
    12fa:	f8c8 3000 	str.w	r3, [r8]
        rc = boot_erase_region(fap_sec, sec_off, sz);
    12fe:	4632      	mov	r2, r6
    1300:	4659      	mov	r1, fp
    1302:	4650      	mov	r0, sl
    1304:	f004 f9d3 	bl	56ae <boot_erase_region>
        rc = boot_copy_region(state, fap_pri, fap_sec, pri_up_off, sec_off, sz);
    1308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    130c:	4649      	mov	r1, r9
    130e:	1a9b      	subs	r3, r3, r2
    1310:	4628      	mov	r0, r5
    1312:	4652      	mov	r2, sl
    1314:	e9cd b600 	strd	fp, r6, [sp]
    1318:	f7ff fc18 	bl	b4c <boot_copy_region>
        rc = boot_write_status(state, bs);
    131c:	4621      	mov	r1, r4
    131e:	4628      	mov	r0, r5
    1320:	f004 f993 	bl	564a <boot_write_status>
        bs->idx++;
    1324:	6823      	ldr	r3, [r4, #0]
    1326:	3301      	adds	r3, #1
    1328:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    132a:	f04f 0301 	mov.w	r3, #1
    132e:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    1330:	b138      	cbz	r0, 1342 <swap_run+0x1e6>
    1332:	f8d8 3000 	ldr.w	r3, [r8]
    1336:	3301      	adds	r3, #1
    1338:	f8c8 3000 	str.w	r3, [r8]
    133c:	e001      	b.n	1342 <swap_run+0x1e6>
    if (bs->state == BOOT_STATUS_STATE_1) {
    133e:	2902      	cmp	r1, #2
    1340:	d0dd      	beq.n	12fe <swap_run+0x1a2>
        idx++;
    1342:	3701      	adds	r7, #1
    1344:	e758      	b.n	11f8 <swap_run+0x9c>
    1346:	bf00      	nop
    1348:	20014504 	.word	0x20014504
    134c:	00008a41 	.word	0x00008a41
    1350:	20014fc0 	.word	0x20014fc0

00001354 <nrf_cleanup_peripheral>:
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1354:	2201      	movs	r2, #1
    1356:	4b12      	ldr	r3, [pc, #72]	; (13a0 <nrf_cleanup_peripheral+0x4c>)
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    1358:	4912      	ldr	r1, [pc, #72]	; (13a4 <nrf_cleanup_peripheral+0x50>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    135a:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
    135c:	f04f 33ff 	mov.w	r3, #4294967295
    1360:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1364:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1368:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
    136c:	604a      	str	r2, [r1, #4]
    136e:	3104      	adds	r1, #4
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
}

NRF_STATIC_INLINE void nrf_uarte_disable(NRF_UARTE_Type * p_reg)
{
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1370:	2100      	movs	r1, #0
    p_reg->EVTENCLR = mask;
    1372:	4a0d      	ldr	r2, [pc, #52]	; (13a8 <nrf_cleanup_peripheral+0x54>)
    1374:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    p_reg->INTENCLR = mask;
    1378:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    137c:	f5a2 4250 	sub.w	r2, r2, #53248	; 0xd000
    1380:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1384:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    1388:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    138c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    1390:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    1394:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1398:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
#if defined(NRF_UARTE1)
    nrf_uarte_disable(NRF_UARTE1);
    nrf_uarte_int_disable(NRF_UARTE1, 0xFFFFFFFF);
#endif
    nrf_cleanup_clock();
}
    139c:	4770      	bx	lr
    139e:	bf00      	nop
    13a0:	50014004 	.word	0x50014004
    13a4:	50014000 	.word	0x50014000
    13a8:	50015000 	.word	0x50015000

000013ac <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    13ac:	680b      	ldr	r3, [r1, #0]
    13ae:	3301      	adds	r3, #1
    13b0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    13b2:	4b01      	ldr	r3, [pc, #4]	; (13b8 <char_out+0xc>)
    13b4:	681b      	ldr	r3, [r3, #0]
    13b6:	4718      	bx	r3
    13b8:	20014508 	.word	0x20014508

000013bc <__printk_hook_install>:
	_char_out = fn;
    13bc:	4b01      	ldr	r3, [pc, #4]	; (13c4 <__printk_hook_install+0x8>)
    13be:	6018      	str	r0, [r3, #0]
}
    13c0:	4770      	bx	lr
    13c2:	bf00      	nop
    13c4:	20014508 	.word	0x20014508

000013c8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    13c8:	b507      	push	{r0, r1, r2, lr}
    13ca:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    13cc:	2100      	movs	r1, #0
{
    13ce:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    13d0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    13d2:	4803      	ldr	r0, [pc, #12]	; (13e0 <vprintk+0x18>)
    13d4:	a901      	add	r1, sp, #4
    13d6:	f000 f8eb 	bl	15b0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    13da:	b003      	add	sp, #12
    13dc:	f85d fb04 	ldr.w	pc, [sp], #4
    13e0:	000013ad 	.word	0x000013ad

000013e4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13e8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
    13ec:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13ee:	f019 0808 	ands.w	r8, r9, #8
{
    13f2:	4693      	mov	fp, r2
	if (processing) {
    13f4:	d00d      	beq.n	1412 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    13f6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13f8:	bf0c      	ite	eq
    13fa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13fe:	f049 0920 	orrne.w	r9, r9, #32
    1402:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1406:	f38b 8811 	msr	BASEPRI, fp
    140a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    140e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1412:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1416:	2902      	cmp	r1, #2
    1418:	d107      	bne.n	142a <process_event+0x46>
			evt = process_recheck(mgr);
    141a:	4620      	mov	r0, r4
    141c:	f004 fa4c 	bl	58b8 <process_recheck>
		if (evt == EVT_NOP) {
    1420:	2800      	cmp	r0, #0
    1422:	d0f0      	beq.n	1406 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1424:	2801      	cmp	r0, #1
    1426:	8b23      	ldrh	r3, [r4, #24]
    1428:	d150      	bne.n	14cc <process_event+0xe8>
			res = mgr->last_res;
    142a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    142c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    142e:	2f00      	cmp	r7, #0
    1430:	da15      	bge.n	145e <process_event+0x7a>
		*clients = mgr->clients;
    1432:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1434:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1438:	e9c4 8800 	strd	r8, r8, [r4]
    143c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1440:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1442:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1444:	8b21      	ldrh	r1, [r4, #24]
    1446:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    144a:	45ca      	cmp	sl, r9
    144c:	d002      	beq.n	1454 <process_event+0x70>
		if (do_monitors
    144e:	68a3      	ldr	r3, [r4, #8]
    1450:	2b00      	cmp	r3, #0
    1452:	d15c      	bne.n	150e <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    1454:	b90d      	cbnz	r5, 145a <process_event+0x76>
		    || (transit != NULL)) {
    1456:	2e00      	cmp	r6, #0
    1458:	d074      	beq.n	1544 <process_event+0x160>
    145a:	2300      	movs	r3, #0
    145c:	e058      	b.n	1510 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    145e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1462:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1464:	2a01      	cmp	r2, #1
    1466:	d820      	bhi.n	14aa <process_event+0xc6>
		*clients = mgr->clients;
    1468:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    146c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    146e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    1470:	b289      	uxth	r1, r1
	list->tail = NULL;
    1472:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1476:	d10c      	bne.n	1492 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1478:	2d00      	cmp	r5, #0
    147a:	462b      	mov	r3, r5
    147c:	bf38      	it	cc
    147e:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1480:	b12b      	cbz	r3, 148e <process_event+0xaa>
				mgr->refs += 1U;
    1482:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1484:	681b      	ldr	r3, [r3, #0]
    1486:	3201      	adds	r2, #1
    1488:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    148a:	2b00      	cmp	r3, #0
    148c:	d1f8      	bne.n	1480 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    148e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
    1492:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    1494:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1496:	f004 fa0f 	bl	58b8 <process_recheck>
    149a:	4606      	mov	r6, r0
    149c:	2800      	cmp	r0, #0
    149e:	d0d1      	beq.n	1444 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14a0:	8b23      	ldrh	r3, [r4, #24]
    14a2:	f043 0320 	orr.w	r3, r3, #32
    14a6:	8323      	strh	r3, [r4, #24]
    14a8:	e7cb      	b.n	1442 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14aa:	2b04      	cmp	r3, #4
    14ac:	d10c      	bne.n	14c8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ae:	f021 0107 	bic.w	r1, r1, #7
    14b2:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
    14b4:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
    14b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    14b8:	f004 f9fe 	bl	58b8 <process_recheck>
    14bc:	4605      	mov	r5, r0
    14be:	2800      	cmp	r0, #0
    14c0:	d0bf      	beq.n	1442 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14c2:	f041 0120 	orr.w	r1, r1, #32
    14c6:	8321      	strh	r1, [r4, #24]
    14c8:	2500      	movs	r5, #0
    14ca:	e7ba      	b.n	1442 <process_event+0x5e>
		} else if (evt == EVT_START) {
    14cc:	2803      	cmp	r0, #3
    14ce:	d109      	bne.n	14e4 <process_event+0x100>
			transit = mgr->transitions->start;
    14d0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    14d6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14d8:	f043 0306 	orr.w	r3, r3, #6
}
    14dc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
    14de:	8323      	strh	r3, [r4, #24]
		res = 0;
    14e0:	462f      	mov	r7, r5
    14e2:	e7af      	b.n	1444 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    14e4:	2804      	cmp	r0, #4
    14e6:	d106      	bne.n	14f6 <process_event+0x112>
			transit = mgr->transitions->stop;
    14e8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14ea:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    14ee:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14f0:	f043 0304 	orr.w	r3, r3, #4
    14f4:	e7f2      	b.n	14dc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    14f6:	2805      	cmp	r0, #5
    14f8:	d106      	bne.n	1508 <process_event+0x124>
			transit = mgr->transitions->reset;
    14fa:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14fc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1500:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1502:	f043 0305 	orr.w	r3, r3, #5
    1506:	e7e9      	b.n	14dc <process_event+0xf8>
    1508:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    150a:	462e      	mov	r6, r5
    150c:	e7e8      	b.n	14e0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    150e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1510:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1514:	8321      	strh	r1, [r4, #24]
    1516:	f38b 8811 	msr	BASEPRI, fp
    151a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    151e:	bb03      	cbnz	r3, 1562 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    1520:	2d00      	cmp	r5, #0
    1522:	d133      	bne.n	158c <process_event+0x1a8>
			if (transit != NULL) {
    1524:	b116      	cbz	r6, 152c <process_event+0x148>
				transit(mgr, transition_complete);
    1526:	4620      	mov	r0, r4
    1528:	4920      	ldr	r1, [pc, #128]	; (15ac <process_event+0x1c8>)
    152a:	47b0      	blx	r6
	__asm__ volatile(
    152c:	f04f 0320 	mov.w	r3, #32
    1530:	f3ef 8b11 	mrs	fp, BASEPRI
    1534:	f383 8811 	msr	BASEPRI, r3
    1538:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    153c:	8b23      	ldrh	r3, [r4, #24]
    153e:	f023 0308 	bic.w	r3, r3, #8
    1542:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1544:	8b23      	ldrh	r3, [r4, #24]
    1546:	06da      	lsls	r2, r3, #27
    1548:	d528      	bpl.n	159c <process_event+0x1b8>
			evt = EVT_COMPLETE;
    154a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    154c:	f023 0310 	bic.w	r3, r3, #16
    1550:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1552:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1556:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    155a:	2900      	cmp	r1, #0
    155c:	f47f af5b 	bne.w	1416 <process_event+0x32>
out:
    1560:	e751      	b.n	1406 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1562:	68a1      	ldr	r1, [r4, #8]
    1564:	2900      	cmp	r1, #0
    1566:	d0db      	beq.n	1520 <process_event+0x13c>
	return node->next;
    1568:	680b      	ldr	r3, [r1, #0]
    156a:	2b00      	cmp	r3, #0
    156c:	bf38      	it	cc
    156e:	2300      	movcc	r3, #0
    1570:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
    1572:	4652      	mov	r2, sl
    1574:	463b      	mov	r3, r7
    1576:	4620      	mov	r0, r4
    1578:	f8d1 b004 	ldr.w	fp, [r1, #4]
    157c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    157e:	f1b9 0f00 	cmp.w	r9, #0
    1582:	d0cd      	beq.n	1520 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1584:	4649      	mov	r1, r9
    1586:	f8d9 3000 	ldr.w	r3, [r9]
    158a:	e7ee      	b.n	156a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    158c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    158e:	463b      	mov	r3, r7
    1590:	4652      	mov	r2, sl
    1592:	4620      	mov	r0, r4
    1594:	682d      	ldr	r5, [r5, #0]
    1596:	f004 f9ab 	bl	58f0 <notify_one>
    159a:	e7c1      	b.n	1520 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    159c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15a0:	bf1e      	ittt	ne
    15a2:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
    15a6:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    15a8:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    15aa:	e7d2      	b.n	1552 <process_event+0x16e>
    15ac:	0000591d 	.word	0x0000591d

000015b0 <cbvprintf>:
 * @param ap Variable parameters
 *
 * @return N/A
 */
int cbvprintf(cbprintf_cb out, void *ctx, const char *fmt, va_list ap)
{
    15b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t count = 0;
    15b4:	2400      	movs	r4, #0
{
    15b6:	4606      	mov	r6, r0
    15b8:	468b      	mov	fp, r1
    15ba:	469a      	mov	sl, r3
	int might_format = 0; /* 1 if encountered a '%' */
	enum pad_type padding = PAD_NONE;
	int padlen, min_width = -1;
    15bc:	f04f 35ff 	mov.w	r5, #4294967295
	enum pad_type padding = PAD_NONE;
    15c0:	4627      	mov	r7, r4
{
    15c2:	b08d      	sub	sp, #52	; 0x34
	size_t count = 0;
    15c4:	940b      	str	r4, [sp, #44]	; 0x2c
	char length_mod = 0;

	/* fmt has already been adjusted if needed */
	while (*fmt) {
    15c6:	f102 39ff 	add.w	r9, r2, #4294967295
			default:
				OUTC('%');
				OUTC(*fmt);
				break;
			}
			might_format = 0;
    15ca:	f04f 0800 	mov.w	r8, #0
		}
still_might_format:
		++fmt;
    15ce:	e00a      	b.n	15e6 <cbvprintf+0x36>
		if (!might_format) {
    15d0:	f1b8 0f00 	cmp.w	r8, #0
    15d4:	d10f      	bne.n	15f6 <cbvprintf+0x46>
			if (*fmt != '%') {
    15d6:	2825      	cmp	r0, #37	; 0x25
    15d8:	f000 813a 	beq.w	1850 <cbvprintf+0x2a0>
				OUTC(*fmt);
    15dc:	4659      	mov	r1, fp
    15de:	47b0      	blx	r6
    15e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    15e2:	3201      	adds	r2, #1
    15e4:	920b      	str	r2, [sp, #44]	; 0x2c
	while (*fmt) {
    15e6:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    15ea:	2800      	cmp	r0, #0
    15ec:	d1f0      	bne.n	15d0 <cbvprintf+0x20>
	}

	return count;
}
    15ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    15f0:	b00d      	add	sp, #52	; 0x34
    15f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    15f6:	287a      	cmp	r0, #122	; 0x7a
    15f8:	d80a      	bhi.n	1610 <cbvprintf+0x60>
    15fa:	2862      	cmp	r0, #98	; 0x62
    15fc:	d812      	bhi.n	1624 <cbvprintf+0x74>
    15fe:	2830      	cmp	r0, #48	; 0x30
    1600:	d053      	beq.n	16aa <cbvprintf+0xfa>
    1602:	d847      	bhi.n	1694 <cbvprintf+0xe4>
    1604:	2825      	cmp	r0, #37	; 0x25
    1606:	f000 811d 	beq.w	1844 <cbvprintf+0x294>
    160a:	282d      	cmp	r0, #45	; 0x2d
    160c:	f000 8127 	beq.w	185e <cbvprintf+0x2ae>
				OUTC('%');
    1610:	4659      	mov	r1, fp
    1612:	2025      	movs	r0, #37	; 0x25
    1614:	47b0      	blx	r6
    1616:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				OUTC(*fmt);
    1618:	4659      	mov	r1, fp
				OUTC('%');
    161a:	3201      	adds	r2, #1
				OUTC(*fmt);
    161c:	f899 0000 	ldrb.w	r0, [r9]
				OUTC('%');
    1620:	920b      	str	r2, [sp, #44]	; 0x2c
				OUTC(*fmt);
    1622:	e110      	b.n	1846 <cbvprintf+0x296>
    1624:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    1628:	2a17      	cmp	r2, #23
    162a:	d8f1      	bhi.n	1610 <cbvprintf+0x60>
    162c:	a301      	add	r3, pc, #4	; (adr r3, 1634 <cbvprintf+0x84>)
    162e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    1632:	bf00      	nop
    1634:	00001835 	.word	0x00001835
    1638:	000016e7 	.word	0x000016e7
    163c:	00001611 	.word	0x00001611
    1640:	00001611 	.word	0x00001611
    1644:	00001611 	.word	0x00001611
    1648:	000016c9 	.word	0x000016c9
    164c:	000016e7 	.word	0x000016e7
    1650:	00001611 	.word	0x00001611
    1654:	00001611 	.word	0x00001611
    1658:	000016c9 	.word	0x000016c9
    165c:	00001611 	.word	0x00001611
    1660:	00001611 	.word	0x00001611
    1664:	00001611 	.word	0x00001611
    1668:	00001771 	.word	0x00001771
    166c:	00001611 	.word	0x00001611
    1670:	00001611 	.word	0x00001611
    1674:	0000180f 	.word	0x0000180f
    1678:	00001611 	.word	0x00001611
    167c:	000016e7 	.word	0x000016e7
    1680:	00001611 	.word	0x00001611
    1684:	00001611 	.word	0x00001611
    1688:	00001771 	.word	0x00001771
    168c:	00001611 	.word	0x00001611
    1690:	000016c9 	.word	0x000016c9
			switch (*fmt) {
    1694:	2839      	cmp	r0, #57	; 0x39
    1696:	d90d      	bls.n	16b4 <cbvprintf+0x104>
    1698:	2858      	cmp	r0, #88	; 0x58
    169a:	d1b9      	bne.n	1610 <cbvprintf+0x60>
				} else if (length_mod == 'l') {
    169c:	2c6c      	cmp	r4, #108	; 0x6c
    169e:	f040 80aa 	bne.w	17f6 <cbvprintf+0x246>
					x = va_arg(ap, unsigned int);
    16a2:	2300      	movs	r3, #0
    16a4:	f85a 2b04 	ldr.w	r2, [sl], #4
    16a8:	e091      	b.n	17ce <cbvprintf+0x21e>
				if (min_width < 0 && padding == PAD_NONE) {
    16aa:	2d00      	cmp	r5, #0
    16ac:	da02      	bge.n	16b4 <cbvprintf+0x104>
    16ae:	2f00      	cmp	r7, #0
    16b0:	f000 80d7 	beq.w	1862 <cbvprintf+0x2b2>
				min_width = 10 * min_width + *fmt - '0';
    16b4:	220a      	movs	r2, #10
    16b6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    16ba:	fb02 0505 	mla	r5, r2, r5, r0
					padding = PAD_SPACE_BEFORE;
    16be:	2f00      	cmp	r7, #0
    16c0:	bf08      	it	eq
    16c2:	2702      	moveq	r7, #2
				min_width = 10 * min_width + *fmt - '0';
    16c4:	3d30      	subs	r5, #48	; 0x30
				if (padding == PAD_NONE) {
    16c6:	e78e      	b.n	15e6 <cbvprintf+0x36>
				if (*fmt == 'h' && length_mod == 'h') {
    16c8:	2868      	cmp	r0, #104	; 0x68
    16ca:	d103      	bne.n	16d4 <cbvprintf+0x124>
    16cc:	2c68      	cmp	r4, #104	; 0x68
    16ce:	d106      	bne.n	16de <cbvprintf+0x12e>
					length_mod = 'H';
    16d0:	2448      	movs	r4, #72	; 0x48
    16d2:	e788      	b.n	15e6 <cbvprintf+0x36>
				} else if (*fmt == 'l' && length_mod == 'l') {
    16d4:	286c      	cmp	r0, #108	; 0x6c
    16d6:	d102      	bne.n	16de <cbvprintf+0x12e>
    16d8:	2c6c      	cmp	r4, #108	; 0x6c
    16da:	f000 80c4 	beq.w	1866 <cbvprintf+0x2b6>
				} else if (length_mod == 0) {
    16de:	2c00      	cmp	r4, #0
    16e0:	d196      	bne.n	1610 <cbvprintf+0x60>
    16e2:	4604      	mov	r4, r0
    16e4:	e77f      	b.n	15e6 <cbvprintf+0x36>
				if (length_mod == 'z') {
    16e6:	2c7a      	cmp	r4, #122	; 0x7a
    16e8:	d106      	bne.n	16f8 <cbvprintf+0x148>
					d = va_arg(ap, long);
    16ea:	46d0      	mov	r8, sl
    16ec:	f858 2b04 	ldr.w	r2, [r8], #4
    16f0:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    16f2:	2875      	cmp	r0, #117	; 0x75
    16f4:	d128      	bne.n	1748 <cbvprintf+0x198>
    16f6:	e011      	b.n	171c <cbvprintf+0x16c>
				} else if (length_mod == 'l') {
    16f8:	2c6c      	cmp	r4, #108	; 0x6c
    16fa:	d0f6      	beq.n	16ea <cbvprintf+0x13a>
				} else if (length_mod == 'L') {
    16fc:	2c4c      	cmp	r4, #76	; 0x4c
    16fe:	d106      	bne.n	170e <cbvprintf+0x15e>
					long long lld = va_arg(ap,
    1700:	f10a 0307 	add.w	r3, sl, #7
    1704:	f023 0807 	bic.w	r8, r3, #7
					d = (uint_value_type) lld;
    1708:	e8f8 2302 	ldrd	r2, r3, [r8], #8
    170c:	e7f1      	b.n	16f2 <cbvprintf+0x142>
				} else if (*fmt == 'u') {
    170e:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    1710:	f8da 2000 	ldr.w	r2, [sl]
    1714:	f10a 0804 	add.w	r8, sl, #4
				} else if (*fmt == 'u') {
    1718:	d115      	bne.n	1746 <cbvprintf+0x196>
					d = va_arg(ap, unsigned int);
    171a:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10U, padding != PAD_SPACE_AFTER,
    171c:	1ef8      	subs	r0, r7, #3
    171e:	bf18      	it	ne
    1720:	2001      	movne	r0, #1
    1722:	2f01      	cmp	r7, #1
    1724:	bf0c      	ite	eq
    1726:	2130      	moveq	r1, #48	; 0x30
    1728:	2120      	movne	r1, #32
    172a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    172e:	200a      	movs	r0, #10
    1730:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    1734:	9000      	str	r0, [sp, #0]
    1736:	4659      	mov	r1, fp
    1738:	4630      	mov	r0, r6
    173a:	e9cd 5e03 	strd	r5, lr, [sp, #12]
    173e:	f004 fa42 	bl	5bc6 <print_digits>
}
    1742:	46c2      	mov	sl, r8
    1744:	e741      	b.n	15ca <cbvprintf+0x1a>
					d = va_arg(ap, int);
    1746:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    1748:	2a00      	cmp	r2, #0
    174a:	f173 0100 	sbcs.w	r1, r3, #0
    174e:	dae5      	bge.n	171c <cbvprintf+0x16c>
					OUTC('-');
    1750:	4659      	mov	r1, fp
    1752:	202d      	movs	r0, #45	; 0x2d
    1754:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1758:	47b0      	blx	r6
					d = -d;
    175a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
					OUTC('-');
    175e:	980b      	ldr	r0, [sp, #44]	; 0x2c
					d = -d;
    1760:	4252      	negs	r2, r2
					OUTC('-');
    1762:	f100 0001 	add.w	r0, r0, #1
    1766:	900b      	str	r0, [sp, #44]	; 0x2c
					d = -d;
    1768:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    176c:	3d01      	subs	r5, #1
    176e:	e7d5      	b.n	171c <cbvprintf+0x16c>
				if (*fmt == 'p') {
    1770:	2870      	cmp	r0, #112	; 0x70
    1772:	d193      	bne.n	169c <cbvprintf+0xec>
					x = (uintptr_t)va_arg(ap, void *);
    1774:	f85a 8b04 	ldr.w	r8, [sl], #4
						cp = "0x";
    1778:	4b3c      	ldr	r3, [pc, #240]	; (186c <cbvprintf+0x2bc>)
    177a:	4a3d      	ldr	r2, [pc, #244]	; (1870 <cbvprintf+0x2c0>)
    177c:	f1b8 0f00 	cmp.w	r8, #0
    1780:	bf18      	it	ne
    1782:	4613      	movne	r3, r2
						OUTC(*cp++);
    1784:	f813 0b01 	ldrb.w	r0, [r3], #1
    1788:	4659      	mov	r1, fp
    178a:	9306      	str	r3, [sp, #24]
    178c:	9309      	str	r3, [sp, #36]	; 0x24
    178e:	47b0      	blx	r6
    1790:	980b      	ldr	r0, [sp, #44]	; 0x2c
					} while (*cp);
    1792:	9b06      	ldr	r3, [sp, #24]
						OUTC(*cp++);
    1794:	3001      	adds	r0, #1
    1796:	900b      	str	r0, [sp, #44]	; 0x2c
					} while (*cp);
    1798:	7818      	ldrb	r0, [r3, #0]
    179a:	2800      	cmp	r0, #0
    179c:	d1f2      	bne.n	1784 <cbvprintf+0x1d4>
					if (x == 0) {
    179e:	f1b8 0f00 	cmp.w	r8, #0
    17a2:	d111      	bne.n	17c8 <cbvprintf+0x218>
						padlen = min_width - 5;
    17a4:	1f6a      	subs	r2, r5, #5
				if (padding == PAD_SPACE_AFTER) {
    17a6:	2f03      	cmp	r7, #3
    17a8:	f47f af0f 	bne.w	15ca <cbvprintf+0x1a>
    17ac:	4690      	mov	r8, r2
					while (padlen-- > 0) {
    17ae:	f1b8 0f00 	cmp.w	r8, #0
    17b2:	f77f af0a 	ble.w	15ca <cbvprintf+0x1a>
						OUTC(' ');
    17b6:	4659      	mov	r1, fp
    17b8:	2020      	movs	r0, #32
    17ba:	47b0      	blx	r6
    17bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    17be:	f108 38ff 	add.w	r8, r8, #4294967295
    17c2:	3201      	adds	r2, #1
    17c4:	920b      	str	r2, [sp, #44]	; 0x2c
    17c6:	e7f2      	b.n	17ae <cbvprintf+0x1fe>
					x = (uintptr_t)va_arg(ap, void *);
    17c8:	4642      	mov	r2, r8
    17ca:	4603      	mov	r3, r0
					min_width -= 2;
    17cc:	3d02      	subs	r5, #2
	print_digits(out, ctx, num, 16U, padding != PAD_SPACE_AFTER,
    17ce:	1ef8      	subs	r0, r7, #3
    17d0:	bf18      	it	ne
    17d2:	2001      	movne	r0, #1
    17d4:	2f01      	cmp	r7, #1
    17d6:	bf0c      	ite	eq
    17d8:	2130      	moveq	r1, #48	; 0x30
    17da:	2120      	movne	r1, #32
    17dc:	e9cd 0101 	strd	r0, r1, [sp, #4]
    17e0:	2010      	movs	r0, #16
    17e2:	f10d 0e2c 	add.w	lr, sp, #44	; 0x2c
    17e6:	9000      	str	r0, [sp, #0]
    17e8:	4659      	mov	r1, fp
    17ea:	4630      	mov	r0, r6
    17ec:	e9cd 5e03 	strd	r5, lr, [sp, #12]
    17f0:	f004 f9e9 	bl	5bc6 <print_digits>
    17f4:	e6e9      	b.n	15ca <cbvprintf+0x1a>
				} else if (length_mod == 'L') {
    17f6:	2c4c      	cmp	r4, #76	; 0x4c
    17f8:	f47f af53 	bne.w	16a2 <cbvprintf+0xf2>
					x = va_arg(ap, unsigned long long);
    17fc:	f10a 0307 	add.w	r3, sl, #7
    1800:	f023 0307 	bic.w	r3, r3, #7
    1804:	469a      	mov	sl, r3
    1806:	685b      	ldr	r3, [r3, #4]
    1808:	f85a 2b08 	ldr.w	r2, [sl], #8
    180c:	e7df      	b.n	17ce <cbvprintf+0x21e>
				char *s = va_arg(ap, char *);
    180e:	f85a 8b04 	ldr.w	r8, [sl], #4
				while (*s) {
    1812:	4643      	mov	r3, r8
    1814:	469c      	mov	ip, r3
    1816:	f813 0b01 	ldrb.w	r0, [r3], #1
    181a:	b918      	cbnz	r0, 1824 <cbvprintf+0x274>
				padlen = min_width - (s - start);
    181c:	ebac 0208 	sub.w	r2, ip, r8
    1820:	1aaa      	subs	r2, r5, r2
    1822:	e7c0      	b.n	17a6 <cbvprintf+0x1f6>
					OUTC(*s++);
    1824:	4659      	mov	r1, fp
    1826:	9306      	str	r3, [sp, #24]
    1828:	47b0      	blx	r6
    182a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    182c:	9b06      	ldr	r3, [sp, #24]
    182e:	3001      	adds	r0, #1
    1830:	900b      	str	r0, [sp, #44]	; 0x2c
    1832:	e7ef      	b.n	1814 <cbvprintf+0x264>
				OUTC(c);
    1834:	4659      	mov	r1, fp
    1836:	f85a 0b04 	ldr.w	r0, [sl], #4
    183a:	47b0      	blx	r6
    183c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    183e:	3301      	adds	r3, #1
    1840:	930b      	str	r3, [sp, #44]	; 0x2c
    1842:	e6c2      	b.n	15ca <cbvprintf+0x1a>
				OUTC('%');
    1844:	4659      	mov	r1, fp
				OUTC(*fmt);
    1846:	47b0      	blx	r6
    1848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    184a:	3201      	adds	r2, #1
    184c:	920b      	str	r2, [sp, #44]	; 0x2c
    184e:	e6bc      	b.n	15ca <cbvprintf+0x1a>
				length_mod = 0;
    1850:	4644      	mov	r4, r8
				padding = PAD_NONE;
    1852:	4647      	mov	r7, r8
				min_width = -1;
    1854:	f04f 35ff 	mov.w	r5, #4294967295
				might_format = 1;
    1858:	f04f 0801 	mov.w	r8, #1
    185c:	e6c3      	b.n	15e6 <cbvprintf+0x36>
			switch (*fmt) {
    185e:	2703      	movs	r7, #3
    1860:	e6c1      	b.n	15e6 <cbvprintf+0x36>
					padding = PAD_ZERO_BEFORE;
    1862:	2701      	movs	r7, #1
    1864:	e6bf      	b.n	15e6 <cbvprintf+0x36>
					length_mod = 'L';
    1866:	244c      	movs	r4, #76	; 0x4c
    1868:	e6bd      	b.n	15e6 <cbvprintf+0x36>
    186a:	bf00      	nop
    186c:	00008b7e 	.word	0x00008b7e
    1870:	00008b84 	.word	0x00008b84

00001874 <nordicsemi_nrf91_init>:
    1874:	f04f 0220 	mov.w	r2, #32
    1878:	f3ef 8311 	mrs	r3, BASEPRI
    187c:	f382 8811 	msr	BASEPRI, r2
    1880:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1884:	2101      	movs	r1, #1
    1886:	4a04      	ldr	r2, [pc, #16]	; (1898 <nordicsemi_nrf91_init+0x24>)
    1888:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    188c:	f383 8811 	msr	BASEPRI, r3
    1890:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1894:	2000      	movs	r0, #0
    1896:	4770      	bx	lr
    1898:	50039000 	.word	0x50039000

0000189c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    189c:	b120      	cbz	r0, 18a8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    189e:	4b03      	ldr	r3, [pc, #12]	; (18ac <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    18a0:	0180      	lsls	r0, r0, #6
    18a2:	f043 0301 	orr.w	r3, r3, #1
    18a6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    18a8:	4770      	bx	lr
    18aa:	bf00      	nop
    18ac:	000082d0 	.word	0x000082d0

000018b0 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    18b0:	4b09      	ldr	r3, [pc, #36]	; (18d8 <get_flash_area_from_id+0x28>)
{
    18b2:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    18b4:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    18b6:	4b09      	ldr	r3, [pc, #36]	; (18dc <get_flash_area_from_id+0x2c>)
{
    18b8:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    18ba:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    18bc:	2300      	movs	r3, #0
    18be:	429d      	cmp	r5, r3
    18c0:	dc01      	bgt.n	18c6 <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    18c2:	2000      	movs	r0, #0
}
    18c4:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    18c6:	0119      	lsls	r1, r3, #4
    18c8:	5c61      	ldrb	r1, [r4, r1]
    18ca:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    18ce:	4291      	cmp	r1, r2
    18d0:	d0f8      	beq.n	18c4 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    18d2:	3301      	adds	r3, #1
    18d4:	e7f3      	b.n	18be <get_flash_area_from_id+0xe>
    18d6:	bf00      	nop
    18d8:	00008388 	.word	0x00008388
    18dc:	2001450c 	.word	0x2001450c

000018e0 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    18e0:	4b08      	ldr	r3, [pc, #32]	; (1904 <flash_area_open+0x24>)
{
    18e2:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
    18e4:	681b      	ldr	r3, [r3, #0]
{
    18e6:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    18e8:	b12b      	cbz	r3, 18f6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    18ea:	f7ff ffe1 	bl	18b0 <get_flash_area_from_id>
	if (area == NULL) {
    18ee:	b128      	cbz	r0, 18fc <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    18f0:	6020      	str	r0, [r4, #0]
	return 0;
    18f2:	2000      	movs	r0, #0
}
    18f4:	bd10      	pop	{r4, pc}
		return -EACCES;
    18f6:	f06f 000c 	mvn.w	r0, #12
    18fa:	e7fb      	b.n	18f4 <flash_area_open+0x14>
		return -ENOENT;
    18fc:	f06f 0001 	mvn.w	r0, #1
    1900:	e7f8      	b.n	18f4 <flash_area_open+0x14>
    1902:	bf00      	nop
    1904:	2001450c 	.word	0x2001450c

00001908 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    1908:	b530      	push	{r4, r5, lr}
    190a:	b089      	sub	sp, #36	; 0x24
    190c:	460c      	mov	r4, r1
    190e:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    1910:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    1912:	f7ff ffcd 	bl	18b0 <get_flash_area_from_id>
	if (fa == NULL) {
    1916:	b1b8      	cbz	r0, 1948 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    1918:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
    191a:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
    191c:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    191e:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
    1920:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    1922:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    1926:	2300      	movs	r3, #0
	cb_data->status = 0;
    1928:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    192c:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    192e:	f004 f9af 	bl	5c90 <device_get_binding>
	if (flash_dev == NULL) {
    1932:	b160      	cbz	r0, 194e <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    1934:	4907      	ldr	r1, [pc, #28]	; (1954 <flash_area_get_sectors+0x4c>)
    1936:	aa01      	add	r2, sp, #4
    1938:	f004 fbce 	bl	60d8 <flash_page_foreach>
	if (cb_data->status == 0) {
    193c:	9807      	ldr	r0, [sp, #28]
    193e:	b908      	cbnz	r0, 1944 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    1940:	9b05      	ldr	r3, [sp, #20]
    1942:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    1944:	b009      	add	sp, #36	; 0x24
    1946:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    1948:	f06f 0015 	mvn.w	r0, #21
    194c:	e7fa      	b.n	1944 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    194e:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    1952:	e7f7      	b.n	1944 <flash_area_get_sectors+0x3c>
    1954:	00005c95 	.word	0x00005c95

00001958 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    1958:	4604      	mov	r4, r0
    195a:	b508      	push	{r3, lr}
	__asm__ volatile(
    195c:	f04f 0220 	mov.w	r2, #32
    1960:	f3ef 8311 	mrs	r3, BASEPRI
    1964:	f382 8811 	msr	BASEPRI, r2
    1968:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    196c:	f004 fac7 	bl	5efe <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1970:	4620      	mov	r0, r4
    1972:	f000 fe7f 	bl	2674 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1976:	4803      	ldr	r0, [pc, #12]	; (1984 <sys_reboot+0x2c>)
    1978:	f003 ff91 	bl	589e <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    197c:	f000 fc08 	bl	2190 <arch_cpu_idle>
    1980:	e7fc      	b.n	197c <sys_reboot+0x24>
    1982:	bf00      	nop
    1984:	00008b91 	.word	0x00008b91

00001988 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1988:	280a      	cmp	r0, #10
{
    198a:	b538      	push	{r3, r4, r5, lr}
    198c:	4604      	mov	r4, r0
    198e:	4d06      	ldr	r5, [pc, #24]	; (19a8 <console_out+0x20>)
	if ('\n' == c) {
    1990:	d103      	bne.n	199a <console_out+0x12>
		uart_poll_out(uart_console_dev, '\r');
    1992:	210d      	movs	r1, #13
    1994:	6828      	ldr	r0, [r5, #0]
    1996:	f004 fa1a 	bl	5dce <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    199a:	6828      	ldr	r0, [r5, #0]
    199c:	b2e1      	uxtb	r1, r4
    199e:	f004 fa16 	bl	5dce <uart_poll_out>

	return c;
}
    19a2:	4620      	mov	r0, r4
    19a4:	bd38      	pop	{r3, r4, r5, pc}
    19a6:	bf00      	nop
    19a8:	20014fc4 	.word	0x20014fc4

000019ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    19ac:	b510      	push	{r4, lr}
    19ae:	4807      	ldr	r0, [pc, #28]	; (19cc <uart_console_init+0x20>)
    19b0:	f002 fd9c 	bl	44ec <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
    19b4:	4c06      	ldr	r4, [pc, #24]	; (19d0 <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    19b6:	4b07      	ldr	r3, [pc, #28]	; (19d4 <uart_console_init+0x28>)
    19b8:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    19ba:	4620      	mov	r0, r4
    19bc:	f000 ffdc 	bl	2978 <__stdout_hook_install>
	__printk_hook_install(console_out);
    19c0:	4620      	mov	r0, r4
    19c2:	f7ff fcfb 	bl	13bc <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    19c6:	2000      	movs	r0, #0
    19c8:	bd10      	pop	{r4, pc}
    19ca:	bf00      	nop
    19cc:	00008bba 	.word	0x00008bba
    19d0:	00001989 	.word	0x00001989
    19d4:	20014fc4 	.word	0x20014fc4

000019d8 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19d8:	b570      	push	{r4, r5, r6, lr}
    19da:	4604      	mov	r4, r0
	err = set_off_state(&subdata->flags, ctx);
    19dc:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
    19de:	480d      	ldr	r0, [pc, #52]	; (1a14 <onoff_stop+0x3c>)
{
    19e0:	460e      	mov	r6, r1
	size_t offset = (size_t)(mgr - data->mgr);
    19e2:	1a23      	subs	r3, r4, r0
    19e4:	109a      	asrs	r2, r3, #2
    19e6:	4b0c      	ldr	r3, [pc, #48]	; (1a18 <onoff_stop+0x40>)
	err = set_off_state(&subdata->flags, ctx);
    19e8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    19ea:	4353      	muls	r3, r2
    19ec:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    19ee:	435d      	muls	r5, r3
    19f0:	f105 0340 	add.w	r3, r5, #64	; 0x40
    19f4:	4418      	add	r0, r3
    19f6:	f004 f9f6 	bl	5de6 <set_off_state>
	if (err < 0) {
    19fa:	1e01      	subs	r1, r0, #0
    19fc:	db04      	blt.n	1a08 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    19fe:	4b07      	ldr	r3, [pc, #28]	; (1a1c <onoff_stop+0x44>)
    1a00:	442b      	add	r3, r5
    1a02:	685b      	ldr	r3, [r3, #4]
    1a04:	4798      	blx	r3
	return 0;
    1a06:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1a08:	4620      	mov	r0, r4
    1a0a:	4633      	mov	r3, r6
}
    1a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1a10:	4718      	bx	r3
    1a12:	bf00      	nop
    1a14:	20014fd8 	.word	0x20014fd8
    1a18:	b6db6db7 	.word	0xb6db6db7
    1a1c:	000083a0 	.word	0x000083a0

00001a20 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1a24:	4c0f      	ldr	r4, [pc, #60]	; (1a64 <onoff_start+0x44>)
    1a26:	4d10      	ldr	r5, [pc, #64]	; (1a68 <onoff_start+0x48>)
    1a28:	1b03      	subs	r3, r0, r4
    1a2a:	109b      	asrs	r3, r3, #2
    1a2c:	435d      	muls	r5, r3
    1a2e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    1a30:	250c      	movs	r5, #12
    1a32:	435d      	muls	r5, r3
{
    1a34:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    1a36:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    1a3a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1a3c:	4420      	add	r0, r4
    1a3e:	2140      	movs	r1, #64	; 0x40
    1a40:	f004 f9ea 	bl	5e18 <set_starting_state>
	if (err < 0) {
    1a44:	1e01      	subs	r1, r0, #0
    1a46:	db08      	blt.n	1a5a <onoff_start+0x3a>
	subdata->cb = cb;
    1a48:	4b08      	ldr	r3, [pc, #32]	; (1a6c <onoff_start+0x4c>)
    1a4a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1a4c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1a50:	4b07      	ldr	r3, [pc, #28]	; (1a70 <onoff_start+0x50>)
    1a52:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1a58:	4718      	bx	r3
		notify(mgr, err);
    1a5a:	4638      	mov	r0, r7
    1a5c:	4633      	mov	r3, r6
}
    1a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1a62:	4718      	bx	r3
    1a64:	20014fd8 	.word	0x20014fd8
    1a68:	b6db6db7 	.word	0xb6db6db7
    1a6c:	00005e81 	.word	0x00005e81
    1a70:	000083a0 	.word	0x000083a0

00001a74 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    1a74:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a76:	2200      	movs	r2, #0
    1a78:	2101      	movs	r1, #1
{
    1a7a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a7c:	2005      	movs	r0, #5
    1a7e:	f000 fb47 	bl	2110 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1a82:	2005      	movs	r0, #5
    1a84:	f000 fb26 	bl	20d4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1a88:	480f      	ldr	r0, [pc, #60]	; (1ac8 <clk_init+0x54>)
    1a8a:	f001 fd73 	bl	3574 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1a8e:	4b0f      	ldr	r3, [pc, #60]	; (1acc <clk_init+0x58>)
    1a90:	4298      	cmp	r0, r3
    1a92:	d115      	bne.n	1ac0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1a94:	f004 fd39 	bl	650a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1a98:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1a9a:	490d      	ldr	r1, [pc, #52]	; (1ad0 <clk_init+0x5c>)
    1a9c:	4630      	mov	r0, r6
    1a9e:	f003 ff5a 	bl	5956 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1aa2:	2800      	cmp	r0, #0
    1aa4:	db0b      	blt.n	1abe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1aa6:	2501      	movs	r5, #1
    1aa8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    1aaa:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1aac:	4908      	ldr	r1, [pc, #32]	; (1ad0 <clk_init+0x5c>)
    1aae:	f104 001c 	add.w	r0, r4, #28
    1ab2:	f003 ff50 	bl	5956 <onoff_manager_init>
		if (err < 0) {
    1ab6:	2800      	cmp	r0, #0
    1ab8:	db01      	blt.n	1abe <clk_init+0x4a>
	}

	return 0;
    1aba:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1abc:	64e5      	str	r5, [r4, #76]	; 0x4c
}
    1abe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1ac0:	f06f 0004 	mvn.w	r0, #4
    1ac4:	e7fb      	b.n	1abe <clk_init+0x4a>
    1ac6:	bf00      	nop
    1ac8:	00001b09 	.word	0x00001b09
    1acc:	0bad0000 	.word	0x0bad0000
    1ad0:	000083b8 	.word	0x000083b8

00001ad4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1ad4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1ad6:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1ad8:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    1ada:	434b      	muls	r3, r1
    1adc:	4808      	ldr	r0, [pc, #32]	; (1b00 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    1ade:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1ae0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1ae2:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
    1ae4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1ae8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1aea:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1aec:	f004 f9b2 	bl	5e54 <set_on_state>
	if (callback) {
    1af0:	b12d      	cbz	r5, 1afe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1af2:	4632      	mov	r2, r6
    1af4:	462b      	mov	r3, r5
}
    1af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1afa:	4802      	ldr	r0, [pc, #8]	; (1b04 <clkstarted_handle.constprop.0+0x30>)
    1afc:	4718      	bx	r3
}
    1afe:	bd70      	pop	{r4, r5, r6, pc}
    1b00:	20014fd8 	.word	0x20014fd8
    1b04:	20014608 	.word	0x20014608

00001b08 <clock_event_handler>:
	switch (event) {
    1b08:	b110      	cbz	r0, 1b10 <clock_event_handler+0x8>
    1b0a:	2801      	cmp	r0, #1
    1b0c:	d004      	beq.n	1b18 <clock_event_handler+0x10>
    1b0e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <clock_event_handler+0x18>)
    1b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b14:	075b      	lsls	r3, r3, #29
    1b16:	d101      	bne.n	1b1c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b18:	f7ff bfdc 	b.w	1ad4 <clkstarted_handle.constprop.0>
}
    1b1c:	4770      	bx	lr
    1b1e:	bf00      	nop
    1b20:	20014fd8 	.word	0x20014fd8

00001b24 <generic_hfclk_start>:
{
    1b24:	b508      	push	{r3, lr}
    1b26:	f04f 0320 	mov.w	r3, #32
    1b2a:	f3ef 8111 	mrs	r1, BASEPRI
    1b2e:	f383 8811 	msr	BASEPRI, r3
    1b32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1b36:	4a12      	ldr	r2, [pc, #72]	; (1b80 <generic_hfclk_start+0x5c>)
    1b38:	6813      	ldr	r3, [r2, #0]
    1b3a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1b3e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1b42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1b44:	d00c      	beq.n	1b60 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1b46:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1b4a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1b4e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1b52:	f013 0301 	ands.w	r3, r3, #1
    1b56:	d003      	beq.n	1b60 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1b58:	480a      	ldr	r0, [pc, #40]	; (1b84 <generic_hfclk_start+0x60>)
    1b5a:	f004 f97b 	bl	5e54 <set_on_state>
			already_started = true;
    1b5e:	2301      	movs	r3, #1
	__asm__ volatile(
    1b60:	f381 8811 	msr	BASEPRI, r1
    1b64:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1b68:	b123      	cbz	r3, 1b74 <generic_hfclk_start+0x50>
}
    1b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1b6e:	2000      	movs	r0, #0
    1b70:	f7ff bfb0 	b.w	1ad4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1b74:	2001      	movs	r0, #1
}
    1b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1b7a:	f001 bd0b 	b.w	3594 <nrfx_clock_start>
    1b7e:	bf00      	nop
    1b80:	20015028 	.word	0x20015028
    1b84:	20015018 	.word	0x20015018

00001b88 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1b88:	4b07      	ldr	r3, [pc, #28]	; (1ba8 <generic_hfclk_stop+0x20>)
    1b8a:	e8d3 2fef 	ldaex	r2, [r3]
    1b8e:	f022 0102 	bic.w	r1, r2, #2
    1b92:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1b96:	2800      	cmp	r0, #0
    1b98:	d1f7      	bne.n	1b8a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1b9a:	07d3      	lsls	r3, r2, #31
    1b9c:	d402      	bmi.n	1ba4 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1b9e:	2001      	movs	r0, #1
    1ba0:	f001 bd2a 	b.w	35f8 <nrfx_clock_stop>
}
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop
    1ba8:	20015028 	.word	0x20015028

00001bac <z_nrf_clock_control_lf_on>:
{
    1bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1bb0:	2201      	movs	r2, #1
    1bb2:	4606      	mov	r6, r0
    1bb4:	4939      	ldr	r1, [pc, #228]	; (1c9c <z_nrf_clock_control_lf_on+0xf0>)
    1bb6:	e8d1 3fef 	ldaex	r3, [r1]
    1bba:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1bbe:	2800      	cmp	r0, #0
    1bc0:	d1f9      	bne.n	1bb6 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1bc2:	b933      	cbnz	r3, 1bd2 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1bc4:	4936      	ldr	r1, [pc, #216]	; (1ca0 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1bc6:	4837      	ldr	r0, [pc, #220]	; (1ca4 <z_nrf_clock_control_lf_on+0xf8>)
    1bc8:	604b      	str	r3, [r1, #4]
    1bca:	60cb      	str	r3, [r1, #12]
    1bcc:	608a      	str	r2, [r1, #8]
    1bce:	f003 fed5 	bl	597c <onoff_request>
	switch (start_mode) {
    1bd2:	1e73      	subs	r3, r6, #1
    1bd4:	2b01      	cmp	r3, #1
    1bd6:	d832      	bhi.n	1c3e <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1bd8:	2e01      	cmp	r6, #1
    1bda:	d107      	bne.n	1bec <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1bdc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1be0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1be4:	f003 0303 	and.w	r3, r3, #3
    1be8:	2b02      	cmp	r3, #2
    1bea:	d028      	beq.n	1c3e <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1bec:	f006 f9d2 	bl	7f94 <k_is_in_isr>
    1bf0:	4604      	mov	r4, r0
    1bf2:	b918      	cbnz	r0, 1bfc <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
    1bf4:	4b2c      	ldr	r3, [pc, #176]	; (1ca8 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1bf6:	781b      	ldrb	r3, [r3, #0]
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d147      	bne.n	1c8c <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
    1bfc:	f04f 0320 	mov.w	r3, #32
    1c00:	f3ef 8511 	mrs	r5, BASEPRI
    1c04:	f383 8811 	msr	BASEPRI, r3
    1c08:	f3bf 8f6f 	isb	sy
    1c0c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1c0e:	4f27      	ldr	r7, [pc, #156]	; (1cac <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c10:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1cb0 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c14:	f8df 909c 	ldr.w	r9, [pc, #156]	; 1cb4 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1c18:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1c1c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1c20:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1c24:	03d2      	lsls	r2, r2, #15
    1c26:	d50c      	bpl.n	1c42 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1c28:	f003 0303 	and.w	r3, r3, #3
    1c2c:	2b02      	cmp	r3, #2
    1c2e:	d001      	beq.n	1c34 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1c30:	2e01      	cmp	r6, #1
    1c32:	d106      	bne.n	1c42 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
    1c34:	b324      	cbz	r4, 1c80 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
    1c36:	f385 8811 	msr	BASEPRI, r5
    1c3a:	f3bf 8f6f 	isb	sy
}
    1c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1c42:	b1c4      	cbz	r4, 1c76 <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1c44:	4628      	mov	r0, r5
    1c46:	f000 fab1 	bl	21ac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1c4a:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1c4e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1c52:	b2db      	uxtb	r3, r3
    1c54:	2b01      	cmp	r3, #1
    1c56:	d1df      	bne.n	1c18 <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1c58:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1c5a:	2900      	cmp	r1, #0
    1c5c:	d0dc      	beq.n	1c18 <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1c5e:	2100      	movs	r1, #0
    1c60:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1c62:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1c64:	2102      	movs	r1, #2
    1c66:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
    1c6a:	2220      	movs	r2, #32
    1c6c:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c70:	f8c9 3000 	str.w	r3, [r9]
}
    1c74:	e7d0      	b.n	1c18 <z_nrf_clock_control_lf_on+0x6c>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    1c76:	2100      	movs	r1, #0
    1c78:	2021      	movs	r0, #33	; 0x21
    1c7a:	f002 fffb 	bl	4c74 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1c7e:	e7e4      	b.n	1c4a <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
    1c80:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1c84:	2202      	movs	r2, #2
    1c86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1c8a:	e7d8      	b.n	1c3e <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
    1c8c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1c90:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1c92:	4605      	mov	r5, r0
    1c94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1c98:	e7b9      	b.n	1c0e <z_nrf_clock_control_lf_on+0x62>
    1c9a:	bf00      	nop
    1c9c:	2001502c 	.word	0x2001502c
    1ca0:	20014fc8 	.word	0x20014fc8
    1ca4:	20014ff4 	.word	0x20014ff4
    1ca8:	2001737e 	.word	0x2001737e
    1cac:	50005104 	.word	0x50005104
    1cb0:	e000e100 	.word	0xe000e100
    1cb4:	50005008 	.word	0x50005008

00001cb8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    1cb8:	4a04      	ldr	r2, [pc, #16]	; (1ccc <sys_clock_timeout_handler+0x14>)
    1cba:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1cbc:	1ac8      	subs	r0, r1, r3
    1cbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1cc2:	4403      	add	r3, r0
    1cc4:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    1cc6:	f003 b8f7 	b.w	4eb8 <z_clock_announce>
    1cca:	bf00      	nop
    1ccc:	2001503c 	.word	0x2001503c

00001cd0 <set_absolute_alarm>:
{
    1cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1cd4:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1cd8:	f04f 0900 	mov.w	r9, #0
    1cdc:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    1cde:	f100 0450 	add.w	r4, r0, #80	; 0x50
    1ce2:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    1ce6:	00a4      	lsls	r4, r4, #2
    1ce8:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    1cec:	b2a4      	uxth	r4, r4
    1cee:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    1cf2:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1cf6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1d64 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    1cfa:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1cfe:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1d02:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1d04:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1d08:	eba3 030a 	sub.w	r3, r3, sl
    1d0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1d10:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1d14:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1d16:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1d1a:	d102      	bne.n	1d22 <set_absolute_alarm+0x52>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1d1c:	2013      	movs	r0, #19
    1d1e:	f006 f93f 	bl	7fa0 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1d22:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1d26:	1aab      	subs	r3, r5, r2
    1d28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1d2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1d30:	bf88      	it	hi
    1d32:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d34:	f8c4 9000 	str.w	r9, [r4]
    1d38:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1d3a:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->EVTENSET = mask;
    1d3e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    1d42:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1d46:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1d4a:	459a      	cmp	sl, r3
    1d4c:	d006      	beq.n	1d5c <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    1d4e:	1aeb      	subs	r3, r5, r3
    1d50:	3b02      	subs	r3, #2
    1d52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1d5a:	d801      	bhi.n	1d60 <set_absolute_alarm+0x90>
}
    1d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    1d60:	462b      	mov	r3, r5
    1d62:	e7cf      	b.n	1d04 <set_absolute_alarm+0x34>
    1d64:	50015000 	.word	0x50015000

00001d68 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1d6a:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d6c:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d6e:	4e0f      	ldr	r6, [pc, #60]	; (1dac <rtc_nrf_isr+0x44>)
    1d70:	4b0f      	ldr	r3, [pc, #60]	; (1db0 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
    1d72:	4a10      	ldr	r2, [pc, #64]	; (1db4 <rtc_nrf_isr+0x4c>)
    1d74:	4618      	mov	r0, r3
    1d76:	681d      	ldr	r5, [r3, #0]
    1d78:	b104      	cbz	r4, 1d7c <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d7c:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1d80:	03c9      	lsls	r1, r1, #15
    1d82:	d5fa      	bpl.n	1d7a <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d84:	6831      	ldr	r1, [r6, #0]
    1d86:	2900      	cmp	r1, #0
    1d88:	d0f7      	beq.n	1d7a <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d8a:	6034      	str	r4, [r6, #0]
    1d8c:	6831      	ldr	r1, [r6, #0]
    p_reg->EVTENCLR = mask;
    1d8e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1d92:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1d96:	2401      	movs	r4, #1
    return p_reg->CC[ch];
    1d98:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
    1d9c:	b125      	cbz	r5, 1da8 <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
    1d9e:	2000      	movs	r0, #0
    1da0:	685a      	ldr	r2, [r3, #4]
    1da2:	601f      	str	r7, [r3, #0]
    1da4:	47a8      	blx	r5
    1da6:	e7e3      	b.n	1d70 <rtc_nrf_isr+0x8>
    1da8:	6005      	str	r5, [r0, #0]
}
    1daa:	e7e6      	b.n	1d7a <rtc_nrf_isr+0x12>
    1dac:	50015140 	.word	0x50015140
    1db0:	20015030 	.word	0x20015030
    1db4:	50015000 	.word	0x50015000

00001db8 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    1db8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    1dba:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    1dbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1dc0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    1dc4:	4d0d      	ldr	r5, [pc, #52]	; (1dfc <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1dc6:	2101      	movs	r1, #1
    1dc8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1dcc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    1dd0:	4b0b      	ldr	r3, [pc, #44]	; (1e00 <z_clock_driver_init+0x48>)
    1dd2:	2015      	movs	r0, #21
    1dd4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1dd8:	4622      	mov	r2, r4
    1dda:	f000 f999 	bl	2110 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1dde:	2015      	movs	r0, #21
    1de0:	f000 f978 	bl	20d4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1de4:	2301      	movs	r3, #1
    1de6:	4a07      	ldr	r2, [pc, #28]	; (1e04 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    1de8:	2002      	movs	r0, #2
    1dea:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    1dec:	4a06      	ldr	r2, [pc, #24]	; (1e08 <z_clock_driver_init+0x50>)
    1dee:	602b      	str	r3, [r5, #0]
    1df0:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1df2:	f7ff fedb 	bl	1bac <z_nrf_clock_control_lf_on>

	return 0;
}
    1df6:	4620      	mov	r0, r4
    1df8:	bd38      	pop	{r3, r4, r5, pc}
    1dfa:	bf00      	nop
    1dfc:	50015000 	.word	0x50015000
    1e00:	e000e100 	.word	0xe000e100
    1e04:	50015008 	.word	0x50015008
    1e08:	20015038 	.word	0x20015038

00001e0c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1e0c:	4b13      	ldr	r3, [pc, #76]	; (1e5c <z_clock_set_timeout+0x50>)
    1e0e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1e12:	bf08      	it	eq
    1e14:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1e16:	3801      	subs	r0, #1
    1e18:	2800      	cmp	r0, #0
    1e1a:	dd1c      	ble.n	1e56 <z_clock_set_timeout+0x4a>
    1e1c:	4298      	cmp	r0, r3
    1e1e:	bfa8      	it	ge
    1e20:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1e22:	4b0f      	ldr	r3, [pc, #60]	; (1e60 <z_clock_set_timeout+0x54>)
    1e24:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1e28:	4b0e      	ldr	r3, [pc, #56]	; (1e64 <z_clock_set_timeout+0x58>)
    1e2a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1e2c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1e2e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    1e32:	bf18      	it	ne
    1e34:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
    1e36:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1e3a:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
    1e3c:	4a0a      	ldr	r2, [pc, #40]	; (1e68 <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1e3e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1e40:	480a      	ldr	r0, [pc, #40]	; (1e6c <z_clock_set_timeout+0x60>)
    1e42:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1e44:	2000      	movs	r0, #0
    1e46:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1e48:	4a04      	ldr	r2, [pc, #16]	; (1e5c <z_clock_set_timeout+0x50>)
    1e4a:	4293      	cmp	r3, r2
    1e4c:	bf94      	ite	ls
    1e4e:	18c9      	addls	r1, r1, r3
    1e50:	1889      	addhi	r1, r1, r2
    1e52:	f7ff bf3d 	b.w	1cd0 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1e56:	2000      	movs	r0, #0
    1e58:	e7e3      	b.n	1e22 <z_clock_set_timeout+0x16>
    1e5a:	bf00      	nop
    1e5c:	007fffff 	.word	0x007fffff
    1e60:	50015000 	.word	0x50015000
    1e64:	2001503c 	.word	0x2001503c
    1e68:	20015030 	.word	0x20015030
    1e6c:	00001cb9 	.word	0x00001cb9

00001e70 <z_clock_elapsed>:
	__asm__ volatile(
    1e70:	f04f 0220 	mov.w	r2, #32
    1e74:	f3ef 8311 	mrs	r3, BASEPRI
    1e78:	f382 8811 	msr	BASEPRI, r2
    1e7c:	f3bf 8f6f 	isb	sy
    1e80:	4a06      	ldr	r2, [pc, #24]	; (1e9c <z_clock_elapsed+0x2c>)
    1e82:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1e86:	4a06      	ldr	r2, [pc, #24]	; (1ea0 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1e88:	6812      	ldr	r2, [r2, #0]
    1e8a:	1a80      	subs	r0, r0, r2
    1e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1e90:	f383 8811 	msr	BASEPRI, r3
    1e94:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1e98:	4770      	bx	lr
    1e9a:	bf00      	nop
    1e9c:	50015000 	.word	0x50015000
    1ea0:	2001503c 	.word	0x2001503c

00001ea4 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1ea4:	4801      	ldr	r0, [pc, #4]	; (1eac <nrf_cc3xx_platform_abort_init+0x8>)
    1ea6:	f003 b8c9 	b.w	503c <nrf_cc3xx_platform_set_abort>
    1eaa:	bf00      	nop
    1eac:	000083c4 	.word	0x000083c4

00001eb0 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1eb0:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1eb2:	b1b0      	cbz	r0, 1ee2 <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1eb4:	6843      	ldr	r3, [r0, #4]
    1eb6:	2b04      	cmp	r3, #4
    1eb8:	d10d      	bne.n	1ed6 <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1eba:	2200      	movs	r2, #0
    1ebc:	6803      	ldr	r3, [r0, #0]
    1ebe:	e8d3 1fef 	ldaex	r1, [r3]
    1ec2:	2901      	cmp	r1, #1
    1ec4:	d103      	bne.n	1ece <mutex_unlock_platform+0x1e>
    1ec6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1eca:	2800      	cmp	r0, #0
    1ecc:	d1f7      	bne.n	1ebe <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1ece:	4807      	ldr	r0, [pc, #28]	; (1eec <mutex_unlock_platform+0x3c>)
    1ed0:	bf08      	it	eq
    1ed2:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1ed4:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ed6:	b13b      	cbz	r3, 1ee8 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1ed8:	6800      	ldr	r0, [r0, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1eda:	f002 fcc5 	bl	4868 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1ede:	2000      	movs	r0, #0
    1ee0:	e7f8      	b.n	1ed4 <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1ee2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1ee6:	e7f5      	b.n	1ed4 <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1ee8:	4801      	ldr	r0, [pc, #4]	; (1ef0 <mutex_unlock_platform+0x40>)
    1eea:	e7f3      	b.n	1ed4 <mutex_unlock_platform+0x24>
    1eec:	ffff8fe9 	.word	0xffff8fe9
    1ef0:	ffff8fea 	.word	0xffff8fea

00001ef4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1ef4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1ef6:	4604      	mov	r4, r0
    1ef8:	b918      	cbnz	r0, 1f02 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1efa:	4b0d      	ldr	r3, [pc, #52]	; (1f30 <mutex_free_platform+0x3c>)
    1efc:	480d      	ldr	r0, [pc, #52]	; (1f34 <mutex_free_platform+0x40>)
    1efe:	685b      	ldr	r3, [r3, #4]
    1f00:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1f02:	6861      	ldr	r1, [r4, #4]
    1f04:	2908      	cmp	r1, #8
    1f06:	d00d      	beq.n	1f24 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f08:	f031 0304 	bics.w	r3, r1, #4
    1f0c:	d00a      	beq.n	1f24 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1f0e:	f011 0102 	ands.w	r1, r1, #2
    1f12:	d008      	beq.n	1f26 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1f14:	4621      	mov	r1, r4
    1f16:	4808      	ldr	r0, [pc, #32]	; (1f38 <mutex_free_platform+0x44>)
    1f18:	f002 fc04 	bl	4724 <k_mem_slab_free>
        mutex->mutex = NULL;
    1f1c:	2300      	movs	r3, #0
    1f1e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1f20:	2300      	movs	r3, #0
    1f22:	6063      	str	r3, [r4, #4]
}
    1f24:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1f26:	2214      	movs	r2, #20
    1f28:	6820      	ldr	r0, [r4, #0]
    1f2a:	f004 f84f 	bl	5fcc <memset>
    1f2e:	e7f7      	b.n	1f20 <mutex_free_platform+0x2c>
    1f30:	200145a8 	.word	0x200145a8
    1f34:	00008beb 	.word	0x00008beb
    1f38:	20015040 	.word	0x20015040

00001f3c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f3c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1f3e:	4604      	mov	r4, r0
    1f40:	b918      	cbnz	r0, 1f4a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1f42:	4b16      	ldr	r3, [pc, #88]	; (1f9c <mutex_init_platform+0x60>)
    1f44:	4816      	ldr	r0, [pc, #88]	; (1fa0 <mutex_init_platform+0x64>)
    1f46:	685b      	ldr	r3, [r3, #4]
    1f48:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1f4a:	6863      	ldr	r3, [r4, #4]
    1f4c:	2b04      	cmp	r3, #4
    1f4e:	d023      	beq.n	1f98 <mutex_init_platform+0x5c>
    1f50:	2b08      	cmp	r3, #8
    1f52:	d021      	beq.n	1f98 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1f54:	b9cb      	cbnz	r3, 1f8a <mutex_init_platform+0x4e>
    1f56:	6823      	ldr	r3, [r4, #0]
    1f58:	b9bb      	cbnz	r3, 1f8a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1f5a:	f04f 32ff 	mov.w	r2, #4294967295
    1f5e:	f04f 33ff 	mov.w	r3, #4294967295
    1f62:	4621      	mov	r1, r4
    1f64:	480f      	ldr	r0, [pc, #60]	; (1fa4 <mutex_init_platform+0x68>)
    1f66:	f002 fbab 	bl	46c0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1f6a:	b908      	cbnz	r0, 1f70 <mutex_init_platform+0x34>
    1f6c:	6823      	ldr	r3, [r4, #0]
    1f6e:	b91b      	cbnz	r3, 1f78 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1f70:	4b0a      	ldr	r3, [pc, #40]	; (1f9c <mutex_init_platform+0x60>)
    1f72:	480d      	ldr	r0, [pc, #52]	; (1fa8 <mutex_init_platform+0x6c>)
    1f74:	685b      	ldr	r3, [r3, #4]
    1f76:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1f78:	2214      	movs	r2, #20
    1f7a:	2100      	movs	r1, #0
    1f7c:	6820      	ldr	r0, [r4, #0]
    1f7e:	f004 f825 	bl	5fcc <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1f82:	6863      	ldr	r3, [r4, #4]
    1f84:	f043 0302 	orr.w	r3, r3, #2
    1f88:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1f8a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1f8c:	f005 ff4e 	bl	7e2c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1f90:	6863      	ldr	r3, [r4, #4]
    1f92:	f043 0301 	orr.w	r3, r3, #1
    1f96:	6063      	str	r3, [r4, #4]
}
    1f98:	bd10      	pop	{r4, pc}
    1f9a:	bf00      	nop
    1f9c:	200145a8 	.word	0x200145a8
    1fa0:	00008beb 	.word	0x00008beb
    1fa4:	20015040 	.word	0x20015040
    1fa8:	00008c11 	.word	0x00008c11

00001fac <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1fac:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1fae:	b1e8      	cbz	r0, 1fec <mutex_lock_platform+0x40>
    switch (mutex->flags) {
    1fb0:	6843      	ldr	r3, [r0, #4]
    1fb2:	2b04      	cmp	r3, #4
    1fb4:	d10c      	bne.n	1fd0 <mutex_lock_platform+0x24>
    1fb6:	2201      	movs	r2, #1
    1fb8:	6803      	ldr	r3, [r0, #0]
    1fba:	e8d3 1fef 	ldaex	r1, [r3]
    1fbe:	2900      	cmp	r1, #0
    1fc0:	d103      	bne.n	1fca <mutex_lock_platform+0x1e>
    1fc2:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1fc6:	2800      	cmp	r0, #0
    1fc8:	d1f7      	bne.n	1fba <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fca:	d10b      	bne.n	1fe4 <mutex_lock_platform+0x38>
    1fcc:	2000      	movs	r0, #0
}
    1fce:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1fd0:	b153      	cbz	r3, 1fe8 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1fd2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1fd4:	f04f 32ff 	mov.w	r2, #4294967295
    1fd8:	f04f 33ff 	mov.w	r3, #4294967295
    1fdc:	f002 fbcc 	bl	4778 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1fe0:	2800      	cmp	r0, #0
    1fe2:	d0f3      	beq.n	1fcc <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1fe4:	4803      	ldr	r0, [pc, #12]	; (1ff4 <mutex_lock_platform+0x48>)
    1fe6:	e7f2      	b.n	1fce <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1fe8:	4803      	ldr	r0, [pc, #12]	; (1ff8 <mutex_lock_platform+0x4c>)
    1fea:	e7f0      	b.n	1fce <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1fec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1ff0:	e7ed      	b.n	1fce <mutex_lock_platform+0x22>
    1ff2:	bf00      	nop
    1ff4:	ffff8fe9 	.word	0xffff8fe9
    1ff8:	ffff8fea 	.word	0xffff8fea

00001ffc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1ffc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1ffe:	4906      	ldr	r1, [pc, #24]	; (2018 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x18>)
    2000:	2340      	movs	r3, #64	; 0x40
    2002:	2214      	movs	r2, #20
    2004:	4805      	ldr	r0, [pc, #20]	; (201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>)
    2006:	f005 fef6 	bl	7df6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    200a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    200e:	4904      	ldr	r1, [pc, #16]	; (2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>)
    2010:	4804      	ldr	r0, [pc, #16]	; (2024 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x24>)
    2012:	f003 b865 	b.w	50e0 <nrf_cc3xx_platform_set_mutexes>
    2016:	bf00      	nop
    2018:	2001505c 	.word	0x2001505c
    201c:	20015040 	.word	0x20015040
    2020:	000083dc 	.word	0x000083dc
    2024:	000083cc 	.word	0x000083cc

00002028 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2028:	4a09      	ldr	r2, [pc, #36]	; (2050 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    202a:	490a      	ldr	r1, [pc, #40]	; (2054 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    202c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    202e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    2030:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
    2032:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2034:	4908      	ldr	r1, [pc, #32]	; (2058 <arch_swap+0x30>)
    2036:	684b      	ldr	r3, [r1, #4]
    2038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    203c:	604b      	str	r3, [r1, #4]
    203e:	2300      	movs	r3, #0
    2040:	f383 8811 	msr	BASEPRI, r3
    2044:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2048:	6893      	ldr	r3, [r2, #8]
}
    204a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    204c:	4770      	bx	lr
    204e:	bf00      	nop
    2050:	200155f0 	.word	0x200155f0
    2054:	000085f4 	.word	0x000085f4
    2058:	e000ed00 	.word	0xe000ed00

0000205c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    205c:	4913      	ldr	r1, [pc, #76]	; (20ac <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    205e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2060:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    2064:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2066:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    206a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    206e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2070:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2074:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2078:	4f0d      	ldr	r7, [pc, #52]	; (20b0 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    207a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    207e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    2080:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2082:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2084:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2086:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2088:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    208a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    208e:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    2092:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2096:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    209a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    209e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    20a0:	f003 ff35 	bl	5f0e <configure_builtin_stack_guard>
    pop {r2, lr}
    20a4:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    20a8:	4770      	bx	lr
    20aa:	0000      	.short	0x0000
    ldr r1, =_kernel
    20ac:	200155f0 	.word	0x200155f0
    ldr v4, =_SCS_ICSR
    20b0:	e000ed04 	.word	0xe000ed04

000020b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    20b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    20b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    20ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    20be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    20c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    20c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    20c8:	2902      	cmp	r1, #2
    beq _oops
    20ca:	d0ff      	beq.n	20cc <_oops>

000020cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    20cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    20ce:	f003 ff22 	bl	5f16 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    20d2:	bd01      	pop	{r0, pc}

000020d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    20d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    20d6:	2b00      	cmp	r3, #0
    20d8:	db08      	blt.n	20ec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    20da:	2201      	movs	r2, #1
    20dc:	f000 001f 	and.w	r0, r0, #31
    20e0:	fa02 f000 	lsl.w	r0, r2, r0
    20e4:	4a02      	ldr	r2, [pc, #8]	; (20f0 <arch_irq_enable+0x1c>)
    20e6:	095b      	lsrs	r3, r3, #5
    20e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    20ec:	4770      	bx	lr
    20ee:	bf00      	nop
    20f0:	e000e100 	.word	0xe000e100

000020f4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    20f4:	4b05      	ldr	r3, [pc, #20]	; (210c <arch_irq_is_enabled+0x18>)
    20f6:	0942      	lsrs	r2, r0, #5
    20f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    20fc:	2301      	movs	r3, #1
    20fe:	f000 001f 	and.w	r0, r0, #31
    2102:	fa03 f000 	lsl.w	r0, r3, r0
}
    2106:	4010      	ands	r0, r2
    2108:	4770      	bx	lr
    210a:	bf00      	nop
    210c:	e000e100 	.word	0xe000e100

00002110 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2110:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2112:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    2114:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2118:	bfac      	ite	ge
    211a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    211e:	4b06      	ldrlt	r3, [pc, #24]	; (2138 <z_arm_irq_priority_set+0x28>)
    2120:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2124:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2126:	bfab      	itete	ge
    2128:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    212c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2130:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2134:	5419      	strblt	r1, [r3, r0]
}
    2136:	4770      	bx	lr
    2138:	e000ed14 	.word	0xe000ed14

0000213c <z_arm_switch_to_main_no_multithreading>:

#if !defined(CONFIG_MULTITHREADING) && defined(CONFIG_CPU_CORTEX_M)

FUNC_NORETURN void z_arm_switch_to_main_no_multithreading(
	k_thread_entry_t main_entry, void *p1, void *p2, void *p3)
{
    213c:	b580      	push	{r7, lr}
    213e:	461d      	mov	r5, r3
    2140:	4604      	mov	r4, r0
    2142:	460f      	mov	r7, r1
    2144:	4616      	mov	r6, r2
	z_arm_configure_static_mpu_regions();
    2146:	f000 fad5 	bl	26f4 <z_arm_configure_static_mpu_regions>
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    214a:	2300      	movs	r3, #0
    214c:	f383 880b 	msr	PSPLIM, r3
	 */
	register void *p1_inreg __asm__("r0") = p1;
	register void *p2_inreg __asm__("r1") = p2;
	register void *p3_inreg __asm__("r2") = p3;

	__asm__ volatile (
    2150:	4b0b      	ldr	r3, [pc, #44]	; (2180 <loop+0x2>)
	register void *p2_inreg __asm__("r1") = p2;
    2152:	4631      	mov	r1, r6
	register void *p3_inreg __asm__("r2") = p3;
    2154:	462a      	mov	r2, r5
	register void *p1_inreg __asm__("r0") = p1;
    2156:	4638      	mov	r0, r7
	__asm__ volatile (
    2158:	f5a3 5620 	sub.w	r6, r3, #10240	; 0x2800
    215c:	2520      	movs	r5, #32
    215e:	f386 880b 	msr	PSPLIM, r6
    2162:	f383 8809 	msr	PSP, r3
    2166:	b663      	cpsie	if
    2168:	f04f 0300 	mov.w	r3, #0
    216c:	f383 8811 	msr	BASEPRI, r3
    2170:	f3bf 8f6f 	isb	sy
    2174:	47a0      	blx	r4
    2176:	f385 8811 	msr	BASEPRI, r5
    217a:	f3bf 8f6f 	isb	sy

0000217e <loop>:
    217e:	e7fe      	b.n	217e <loop>
	, [_psplim]"r" (psplim)
#endif
	:
	);

	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2180:	20019b80 	.word	0x20019b80

00002184 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2184:	4901      	ldr	r1, [pc, #4]	; (218c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2186:	2210      	movs	r2, #16
	str	r2, [r1]
    2188:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    218a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    218c:	e000ed10 	.word	0xe000ed10

00002190 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2190:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2192:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2194:	f380 8811 	msr	BASEPRI, r0
	isb
    2198:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    219c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    21a0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    21a2:	b662      	cpsie	i
	isb
    21a4:	f3bf 8f6f 	isb	sy

	bx	lr
    21a8:	4770      	bx	lr
    21aa:	bf00      	nop

000021ac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    21ac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    21ae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    21b0:	f381 8811 	msr	BASEPRI, r1

	wfe
    21b4:	bf20      	wfe

	msr	BASEPRI, r0
    21b6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    21ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    21bc:	4770      	bx	lr
    21be:	bf00      	nop

000021c0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    21c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    21c2:	4605      	mov	r5, r0

	if (esf != NULL) {
    21c4:	460c      	mov	r4, r1
    21c6:	b1c9      	cbz	r1, 21fc <z_arm_fatal_error+0x3c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    21c8:	688b      	ldr	r3, [r1, #8]
    21ca:	4810      	ldr	r0, [pc, #64]	; (220c <z_arm_fatal_error+0x4c>)
    21cc:	9300      	str	r3, [sp, #0]
    21ce:	e9d1 2300 	ldrd	r2, r3, [r1]
    21d2:	2145      	movs	r1, #69	; 0x45
    21d4:	f003 fb63 	bl	589e <printk>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    21d8:	6963      	ldr	r3, [r4, #20]
    21da:	2145      	movs	r1, #69	; 0x45
    21dc:	9300      	str	r3, [sp, #0]
    21de:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    21e2:	480b      	ldr	r0, [pc, #44]	; (2210 <z_arm_fatal_error+0x50>)
    21e4:	f003 fb5b 	bl	589e <printk>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    21e8:	2145      	movs	r1, #69	; 0x45
    21ea:	69e2      	ldr	r2, [r4, #28]
    21ec:	4809      	ldr	r0, [pc, #36]	; (2214 <z_arm_fatal_error+0x54>)
    21ee:	f003 fb56 	bl	589e <printk>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    21f2:	2145      	movs	r1, #69	; 0x45
    21f4:	69a2      	ldr	r2, [r4, #24]
    21f6:	4808      	ldr	r0, [pc, #32]	; (2218 <z_arm_fatal_error+0x58>)
    21f8:	f003 fb51 	bl	589e <printk>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    21fc:	4621      	mov	r1, r4
    21fe:	4628      	mov	r0, r5
}
    2200:	b003      	add	sp, #12
    2202:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	z_fatal_error(reason, esf);
    2206:	f002 b999 	b.w	453c <z_fatal_error>
    220a:	bf00      	nop
    220c:	00008c3e 	.word	0x00008c3e
    2210:	00008c72 	.word	0x00008c72
    2214:	00008ca6 	.word	0x00008ca6
    2218:	00008cba 	.word	0x00008cba

0000221c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    221c:	bf30      	wfi
    b z_SysNmiOnReset
    221e:	f7ff bffd 	b.w	221c <z_SysNmiOnReset>
    2222:	bf00      	nop

00002224 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2224:	4a0e      	ldr	r2, [pc, #56]	; (2260 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    2226:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2228:	4b0e      	ldr	r3, [pc, #56]	; (2264 <z_arm_prep_c+0x40>)
    222a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    222e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2230:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2234:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2238:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    223c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    2244:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2248:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    224c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2250:	f002 f9c2 	bl	45d8 <z_bss_zero>
	z_data_copy();
    2254:	f002 fd46 	bl	4ce4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2258:	f000 fa1e 	bl	2698 <z_arm_interrupt_init>
	z_cstart();
    225c:	f002 f9de 	bl	461c <z_cstart>
    2260:	00000000 	.word	0x00000000
    2264:	e000ed00 	.word	0xe000ed00

00002268 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2268:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    226a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    226c:	4a0b      	ldr	r2, [pc, #44]	; (229c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    226e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    2270:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2272:	bf1e      	ittt	ne
	movne	r1, #0
    2274:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2276:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    2278:	f005 fdbb 	blne	7df2 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    227c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    227e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2282:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2286:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    228a:	4905      	ldr	r1, [pc, #20]	; (22a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    228c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    228e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2290:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2296:	4903      	ldr	r1, [pc, #12]	; (22a4 <_isr_wrapper+0x3c>)
	bx r1
    2298:	4708      	bx	r1
    229a:	0000      	.short	0x0000
	ldr r2, =_kernel
    229c:	200155f0 	.word	0x200155f0
	ldr r1, =_sw_isr_table
    22a0:	0000805c 	.word	0x0000805c
	ldr r1, =z_arm_int_exit
    22a4:	00002671 	.word	0x00002671

000022a8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    22a8:	f003 fced 	bl	5c86 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    22ac:	2020      	movs	r0, #32
    msr BASEPRI, r0
    22ae:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    22b2:	4808      	ldr	r0, [pc, #32]	; (22d4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    22b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    22b8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    22ba:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    22be:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    22c2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    22c4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    22c6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    22ca:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    22ce:	f7ff ffa9 	bl	2224 <z_arm_prep_c>
    22d2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    22d4:	20019b80 	.word	0x20019b80

000022d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    22d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    22dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    22e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    22e2:	4672      	mov	r2, lr
	bl z_arm_fault
    22e4:	f000 f908 	bl	24f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    22e8:	bd01      	pop	{r0, pc}
    22ea:	bf00      	nop

000022ec <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    22ec:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    22ee:	4c22      	ldr	r4, [pc, #136]	; (2378 <mem_manage_fault.isra.0+0x8c>)
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    22f0:	4606      	mov	r6, r0
    22f2:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    22f4:	4821      	ldr	r0, [pc, #132]	; (237c <mem_manage_fault.isra.0+0x90>)
    22f6:	2145      	movs	r1, #69	; 0x45
    22f8:	f003 fad1 	bl	589e <printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    22fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    22fe:	06d0      	lsls	r0, r2, #27
    2300:	d503      	bpl.n	230a <mem_manage_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2302:	2145      	movs	r1, #69	; 0x45
    2304:	481e      	ldr	r0, [pc, #120]	; (2380 <mem_manage_fault.isra.0+0x94>)
    2306:	f003 faca 	bl	589e <printk>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    230a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    230c:	0719      	lsls	r1, r3, #28
    230e:	d503      	bpl.n	2318 <mem_manage_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    2310:	2145      	movs	r1, #69	; 0x45
    2312:	481c      	ldr	r0, [pc, #112]	; (2384 <mem_manage_fault.isra.0+0x98>)
    2314:	f003 fac3 	bl	589e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2318:	4c17      	ldr	r4, [pc, #92]	; (2378 <mem_manage_fault.isra.0+0x8c>)
    231a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    231c:	079a      	lsls	r2, r3, #30
    231e:	d510      	bpl.n	2342 <mem_manage_fault.isra.0+0x56>
		PR_FAULT_INFO("  Data Access Violation");
    2320:	2145      	movs	r1, #69	; 0x45
    2322:	4819      	ldr	r0, [pc, #100]	; (2388 <mem_manage_fault.isra.0+0x9c>)
    2324:	f003 fabb 	bl	589e <printk>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2328:	6b62      	ldr	r2, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    232a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    232c:	061b      	lsls	r3, r3, #24
    232e:	d508      	bpl.n	2342 <mem_manage_fault.isra.0+0x56>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2330:	2145      	movs	r1, #69	; 0x45
    2332:	4816      	ldr	r0, [pc, #88]	; (238c <mem_manage_fault.isra.0+0xa0>)
    2334:	f003 fab3 	bl	589e <printk>
			if (from_hard_fault) {
    2338:	b11e      	cbz	r6, 2342 <mem_manage_fault.isra.0+0x56>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    233a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    233c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2340:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2342:	4c0d      	ldr	r4, [pc, #52]	; (2378 <mem_manage_fault.isra.0+0x8c>)
    2344:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2346:	07d0      	lsls	r0, r2, #31
    2348:	d503      	bpl.n	2352 <mem_manage_fault.isra.0+0x66>
		PR_FAULT_INFO("  Instruction Access Violation");
    234a:	2145      	movs	r1, #69	; 0x45
    234c:	4810      	ldr	r0, [pc, #64]	; (2390 <mem_manage_fault.isra.0+0xa4>)
    234e:	f003 faa6 	bl	589e <printk>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2352:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2354:	0699      	lsls	r1, r3, #26
    2356:	d503      	bpl.n	2360 <mem_manage_fault.isra.0+0x74>
		PR_FAULT_INFO(
    2358:	2145      	movs	r1, #69	; 0x45
    235a:	480e      	ldr	r0, [pc, #56]	; (2394 <mem_manage_fault.isra.0+0xa8>)
    235c:	f003 fa9f 	bl	589e <printk>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    2360:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2362:	4b05      	ldr	r3, [pc, #20]	; (2378 <mem_manage_fault.isra.0+0x8c>)
    2364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2366:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2368:	bf58      	it	pl
    236a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    236c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    236e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2372:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2374:	7028      	strb	r0, [r5, #0]

	return reason;
}
    2376:	bd70      	pop	{r4, r5, r6, pc}
    2378:	e000ed00 	.word	0xe000ed00
    237c:	00008ced 	.word	0x00008ced
    2380:	00008d08 	.word	0x00008d08
    2384:	00008d40 	.word	0x00008d40
    2388:	00008d58 	.word	0x00008d58
    238c:	00008d75 	.word	0x00008d75
    2390:	00008d90 	.word	0x00008d90
    2394:	00008db4 	.word	0x00008db4

00002398 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2398:	b570      	push	{r4, r5, r6, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    239a:	4c23      	ldr	r4, [pc, #140]	; (2428 <bus_fault.isra.0+0x90>)
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    239c:	4606      	mov	r6, r0
    239e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    23a0:	4822      	ldr	r0, [pc, #136]	; (242c <bus_fault.isra.0+0x94>)
    23a2:	2145      	movs	r1, #69	; 0x45
    23a4:	f003 fa7b 	bl	589e <printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    23a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    23aa:	04d1      	lsls	r1, r2, #19
    23ac:	d503      	bpl.n	23b6 <bus_fault.isra.0+0x1e>
		PR_FAULT_INFO("  Stacking error");
    23ae:	2145      	movs	r1, #69	; 0x45
    23b0:	481f      	ldr	r0, [pc, #124]	; (2430 <bus_fault.isra.0+0x98>)
    23b2:	f003 fa74 	bl	589e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    23b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23b8:	051a      	lsls	r2, r3, #20
    23ba:	d503      	bpl.n	23c4 <bus_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Unstacking error");
    23bc:	2145      	movs	r1, #69	; 0x45
    23be:	481d      	ldr	r0, [pc, #116]	; (2434 <bus_fault.isra.0+0x9c>)
    23c0:	f003 fa6d 	bl	589e <printk>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    23c4:	4c18      	ldr	r4, [pc, #96]	; (2428 <bus_fault.isra.0+0x90>)
    23c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23c8:	059b      	lsls	r3, r3, #22
    23ca:	d510      	bpl.n	23ee <bus_fault.isra.0+0x56>
		PR_FAULT_INFO("  Precise data bus error");
    23cc:	481a      	ldr	r0, [pc, #104]	; (2438 <bus_fault.isra.0+0xa0>)
    23ce:	2145      	movs	r1, #69	; 0x45
    23d0:	f003 fa65 	bl	589e <printk>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    23d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    23d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23d8:	0418      	lsls	r0, r3, #16
    23da:	d508      	bpl.n	23ee <bus_fault.isra.0+0x56>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    23dc:	2145      	movs	r1, #69	; 0x45
    23de:	4817      	ldr	r0, [pc, #92]	; (243c <bus_fault.isra.0+0xa4>)
    23e0:	f003 fa5d 	bl	589e <printk>
			if (from_hard_fault) {
    23e4:	b11e      	cbz	r6, 23ee <bus_fault.isra.0+0x56>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    23e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    23ec:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    23ee:	4c0e      	ldr	r4, [pc, #56]	; (2428 <bus_fault.isra.0+0x90>)
    23f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23f2:	0559      	lsls	r1, r3, #21
    23f4:	d503      	bpl.n	23fe <bus_fault.isra.0+0x66>
		PR_FAULT_INFO("  Imprecise data bus error");
    23f6:	2145      	movs	r1, #69	; 0x45
    23f8:	4811      	ldr	r0, [pc, #68]	; (2440 <bus_fault.isra.0+0xa8>)
    23fa:	f003 fa50 	bl	589e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    23fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2400:	05da      	lsls	r2, r3, #23
    2402:	d50b      	bpl.n	241c <bus_fault.isra.0+0x84>
		PR_FAULT_INFO("  Instruction bus error");
    2404:	2145      	movs	r1, #69	; 0x45
    2406:	480f      	ldr	r0, [pc, #60]	; (2444 <bus_fault.isra.0+0xac>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2408:	f003 fa49 	bl	589e <printk>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    240c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    240e:	4a06      	ldr	r2, [pc, #24]	; (2428 <bus_fault.isra.0+0x90>)
    2410:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2412:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2416:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2418:	7028      	strb	r0, [r5, #0]

	return reason;
}
    241a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    241c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    241e:	049b      	lsls	r3, r3, #18
    2420:	d5f4      	bpl.n	240c <bus_fault.isra.0+0x74>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2422:	2145      	movs	r1, #69	; 0x45
    2424:	4808      	ldr	r0, [pc, #32]	; (2448 <bus_fault.isra.0+0xb0>)
    2426:	e7ef      	b.n	2408 <bus_fault.isra.0+0x70>
    2428:	e000ed00 	.word	0xe000ed00
    242c:	00008de8 	.word	0x00008de8
    2430:	00008e03 	.word	0x00008e03
    2434:	00008d40 	.word	0x00008d40
    2438:	00008e19 	.word	0x00008e19
    243c:	00008e37 	.word	0x00008e37
    2440:	00008e51 	.word	0x00008e51
    2444:	00008e71 	.word	0x00008e71
    2448:	00008db4 	.word	0x00008db4

0000244c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    244c:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    244e:	4c21      	ldr	r4, [pc, #132]	; (24d4 <usage_fault.isra.0+0x88>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2450:	2145      	movs	r1, #69	; 0x45
    2452:	4821      	ldr	r0, [pc, #132]	; (24d8 <usage_fault.isra.0+0x8c>)
    2454:	f003 fa23 	bl	589e <printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2458:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    245a:	0195      	lsls	r5, r2, #6
    245c:	d503      	bpl.n	2466 <usage_fault.isra.0+0x1a>
		PR_FAULT_INFO("  Division by zero");
    245e:	2145      	movs	r1, #69	; 0x45
    2460:	481e      	ldr	r0, [pc, #120]	; (24dc <usage_fault.isra.0+0x90>)
    2462:	f003 fa1c 	bl	589e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2468:	01dc      	lsls	r4, r3, #7
    246a:	d503      	bpl.n	2474 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Unaligned memory access");
    246c:	2145      	movs	r1, #69	; 0x45
    246e:	481c      	ldr	r0, [pc, #112]	; (24e0 <usage_fault.isra.0+0x94>)
    2470:	f003 fa15 	bl	589e <printk>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    2474:	4d17      	ldr	r5, [pc, #92]	; (24d4 <usage_fault.isra.0+0x88>)
    2476:	6aac      	ldr	r4, [r5, #40]	; 0x28
    2478:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    247c:	d004      	beq.n	2488 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    247e:	2145      	movs	r1, #69	; 0x45
    2480:	4818      	ldr	r0, [pc, #96]	; (24e4 <usage_fault.isra.0+0x98>)
    2482:	f003 fa0c 	bl	589e <printk>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
    2486:	2402      	movs	r4, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2488:	6aab      	ldr	r3, [r5, #40]	; 0x28
    248a:	0318      	lsls	r0, r3, #12
    248c:	d503      	bpl.n	2496 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    248e:	2145      	movs	r1, #69	; 0x45
    2490:	4815      	ldr	r0, [pc, #84]	; (24e8 <usage_fault.isra.0+0x9c>)
    2492:	f003 fa04 	bl	589e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2496:	4d0f      	ldr	r5, [pc, #60]	; (24d4 <usage_fault.isra.0+0x88>)
    2498:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    249a:	0351      	lsls	r1, r2, #13
    249c:	d503      	bpl.n	24a6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    249e:	2145      	movs	r1, #69	; 0x45
    24a0:	4812      	ldr	r0, [pc, #72]	; (24ec <usage_fault.isra.0+0xa0>)
    24a2:	f003 f9fc 	bl	589e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    24a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    24a8:	039a      	lsls	r2, r3, #14
    24aa:	d503      	bpl.n	24b4 <usage_fault.isra.0+0x68>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    24ac:	2145      	movs	r1, #69	; 0x45
    24ae:	4810      	ldr	r0, [pc, #64]	; (24f0 <usage_fault.isra.0+0xa4>)
    24b0:	f003 f9f5 	bl	589e <printk>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    24b4:	4d07      	ldr	r5, [pc, #28]	; (24d4 <usage_fault.isra.0+0x88>)
    24b6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    24b8:	03db      	lsls	r3, r3, #15
    24ba:	d503      	bpl.n	24c4 <usage_fault.isra.0+0x78>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    24bc:	2145      	movs	r1, #69	; 0x45
    24be:	480d      	ldr	r0, [pc, #52]	; (24f4 <usage_fault.isra.0+0xa8>)
    24c0:	f003 f9ed 	bl	589e <printk>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    24c4:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
    24c6:	4620      	mov	r0, r4
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    24c8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    24cc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    24d0:	62ab      	str	r3, [r5, #40]	; 0x28
}
    24d2:	bd38      	pop	{r3, r4, r5, pc}
    24d4:	e000ed00 	.word	0xe000ed00
    24d8:	00008e8e 	.word	0x00008e8e
    24dc:	00008eab 	.word	0x00008eab
    24e0:	00008ec3 	.word	0x00008ec3
    24e4:	00008ee2 	.word	0x00008ee2
    24e8:	00008f11 	.word	0x00008f11
    24ec:	00008f34 	.word	0x00008f34
    24f0:	00008f5e 	.word	0x00008f5e
    24f4:	00008f7d 	.word	0x00008f7d

000024f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    24f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    24fc:	4b4a      	ldr	r3, [pc, #296]	; (2628 <z_arm_fault+0x130>)
{
    24fe:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2500:	f8d3 9004 	ldr.w	r9, [r3, #4]
    2504:	2500      	movs	r5, #0
{
    2506:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2508:	f3c9 0808 	ubfx	r8, r9, #0, #9
    250c:	f385 8811 	msr	BASEPRI, r5
    2510:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2514:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2518:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    251c:	d107      	bne.n	252e <z_arm_fault+0x36>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    251e:	f002 030c 	and.w	r3, r2, #12
    2522:	2b08      	cmp	r3, #8
    2524:	d105      	bne.n	2532 <z_arm_fault+0x3a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2526:	2145      	movs	r1, #69	; 0x45
    2528:	4840      	ldr	r0, [pc, #256]	; (262c <z_arm_fault+0x134>)
    252a:	f003 f9b8 	bl	589e <printk>
		return NULL;
    252e:	462f      	mov	r7, r5
    2530:	e003      	b.n	253a <z_arm_fault+0x42>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2532:	0712      	lsls	r2, r2, #28
    2534:	d401      	bmi.n	253a <z_arm_fault+0x42>
			ptr_esf = (z_arch_esf_t *)msp;
    2536:	4607      	mov	r7, r0
			*nested_exc = true;
    2538:	2501      	movs	r5, #1
	*recoverable = false;
    253a:	2200      	movs	r2, #0
    253c:	f1a8 0603 	sub.w	r6, r8, #3
    2540:	4614      	mov	r4, r2
    2542:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    2546:	2e09      	cmp	r6, #9
    2548:	d85b      	bhi.n	2602 <z_arm_fault+0x10a>
    254a:	e8df f006 	tbb	[pc, r6]
    254e:	4f05      	.short	0x4f05
    2550:	5a5a3353 	.word	0x5a5a3353
    2554:	575a5a5a 	.word	0x575a5a5a
	PR_FAULT_INFO("***** HARD FAULT *****");
    2558:	2145      	movs	r1, #69	; 0x45
    255a:	4835      	ldr	r0, [pc, #212]	; (2630 <z_arm_fault+0x138>)
    255c:	f003 f99f 	bl	589e <printk>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2560:	4b31      	ldr	r3, [pc, #196]	; (2628 <z_arm_fault+0x130>)
	*recoverable = false;
    2562:	f88d 4007 	strb.w	r4, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2566:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2568:	f014 0402 	ands.w	r4, r4, #2
    256c:	d005      	beq.n	257a <z_arm_fault+0x82>
		PR_EXC("  Bus fault on vector table read");
    256e:	2145      	movs	r1, #69	; 0x45
    2570:	4830      	ldr	r0, [pc, #192]	; (2634 <z_arm_fault+0x13c>)
	PR_FAULT_INFO(
    2572:	f003 f994 	bl	589e <printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2576:	2400      	movs	r4, #0
}
    2578:	e01f      	b.n	25ba <z_arm_fault+0xc2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    257c:	005b      	lsls	r3, r3, #1
    257e:	d51c      	bpl.n	25ba <z_arm_fault+0xc2>
		PR_EXC("  Fault escalation (see below)");
    2580:	2145      	movs	r1, #69	; 0x45
    2582:	482d      	ldr	r0, [pc, #180]	; (2638 <z_arm_fault+0x140>)
    2584:	f003 f98b 	bl	589e <printk>
		if (SCB_MMFSR != 0) {
    2588:	4b2c      	ldr	r3, [pc, #176]	; (263c <z_arm_fault+0x144>)
    258a:	781b      	ldrb	r3, [r3, #0]
    258c:	b12b      	cbz	r3, 259a <z_arm_fault+0xa2>
			reason = mem_manage_fault(esf, 1, recoverable);
    258e:	2001      	movs	r0, #1
    2590:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    2594:	f7ff feaa 	bl	22ec <mem_manage_fault.isra.0>
    2598:	e00e      	b.n	25b8 <z_arm_fault+0xc0>
		} else if (SCB_BFSR != 0) {
    259a:	4b29      	ldr	r3, [pc, #164]	; (2640 <z_arm_fault+0x148>)
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	b12b      	cbz	r3, 25ac <z_arm_fault+0xb4>
			reason = bus_fault(esf, 1, recoverable);
    25a0:	2001      	movs	r0, #1
    25a2:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    25a6:	f7ff fef7 	bl	2398 <bus_fault.isra.0>
    25aa:	e005      	b.n	25b8 <z_arm_fault+0xc0>
		} else if (SCB_UFSR != 0) {
    25ac:	4b25      	ldr	r3, [pc, #148]	; (2644 <z_arm_fault+0x14c>)
    25ae:	881b      	ldrh	r3, [r3, #0]
    25b0:	b29b      	uxth	r3, r3
    25b2:	b113      	cbz	r3, 25ba <z_arm_fault+0xc2>
			reason = usage_fault(esf);
    25b4:	f7ff ff4a 	bl	244c <usage_fault.isra.0>
    25b8:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    25ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    25be:	b993      	cbnz	r3, 25e6 <z_arm_fault+0xee>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    25c0:	2220      	movs	r2, #32
    25c2:	4639      	mov	r1, r7
    25c4:	a802      	add	r0, sp, #8
    25c6:	f003 fcd6 	bl	5f76 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    25ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25cc:	b335      	cbz	r5, 261c <z_arm_fault+0x124>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    25ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
    25d2:	b922      	cbnz	r2, 25de <z_arm_fault+0xe6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    25d4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    25d8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    25dc:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    25de:	4620      	mov	r0, r4
    25e0:	a902      	add	r1, sp, #8
    25e2:	f7ff fded 	bl	21c0 <z_arm_fatal_error>
}
    25e6:	b00b      	add	sp, #44	; 0x2c
    25e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    25ec:	2000      	movs	r0, #0
    25ee:	f10d 0107 	add.w	r1, sp, #7
    25f2:	e7cf      	b.n	2594 <z_arm_fault+0x9c>
		reason = bus_fault(esf, 0, recoverable);
    25f4:	2000      	movs	r0, #0
    25f6:	f10d 0107 	add.w	r1, sp, #7
    25fa:	e7d4      	b.n	25a6 <z_arm_fault+0xae>
	PR_FAULT_INFO(
    25fc:	2145      	movs	r1, #69	; 0x45
    25fe:	4812      	ldr	r0, [pc, #72]	; (2648 <z_arm_fault+0x150>)
    2600:	e7b7      	b.n	2572 <z_arm_fault+0x7a>
	PR_FAULT_INFO("***** %s %d) *****",
    2602:	4912      	ldr	r1, [pc, #72]	; (264c <z_arm_fault+0x154>)
    2604:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    2608:	4a11      	ldr	r2, [pc, #68]	; (2650 <z_arm_fault+0x158>)
    260a:	4812      	ldr	r0, [pc, #72]	; (2654 <z_arm_fault+0x15c>)
    260c:	bf08      	it	eq
    260e:	460a      	moveq	r2, r1
    2610:	f1a8 0310 	sub.w	r3, r8, #16
    2614:	2145      	movs	r1, #69	; 0x45
    2616:	f003 f942 	bl	589e <printk>
    261a:	e7ac      	b.n	2576 <z_arm_fault+0x7e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    261c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2620:	f023 0301 	bic.w	r3, r3, #1
    2624:	e7da      	b.n	25dc <z_arm_fault+0xe4>
    2626:	bf00      	nop
    2628:	e000ed00 	.word	0xe000ed00
    262c:	00008fdb 	.word	0x00008fdb
    2630:	0000900b 	.word	0x0000900b
    2634:	00009027 	.word	0x00009027
    2638:	0000904d 	.word	0x0000904d
    263c:	e000ed28 	.word	0xe000ed28
    2640:	e000ed29 	.word	0xe000ed29
    2644:	e000ed2a 	.word	0xe000ed2a
    2648:	00009071 	.word	0x00009071
    264c:	00008fad 	.word	0x00008fad
    2650:	00008fc2 	.word	0x00008fc2
    2654:	000090ac 	.word	0x000090ac

00002658 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2658:	4b04      	ldr	r3, [pc, #16]	; (266c <z_arm_fault_init+0x14>)
    265a:	695a      	ldr	r2, [r3, #20]
    265c:	f042 0210 	orr.w	r2, r2, #16
    2660:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    2662:	695a      	ldr	r2, [r3, #20]
    2664:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    2668:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    266a:	4770      	bx	lr
    266c:	e000ed00 	.word	0xe000ed00

00002670 <z_arm_exc_exit>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2670:	4770      	bx	lr
    2672:	bf00      	nop

00002674 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    2674:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2678:	4905      	ldr	r1, [pc, #20]	; (2690 <sys_arch_reboot+0x1c>)
    267a:	4b06      	ldr	r3, [pc, #24]	; (2694 <sys_arch_reboot+0x20>)
    267c:	68ca      	ldr	r2, [r1, #12]
    267e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2682:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2684:	60cb      	str	r3, [r1, #12]
    2686:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    268a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    268c:	e7fd      	b.n	268a <sys_arch_reboot+0x16>
    268e:	bf00      	nop
    2690:	e000ed00 	.word	0xe000ed00
    2694:	05fa0004 	.word	0x05fa0004

00002698 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2698:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    269a:	2120      	movs	r1, #32
    269c:	4803      	ldr	r0, [pc, #12]	; (26ac <z_arm_interrupt_init+0x14>)
    269e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    26a0:	3301      	adds	r3, #1
    26a2:	2b41      	cmp	r3, #65	; 0x41
    26a4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    26a8:	d1f9      	bne.n	269e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    26aa:	4770      	bx	lr
    26ac:	e000e100 	.word	0xe000e100

000026b0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    26b0:	b508      	push	{r3, lr}
	if (_current == thread) {
    26b2:	4b0e      	ldr	r3, [pc, #56]	; (26ec <z_impl_k_thread_abort+0x3c>)
    26b4:	689b      	ldr	r3, [r3, #8]
    26b6:	4283      	cmp	r3, r0
    26b8:	d107      	bne.n	26ca <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    26ba:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    26be:	b193      	cbz	r3, 26e6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    26c0:	4a0b      	ldr	r2, [pc, #44]	; (26f0 <z_impl_k_thread_abort+0x40>)
    26c2:	6853      	ldr	r3, [r2, #4]
    26c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    26c8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    26ca:	f002 f9c7 	bl	4a5c <z_thread_single_abort>
	__asm__ volatile(
    26ce:	f04f 0320 	mov.w	r3, #32
    26d2:	f3ef 8011 	mrs	r0, BASEPRI
    26d6:	f383 8811 	msr	BASEPRI, r3
    26da:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    26de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    26e2:	f005 bbaa 	b.w	7e3a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    26e6:	f002 fadd 	bl	4ca4 <z_self_abort>
    26ea:	bf00      	nop
    26ec:	200155f0 	.word	0x200155f0
    26f0:	e000ed00 	.word	0xe000ed00

000026f4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    26f4:	2101      	movs	r1, #1
    26f6:	4b02      	ldr	r3, [pc, #8]	; (2700 <z_arm_configure_static_mpu_regions+0xc>)
    26f8:	4a02      	ldr	r2, [pc, #8]	; (2704 <z_arm_configure_static_mpu_regions+0x10>)
    26fa:	4803      	ldr	r0, [pc, #12]	; (2708 <z_arm_configure_static_mpu_regions+0x14>)
    26fc:	f000 b932 	b.w	2964 <arm_core_mpu_configure_static_mpu_regions>
    2700:	20040000 	.word	0x20040000
    2704:	20014500 	.word	0x20014500
    2708:	000083f0 	.word	0x000083f0

0000270c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    270c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    270e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    2710:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    2712:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    2716:	f004 031f 	and.w	r3, r4, #31
    271a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    271c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    271e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    2720:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    2724:	4904      	ldr	r1, [pc, #16]	; (2738 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    2726:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    272a:	f043 0301 	orr.w	r3, r3, #1
    272e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    2730:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    2732:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    2734:	bd10      	pop	{r4, pc}
    2736:	bf00      	nop
    2738:	e000ed90 	.word	0xe000ed90

0000273c <mpu_configure_region>:
/* This internal function programs an MPU region
 * of a given configuration at a given MPU index.
 */
static int mpu_configure_region(const uint8_t index,
	const struct z_arm_mpu_partition *new_region)
{
    273c:	b530      	push	{r4, r5, lr}

	LOG_DBG("Configure MPU region at index 0x%x", index);

	/* Populate internal ARM MPU region configuration structure. */
	region_conf.base = new_region->start;
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    273e:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    2740:	680c      	ldr	r4, [r1, #0]
{
    2742:	b085      	sub	sp, #20
 */
static inline void get_region_attr_from_mpu_partition_info(
	arm_mpu_region_attr_t *p_attr,
	const k_mem_partition_attr_t *attr, uint32_t base, uint32_t size)
{
	p_attr->rbar = attr->rbar &
    2744:	890a      	ldrh	r2, [r1, #8]
    2746:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    2748:	9400      	str	r4, [sp, #0]
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	p_attr->mair_idx = attr->mair_idx;
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    274a:	3b01      	subs	r3, #1
    274c:	f024 041f 	bic.w	r4, r4, #31
    2750:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    2752:	f002 021f 	and.w	r2, r2, #31
    2756:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    275a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    275e:	280f      	cmp	r0, #15
    2760:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    2762:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    2766:	9303      	str	r3, [sp, #12]
    2768:	d909      	bls.n	277e <mpu_configure_region+0x42>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    276a:	4602      	mov	r2, r0
    276c:	2145      	movs	r1, #69	; 0x45
    276e:	4806      	ldr	r0, [pc, #24]	; (2788 <mpu_configure_region+0x4c>)
    2770:	f003 f895 	bl	589e <printk>
    2774:	f06f 0415 	mvn.w	r4, #21
		&new_region->attr, new_region->start, new_region->size);

	/* Allocate and program region */
	return region_allocate_and_init(index,
		(const struct arm_mpu_region *)&region_conf);
}
    2778:	4620      	mov	r0, r4
    277a:	b005      	add	sp, #20
    277c:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
    277e:	4669      	mov	r1, sp
    2780:	f7ff ffc4 	bl	270c <region_init>
	return region_allocate_and_init(index,
    2784:	e7f8      	b.n	2778 <mpu_configure_region+0x3c>
    2786:	bf00      	nop
    2788:	000090c8 	.word	0x000090c8

0000278c <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2790:	4689      	mov	r9, r1
    2792:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2794:	4606      	mov	r6, r0
    2796:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    279a:	4d52      	ldr	r5, [pc, #328]	; (28e4 <CONFIG_MAIN_STACK_SIZE+0xe4>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    279c:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    279e:	45c8      	cmp	r8, r9
    27a0:	da23      	bge.n	27ea <mpu_configure_regions_and_partition.constprop.0+0x5e>
		if (regions[i].size == 0U) {
    27a2:	6877      	ldr	r7, [r6, #4]
    27a4:	2f00      	cmp	r7, #0
    27a6:	d042      	beq.n	282e <CONFIG_MAIN_STACK_SIZE+0x2e>
		&&
    27a8:	2f1f      	cmp	r7, #31
    27aa:	d917      	bls.n	27dc <mpu_configure_regions_and_partition.constprop.0+0x50>
		&&
    27ac:	06fb      	lsls	r3, r7, #27
    27ae:	d115      	bne.n	27dc <mpu_configure_regions_and_partition.constprop.0+0x50>
		((part->start &
    27b0:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    27b4:	f01a 0f1f 	tst.w	sl, #31
    27b8:	d110      	bne.n	27dc <mpu_configure_regions_and_partition.constprop.0+0x50>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    27ba:	4650      	mov	r0, sl
    27bc:	f003 fbb6 	bl	5f2c <arm_cmse_mpu_region_get>
    27c0:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    27c2:	eb07 000a 	add.w	r0, r7, sl
    27c6:	3801      	subs	r0, #1
    27c8:	f003 fbb0 	bl	5f2c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    27cc:	4583      	cmp	fp, r0
    27ce:	d010      	beq.n	27f2 <mpu_configure_regions_and_partition.constprop.0+0x66>
	return -EINVAL;
    27d0:	f06f 0b15 	mvn.w	fp, #21
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    27d4:	465a      	mov	r2, fp
    27d6:	2145      	movs	r1, #69	; 0x45
    27d8:	4843      	ldr	r0, [pc, #268]	; (28e8 <CONFIG_MAIN_STACK_SIZE+0xe8>)
    27da:	e002      	b.n	27e2 <mpu_configure_regions_and_partition.constprop.0+0x56>
			LOG_ERR("Partition %u: sanity check failed.", i);
    27dc:	4642      	mov	r2, r8
    27de:	2145      	movs	r1, #69	; 0x45
    27e0:	4842      	ldr	r0, [pc, #264]	; (28ec <CONFIG_MAIN_STACK_SIZE+0xec>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    27e2:	f003 f85c 	bl	589e <printk>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    27e6:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    27ea:	4620      	mov	r0, r4
    27ec:	b005      	add	sp, #20
    27ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
    27f2:	f11b 0f16 	cmn.w	fp, #22
    27f6:	d0ed      	beq.n	27d4 <mpu_configure_regions_and_partition.constprop.0+0x48>
			(u_reg_index > (reg_index - 1))) {
    27f8:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    27fa:	455b      	cmp	r3, fp
    27fc:	dbea      	blt.n	27d4 <mpu_configure_regions_and_partition.constprop.0+0x48>
	MPU->RNR = index;
    27fe:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    2802:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
    2804:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2808:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    280a:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    280e:	e9d6 3200 	ldrd	r3, r2, [r6]
    2812:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    2814:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    2816:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    281a:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    281e:	d11c      	bne.n	285a <CONFIG_MAIN_STACK_SIZE+0x5a>
    2820:	4557      	cmp	r7, sl
    2822:	d108      	bne.n	2836 <CONFIG_MAIN_STACK_SIZE+0x36>
			mpu_configure_region(u_reg_index, &regions[i]);
    2824:	4631      	mov	r1, r6
    2826:	fa5f f08b 	uxtb.w	r0, fp
    282a:	f7ff ff87 	bl	273c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    282e:	f108 0801 	add.w	r8, r8, #1
    2832:	360c      	adds	r6, #12
    2834:	e7b3      	b.n	279e <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    2836:	4631      	mov	r1, r6
	MPU->RNR = index;
    2838:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    283c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    283e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2842:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    2846:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    2848:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
    284a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    284c:	f7ff ff76 	bl	273c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2850:	f110 0f16 	cmn.w	r0, #22
    2854:	d0c7      	beq.n	27e6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
			reg_index++;
    2856:	1c44      	adds	r4, r0, #1
    2858:	e7e9      	b.n	282e <CONFIG_MAIN_STACK_SIZE+0x2e>
		} else if (reg_last == u_reg_last) {
    285a:	3b01      	subs	r3, #1
    285c:	4557      	cmp	r7, sl
    285e:	b2e0      	uxtb	r0, r4
    2860:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    2864:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
    2868:	d106      	bne.n	2878 <CONFIG_MAIN_STACK_SIZE+0x78>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    286a:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    286c:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    286e:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    2872:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2874:	612b      	str	r3, [r5, #16]
			reg_index =
    2876:	e7e9      	b.n	284c <CONFIG_MAIN_STACK_SIZE+0x4c>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2878:	6929      	ldr	r1, [r5, #16]
    287a:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    287e:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    2880:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
    2882:	4631      	mov	r1, r6
    2884:	f7ff ff5a 	bl	273c <mpu_configure_region>
			if (reg_index == -EINVAL) {
    2888:	f110 0f16 	cmn.w	r0, #22
    288c:	d0ab      	beq.n	27e6 <mpu_configure_regions_and_partition.constprop.0+0x5a>
	MPU->RNR = index;
    288e:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    2892:	68ea      	ldr	r2, [r5, #12]
    2894:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    2898:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
    289a:	f362 0304 	bfi	r3, r2, #0, #5
    289e:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    28a2:	692b      	ldr	r3, [r5, #16]
    28a4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    28a8:	085b      	lsrs	r3, r3, #1
    28aa:	f363 1247 	bfi	r2, r3, #5, #3
    28ae:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    28b2:	e9d6 3200 	ldrd	r3, r2, [r6]
    28b6:	4413      	add	r3, r2
    28b8:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    28ba:	f023 031f 	bic.w	r3, r3, #31
    28be:	443b      	add	r3, r7
			reg_index++;
    28c0:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    28c2:	eba3 0a0a 	sub.w	sl, r3, sl
    28c6:	b2e0      	uxtb	r0, r4
    28c8:	f02a 031f 	bic.w	r3, sl, #31
	if (index > (get_num_regions() - 1U)) {
    28cc:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    28ce:	9303      	str	r3, [sp, #12]
    28d0:	d903      	bls.n	28da <CONFIG_MAIN_STACK_SIZE+0xda>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    28d2:	4602      	mov	r2, r0
    28d4:	2145      	movs	r1, #69	; 0x45
    28d6:	4806      	ldr	r0, [pc, #24]	; (28f0 <CONFIG_MAIN_STACK_SIZE+0xf0>)
    28d8:	e783      	b.n	27e2 <mpu_configure_regions_and_partition.constprop.0+0x56>
	region_init(index, region_conf);
    28da:	4669      	mov	r1, sp
    28dc:	f7ff ff16 	bl	270c <region_init>
    28e0:	e7b9      	b.n	2856 <CONFIG_MAIN_STACK_SIZE+0x56>
    28e2:	bf00      	nop
    28e4:	e000ed90 	.word	0xe000ed90
    28e8:	0000911b 	.word	0x0000911b
    28ec:	000090f3 	.word	0x000090f3
    28f0:	000090c8 	.word	0x000090c8

000028f4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    28f4:	2205      	movs	r2, #5
    28f6:	4b03      	ldr	r3, [pc, #12]	; (2904 <arm_core_mpu_enable+0x10>)
    28f8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    28fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    28fe:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2902:	4770      	bx	lr
    2904:	e000ed90 	.word	0xe000ed90

00002908 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2908:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    290c:	2200      	movs	r2, #0
    290e:	4b01      	ldr	r3, [pc, #4]	; (2914 <arm_core_mpu_disable+0xc>)
    2910:	605a      	str	r2, [r3, #4]
}
    2912:	4770      	bx	lr
    2914:	e000ed90 	.word	0xe000ed90

00002918 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    2918:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    291a:	4c0e      	ldr	r4, [pc, #56]	; (2954 <arm_mpu_init+0x3c>)
    291c:	6825      	ldr	r5, [r4, #0]
    291e:	2d10      	cmp	r5, #16
    2920:	d814      	bhi.n	294c <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2922:	f7ff fff1 	bl	2908 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2926:	2000      	movs	r0, #0
	MPU->MAIR0 =
    2928:	4b0b      	ldr	r3, [pc, #44]	; (2958 <arm_mpu_init+0x40>)
    292a:	4a0c      	ldr	r2, [pc, #48]	; (295c <arm_mpu_init+0x44>)
    292c:	631a      	str	r2, [r3, #48]	; 0x30
    292e:	4285      	cmp	r5, r0
    2930:	d105      	bne.n	293e <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2932:	4b0b      	ldr	r3, [pc, #44]	; (2960 <arm_mpu_init+0x48>)
    2934:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    2936:	f7ff ffdd 	bl	28f4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    293a:	2000      	movs	r0, #0
}
    293c:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    293e:	6861      	ldr	r1, [r4, #4]
    2940:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    2944:	f7ff fee2 	bl	270c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2948:	3001      	adds	r0, #1
    294a:	e7f0      	b.n	292e <arm_mpu_init+0x16>
		return -1;
    294c:	f04f 30ff 	mov.w	r0, #4294967295
    2950:	e7f4      	b.n	293c <arm_mpu_init+0x24>
    2952:	bf00      	nop
    2954:	000083fc 	.word	0x000083fc
    2958:	e000ed90 	.word	0xe000ed90
    295c:	0044ffaa 	.word	0x0044ffaa
    2960:	2001733c 	.word	0x2001733c

00002964 <arm_core_mpu_configure_static_mpu_regions>:
{
    2964:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2966:	4c03      	ldr	r4, [pc, #12]	; (2974 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    2968:	7822      	ldrb	r2, [r4, #0]
    296a:	f7ff ff0f 	bl	278c <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    296e:	7020      	strb	r0, [r4, #0]
}
    2970:	bd10      	pop	{r4, pc}
    2972:	bf00      	nop
    2974:	2001733c 	.word	0x2001733c

00002978 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2978:	4b01      	ldr	r3, [pc, #4]	; (2980 <__stdout_hook_install+0x8>)
    297a:	6018      	str	r0, [r3, #0]
}
    297c:	4770      	bx	lr
    297e:	bf00      	nop
    2980:	20014530 	.word	0x20014530

00002984 <nrf_gpio_cfg_sense_set>:
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2984:	f000 021f 	and.w	r2, r0, #31
    2988:	4805      	ldr	r0, [pc, #20]	; (29a0 <nrf_gpio_cfg_sense_set+0x1c>)
    298a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    298e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    2992:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    299a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    299e:	4770      	bx	lr
    29a0:	50842500 	.word	0x50842500

000029a4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    29a4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    29a6:	4b09      	ldr	r3, [pc, #36]	; (29cc <gpio_nrfx_init+0x28>)
    29a8:	781a      	ldrb	r2, [r3, #0]
    29aa:	b96a      	cbnz	r2, 29c8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    29ac:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    29ae:	200d      	movs	r0, #13
		gpio_initialized = true;
    29b0:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    29b2:	2105      	movs	r1, #5
    29b4:	f7ff fbac 	bl	2110 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    29b8:	200d      	movs	r0, #13
    29ba:	f7ff fb8b 	bl	20d4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    29be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    29c2:	4b03      	ldr	r3, [pc, #12]	; (29d0 <gpio_nrfx_init+0x2c>)
    29c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    29c8:	2000      	movs	r0, #0
    29ca:	bd08      	pop	{r3, pc}
    29cc:	2001733d 	.word	0x2001733d
    29d0:	5000d000 	.word	0x5000d000

000029d4 <gpio_nrfx_pin_interrupt_configure>:
{
    29d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    29d6:	460e      	mov	r6, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    29d8:	6841      	ldr	r1, [r0, #4]
    29da:	f006 051f 	and.w	r5, r6, #31
    29de:	7a09      	ldrb	r1, [r1, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    29e0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
	struct gpio_nrfx_data *data = get_port_data(port);
    29e4:	68c7      	ldr	r7, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    29e6:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
    29ea:	d10a      	bne.n	2a02 <gpio_nrfx_pin_interrupt_configure+0x2e>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    29ec:	485c      	ldr	r0, [pc, #368]	; (2b60 <gpio_nrfx_pin_interrupt_configure+0x18c>)
    *p_pin = pin_number & 0x1F;
    29ee:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    29f2:	3180      	adds	r1, #128	; 0x80
    29f4:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    29f8:	07c8      	lsls	r0, r1, #31
    29fa:	d507      	bpl.n	2a0c <gpio_nrfx_pin_interrupt_configure+0x38>
		return -ENOTSUP;
    29fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2a00:	e093      	b.n	2b2a <gpio_nrfx_pin_interrupt_configure+0x156>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2a02:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2a06:	68f9      	ldr	r1, [r7, #12]
    2a08:	f000 8091 	beq.w	2b2e <gpio_nrfx_pin_interrupt_configure+0x15a>
    2a0c:	2101      	movs	r1, #1
    2a0e:	68f8      	ldr	r0, [r7, #12]
    2a10:	40b1      	lsls	r1, r6
    2a12:	4301      	orrs	r1, r0
    2a14:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2a16:	2101      	movs	r1, #1
    2a18:	6978      	ldr	r0, [r7, #20]
    2a1a:	40b1      	lsls	r1, r6
    2a1c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2a20:	bf0c      	ite	eq
    2a22:	4308      	orreq	r0, r1
    2a24:	4388      	bicne	r0, r1
    2a26:	6178      	str	r0, [r7, #20]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2a28:	2000      	movs	r0, #0
    2a2a:	69ba      	ldr	r2, [r7, #24]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2a2c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2a30:	bf0c      	ite	eq
    2a32:	430a      	orreq	r2, r1
    2a34:	438a      	bicne	r2, r1
    2a36:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2a38:	693a      	ldr	r2, [r7, #16]
    2a3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    2a3e:	bf0c      	ite	eq
    2a40:	4311      	orreq	r1, r2
    2a42:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2a46:	4a47      	ldr	r2, [pc, #284]	; (2b64 <gpio_nrfx_pin_interrupt_configure+0x190>)
    2a48:	6139      	str	r1, [r7, #16]
    2a4a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2a4e:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a50:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    2a54:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2a58:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2a5c:	428d      	cmp	r5, r1
    2a5e:	d16b      	bne.n	2b38 <gpio_nrfx_pin_interrupt_configure+0x164>
		    && (intenset & BIT(i))) {
    2a60:	fa23 f100 	lsr.w	r1, r3, r0
    2a64:	07c9      	lsls	r1, r1, #31
    2a66:	d567      	bpl.n	2b38 <gpio_nrfx_pin_interrupt_configure+0x164>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2a68:	0083      	lsls	r3, r0, #2
    2a6a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2a6e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2a72:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    2a76:	f021 0101 	bic.w	r1, r1, #1
    2a7a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    2a7e:	2301      	movs	r3, #1
    2a80:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    2a82:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    2a86:	b2c0      	uxtb	r0, r0
    2a88:	f000 fe4a 	bl	3720 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2a8c:	4628      	mov	r0, r5
    2a8e:	2100      	movs	r1, #0
    2a90:	f7ff ff78 	bl	2984 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2a94:	68f8      	ldr	r0, [r7, #12]
    2a96:	40f0      	lsrs	r0, r6
    2a98:	f010 0001 	ands.w	r0, r0, #1
    2a9c:	d045      	beq.n	2b2a <gpio_nrfx_pin_interrupt_configure+0x156>
		if (data->trig_edge & BIT(pin)) {
    2a9e:	6978      	ldr	r0, [r7, #20]
    2aa0:	40f0      	lsrs	r0, r6
    2aa2:	f010 0401 	ands.w	r4, r0, #1
    2aa6:	d04e      	beq.n	2b46 <gpio_nrfx_pin_interrupt_configure+0x172>
			if (data->double_edge & BIT(pin)) {
    2aa8:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2aaa:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    2aae:	40f3      	lsrs	r3, r6
    2ab0:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2ab2:	bf57      	itett	pl
    2ab4:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2ab6:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2ab8:	fa21 f606 	lsrpl.w	r6, r1, r6
    2abc:	f006 0601 	andpl.w	r6, r6, #1
    2ac0:	bf5c      	itt	pl
    2ac2:	f1c6 0602 	rsbpl	r6, r6, #2
    2ac6:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    2ac8:	f000 fe4c 	bl	3764 <nrfx_gpiote_channel_alloc>
    2acc:	4b26      	ldr	r3, [pc, #152]	; (2b68 <gpio_nrfx_pin_interrupt_configure+0x194>)
    2ace:	4298      	cmp	r0, r3
    2ad0:	d136      	bne.n	2b40 <gpio_nrfx_pin_interrupt_configure+0x16c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ad2:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    2ad4:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2ad8:	022d      	lsls	r5, r5, #8
    2ada:	008b      	lsls	r3, r1, #2
    2adc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2ae0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2ae4:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2ae8:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2aec:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    2af0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    2af4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2af8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2afc:	4315      	orrs	r5, r2
    return ((uint32_t)p_reg + event);
    2afe:	008a      	lsls	r2, r1, #2
    2b00:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2b04:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2b08:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    2b0c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2b10:	6010      	str	r0, [r2, #0]
    2b12:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2b14:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    2b18:	f042 0201 	orr.w	r2, r2, #1
    2b1c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    2b20:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    2b22:	4a10      	ldr	r2, [pc, #64]	; (2b64 <gpio_nrfx_pin_interrupt_configure+0x190>)
    2b24:	408b      	lsls	r3, r1
    2b26:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    2b2a:	b003      	add	sp, #12
    2b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2b2e:	2001      	movs	r0, #1
    2b30:	40b0      	lsls	r0, r6
    2b32:	ea21 0100 	bic.w	r1, r1, r0
    2b36:	e76d      	b.n	2a14 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2b38:	3001      	adds	r0, #1
    2b3a:	2808      	cmp	r0, #8
    2b3c:	d188      	bne.n	2a50 <gpio_nrfx_pin_interrupt_configure+0x7c>
    2b3e:	e7a5      	b.n	2a8c <gpio_nrfx_pin_interrupt_configure+0xb8>
		return -ENODEV;
    2b40:	f06f 0012 	mvn.w	r0, #18
    2b44:	e7f1      	b.n	2b2a <gpio_nrfx_pin_interrupt_configure+0x156>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2b46:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2b48:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2b4a:	40f1      	lsrs	r1, r6
    2b4c:	f001 0101 	and.w	r1, r1, #1
    2b50:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2b54:	b2c9      	uxtb	r1, r1
    2b56:	f7ff ff15 	bl	2984 <nrf_gpio_cfg_sense_set>
	int res = 0;
    2b5a:	4620      	mov	r0, r4
    2b5c:	e7e5      	b.n	2b2a <gpio_nrfx_pin_interrupt_configure+0x156>
    2b5e:	bf00      	nop
    2b60:	50842500 	.word	0x50842500
    2b64:	5000d000 	.word	0x5000d000
    2b68:	0bad0000 	.word	0x0bad0000

00002b6c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b6c:	4b28      	ldr	r3, [pc, #160]	; (2c10 <gpio_nrfx_config+0xa4>)
{
    2b6e:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2b70:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b72:	4828      	ldr	r0, [pc, #160]	; (2c14 <gpio_nrfx_config+0xa8>)
    2b74:	4013      	ands	r3, r2
    2b76:	4283      	cmp	r3, r0
    2b78:	d03b      	beq.n	2bf2 <gpio_nrfx_config+0x86>
    2b7a:	d80d      	bhi.n	2b98 <gpio_nrfx_config+0x2c>
    2b7c:	2b06      	cmp	r3, #6
    2b7e:	d015      	beq.n	2bac <gpio_nrfx_config+0x40>
    2b80:	d805      	bhi.n	2b8e <gpio_nrfx_config+0x22>
    2b82:	b19b      	cbz	r3, 2bac <gpio_nrfx_config+0x40>
    2b84:	2b02      	cmp	r3, #2
    2b86:	d036      	beq.n	2bf6 <gpio_nrfx_config+0x8a>
    2b88:	f06f 0015 	mvn.w	r0, #21
    2b8c:	e030      	b.n	2bf0 <gpio_nrfx_config+0x84>
    2b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2b92:	d1f9      	bne.n	2b88 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    2b94:	2301      	movs	r3, #1
    2b96:	e009      	b.n	2bac <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2b98:	481f      	ldr	r0, [pc, #124]	; (2c18 <gpio_nrfx_config+0xac>)
    2b9a:	4283      	cmp	r3, r0
    2b9c:	d02d      	beq.n	2bfa <gpio_nrfx_config+0x8e>
    2b9e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2ba2:	d02c      	beq.n	2bfe <gpio_nrfx_config+0x92>
    2ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2ba8:	d1ee      	bne.n	2b88 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2baa:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2bac:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    2bae:	bf4c      	ite	mi
    2bb0:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
    2bb2:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2bb6:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2bba:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    2bbe:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2bc2:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2bc6:	d006      	beq.n	2bd6 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2bc8:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2bcc:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2bce:	d018      	beq.n	2c02 <gpio_nrfx_config+0x96>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2bd0:	2201      	movs	r2, #1
    2bd2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    2bd4:	60b2      	str	r2, [r6, #8]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2bd6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
    2bda:	2000      	movs	r0, #0
    2bdc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    *p_pin = pin_number & 0x1F;
    2be0:	f001 011f 	and.w	r1, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2be4:	4a0d      	ldr	r2, [pc, #52]	; (2c1c <gpio_nrfx_config+0xb0>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2be6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2bea:	3180      	adds	r1, #128	; 0x80
    2bec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2bf0:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2bf2:	2307      	movs	r3, #7
    2bf4:	e7da      	b.n	2bac <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    2bf6:	2304      	movs	r3, #4
    2bf8:	e7d8      	b.n	2bac <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    2bfa:	2305      	movs	r3, #5
    2bfc:	e7d6      	b.n	2bac <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    2bfe:	2303      	movs	r3, #3
    2c00:	e7d4      	b.n	2bac <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2c02:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2c04:	bf42      	ittt	mi
    2c06:	2201      	movmi	r2, #1
    2c08:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    2c0a:	60f2      	strmi	r2, [r6, #12]
}
    2c0c:	e7e3      	b.n	2bd6 <gpio_nrfx_config+0x6a>
    2c0e:	bf00      	nop
    2c10:	00f00006 	.word	0x00f00006
    2c14:	00100006 	.word	0x00100006
    2c18:	00400002 	.word	0x00400002
    2c1c:	50842500 	.word	0x50842500

00002c20 <gpiote_event_handler>:
{
    2c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c24:	4f3f      	ldr	r7, [pc, #252]	; (2d24 <gpiote_event_handler+0x104>)
    2c26:	683e      	ldr	r6, [r7, #0]
	if (port_event) {
    2c28:	2e00      	cmp	r6, #0
    2c2a:	d04f      	beq.n	2ccc <gpiote_event_handler+0xac>
	uint32_t bit = 1U << pin;
    2c2c:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
    2c30:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
    2c34:	4b3c      	ldr	r3, [pc, #240]	; (2d28 <gpiote_event_handler+0x108>)
    2c36:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2c38:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    2c3c:	430a      	orrs	r2, r1
    2c3e:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
    2c42:	4a3a      	ldr	r2, [pc, #232]	; (2d2c <gpiote_event_handler+0x10c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2c44:	691b      	ldr	r3, [r3, #16]
    2c46:	6914      	ldr	r4, [r2, #16]
    2c48:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2c4a:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
    2c4e:	bb75      	cbnz	r5, 2cae <gpiote_event_handler+0x8e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c50:	603d      	str	r5, [r7, #0]
    2c52:	683b      	ldr	r3, [r7, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2c54:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2c56:	2501      	movs	r5, #1
    2c58:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2c5a:	4835      	ldr	r0, [pc, #212]	; (2d30 <gpiote_event_handler+0x110>)
    2c5c:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2c60:	fa05 f103 	lsl.w	r1, r5, r3
    2c64:	4211      	tst	r1, r2
    2c66:	d011      	beq.n	2c8c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2c68:	009a      	lsls	r2, r3, #2
    2c6a:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2c6e:	f502 4251 	add.w	r2, r2, #53504	; 0xd100
    2c72:	6811      	ldr	r1, [r2, #0]
    2c74:	b151      	cbz	r1, 2c8c <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2c76:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2c7a:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2c7e:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2c80:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2c84:	fa05 f101 	lsl.w	r1, r5, r1
    2c88:	6812      	ldr	r2, [r2, #0]
    2c8a:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2c8c:	3301      	adds	r3, #1
    2c8e:	2b08      	cmp	r3, #8
    2c90:	d1e4      	bne.n	2c5c <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
    2c92:	b9ec      	cbnz	r4, 2cd0 <gpiote_event_handler+0xb0>
	if (port_event) {
    2c94:	b14e      	cbz	r6, 2caa <gpiote_event_handler+0x8a>
	uint32_t bit = 1U << pin;
    2c96:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    2c98:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
    2c9a:	4d23      	ldr	r5, [pc, #140]	; (2d28 <gpiote_event_handler+0x108>)
    2c9c:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2c9e:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
    2ca2:	430a      	orrs	r2, r1
    2ca4:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
    2ca8:	bb54      	cbnz	r4, 2d00 <gpiote_event_handler+0xe0>
}
    2caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (level_pins & bit) {
    2cae:	ea15 0f08 	tst.w	r5, r8
    2cb2:	d006      	beq.n	2cc2 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2cb4:	2100      	movs	r1, #0
    2cb6:	f009 001f 	and.w	r0, r9, #31
    2cba:	f7ff fe63 	bl	2984 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2cbe:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
    2cc2:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
    2cc6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    2cca:	e7c0      	b.n	2c4e <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2ccc:	4634      	mov	r4, r6
    2cce:	e7c1      	b.n	2c54 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2cd0:	4b15      	ldr	r3, [pc, #84]	; (2d28 <gpiote_event_handler+0x108>)
    2cd2:	6859      	ldr	r1, [r3, #4]
    2cd4:	2900      	cmp	r1, #0
    2cd6:	d0dd      	beq.n	2c94 <gpiote_event_handler+0x74>
	return node->next;
    2cd8:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2cda:	4f16      	ldr	r7, [pc, #88]	; (2d34 <gpiote_event_handler+0x114>)
    2cdc:	2d00      	cmp	r5, #0
    2cde:	bf38      	it	cc
    2ce0:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2ce2:	688a      	ldr	r2, [r1, #8]
    2ce4:	4022      	ands	r2, r4
    2ce6:	d002      	beq.n	2cee <gpiote_event_handler+0xce>
			cb->handler(port, cb, cb->pin_mask & pins);
    2ce8:	4638      	mov	r0, r7
    2cea:	684b      	ldr	r3, [r1, #4]
    2cec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2cee:	2d00      	cmp	r5, #0
    2cf0:	d0d0      	beq.n	2c94 <gpiote_event_handler+0x74>
    2cf2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2cf4:	4629      	mov	r1, r5
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	bf38      	it	cc
    2cfa:	2300      	movcc	r3, #0
    2cfc:	461d      	mov	r5, r3
    2cfe:	e7f0      	b.n	2ce2 <gpiote_event_handler+0xc2>
		if (level_pins & bit) {
    2d00:	4226      	tst	r6, r4
    2d02:	d00c      	beq.n	2d1e <gpiote_event_handler+0xfe>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2d04:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2d06:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2d0a:	40f9      	lsrs	r1, r7
    2d0c:	f001 0101 	and.w	r1, r1, #1
    2d10:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2d14:	b2c9      	uxtb	r1, r1
    2d16:	f7ff fe35 	bl	2984 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2d1a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    2d1e:	3701      	adds	r7, #1
		bit <<= 1;
    2d20:	0076      	lsls	r6, r6, #1
    2d22:	e7c1      	b.n	2ca8 <gpiote_event_handler+0x88>
    2d24:	5000d17c 	.word	0x5000d17c
    2d28:	2001555c 	.word	0x2001555c
    2d2c:	50842500 	.word	0x50842500
    2d30:	5000d000 	.word	0x5000d000
    2d34:	20014648 	.word	0x20014648

00002d38 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    2d38:	4b02      	ldr	r3, [pc, #8]	; (2d44 <flash_nrf_pages_layout+0xc>)
    2d3a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    2d3c:	2301      	movs	r3, #1
    2d3e:	6013      	str	r3, [r2, #0]
}
    2d40:	4770      	bx	lr
    2d42:	bf00      	nop
    2d44:	20015578 	.word	0x20015578

00002d48 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    2d48:	4800      	ldr	r0, [pc, #0]	; (2d4c <flash_nrf_get_parameters+0x4>)
    2d4a:	4770      	bx	lr
    2d4c:	0000846c 	.word	0x0000846c

00002d50 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
    2d50:	b510      	push	{r4, lr}
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    2d52:	f003 fbeb 	bl	652c <nrfx_nvmc_flash_page_count_get>
    2d56:	4c03      	ldr	r4, [pc, #12]	; (2d64 <nrf_flash_init+0x14>)
    2d58:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    2d5a:	f003 fbe4 	bl	6526 <nrfx_nvmc_flash_page_size_get>
    2d5e:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
    2d60:	2000      	movs	r0, #0
    2d62:	bd10      	pop	{r4, pc}
    2d64:	20015578 	.word	0x20015578

00002d68 <flash_nrf_erase>:
{
    2d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d6a:	460e      	mov	r6, r1
    2d6c:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2d6e:	f003 fbda 	bl	6526 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
    2d72:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2d74:	4605      	mov	r5, r0
	if (is_regular_addr_valid(addr, size)) {
    2d76:	4630      	mov	r0, r6
    2d78:	f003 f99b 	bl	60b2 <is_regular_addr_valid>
    2d7c:	4637      	mov	r7, r6
    2d7e:	b1f8      	cbz	r0, 2dc0 <flash_nrf_erase+0x58>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    2d80:	fbb6 f3f5 	udiv	r3, r6, r5
    2d84:	fb05 6313 	mls	r3, r5, r3, r6
    2d88:	b923      	cbnz	r3, 2d94 <flash_nrf_erase+0x2c>
    2d8a:	fbb4 f0f5 	udiv	r0, r4, r5
    2d8e:	fb05 4010 	mls	r0, r5, r0, r4
    2d92:	b140      	cbz	r0, 2da6 <flash_nrf_erase+0x3e>
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    2d94:	4623      	mov	r3, r4
    2d96:	4632      	mov	r2, r6
    2d98:	2145      	movs	r1, #69	; 0x45
    2d9a:	480c      	ldr	r0, [pc, #48]	; (2dcc <flash_nrf_erase+0x64>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2d9c:	f002 fd7f 	bl	589e <printk>
    2da0:	f06f 0015 	mvn.w	r0, #21
    2da4:	e00b      	b.n	2dbe <flash_nrf_erase+0x56>
		if (!n_pages) {
    2da6:	42a5      	cmp	r5, r4
    2da8:	d809      	bhi.n	2dbe <flash_nrf_erase+0x56>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2daa:	f003 fbbc 	bl	6526 <nrfx_nvmc_flash_page_size_get>
    2dae:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2db0:	4638      	mov	r0, r7
    2db2:	f000 fd19 	bl	37e8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
    2db6:	1b64      	subs	r4, r4, r5
    2db8:	442f      	add	r7, r5
    2dba:	d1f9      	bne.n	2db0 <flash_nrf_erase+0x48>
	return ret;
    2dbc:	4620      	mov	r0, r4
}
    2dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2dc0:	4623      	mov	r3, r4
    2dc2:	4632      	mov	r2, r6
    2dc4:	2145      	movs	r1, #69	; 0x45
    2dc6:	4802      	ldr	r0, [pc, #8]	; (2dd0 <flash_nrf_erase+0x68>)
    2dc8:	e7e8      	b.n	2d9c <flash_nrf_erase+0x34>
    2dca:	bf00      	nop
    2dcc:	00009159 	.word	0x00009159
    2dd0:	0000917d 	.word	0x0000917d

00002dd4 <flash_nrf_read>:
{
    2dd4:	b570      	push	{r4, r5, r6, lr}
    2dd6:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
    2dd8:	4619      	mov	r1, r3
    2dda:	4628      	mov	r0, r5
{
    2ddc:	4616      	mov	r6, r2
    2dde:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2de0:	f003 f967 	bl	60b2 <is_regular_addr_valid>
    2de4:	b940      	cbnz	r0, 2df8 <flash_nrf_read+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2de6:	4809      	ldr	r0, [pc, #36]	; (2e0c <flash_nrf_read+0x38>)
    2de8:	4623      	mov	r3, r4
    2dea:	462a      	mov	r2, r5
    2dec:	2145      	movs	r1, #69	; 0x45
    2dee:	f002 fd56 	bl	589e <printk>
    2df2:	f06f 0015 	mvn.w	r0, #21
}
    2df6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
    2df8:	b134      	cbz	r4, 2e08 <flash_nrf_read+0x34>
	memcpy(data, (void *)addr, len);
    2dfa:	4622      	mov	r2, r4
    2dfc:	4629      	mov	r1, r5
    2dfe:	4630      	mov	r0, r6
    2e00:	f003 f8b9 	bl	5f76 <memcpy>
	return 0;
    2e04:	2000      	movs	r0, #0
    2e06:	e7f6      	b.n	2df6 <flash_nrf_read+0x22>
		return 0;
    2e08:	4620      	mov	r0, r4
    2e0a:	e7f4      	b.n	2df6 <flash_nrf_read+0x22>
    2e0c:	0000917d 	.word	0x0000917d

00002e10 <flash_nrf_write>:
{
    2e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e12:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
    2e14:	4619      	mov	r1, r3
    2e16:	4630      	mov	r0, r6
{
    2e18:	4617      	mov	r7, r2
    2e1a:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
    2e1c:	f003 f949 	bl	60b2 <is_regular_addr_valid>
    2e20:	b940      	cbnz	r0, 2e34 <flash_nrf_write+0x24>
		LOG_ERR("invalid address: 0x%08lx:%zu",
    2e22:	4623      	mov	r3, r4
    2e24:	4632      	mov	r2, r6
    2e26:	2145      	movs	r1, #69	; 0x45
    2e28:	4812      	ldr	r0, [pc, #72]	; (2e74 <flash_nrf_write+0x64>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2e2a:	f002 fd38 	bl	589e <printk>
		return -EINVAL;
    2e2e:	f06f 0015 	mvn.w	r0, #21
}
    2e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
    2e34:	ea44 0506 	orr.w	r5, r4, r6
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    2e38:	f015 0503 	ands.w	r5, r5, #3
    2e3c:	d004      	beq.n	2e48 <flash_nrf_write+0x38>
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    2e3e:	4623      	mov	r3, r4
    2e40:	4632      	mov	r2, r6
    2e42:	2145      	movs	r1, #69	; 0x45
    2e44:	480c      	ldr	r0, [pc, #48]	; (2e78 <flash_nrf_write+0x68>)
    2e46:	e7f0      	b.n	2e2a <flash_nrf_write+0x1a>
	if (!len) {
    2e48:	b18c      	cbz	r4, 2e6e <flash_nrf_write+0x5e>
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
    2e4a:	192b      	adds	r3, r5, r4
    2e4c:	2b03      	cmp	r3, #3
    2e4e:	eba6 0005 	sub.w	r0, r6, r5
    2e52:	d806      	bhi.n	2e62 <flash_nrf_write+0x52>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    2e54:	4a09      	ldr	r2, [pc, #36]	; (2e7c <flash_nrf_write+0x6c>)
    2e56:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    2e5a:	07db      	lsls	r3, r3, #31
    2e5c:	d5fb      	bpl.n	2e56 <flash_nrf_write+0x46>
	return ret;
    2e5e:	2000      	movs	r0, #0
    2e60:	e7e7      	b.n	2e32 <flash_nrf_write+0x22>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    2e62:	1b7b      	subs	r3, r7, r5
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    2e64:	6819      	ldr	r1, [r3, #0]
    2e66:	f000 fcdd 	bl	3824 <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
    2e6a:	3d04      	subs	r5, #4
}
    2e6c:	e7ed      	b.n	2e4a <flash_nrf_write+0x3a>
		return 0;
    2e6e:	4620      	mov	r0, r4
    2e70:	e7df      	b.n	2e32 <flash_nrf_write+0x22>
    2e72:	bf00      	nop
    2e74:	0000917d 	.word	0x0000917d
    2e78:	0000919f 	.word	0x0000919f
    2e7c:	50039000 	.word	0x50039000

00002e80 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2e80:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2e82:	794b      	ldrb	r3, [r1, #5]
    2e84:	2b01      	cmp	r3, #1
    2e86:	d029      	beq.n	2edc <uarte_nrfx_configure+0x5c>
    2e88:	2b03      	cmp	r3, #3
    2e8a:	d124      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2e8c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2e8e:	798b      	ldrb	r3, [r1, #6]
    2e90:	2b03      	cmp	r3, #3
    2e92:	d120      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2e94:	79cc      	ldrb	r4, [r1, #7]
    2e96:	b124      	cbz	r4, 2ea2 <uarte_nrfx_configure+0x22>
    2e98:	2c01      	cmp	r4, #1
    2e9a:	d11c      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2e9c:	6843      	ldr	r3, [r0, #4]
    2e9e:	791b      	ldrb	r3, [r3, #4]
    2ea0:	b1cb      	cbz	r3, 2ed6 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2ea2:	790a      	ldrb	r2, [r1, #4]
    2ea4:	b112      	cbz	r2, 2eac <uarte_nrfx_configure+0x2c>
    2ea6:	2a02      	cmp	r2, #2
    2ea8:	d115      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2eaa:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2eac:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2eae:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    2eb0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2eb4:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    2eb6:	d065      	beq.n	2f84 <uarte_nrfx_configure+0x104>
    2eb8:	d82d      	bhi.n	2f16 <uarte_nrfx_configure+0x96>
    2eba:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2ebe:	d064      	beq.n	2f8a <uarte_nrfx_configure+0x10a>
    2ec0:	d816      	bhi.n	2ef0 <uarte_nrfx_configure+0x70>
    2ec2:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2ec6:	d062      	beq.n	2f8e <uarte_nrfx_configure+0x10e>
    2ec8:	d80a      	bhi.n	2ee0 <uarte_nrfx_configure+0x60>
    2eca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2ece:	d061      	beq.n	2f94 <uarte_nrfx_configure+0x114>
    2ed0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2ed4:	d061      	beq.n	2f9a <uarte_nrfx_configure+0x11a>
    2ed6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2eda:	e052      	b.n	2f82 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
    2edc:	2600      	movs	r6, #0
    2ede:	e7d6      	b.n	2e8e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    2ee0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2ee4:	d05c      	beq.n	2fa0 <uarte_nrfx_configure+0x120>
    2ee6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2eea:	d1f4      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2eec:	4b37      	ldr	r3, [pc, #220]	; (2fcc <uarte_nrfx_configure+0x14c>)
    2eee:	e03c      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2ef0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2ef4:	d057      	beq.n	2fa6 <uarte_nrfx_configure+0x126>
    2ef6:	d807      	bhi.n	2f08 <uarte_nrfx_configure+0x88>
    2ef8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2efc:	d055      	beq.n	2faa <uarte_nrfx_configure+0x12a>
    2efe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2f02:	d1e8      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2f04:	4b32      	ldr	r3, [pc, #200]	; (2fd0 <uarte_nrfx_configure+0x150>)
    2f06:	e030      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f08:	f647 2712 	movw	r7, #31250	; 0x7a12
    2f0c:	42bb      	cmp	r3, r7
    2f0e:	d1e2      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2f10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2f14:	e029      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f16:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2f1a:	d048      	beq.n	2fae <uarte_nrfx_configure+0x12e>
    2f1c:	d813      	bhi.n	2f46 <uarte_nrfx_configure+0xc6>
    2f1e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2f22:	d047      	beq.n	2fb4 <uarte_nrfx_configure+0x134>
    2f24:	d809      	bhi.n	2f3a <uarte_nrfx_configure+0xba>
    2f26:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    2f2a:	42bb      	cmp	r3, r7
    2f2c:	d044      	beq.n	2fb8 <uarte_nrfx_configure+0x138>
    2f2e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2f32:	d1d0      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2f34:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2f38:	e017      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f3a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2f3e:	d1ca      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2f40:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2f44:	e011      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f46:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2f4a:	d038      	beq.n	2fbe <uarte_nrfx_configure+0x13e>
    2f4c:	d808      	bhi.n	2f60 <uarte_nrfx_configure+0xe0>
    2f4e:	4f21      	ldr	r7, [pc, #132]	; (2fd4 <uarte_nrfx_configure+0x154>)
    2f50:	42bb      	cmp	r3, r7
    2f52:	d037      	beq.n	2fc4 <uarte_nrfx_configure+0x144>
    2f54:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2f58:	d1bd      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    2f5a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2f5e:	e004      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f60:	4f1d      	ldr	r7, [pc, #116]	; (2fd8 <uarte_nrfx_configure+0x158>)
    2f62:	42bb      	cmp	r3, r7
    2f64:	d1b7      	bne.n	2ed6 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2f6a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2f6e:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
    2f70:	4334      	orrs	r4, r6
    2f72:	4322      	orrs	r2, r4
    2f74:	3304      	adds	r3, #4
    2f76:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2f78:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    2f7c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2f80:	2000      	movs	r0, #0
}
    2f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2f84:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    2f88:	e7ef      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2f8a:	4b14      	ldr	r3, [pc, #80]	; (2fdc <uarte_nrfx_configure+0x15c>)
    2f8c:	e7ed      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2f8e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2f92:	e7ea      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    2f94:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2f98:	e7e7      	b.n	2f6a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    2f9a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2f9e:	e7e4      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2fa0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2fa4:	e7e1      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2fa6:	4b0e      	ldr	r3, [pc, #56]	; (2fe0 <uarte_nrfx_configure+0x160>)
    2fa8:	e7df      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2faa:	4b0e      	ldr	r3, [pc, #56]	; (2fe4 <uarte_nrfx_configure+0x164>)
    2fac:	e7dd      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2fae:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2fb2:	e7da      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2fb4:	4b0c      	ldr	r3, [pc, #48]	; (2fe8 <uarte_nrfx_configure+0x168>)
    2fb6:	e7d8      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2fb8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2fbc:	e7d5      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2fbe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2fc2:	e7d2      	b.n	2f6a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2fc8:	e7cf      	b.n	2f6a <uarte_nrfx_configure+0xea>
    2fca:	bf00      	nop
    2fcc:	0013b000 	.word	0x0013b000
    2fd0:	004ea000 	.word	0x004ea000
    2fd4:	0003d090 	.word	0x0003d090
    2fd8:	000f4240 	.word	0x000f4240
    2fdc:	00275000 	.word	0x00275000
    2fe0:	0075c000 	.word	0x0075c000
    2fe4:	003af000 	.word	0x003af000
    2fe8:	013a9000 	.word	0x013a9000

00002fec <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ff0:	4606      	mov	r6, r0
    2ff2:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    2ff4:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2ff6:	f004 ffcd 	bl	7f94 <k_is_in_isr>
    2ffa:	b9b8      	cbnz	r0, 302c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    2ffc:	4b28      	ldr	r3, [pc, #160]	; (30a0 <uarte_nrfx_poll_out+0xb4>)
    2ffe:	781b      	ldrb	r3, [r3, #0]
    3000:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    3004:	6872      	ldr	r2, [r6, #4]
    3006:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    3008:	b193      	cbz	r3, 3030 <uarte_nrfx_poll_out+0x44>
    300a:	f04f 0320 	mov.w	r3, #32
    300e:	f3ef 8411 	mrs	r4, BASEPRI
    3012:	f383 8811 	msr	BASEPRI, r3
    3016:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    301a:	4630      	mov	r0, r6
    301c:	f003 f8d6 	bl	61cc <is_tx_ready>
    3020:	bb38      	cbnz	r0, 3072 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    3022:	f384 8811 	msr	BASEPRI, r4
    3026:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    302a:	e7ee      	b.n	300a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    302c:	2301      	movs	r3, #1
    302e:	e7e9      	b.n	3004 <uarte_nrfx_poll_out+0x18>
    3030:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3032:	4630      	mov	r0, r6
    3034:	f003 f8ca 	bl	61cc <is_tx_ready>
    3038:	b970      	cbnz	r0, 3058 <uarte_nrfx_poll_out+0x6c>
    303a:	2001      	movs	r0, #1
    303c:	f003 fa63 	bl	6506 <nrfx_busy_wait>
    3040:	3c01      	subs	r4, #1
    3042:	d1f6      	bne.n	3032 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    3044:	2100      	movs	r1, #0
    3046:	2021      	movs	r0, #33	; 0x21
    3048:	f001 fe14 	bl	4c74 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    304c:	e7f0      	b.n	3030 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    304e:	f384 8811 	msr	BASEPRI, r4
    3052:	f3bf 8f6f 	isb	sy
}
    3056:	e7f5      	b.n	3044 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    3058:	f04f 0320 	mov.w	r3, #32
    305c:	f3ef 8411 	mrs	r4, BASEPRI
    3060:	f383 8811 	msr	BASEPRI, r3
    3064:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3068:	4630      	mov	r0, r6
    306a:	f003 f8af 	bl	61cc <is_tx_ready>
    306e:	2800      	cmp	r0, #0
    3070:	d0ed      	beq.n	304e <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3072:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3074:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    3076:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    307a:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    307e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3082:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    3086:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    308a:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    308e:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3092:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    3094:	f384 8811 	msr	BASEPRI, r4
    3098:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    309c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30a0:	2001737e 	.word	0x2001737e

000030a4 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    30a4:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
    30a8:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    30aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    30ae:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    30b0:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
    30b2:	460f      	mov	r7, r1
    30b4:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
    30b8:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
    30ba:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
    30bc:	6808      	ldr	r0, [r1, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30be:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
    30c0:	4b3e      	ldr	r3, [pc, #248]	; (31bc <uarte_instance_init.isra.0+0x118>)
    *p_pin = pin_number & 0x1F;
    30c2:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    30c6:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
    30c8:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    30ca:	2103      	movs	r1, #3
    30cc:	3280      	adds	r2, #128	; 0x80
    30ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    30d2:	687a      	ldr	r2, [r7, #4]
    30d4:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
    30d6:	bf1e      	ittt	ne
    30d8:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    30dc:	3180      	addne	r1, #128	; 0x80
    30de:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    30e2:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
    30e4:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    30e8:	1c48      	adds	r0, r1, #1
    30ea:	bf18      	it	ne
    30ec:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
    30ee:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
    30f2:	bf1e      	ittt	ne
    30f4:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    30f8:	3280      	addne	r2, #128	; 0x80
    30fa:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    30fe:	68f8      	ldr	r0, [r7, #12]
    3100:	1c42      	adds	r2, r0, #1
    3102:	d00c      	beq.n	311e <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3104:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
    3108:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    310c:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
    3110:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3114:	f04f 0c03 	mov.w	ip, #3
    3118:	3280      	adds	r2, #128	; 0x80
    311a:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    311e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3122:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3126:	68e9      	ldr	r1, [r5, #12]
    3128:	4628      	mov	r0, r5
    312a:	3104      	adds	r1, #4
    312c:	f7ff fea8 	bl	2e80 <uarte_nrfx_configure>
	if (err) {
    3130:	4680      	mov	r8, r0
    3132:	b978      	cbnz	r0, 3154 <uarte_instance_init.isra.0+0xb0>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
    3134:	686b      	ldr	r3, [r5, #4]
    3136:	799b      	ldrb	r3, [r3, #6]
    3138:	b1e3      	cbz	r3, 3174 <uarte_instance_init.isra.0+0xd0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    313a:	f106 0016 	add.w	r0, r6, #22
    313e:	f000 fad1 	bl	36e4 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3142:	4b1f      	ldr	r3, [pc, #124]	; (31c0 <uarte_instance_init.isra.0+0x11c>)
    3144:	4298      	cmp	r0, r3
    3146:	d008      	beq.n	315a <uarte_instance_init.isra.0+0xb6>
		LOG_ERR("Failed to allocate PPI Channel");
    3148:	2145      	movs	r1, #69	; 0x45
    314a:	481e      	ldr	r0, [pc, #120]	; (31c4 <uarte_instance_init.isra.0+0x120>)
    314c:	f002 fba7 	bl	589e <printk>
		return -EIO;
    3150:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3154:	4640      	mov	r0, r8
    3156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    315a:	7db3      	ldrb	r3, [r6, #22]
    315c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3160:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    3164:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3168:	2301      	movs	r3, #1
    316a:	7db2      	ldrb	r2, [r6, #22]
    316c:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    316e:	4a16      	ldr	r2, [pc, #88]	; (31c8 <uarte_instance_init.isra.0+0x124>)
    3170:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3174:	2308      	movs	r3, #8
    3176:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    317a:	687b      	ldr	r3, [r7, #4]
    317c:	3301      	adds	r3, #1
    317e:	d00c      	beq.n	319a <uarte_instance_init.isra.0+0xf6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3180:	2300      	movs	r3, #0
    3182:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3186:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    318a:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    318e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3192:	2301      	movs	r3, #1
    3194:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3198:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    319a:	686b      	ldr	r3, [r5, #4]
    319c:	799b      	ldrb	r3, [r3, #6]
    319e:	b91b      	cbnz	r3, 31a8 <uarte_instance_init.isra.0+0x104>
    p_reg->INTENSET = mask;
    31a0:	f44f 7380 	mov.w	r3, #256	; 0x100
    31a4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    31a8:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    31aa:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    31ac:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    31b0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    31b4:	2301      	movs	r3, #1
    31b6:	60a3      	str	r3, [r4, #8]
    31b8:	60e3      	str	r3, [r4, #12]
	return 0;
    31ba:	e7cb      	b.n	3154 <uarte_instance_init.isra.0+0xb0>
    31bc:	50842500 	.word	0x50842500
    31c0:	0bad0000 	.word	0x0bad0000
    31c4:	000091cc 	.word	0x000091cc
    31c8:	50017000 	.word	0x50017000

000031cc <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    31cc:	b530      	push	{r4, r5, lr}
    31ce:	b085      	sub	sp, #20
    31d0:	466c      	mov	r4, sp
    31d2:	4605      	mov	r5, r0
    31d4:	4b08      	ldr	r3, [pc, #32]	; (31f8 <uarte_0_init+0x2c>)
    31d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    31d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    31dc:	2200      	movs	r2, #0
    31de:	2101      	movs	r1, #1
    31e0:	2008      	movs	r0, #8
    31e2:	f7fe ff95 	bl	2110 <z_arm_irq_priority_set>
    31e6:	2008      	movs	r0, #8
    31e8:	f7fe ff74 	bl	20d4 <arch_irq_enable>
    31ec:	4621      	mov	r1, r4
    31ee:	4628      	mov	r0, r5
    31f0:	f7ff ff58 	bl	30a4 <uarte_instance_init.isra.0>
    31f4:	b005      	add	sp, #20
    31f6:	bd30      	pop	{r4, r5, pc}
    31f8:	000082b0 	.word	0x000082b0

000031fc <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    31fc:	b530      	push	{r4, r5, lr}
    31fe:	b085      	sub	sp, #20
    3200:	466c      	mov	r4, sp
    3202:	4605      	mov	r5, r0
    3204:	4b08      	ldr	r3, [pc, #32]	; (3228 <uarte_1_init+0x2c>)
    3206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    320c:	2200      	movs	r2, #0
    320e:	2101      	movs	r1, #1
    3210:	2009      	movs	r0, #9
    3212:	f7fe ff7d 	bl	2110 <z_arm_irq_priority_set>
    3216:	2009      	movs	r0, #9
    3218:	f7fe ff5c 	bl	20d4 <arch_irq_enable>
    321c:	4621      	mov	r1, r4
    321e:	4628      	mov	r0, r5
    3220:	f7ff ff40 	bl	30a4 <uarte_instance_init.isra.0>
    3224:	b005      	add	sp, #20
    3226:	bd30      	pop	{r4, r5, pc}
    3228:	000082c0 	.word	0x000082c0

0000322c <fprotect_area>:
#define SPU_BLOCK_SIZE CONFIG_FPROTECT_BLOCK_SIZE
#endif

int fprotect_area(uint32_t start, size_t length)
{
	if (start % SPU_BLOCK_SIZE != 0 ||
    322c:	ea40 0301 	orr.w	r3, r0, r1
    3230:	f3c3 030e 	ubfx	r3, r3, #0, #15
{
    3234:	b530      	push	{r4, r5, lr}
	if (start % SPU_BLOCK_SIZE != 0 ||
    3236:	b98b      	cbnz	r3, 325c <fprotect_area+0x30>
                                               uint32_t       permissions,
                                               bool           lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHREGION[region_id].PERM & SPU_FLASHREGION_PERM_LOCK_Msk));

    p_reg->FLASHREGION[region_id].PERM = permissions         |
    3238:	f240 1515 	movw	r5, #277	; 0x115
    323c:	4c09      	ldr	r4, [pc, #36]	; (3264 <fprotect_area+0x38>)
		length % SPU_BLOCK_SIZE != 0) {
		return -EINVAL;
	}

	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    323e:	0bc9      	lsrs	r1, r1, #15
		nrf_spu_flashregion_set(NRF_SPU_S,
    3240:	f3c0 30c7 	ubfx	r0, r0, #15, #8
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3244:	4299      	cmp	r1, r3
    3246:	d101      	bne.n	324c <fprotect_area+0x20>
				NRF_SPU_MEM_PERM_EXECUTE |
				NRF_SPU_MEM_PERM_READ,
				true);
	}

	return 0;
    3248:	2000      	movs	r0, #0
}
    324a:	bd30      	pop	{r4, r5, pc}
		nrf_spu_flashregion_set(NRF_SPU_S,
    324c:	18c2      	adds	r2, r0, r3
    324e:	b2d2      	uxtb	r2, r2
    3250:	f502 72c0 	add.w	r2, r2, #384	; 0x180
    3254:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
	for (uint32_t i = 0; i < length / SPU_BLOCK_SIZE; i++) {
    3258:	3301      	adds	r3, #1
    325a:	e7f3      	b.n	3244 <fprotect_area+0x18>
		return -EINVAL;
    325c:	f06f 0015 	mvn.w	r0, #21
    3260:	e7f3      	b.n	324a <fprotect_area+0x1e>
    3262:	bf00      	nop
    3264:	50003000 	.word	0x50003000

00003268 <k_sys_fatal_error_handler>:
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    3268:	4803      	ldr	r0, [pc, #12]	; (3278 <k_sys_fatal_error_handler+0x10>)
    326a:	2145      	movs	r1, #69	; 0x45
{
    326c:	b508      	push	{r3, lr}
	LOG_ERR("Resetting system");
    326e:	f002 fb16 	bl	589e <printk>
	sys_arch_reboot(0);
    3272:	2000      	movs	r0, #0
    3274:	f7ff f9fe 	bl	2674 <sys_arch_reboot>

	CODE_UNREACHABLE;
    3278:	00009207 	.word	0x00009207

0000327c <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
    327c:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
    327e:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    3280:	4a04      	ldr	r2, [pc, #16]	; (3294 <boot_write_magic+0x18>)
    3282:	2310      	movs	r3, #16
    3284:	3910      	subs	r1, #16
    3286:	f002 fd41 	bl	5d0c <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
    328a:	3800      	subs	r0, #0
    328c:	bf18      	it	ne
    328e:	2001      	movne	r0, #1
    3290:	bd08      	pop	{r3, pc}
    3292:	bf00      	nop
    3294:	000084d0 	.word	0x000084d0

00003298 <boot_read_swap_state>:
{
    3298:	b530      	push	{r4, r5, lr}
    329a:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    329c:	6881      	ldr	r1, [r0, #8]
{
    329e:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    32a0:	2310      	movs	r3, #16
    32a2:	aa02      	add	r2, sp, #8
    32a4:	3910      	subs	r1, #16
{
    32a6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
    32a8:	f002 fd13 	bl	5cd2 <flash_area_read>
    if (rc < 0) {
    32ac:	2800      	cmp	r0, #0
    32ae:	db11      	blt.n	32d4 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
    32b0:	2210      	movs	r2, #16
    32b2:	4628      	mov	r0, r5
    32b4:	a902      	add	r1, sp, #8
    32b6:	f003 f882 	bl	63be <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
    32ba:	b168      	cbz	r0, 32d8 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
    32bc:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    32be:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    32c0:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    32c2:	2301      	movs	r3, #1
    32c4:	4628      	mov	r0, r5
    32c6:	f10d 0207 	add.w	r2, sp, #7
    32ca:	3928      	subs	r1, #40	; 0x28
    32cc:	f002 fd01 	bl	5cd2 <flash_area_read>
    if (rc < 0) {
    32d0:	2800      	cmp	r0, #0
    32d2:	da0b      	bge.n	32ec <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
    32d4:	2001      	movs	r0, #1
    32d6:	e02a      	b.n	332e <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    32d8:	2210      	movs	r2, #16
    32da:	4916      	ldr	r1, [pc, #88]	; (3334 <boot_read_swap_state+0x9c>)
    32dc:	a802      	add	r0, sp, #8
    32de:	f002 fe3a 	bl	5f56 <memcmp>
    32e2:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
    32e4:	bf14      	ite	ne
    32e6:	2302      	movne	r3, #2
    32e8:	2301      	moveq	r3, #1
    32ea:	e7e8      	b.n	32be <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    32ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
    32f0:	4628      	mov	r0, r5
    32f2:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    32f6:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    32f8:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    32fa:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
    32fc:	2201      	movs	r2, #1
    32fe:	f10d 0107 	add.w	r1, sp, #7
    3302:	f003 f85c 	bl	63be <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
    3306:	b910      	cbnz	r0, 330e <boot_read_swap_state+0x76>
    3308:	7863      	ldrb	r3, [r4, #1]
    330a:	2b04      	cmp	r3, #4
    330c:	d903      	bls.n	3316 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    330e:	2301      	movs	r3, #1
    3310:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    3312:	2300      	movs	r3, #0
    3314:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    3316:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
    3318:	4628      	mov	r0, r5
    331a:	3a20      	subs	r2, #32
    331c:	1ca1      	adds	r1, r4, #2
    331e:	f003 f8a2 	bl	6466 <boot_read_flag>
    if (rc) {
    3322:	2800      	cmp	r0, #0
    3324:	d1d6      	bne.n	32d4 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
    3326:	4628      	mov	r0, r5
    3328:	1ce1      	adds	r1, r4, #3
    332a:	f003 f8c5 	bl	64b8 <boot_read_image_ok>
}
    332e:	b007      	add	sp, #28
    3330:	bd30      	pop	{r4, r5, pc}
    3332:	bf00      	nop
    3334:	000084d0 	.word	0x000084d0

00003338 <boot_swap_type_multi>:
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
}

int
boot_swap_type_multi(int image_index)
{
    3338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    333c:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    333e:	4669      	mov	r1, sp
    3340:	2003      	movs	r0, #3
    3342:	f003 f8bd 	bl	64c0 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    3346:	b118      	cbz	r0, 3350 <boot_swap_type_multi+0x18>
        return BOOT_SWAP_TYPE_PANIC;
    3348:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    334a:	b005      	add	sp, #20
    334c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3350:	2007      	movs	r0, #7
    3352:	a902      	add	r1, sp, #8
    3354:	f003 f8b4 	bl	64c0 <boot_read_swap_state_by_id>
    if (rc) {
    3358:	4602      	mov	r2, r0
    335a:	2800      	cmp	r0, #0
    335c:	d1f4      	bne.n	3348 <boot_swap_type_multi+0x10>
        if (boot_magic_compatible_check(table->magic_primary_slot,
    335e:	f89d 5000 	ldrb.w	r5, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    3362:	f89d 6008 	ldrb.w	r6, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3366:	f89d 7003 	ldrb.w	r7, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    336a:	f89d 800b 	ldrb.w	r8, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    336e:	f89d 9002 	ldrb.w	r9, [sp, #2]
    3372:	4c1e      	ldr	r4, [pc, #120]	; (33ec <boot_swap_type_multi+0xb4>)
        if (boot_magic_compatible_check(table->magic_primary_slot,
    3374:	4629      	mov	r1, r5
    3376:	7820      	ldrb	r0, [r4, #0]
    3378:	f003 f861 	bl	643e <boot_magic_compatible_check>
    337c:	b300      	cbz	r0, 33c0 <boot_swap_type_multi+0x88>
            boot_magic_compatible_check(table->magic_secondary_slot,
    337e:	4631      	mov	r1, r6
    3380:	7860      	ldrb	r0, [r4, #1]
    3382:	f003 f85c 	bl	643e <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    3386:	b1d8      	cbz	r0, 33c0 <boot_swap_type_multi+0x88>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    3388:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    338a:	2b04      	cmp	r3, #4
    338c:	d001      	beq.n	3392 <boot_swap_type_multi+0x5a>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    338e:	42bb      	cmp	r3, r7
    3390:	d116      	bne.n	33c0 <boot_swap_type_multi+0x88>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3392:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    3394:	2b04      	cmp	r3, #4
    3396:	d001      	beq.n	339c <boot_swap_type_multi+0x64>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    3398:	4543      	cmp	r3, r8
    339a:	d111      	bne.n	33c0 <boot_swap_type_multi+0x88>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    339c:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    339e:	2b04      	cmp	r3, #4
    33a0:	d10c      	bne.n	33bc <boot_swap_type_multi+0x84>
            BOOT_LOG_INF("Swap type: %s",
    33a2:	7963      	ldrb	r3, [r4, #5]
    33a4:	2b02      	cmp	r3, #2
    33a6:	d116      	bne.n	33d6 <boot_swap_type_multi+0x9e>
    33a8:	4a11      	ldr	r2, [pc, #68]	; (33f0 <boot_swap_type_multi+0xb8>)
    33aa:	4812      	ldr	r0, [pc, #72]	; (33f4 <boot_swap_type_multi+0xbc>)
    33ac:	2149      	movs	r1, #73	; 0x49
    33ae:	f002 fa76 	bl	589e <printk>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    33b2:	7960      	ldrb	r0, [r4, #5]
    33b4:	1e83      	subs	r3, r0, #2
    33b6:	2b02      	cmp	r3, #2
    33b8:	d9c7      	bls.n	334a <boot_swap_type_multi+0x12>
    33ba:	e7c5      	b.n	3348 <boot_swap_type_multi+0x10>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    33bc:	454b      	cmp	r3, r9
    33be:	d0f0      	beq.n	33a2 <boot_swap_type_multi+0x6a>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    33c0:	3201      	adds	r2, #1
    33c2:	2a03      	cmp	r2, #3
    33c4:	f104 0406 	add.w	r4, r4, #6
    33c8:	d1d4      	bne.n	3374 <boot_swap_type_multi+0x3c>
    BOOT_LOG_INF("Swap type: none");
    33ca:	480b      	ldr	r0, [pc, #44]	; (33f8 <boot_swap_type_multi+0xc0>)
    33cc:	2149      	movs	r1, #73	; 0x49
    33ce:	f002 fa66 	bl	589e <printk>
    return BOOT_SWAP_TYPE_NONE;
    33d2:	2001      	movs	r0, #1
    33d4:	e7b9      	b.n	334a <boot_swap_type_multi+0x12>
            BOOT_LOG_INF("Swap type: %s",
    33d6:	2b03      	cmp	r3, #3
    33d8:	d005      	beq.n	33e6 <boot_swap_type_multi+0xae>
    33da:	4a08      	ldr	r2, [pc, #32]	; (33fc <boot_swap_type_multi+0xc4>)
    33dc:	4908      	ldr	r1, [pc, #32]	; (3400 <boot_swap_type_multi+0xc8>)
    33de:	2b04      	cmp	r3, #4
    33e0:	bf18      	it	ne
    33e2:	460a      	movne	r2, r1
    33e4:	e7e1      	b.n	33aa <boot_swap_type_multi+0x72>
    33e6:	4a07      	ldr	r2, [pc, #28]	; (3404 <boot_swap_type_multi+0xcc>)
    33e8:	e7df      	b.n	33aa <boot_swap_type_multi+0x72>
    33ea:	bf00      	nop
    33ec:	0000927f 	.word	0x0000927f
    33f0:	0000923b 	.word	0x0000923b
    33f4:	00009257 	.word	0x00009257
    33f8:	0000926a 	.word	0x0000926a
    33fc:	00009234 	.word	0x00009234
    3400:	00009245 	.word	0x00009245
    3404:	00009240 	.word	0x00009240

00003408 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3408:	4b05      	ldr	r3, [pc, #20]	; (3420 <nrf91_errata_14+0x18>)
    340a:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    340c:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    340e:	681b      	ldr	r3, [r3, #0]
    3410:	2b09      	cmp	r3, #9
    3412:	d103      	bne.n	341c <nrf91_errata_14+0x14>
            {
                switch(var2)
    3414:	1e43      	subs	r3, r0, #1
    3416:	4258      	negs	r0, r3
    3418:	4158      	adcs	r0, r3
    341a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    341c:	2000      	movs	r0, #0
    #endif
}
    341e:	4770      	bx	lr
    3420:	00ff0134 	.word	0x00ff0134

00003424 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK;
}

void SystemInit(void)
{
    3424:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3426:	4b47      	ldr	r3, [pc, #284]	; (3544 <SystemInit+0x120>)
            if (var1 == 0x09)
    3428:	681b      	ldr	r3, [r3, #0]
    342a:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    342c:	bf01      	itttt	eq
    342e:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
    3432:	2200      	moveq	r2, #0
    3434:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    3438:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    343c:	f7ff ffe4 	bl	3408 <nrf91_errata_14>
    3440:	b130      	cbz	r0, 3450 <SystemInit+0x2c>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    3442:	2301      	movs	r3, #1
    3444:	4a40      	ldr	r2, [pc, #256]	; (3548 <SystemInit+0x124>)
    3446:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    3448:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    344c:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3450:	4b3c      	ldr	r3, [pc, #240]	; (3544 <SystemInit+0x120>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    3452:	681b      	ldr	r3, [r3, #0]
    3454:	2b09      	cmp	r3, #9
    3456:	d107      	bne.n	3468 <SystemInit+0x44>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    3458:	4b3c      	ldr	r3, [pc, #240]	; (354c <SystemInit+0x128>)
            {
                switch(var2)
    345a:	681b      	ldr	r3, [r3, #0]
    345c:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    345e:	bf1e      	ittt	ne
    3460:	2201      	movne	r2, #1
    3462:	4b3b      	ldrne	r3, [pc, #236]	; (3550 <SystemInit+0x12c>)
    3464:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    3468:	f7ff ffce 	bl	3408 <nrf91_errata_14>
    346c:	b110      	cbz	r0, 3474 <SystemInit+0x50>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    346e:	220e      	movs	r2, #14
    3470:	4b38      	ldr	r3, [pc, #224]	; (3554 <SystemInit+0x130>)
    3472:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    3474:	4b33      	ldr	r3, [pc, #204]	; (3544 <SystemInit+0x120>)
            if (var1 == 0x09)
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	2b09      	cmp	r3, #9
    347a:	d104      	bne.n	3486 <SystemInit+0x62>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    347c:	2200      	movs	r2, #0
    347e:	4b36      	ldr	r3, [pc, #216]	; (3558 <SystemInit+0x134>)
    3480:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    3482:	2201      	movs	r2, #1
    3484:	605a      	str	r2, [r3, #4]
{
    3486:	2200      	movs	r2, #0
    3488:	00d3      	lsls	r3, r2, #3
    348a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    348e:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    3492:	3101      	adds	r1, #1
    3494:	d008      	beq.n	34a8 <SystemInit+0x84>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    3496:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    349a:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    349c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    34a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    34a4:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    34a6:	d1ef      	bne.n	3488 <SystemInit+0x64>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    34a8:	4b2c      	ldr	r3, [pc, #176]	; (355c <SystemInit+0x138>)
    34aa:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    34ac:	07d1      	lsls	r1, r2, #31
    34ae:	d53b      	bpl.n	3528 <SystemInit+0x104>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34b0:	4b2b      	ldr	r3, [pc, #172]	; (3560 <SystemInit+0x13c>)
    34b2:	4619      	mov	r1, r3
    34b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    34b8:	2a01      	cmp	r2, #1
    34ba:	d1fb      	bne.n	34b4 <SystemInit+0x90>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    34bc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34c0:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    34c4:	2b01      	cmp	r3, #1
    34c6:	d1fb      	bne.n	34c0 <SystemInit+0x9c>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    34c8:	4b24      	ldr	r3, [pc, #144]	; (355c <SystemInit+0x138>)
    34ca:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    34cc:	07d2      	lsls	r2, r2, #31
    34ce:	d508      	bpl.n	34e2 <SystemInit+0xbe>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    34d0:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34d2:	4923      	ldr	r1, [pc, #140]	; (3560 <SystemInit+0x13c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    34d4:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    34d8:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34da:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    34de:	2a01      	cmp	r2, #1
    34e0:	d1fb      	bne.n	34da <SystemInit+0xb6>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    34e2:	6a1a      	ldr	r2, [r3, #32]
    34e4:	3201      	adds	r2, #1
    34e6:	d10a      	bne.n	34fe <SystemInit+0xda>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    34e8:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    34ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    34ee:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    34f2:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    34f4:	4a1a      	ldr	r2, [pc, #104]	; (3560 <SystemInit+0x13c>)
    34f6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    34fa:	2b01      	cmp	r3, #1
    34fc:	d1fb      	bne.n	34f6 <SystemInit+0xd2>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    34fe:	2200      	movs	r2, #0
    3500:	4b17      	ldr	r3, [pc, #92]	; (3560 <SystemInit+0x13c>)
    3502:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    3506:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    350a:	2a01      	cmp	r2, #1
    350c:	d1fb      	bne.n	3506 <SystemInit+0xe2>
  __ASM volatile ("dsb 0xF":::"memory");
    350e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3512:	4914      	ldr	r1, [pc, #80]	; (3564 <SystemInit+0x140>)
    3514:	4b14      	ldr	r3, [pc, #80]	; (3568 <SystemInit+0x144>)
    3516:	68ca      	ldr	r2, [r1, #12]
    3518:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    351c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    351e:	60cb      	str	r3, [r1, #12]
    3520:	f3bf 8f4f 	dsb	sy
    __NOP();
    3524:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3526:	e7fd      	b.n	3524 <SystemInit+0x100>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    3528:	6a1b      	ldr	r3, [r3, #32]
    352a:	3301      	adds	r3, #1
    352c:	d0c0      	beq.n	34b0 <SystemInit+0x8c>
        SCB->NSACR |= (3UL << 10);
    352e:	4a0d      	ldr	r2, [pc, #52]	; (3564 <SystemInit+0x140>)
    3530:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    3534:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    3538:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    SystemCoreClock = __SYSTEM_CLOCK;
    353c:	4b0b      	ldr	r3, [pc, #44]	; (356c <SystemInit+0x148>)
    353e:	4a0c      	ldr	r2, [pc, #48]	; (3570 <SystemInit+0x14c>)
    3540:	601a      	str	r2, [r3, #0]
}
    3542:	bd08      	pop	{r3, pc}
    3544:	00ff0130 	.word	0x00ff0130
    3548:	50004a38 	.word	0x50004a38
    354c:	00ff0134 	.word	0x00ff0134
    3550:	50004000 	.word	0x50004000
    3554:	5003aee4 	.word	0x5003aee4
    3558:	5000470c 	.word	0x5000470c
    355c:	00ff8000 	.word	0x00ff8000
    3560:	50039000 	.word	0x50039000
    3564:	e000ed00 	.word	0xe000ed00
    3568:	05fa0004 	.word	0x05fa0004
    356c:	2001458c 	.word	0x2001458c
    3570:	03d09000 	.word	0x03d09000

00003574 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3574:	4b04      	ldr	r3, [pc, #16]	; (3588 <nrfx_clock_init+0x14>)
    3576:	791a      	ldrb	r2, [r3, #4]
    3578:	b922      	cbnz	r2, 3584 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    357a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    357c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    357e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3580:	4802      	ldr	r0, [pc, #8]	; (358c <nrfx_clock_init+0x18>)
    3582:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3584:	4802      	ldr	r0, [pc, #8]	; (3590 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3586:	4770      	bx	lr
    3588:	20015580 	.word	0x20015580
    358c:	0bad0000 	.word	0x0bad0000
    3590:	0bad000c 	.word	0x0bad000c

00003594 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3594:	b110      	cbz	r0, 359c <nrfx_clock_start+0x8>
    3596:	2801      	cmp	r0, #1
    3598:	d020      	beq.n	35dc <nrfx_clock_start+0x48>
    359a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    359c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    35a0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35a4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    35a8:	03c9      	lsls	r1, r1, #15
    35aa:	d511      	bpl.n	35d0 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    35ac:	f003 0303 	and.w	r3, r3, #3
    35b0:	2b02      	cmp	r3, #2
    35b2:	d10d      	bne.n	35d0 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    35b4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35b8:	2200      	movs	r2, #0
    35ba:	4b0d      	ldr	r3, [pc, #52]	; (35f0 <nrfx_clock_start+0x5c>)
    35bc:	601a      	str	r2, [r3, #0]
    35be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    35c0:	2202      	movs	r2, #2
    35c2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35ca:	2201      	movs	r2, #1
    35cc:	609a      	str	r2, [r3, #8]
}
    35ce:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    35d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35d4:	2201      	movs	r2, #1
    35d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    35da:	e7ed      	b.n	35b8 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    35dc:	2200      	movs	r2, #0
    35de:	4b05      	ldr	r3, [pc, #20]	; (35f4 <nrfx_clock_start+0x60>)
    35e0:	601a      	str	r2, [r3, #0]
    35e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    35e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    35e8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35ec:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    35ee:	4770      	bx	lr
    35f0:	50005104 	.word	0x50005104
    35f4:	50005100 	.word	0x50005100

000035f8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    35f8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    35fa:	b110      	cbz	r0, 3602 <nrfx_clock_stop+0xa>
    35fc:	2801      	cmp	r0, #1
    35fe:	d018      	beq.n	3632 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    3600:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    3602:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3606:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3608:	2101      	movs	r1, #1
    360a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    360e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
    3610:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3614:	4a15      	ldr	r2, [pc, #84]	; (366c <nrfx_clock_stop+0x74>)
    3616:	6010      	str	r0, [r2, #0]
    3618:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    361a:	4a15      	ldr	r2, [pc, #84]	; (3670 <nrfx_clock_stop+0x78>)
    361c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    361e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3622:	03db      	lsls	r3, r3, #15
    3624:	d5ec      	bpl.n	3600 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3626:	2001      	movs	r0, #1
    3628:	f002 ff6d 	bl	6506 <nrfx_busy_wait>
    362c:	3d01      	subs	r5, #1
    362e:	d1f6      	bne.n	361e <nrfx_clock_stop+0x26>
    3630:	e7e6      	b.n	3600 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
    3632:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3636:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3638:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    363c:	4b0d      	ldr	r3, [pc, #52]	; (3674 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
    363e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3642:	601a      	str	r2, [r3, #0]
    3644:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3646:	4b0c      	ldr	r3, [pc, #48]	; (3678 <nrfx_clock_stop+0x80>)
    3648:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    364a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    364e:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3652:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3656:	03d2      	lsls	r2, r2, #15
    3658:	d5d2      	bpl.n	3600 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    365a:	2b00      	cmp	r3, #0
    365c:	d0d0      	beq.n	3600 <nrfx_clock_stop+0x8>
    365e:	2001      	movs	r0, #1
    3660:	f002 ff51 	bl	6506 <nrfx_busy_wait>
    3664:	3d01      	subs	r5, #1
    3666:	d1f0      	bne.n	364a <nrfx_clock_stop+0x52>
    3668:	e7ca      	b.n	3600 <nrfx_clock_stop+0x8>
    366a:	bf00      	nop
    366c:	50005104 	.word	0x50005104
    3670:	5000500c 	.word	0x5000500c
    3674:	50005100 	.word	0x50005100
    3678:	50005004 	.word	0x50005004

0000367c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    367c:	4b16      	ldr	r3, [pc, #88]	; (36d8 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    367e:	b510      	push	{r4, lr}
    3680:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3682:	b152      	cbz	r2, 369a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3684:	2000      	movs	r0, #0
    3686:	6018      	str	r0, [r3, #0]
    3688:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    368a:	2201      	movs	r2, #1
    368c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3690:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3694:	4b11      	ldr	r3, [pc, #68]	; (36dc <nrfx_power_clock_irq_handler+0x60>)
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    369a:	4b11      	ldr	r3, [pc, #68]	; (36e0 <nrfx_power_clock_irq_handler+0x64>)
    369c:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    369e:	b18a      	cbz	r2, 36c4 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36a0:	2200      	movs	r2, #0
    36a2:	601a      	str	r2, [r3, #0]
    36a4:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    36a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    36aa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    36b2:	f002 0203 	and.w	r2, r2, #3
    36b6:	2a01      	cmp	r2, #1
    36b8:	f04f 0102 	mov.w	r1, #2
    36bc:	d103      	bne.n	36c6 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36be:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36c2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    36c4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    36c6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    36ca:	4b04      	ldr	r3, [pc, #16]	; (36dc <nrfx_power_clock_irq_handler+0x60>)
    36cc:	2001      	movs	r0, #1
}
    36ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    36d2:	681b      	ldr	r3, [r3, #0]
    36d4:	4718      	bx	r3
    36d6:	bf00      	nop
    36d8:	50005100 	.word	0x50005100
    36dc:	20015580 	.word	0x20015580
    36e0:	50005104 	.word	0x50005104

000036e4 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    36e4:	4a0b      	ldr	r2, [pc, #44]	; (3714 <nrfx_dppi_channel_alloc+0x30>)
{
    36e6:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    36e8:	6816      	ldr	r6, [r2, #0]
    36ea:	43f1      	mvns	r1, r6
    36ec:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
    36ee:	b171      	cbz	r1, 370e <nrfx_dppi_channel_alloc+0x2a>
    36f0:	2500      	movs	r5, #0
    36f2:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    36f4:	fa21 f304 	lsr.w	r3, r1, r4
    36f8:	07db      	lsls	r3, r3, #31
    36fa:	f105 0501 	add.w	r5, r5, #1
    36fe:	d5f8      	bpl.n	36f2 <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    3700:	2301      	movs	r3, #1
    3702:	40a3      	lsls	r3, r4
    3704:	4333      	orrs	r3, r6
    *p_channel = channel;
    3706:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    3708:	4803      	ldr	r0, [pc, #12]	; (3718 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    370a:	6013      	str	r3, [r2, #0]
}
    370c:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    370e:	4803      	ldr	r0, [pc, #12]	; (371c <nrfx_dppi_channel_alloc+0x38>)
    3710:	e7fc      	b.n	370c <nrfx_dppi_channel_alloc+0x28>
    3712:	bf00      	nop
    3714:	20015588 	.word	0x20015588
    3718:	0bad0000 	.word	0x0bad0000
    371c:	0bad0002 	.word	0x0bad0002

00003720 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    3720:	2301      	movs	r3, #1
    3722:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    3726:	f010 0fff 	tst.w	r0, #255	; 0xff
    372a:	d012      	beq.n	3752 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    372c:	f04f 0320 	mov.w	r3, #32
    3730:	f3ef 8111 	mrs	r1, BASEPRI
    3734:	f383 8811 	msr	BASEPRI, r3
    3738:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    373c:	4a06      	ldr	r2, [pc, #24]	; (3758 <nrfx_gpiote_channel_free+0x38>)
    373e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    3740:	ea23 0000 	bic.w	r0, r3, r0
    3744:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    3746:	f381 8811 	msr	BASEPRI, r1
    374a:	f3bf 8f6f 	isb	sy
    374e:	4803      	ldr	r0, [pc, #12]	; (375c <nrfx_gpiote_channel_free+0x3c>)
    3750:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    3752:	4803      	ldr	r0, [pc, #12]	; (3760 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3754:	4770      	bx	lr
    3756:	bf00      	nop
    3758:	2001558c 	.word	0x2001558c
    375c:	0bad0000 	.word	0x0bad0000
    3760:	0bad0004 	.word	0x0bad0004

00003764 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    3764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    3768:	22ff      	movs	r2, #255	; 0xff
{
    376a:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    376c:	2601      	movs	r6, #1
{
    376e:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    3770:	f8df e058 	ldr.w	lr, [pc, #88]	; 37cc <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    3774:	4814      	ldr	r0, [pc, #80]	; (37c8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    3776:	f8df 8058 	ldr.w	r8, [pc, #88]	; 37d0 <nrfx_gpiote_channel_alloc+0x6c>
    377a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    377c:	f04f 0120 	mov.w	r1, #32
    3780:	f3ef 8c11 	mrs	ip, BASEPRI
    3784:	f381 8811 	msr	BASEPRI, r1
    3788:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    378c:	fa22 f103 	lsr.w	r1, r2, r3
    3790:	07c9      	lsls	r1, r1, #31
    3792:	d50a      	bpl.n	37aa <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    3794:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    3798:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    379c:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    379e:	bf01      	itttt	eq
    37a0:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    37a2:	4339      	orreq	r1, r7
    37a4:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
    37a8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    37aa:	f38c 8811 	msr	BASEPRI, ip
    37ae:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    37b2:	4540      	cmp	r0, r8
    37b4:	d005      	beq.n	37c2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    37b6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    37ba:	439a      	bics	r2, r3
    37bc:	f104 0401 	add.w	r4, r4, #1
    37c0:	d1db      	bne.n	377a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    37c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37c6:	bf00      	nop
    37c8:	0bad0002 	.word	0x0bad0002
    37cc:	2001558c 	.word	0x2001558c
    37d0:	0bad0000 	.word	0x0bad0000

000037d4 <nvmc_readonly_mode_set>:

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
    37d4:	2200      	movs	r2, #0
    37d6:	4b03      	ldr	r3, [pc, #12]	; (37e4 <nvmc_readonly_mode_set+0x10>)
    37d8:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    37dc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    37e0:	4770      	bx	lr
    37e2:	bf00      	nop
    37e4:	50039000 	.word	0x50039000

000037e8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    37e8:	b508      	push	{r3, lr}
    return !(addr % flash_page_size_get());
    37ea:	f3c0 030b 	ubfx	r3, r0, #0, #12
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    37ee:	b983      	cbnz	r3, 3812 <nrfx_nvmc_page_erase+0x2a>
    p_reg->CONFIGNS = (uint32_t)mode;
    37f0:	2202      	movs	r2, #2
    37f2:	4b09      	ldr	r3, [pc, #36]	; (3818 <nrfx_nvmc_page_erase+0x30>)
    37f4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    37f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
    37fc:	f04f 32ff 	mov.w	r2, #4294967295
    3800:	6002      	str	r2, [r0, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3802:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    3806:	07d2      	lsls	r2, r2, #31
    3808:	d5fb      	bpl.n	3802 <nrfx_nvmc_page_erase+0x1a>
    {}
    nvmc_readonly_mode_set();
    380a:	f7ff ffe3 	bl	37d4 <nvmc_readonly_mode_set>

    return NRFX_SUCCESS;
    380e:	4803      	ldr	r0, [pc, #12]	; (381c <nrfx_nvmc_page_erase+0x34>)
}
    3810:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_ADDR;
    3812:	4803      	ldr	r0, [pc, #12]	; (3820 <nrfx_nvmc_page_erase+0x38>)
    3814:	e7fc      	b.n	3810 <nrfx_nvmc_page_erase+0x28>
    3816:	bf00      	nop
    3818:	50039000 	.word	0x50039000
    381c:	0bad0000 	.word	0x0bad0000
    3820:	0bad000a 	.word	0x0bad000a

00003824 <nrfx_nvmc_word_write>:
    p_reg->CONFIGNS = (uint32_t)mode;
    3824:	2201      	movs	r2, #1
    3826:	4b07      	ldr	r3, [pc, #28]	; (3844 <nrfx_nvmc_word_write+0x20>)
    3828:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    p_reg->CONFIG = (uint32_t)mode;
    382c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
    3830:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    3834:	07d2      	lsls	r2, r2, #31
    3836:	d5fb      	bpl.n	3830 <nrfx_nvmc_word_write+0xc>
    *(volatile uint32_t *)addr = value;
    3838:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    383a:	f3bf 8f5f 	dmb	sy

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
    383e:	f7ff bfc9 	b.w	37d4 <nvmc_readonly_mode_set>
    3842:	bf00      	nop
    3844:	50039000 	.word	0x50039000

00003848 <verify_header>:
}
#endif /* MBEDTLS_MEMORY_DEBUG */

static int verify_header( memory_header *hdr )
{
    if( hdr->magic1 != MAGIC1 )
    3848:	6801      	ldr	r1, [r0, #0]
    384a:	4a0e      	ldr	r2, [pc, #56]	; (3884 <verify_header+0x3c>)
{
    384c:	4603      	mov	r3, r0
    if( hdr->magic1 != MAGIC1 )
    384e:	4291      	cmp	r1, r2
    3850:	d115      	bne.n	387e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC1 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->magic2 != MAGIC2 )
    3852:	69c1      	ldr	r1, [r0, #28]
    3854:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    3858:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    385c:	4291      	cmp	r1, r2
    385e:	d10e      	bne.n	387e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: MAGIC2 mismatch\n" );
#endif
        return( 1 );
    }

    if( hdr->alloc > 1 )
    3860:	6882      	ldr	r2, [r0, #8]
    3862:	2a01      	cmp	r2, #1
    3864:	d80b      	bhi.n	387e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: alloc has illegal value\n" );
#endif
        return( 1 );
    }

    if( hdr->prev != NULL && hdr->prev == hdr->next )
    3866:	68c2      	ldr	r2, [r0, #12]
    3868:	b112      	cbz	r2, 3870 <verify_header+0x28>
    386a:	6901      	ldr	r1, [r0, #16]
    386c:	428a      	cmp	r2, r1
    386e:	d006      	beq.n	387e <verify_header+0x36>
        mbedtls_fprintf( stderr, "FATAL: prev == next\n" );
#endif
        return( 1 );
    }

    if( hdr->prev_free != NULL && hdr->prev_free == hdr->next_free )
    3870:	6958      	ldr	r0, [r3, #20]
    3872:	b128      	cbz	r0, 3880 <verify_header+0x38>
    3874:	699b      	ldr	r3, [r3, #24]
    3876:	1a1b      	subs	r3, r3, r0
    3878:	4258      	negs	r0, r3
    387a:	4158      	adcs	r0, r3
    387c:	4770      	bx	lr
        return( 1 );
    387e:	2001      	movs	r0, #1
#endif
        return( 1 );
    }

    return( 0 );
}
    3880:	4770      	bx	lr
    3882:	bf00      	nop
    3884:	ff00aa55 	.word	0xff00aa55

00003888 <verify_chain>:

static int verify_chain( void )
{
    memory_header *prv = heap.first, *cur;
    3888:	4b0d      	ldr	r3, [pc, #52]	; (38c0 <verify_chain+0x38>)
{
    388a:	b570      	push	{r4, r5, r6, lr}
    memory_header *prv = heap.first, *cur;
    388c:	689e      	ldr	r6, [r3, #8]

    if( prv == NULL || verify_header( prv ) != 0 )
    388e:	b1a6      	cbz	r6, 38ba <verify_chain+0x32>
    3890:	4630      	mov	r0, r6
    3892:	f7ff ffd9 	bl	3848 <verify_header>
    3896:	4604      	mov	r4, r0
    3898:	b978      	cbnz	r0, 38ba <verify_chain+0x32>
                                  "failed\n" );
#endif
        return( 1 );
    }

    if( heap.first->prev != NULL )
    389a:	68f3      	ldr	r3, [r6, #12]
    389c:	b96b      	cbnz	r3, 38ba <verify_chain+0x32>
                                  "first->prev != NULL\n" );
#endif
        return( 1 );
    }

    cur = heap.first->next;
    389e:	6935      	ldr	r5, [r6, #16]

    while( cur != NULL )
    38a0:	b90d      	cbnz	r5, 38a6 <verify_chain+0x1e>
        prv = cur;
        cur = cur->next;
    }

    return( 0 );
}
    38a2:	4620      	mov	r0, r4
    38a4:	bd70      	pop	{r4, r5, r6, pc}
        if( verify_header( cur ) != 0 )
    38a6:	4628      	mov	r0, r5
    38a8:	f7ff ffce 	bl	3848 <verify_header>
    38ac:	b928      	cbnz	r0, 38ba <verify_chain+0x32>
        if( cur->prev != prv )
    38ae:	68eb      	ldr	r3, [r5, #12]
    38b0:	42b3      	cmp	r3, r6
    38b2:	d102      	bne.n	38ba <verify_chain+0x32>
        cur = cur->next;
    38b4:	462e      	mov	r6, r5
    38b6:	692d      	ldr	r5, [r5, #16]
    38b8:	e7f2      	b.n	38a0 <verify_chain+0x18>
        return( 1 );
    38ba:	2401      	movs	r4, #1
    38bc:	e7f1      	b.n	38a2 <verify_chain+0x1a>
    38be:	bf00      	nop
    38c0:	200155dc 	.word	0x200155dc

000038c4 <buffer_alloc_calloc>:

static void *buffer_alloc_calloc( size_t n, size_t size )
{
    38c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if defined(MBEDTLS_MEMORY_BACKTRACE)
    void *trace_buffer[MAX_BT];
    size_t trace_cnt;
#endif

    if( heap.buf == NULL || heap.first == NULL )
    38c8:	4d40      	ldr	r5, [pc, #256]	; (39cc <buffer_alloc_calloc+0x108>)
    38ca:	682c      	ldr	r4, [r5, #0]
    38cc:	b1d4      	cbz	r4, 3904 <buffer_alloc_calloc+0x40>
    38ce:	68ac      	ldr	r4, [r5, #8]
    38d0:	b1c4      	cbz	r4, 3904 <buffer_alloc_calloc+0x40>
        return( NULL );

    original_len = len = n * size;

    if( n == 0 || size == 0 || len / n != size )
    38d2:	2800      	cmp	r0, #0
    38d4:	d04d      	beq.n	3972 <buffer_alloc_calloc+0xae>
    38d6:	2900      	cmp	r1, #0
    38d8:	d04b      	beq.n	3972 <buffer_alloc_calloc+0xae>
    original_len = len = n * size;
    38da:	fb01 f600 	mul.w	r6, r1, r0
    if( n == 0 || size == 0 || len / n != size )
    38de:	fbb6 f0f0 	udiv	r0, r6, r0
    38e2:	4288      	cmp	r0, r1
    38e4:	d145      	bne.n	3972 <buffer_alloc_calloc+0xae>
        return( NULL );
    else if( len > (size_t)-MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    38e6:	1d30      	adds	r0, r6, #4
    38e8:	d843      	bhi.n	3972 <buffer_alloc_calloc+0xae>
        return( NULL );

    if( len % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    38ea:	07b1      	lsls	r1, r6, #30
    38ec:	d00d      	beq.n	390a <buffer_alloc_calloc+0x46>
    {
        len -= len % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    38ee:	f026 0703 	bic.w	r7, r6, #3
        len += MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    38f2:	3704      	adds	r7, #4
    memory_header *new, *cur = heap.first_free;
    38f4:	68ec      	ldr	r4, [r5, #12]
    38f6:	e003      	b.n	3900 <buffer_alloc_calloc+0x3c>

    // Find block that fits
    //
    while( cur != NULL )
    {
        if( cur->size >= len )
    38f8:	6863      	ldr	r3, [r4, #4]
    38fa:	42bb      	cmp	r3, r7
    38fc:	d23b      	bcs.n	3976 <buffer_alloc_calloc+0xb2>
            break;

        cur = cur->next_free;
    38fe:	69a4      	ldr	r4, [r4, #24]
    while( cur != NULL )
    3900:	2c00      	cmp	r4, #0
    3902:	d1f9      	bne.n	38f8 <buffer_alloc_calloc+0x34>

    ret = (unsigned char *) cur + sizeof( memory_header );
    memset( ret, 0, original_len );

    return( ret );
}
    3904:	4620      	mov	r0, r4
    3906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    390a:	4637      	mov	r7, r6
    390c:	e7f2      	b.n	38f4 <buffer_alloc_calloc+0x30>
            heap.first_free = cur->next_free;
    390e:	60e8      	str	r0, [r5, #12]
    3910:	e044      	b.n	399c <buffer_alloc_calloc+0xd8>
    p = ( (unsigned char *) cur ) + sizeof(memory_header) + len;
    3912:	f107 0c20 	add.w	ip, r7, #32
    3916:	eb04 030c 	add.w	r3, r4, ip
    new->size = cur->size - len - sizeof(memory_header);
    391a:	3920      	subs	r1, #32
    391c:	6059      	str	r1, [r3, #4]
    new->alloc = 0;
    391e:	2100      	movs	r1, #0
    new->magic1 = MAGIC1;
    3920:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 39d4 <buffer_alloc_calloc+0x110>
    new->prev = cur;
    3924:	e9c3 1402 	strd	r1, r4, [r3, #8]
    new->next = cur->next;
    3928:	6921      	ldr	r1, [r4, #16]
    392a:	6119      	str	r1, [r3, #16]
    new->magic1 = MAGIC1;
    392c:	f844 e00c 	str.w	lr, [r4, ip]
    new->magic2 = MAGIC2;
    3930:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 39d8 <buffer_alloc_calloc+0x114>
    3934:	f8c3 c01c 	str.w	ip, [r3, #28]
    if( new->next != NULL )
    3938:	b101      	cbz	r1, 393c <buffer_alloc_calloc+0x78>
        new->next->prev = new;
    393a:	60cb      	str	r3, [r1, #12]
    new->next_free = cur->next_free;
    393c:	e9c3 2005 	strd	r2, r0, [r3, #20]
    if( new->prev_free != NULL )
    3940:	b1aa      	cbz	r2, 396e <buffer_alloc_calloc+0xaa>
        new->prev_free->next_free = new;
    3942:	6193      	str	r3, [r2, #24]
    if( new->next_free != NULL )
    3944:	699a      	ldr	r2, [r3, #24]
    3946:	b102      	cbz	r2, 394a <buffer_alloc_calloc+0x86>
        new->next_free->prev_free = new;
    3948:	6153      	str	r3, [r2, #20]
    cur->next = new;
    394a:	6123      	str	r3, [r4, #16]
    cur->prev_free = NULL;
    394c:	2300      	movs	r3, #0
    cur->alloc = 1;
    394e:	f04f 0901 	mov.w	r9, #1
    cur->next_free = NULL;
    3952:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    3956:	692b      	ldr	r3, [r5, #16]
    cur->size = len;
    3958:	e9c4 7901 	strd	r7, r9, [r4, #4]
    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    395c:	07db      	lsls	r3, r3, #31
    395e:	d52d      	bpl.n	39bc <buffer_alloc_calloc+0xf8>
    3960:	f7ff ff92 	bl	3888 <verify_chain>
    3964:	b350      	cbz	r0, 39bc <buffer_alloc_calloc+0xf8>
        mbedtls_exit( 1 );
    3966:	4b1a      	ldr	r3, [pc, #104]	; (39d0 <buffer_alloc_calloc+0x10c>)
    3968:	4648      	mov	r0, r9
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	e025      	b.n	39ba <buffer_alloc_calloc+0xf6>
        heap.first_free = new;
    396e:	60eb      	str	r3, [r5, #12]
    3970:	e7e8      	b.n	3944 <buffer_alloc_calloc+0x80>
        return( NULL );
    3972:	2400      	movs	r4, #0
    3974:	e7c6      	b.n	3904 <buffer_alloc_calloc+0x40>
    if( cur->alloc != 0 )
    3976:	68a3      	ldr	r3, [r4, #8]
    3978:	b11b      	cbz	r3, 3982 <buffer_alloc_calloc+0xbe>
        mbedtls_exit( 1 );
    397a:	4b15      	ldr	r3, [pc, #84]	; (39d0 <buffer_alloc_calloc+0x10c>)
    397c:	2001      	movs	r0, #1
    397e:	681b      	ldr	r3, [r3, #0]
    3980:	4798      	blx	r3
    if( cur->size - len < sizeof(memory_header) +
    3982:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
    3986:	6861      	ldr	r1, [r4, #4]
    3988:	f104 0820 	add.w	r8, r4, #32
    398c:	1bc9      	subs	r1, r1, r7
    398e:	2923      	cmp	r1, #35	; 0x23
    3990:	d8bf      	bhi.n	3912 <buffer_alloc_calloc+0x4e>
        cur->alloc = 1;
    3992:	2301      	movs	r3, #1
    3994:	60a3      	str	r3, [r4, #8]
        if( cur->prev_free != NULL )
    3996:	2a00      	cmp	r2, #0
    3998:	d0b9      	beq.n	390e <buffer_alloc_calloc+0x4a>
            cur->prev_free->next_free = cur->next_free;
    399a:	6190      	str	r0, [r2, #24]
        if( cur->next_free != NULL )
    399c:	69a3      	ldr	r3, [r4, #24]
    399e:	b103      	cbz	r3, 39a2 <buffer_alloc_calloc+0xde>
            cur->next_free->prev_free = cur->prev_free;
    39a0:	615a      	str	r2, [r3, #20]
        cur->prev_free = NULL;
    39a2:	2300      	movs	r3, #0
        cur->next_free = NULL;
    39a4:	e9c4 3305 	strd	r3, r3, [r4, #20]
        if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_ALLOC ) && verify_chain() != 0 )
    39a8:	692b      	ldr	r3, [r5, #16]
    39aa:	07da      	lsls	r2, r3, #31
    39ac:	d506      	bpl.n	39bc <buffer_alloc_calloc+0xf8>
    39ae:	f7ff ff6b 	bl	3888 <verify_chain>
    39b2:	b118      	cbz	r0, 39bc <buffer_alloc_calloc+0xf8>
            mbedtls_exit( 1 );
    39b4:	2001      	movs	r0, #1
    39b6:	4b06      	ldr	r3, [pc, #24]	; (39d0 <buffer_alloc_calloc+0x10c>)
    39b8:	681b      	ldr	r3, [r3, #0]
        mbedtls_exit( 1 );
    39ba:	4798      	blx	r3
    memset( ret, 0, original_len );
    39bc:	4632      	mov	r2, r6
    39be:	2100      	movs	r1, #0
    39c0:	4640      	mov	r0, r8
    ret = (unsigned char *) cur + sizeof( memory_header );
    39c2:	4644      	mov	r4, r8
    memset( ret, 0, original_len );
    39c4:	f002 fb02 	bl	5fcc <memset>
    return( ret );
    39c8:	e79c      	b.n	3904 <buffer_alloc_calloc+0x40>
    39ca:	bf00      	nop
    39cc:	200155dc 	.word	0x200155dc
    39d0:	20014594 	.word	0x20014594
    39d4:	ff00aa55 	.word	0xff00aa55
    39d8:	ee119966 	.word	0xee119966

000039dc <buffer_alloc_free>:

static void buffer_alloc_free( void *ptr )
{
    39dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    memory_header *hdr, *old = NULL;
    unsigned char *p = (unsigned char *) ptr;

    if( ptr == NULL || heap.buf == NULL || heap.first == NULL )
    39e0:	4605      	mov	r5, r0
    39e2:	2800      	cmp	r0, #0
    39e4:	d07c      	beq.n	3ae0 <buffer_alloc_free+0x104>
    39e6:	4e3f      	ldr	r6, [pc, #252]	; (3ae4 <buffer_alloc_free+0x108>)
    39e8:	6833      	ldr	r3, [r6, #0]
    39ea:	2b00      	cmp	r3, #0
    39ec:	d078      	beq.n	3ae0 <buffer_alloc_free+0x104>
    39ee:	68b2      	ldr	r2, [r6, #8]
    39f0:	2a00      	cmp	r2, #0
    39f2:	d075      	beq.n	3ae0 <buffer_alloc_free+0x104>
        return;

    if( p < heap.buf || p >= heap.buf + heap.len )
    39f4:	4283      	cmp	r3, r0
    39f6:	d803      	bhi.n	3a00 <buffer_alloc_free+0x24>
    39f8:	6872      	ldr	r2, [r6, #4]
    39fa:	4413      	add	r3, r2
    39fc:	4298      	cmp	r0, r3
    39fe:	d303      	bcc.n	3a08 <buffer_alloc_free+0x2c>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() outside of managed "
                                  "space\n" );
#endif
        mbedtls_exit( 1 );
    3a00:	4b39      	ldr	r3, [pc, #228]	; (3ae8 <buffer_alloc_free+0x10c>)
    3a02:	2001      	movs	r0, #1
    3a04:	681b      	ldr	r3, [r3, #0]
    3a06:	4798      	blx	r3
    }

    p -= sizeof(memory_header);
    3a08:	f1a5 0420 	sub.w	r4, r5, #32
    hdr = (memory_header *) p;

    if( verify_header( hdr ) != 0 )
    3a0c:	4620      	mov	r0, r4
    3a0e:	f7ff ff1b 	bl	3848 <verify_header>
    3a12:	b118      	cbz	r0, 3a1c <buffer_alloc_free+0x40>
        mbedtls_exit( 1 );
    3a14:	4b34      	ldr	r3, [pc, #208]	; (3ae8 <buffer_alloc_free+0x10c>)
    3a16:	2001      	movs	r0, #1
    3a18:	681b      	ldr	r3, [r3, #0]
    3a1a:	4798      	blx	r3

    if( hdr->alloc != 1 )
    3a1c:	f855 3c18 	ldr.w	r3, [r5, #-24]
    3a20:	2b01      	cmp	r3, #1
    3a22:	d003      	beq.n	3a2c <buffer_alloc_free+0x50>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        mbedtls_fprintf( stderr, "FATAL: mbedtls_free() on unallocated "
                                  "data\n" );
#endif
        mbedtls_exit( 1 );
    3a24:	4b30      	ldr	r3, [pc, #192]	; (3ae8 <buffer_alloc_free+0x10c>)
    3a26:	2001      	movs	r0, #1
    3a28:	681b      	ldr	r3, [r3, #0]
    3a2a:	4798      	blx	r3
    }

    hdr->alloc = 0;
    3a2c:	2300      	movs	r3, #0
    hdr->trace_count = 0;
#endif

    // Regroup with block before
    //
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3a2e:	f855 7c14 	ldr.w	r7, [r5, #-20]
    hdr->alloc = 0;
    3a32:	f845 3c18 	str.w	r3, [r5, #-24]
    if( hdr->prev != NULL && hdr->prev->alloc == 0 )
    3a36:	b1af      	cbz	r7, 3a64 <buffer_alloc_free+0x88>
    3a38:	68ba      	ldr	r2, [r7, #8]
    3a3a:	b992      	cbnz	r2, 3a62 <buffer_alloc_free+0x86>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->prev->size += sizeof(memory_header) + hdr->size;
    3a3c:	f855 3c1c 	ldr.w	r3, [r5, #-28]
    3a40:	f103 0220 	add.w	r2, r3, #32
    3a44:	687b      	ldr	r3, [r7, #4]
    3a46:	4413      	add	r3, r2
    3a48:	607b      	str	r3, [r7, #4]
        hdr->prev->next = hdr->next;
    3a4a:	f855 3c10 	ldr.w	r3, [r5, #-16]
    3a4e:	613b      	str	r3, [r7, #16]
        old = hdr;
        hdr = hdr->prev;

        if( hdr->next != NULL )
    3a50:	b103      	cbz	r3, 3a54 <buffer_alloc_free+0x78>
            hdr->next->prev = hdr;
    3a52:	60df      	str	r7, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3a54:	4620      	mov	r0, r4
    3a56:	2220      	movs	r2, #32
    3a58:	2100      	movs	r1, #0
    3a5a:	f002 fab7 	bl	5fcc <memset>
    3a5e:	4623      	mov	r3, r4
    3a60:	463c      	mov	r4, r7
    memory_header *hdr, *old = NULL;
    3a62:	461f      	mov	r7, r3
    }

    // Regroup with block after
    //
    if( hdr->next != NULL && hdr->next->alloc == 0 )
    3a64:	6920      	ldr	r0, [r4, #16]
    3a66:	2800      	cmp	r0, #0
    3a68:	d032      	beq.n	3ad0 <buffer_alloc_free+0xf4>
    3a6a:	6883      	ldr	r3, [r0, #8]
    3a6c:	2b00      	cmp	r3, #0
    3a6e:	d12f      	bne.n	3ad0 <buffer_alloc_free+0xf4>
    {
#if defined(MBEDTLS_MEMORY_DEBUG)
        heap.header_count--;
#endif
        hdr->size += sizeof(memory_header) + hdr->next->size;
    3a70:	6863      	ldr	r3, [r4, #4]
    3a72:	6842      	ldr	r2, [r0, #4]
    3a74:	3320      	adds	r3, #32
    3a76:	4413      	add	r3, r2
    3a78:	6063      	str	r3, [r4, #4]
        old = hdr->next;
        hdr->next = hdr->next->next;
    3a7a:	6903      	ldr	r3, [r0, #16]
    3a7c:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
    3a80:	6123      	str	r3, [r4, #16]

        if( hdr->prev_free != NULL || hdr->next_free != NULL )
    3a82:	b9da      	cbnz	r2, 3abc <buffer_alloc_free+0xe0>
    3a84:	bb01      	cbnz	r1, 3ac8 <buffer_alloc_free+0xec>

            if( hdr->next_free != NULL )
                hdr->next_free->prev_free = hdr->prev_free;
        }

        hdr->prev_free = old->prev_free;
    3a86:	6942      	ldr	r2, [r0, #20]
        hdr->next_free = old->next_free;
    3a88:	6981      	ldr	r1, [r0, #24]
        hdr->prev_free = old->prev_free;
    3a8a:	6162      	str	r2, [r4, #20]
        hdr->next_free = old->next_free;
    3a8c:	61a1      	str	r1, [r4, #24]

        if( hdr->prev_free != NULL )
    3a8e:	b1ea      	cbz	r2, 3acc <buffer_alloc_free+0xf0>
            hdr->prev_free->next_free = hdr;
    3a90:	6194      	str	r4, [r2, #24]
        else
            heap.first_free = hdr;

        if( hdr->next_free != NULL )
    3a92:	69a2      	ldr	r2, [r4, #24]
    3a94:	b102      	cbz	r2, 3a98 <buffer_alloc_free+0xbc>
            hdr->next_free->prev_free = hdr;
    3a96:	6154      	str	r4, [r2, #20]

        if( hdr->next != NULL )
    3a98:	b103      	cbz	r3, 3a9c <buffer_alloc_free+0xc0>
            hdr->next->prev = hdr;
    3a9a:	60dc      	str	r4, [r3, #12]

        memset( old, 0, sizeof(memory_header) );
    3a9c:	2220      	movs	r2, #32
    3a9e:	2100      	movs	r1, #0
    3aa0:	f002 fa94 	bl	5fcc <memset>
        if( heap.first_free != NULL )
            heap.first_free->prev_free = hdr;
        heap.first_free = hdr;
    }

    if( ( heap.verify & MBEDTLS_MEMORY_VERIFY_FREE ) && verify_chain() != 0 )
    3aa4:	6933      	ldr	r3, [r6, #16]
    3aa6:	079b      	lsls	r3, r3, #30
    3aa8:	d51a      	bpl.n	3ae0 <buffer_alloc_free+0x104>
    3aaa:	f7ff feed 	bl	3888 <verify_chain>
    3aae:	b1b8      	cbz	r0, 3ae0 <buffer_alloc_free+0x104>
        mbedtls_exit( 1 );
}
    3ab0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        mbedtls_exit( 1 );
    3ab4:	4b0c      	ldr	r3, [pc, #48]	; (3ae8 <buffer_alloc_free+0x10c>)
    3ab6:	2001      	movs	r0, #1
    3ab8:	681b      	ldr	r3, [r3, #0]
    3aba:	4718      	bx	r3
                hdr->prev_free->next_free = hdr->next_free;
    3abc:	6191      	str	r1, [r2, #24]
            if( hdr->next_free != NULL )
    3abe:	69a1      	ldr	r1, [r4, #24]
    3ac0:	2900      	cmp	r1, #0
    3ac2:	d0e0      	beq.n	3a86 <buffer_alloc_free+0xaa>
                hdr->next_free->prev_free = hdr->prev_free;
    3ac4:	614a      	str	r2, [r1, #20]
    3ac6:	e7de      	b.n	3a86 <buffer_alloc_free+0xaa>
                heap.first_free = hdr->next_free;
    3ac8:	60f1      	str	r1, [r6, #12]
    3aca:	e7f8      	b.n	3abe <buffer_alloc_free+0xe2>
            heap.first_free = hdr;
    3acc:	60f4      	str	r4, [r6, #12]
    3ace:	e7e0      	b.n	3a92 <buffer_alloc_free+0xb6>
    if( old == NULL )
    3ad0:	2f00      	cmp	r7, #0
    3ad2:	d1e7      	bne.n	3aa4 <buffer_alloc_free+0xc8>
        hdr->next_free = heap.first_free;
    3ad4:	68f3      	ldr	r3, [r6, #12]
    3ad6:	61a3      	str	r3, [r4, #24]
        if( heap.first_free != NULL )
    3ad8:	b103      	cbz	r3, 3adc <buffer_alloc_free+0x100>
            heap.first_free->prev_free = hdr;
    3ada:	615c      	str	r4, [r3, #20]
        heap.first_free = hdr;
    3adc:	60f4      	str	r4, [r6, #12]
    3ade:	e7e1      	b.n	3aa4 <buffer_alloc_free+0xc8>
}
    3ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ae4:	200155dc 	.word	0x200155dc
    3ae8:	20014594 	.word	0x20014594

00003aec <mbedtls_memory_buffer_alloc_init>:
    (void) mbedtls_mutex_unlock( &heap.mutex );
}
#endif /* MBEDTLS_THREADING_C */

void mbedtls_memory_buffer_alloc_init( unsigned char *buf, size_t len )
{
    3aec:	b538      	push	{r3, r4, r5, lr}
    3aee:	460d      	mov	r5, r1
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3af0:	2214      	movs	r2, #20
    3af2:	2100      	movs	r1, #0
{
    3af4:	4604      	mov	r4, r0
    memset( &heap, 0, sizeof( buffer_alloc_ctx ) );
    3af6:	4812      	ldr	r0, [pc, #72]	; (3b40 <mbedtls_memory_buffer_alloc_init+0x54>)
    3af8:	f002 fa68 	bl	5fcc <memset>
#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_init( &heap.mutex );
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc_mutexed,
                              buffer_alloc_free_mutexed );
#else
    mbedtls_platform_set_calloc_free( buffer_alloc_calloc, buffer_alloc_free );
    3afc:	4911      	ldr	r1, [pc, #68]	; (3b44 <mbedtls_memory_buffer_alloc_init+0x58>)
    3afe:	4812      	ldr	r0, [pc, #72]	; (3b48 <mbedtls_memory_buffer_alloc_init+0x5c>)
    3b00:	f000 f832 	bl	3b68 <mbedtls_platform_set_calloc_free>
#endif

    if( len < sizeof( memory_header ) + MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3b04:	2d23      	cmp	r5, #35	; 0x23
    3b06:	d91a      	bls.n	3b3e <mbedtls_memory_buffer_alloc_init+0x52>
        return;
    else if( (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE )
    3b08:	f014 0303 	ands.w	r3, r4, #3
    {
        /* Adjust len first since buf is used in the computation */
        len -= MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3b0c:	bf1f      	itttt	ne
    3b0e:	3d04      	subne	r5, #4
    3b10:	18ed      	addne	r5, r5, r3
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
             - (size_t)buf % MBEDTLS_MEMORY_ALIGN_MULTIPLE;
    3b12:	f1c3 0304 	rsbne	r3, r3, #4
        buf += MBEDTLS_MEMORY_ALIGN_MULTIPLE
    3b16:	18e4      	addne	r4, r4, r3
    }

    memset( buf, 0, len );
    3b18:	462a      	mov	r2, r5
    3b1a:	2100      	movs	r1, #0
    3b1c:	4620      	mov	r0, r4
    3b1e:	f002 fa55 	bl	5fcc <memset>

    heap.buf = buf;
    3b22:	4b07      	ldr	r3, [pc, #28]	; (3b40 <mbedtls_memory_buffer_alloc_init+0x54>)
    heap.len = len;

    heap.first = (memory_header *)buf;
    heap.first->size = len - sizeof( memory_header );
    heap.first->magic1 = MAGIC1;
    3b24:	4a09      	ldr	r2, [pc, #36]	; (3b4c <mbedtls_memory_buffer_alloc_init+0x60>)
    heap.len = len;
    3b26:	e9c3 4500 	strd	r4, r5, [r3]
    heap.first = (memory_header *)buf;
    3b2a:	609c      	str	r4, [r3, #8]
    heap.first->magic1 = MAGIC1;
    3b2c:	6022      	str	r2, [r4, #0]
    heap.first->magic2 = MAGIC2;
    3b2e:	f1a2 2210 	sub.w	r2, r2, #268439552	; 0x10001000
    heap.first->size = len - sizeof( memory_header );
    3b32:	3d20      	subs	r5, #32
    heap.first->magic2 = MAGIC2;
    3b34:	f1a2 12ef 	sub.w	r2, r2, #15663343	; 0xef00ef
    heap.first->size = len - sizeof( memory_header );
    3b38:	6065      	str	r5, [r4, #4]
    heap.first->magic2 = MAGIC2;
    3b3a:	61e2      	str	r2, [r4, #28]
    heap.first_free = heap.first;
    3b3c:	60dc      	str	r4, [r3, #12]
}
    3b3e:	bd38      	pop	{r3, r4, r5, pc}
    3b40:	200155dc 	.word	0x200155dc
    3b44:	000039dd 	.word	0x000039dd
    3b48:	000038c5 	.word	0x000038c5
    3b4c:	ff00aa55 	.word	0xff00aa55

00003b50 <mbedtls_calloc>:
static void * (*mbedtls_calloc_func)( size_t, size_t ) = MBEDTLS_PLATFORM_STD_CALLOC;
static void (*mbedtls_free_func)( void * ) = MBEDTLS_PLATFORM_STD_FREE;

void * mbedtls_calloc( size_t nmemb, size_t size )
{
    return (*mbedtls_calloc_func)( nmemb, size );
    3b50:	4b01      	ldr	r3, [pc, #4]	; (3b58 <mbedtls_calloc+0x8>)
    3b52:	681b      	ldr	r3, [r3, #0]
    3b54:	4718      	bx	r3
    3b56:	bf00      	nop
    3b58:	20014590 	.word	0x20014590

00003b5c <mbedtls_free>:
}

void mbedtls_free( void * ptr )
{
    (*mbedtls_free_func)( ptr );
    3b5c:	4b01      	ldr	r3, [pc, #4]	; (3b64 <mbedtls_free+0x8>)
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	4718      	bx	r3
    3b62:	bf00      	nop
    3b64:	20014598 	.word	0x20014598

00003b68 <mbedtls_platform_set_calloc_free>:
}

int mbedtls_platform_set_calloc_free( void * (*calloc_func)( size_t, size_t ),
                              void (*free_func)( void * ) )
{
    mbedtls_calloc_func = calloc_func;
    3b68:	4b02      	ldr	r3, [pc, #8]	; (3b74 <mbedtls_platform_set_calloc_free+0xc>)
    3b6a:	6018      	str	r0, [r3, #0]
    mbedtls_free_func = free_func;
    3b6c:	4b02      	ldr	r3, [pc, #8]	; (3b78 <mbedtls_platform_set_calloc_free+0x10>)
    return( 0 );
}
    3b6e:	2000      	movs	r0, #0
    mbedtls_free_func = free_func;
    3b70:	6019      	str	r1, [r3, #0]
}
    3b72:	4770      	bx	lr
    3b74:	20014590 	.word	0x20014590
    3b78:	20014598 	.word	0x20014598

00003b7c <mbedtls_platform_zeroize>:

void mbedtls_platform_zeroize( void *buf, size_t len )
{
    MBEDTLS_INTERNAL_VALIDATE( len == 0 || buf != NULL );

    if( len > 0 )
    3b7c:	460a      	mov	r2, r1
    3b7e:	b119      	cbz	r1, 3b88 <mbedtls_platform_zeroize+0xc>
        memset_func( buf, 0, len );
    3b80:	4b02      	ldr	r3, [pc, #8]	; (3b8c <mbedtls_platform_zeroize+0x10>)
    3b82:	2100      	movs	r1, #0
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	4718      	bx	r3
}
    3b88:	4770      	bx	lr
    3b8a:	bf00      	nop
    3b8c:	2001459c 	.word	0x2001459c

00003b90 <rsa_check_context.isra.0>:
/*
 * Checks whether the context fields are set in such a way
 * that the RSA primitives will be able to execute without error.
 * It does *not* make guarantees for consistency of the parameters.
 */
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* blinding_needed is only used for NO_CRT to decide whether
     * P,Q need to be present or not. */
    ((void) blinding_needed);
#endif

    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3b92:	f100 0608 	add.w	r6, r0, #8
    3b96:	6847      	ldr	r7, [r0, #4]
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3b98:	4604      	mov	r4, r0
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3b9a:	4630      	mov	r0, r6
static int rsa_check_context( mbedtls_rsa_context const *ctx, int is_priv,
    3b9c:	460d      	mov	r5, r1
    if( ctx->len != mbedtls_mpi_size( &ctx->N ) ||
    3b9e:	f003 f911 	bl	6dc4 <mbedtls_mpi_size>
    3ba2:	4287      	cmp	r7, r0
    3ba4:	d116      	bne.n	3bd4 <rsa_check_context.isra.0+0x44>
    3ba6:	6863      	ldr	r3, [r4, #4]
    3ba8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3bac:	d812      	bhi.n	3bd4 <rsa_check_context.isra.0+0x44>
     * 1. Modular exponentiation needs positive, odd moduli.
     */

    /* Modular exponentiation wrt. N is always used for
     * RSA public key operations. */
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3bae:	2100      	movs	r1, #0
    3bb0:	4630      	mov	r0, r6
    3bb2:	f003 fa7e 	bl	70b2 <mbedtls_mpi_cmp_int>
    3bb6:	2800      	cmp	r0, #0
    3bb8:	dd0c      	ble.n	3bd4 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_get_bit( &ctx->N, 0 ) == 0  )
    3bba:	2100      	movs	r1, #0
    3bbc:	4630      	mov	r0, r6
    3bbe:	f003 f8d4 	bl	6d6a <mbedtls_mpi_get_bit>
    if( mbedtls_mpi_cmp_int( &ctx->N, 0 ) <= 0 ||
    3bc2:	b138      	cbz	r0, 3bd4 <rsa_check_context.isra.0+0x44>

#if !defined(MBEDTLS_RSA_NO_CRT)
    /* Modular exponentiation for P and Q is only
     * used for private key operations and if CRT
     * is used. */
    if( is_priv &&
    3bc4:	b945      	cbnz	r5, 3bd8 <rsa_check_context.isra.0+0x48>
    /*
     * 2. Exponents must be positive
     */

    /* Always need E for public key operations */
    if( mbedtls_mpi_cmp_int( &ctx->E, 0 ) <= 0 )
    3bc6:	2100      	movs	r1, #0
    3bc8:	f104 0014 	add.w	r0, r4, #20
    3bcc:	f003 fa71 	bl	70b2 <mbedtls_mpi_cmp_int>
    3bd0:	2800      	cmp	r0, #0
    3bd2:	dc1e      	bgt.n	3c12 <rsa_check_context.isra.0+0x82>
     * but check for QP >= 1 nonetheless. */
#if !defined(MBEDTLS_RSA_NO_CRT)
    if( is_priv &&
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    {
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3bd4:	481b      	ldr	r0, [pc, #108]	; (3c44 <rsa_check_context.isra.0+0xb4>)
    3bd6:	e01e      	b.n	3c16 <rsa_check_context.isra.0+0x86>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3bd8:	f104 062c 	add.w	r6, r4, #44	; 0x2c
    3bdc:	2100      	movs	r1, #0
    3bde:	4630      	mov	r0, r6
    3be0:	f003 fa67 	bl	70b2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3be4:	2800      	cmp	r0, #0
    3be6:	ddf5      	ble.n	3bd4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3be8:	2100      	movs	r1, #0
    3bea:	4630      	mov	r0, r6
    3bec:	f003 f8bd 	bl	6d6a <mbedtls_mpi_get_bit>
        ( mbedtls_mpi_cmp_int( &ctx->P, 0 ) <= 0 ||
    3bf0:	2800      	cmp	r0, #0
    3bf2:	d0ef      	beq.n	3bd4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3bf4:	f104 0638 	add.w	r6, r4, #56	; 0x38
    3bf8:	2100      	movs	r1, #0
    3bfa:	4630      	mov	r0, r6
    3bfc:	f003 fa59 	bl	70b2 <mbedtls_mpi_cmp_int>
          mbedtls_mpi_get_bit( &ctx->P, 0 ) == 0 ||
    3c00:	2800      	cmp	r0, #0
    3c02:	dde7      	ble.n	3bd4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_get_bit( &ctx->Q, 0 ) == 0  ) )
    3c04:	2100      	movs	r1, #0
    3c06:	4630      	mov	r0, r6
    3c08:	f003 f8af 	bl	6d6a <mbedtls_mpi_get_bit>
          mbedtls_mpi_cmp_int( &ctx->Q, 0 ) <= 0 ||
    3c0c:	2800      	cmp	r0, #0
    3c0e:	d1da      	bne.n	3bc6 <rsa_check_context.isra.0+0x36>
    3c10:	e7e0      	b.n	3bd4 <rsa_check_context.isra.0+0x44>
    if( is_priv &&
    3c12:	b90d      	cbnz	r5, 3c18 <rsa_check_context.isra.0+0x88>
    }
#endif

    return( 0 );
    3c14:	2000      	movs	r0, #0
}
    3c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3c18:	2100      	movs	r1, #0
    3c1a:	f104 0044 	add.w	r0, r4, #68	; 0x44
    3c1e:	f003 fa48 	bl	70b2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3c22:	2800      	cmp	r0, #0
    3c24:	ddd6      	ble.n	3bd4 <rsa_check_context.isra.0+0x44>
          mbedtls_mpi_cmp_int( &ctx->DQ, 0 ) <= 0  ) )
    3c26:	2100      	movs	r1, #0
    3c28:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3c2c:	f003 fa41 	bl	70b2 <mbedtls_mpi_cmp_int>
        ( mbedtls_mpi_cmp_int( &ctx->DP, 0 ) <= 0 ||
    3c30:	2800      	cmp	r0, #0
    3c32:	ddcf      	ble.n	3bd4 <rsa_check_context.isra.0+0x44>
        mbedtls_mpi_cmp_int( &ctx->QP, 0 ) <= 0 )
    3c34:	2100      	movs	r1, #0
    3c36:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    3c3a:	f003 fa3a 	bl	70b2 <mbedtls_mpi_cmp_int>
    if( is_priv &&
    3c3e:	2800      	cmp	r0, #0
    3c40:	dce8      	bgt.n	3c14 <rsa_check_context.isra.0+0x84>
    3c42:	e7c7      	b.n	3bd4 <rsa_check_context.isra.0+0x44>
    3c44:	ffffbf80 	.word	0xffffbf80

00003c48 <mbedtls_rsa_check_pubkey>:

/*
 * Check a public RSA key
 */
int mbedtls_rsa_check_pubkey( const mbedtls_rsa_context *ctx )
{
    3c48:	b570      	push	{r4, r5, r6, lr}
    RSA_VALIDATE_RET( ctx != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3c4a:	2100      	movs	r1, #0
{
    3c4c:	4604      	mov	r4, r0
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) != 0 )
    3c4e:	f7ff ff9f 	bl	3b90 <rsa_check_context.isra.0>
    3c52:	4605      	mov	r5, r0
    3c54:	b9b8      	cbnz	r0, 3c86 <mbedtls_rsa_check_pubkey+0x3e>
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );

    if( mbedtls_mpi_bitlen( &ctx->N ) < 128 )
    3c56:	f104 0608 	add.w	r6, r4, #8
    3c5a:	4630      	mov	r0, r6
    3c5c:	f003 f896 	bl	6d8c <mbedtls_mpi_bitlen>
    3c60:	287f      	cmp	r0, #127	; 0x7f
    3c62:	d910      	bls.n	3c86 <mbedtls_rsa_check_pubkey+0x3e>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    }

    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3c64:	3414      	adds	r4, #20
    3c66:	4629      	mov	r1, r5
    3c68:	4620      	mov	r0, r4
    3c6a:	f003 f87e 	bl	6d6a <mbedtls_mpi_get_bit>
    3c6e:	b150      	cbz	r0, 3c86 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3c70:	4620      	mov	r0, r4
    3c72:	f003 f88b 	bl	6d8c <mbedtls_mpi_bitlen>
    if( mbedtls_mpi_get_bit( &ctx->E, 0 ) == 0 ||
    3c76:	2801      	cmp	r0, #1
    3c78:	d905      	bls.n	3c86 <mbedtls_rsa_check_pubkey+0x3e>
        mbedtls_mpi_cmp_mpi( &ctx->E, &ctx->N ) >= 0 )
    3c7a:	4631      	mov	r1, r6
    3c7c:	4620      	mov	r0, r4
    3c7e:	f003 f9d5 	bl	702c <mbedtls_mpi_cmp_mpi>
        mbedtls_mpi_bitlen( &ctx->E )     < 2  ||
    3c82:	2800      	cmp	r0, #0
    3c84:	db00      	blt.n	3c88 <mbedtls_rsa_check_pubkey+0x40>
    {
        return( MBEDTLS_ERR_RSA_KEY_CHECK_FAILED );
    3c86:	4d01      	ldr	r5, [pc, #4]	; (3c8c <mbedtls_rsa_check_pubkey+0x44>)
    }

    return( 0 );
}
    3c88:	4628      	mov	r0, r5
    3c8a:	bd70      	pop	{r4, r5, r6, pc}
    3c8c:	ffffbe00 	.word	0xffffbe00

00003c90 <mbedtls_rsa_public>:
 * Do an RSA public key operation
 */
int mbedtls_rsa_public( mbedtls_rsa_context *ctx,
                const unsigned char *input,
                unsigned char *output )
{
    3c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c92:	460c      	mov	r4, r1
    3c94:	b087      	sub	sp, #28
    mbedtls_mpi T;
    RSA_VALIDATE_RET( ctx != NULL );
    RSA_VALIDATE_RET( input != NULL );
    RSA_VALIDATE_RET( output != NULL );

    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3c96:	2100      	movs	r1, #0
{
    3c98:	4605      	mov	r5, r0
    3c9a:	4616      	mov	r6, r2
    if( rsa_check_context( ctx, 0 /* public */, 0 /* no blinding */ ) )
    3c9c:	f7ff ff78 	bl	3b90 <rsa_check_context.isra.0>
    3ca0:	bb80      	cbnz	r0, 3d04 <mbedtls_rsa_public+0x74>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );

    mbedtls_mpi_init( &T );
    3ca2:	a803      	add	r0, sp, #12
    3ca4:	f002 ffdb 	bl	6c5e <mbedtls_mpi_init>
#if defined(MBEDTLS_THREADING_C)
    if( ( ret = mbedtls_mutex_lock( &ctx->mutex ) ) != 0 )
        return( ret );
#endif

    MBEDTLS_MPI_CHK( mbedtls_mpi_read_binary( &T, input, ctx->len ) );
    3ca8:	4621      	mov	r1, r4
    3caa:	686a      	ldr	r2, [r5, #4]
    3cac:	a803      	add	r0, sp, #12
    3cae:	f003 f88f 	bl	6dd0 <mbedtls_mpi_read_binary>
    3cb2:	4604      	mov	r4, r0
    3cb4:	b9d0      	cbnz	r0, 3cec <mbedtls_rsa_public+0x5c>

    if( mbedtls_mpi_cmp_mpi( &T, &ctx->N ) >= 0 )
    3cb6:	f105 0408 	add.w	r4, r5, #8
    3cba:	4621      	mov	r1, r4
    3cbc:	a803      	add	r0, sp, #12
    3cbe:	f003 f9b5 	bl	702c <mbedtls_mpi_cmp_mpi>
    3cc2:	2800      	cmp	r0, #0
    3cc4:	da1b      	bge.n	3cfe <mbedtls_rsa_public+0x6e>
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
        goto cleanup;
    }

    olen = ctx->len;
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3cc6:	f105 0368 	add.w	r3, r5, #104	; 0x68
    3cca:	a903      	add	r1, sp, #12
    3ccc:	9300      	str	r3, [sp, #0]
    3cce:	4608      	mov	r0, r1
    3cd0:	4623      	mov	r3, r4
    3cd2:	f105 0214 	add.w	r2, r5, #20
    olen = ctx->len;
    3cd6:	686f      	ldr	r7, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_exp_mod( &T, &T, &ctx->E, &ctx->N, &ctx->RN ) );
    3cd8:	f003 fd3d 	bl	7756 <mbedtls_mpi_exp_mod>
    3cdc:	4604      	mov	r4, r0
    3cde:	b928      	cbnz	r0, 3cec <mbedtls_rsa_public+0x5c>
    MBEDTLS_MPI_CHK( mbedtls_mpi_write_binary( &T, output, olen ) );
    3ce0:	463a      	mov	r2, r7
    3ce2:	4631      	mov	r1, r6
    3ce4:	a803      	add	r0, sp, #12
    3ce6:	f003 f8ab 	bl	6e40 <mbedtls_mpi_write_binary>
    3cea:	4604      	mov	r4, r0
#if defined(MBEDTLS_THREADING_C)
    if( mbedtls_mutex_unlock( &ctx->mutex ) != 0 )
        return( MBEDTLS_ERR_THREADING_MUTEX_ERROR );
#endif

    mbedtls_mpi_free( &T );
    3cec:	a803      	add	r0, sp, #12
    3cee:	f002 ffbc 	bl	6c6a <mbedtls_mpi_free>

    if( ret != 0 )
    3cf2:	b10c      	cbz	r4, 3cf8 <mbedtls_rsa_public+0x68>
        return( MBEDTLS_ERR_RSA_PUBLIC_FAILED + ret );
    3cf4:	f5a4 4485 	sub.w	r4, r4, #17024	; 0x4280

    return( 0 );
}
    3cf8:	4620      	mov	r0, r4
    3cfa:	b007      	add	sp, #28
    3cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ret = MBEDTLS_ERR_MPI_BAD_INPUT_DATA;
    3cfe:	f06f 0403 	mvn.w	r4, #3
    3d02:	e7f3      	b.n	3cec <mbedtls_rsa_public+0x5c>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA );
    3d04:	4c00      	ldr	r4, [pc, #0]	; (3d08 <mbedtls_rsa_public+0x78>)
    3d06:	e7f7      	b.n	3cf8 <mbedtls_rsa_public+0x68>
    3d08:	ffffbf80 	.word	0xffffbf80

00003d0c <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3d0c:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    3d0e:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    3d12:	b9c1      	cbnz	r1, 3d46 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    3d14:	4a19      	ldr	r2, [pc, #100]	; (3d7c <mbedtls_sha256_starts_ret+0x70>)
    3d16:	4b1a      	ldr	r3, [pc, #104]	; (3d80 <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    3d18:	f8df c08c 	ldr.w	ip, [pc, #140]	; 3da8 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
    3d1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    3d20:	4b18      	ldr	r3, [pc, #96]	; (3d84 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    3d22:	4a19      	ldr	r2, [pc, #100]	; (3d88 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    3d24:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    3d28:	4b18      	ldr	r3, [pc, #96]	; (3d8c <mbedtls_sha256_starts_ret+0x80>)
    3d2a:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    3d2e:	4b18      	ldr	r3, [pc, #96]	; (3d90 <mbedtls_sha256_starts_ret+0x84>)
    3d30:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    3d32:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    3d36:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    3d3a:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    3d3e:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    3d40:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    3d42:	2000      	movs	r0, #0
    3d44:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    3d46:	4b13      	ldr	r3, [pc, #76]	; (3d94 <mbedtls_sha256_starts_ret+0x88>)
    3d48:	4a13      	ldr	r2, [pc, #76]	; (3d98 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    3d4a:	f8df c060 	ldr.w	ip, [pc, #96]	; 3dac <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
    3d4e:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    3d52:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    3d56:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    3d5a:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    3d5e:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    3d60:	4b0e      	ldr	r3, [pc, #56]	; (3d9c <mbedtls_sha256_starts_ret+0x90>)
    3d62:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    3d66:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    3d6a:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    3d6e:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    3d72:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3d74:	4b0a      	ldr	r3, [pc, #40]	; (3da0 <mbedtls_sha256_starts_ret+0x94>)
    3d76:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3d78:	4b0a      	ldr	r3, [pc, #40]	; (3da4 <mbedtls_sha256_starts_ret+0x98>)
    3d7a:	e7e0      	b.n	3d3e <mbedtls_sha256_starts_ret+0x32>
    3d7c:	6a09e667 	.word	0x6a09e667
    3d80:	bb67ae85 	.word	0xbb67ae85
    3d84:	a54ff53a 	.word	0xa54ff53a
    3d88:	510e527f 	.word	0x510e527f
    3d8c:	9b05688c 	.word	0x9b05688c
    3d90:	1f83d9ab 	.word	0x1f83d9ab
    3d94:	367cd507 	.word	0x367cd507
    3d98:	c1059ed8 	.word	0xc1059ed8
    3d9c:	ffc00b31 	.word	0xffc00b31
    3da0:	64f98fa7 	.word	0x64f98fa7
    3da4:	befa4fa4 	.word	0xbefa4fa4
    3da8:	3c6ef372 	.word	0x3c6ef372
    3dac:	f70e5939 	.word	0xf70e5939

00003db0 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    3db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3db4:	f100 0308 	add.w	r3, r0, #8
    3db8:	b0d1      	sub	sp, #324	; 0x144
    3dba:	9305      	str	r3, [sp, #20]
    3dbc:	ab08      	add	r3, sp, #32
    3dbe:	9300      	str	r3, [sp, #0]
    3dc0:	f100 0328 	add.w	r3, r0, #40	; 0x28
    3dc4:	9306      	str	r3, [sp, #24]
    3dc6:	9a00      	ldr	r2, [sp, #0]
    3dc8:	9b05      	ldr	r3, [sp, #20]

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
        A[i] = ctx->state[i];
    3dca:	f853 0b04 	ldr.w	r0, [r3], #4
    3dce:	f842 0b04 	str.w	r0, [r2], #4
    for( i = 0; i < 8; i++ )
    3dd2:	9806      	ldr	r0, [sp, #24]
    3dd4:	4298      	cmp	r0, r3
    3dd6:	d1f8      	bne.n	3dca <mbedtls_internal_sha256_process+0x1a>
    3dd8:	f10d 0940 	add.w	r9, sp, #64	; 0x40
    3ddc:	464a      	mov	r2, r9
    3dde:	f101 0040 	add.w	r0, r1, #64	; 0x40
        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    }
#else /* MBEDTLS_SHA256_SMALLER */
    for( i = 0; i < 16; i++ )
        GET_UINT32_BE( W[i], data, 4 * i );
    3de2:	784b      	ldrb	r3, [r1, #1]
    3de4:	780c      	ldrb	r4, [r1, #0]
    3de6:	041b      	lsls	r3, r3, #16
    3de8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    3dec:	78cc      	ldrb	r4, [r1, #3]
    3dee:	3104      	adds	r1, #4
    3df0:	4323      	orrs	r3, r4
    3df2:	f811 4c02 	ldrb.w	r4, [r1, #-2]
    for( i = 0; i < 16; i++ )
    3df6:	4288      	cmp	r0, r1
        GET_UINT32_BE( W[i], data, 4 * i );
    3df8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    3dfc:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 16; i++ )
    3e00:	d1ef      	bne.n	3de2 <mbedtls_internal_sha256_process+0x32>
    3e02:	489d      	ldr	r0, [pc, #628]	; (4078 <mbedtls_internal_sha256_process+0x2c8>)
    3e04:	46ca      	mov	sl, r9
    3e06:	4686      	mov	lr, r0
    3e08:	9b00      	ldr	r3, [sp, #0]
    3e0a:	9900      	ldr	r1, [sp, #0]
    3e0c:	f8d3 c01c 	ldr.w	ip, [r3, #28]
    3e10:	f8d3 8010 	ldr.w	r8, [r3, #16]
    3e14:	e9d3 6b05 	ldrd	r6, fp, [r3, #20]
    3e18:	e9d3 7200 	ldrd	r7, r2, [r3]
    3e1c:	68c9      	ldr	r1, [r1, #12]
    3e1e:	689b      	ldr	r3, [r3, #8]
    3e20:	9001      	str	r0, [sp, #4]

    for( i = 0; i < 16; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3e22:	f8de 0000 	ldr.w	r0, [lr]
    3e26:	f8da 4000 	ldr.w	r4, [sl]
    3e2a:	ea4f 25f8 	mov.w	r5, r8, ror #11
    3e2e:	ea85 15b8 	eor.w	r5, r5, r8, ror #6
    3e32:	4420      	add	r0, r4
    3e34:	ea85 6578 	eor.w	r5, r5, r8, ror #25
    3e38:	4405      	add	r5, r0
    3e3a:	ea8b 0006 	eor.w	r0, fp, r6
    3e3e:	ea00 0008 	and.w	r0, r0, r8
    3e42:	ea80 000b 	eor.w	r0, r0, fp
    3e46:	4405      	add	r5, r0
    3e48:	ea47 0402 	orr.w	r4, r7, r2
    3e4c:	ea4f 3077 	mov.w	r0, r7, ror #13
    3e50:	44ac      	add	ip, r5
    3e52:	ea80 00b7 	eor.w	r0, r0, r7, ror #2
    3e56:	ea07 0502 	and.w	r5, r7, r2
    3e5a:	401c      	ands	r4, r3
    3e5c:	ea80 50b7 	eor.w	r0, r0, r7, ror #22
    3e60:	432c      	orrs	r4, r5
    3e62:	4404      	add	r4, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3e64:	f8de 5004 	ldr.w	r5, [lr, #4]
    3e68:	f8da 0004 	ldr.w	r0, [sl, #4]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3e6c:	4461      	add	r1, ip
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3e6e:	4405      	add	r5, r0
    3e70:	44ab      	add	fp, r5
    3e72:	ea88 0506 	eor.w	r5, r8, r6
    3e76:	400d      	ands	r5, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i+0], K[i+0] );
    3e78:	44a4      	add	ip, r4
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3e7a:	ea85 0406 	eor.w	r4, r5, r6
    3e7e:	eb0b 0504 	add.w	r5, fp, r4
    3e82:	ea4f 2bf1 	mov.w	fp, r1, ror #11
    3e86:	ea8b 1bb1 	eor.w	fp, fp, r1, ror #6
    3e8a:	ea8b 6b71 	eor.w	fp, fp, r1, ror #25
    3e8e:	44ab      	add	fp, r5
    3e90:	ea4c 0007 	orr.w	r0, ip, r7
    3e94:	ea4f 357c 	mov.w	r5, ip, ror #13
    3e98:	ea0c 0407 	and.w	r4, ip, r7
    3e9c:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    3ea0:	4010      	ands	r0, r2
    3ea2:	4320      	orrs	r0, r4
    3ea4:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3ea8:	f8de 4008 	ldr.w	r4, [lr, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3eac:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3eae:	f8da 0008 	ldr.w	r0, [sl, #8]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3eb2:	445b      	add	r3, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3eb4:	4404      	add	r4, r0
    3eb6:	4426      	add	r6, r4
    3eb8:	ea81 0408 	eor.w	r4, r1, r8
    3ebc:	401c      	ands	r4, r3
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], W[i+1], K[i+1] );
    3ebe:	445d      	add	r5, fp
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], W[i+2], K[i+2] );
    3ec0:	ea84 0b08 	eor.w	fp, r4, r8
    3ec4:	eb06 040b 	add.w	r4, r6, fp
    3ec8:	ea4f 26f3 	mov.w	r6, r3, ror #11
    3ecc:	ea86 16b3 	eor.w	r6, r6, r3, ror #6
    3ed0:	ea86 6673 	eor.w	r6, r6, r3, ror #25
    3ed4:	4426      	add	r6, r4
    3ed6:	ea4c 0005 	orr.w	r0, ip, r5
    3eda:	ea4f 3475 	mov.w	r4, r5, ror #13
    3ede:	ea0c 0b05 	and.w	fp, ip, r5
    3ee2:	ea84 04b5 	eor.w	r4, r4, r5, ror #2
    3ee6:	4038      	ands	r0, r7
    3ee8:	ea40 000b 	orr.w	r0, r0, fp
    3eec:	ea84 54b5 	eor.w	r4, r4, r5, ror #22
    3ef0:	4404      	add	r4, r0
    3ef2:	4434      	add	r4, r6
    3ef4:	4432      	add	r2, r6
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], W[i+3], K[i+3] );
    3ef6:	f8de 000c 	ldr.w	r0, [lr, #12]
    3efa:	f8da 600c 	ldr.w	r6, [sl, #12]
    3efe:	ea81 0b03 	eor.w	fp, r1, r3
    3f02:	4430      	add	r0, r6
    3f04:	ea0b 0b02 	and.w	fp, fp, r2
    3f08:	ea4f 26f2 	mov.w	r6, r2, ror #11
    3f0c:	ea8b 0b01 	eor.w	fp, fp, r1
    3f10:	4440      	add	r0, r8
    3f12:	ea86 16b2 	eor.w	r6, r6, r2, ror #6
    3f16:	4458      	add	r0, fp
    3f18:	ea86 6672 	eor.w	r6, r6, r2, ror #25
    3f1c:	4406      	add	r6, r0
    3f1e:	eb07 0806 	add.w	r8, r7, r6
    3f22:	ea4f 3074 	mov.w	r0, r4, ror #13
    3f26:	ea45 0704 	orr.w	r7, r5, r4
    3f2a:	ea05 0b04 	and.w	fp, r5, r4
    3f2e:	ea80 00b4 	eor.w	r0, r0, r4, ror #2
    3f32:	ea07 070c 	and.w	r7, r7, ip
    3f36:	ea47 070b 	orr.w	r7, r7, fp
    3f3a:	ea80 50b4 	eor.w	r0, r0, r4, ror #22
    3f3e:	4438      	add	r0, r7
    3f40:	4430      	add	r0, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], W[i+4], K[i+4] );
    3f42:	f8da 7010 	ldr.w	r7, [sl, #16]
    3f46:	f8de 6010 	ldr.w	r6, [lr, #16]
    3f4a:	ea83 0b02 	eor.w	fp, r3, r2
    3f4e:	443e      	add	r6, r7
    3f50:	4431      	add	r1, r6
    3f52:	ea0b 0b08 	and.w	fp, fp, r8
    3f56:	ea4f 26f8 	mov.w	r6, r8, ror #11
    3f5a:	ea8b 0b03 	eor.w	fp, fp, r3
    3f5e:	ea86 16b8 	eor.w	r6, r6, r8, ror #6
    3f62:	4459      	add	r1, fp
    3f64:	ea86 6678 	eor.w	r6, r6, r8, ror #25
    3f68:	440e      	add	r6, r1
    3f6a:	ea44 0700 	orr.w	r7, r4, r0
    3f6e:	ea4f 3170 	mov.w	r1, r0, ror #13
    3f72:	ea04 0b00 	and.w	fp, r4, r0
    3f76:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    3f7a:	402f      	ands	r7, r5
    3f7c:	ea47 070b 	orr.w	r7, r7, fp
    3f80:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    3f84:	4439      	add	r1, r7
    3f86:	4431      	add	r1, r6
    3f88:	44b4      	add	ip, r6
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], W[i+5], K[i+5] );
    3f8a:	f8da 7014 	ldr.w	r7, [sl, #20]
    3f8e:	f8de 6014 	ldr.w	r6, [lr, #20]
    3f92:	ea82 0b08 	eor.w	fp, r2, r8
    3f96:	443e      	add	r6, r7
    3f98:	4433      	add	r3, r6
    3f9a:	ea0b 0b0c 	and.w	fp, fp, ip
    3f9e:	ea4f 26fc 	mov.w	r6, ip, ror #11
    3fa2:	ea8b 0b02 	eor.w	fp, fp, r2
    3fa6:	ea86 16bc 	eor.w	r6, r6, ip, ror #6
    3faa:	445b      	add	r3, fp
    3fac:	ea86 667c 	eor.w	r6, r6, ip, ror #25
    3fb0:	441e      	add	r6, r3
    3fb2:	eb05 0b06 	add.w	fp, r5, r6
    3fb6:	ea4f 3371 	mov.w	r3, r1, ror #13
    3fba:	ea40 0501 	orr.w	r5, r0, r1
    3fbe:	ea00 0701 	and.w	r7, r0, r1
    3fc2:	4025      	ands	r5, r4
    3fc4:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    3fc8:	433d      	orrs	r5, r7
    3fca:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    3fce:	442b      	add	r3, r5
    3fd0:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], W[i+6], K[i+6] );
    3fd2:	f8de 5018 	ldr.w	r5, [lr, #24]
    3fd6:	f8da 6018 	ldr.w	r6, [sl, #24]
    3fda:	f10e 0e20 	add.w	lr, lr, #32
    3fde:	4435      	add	r5, r6
    3fe0:	4415      	add	r5, r2
    3fe2:	ea88 020c 	eor.w	r2, r8, ip
    3fe6:	ea02 020b 	and.w	r2, r2, fp
    3fea:	ea82 0708 	eor.w	r7, r2, r8
    3fee:	19ea      	adds	r2, r5, r7
    3ff0:	ea4f 25fb 	mov.w	r5, fp, ror #11
    3ff4:	ea85 15bb 	eor.w	r5, r5, fp, ror #6
    3ff8:	ea85 657b 	eor.w	r5, r5, fp, ror #25
    3ffc:	4415      	add	r5, r2
    3ffe:	1966      	adds	r6, r4, r5
    4000:	ea4f 3273 	mov.w	r2, r3, ror #13
    4004:	ea41 0403 	orr.w	r4, r1, r3
    4008:	4004      	ands	r4, r0
    400a:	ea01 0703 	and.w	r7, r1, r3
    400e:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    4012:	433c      	orrs	r4, r7
    4014:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    4018:	4422      	add	r2, r4
    401a:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    401c:	f85e 4c04 	ldr.w	r4, [lr, #-4]
    4020:	f8da 501c 	ldr.w	r5, [sl, #28]
    4024:	f10a 0a20 	add.w	sl, sl, #32
    4028:	1967      	adds	r7, r4, r5
    402a:	44b8      	add	r8, r7
    402c:	ea8c 070b 	eor.w	r7, ip, fp
    4030:	4037      	ands	r7, r6
    4032:	ea87 070c 	eor.w	r7, r7, ip
    4036:	4447      	add	r7, r8
    4038:	ea4f 28f6 	mov.w	r8, r6, ror #11
    403c:	ea88 18b6 	eor.w	r8, r8, r6, ror #6
    4040:	ea88 6876 	eor.w	r8, r8, r6, ror #25
    4044:	4447      	add	r7, r8
    4046:	eb00 0807 	add.w	r8, r0, r7
    404a:	ea43 0402 	orr.w	r4, r3, r2
    404e:	ea4f 3072 	mov.w	r0, r2, ror #13
    4052:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
    4056:	400c      	ands	r4, r1
    4058:	ea03 0502 	and.w	r5, r3, r2
    405c:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
    4060:	432c      	orrs	r4, r5
    4062:	4404      	add	r4, r0
    for( i = 0; i < 16; i += 8 )
    4064:	4805      	ldr	r0, [pc, #20]	; (407c <mbedtls_internal_sha256_process+0x2cc>)
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], W[i+7], K[i+7] );
    4066:	4427      	add	r7, r4
    for( i = 0; i < 16; i += 8 )
    4068:	4570      	cmp	r0, lr
    406a:	f47f aeda 	bne.w	3e22 <mbedtls_internal_sha256_process+0x72>
    406e:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
    4072:	9007      	str	r0, [sp, #28]
    4074:	e004      	b.n	4080 <mbedtls_internal_sha256_process+0x2d0>
    4076:	bf00      	nop
    4078:	000084e0 	.word	0x000084e0
    407c:	00008520 	.word	0x00008520
    }

    for( i = 16; i < 64; i += 8 )
    {
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    4080:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    4084:	f8d9 5004 	ldr.w	r5, [r9, #4]
    4088:	ea4f 4ef0 	mov.w	lr, r0, ror #19
    408c:	ea8e 4e70 	eor.w	lr, lr, r0, ror #17
    4090:	f8d9 4000 	ldr.w	r4, [r9]
    4094:	ea8e 2e90 	eor.w	lr, lr, r0, lsr #10
    4098:	f8d9 0024 	ldr.w	r0, [r9, #36]	; 0x24
    409c:	ea4f 4ab5 	mov.w	sl, r5, ror #18
    40a0:	4420      	add	r0, r4
    40a2:	ea8a 1af5 	eor.w	sl, sl, r5, ror #7
    40a6:	ea8a 0ad5 	eor.w	sl, sl, r5, lsr #3
    40aa:	4486      	add	lr, r0
    40ac:	ea4f 24f8 	mov.w	r4, r8, ror #11
    40b0:	eb0e 000a 	add.w	r0, lr, sl
    40b4:	ea84 14b8 	eor.w	r4, r4, r8, ror #6
    40b8:	9004      	str	r0, [sp, #16]
    40ba:	ea84 6078 	eor.w	r0, r4, r8, ror #25
    40be:	ea8b 0406 	eor.w	r4, fp, r6
    40c2:	ea04 0408 	and.w	r4, r4, r8
    40c6:	ea84 040b 	eor.w	r4, r4, fp
    40ca:	4404      	add	r4, r0
    40cc:	9801      	ldr	r0, [sp, #4]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    40ce:	ea88 0e06 	eor.w	lr, r8, r6
    40d2:	6c00      	ldr	r0, [r0, #64]	; 0x40
    40d4:	f109 0920 	add.w	r9, r9, #32
    40d8:	4420      	add	r0, r4
    40da:	9c04      	ldr	r4, [sp, #16]
    40dc:	4420      	add	r0, r4
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    40de:	4484      	add	ip, r0
    40e0:	4461      	add	r1, ip
    40e2:	9102      	str	r1, [sp, #8]
    40e4:	ea47 0002 	orr.w	r0, r7, r2
    40e8:	ea4f 3177 	mov.w	r1, r7, ror #13
    40ec:	f8c9 4020 	str.w	r4, [r9, #32]
    40f0:	ea81 01b7 	eor.w	r1, r1, r7, ror #2
    40f4:	ea07 0402 	and.w	r4, r7, r2
    40f8:	4018      	ands	r0, r3
    40fa:	ea81 51b7 	eor.w	r1, r1, r7, ror #22
    40fe:	4320      	orrs	r0, r4
    4100:	4408      	add	r0, r1
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    4102:	f8d9 101c 	ldr.w	r1, [r9, #28]
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], R(i+0), K[i+0] );
    4106:	4484      	add	ip, r0
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    4108:	ea4f 40f1 	mov.w	r0, r1, ror #19
    410c:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    4110:	ea80 2091 	eor.w	r0, r0, r1, lsr #10
    4114:	f8d9 1008 	ldr.w	r1, [r9, #8]
    4118:	f859 4c18 	ldr.w	r4, [r9, #-24]
    411c:	4429      	add	r1, r5
    411e:	4401      	add	r1, r0
    4120:	9802      	ldr	r0, [sp, #8]
    4122:	ea4f 45b4 	mov.w	r5, r4, ror #18
    4126:	ea0e 0e00 	and.w	lr, lr, r0
    412a:	9801      	ldr	r0, [sp, #4]
    412c:	ea85 15f4 	eor.w	r5, r5, r4, ror #7
    4130:	6c40      	ldr	r0, [r0, #68]	; 0x44
    4132:	ea85 05d4 	eor.w	r5, r5, r4, lsr #3
    4136:	4429      	add	r1, r5
    4138:	4458      	add	r0, fp
    413a:	4408      	add	r0, r1
    413c:	ea8e 0e06 	eor.w	lr, lr, r6
    4140:	4486      	add	lr, r0
    4142:	9802      	ldr	r0, [sp, #8]
    4144:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
    4148:	ea4f 25f0 	mov.w	r5, r0, ror #11
    414c:	ea85 15b0 	eor.w	r5, r5, r0, ror #6
    4150:	ea85 6570 	eor.w	r5, r5, r0, ror #25
    4154:	eb05 000e 	add.w	r0, r5, lr
    4158:	eb03 0b00 	add.w	fp, r3, r0
    415c:	ea4f 357c 	mov.w	r5, ip, ror #13
    4160:	ea47 030c 	orr.w	r3, r7, ip
    4164:	ea07 0e0c 	and.w	lr, r7, ip
    4168:	ea85 05bc 	eor.w	r5, r5, ip, ror #2
    416c:	4013      	ands	r3, r2
    416e:	ea43 030e 	orr.w	r3, r3, lr
    4172:	ea85 55bc 	eor.w	r5, r5, ip, ror #22
    4176:	441d      	add	r5, r3
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    4178:	9b04      	ldr	r3, [sp, #16]
        P( A[7], A[0], A[1], A[2], A[3], A[4], A[5], A[6], R(i+1), K[i+1] );
    417a:	4405      	add	r5, r0
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    417c:	ea4f 40f3 	mov.w	r0, r3, ror #19
    4180:	ea80 4073 	eor.w	r0, r0, r3, ror #17
    4184:	ea80 2093 	eor.w	r0, r0, r3, lsr #10
    4188:	f8d9 300c 	ldr.w	r3, [r9, #12]
    418c:	f859 ec14 	ldr.w	lr, [r9, #-20]
    4190:	4423      	add	r3, r4
    4192:	4403      	add	r3, r0
    4194:	9802      	ldr	r0, [sp, #8]
    4196:	ea4f 44be 	mov.w	r4, lr, ror #18
    419a:	ea88 0a00 	eor.w	sl, r8, r0
    419e:	9801      	ldr	r0, [sp, #4]
    41a0:	ea84 14fe 	eor.w	r4, r4, lr, ror #7
    41a4:	6c80      	ldr	r0, [r0, #72]	; 0x48
    41a6:	ea84 04de 	eor.w	r4, r4, lr, lsr #3
    41aa:	4423      	add	r3, r4
    41ac:	ea0a 0a0b 	and.w	sl, sl, fp
    41b0:	4430      	add	r0, r6
    41b2:	ea4f 24fb 	mov.w	r4, fp, ror #11
    41b6:	4418      	add	r0, r3
    41b8:	ea8a 0a08 	eor.w	sl, sl, r8
    41bc:	ea84 14bb 	eor.w	r4, r4, fp, ror #6
    41c0:	ea84 647b 	eor.w	r4, r4, fp, ror #25
    41c4:	4482      	add	sl, r0
    41c6:	eb04 000a 	add.w	r0, r4, sl
    41ca:	4402      	add	r2, r0
    41cc:	ea4c 0405 	orr.w	r4, ip, r5
    41d0:	ea4f 3675 	mov.w	r6, r5, ror #13
    41d4:	9203      	str	r2, [sp, #12]
    41d6:	ea86 06b5 	eor.w	r6, r6, r5, ror #2
    41da:	ea0c 0205 	and.w	r2, ip, r5
    41de:	403c      	ands	r4, r7
    41e0:	ea86 56b5 	eor.w	r6, r6, r5, ror #22
    41e4:	4314      	orrs	r4, r2
    41e6:	4434      	add	r4, r6
    41e8:	4404      	add	r4, r0
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    41ea:	ea4f 40f1 	mov.w	r0, r1, ror #19
    41ee:	ea80 4071 	eor.w	r0, r0, r1, ror #17
    41f2:	ea80 2191 	eor.w	r1, r0, r1, lsr #10
    41f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
    41fa:	f859 2c10 	ldr.w	r2, [r9, #-16]
    41fe:	4486      	add	lr, r0
    4200:	4471      	add	r1, lr
    4202:	ea4f 4eb2 	mov.w	lr, r2, ror #18
    4206:	ea8e 1ef2 	eor.w	lr, lr, r2, ror #7
    420a:	ea8e 0ed2 	eor.w	lr, lr, r2, lsr #3
    420e:	448e      	add	lr, r1
    4210:	9902      	ldr	r1, [sp, #8]
    4212:	9803      	ldr	r0, [sp, #12]
    4214:	ea81 010b 	eor.w	r1, r1, fp
    4218:	4001      	ands	r1, r0
    421a:	9802      	ldr	r0, [sp, #8]
        P( A[6], A[7], A[0], A[1], A[2], A[3], A[4], A[5], R(i+2), K[i+2] );
    421c:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4220:	4041      	eors	r1, r0
    4222:	9801      	ldr	r0, [sp, #4]
    4224:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
    4226:	9803      	ldr	r0, [sp, #12]
    4228:	4446      	add	r6, r8
    422a:	4476      	add	r6, lr
    422c:	4431      	add	r1, r6
    422e:	9e03      	ldr	r6, [sp, #12]
    4230:	ea4f 20f0 	mov.w	r0, r0, ror #11
    4234:	ea80 10b6 	eor.w	r0, r0, r6, ror #6
    4238:	ea80 6076 	eor.w	r0, r0, r6, ror #25
    423c:	1846      	adds	r6, r0, r1
    423e:	ea45 0004 	orr.w	r0, r5, r4
    4242:	ea05 0104 	and.w	r1, r5, r4
    4246:	ea4f 3874 	mov.w	r8, r4, ror #13
    424a:	ea00 000c 	and.w	r0, r0, ip
    424e:	ea88 08b4 	eor.w	r8, r8, r4, ror #2
    4252:	4308      	orrs	r0, r1
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    4254:	ea4f 41f3 	mov.w	r1, r3, ror #19
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4258:	ea88 58b4 	eor.w	r8, r8, r4, ror #22
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    425c:	ea81 4173 	eor.w	r1, r1, r3, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    4260:	4440      	add	r0, r8
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    4262:	ea81 2393 	eor.w	r3, r1, r3, lsr #10
    4266:	f8d9 1014 	ldr.w	r1, [r9, #20]
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    426a:	4430      	add	r0, r6
    426c:	eb07 0a06 	add.w	sl, r7, r6
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    4270:	f859 6c0c 	ldr.w	r6, [r9, #-12]
    4274:	440a      	add	r2, r1
    4276:	4413      	add	r3, r2
    4278:	ea4f 42b6 	mov.w	r2, r6, ror #18
    427c:	ea82 12f6 	eor.w	r2, r2, r6, ror #7
    4280:	ea82 02d6 	eor.w	r2, r2, r6, lsr #3
    4284:	441a      	add	r2, r3
    4286:	9b03      	ldr	r3, [sp, #12]
    4288:	9902      	ldr	r1, [sp, #8]
    428a:	ea8b 0703 	eor.w	r7, fp, r3
    428e:	9b01      	ldr	r3, [sp, #4]
    4290:	ea07 070a 	and.w	r7, r7, sl
    4294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    4296:	ea87 070b 	eor.w	r7, r7, fp
    429a:	4413      	add	r3, r2
    429c:	440b      	add	r3, r1
    429e:	ea4f 21fa 	mov.w	r1, sl, ror #11
    42a2:	ea81 11ba 	eor.w	r1, r1, sl, ror #6
    42a6:	441f      	add	r7, r3
    42a8:	ea81 617a 	eor.w	r1, r1, sl, ror #25
    42ac:	19cb      	adds	r3, r1, r7
    42ae:	ea44 0700 	orr.w	r7, r4, r0
    42b2:	ea4f 3170 	mov.w	r1, r0, ror #13
    42b6:	ea04 0800 	and.w	r8, r4, r0
    42ba:	ea81 01b0 	eor.w	r1, r1, r0, ror #2
    42be:	402f      	ands	r7, r5
    42c0:	ea47 0708 	orr.w	r7, r7, r8
    42c4:	ea81 51b0 	eor.w	r1, r1, r0, ror #22
    42c8:	4439      	add	r1, r7
    42ca:	4419      	add	r1, r3
    42cc:	449c      	add	ip, r3
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    42ce:	f859 8c08 	ldr.w	r8, [r9, #-8]
    42d2:	f8d9 3018 	ldr.w	r3, [r9, #24]
    42d6:	ea4f 47fe 	mov.w	r7, lr, ror #19
    42da:	ea87 477e 	eor.w	r7, r7, lr, ror #17
        P( A[5], A[6], A[7], A[0], A[1], A[2], A[3], A[4], R(i+3), K[i+3] );
    42de:	f8c9 e02c 	str.w	lr, [r9, #44]	; 0x2c
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    42e2:	ea87 2e9e 	eor.w	lr, r7, lr, lsr #10
    42e6:	199f      	adds	r7, r3, r6
    42e8:	ea4f 43b8 	mov.w	r3, r8, ror #18
    42ec:	ea83 13f8 	eor.w	r3, r3, r8, ror #7
    42f0:	ea83 03d8 	eor.w	r3, r3, r8, lsr #3
    42f4:	4477      	add	r7, lr
    42f6:	441f      	add	r7, r3
    42f8:	9b03      	ldr	r3, [sp, #12]
        P( A[4], A[5], A[6], A[7], A[0], A[1], A[2], A[3], R(i+4), K[i+4] );
    42fa:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
        P( A[3], A[4], A[5], A[6], A[7], A[0], A[1], A[2], R(i+5), K[i+5] );
    42fe:	ea83 0e0a 	eor.w	lr, r3, sl
    4302:	ea0e 0e0c 	and.w	lr, lr, ip
    4306:	ea8e 0e03 	eor.w	lr, lr, r3
    430a:	9b01      	ldr	r3, [sp, #4]
    430c:	f8c9 7034 	str.w	r7, [r9, #52]	; 0x34
    4310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    4312:	443b      	add	r3, r7
    4314:	445b      	add	r3, fp
    4316:	449e      	add	lr, r3
    4318:	ea4f 23fc 	mov.w	r3, ip, ror #11
    431c:	ea83 13bc 	eor.w	r3, r3, ip, ror #6
    4320:	ea83 637c 	eor.w	r3, r3, ip, ror #25
    4324:	eb03 060e 	add.w	r6, r3, lr
    4328:	eb05 0b06 	add.w	fp, r5, r6
    432c:	ea4f 3371 	mov.w	r3, r1, ror #13
    4330:	ea40 0501 	orr.w	r5, r0, r1
    4334:	ea00 0e01 	and.w	lr, r0, r1
    4338:	4025      	ands	r5, r4
    433a:	ea83 03b1 	eor.w	r3, r3, r1, ror #2
    433e:	ea45 050e 	orr.w	r5, r5, lr
    4342:	ea83 53b1 	eor.w	r3, r3, r1, ror #22
    4346:	442b      	add	r3, r5
    4348:	4433      	add	r3, r6
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    434a:	f8d9 501c 	ldr.w	r5, [r9, #28]
    434e:	ea4f 46f2 	mov.w	r6, r2, ror #19
    4352:	f859 ec04 	ldr.w	lr, [r9, #-4]
    4356:	ea86 4672 	eor.w	r6, r6, r2, ror #17
    435a:	ea86 2292 	eor.w	r2, r6, r2, lsr #10
    435e:	eb05 0608 	add.w	r6, r5, r8
    4362:	4416      	add	r6, r2
    4364:	ea4f 42be 	mov.w	r2, lr, ror #18
    4368:	ea82 12fe 	eor.w	r2, r2, lr, ror #7
    436c:	ea82 02de 	eor.w	r2, r2, lr, lsr #3
    4370:	4416      	add	r6, r2
    4372:	9a01      	ldr	r2, [sp, #4]
    4374:	ea8a 080c 	eor.w	r8, sl, ip
    4378:	6d95      	ldr	r5, [r2, #88]	; 0x58
    437a:	9a03      	ldr	r2, [sp, #12]
    437c:	4435      	add	r5, r6
    437e:	4415      	add	r5, r2
    4380:	ea08 080b 	and.w	r8, r8, fp
    4384:	ea4f 22fb 	mov.w	r2, fp, ror #11
    4388:	ea88 080a 	eor.w	r8, r8, sl
    438c:	ea82 12bb 	eor.w	r2, r2, fp, ror #6
    4390:	4445      	add	r5, r8
    4392:	ea82 627b 	eor.w	r2, r2, fp, ror #25
    4396:	4415      	add	r5, r2
    4398:	f8c9 6038 	str.w	r6, [r9, #56]	; 0x38
    439c:	ea4f 3273 	mov.w	r2, r3, ror #13
    43a0:	1966      	adds	r6, r4, r5
    43a2:	ea41 0403 	orr.w	r4, r1, r3
    43a6:	4004      	ands	r4, r0
    43a8:	ea01 0803 	and.w	r8, r1, r3
    43ac:	ea82 02b3 	eor.w	r2, r2, r3, ror #2
    43b0:	ea44 0408 	orr.w	r4, r4, r8
    43b4:	ea82 52b3 	eor.w	r2, r2, r3, ror #22
    43b8:	4422      	add	r2, r4
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    43ba:	ea4f 44f7 	mov.w	r4, r7, ror #19
    43be:	ea84 4477 	eor.w	r4, r4, r7, ror #17
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
    43c2:	442a      	add	r2, r5
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    43c4:	ea84 2797 	eor.w	r7, r4, r7, lsr #10
    43c8:	f8d9 5000 	ldr.w	r5, [r9]
    43cc:	9c04      	ldr	r4, [sp, #16]
    43ce:	44a6      	add	lr, r4
    43d0:	ea4f 44b5 	mov.w	r4, r5, ror #18
    43d4:	ea84 14f5 	eor.w	r4, r4, r5, ror #7
    43d8:	ea84 05d5 	eor.w	r5, r4, r5, lsr #3
    43dc:	9c01      	ldr	r4, [sp, #4]
    43de:	4477      	add	r7, lr
    43e0:	6de4      	ldr	r4, [r4, #92]	; 0x5c
    43e2:	443d      	add	r5, r7
    43e4:	ea8c 0e0b 	eor.w	lr, ip, fp
    43e8:	442c      	add	r4, r5
    43ea:	ea0e 0e06 	and.w	lr, lr, r6
    43ee:	ea4f 27f6 	mov.w	r7, r6, ror #11
    43f2:	ea8e 0e0c 	eor.w	lr, lr, ip
    43f6:	4454      	add	r4, sl
    43f8:	ea87 17b6 	eor.w	r7, r7, r6, ror #6
    43fc:	4474      	add	r4, lr
    43fe:	ea87 6776 	eor.w	r7, r7, r6, ror #25
    4402:	4427      	add	r7, r4
    4404:	eb00 0807 	add.w	r8, r0, r7
    4408:	ea43 0402 	orr.w	r4, r3, r2
    440c:	ea4f 3072 	mov.w	r0, r2, ror #13
    4410:	f8c9 503c 	str.w	r5, [r9, #60]	; 0x3c
    4414:	ea80 00b2 	eor.w	r0, r0, r2, ror #2
    4418:	400c      	ands	r4, r1
    441a:	ea03 0502 	and.w	r5, r3, r2
    441e:	ea80 50b2 	eor.w	r0, r0, r2, ror #22
    4422:	432c      	orrs	r4, r5
    4424:	4404      	add	r4, r0
    4426:	9801      	ldr	r0, [sp, #4]
    4428:	4427      	add	r7, r4
    for( i = 16; i < 64; i += 8 )
    442a:	3020      	adds	r0, #32
    442c:	9001      	str	r0, [sp, #4]
    442e:	9807      	ldr	r0, [sp, #28]
    4430:	4548      	cmp	r0, r9
    4432:	f47f ae25 	bne.w	4080 <mbedtls_internal_sha256_process+0x2d0>
    4436:	e9cd 6b0d 	strd	r6, fp, [sp, #52]	; 0x34
    443a:	e9cd 7208 	strd	r7, r2, [sp, #32]
    443e:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
    4442:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    4446:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
        ctx->state[i] += A[i];
    444a:	9b05      	ldr	r3, [sp, #20]
    444c:	9900      	ldr	r1, [sp, #0]
    444e:	681b      	ldr	r3, [r3, #0]
    4450:	f851 2b04 	ldr.w	r2, [r1], #4
    4454:	4413      	add	r3, r2
    4456:	9a05      	ldr	r2, [sp, #20]
    4458:	9100      	str	r1, [sp, #0]
    445a:	f842 3b04 	str.w	r3, [r2], #4
    for( i = 0; i < 8; i++ )
    445e:	9b06      	ldr	r3, [sp, #24]
        ctx->state[i] += A[i];
    4460:	9205      	str	r2, [sp, #20]
    for( i = 0; i < 8; i++ )
    4462:	4293      	cmp	r3, r2
    4464:	d1f1      	bne.n	444a <mbedtls_internal_sha256_process+0x69a>

    return( 0 );
}
    4466:	2000      	movs	r0, #0
    4468:	b051      	add	sp, #324	; 0x144
    446a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    446e:	bf00      	nop

00004470 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4472:	4b10      	ldr	r3, [pc, #64]	; (44b4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    4474:	4f10      	ldr	r7, [pc, #64]	; (44b8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4476:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    447a:	3001      	adds	r0, #1
    447c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4480:	42ae      	cmp	r6, r5
    4482:	d800      	bhi.n	4486 <z_sys_init_run_level+0x16>
		}
	}
}
    4484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    4486:	e9d5 3400 	ldrd	r3, r4, [r5]
    448a:	4620      	mov	r0, r4
    448c:	4798      	blx	r3
    448e:	b170      	cbz	r0, 44ae <z_sys_init_run_level+0x3e>
    4490:	b16c      	cbz	r4, 44ae <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
    4492:	2301      	movs	r3, #1
				(dev - __device_start));
    4494:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    4496:	4a09      	ldr	r2, [pc, #36]	; (44bc <z_sys_init_run_level+0x4c>)
    4498:	1124      	asrs	r4, r4, #4
    449a:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    449c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    44a0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
    44a4:	fa03 f404 	lsl.w	r4, r3, r4
    44a8:	4304      	orrs	r4, r0
    44aa:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    44ae:	3508      	adds	r5, #8
    44b0:	e7e6      	b.n	4480 <z_sys_init_run_level+0x10>
    44b2:	bf00      	nop
    44b4:	000085e0 	.word	0x000085e0
    44b8:	20014608 	.word	0x20014608
    44bc:	20014678 	.word	0x20014678

000044c0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    44c0:	4b08      	ldr	r3, [pc, #32]	; (44e4 <z_device_ready+0x24>)
    44c2:	1ac0      	subs	r0, r0, r3
    44c4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    44c6:	4b08      	ldr	r3, [pc, #32]	; (44e8 <z_device_ready+0x28>)
    44c8:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
    44ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    44ce:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    44d0:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
    44d4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    44d8:	4210      	tst	r0, r2
}
    44da:	bf0c      	ite	eq
    44dc:	4618      	moveq	r0, r3
    44de:	2000      	movne	r0, #0
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop
    44e4:	20014608 	.word	0x20014608
    44e8:	20014678 	.word	0x20014678

000044ec <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    44ec:	4911      	ldr	r1, [pc, #68]	; (4534 <z_impl_device_get_binding+0x48>)
{
    44ee:	b570      	push	{r4, r5, r6, lr}
    44f0:	4605      	mov	r5, r0
    44f2:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    44f4:	4c10      	ldr	r4, [pc, #64]	; (4538 <z_impl_device_get_binding+0x4c>)
    44f6:	428c      	cmp	r4, r1
    44f8:	d104      	bne.n	4504 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    44fa:	4c0f      	ldr	r4, [pc, #60]	; (4538 <z_impl_device_get_binding+0x4c>)
    44fc:	42b4      	cmp	r4, r6
    44fe:	d10a      	bne.n	4516 <z_impl_device_get_binding+0x2a>
	return NULL;
    4500:	2400      	movs	r4, #0
    4502:	e014      	b.n	452e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    4504:	4620      	mov	r0, r4
    4506:	f7ff ffdb 	bl	44c0 <z_device_ready>
    450a:	b110      	cbz	r0, 4512 <z_impl_device_get_binding+0x26>
    450c:	6823      	ldr	r3, [r4, #0]
    450e:	42ab      	cmp	r3, r5
    4510:	d00d      	beq.n	452e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    4512:	3410      	adds	r4, #16
    4514:	e7ef      	b.n	44f6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4516:	4620      	mov	r0, r4
    4518:	f7ff ffd2 	bl	44c0 <z_device_ready>
    451c:	b908      	cbnz	r0, 4522 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    451e:	3410      	adds	r4, #16
    4520:	e7ec      	b.n	44fc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    4522:	4628      	mov	r0, r5
    4524:	6821      	ldr	r1, [r4, #0]
    4526:	f001 fd0a 	bl	5f3e <strcmp>
    452a:	2800      	cmp	r0, #0
    452c:	d1f7      	bne.n	451e <z_impl_device_get_binding+0x32>
}
    452e:	4620      	mov	r0, r4
    4530:	bd70      	pop	{r4, r5, r6, pc}
    4532:	bf00      	nop
    4534:	20014678 	.word	0x20014678
    4538:	20014608 	.word	0x20014608

0000453c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    453c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    453e:	4605      	mov	r5, r0
    4540:	460e      	mov	r6, r1
	__asm__ volatile(
    4542:	f04f 0320 	mov.w	r3, #32
    4546:	f3ef 8711 	mrs	r7, BASEPRI
    454a:	f383 8811 	msr	BASEPRI, r3
    454e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    4552:	f000 fba1 	bl	4c98 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4556:	2200      	movs	r2, #0
    4558:	2d04      	cmp	r5, #4
    455a:	bf98      	it	ls
    455c:	4b18      	ldrls	r3, [pc, #96]	; (45c0 <z_fatal_error+0x84>)
    455e:	4604      	mov	r4, r0
	switch (reason) {
    4560:	bf94      	ite	ls
    4562:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
    4566:	4b17      	ldrhi	r3, [pc, #92]	; (45c4 <z_fatal_error+0x88>)
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4568:	9200      	str	r2, [sp, #0]
    456a:	2145      	movs	r1, #69	; 0x45
    456c:	462a      	mov	r2, r5
    456e:	4816      	ldr	r0, [pc, #88]	; (45c8 <z_fatal_error+0x8c>)
    4570:	f001 f995 	bl	589e <printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4574:	b13e      	cbz	r6, 4586 <z_fatal_error+0x4a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4576:	69f3      	ldr	r3, [r6, #28]
    4578:	f3c3 0308 	ubfx	r3, r3, #0, #9
    457c:	b11b      	cbz	r3, 4586 <z_fatal_error+0x4a>
		LOG_ERR("Fault during interrupt handling\n");
    457e:	2145      	movs	r1, #69	; 0x45
    4580:	4812      	ldr	r0, [pc, #72]	; (45cc <z_fatal_error+0x90>)
    4582:	f001 f98c 	bl	589e <printk>
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    4586:	b134      	cbz	r4, 4596 <z_fatal_error+0x5a>
    4588:	4620      	mov	r0, r4
    458a:	f003 fd0d 	bl	7fa8 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    458e:	4603      	mov	r3, r0
    4590:	b108      	cbz	r0, 4596 <z_fatal_error+0x5a>
    4592:	7802      	ldrb	r2, [r0, #0]
    4594:	b902      	cbnz	r2, 4598 <z_fatal_error+0x5c>
		thread_name = "unknown";
    4596:	4b0e      	ldr	r3, [pc, #56]	; (45d0 <z_fatal_error+0x94>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4598:	4622      	mov	r2, r4
    459a:	2145      	movs	r1, #69	; 0x45
    459c:	480d      	ldr	r0, [pc, #52]	; (45d4 <z_fatal_error+0x98>)
    459e:	f001 f97e 	bl	589e <printk>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    45a2:	4631      	mov	r1, r6
    45a4:	4628      	mov	r0, r5
    45a6:	f7fe fe5f 	bl	3268 <k_sys_fatal_error_handler>
	__asm__ volatile(
    45aa:	f387 8811 	msr	BASEPRI, r7
    45ae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    45b2:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    45b4:	b003      	add	sp, #12
    45b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    45ba:	f7fe b879 	b.w	26b0 <z_impl_k_thread_abort>
    45be:	bf00      	nop
    45c0:	000085f8 	.word	0x000085f8
    45c4:	00009291 	.word	0x00009291
    45c8:	000092a7 	.word	0x000092a7
    45cc:	000092d4 	.word	0x000092d4
    45d0:	0000929f 	.word	0x0000929f
    45d4:	000092fa 	.word	0x000092fa

000045d8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    45d8:	4802      	ldr	r0, [pc, #8]	; (45e4 <z_bss_zero+0xc>)
    45da:	4a03      	ldr	r2, [pc, #12]	; (45e8 <z_bss_zero+0x10>)
    45dc:	2100      	movs	r1, #0
    45de:	1a12      	subs	r2, r2, r0
    45e0:	f001 bcf4 	b.w	5fcc <memset>
    45e4:	200146d0 	.word	0x200146d0
    45e8:	20017380 	.word	0x20017380

000045ec <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    45ec:	2201      	movs	r2, #1
{
    45ee:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    45f0:	4b08      	ldr	r3, [pc, #32]	; (4614 <bg_thread_main+0x28>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    45f2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    45f4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    45f6:	f7ff ff3b 	bl	4470 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    45fa:	f000 fb67 	bl	4ccc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    45fe:	2003      	movs	r0, #3
    4600:	f7ff ff36 	bl	4470 <z_sys_init_run_level>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    4604:	f7fb ff1c 	bl	440 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4608:	4a03      	ldr	r2, [pc, #12]	; (4618 <bg_thread_main+0x2c>)
    460a:	7b13      	ldrb	r3, [r2, #12]
    460c:	f023 0301 	bic.w	r3, r3, #1
    4610:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4612:	bd08      	pop	{r3, pc}
    4614:	2001737e 	.word	0x2001737e
    4618:	200146d0 	.word	0x200146d0

0000461c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    461c:	b508      	push	{r3, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <z_cstart+0x54>)
	uint32_t msp =
    4620:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4624:	f382 8808 	msr	MSP, r2
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    4628:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    462c:	2500      	movs	r5, #0
    462e:	23e0      	movs	r3, #224	; 0xe0
    4630:	4c10      	ldr	r4, [pc, #64]	; (4674 <z_cstart+0x58>)
    4632:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    4636:	77e5      	strb	r5, [r4, #31]
    4638:	7625      	strb	r5, [r4, #24]
    463a:	7665      	strb	r5, [r4, #25]
    463c:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    463e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4640:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4644:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4646:	f7fe f807 	bl	2658 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    464a:	f7fd fd9b 	bl	2184 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    464e:	f04f 33ff 	mov.w	r3, #4294967295

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4652:	4628      	mov	r0, r5
    4654:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4656:	62e3      	str	r3, [r4, #44]	; 0x2c
    4658:	f7ff ff0a 	bl	4470 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    465c:	2001      	movs	r0, #1
    465e:	f7ff ff07 	bl	4470 <z_sys_init_run_level>
#else
#ifdef ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING
	/* Custom ARCH-specific routine to switch to main()
	 * in the case of no multi-threading.
	 */
	ARCH_SWITCH_TO_MAIN_NO_MULTITHREADING(bg_thread_main,
    4662:	462b      	mov	r3, r5
    4664:	462a      	mov	r2, r5
    4666:	4629      	mov	r1, r5
    4668:	4803      	ldr	r0, [pc, #12]	; (4678 <z_cstart+0x5c>)
    466a:	f7fd fd67 	bl	213c <z_arm_switch_to_main_no_multithreading>
    466e:	bf00      	nop
    4670:	20019b80 	.word	0x20019b80
    4674:	e000ed00 	.word	0xe000ed00
    4678:	000045ed 	.word	0x000045ed

0000467c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    467c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    467e:	4b0e      	ldr	r3, [pc, #56]	; (46b8 <init_mem_slab_module+0x3c>)
    4680:	4c0e      	ldr	r4, [pc, #56]	; (46bc <init_mem_slab_module+0x40>)
    4682:	42a3      	cmp	r3, r4
    4684:	d301      	bcc.n	468a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    4686:	2000      	movs	r0, #0
	return rc;
}
    4688:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    468a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    468e:	ea41 0200 	orr.w	r2, r1, r0
    4692:	f012 0203 	ands.w	r2, r2, #3
    4696:	d10b      	bne.n	46b0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4698:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    469a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    469c:	42aa      	cmp	r2, r5
    469e:	d101      	bne.n	46a4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    46a0:	331c      	adds	r3, #28
    46a2:	e7ee      	b.n	4682 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    46a4:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    46a6:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    46a8:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    46aa:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    46ac:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    46ae:	e7f5      	b.n	469c <init_mem_slab_module+0x20>
		return -EINVAL;
    46b0:	f06f 0015 	mvn.w	r0, #21
	return rc;
    46b4:	e7e8      	b.n	4688 <init_mem_slab_module+0xc>
    46b6:	bf00      	nop
    46b8:	2001467c 	.word	0x2001467c
    46bc:	2001467c 	.word	0x2001467c

000046c0 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    46c0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    46c2:	460c      	mov	r4, r1
    46c4:	4616      	mov	r6, r2
    46c6:	461f      	mov	r7, r3
	__asm__ volatile(
    46c8:	f04f 0320 	mov.w	r3, #32
    46cc:	f3ef 8111 	mrs	r1, BASEPRI
    46d0:	f383 8811 	msr	BASEPRI, r3
    46d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    46d8:	6943      	ldr	r3, [r0, #20]
    46da:	b15b      	cbz	r3, 46f4 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    46dc:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    46de:	681b      	ldr	r3, [r3, #0]
    46e0:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    46e2:	6983      	ldr	r3, [r0, #24]
    46e4:	3301      	adds	r3, #1
    46e6:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    46e8:	2000      	movs	r0, #0
	__asm__ volatile(
    46ea:	f381 8811 	msr	BASEPRI, r1
    46ee:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    46f2:	e011      	b.n	4718 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    46f4:	ea56 0207 	orrs.w	r2, r6, r7
    46f8:	d103      	bne.n	4702 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    46fa:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    46fe:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    4700:	e7f3      	b.n	46ea <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    4702:	4602      	mov	r2, r0
    4704:	e9cd 6700 	strd	r6, r7, [sp]
    4708:	4804      	ldr	r0, [pc, #16]	; (471c <k_mem_slab_alloc+0x5c>)
    470a:	f000 fa5f 	bl	4bcc <z_pend_curr>
		if (result == 0) {
    470e:	b918      	cbnz	r0, 4718 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    4710:	4b03      	ldr	r3, [pc, #12]	; (4720 <k_mem_slab_alloc+0x60>)
    4712:	689b      	ldr	r3, [r3, #8]
    4714:	695b      	ldr	r3, [r3, #20]
    4716:	6023      	str	r3, [r4, #0]
}
    4718:	b002      	add	sp, #8
    471a:	bdd0      	pop	{r4, r6, r7, pc}
    471c:	2001737f 	.word	0x2001737f
    4720:	200155f0 	.word	0x200155f0

00004724 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    4724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4726:	4604      	mov	r4, r0
    4728:	460d      	mov	r5, r1
	__asm__ volatile(
    472a:	f04f 0320 	mov.w	r3, #32
    472e:	f3ef 8611 	mrs	r6, BASEPRI
    4732:	f383 8811 	msr	BASEPRI, r3
    4736:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
    473a:	6947      	ldr	r7, [r0, #20]
    473c:	b96f      	cbnz	r7, 475a <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    473e:	f003 fc04 	bl	7f4a <z_unpend_first_thread>

		if (pending_thread != NULL) {
    4742:	b150      	cbz	r0, 475a <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    4744:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4746:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    4748:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    474a:	f003 fba3 	bl	7e94 <z_ready_thread>
			z_reschedule(&lock, key);
    474e:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
    4750:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
    4754:	4807      	ldr	r0, [pc, #28]	; (4774 <k_mem_slab_free+0x50>)
    4756:	f000 b8cb 	b.w	48f0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    475a:	682b      	ldr	r3, [r5, #0]
    475c:	6962      	ldr	r2, [r4, #20]
    475e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    4760:	682b      	ldr	r3, [r5, #0]
    4762:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    4764:	69a3      	ldr	r3, [r4, #24]
    4766:	3b01      	subs	r3, #1
    4768:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    476a:	f386 8811 	msr	BASEPRI, r6
    476e:	f3bf 8f6f 	isb	sy
}
    4772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4774:	2001737f 	.word	0x2001737f

00004778 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4778:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    477c:	4604      	mov	r4, r0
    477e:	4616      	mov	r6, r2
    4780:	461f      	mov	r7, r3
	__asm__ volatile(
    4782:	f04f 0320 	mov.w	r3, #32
    4786:	f3ef 8811 	mrs	r8, BASEPRI
    478a:	f383 8811 	msr	BASEPRI, r3
    478e:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4792:	68c3      	ldr	r3, [r0, #12]
    4794:	4a32      	ldr	r2, [pc, #200]	; (4860 <z_impl_k_mutex_lock+0xe8>)
    4796:	b16b      	cbz	r3, 47b4 <z_impl_k_mutex_lock+0x3c>
    4798:	6880      	ldr	r0, [r0, #8]
    479a:	6891      	ldr	r1, [r2, #8]
    479c:	4288      	cmp	r0, r1
    479e:	d019      	beq.n	47d4 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    47a0:	ea56 0307 	orrs.w	r3, r6, r7
    47a4:	d118      	bne.n	47d8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    47a6:	f388 8811 	msr	BASEPRI, r8
    47aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    47ae:	f06f 000f 	mvn.w	r0, #15
    47b2:	e00c      	b.n	47ce <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    47b4:	6891      	ldr	r1, [r2, #8]
    47b6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    47ba:	3301      	adds	r3, #1
    47bc:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    47be:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    47c0:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    47c2:	60a3      	str	r3, [r4, #8]
    47c4:	f388 8811 	msr	BASEPRI, r8
    47c8:	f3bf 8f6f 	isb	sy
		return 0;
    47cc:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    47ce:	b002      	add	sp, #8
    47d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    47d4:	6921      	ldr	r1, [r4, #16]
    47d6:	e7f0      	b.n	47ba <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    47d8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    47dc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    47e0:	4299      	cmp	r1, r3
    47e2:	bfa8      	it	ge
    47e4:	4619      	movge	r1, r3
    47e6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    47ea:	428b      	cmp	r3, r1
    47ec:	dd2c      	ble.n	4848 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    47ee:	f000 f9fd 	bl	4bec <z_set_prio>
    47f2:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    47f4:	4622      	mov	r2, r4
    47f6:	4641      	mov	r1, r8
    47f8:	e9cd 6700 	strd	r6, r7, [sp]
    47fc:	4819      	ldr	r0, [pc, #100]	; (4864 <z_impl_k_mutex_lock+0xec>)
    47fe:	f000 f9e5 	bl	4bcc <z_pend_curr>
	if (got_mutex == 0) {
    4802:	2800      	cmp	r0, #0
    4804:	d0e3      	beq.n	47ce <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    4806:	f04f 0320 	mov.w	r3, #32
    480a:	f3ef 8611 	mrs	r6, BASEPRI
    480e:	f383 8811 	msr	BASEPRI, r3
    4812:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4816:	6823      	ldr	r3, [r4, #0]
    4818:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    481a:	42a3      	cmp	r3, r4
    481c:	d007      	beq.n	482e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    481e:	b133      	cbz	r3, 482e <z_impl_k_mutex_lock+0xb6>
    4820:	f993 300e 	ldrsb.w	r3, [r3, #14]
    4824:	4299      	cmp	r1, r3
    4826:	bfa8      	it	ge
    4828:	4619      	movge	r1, r3
    482a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    482e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    4830:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4834:	4299      	cmp	r1, r3
    4836:	d109      	bne.n	484c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    4838:	b16d      	cbz	r5, 4856 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    483a:	4631      	mov	r1, r6
    483c:	4809      	ldr	r0, [pc, #36]	; (4864 <z_impl_k_mutex_lock+0xec>)
    483e:	f000 f857 	bl	48f0 <z_reschedule>
	return -EAGAIN;
    4842:	f06f 000a 	mvn.w	r0, #10
    4846:	e7c2      	b.n	47ce <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    4848:	2500      	movs	r5, #0
    484a:	e7d3      	b.n	47f4 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    484c:	f000 f9ce 	bl	4bec <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    4850:	2800      	cmp	r0, #0
    4852:	d1f2      	bne.n	483a <z_impl_k_mutex_lock+0xc2>
    4854:	e7f0      	b.n	4838 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    4856:	f386 8811 	msr	BASEPRI, r6
    485a:	f3bf 8f6f 	isb	sy
    485e:	e7f0      	b.n	4842 <z_impl_k_mutex_lock+0xca>
    4860:	200155f0 	.word	0x200155f0
    4864:	2001737f 	.word	0x2001737f

00004868 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    4868:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    486a:	6883      	ldr	r3, [r0, #8]
{
    486c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    486e:	2b00      	cmp	r3, #0
    4870:	d033      	beq.n	48da <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4872:	4a1d      	ldr	r2, [pc, #116]	; (48e8 <z_impl_k_mutex_unlock+0x80>)
    4874:	6892      	ldr	r2, [r2, #8]
    4876:	4293      	cmp	r3, r2
    4878:	d132      	bne.n	48e0 <z_impl_k_mutex_unlock+0x78>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    487a:	68c3      	ldr	r3, [r0, #12]
    487c:	2b01      	cmp	r3, #1
    487e:	d005      	beq.n	488c <z_impl_k_mutex_unlock+0x24>
		mutex->lock_count--;
    4880:	3b01      	subs	r3, #1
    4882:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    4884:	f003 faef 	bl	7e66 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    4888:	2000      	movs	r0, #0
}
    488a:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    488c:	f04f 0320 	mov.w	r3, #32
    4890:	f3ef 8511 	mrs	r5, BASEPRI
    4894:	f383 8811 	msr	BASEPRI, r3
    4898:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    489c:	6901      	ldr	r1, [r0, #16]
    489e:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    48a0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    48a4:	4299      	cmp	r1, r3
    48a6:	d001      	beq.n	48ac <z_impl_k_mutex_unlock+0x44>
		return z_set_prio(mutex->owner, new_prio);
    48a8:	f000 f9a0 	bl	4bec <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    48ac:	4620      	mov	r0, r4
    48ae:	f003 fb4c 	bl	7f4a <z_unpend_first_thread>
	mutex->owner = new_owner;
    48b2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    48b4:	b158      	cbz	r0, 48ce <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
    48b6:	f990 200e 	ldrsb.w	r2, [r0, #14]
    48ba:	6122      	str	r2, [r4, #16]
    48bc:	2200      	movs	r2, #0
    48be:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    48c0:	f003 fae8 	bl	7e94 <z_ready_thread>
		z_reschedule(&lock, key);
    48c4:	4629      	mov	r1, r5
    48c6:	4809      	ldr	r0, [pc, #36]	; (48ec <z_impl_k_mutex_unlock+0x84>)
    48c8:	f000 f812 	bl	48f0 <z_reschedule>
    48cc:	e7da      	b.n	4884 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    48ce:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    48d0:	f385 8811 	msr	BASEPRI, r5
    48d4:	f3bf 8f6f 	isb	sy
    48d8:	e7d4      	b.n	4884 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    48da:	f06f 0015 	mvn.w	r0, #21
    48de:	e7d4      	b.n	488a <z_impl_k_mutex_unlock+0x22>
		return -EPERM;
    48e0:	f04f 30ff 	mov.w	r0, #4294967295
    48e4:	e7d1      	b.n	488a <z_impl_k_mutex_unlock+0x22>
    48e6:	bf00      	nop
    48e8:	200155f0 	.word	0x200155f0
    48ec:	2001737f 	.word	0x2001737f

000048f0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    48f0:	b949      	cbnz	r1, 4906 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    48f2:	f3ef 8005 	mrs	r0, IPSR
    48f6:	b930      	cbnz	r0, 4906 <z_reschedule+0x16>
#ifdef CONFIG_SMP
extern struct k_thread *z_get_next_ready_thread(void);
#else
static ALWAYS_INLINE struct k_thread *z_get_next_ready_thread(void)
{
	return _kernel.ready_q.cache;
    48f8:	4b05      	ldr	r3, [pc, #20]	; (4910 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    48fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    48fc:	689b      	ldr	r3, [r3, #8]
    48fe:	429a      	cmp	r2, r3
    4900:	d001      	beq.n	4906 <z_reschedule+0x16>

static inline int z_swap_irqlock(unsigned int key)
{
	int ret;
	z_check_stack_sentinel();
	ret = arch_swap(key);
    4902:	f7fd bb91 	b.w	2028 <arch_swap>
    4906:	f381 8811 	msr	BASEPRI, r1
    490a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    490e:	4770      	bx	lr
    4910:	200155f0 	.word	0x200155f0

00004914 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    4914:	4b09      	ldr	r3, [pc, #36]	; (493c <z_priq_dumb_remove+0x28>)
    4916:	f103 0228 	add.w	r2, r3, #40	; 0x28
    491a:	4282      	cmp	r2, r0
    491c:	d105      	bne.n	492a <z_priq_dumb_remove+0x16>
    491e:	689b      	ldr	r3, [r3, #8]
    4920:	428b      	cmp	r3, r1
    4922:	d102      	bne.n	492a <z_priq_dumb_remove+0x16>
    4924:	7b4b      	ldrb	r3, [r1, #13]
    4926:	06db      	lsls	r3, r3, #27
    4928:	d106      	bne.n	4938 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    492a:	e9d1 3200 	ldrd	r3, r2, [r1]
    492e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4930:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4932:	2300      	movs	r3, #0
	node->prev = NULL;
    4934:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    4938:	4770      	bx	lr
    493a:	bf00      	nop
    493c:	200155f0 	.word	0x200155f0

00004940 <update_cache>:
	if (_current_cpu->pending_abort != NULL) {
    4940:	4a0f      	ldr	r2, [pc, #60]	; (4980 <update_cache+0x40>)
{
    4942:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    4944:	6913      	ldr	r3, [r2, #16]
{
    4946:	b510      	push	{r4, lr}
	if (_current_cpu->pending_abort != NULL) {
    4948:	b10b      	cbz	r3, 494e <update_cache+0xe>
	return thread ? thread : _current_cpu->idle_thread;
    494a:	68d0      	ldr	r0, [r2, #12]
    494c:	e00d      	b.n	496a <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    494e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    4952:	f003 fa95 	bl	7e80 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4956:	6894      	ldr	r4, [r2, #8]
    4958:	7b63      	ldrb	r3, [r4, #13]
    495a:	f013 0f20 	tst.w	r3, #32
		_current->base.thread_state |= _THREAD_DEAD;
    495e:	bf1c      	itt	ne
    4960:	f043 0308 	orrne.w	r3, r3, #8
    4964:	7363      	strbne	r3, [r4, #13]
	return thread ? thread : _current_cpu->idle_thread;
    4966:	2800      	cmp	r0, #0
    4968:	d0ef      	beq.n	494a <update_cache+0xa>
	if (preempt_ok != 0) {
    496a:	b939      	cbnz	r1, 497c <update_cache+0x3c>
	if (z_is_thread_prevented_from_running(_current)) {
    496c:	6893      	ldr	r3, [r2, #8]
    496e:	7b59      	ldrb	r1, [r3, #13]
    4970:	06c9      	lsls	r1, r1, #27
    4972:	d103      	bne.n	497c <update_cache+0x3c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4974:	6981      	ldr	r1, [r0, #24]
    4976:	2900      	cmp	r1, #0
    4978:	bf08      	it	eq
    497a:	4618      	moveq	r0, r3
    497c:	6250      	str	r0, [r2, #36]	; 0x24
}
    497e:	bd10      	pop	{r4, pc}
    4980:	200155f0 	.word	0x200155f0

00004984 <ready_thread>:
{
    4984:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    4986:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
}

static inline bool z_is_thread_queued(struct k_thread *thread)
{
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    498a:	7b43      	ldrb	r3, [r0, #13]
    498c:	2a00      	cmp	r2, #0
    498e:	db2c      	blt.n	49ea <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4990:	06db      	lsls	r3, r3, #27
    4992:	d12a      	bne.n	49ea <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    4994:	6983      	ldr	r3, [r0, #24]
    4996:	bb43      	cbnz	r3, 49ea <ready_thread+0x66>
	return list->head == list;
    4998:	4a15      	ldr	r2, [pc, #84]	; (49f0 <ready_thread+0x6c>)
    499a:	4611      	mov	r1, r2
    499c:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    49a0:	428c      	cmp	r4, r1
    49a2:	bf18      	it	ne
    49a4:	4623      	movne	r3, r4
    49a6:	2b00      	cmp	r3, #0
    49a8:	bf38      	it	cc
    49aa:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    49ac:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    49ae:	b1b3      	cbz	r3, 49de <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    49b0:	f990 600e 	ldrsb.w	r6, [r0, #14]
    49b4:	f993 500e 	ldrsb.w	r5, [r3, #14]
    49b8:	42ae      	cmp	r6, r5
    49ba:	db03      	blt.n	49c4 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    49bc:	42a3      	cmp	r3, r4
    49be:	d00e      	beq.n	49de <ready_thread+0x5a>
    49c0:	681b      	ldr	r3, [r3, #0]
    49c2:	e7f4      	b.n	49ae <ready_thread+0x2a>
	node->prev = successor->prev;
    49c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    49c6:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    49ca:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    49cc:	6058      	str	r0, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
}

static inline void z_set_thread_states(struct k_thread *thread, uint32_t states)
{
	thread->base.thread_state |= states;
    49ce:	7b43      	ldrb	r3, [r0, #13]
    49d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    49d4:	7343      	strb	r3, [r0, #13]
}
    49d6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    49d8:	2000      	movs	r0, #0
    49da:	f7ff bfb1 	b.w	4940 <update_cache>
	node->prev = list->tail;
    49de:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    49e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    49e4:	6018      	str	r0, [r3, #0]
	list->tail = node;
    49e6:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    49e8:	e7f1      	b.n	49ce <ready_thread+0x4a>
}
    49ea:	bc70      	pop	{r4, r5, r6}
    49ec:	4770      	bx	lr
    49ee:	bf00      	nop
    49f0:	200155f0 	.word	0x200155f0

000049f4 <z_impl_k_thread_suspend>:
{
    49f4:	b570      	push	{r4, r5, r6, lr}
    49f6:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    49f8:	3018      	adds	r0, #24
    49fa:	f003 fad7 	bl	7fac <z_abort_timeout>
	__asm__ volatile(
    49fe:	f04f 0320 	mov.w	r3, #32
    4a02:	f3ef 8611 	mrs	r6, BASEPRI
    4a06:	f383 8811 	msr	BASEPRI, r3
    4a0a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    4a0e:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4a12:	2b00      	cmp	r3, #0
    4a14:	da07      	bge.n	4a26 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4a16:	4621      	mov	r1, r4
    4a18:	480e      	ldr	r0, [pc, #56]	; (4a54 <z_impl_k_thread_suspend+0x60>)
    4a1a:	f7ff ff7b 	bl	4914 <z_priq_dumb_remove>
}

static inline void z_reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->base.thread_state &= ~states;
    4a1e:	7b63      	ldrb	r3, [r4, #13]
    4a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4a24:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4a26:	4d0c      	ldr	r5, [pc, #48]	; (4a58 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4a28:	7b63      	ldrb	r3, [r4, #13]
    4a2a:	68a8      	ldr	r0, [r5, #8]
    4a2c:	f043 0310 	orr.w	r3, r3, #16
    4a30:	7363      	strb	r3, [r4, #13]
    4a32:	1b03      	subs	r3, r0, r4
    4a34:	4258      	negs	r0, r3
    4a36:	4158      	adcs	r0, r3
    4a38:	f7ff ff82 	bl	4940 <update_cache>
	__asm__ volatile(
    4a3c:	f386 8811 	msr	BASEPRI, r6
    4a40:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4a44:	68ab      	ldr	r3, [r5, #8]
    4a46:	42a3      	cmp	r3, r4
    4a48:	d103      	bne.n	4a52 <z_impl_k_thread_suspend+0x5e>
}
    4a4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    4a4e:	f003 ba00 	b.w	7e52 <z_reschedule_unlocked>
}
    4a52:	bd70      	pop	{r4, r5, r6, pc}
    4a54:	20015618 	.word	0x20015618
    4a58:	200155f0 	.word	0x200155f0

00004a5c <z_thread_single_abort>:
{
    4a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4a60:	4604      	mov	r4, r0
	__asm__ volatile(
    4a62:	f04f 0320 	mov.w	r3, #32
    4a66:	f3ef 8211 	mrs	r2, BASEPRI
    4a6a:	f383 8811 	msr	BASEPRI, r3
    4a6e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    4a72:	7b43      	ldrb	r3, [r0, #13]
    4a74:	f013 0f28 	tst.w	r3, #40	; 0x28
    4a78:	d005      	beq.n	4a86 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    4a7a:	f382 8811 	msr	BASEPRI, r2
    4a7e:	f3bf 8f6f 	isb	sy
}
    4a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    4a86:	f043 0320 	orr.w	r3, r3, #32
    4a8a:	7343      	strb	r3, [r0, #13]
    4a8c:	f382 8811 	msr	BASEPRI, r2
    4a90:	f3bf 8f6f 	isb	sy
    4a94:	3018      	adds	r0, #24
    4a96:	f003 fa89 	bl	7fac <z_abort_timeout>
	__asm__ volatile(
    4a9a:	f04f 0320 	mov.w	r3, #32
    4a9e:	f3ef 8611 	mrs	r6, BASEPRI
    4aa2:	f383 8811 	msr	BASEPRI, r3
    4aa6:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4aaa:	7b63      	ldrb	r3, [r4, #13]
    4aac:	06d8      	lsls	r0, r3, #27
    4aae:	d116      	bne.n	4ade <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    4ab0:	69a2      	ldr	r2, [r4, #24]
    4ab2:	b9a2      	cbnz	r2, 4ade <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    4ab4:	0619      	lsls	r1, r3, #24
    4ab6:	d507      	bpl.n	4ac8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    4ab8:	4621      	mov	r1, r4
    4aba:	4822      	ldr	r0, [pc, #136]	; (4b44 <z_thread_single_abort+0xe8>)
    4abc:	f7ff ff2a 	bl	4914 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4ac0:	7b63      	ldrb	r3, [r4, #13]
    4ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4ac6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    4ac8:	4b1f      	ldr	r3, [pc, #124]	; (4b48 <z_thread_single_abort+0xec>)
    4aca:	6898      	ldr	r0, [r3, #8]
    4acc:	1b02      	subs	r2, r0, r4
    4ace:	4250      	negs	r0, r2
    4ad0:	4150      	adcs	r0, r2
    4ad2:	f7ff ff35 	bl	4940 <update_cache>
			waiter->base.pended_on = NULL;
    4ad6:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4ad8:	f104 0830 	add.w	r8, r4, #48	; 0x30
    4adc:	e01d      	b.n	4b1a <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    4ade:	079b      	lsls	r3, r3, #30
    4ae0:	d5f9      	bpl.n	4ad6 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    4ae2:	4621      	mov	r1, r4
    4ae4:	68a0      	ldr	r0, [r4, #8]
    4ae6:	f7ff ff15 	bl	4914 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4aea:	7b63      	ldrb	r3, [r4, #13]
    4aec:	f023 0302 	bic.w	r3, r3, #2
    4af0:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    4af2:	2300      	movs	r3, #0
    4af4:	60a3      	str	r3, [r4, #8]
    4af6:	e7ee      	b.n	4ad6 <z_thread_single_abort+0x7a>
    4af8:	f105 0018 	add.w	r0, r5, #24
    4afc:	f003 fa56 	bl	7fac <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    4b00:	68a8      	ldr	r0, [r5, #8]
    4b02:	4629      	mov	r1, r5
    4b04:	f7ff ff06 	bl	4914 <z_priq_dumb_remove>
    4b08:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    4b0a:	4628      	mov	r0, r5
    4b0c:	f023 0302 	bic.w	r3, r3, #2
    4b10:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    4b12:	60af      	str	r7, [r5, #8]
    4b14:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    4b16:	f7ff ff35 	bl	4984 <ready_thread>
	return list->head == list;
    4b1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b1c:	4545      	cmp	r5, r8
    4b1e:	d001      	beq.n	4b24 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    4b20:	2d00      	cmp	r5, #0
    4b22:	d1e9      	bne.n	4af8 <z_thread_single_abort+0x9c>
		thread->base.thread_state |= _THREAD_DEAD;
    4b24:	7b63      	ldrb	r3, [r4, #13]
    4b26:	f043 0308 	orr.w	r3, r3, #8
    4b2a:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    4b2c:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    4b2e:	f386 8811 	msr	BASEPRI, r6
    4b32:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    4b36:	2b00      	cmp	r3, #0
    4b38:	d0a3      	beq.n	4a82 <z_thread_single_abort+0x26>
		fn_abort(thread);
    4b3a:	4620      	mov	r0, r4
}
    4b3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    4b40:	4718      	bx	r3
    4b42:	bf00      	nop
    4b44:	20015618 	.word	0x20015618
    4b48:	200155f0 	.word	0x200155f0

00004b4c <unready_thread>:
{
    4b4c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    4b4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    4b52:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4b54:	2b00      	cmp	r3, #0
    4b56:	da06      	bge.n	4b66 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4b58:	4807      	ldr	r0, [pc, #28]	; (4b78 <unready_thread+0x2c>)
    4b5a:	f7ff fedb 	bl	4914 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    4b5e:	7b4b      	ldrb	r3, [r1, #13]
    4b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4b64:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    4b66:	4b05      	ldr	r3, [pc, #20]	; (4b7c <unready_thread+0x30>)
    4b68:	6898      	ldr	r0, [r3, #8]
    4b6a:	1a43      	subs	r3, r0, r1
    4b6c:	4258      	negs	r0, r3
    4b6e:	4158      	adcs	r0, r3
}
    4b70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    4b74:	f7ff bee4 	b.w	4940 <update_cache>
    4b78:	20015618 	.word	0x20015618
    4b7c:	200155f0 	.word	0x200155f0

00004b80 <pend>:
{
    4b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b84:	4606      	mov	r6, r0
    4b86:	4614      	mov	r4, r2
    4b88:	461d      	mov	r5, r3
	__asm__ volatile(
    4b8a:	f04f 0320 	mov.w	r3, #32
    4b8e:	f3ef 8711 	mrs	r7, BASEPRI
    4b92:	f383 8811 	msr	BASEPRI, r3
    4b96:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    4b9a:	f003 f9ab 	bl	7ef4 <add_to_waitq_locked>
	__asm__ volatile(
    4b9e:	f387 8811 	msr	BASEPRI, r7
    4ba2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4ba6:	1c6b      	adds	r3, r5, #1
    4ba8:	bf08      	it	eq
    4baa:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    4bae:	d008      	beq.n	4bc2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4bb0:	4622      	mov	r2, r4
    4bb2:	462b      	mov	r3, r5
    4bb4:	f106 0018 	add.w	r0, r6, #24
    4bb8:	4903      	ldr	r1, [pc, #12]	; (4bc8 <pend+0x48>)
}
    4bba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4bbe:	f000 b8f3 	b.w	4da8 <z_add_timeout>
    4bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4bc6:	bf00      	nop
    4bc8:	00007eb5 	.word	0x00007eb5

00004bcc <z_pend_curr>:
{
    4bcc:	b510      	push	{r4, lr}
    4bce:	460c      	mov	r4, r1
	pend(_current, wait_q, timeout);
    4bd0:	4805      	ldr	r0, [pc, #20]	; (4be8 <z_pend_curr+0x1c>)
{
    4bd2:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    4bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4bd8:	6880      	ldr	r0, [r0, #8]
    4bda:	f7ff ffd1 	bl	4b80 <pend>
    4bde:	4620      	mov	r0, r4
}
    4be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4be4:	f7fd ba20 	b.w	2028 <arch_swap>
    4be8:	200155f0 	.word	0x200155f0

00004bec <z_set_prio>:
{
    4bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bf0:	4604      	mov	r4, r0
	__asm__ volatile(
    4bf2:	f04f 0320 	mov.w	r3, #32
    4bf6:	f3ef 8811 	mrs	r8, BASEPRI
    4bfa:	f383 8811 	msr	BASEPRI, r3
    4bfe:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4c02:	7b43      	ldrb	r3, [r0, #13]
    4c04:	b24e      	sxtb	r6, r1
    4c06:	06db      	lsls	r3, r3, #27
    4c08:	d12e      	bne.n	4c68 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    4c0a:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    4c0c:	bb65      	cbnz	r5, 4c68 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    4c0e:	4f18      	ldr	r7, [pc, #96]	; (4c70 <z_set_prio+0x84>)
    4c10:	4621      	mov	r1, r4
    4c12:	f107 0028 	add.w	r0, r7, #40	; 0x28
    4c16:	f7ff fe7d 	bl	4914 <z_priq_dumb_remove>
	return list->head == list;
    4c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4c1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c1e:	4283      	cmp	r3, r0
    4c20:	bf18      	it	ne
    4c22:	461d      	movne	r5, r3
    4c24:	2d00      	cmp	r5, #0
    4c26:	bf38      	it	cc
    4c28:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    4c2a:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c2c:	b1b5      	cbz	r5, 4c5c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    4c2e:	f995 100e 	ldrsb.w	r1, [r5, #14]
    4c32:	42b1      	cmp	r1, r6
    4c34:	dc03      	bgt.n	4c3e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    4c36:	42aa      	cmp	r2, r5
    4c38:	d010      	beq.n	4c5c <z_set_prio+0x70>
    4c3a:	682d      	ldr	r5, [r5, #0]
    4c3c:	e7f6      	b.n	4c2c <z_set_prio+0x40>
	node->prev = successor->prev;
    4c3e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    4c40:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    4c44:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4c46:	606c      	str	r4, [r5, #4]
			update_cache(1);
    4c48:	2001      	movs	r0, #1
    4c4a:	f7ff fe79 	bl	4940 <update_cache>
    4c4e:	2001      	movs	r0, #1
	__asm__ volatile(
    4c50:	f388 8811 	msr	BASEPRI, r8
    4c54:	f3bf 8f6f 	isb	sy
}
    4c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    4c5c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    4c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c62:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4c64:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    4c66:	e7ef      	b.n	4c48 <z_set_prio+0x5c>
			thread->base.prio = prio;
    4c68:	2000      	movs	r0, #0
    4c6a:	73a6      	strb	r6, [r4, #14]
    4c6c:	e7f0      	b.n	4c50 <z_set_prio+0x64>
    4c6e:	bf00      	nop
    4c70:	200155f0 	.word	0x200155f0

00004c74 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c74:	3101      	adds	r1, #1
    4c76:	bf08      	it	eq
    4c78:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    4c7c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4c7e:	d106      	bne.n	4c8e <z_impl_k_sleep+0x1a>
		k_thread_suspend(_current);
    4c80:	4b04      	ldr	r3, [pc, #16]	; (4c94 <z_impl_k_sleep+0x20>)
    4c82:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4c84:	f7ff feb6 	bl	49f4 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4c88:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    4c8c:	bd08      	pop	{r3, pc}
	return k_ticks_to_ms_floor64(ticks);
    4c8e:	2000      	movs	r0, #0
    4c90:	e7fc      	b.n	4c8c <z_impl_k_sleep+0x18>
    4c92:	bf00      	nop
    4c94:	200155f0 	.word	0x200155f0

00004c98 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4c98:	4b01      	ldr	r3, [pc, #4]	; (4ca0 <z_impl_k_current_get+0x8>)
    4c9a:	6898      	ldr	r0, [r3, #8]
    4c9c:	4770      	bx	lr
    4c9e:	bf00      	nop
    4ca0:	200155f0 	.word	0x200155f0

00004ca4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    4ca4:	b508      	push	{r3, lr}
	__asm__ volatile(
    4ca6:	f04f 0320 	mov.w	r3, #32
    4caa:	f3ef 8411 	mrs	r4, BASEPRI
    4cae:	f383 8811 	msr	BASEPRI, r3
    4cb2:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    4cb6:	4b04      	ldr	r3, [pc, #16]	; (4cc8 <z_self_abort+0x24>)
    4cb8:	6898      	ldr	r0, [r3, #8]
    4cba:	6118      	str	r0, [r3, #16]
    4cbc:	f7ff fe9a 	bl	49f4 <z_impl_k_thread_suspend>
    4cc0:	4620      	mov	r0, r4
    4cc2:	f7fd f9b1 	bl	2028 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4cc6:	bf00      	nop
    4cc8:	200155f0 	.word	0x200155f0

00004ccc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    4ccc:	4a02      	ldr	r2, [pc, #8]	; (4cd8 <boot_banner+0xc>)
    4cce:	4903      	ldr	r1, [pc, #12]	; (4cdc <boot_banner+0x10>)
    4cd0:	4803      	ldr	r0, [pc, #12]	; (4ce0 <boot_banner+0x14>)
    4cd2:	f000 bde4 	b.w	589e <printk>
    4cd6:	bf00      	nop
    4cd8:	000092f9 	.word	0x000092f9
    4cdc:	00009364 	.word	0x00009364
    4ce0:	00009371 	.word	0x00009371

00004ce4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    4ce4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    4ce6:	4806      	ldr	r0, [pc, #24]	; (4d00 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    4ce8:	4a06      	ldr	r2, [pc, #24]	; (4d04 <z_data_copy+0x20>)
    4cea:	4907      	ldr	r1, [pc, #28]	; (4d08 <z_data_copy+0x24>)
    4cec:	1a12      	subs	r2, r2, r0
    4cee:	f001 f942 	bl	5f76 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    4cf6:	4a05      	ldr	r2, [pc, #20]	; (4d0c <z_data_copy+0x28>)
    4cf8:	4905      	ldr	r1, [pc, #20]	; (4d10 <z_data_copy+0x2c>)
    4cfa:	4806      	ldr	r0, [pc, #24]	; (4d14 <z_data_copy+0x30>)
    4cfc:	f001 b93b 	b.w	5f76 <memcpy>
    4d00:	20014500 	.word	0x20014500
    4d04:	200146cc 	.word	0x200146cc
    4d08:	000093b0 	.word	0x000093b0
    4d0c:	00000000 	.word	0x00000000
    4d10:	00009398 	.word	0x00009398
    4d14:	20014500 	.word	0x20014500

00004d18 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    4d18:	4b03      	ldr	r3, [pc, #12]	; (4d28 <elapsed+0x10>)
    4d1a:	681b      	ldr	r3, [r3, #0]
    4d1c:	b90b      	cbnz	r3, 4d22 <elapsed+0xa>
    4d1e:	f7fd b8a7 	b.w	1e70 <z_clock_elapsed>
}
    4d22:	2000      	movs	r0, #0
    4d24:	4770      	bx	lr
    4d26:	bf00      	nop
    4d28:	20015620 	.word	0x20015620

00004d2c <remove_timeout>:
{
    4d2c:	b530      	push	{r4, r5, lr}
    4d2e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4d30:	b168      	cbz	r0, 4d4e <remove_timeout+0x22>
    4d32:	4a0a      	ldr	r2, [pc, #40]	; (4d5c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    4d34:	6852      	ldr	r2, [r2, #4]
    4d36:	4290      	cmp	r0, r2
    4d38:	d009      	beq.n	4d4e <remove_timeout+0x22>
	if (next(t) != NULL) {
    4d3a:	b143      	cbz	r3, 4d4e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4d3c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4d40:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4d44:	1912      	adds	r2, r2, r4
    4d46:	eb45 0101 	adc.w	r1, r5, r1
    4d4a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    4d4e:	6842      	ldr	r2, [r0, #4]
    4d50:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4d52:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4d54:	2300      	movs	r3, #0
	node->prev = NULL;
    4d56:	e9c0 3300 	strd	r3, r3, [r0]
}
    4d5a:	bd30      	pop	{r4, r5, pc}
    4d5c:	200145a0 	.word	0x200145a0

00004d60 <next_timeout>:

static int32_t next_timeout(void)
{
    4d60:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4d62:	4b10      	ldr	r3, [pc, #64]	; (4da4 <next_timeout+0x44>)
    4d64:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4d66:	429c      	cmp	r4, r3
    4d68:	bf08      	it	eq
    4d6a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4d6c:	f7ff ffd4 	bl	4d18 <elapsed>
    4d70:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4d72:	b18c      	cbz	r4, 4d98 <next_timeout+0x38>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4d74:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4d78:	1b40      	subs	r0, r0, r5
    4d7a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    4d7e:	2801      	cmp	r0, #1
    4d80:	f171 0300 	sbcs.w	r3, r1, #0
    4d84:	db0b      	blt.n	4d9e <next_timeout+0x3e>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4d86:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4d8a:	2300      	movs	r3, #0
    4d8c:	4282      	cmp	r2, r0
    4d8e:	eb73 0401 	sbcs.w	r4, r3, r1
    4d92:	da00      	bge.n	4d96 <next_timeout+0x36>
    4d94:	4610      	mov	r0, r2
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    4d96:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    4d98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4d9c:	e7fb      	b.n	4d96 <next_timeout+0x36>
    4d9e:	2000      	movs	r0, #0
	return ret;
    4da0:	e7f9      	b.n	4d96 <next_timeout+0x36>
    4da2:	bf00      	nop
    4da4:	200145a0 	.word	0x200145a0

00004da8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    4da8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dac:	9101      	str	r1, [sp, #4]
    4dae:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4db0:	1c4b      	adds	r3, r1, #1
    4db2:	bf08      	it	eq
    4db4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4db8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4dba:	d06b      	beq.n	4e94 <z_add_timeout+0xec>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4dbc:	f06f 0301 	mvn.w	r3, #1
    4dc0:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    4dc4:	1c54      	adds	r4, r2, #1
    4dc6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    4dca:	ebb3 0804 	subs.w	r8, r3, r4
    4dce:	eb6b 0905 	sbc.w	r9, fp, r5
    4dd2:	f1b8 0f00 	cmp.w	r8, #0
    4dd6:	f179 0300 	sbcs.w	r3, r9, #0
    4dda:	db0f      	blt.n	4dfc <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    4ddc:	f7ff ff9c 	bl	4d18 <elapsed>
    4de0:	f06f 0301 	mvn.w	r3, #1
    4de4:	4a32      	ldr	r2, [pc, #200]	; (4eb0 <z_add_timeout+0x108>)
    4de6:	e9d2 1c00 	ldrd	r1, ip, [r2]
    4dea:	1a5b      	subs	r3, r3, r1
    4dec:	eb6b 020c 	sbc.w	r2, fp, ip
    4df0:	1b1e      	subs	r6, r3, r4
    4df2:	eb62 0705 	sbc.w	r7, r2, r5
    4df6:	1a34      	subs	r4, r6, r0
    4df8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4dfc:	9b01      	ldr	r3, [sp, #4]
    4dfe:	f8ca 3008 	str.w	r3, [sl, #8]
    4e02:	f04f 0320 	mov.w	r3, #32
    4e06:	f3ef 8611 	mrs	r6, BASEPRI
    4e0a:	f383 8811 	msr	BASEPRI, r3
    4e0e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    4e12:	f7ff ff81 	bl	4d18 <elapsed>
	ticks = MAX(1, ticks);
    4e16:	2c01      	cmp	r4, #1
    4e18:	f175 0300 	sbcs.w	r3, r5, #0
    4e1c:	bfbc      	itt	lt
    4e1e:	2401      	movlt	r4, #1
    4e20:	2500      	movlt	r5, #0
	return list->head == list;
    4e22:	4b24      	ldr	r3, [pc, #144]	; (4eb4 <z_add_timeout+0x10c>)
		to->dticks = ticks + elapsed();
    4e24:	1824      	adds	r4, r4, r0
    4e26:	681a      	ldr	r2, [r3, #0]
    4e28:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e2c:	429a      	cmp	r2, r3
    4e2e:	e9ca 4504 	strd	r4, r5, [sl, #16]
    4e32:	d001      	beq.n	4e38 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4e34:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    4e36:	b952      	cbnz	r2, 4e4e <z_add_timeout+0xa6>
	node->prev = list->tail;
    4e38:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4e3a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    4e3e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    4e42:	685a      	ldr	r2, [r3, #4]
    4e44:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    4e48:	f8c3 a004 	str.w	sl, [r3, #4]
}
    4e4c:	e014      	b.n	4e78 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
    4e4e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    4e52:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    4e56:	4544      	cmp	r4, r8
    4e58:	eb75 0109 	sbcs.w	r1, r5, r9
    4e5c:	da1d      	bge.n	4e9a <z_add_timeout+0xf2>
				t->dticks -= to->dticks;
    4e5e:	ebb8 0004 	subs.w	r0, r8, r4
    4e62:	eb69 0105 	sbc.w	r1, r9, r5
    4e66:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    4e6a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4e6c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    4e70:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    4e74:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    4e78:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e7a:	429a      	cmp	r2, r3
    4e7c:	d006      	beq.n	4e8c <z_add_timeout+0xe4>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4e7e:	4592      	cmp	sl, r2
    4e80:	d104      	bne.n	4e8c <z_add_timeout+0xe4>
			if (next_time == 0 ||
			    _current_cpu->slice_ticks != next_time) {
				z_clock_set_timeout(next_time, false);
			}
#else
			z_clock_set_timeout(next_timeout(), false);
    4e82:	f7ff ff6d 	bl	4d60 <next_timeout>
    4e86:	2100      	movs	r1, #0
    4e88:	f7fc ffc0 	bl	1e0c <z_clock_set_timeout>
	__asm__ volatile(
    4e8c:	f386 8811 	msr	BASEPRI, r6
    4e90:	f3bf 8f6f 	isb	sy
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4e94:	b003      	add	sp, #12
    4e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    4e9a:	ebb4 0008 	subs.w	r0, r4, r8
    4e9e:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    4ea2:	42ba      	cmp	r2, r7
    4ea4:	e9ca 0104 	strd	r0, r1, [sl, #16]
    4ea8:	d0c6      	beq.n	4e38 <z_add_timeout+0x90>
    4eaa:	6812      	ldr	r2, [r2, #0]
    4eac:	e7c3      	b.n	4e36 <z_add_timeout+0x8e>
    4eae:	bf00      	nop
    4eb0:	20014750 	.word	0x20014750
    4eb4:	200145a0 	.word	0x200145a0

00004eb8 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    4eb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    4ebc:	f04f 0320 	mov.w	r3, #32
    4ec0:	f3ef 8411 	mrs	r4, BASEPRI
    4ec4:	f383 8811 	msr	BASEPRI, r3
    4ec8:	f3bf 8f6f 	isb	sy
	z_time_slice(ticks);
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4ecc:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 4f7c <z_clock_announce+0xc4>
    4ed0:	4d29      	ldr	r5, [pc, #164]	; (4f78 <z_clock_announce+0xc0>)
    4ed2:	4651      	mov	r1, sl
	return list->head == list;
    4ed4:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 4f80 <z_clock_announce+0xc8>
    4ed8:	6028      	str	r0, [r5, #0]
    4eda:	f8d5 c000 	ldr.w	ip, [r5]
    4ede:	f8db 0000 	ldr.w	r0, [fp]
    4ee2:	4662      	mov	r2, ip
    4ee4:	e9da 8900 	ldrd	r8, r9, [sl]
    4ee8:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4eea:	4558      	cmp	r0, fp
    4eec:	e9cd 2300 	strd	r2, r3, [sp]
    4ef0:	d00d      	beq.n	4f0e <z_clock_announce+0x56>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4ef2:	b160      	cbz	r0, 4f0e <z_clock_announce+0x56>
    4ef4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4ef8:	45b4      	cmp	ip, r6
    4efa:	41bb      	sbcs	r3, r7
    4efc:	da1d      	bge.n	4f3a <z_clock_announce+0x82>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4efe:	9b00      	ldr	r3, [sp, #0]
    4f00:	ebb6 0c03 	subs.w	ip, r6, r3
    4f04:	9b01      	ldr	r3, [sp, #4]
    4f06:	eb67 0603 	sbc.w	r6, r7, r3
    4f0a:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
    4f0e:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
    4f10:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
    4f12:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
    4f14:	eb13 0208 	adds.w	r2, r3, r8
    4f18:	9b01      	ldr	r3, [sp, #4]
    4f1a:	eb43 0309 	adc.w	r3, r3, r9
    4f1e:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
    4f22:	f7ff ff1d 	bl	4d60 <next_timeout>
    4f26:	4631      	mov	r1, r6
    4f28:	f7fc ff70 	bl	1e0c <z_clock_set_timeout>
	__asm__ volatile(
    4f2c:	f384 8811 	msr	BASEPRI, r4
    4f30:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4f34:	b003      	add	sp, #12
    4f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
    4f3a:	2200      	movs	r2, #0
    4f3c:	2300      	movs	r3, #0
		curr_tick += dt;
    4f3e:	eb18 0806 	adds.w	r8, r8, r6
    4f42:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    4f46:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    4f4a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    4f4e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    4f52:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    4f54:	f7ff feea 	bl	4d2c <remove_timeout>
    4f58:	f384 8811 	msr	BASEPRI, r4
    4f5c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4f60:	6883      	ldr	r3, [r0, #8]
    4f62:	4798      	blx	r3
	__asm__ volatile(
    4f64:	f04f 0320 	mov.w	r3, #32
    4f68:	f3ef 8411 	mrs	r4, BASEPRI
    4f6c:	f383 8811 	msr	BASEPRI, r3
    4f70:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    4f74:	4901      	ldr	r1, [pc, #4]	; (4f7c <z_clock_announce+0xc4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4f76:	e7b0      	b.n	4eda <z_clock_announce+0x22>
    4f78:	20015620 	.word	0x20015620
    4f7c:	20014750 	.word	0x20014750
    4f80:	200145a0 	.word	0x200145a0

00004f84 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    4f84:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4f86:	4c06      	ldr	r4, [pc, #24]	; (4fa0 <statics_init+0x1c>)
    4f88:	4d06      	ldr	r5, [pc, #24]	; (4fa4 <statics_init+0x20>)
    4f8a:	42ac      	cmp	r4, r5
    4f8c:	d301      	bcc.n	4f92 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    4f8e:	2000      	movs	r0, #0
    4f90:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4f92:	4620      	mov	r0, r4
    4f94:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4f98:	f003 f81e 	bl	7fd8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4f9c:	3414      	adds	r4, #20
    4f9e:	e7f4      	b.n	4f8a <statics_init+0x6>
    4fa0:	2001467c 	.word	0x2001467c
    4fa4:	2001467c 	.word	0x2001467c

00004fa8 <nrf_cc3xx_platform_init_no_rng>:
    4fa8:	b510      	push	{r4, lr}
    4faa:	4c0a      	ldr	r4, [pc, #40]	; (4fd4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4fac:	6823      	ldr	r3, [r4, #0]
    4fae:	b11b      	cbz	r3, 4fb8 <nrf_cc3xx_platform_init_no_rng+0x10>
    4fb0:	2301      	movs	r3, #1
    4fb2:	2000      	movs	r0, #0
    4fb4:	6023      	str	r3, [r4, #0]
    4fb6:	bd10      	pop	{r4, pc}
    4fb8:	f000 f8ae 	bl	5118 <CC_LibInitNoRng>
    4fbc:	2800      	cmp	r0, #0
    4fbe:	d0f7      	beq.n	4fb0 <nrf_cc3xx_platform_init_no_rng+0x8>
    4fc0:	3801      	subs	r0, #1
    4fc2:	2806      	cmp	r0, #6
    4fc4:	d803      	bhi.n	4fce <nrf_cc3xx_platform_init_no_rng+0x26>
    4fc6:	4b04      	ldr	r3, [pc, #16]	; (4fd8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4fc8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4fcc:	bd10      	pop	{r4, pc}
    4fce:	4803      	ldr	r0, [pc, #12]	; (4fdc <nrf_cc3xx_platform_init_no_rng+0x34>)
    4fd0:	bd10      	pop	{r4, pc}
    4fd2:	bf00      	nop
    4fd4:	20015624 	.word	0x20015624
    4fd8:	0000860c 	.word	0x0000860c
    4fdc:	ffff8ffe 	.word	0xffff8ffe

00004fe0 <nrf_cc3xx_platform_abort>:
    4fe0:	f3bf 8f4f 	dsb	sy
    4fe4:	4905      	ldr	r1, [pc, #20]	; (4ffc <nrf_cc3xx_platform_abort+0x1c>)
    4fe6:	4b06      	ldr	r3, [pc, #24]	; (5000 <nrf_cc3xx_platform_abort+0x20>)
    4fe8:	68ca      	ldr	r2, [r1, #12]
    4fea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4fee:	4313      	orrs	r3, r2
    4ff0:	60cb      	str	r3, [r1, #12]
    4ff2:	f3bf 8f4f 	dsb	sy
    4ff6:	bf00      	nop
    4ff8:	e7fd      	b.n	4ff6 <nrf_cc3xx_platform_abort+0x16>
    4ffa:	bf00      	nop
    4ffc:	e000ed00 	.word	0xe000ed00
    5000:	05fa0004 	.word	0x05fa0004

00005004 <CC_PalAbort>:
    5004:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    5008:	2100      	movs	r1, #0
    500a:	b430      	push	{r4, r5}
    500c:	4a06      	ldr	r2, [pc, #24]	; (5028 <CC_PalAbort+0x24>)
    500e:	4d07      	ldr	r5, [pc, #28]	; (502c <CC_PalAbort+0x28>)
    5010:	4c07      	ldr	r4, [pc, #28]	; (5030 <CC_PalAbort+0x2c>)
    5012:	602b      	str	r3, [r5, #0]
    5014:	6013      	str	r3, [r2, #0]
    5016:	6023      	str	r3, [r4, #0]
    5018:	4a06      	ldr	r2, [pc, #24]	; (5034 <CC_PalAbort+0x30>)
    501a:	4c07      	ldr	r4, [pc, #28]	; (5038 <CC_PalAbort+0x34>)
    501c:	60eb      	str	r3, [r5, #12]
    501e:	6863      	ldr	r3, [r4, #4]
    5020:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    5024:	bc30      	pop	{r4, r5}
    5026:	4718      	bx	r3
    5028:	50841404 	.word	0x50841404
    502c:	50841400 	.word	0x50841400
    5030:	50841408 	.word	0x50841408
    5034:	50840000 	.word	0x50840000
    5038:	200145a8 	.word	0x200145a8

0000503c <nrf_cc3xx_platform_set_abort>:
    503c:	4b02      	ldr	r3, [pc, #8]	; (5048 <nrf_cc3xx_platform_set_abort+0xc>)
    503e:	e9d0 1200 	ldrd	r1, r2, [r0]
    5042:	e9c3 1200 	strd	r1, r2, [r3]
    5046:	4770      	bx	lr
    5048:	200145a8 	.word	0x200145a8

0000504c <mutex_unlock>:
    504c:	b148      	cbz	r0, 5062 <mutex_unlock+0x16>
    504e:	6843      	ldr	r3, [r0, #4]
    5050:	b12b      	cbz	r3, 505e <mutex_unlock+0x12>
    5052:	f3bf 8f5f 	dmb	sy
    5056:	2300      	movs	r3, #0
    5058:	6003      	str	r3, [r0, #0]
    505a:	4618      	mov	r0, r3
    505c:	4770      	bx	lr
    505e:	4802      	ldr	r0, [pc, #8]	; (5068 <mutex_unlock+0x1c>)
    5060:	4770      	bx	lr
    5062:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5066:	4770      	bx	lr
    5068:	ffff8fea 	.word	0xffff8fea

0000506c <mutex_free>:
    506c:	b510      	push	{r4, lr}
    506e:	4604      	mov	r4, r0
    5070:	b128      	cbz	r0, 507e <mutex_free+0x12>
    5072:	6863      	ldr	r3, [r4, #4]
    5074:	b113      	cbz	r3, 507c <mutex_free+0x10>
    5076:	2300      	movs	r3, #0
    5078:	6023      	str	r3, [r4, #0]
    507a:	6063      	str	r3, [r4, #4]
    507c:	bd10      	pop	{r4, pc}
    507e:	4b02      	ldr	r3, [pc, #8]	; (5088 <mutex_free+0x1c>)
    5080:	4802      	ldr	r0, [pc, #8]	; (508c <mutex_free+0x20>)
    5082:	685b      	ldr	r3, [r3, #4]
    5084:	4798      	blx	r3
    5086:	e7f4      	b.n	5072 <mutex_free+0x6>
    5088:	200145a8 	.word	0x200145a8
    508c:	00008628 	.word	0x00008628

00005090 <mutex_init>:
    5090:	b510      	push	{r4, lr}
    5092:	4604      	mov	r4, r0
    5094:	b130      	cbz	r0, 50a4 <mutex_init+0x14>
    5096:	2200      	movs	r2, #0
    5098:	6863      	ldr	r3, [r4, #4]
    509a:	6022      	str	r2, [r4, #0]
    509c:	f043 0301 	orr.w	r3, r3, #1
    50a0:	6063      	str	r3, [r4, #4]
    50a2:	bd10      	pop	{r4, pc}
    50a4:	4801      	ldr	r0, [pc, #4]	; (50ac <mutex_init+0x1c>)
    50a6:	f7ff ffad 	bl	5004 <CC_PalAbort>
    50aa:	e7f4      	b.n	5096 <mutex_init+0x6>
    50ac:	00008650 	.word	0x00008650

000050b0 <mutex_lock>:
    50b0:	b180      	cbz	r0, 50d4 <mutex_lock+0x24>
    50b2:	6843      	ldr	r3, [r0, #4]
    50b4:	b163      	cbz	r3, 50d0 <mutex_lock+0x20>
    50b6:	2201      	movs	r2, #1
    50b8:	e8d0 3fef 	ldaex	r3, [r0]
    50bc:	e8c0 2fe1 	stlex	r1, r2, [r0]
    50c0:	2900      	cmp	r1, #0
    50c2:	d1f9      	bne.n	50b8 <mutex_lock+0x8>
    50c4:	2b01      	cmp	r3, #1
    50c6:	d0f7      	beq.n	50b8 <mutex_lock+0x8>
    50c8:	f3bf 8f5f 	dmb	sy
    50cc:	2000      	movs	r0, #0
    50ce:	4770      	bx	lr
    50d0:	4802      	ldr	r0, [pc, #8]	; (50dc <mutex_lock+0x2c>)
    50d2:	4770      	bx	lr
    50d4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    50d8:	4770      	bx	lr
    50da:	bf00      	nop
    50dc:	ffff8fea 	.word	0xffff8fea

000050e0 <nrf_cc3xx_platform_set_mutexes>:
    50e0:	b470      	push	{r4, r5, r6}
    50e2:	4b0b      	ldr	r3, [pc, #44]	; (5110 <nrf_cc3xx_platform_set_mutexes+0x30>)
    50e4:	6806      	ldr	r6, [r0, #0]
    50e6:	68c2      	ldr	r2, [r0, #12]
    50e8:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    50ec:	e9c3 4202 	strd	r4, r2, [r3, #8]
    50f0:	e9c3 6500 	strd	r6, r5, [r3]
    50f4:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    50f8:	680e      	ldr	r6, [r1, #0]
    50fa:	4b06      	ldr	r3, [pc, #24]	; (5114 <nrf_cc3xx_platform_set_mutexes+0x34>)
    50fc:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    5100:	e9c3 6500 	strd	r6, r5, [r3]
    5104:	e9c3 4002 	strd	r4, r0, [r3, #8]
    5108:	611a      	str	r2, [r3, #16]
    510a:	bc70      	pop	{r4, r5, r6}
    510c:	4770      	bx	lr
    510e:	bf00      	nop
    5110:	200145b8 	.word	0x200145b8
    5114:	200145c8 	.word	0x200145c8

00005118 <CC_LibInitNoRng>:
    5118:	b510      	push	{r4, lr}
    511a:	f000 f833 	bl	5184 <CC_HalInit>
    511e:	b120      	cbz	r0, 512a <CC_LibInitNoRng+0x12>
    5120:	2403      	movs	r4, #3
    5122:	f000 f867 	bl	51f4 <CC_PalTerminate>
    5126:	4620      	mov	r0, r4
    5128:	bd10      	pop	{r4, pc}
    512a:	f000 f835 	bl	5198 <CC_PalInit>
    512e:	b990      	cbnz	r0, 5156 <CC_LibInitNoRng+0x3e>
    5130:	f000 f8b0 	bl	5294 <CC_PalPowerSaveModeSelect>
    5134:	b990      	cbnz	r0, 515c <CC_LibInitNoRng+0x44>
    5136:	4b0f      	ldr	r3, [pc, #60]	; (5174 <CC_LibInitNoRng+0x5c>)
    5138:	681b      	ldr	r3, [r3, #0]
    513a:	0e1b      	lsrs	r3, r3, #24
    513c:	2bf0      	cmp	r3, #240	; 0xf0
    513e:	d108      	bne.n	5152 <CC_LibInitNoRng+0x3a>
    5140:	4a0d      	ldr	r2, [pc, #52]	; (5178 <CC_LibInitNoRng+0x60>)
    5142:	4b0e      	ldr	r3, [pc, #56]	; (517c <CC_LibInitNoRng+0x64>)
    5144:	6812      	ldr	r2, [r2, #0]
    5146:	429a      	cmp	r2, r3
    5148:	d00a      	beq.n	5160 <CC_LibInitNoRng+0x48>
    514a:	2407      	movs	r4, #7
    514c:	f000 f81c 	bl	5188 <CC_HalTerminate>
    5150:	e7e7      	b.n	5122 <CC_LibInitNoRng+0xa>
    5152:	2406      	movs	r4, #6
    5154:	e7fa      	b.n	514c <CC_LibInitNoRng+0x34>
    5156:	2404      	movs	r4, #4
    5158:	4620      	mov	r0, r4
    515a:	bd10      	pop	{r4, pc}
    515c:	2400      	movs	r4, #0
    515e:	e7f5      	b.n	514c <CC_LibInitNoRng+0x34>
    5160:	2001      	movs	r0, #1
    5162:	f000 f897 	bl	5294 <CC_PalPowerSaveModeSelect>
    5166:	4604      	mov	r4, r0
    5168:	2800      	cmp	r0, #0
    516a:	d1f7      	bne.n	515c <CC_LibInitNoRng+0x44>
    516c:	4b04      	ldr	r3, [pc, #16]	; (5180 <CC_LibInitNoRng+0x68>)
    516e:	6018      	str	r0, [r3, #0]
    5170:	e7d9      	b.n	5126 <CC_LibInitNoRng+0xe>
    5172:	bf00      	nop
    5174:	50841928 	.word	0x50841928
    5178:	50841a24 	.word	0x50841a24
    517c:	20e00000 	.word	0x20e00000
    5180:	50841a0c 	.word	0x50841a0c

00005184 <CC_HalInit>:
    5184:	2000      	movs	r0, #0
    5186:	4770      	bx	lr

00005188 <CC_HalTerminate>:
    5188:	2000      	movs	r0, #0
    518a:	4770      	bx	lr

0000518c <CC_HalMaskInterrupt>:
    518c:	4b01      	ldr	r3, [pc, #4]	; (5194 <CC_HalMaskInterrupt+0x8>)
    518e:	6018      	str	r0, [r3, #0]
    5190:	4770      	bx	lr
    5192:	bf00      	nop
    5194:	50841a04 	.word	0x50841a04

00005198 <CC_PalInit>:
    5198:	b510      	push	{r4, lr}
    519a:	4811      	ldr	r0, [pc, #68]	; (51e0 <CC_PalInit+0x48>)
    519c:	f000 f848 	bl	5230 <CC_PalMutexCreate>
    51a0:	b100      	cbz	r0, 51a4 <CC_PalInit+0xc>
    51a2:	bd10      	pop	{r4, pc}
    51a4:	480f      	ldr	r0, [pc, #60]	; (51e4 <CC_PalInit+0x4c>)
    51a6:	f000 f843 	bl	5230 <CC_PalMutexCreate>
    51aa:	2800      	cmp	r0, #0
    51ac:	d1f9      	bne.n	51a2 <CC_PalInit+0xa>
    51ae:	4c0e      	ldr	r4, [pc, #56]	; (51e8 <CC_PalInit+0x50>)
    51b0:	4620      	mov	r0, r4
    51b2:	f000 f83d 	bl	5230 <CC_PalMutexCreate>
    51b6:	2800      	cmp	r0, #0
    51b8:	d1f3      	bne.n	51a2 <CC_PalInit+0xa>
    51ba:	4b0c      	ldr	r3, [pc, #48]	; (51ec <CC_PalInit+0x54>)
    51bc:	480c      	ldr	r0, [pc, #48]	; (51f0 <CC_PalInit+0x58>)
    51be:	601c      	str	r4, [r3, #0]
    51c0:	f000 f836 	bl	5230 <CC_PalMutexCreate>
    51c4:	4601      	mov	r1, r0
    51c6:	2800      	cmp	r0, #0
    51c8:	d1eb      	bne.n	51a2 <CC_PalInit+0xa>
    51ca:	f000 f82d 	bl	5228 <CC_PalDmaInit>
    51ce:	4604      	mov	r4, r0
    51d0:	b108      	cbz	r0, 51d6 <CC_PalInit+0x3e>
    51d2:	4620      	mov	r0, r4
    51d4:	bd10      	pop	{r4, pc}
    51d6:	f000 f83f 	bl	5258 <CC_PalPowerSaveModeInit>
    51da:	4620      	mov	r0, r4
    51dc:	e7fa      	b.n	51d4 <CC_PalInit+0x3c>
    51de:	bf00      	nop
    51e0:	20014600 	.word	0x20014600
    51e4:	200145f4 	.word	0x200145f4
    51e8:	200145fc 	.word	0x200145fc
    51ec:	20014604 	.word	0x20014604
    51f0:	200145f8 	.word	0x200145f8

000051f4 <CC_PalTerminate>:
    51f4:	b508      	push	{r3, lr}
    51f6:	4808      	ldr	r0, [pc, #32]	; (5218 <CC_PalTerminate+0x24>)
    51f8:	f000 f824 	bl	5244 <CC_PalMutexDestroy>
    51fc:	4807      	ldr	r0, [pc, #28]	; (521c <CC_PalTerminate+0x28>)
    51fe:	f000 f821 	bl	5244 <CC_PalMutexDestroy>
    5202:	4807      	ldr	r0, [pc, #28]	; (5220 <CC_PalTerminate+0x2c>)
    5204:	f000 f81e 	bl	5244 <CC_PalMutexDestroy>
    5208:	4806      	ldr	r0, [pc, #24]	; (5224 <CC_PalTerminate+0x30>)
    520a:	f000 f81b 	bl	5244 <CC_PalMutexDestroy>
    520e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5212:	f000 b80b 	b.w	522c <CC_PalDmaTerminate>
    5216:	bf00      	nop
    5218:	20014600 	.word	0x20014600
    521c:	200145f4 	.word	0x200145f4
    5220:	200145fc 	.word	0x200145fc
    5224:	200145f8 	.word	0x200145f8

00005228 <CC_PalDmaInit>:
    5228:	2000      	movs	r0, #0
    522a:	4770      	bx	lr

0000522c <CC_PalDmaTerminate>:
    522c:	4770      	bx	lr
    522e:	bf00      	nop

00005230 <CC_PalMutexCreate>:
    5230:	b508      	push	{r3, lr}
    5232:	4b03      	ldr	r3, [pc, #12]	; (5240 <CC_PalMutexCreate+0x10>)
    5234:	6802      	ldr	r2, [r0, #0]
    5236:	681b      	ldr	r3, [r3, #0]
    5238:	6810      	ldr	r0, [r2, #0]
    523a:	4798      	blx	r3
    523c:	2000      	movs	r0, #0
    523e:	bd08      	pop	{r3, pc}
    5240:	200145b8 	.word	0x200145b8

00005244 <CC_PalMutexDestroy>:
    5244:	b508      	push	{r3, lr}
    5246:	4b03      	ldr	r3, [pc, #12]	; (5254 <CC_PalMutexDestroy+0x10>)
    5248:	6802      	ldr	r2, [r0, #0]
    524a:	685b      	ldr	r3, [r3, #4]
    524c:	6810      	ldr	r0, [r2, #0]
    524e:	4798      	blx	r3
    5250:	2000      	movs	r0, #0
    5252:	bd08      	pop	{r3, pc}
    5254:	200145b8 	.word	0x200145b8

00005258 <CC_PalPowerSaveModeInit>:
    5258:	b570      	push	{r4, r5, r6, lr}
    525a:	4c09      	ldr	r4, [pc, #36]	; (5280 <CC_PalPowerSaveModeInit+0x28>)
    525c:	4d09      	ldr	r5, [pc, #36]	; (5284 <CC_PalPowerSaveModeInit+0x2c>)
    525e:	6920      	ldr	r0, [r4, #16]
    5260:	68ab      	ldr	r3, [r5, #8]
    5262:	4798      	blx	r3
    5264:	b118      	cbz	r0, 526e <CC_PalPowerSaveModeInit+0x16>
    5266:	4b08      	ldr	r3, [pc, #32]	; (5288 <CC_PalPowerSaveModeInit+0x30>)
    5268:	4808      	ldr	r0, [pc, #32]	; (528c <CC_PalPowerSaveModeInit+0x34>)
    526a:	685b      	ldr	r3, [r3, #4]
    526c:	4798      	blx	r3
    526e:	2100      	movs	r1, #0
    5270:	4a07      	ldr	r2, [pc, #28]	; (5290 <CC_PalPowerSaveModeInit+0x38>)
    5272:	68eb      	ldr	r3, [r5, #12]
    5274:	6011      	str	r1, [r2, #0]
    5276:	6920      	ldr	r0, [r4, #16]
    5278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    527c:	4718      	bx	r3
    527e:	bf00      	nop
    5280:	200145c8 	.word	0x200145c8
    5284:	200145b8 	.word	0x200145b8
    5288:	200145a8 	.word	0x200145a8
    528c:	00008674 	.word	0x00008674
    5290:	20015638 	.word	0x20015638

00005294 <CC_PalPowerSaveModeSelect>:
    5294:	b570      	push	{r4, r5, r6, lr}
    5296:	4d1a      	ldr	r5, [pc, #104]	; (5300 <CC_PalPowerSaveModeSelect+0x6c>)
    5298:	4e1a      	ldr	r6, [pc, #104]	; (5304 <CC_PalPowerSaveModeSelect+0x70>)
    529a:	4604      	mov	r4, r0
    529c:	68b2      	ldr	r2, [r6, #8]
    529e:	6928      	ldr	r0, [r5, #16]
    52a0:	4790      	blx	r2
    52a2:	b9f0      	cbnz	r0, 52e2 <CC_PalPowerSaveModeSelect+0x4e>
    52a4:	b15c      	cbz	r4, 52be <CC_PalPowerSaveModeSelect+0x2a>
    52a6:	4c18      	ldr	r4, [pc, #96]	; (5308 <CC_PalPowerSaveModeSelect+0x74>)
    52a8:	6823      	ldr	r3, [r4, #0]
    52aa:	b1ab      	cbz	r3, 52d8 <CC_PalPowerSaveModeSelect+0x44>
    52ac:	2b01      	cmp	r3, #1
    52ae:	d01a      	beq.n	52e6 <CC_PalPowerSaveModeSelect+0x52>
    52b0:	3b01      	subs	r3, #1
    52b2:	6023      	str	r3, [r4, #0]
    52b4:	6928      	ldr	r0, [r5, #16]
    52b6:	68f3      	ldr	r3, [r6, #12]
    52b8:	4798      	blx	r3
    52ba:	2000      	movs	r0, #0
    52bc:	bd70      	pop	{r4, r5, r6, pc}
    52be:	4c12      	ldr	r4, [pc, #72]	; (5308 <CC_PalPowerSaveModeSelect+0x74>)
    52c0:	6821      	ldr	r1, [r4, #0]
    52c2:	b939      	cbnz	r1, 52d4 <CC_PalPowerSaveModeSelect+0x40>
    52c4:	2001      	movs	r0, #1
    52c6:	4b11      	ldr	r3, [pc, #68]	; (530c <CC_PalPowerSaveModeSelect+0x78>)
    52c8:	4a11      	ldr	r2, [pc, #68]	; (5310 <CC_PalPowerSaveModeSelect+0x7c>)
    52ca:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    52ce:	6813      	ldr	r3, [r2, #0]
    52d0:	2b00      	cmp	r3, #0
    52d2:	d1fc      	bne.n	52ce <CC_PalPowerSaveModeSelect+0x3a>
    52d4:	3101      	adds	r1, #1
    52d6:	6021      	str	r1, [r4, #0]
    52d8:	68f3      	ldr	r3, [r6, #12]
    52da:	6928      	ldr	r0, [r5, #16]
    52dc:	4798      	blx	r3
    52de:	2000      	movs	r0, #0
    52e0:	bd70      	pop	{r4, r5, r6, pc}
    52e2:	480c      	ldr	r0, [pc, #48]	; (5314 <CC_PalPowerSaveModeSelect+0x80>)
    52e4:	bd70      	pop	{r4, r5, r6, pc}
    52e6:	4a0a      	ldr	r2, [pc, #40]	; (5310 <CC_PalPowerSaveModeSelect+0x7c>)
    52e8:	6813      	ldr	r3, [r2, #0]
    52ea:	2b00      	cmp	r3, #0
    52ec:	d1fc      	bne.n	52e8 <CC_PalPowerSaveModeSelect+0x54>
    52ee:	4a07      	ldr	r2, [pc, #28]	; (530c <CC_PalPowerSaveModeSelect+0x78>)
    52f0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    52f4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    52f8:	f7ff ff48 	bl	518c <CC_HalMaskInterrupt>
    52fc:	6823      	ldr	r3, [r4, #0]
    52fe:	e7d7      	b.n	52b0 <CC_PalPowerSaveModeSelect+0x1c>
    5300:	200145c8 	.word	0x200145c8
    5304:	200145b8 	.word	0x200145b8
    5308:	20015638 	.word	0x20015638
    530c:	50840000 	.word	0x50840000
    5310:	50841910 	.word	0x50841910
    5314:	ffff8fe9 	.word	0xffff8fe9

00005318 <flash_area_id_from_multi_image_slot>:
 * MCUBoot uses continuous numbering for the primary slot, the secondary slot,
 * and the scratch while zephyr might number it differently.
 */
int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    5318:	b129      	cbz	r1, 5326 <flash_area_id_from_multi_image_slot+0xe>
    531a:	2901      	cmp	r1, #1
    531c:	bf14      	ite	ne
    531e:	f06f 0015 	mvnne.w	r0, #21
    5322:	2007      	moveq	r0, #7
    5324:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    5326:	2003      	movs	r0, #3
#endif
#endif
    }

    return -EINVAL; /* flash_area_open will fail on that */
}
    5328:	4770      	bx	lr

0000532a <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    532a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    532e:	460e      	mov	r6, r1
    5330:	4617      	mov	r7, r2
    5332:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    5334:	4604      	mov	r4, r0
    5336:	b928      	cbnz	r0, 5344 <bootutil_tlv_iter_begin+0x1a>
        return -1;
    5338:	f04f 38ff 	mov.w	r8, #4294967295
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    533c:	4640      	mov	r0, r8
    533e:	b003      	add	sp, #12
    5340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    5344:	2900      	cmp	r1, #0
    5346:	d0f7      	beq.n	5338 <bootutil_tlv_iter_begin+0xe>
    5348:	2a00      	cmp	r2, #0
    534a:	d0f5      	beq.n	5338 <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    534c:	68cb      	ldr	r3, [r1, #12]
    534e:	890d      	ldrh	r5, [r1, #8]
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5350:	4638      	mov	r0, r7
    off_ = BOOT_TLV_OFF(hdr);
    5352:	441d      	add	r5, r3
    if (LOAD_IMAGE_DATA(hdr, fap, off_, &info, sizeof(info))) {
    5354:	2304      	movs	r3, #4
    5356:	4629      	mov	r1, r5
    5358:	eb0d 0203 	add.w	r2, sp, r3
    535c:	f000 fcb9 	bl	5cd2 <flash_area_read>
    5360:	4680      	mov	r8, r0
    5362:	2800      	cmp	r0, #0
    5364:	d1e8      	bne.n	5338 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5366:	f646 1208 	movw	r2, #26888	; 0x6908
    536a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    536e:	8973      	ldrh	r3, [r6, #10]
    5370:	4291      	cmp	r1, r2
    5372:	d123      	bne.n	53bc <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    5374:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    5378:	4299      	cmp	r1, r3
    537a:	d1dd      	bne.n	5338 <bootutil_tlv_iter_begin+0xe>
        if (LOAD_IMAGE_DATA(hdr, fap, off_ + info.it_tlv_tot,
    537c:	2304      	movs	r3, #4
    537e:	4638      	mov	r0, r7
    5380:	eb0d 0203 	add.w	r2, sp, r3
    5384:	4429      	add	r1, r5
    5386:	f000 fca4 	bl	5cd2 <flash_area_read>
    538a:	2800      	cmp	r0, #0
    538c:	d1d4      	bne.n	5338 <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    538e:	f646 1307 	movw	r3, #26887	; 0x6907
    5392:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    5396:	429a      	cmp	r2, r3
    5398:	d1ce      	bne.n	5338 <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    539a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    539e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->prot = prot;
    53a2:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    53a4:	8973      	ldrh	r3, [r6, #10]
    it->fap = fap;
    53a6:	e9c4 6700 	strd	r6, r7, [r4]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    53aa:	442b      	add	r3, r5
    53ac:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    53ae:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    53b0:	4413      	add	r3, r2
    it->type = type;
    53b2:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    53b6:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    53b8:	6125      	str	r5, [r4, #16]
    return 0;
    53ba:	e7bf      	b.n	533c <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    53bc:	2b00      	cmp	r3, #0
    53be:	d0e6      	beq.n	538e <bootutil_tlv_iter_begin+0x64>
    53c0:	e7ba      	b.n	5338 <bootutil_tlv_iter_begin+0xe>

000053c2 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    53c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    53c6:	460f      	mov	r7, r1
    53c8:	4690      	mov	r8, r2
    53ca:	461e      	mov	r6, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    53cc:	4604      	mov	r4, r0
    53ce:	b920      	cbnz	r0, 53da <bootutil_tlv_iter_next+0x18>
        return -1;
    53d0:	f04f 30ff 	mov.w	r0, #4294967295

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    53d4:	b003      	add	sp, #12
    53d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    53da:	6803      	ldr	r3, [r0, #0]
    53dc:	2b00      	cmp	r3, #0
    53de:	d0f7      	beq.n	53d0 <bootutil_tlv_iter_next+0xe>
    53e0:	6843      	ldr	r3, [r0, #4]
    53e2:	2b00      	cmp	r3, #0
    53e4:	d0f4      	beq.n	53d0 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    53e6:	f64f 79ff 	movw	r9, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    53ea:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    53ee:	429a      	cmp	r2, r3
    53f0:	d216      	bcs.n	5420 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    53f2:	6823      	ldr	r3, [r4, #0]
    53f4:	895b      	ldrh	r3, [r3, #10]
    53f6:	b123      	cbz	r3, 5402 <bootutil_tlv_iter_next+0x40>
    53f8:	68e3      	ldr	r3, [r4, #12]
    53fa:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    53fc:	bf04      	itt	eq
    53fe:	3304      	addeq	r3, #4
    5400:	6123      	streq	r3, [r4, #16]
        rc = LOAD_IMAGE_DATA(it->hdr, it->fap, it->tlv_off, &tlv, sizeof tlv);
    5402:	2304      	movs	r3, #4
    5404:	6921      	ldr	r1, [r4, #16]
    5406:	6860      	ldr	r0, [r4, #4]
    5408:	eb0d 0203 	add.w	r2, sp, r3
    540c:	f000 fc61 	bl	5cd2 <flash_area_read>
        if (rc) {
    5410:	2800      	cmp	r0, #0
    5412:	d1dd      	bne.n	53d0 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    5414:	7aa3      	ldrb	r3, [r4, #10]
    5416:	6925      	ldr	r5, [r4, #16]
    5418:	b123      	cbz	r3, 5424 <bootutil_tlv_iter_next+0x62>
    541a:	68e3      	ldr	r3, [r4, #12]
    541c:	42ab      	cmp	r3, r5
    541e:	d801      	bhi.n	5424 <bootutil_tlv_iter_next+0x62>
            return 1;
    5420:	2001      	movs	r0, #1
    5422:	e7d7      	b.n	53d4 <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    5424:	8921      	ldrh	r1, [r4, #8]
    5426:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    542a:	4549      	cmp	r1, r9
    542c:	f103 0204 	add.w	r2, r3, #4
    5430:	d003      	beq.n	543a <bootutil_tlv_iter_next+0x78>
    5432:	f8bd c004 	ldrh.w	ip, [sp, #4]
    5436:	458c      	cmp	ip, r1
    5438:	d10b      	bne.n	5452 <bootutil_tlv_iter_next+0x90>
            if (type != NULL) {
    543a:	b116      	cbz	r6, 5442 <bootutil_tlv_iter_next+0x80>
                *type = tlv.it_type;
    543c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5440:	8031      	strh	r1, [r6, #0]
            *off = it->tlv_off + sizeof(tlv);
    5442:	3504      	adds	r5, #4
    5444:	603d      	str	r5, [r7, #0]
            *len = tlv.it_len;
    5446:	f8a8 3000 	strh.w	r3, [r8]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    544a:	6923      	ldr	r3, [r4, #16]
    544c:	4413      	add	r3, r2
    544e:	6123      	str	r3, [r4, #16]
            return 0;
    5450:	e7c0      	b.n	53d4 <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    5452:	4415      	add	r5, r2
    5454:	6125      	str	r5, [r4, #16]
    5456:	e7c8      	b.n	53ea <bootutil_tlv_iter_next+0x28>

00005458 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    5458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    545c:	4606      	mov	r6, r0
    545e:	460f      	mov	r7, r1
    5460:	4690      	mov	r8, r2
    5462:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    5464:	f000 fca1 	bl	5daa <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    5468:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    546a:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    546c:	d81e      	bhi.n	54ac <boot_write_trailer+0x54>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    546e:	4630      	mov	r0, r6
    5470:	f000 fca4 	bl	5dbc <flash_area_erased_val>
    5474:	42ac      	cmp	r4, r5
    5476:	bf38      	it	cc
    5478:	462c      	movcc	r4, r5
    547a:	4681      	mov	r9, r0
    if (align < inlen) {
        align = inlen;
    }
    memcpy(buf, inbuf, inlen);
    547c:	462a      	mov	r2, r5
    547e:	4641      	mov	r1, r8
    5480:	b2e4      	uxtb	r4, r4
    5482:	4668      	mov	r0, sp
    5484:	f000 fd77 	bl	5f76 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    5488:	4649      	mov	r1, r9
    548a:	1b62      	subs	r2, r4, r5
    548c:	eb0d 0005 	add.w	r0, sp, r5
    5490:	f000 fd9c 	bl	5fcc <memset>

    rc = flash_area_write(fap, off, buf, align);
    5494:	4623      	mov	r3, r4
    5496:	466a      	mov	r2, sp
    5498:	4639      	mov	r1, r7
    549a:	4630      	mov	r0, r6
    549c:	f000 fc36 	bl	5d0c <flash_area_write>
    if (rc != 0) {
    54a0:	3800      	subs	r0, #0
    54a2:	bf18      	it	ne
    54a4:	2001      	movne	r0, #1
        return BOOT_EFLASH;
    }

    return 0;
}
    54a6:	b003      	add	sp, #12
    54a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    54ac:	f04f 30ff 	mov.w	r0, #4294967295
    54b0:	e7f9      	b.n	54a6 <boot_write_trailer+0x4e>

000054b2 <boot_fih_memequal>:
    return memcmp(s1, s2, n);
    54b2:	f000 bd50 	b.w	5f56 <memcmp>

000054b6 <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    54b6:	f44f 73c0 	mov.w	r3, #384	; 0x180
    54ba:	4358      	muls	r0, r3
}
    54bc:	3030      	adds	r0, #48	; 0x30
    54be:	4770      	bx	lr

000054c0 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    54c0:	780b      	ldrb	r3, [r1, #0]
    54c2:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    54c6:	2b03      	cmp	r3, #3
}
    54c8:	bf14      	ite	ne
    54ca:	f04f 30ff 	movne.w	r0, #4294967295
    54ce:	f44f 70c0 	moveq.w	r0, #384	; 0x180
    54d2:	4770      	bx	lr

000054d4 <boot_status_off>:
{
    54d4:	b510      	push	{r4, lr}
    54d6:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    54d8:	f000 fc67 	bl	5daa <flash_area_align>
}
    54dc:	f44f 72c0 	mov.w	r2, #384	; 0x180
    return fap->fa_size - off_from_end;
    54e0:	68a3      	ldr	r3, [r4, #8]
    54e2:	3b30      	subs	r3, #48	; 0x30
}
    54e4:	fb02 3010 	mls	r0, r2, r0, r3
    54e8:	bd10      	pop	{r4, pc}

000054ea <boot_write_copy_done>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    const uint8_t buf[1] = { flag_val };
    54ea:	2301      	movs	r3, #1
    return boot_write_trailer(fap, off, buf, 1);
}

int
boot_write_copy_done(const struct flash_area *fap)
{
    54ec:	b507      	push	{r0, r1, r2, lr}
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    54ee:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, buf, 1);
    54f0:	aa01      	add	r2, sp, #4
    54f2:	3920      	subs	r1, #32
    const uint8_t buf[1] = { flag_val };
    54f4:	f88d 3004 	strb.w	r3, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    54f8:	f7ff ffae 	bl	5458 <boot_write_trailer>
    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    54fc:	b003      	add	sp, #12
    54fe:	f85d fb04 	ldr.w	pc, [sp], #4

00005502 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    5502:	b513      	push	{r0, r1, r4, lr}
    5504:	4604      	mov	r4, r0
    5506:	9101      	str	r1, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    5508:	f000 ff96 	bl	6438 <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    550c:	2304      	movs	r3, #4
    550e:	f1a0 0108 	sub.w	r1, r0, #8
    5512:	eb0d 0203 	add.w	r2, sp, r3
    5516:	4620      	mov	r0, r4
    5518:	f7ff ff9e 	bl	5458 <boot_write_trailer>
}
    551c:	b002      	add	sp, #8
    551e:	bd10      	pop	{r4, pc}

00005520 <boot_read_image_size>:
{
    5520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5522:	4605      	mov	r5, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    5524:	2000      	movs	r0, #0
{
    5526:	460c      	mov	r4, r1
    5528:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    552a:	f7ff fef5 	bl	5318 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    552e:	4669      	mov	r1, sp
    5530:	b2c0      	uxtb	r0, r0
    5532:	f7fc f9d5 	bl	18e0 <flash_area_open>
    if (rc != 0) {
    5536:	b130      	cbz	r0, 5546 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    5538:	2501      	movs	r5, #1
    flash_area_close(fap);
    553a:	9800      	ldr	r0, [sp, #0]
    553c:	f000 fbc8 	bl	5cd0 <flash_area_close>
}
    5540:	4628      	mov	r0, r5
    5542:	b003      	add	sp, #12
    5544:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5546:	212c      	movs	r1, #44	; 0x2c
    5548:	fb01 5404 	mla	r4, r1, r4, r5
    554c:	8921      	ldrh	r1, [r4, #8]
    554e:	68e3      	ldr	r3, [r4, #12]
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5550:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    5552:	18ce      	adds	r6, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    5554:	2304      	movs	r3, #4
    5556:	4631      	mov	r1, r6
    5558:	eb0d 0203 	add.w	r2, sp, r3
    555c:	f000 fbb9 	bl	5cd2 <flash_area_read>
    5560:	4605      	mov	r5, r0
    5562:	2800      	cmp	r0, #0
    5564:	d1e8      	bne.n	5538 <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5566:	f646 1308 	movw	r3, #26888	; 0x6908
    556a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    556e:	8964      	ldrh	r4, [r4, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    5570:	429a      	cmp	r2, r3
    5572:	d11a      	bne.n	55aa <boot_read_image_size+0x8a>
        if (protect_tlv_size != info.it_tlv_tot) {
    5574:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    5578:	429c      	cmp	r4, r3
    557a:	d001      	beq.n	5580 <boot_read_image_size+0x60>
            rc = BOOT_EBADIMAGE;
    557c:	2503      	movs	r5, #3
    557e:	e7dc      	b.n	553a <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    5580:	2304      	movs	r3, #4
    5582:	9800      	ldr	r0, [sp, #0]
    5584:	eb0d 0203 	add.w	r2, sp, r3
    5588:	19a1      	adds	r1, r4, r6
    558a:	f000 fba2 	bl	5cd2 <flash_area_read>
    558e:	2800      	cmp	r0, #0
    5590:	d1d2      	bne.n	5538 <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    5592:	f646 1307 	movw	r3, #26887	; 0x6907
    5596:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    559a:	429a      	cmp	r2, r3
    559c:	d1ee      	bne.n	557c <boot_read_image_size+0x5c>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    559e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    55a2:	4421      	add	r1, r4
    55a4:	4431      	add	r1, r6
    55a6:	6039      	str	r1, [r7, #0]
    rc = 0;
    55a8:	e7c7      	b.n	553a <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    55aa:	2c00      	cmp	r4, #0
    55ac:	d0f1      	beq.n	5592 <boot_read_image_size+0x72>
    55ae:	e7e5      	b.n	557c <boot_read_image_size+0x5c>

000055b0 <boot_read_image_headers>:
{
    55b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    55b2:	4613      	mov	r3, r2
{
    55b4:	460f      	mov	r7, r1
    55b6:	4616      	mov	r6, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    55b8:	2100      	movs	r1, #0
    55ba:	4602      	mov	r2, r0
{
    55bc:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    55be:	f7fb fc33 	bl	e28 <boot_read_image_header>
        if (rc != 0) {
    55c2:	4604      	mov	r4, r0
    55c4:	b950      	cbnz	r0, 55dc <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    55c6:	4633      	mov	r3, r6
    55c8:	2101      	movs	r1, #1
    55ca:	4628      	mov	r0, r5
    55cc:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    55d0:	f7fb fc2a 	bl	e28 <boot_read_image_header>
        if (rc != 0) {
    55d4:	b110      	cbz	r0, 55dc <boot_read_image_headers+0x2c>
            if (i > 0 && !require_all) {
    55d6:	2f00      	cmp	r7, #0
    55d8:	bf18      	it	ne
    55da:	4604      	movne	r4, r0
}
    55dc:	4620      	mov	r0, r4
    55de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000055e0 <boot_read_sectors>:
{
    55e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    num_sectors = BOOT_MAX_IMG_SECTORS;
    55e2:	2580      	movs	r5, #128	; 0x80
{
    55e4:	4604      	mov	r4, r0
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    55e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
    55e8:	a901      	add	r1, sp, #4
    55ea:	2003      	movs	r0, #3
    num_sectors = BOOT_MAX_IMG_SECTORS;
    55ec:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    55ee:	f7fc f98b 	bl	1908 <flash_area_get_sectors>
    if (rc != 0) {
    55f2:	b948      	cbnz	r0, 5608 <boot_read_sectors+0x28>
    *out_num_sectors = num_sectors;
    55f4:	9b01      	ldr	r3, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    55f6:	2007      	movs	r0, #7
    55f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
    *out_num_sectors = num_sectors;
    55fa:	62a3      	str	r3, [r4, #40]	; 0x28
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    55fc:	a901      	add	r1, sp, #4
    num_sectors = BOOT_MAX_IMG_SECTORS;
    55fe:	9501      	str	r5, [sp, #4]
    rc = flash_area_get_sectors(flash_area, &num_sectors, out_sectors);
    5600:	f7fc f982 	bl	1908 <flash_area_get_sectors>
    if (rc != 0) {
    5604:	4605      	mov	r5, r0
    5606:	b108      	cbz	r0, 560c <boot_read_sectors+0x2c>
        return BOOT_EFLASH;
    5608:	2501      	movs	r5, #1
    560a:	e005      	b.n	5618 <boot_read_sectors+0x38>
    *out_num_sectors = num_sectors;
    560c:	9b01      	ldr	r3, [sp, #4]
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    560e:	6a20      	ldr	r0, [r4, #32]
    *out_num_sectors = num_sectors;
    5610:	6563      	str	r3, [r4, #84]	; 0x54
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    5612:	f000 fbca 	bl	5daa <flash_area_align>
    5616:	65e0      	str	r0, [r4, #92]	; 0x5c
}
    5618:	4628      	mov	r0, r5
    561a:	b003      	add	sp, #12
    561c:	bd30      	pop	{r4, r5, pc}

0000561e <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    561e:	2301      	movs	r3, #1
    5620:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    5622:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    5626:	6043      	str	r3, [r0, #4]
    bs->swap_size = 0;
    5628:	2300      	movs	r3, #0
    bs->source = 0;
    562a:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    562e:	4770      	bx	lr

00005630 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    5630:	7943      	ldrb	r3, [r0, #5]
    5632:	2b01      	cmp	r3, #1
    5634:	d107      	bne.n	5646 <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    5636:	6803      	ldr	r3, [r0, #0]
    5638:	2b01      	cmp	r3, #1
    563a:	d104      	bne.n	5646 <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    563c:	7900      	ldrb	r0, [r0, #4]
    563e:	1e43      	subs	r3, r0, #1
    5640:	4258      	negs	r0, r3
    5642:	4158      	adcs	r0, r3
    5644:	4770      	bx	lr
    5646:	2000      	movs	r0, #0
}
    5648:	4770      	bx	lr

0000564a <boot_write_status>:
{
    564a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    564c:	4606      	mov	r6, r0
    564e:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    5650:	2003      	movs	r0, #3
    5652:	a901      	add	r1, sp, #4
    5654:	f7fc f944 	bl	18e0 <flash_area_open>
    if (rc != 0) {
    5658:	bb38      	cbnz	r0, 56aa <boot_write_status+0x60>
    off = boot_status_off(fap) +
    565a:	9801      	ldr	r0, [sp, #4]
    565c:	f7ff ff3a 	bl	54d4 <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5660:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    off = boot_status_off(fap) +
    5662:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    5664:	4628      	mov	r0, r5
    5666:	f000 f8e4 	bl	5832 <boot_status_internal_off>
    off = boot_status_off(fap) +
    566a:	4404      	add	r4, r0
    align = flash_area_align(fap);
    566c:	9801      	ldr	r0, [sp, #4]
    566e:	f000 fb9c 	bl	5daa <flash_area_align>
    5672:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    5674:	9801      	ldr	r0, [sp, #4]
    5676:	f000 fba1 	bl	5dbc <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    567a:	2208      	movs	r2, #8
    erased_val = flash_area_erased_val(fap);
    567c:	4601      	mov	r1, r0
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    567e:	eb0d 0002 	add.w	r0, sp, r2
    5682:	f000 fca3 	bl	5fcc <memset>
    buf[0] = bs->state;
    5686:	792b      	ldrb	r3, [r5, #4]
    rc = flash_area_write(fap, off, buf, align);
    5688:	4621      	mov	r1, r4
    buf[0] = bs->state;
    568a:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    568e:	9801      	ldr	r0, [sp, #4]
    5690:	4633      	mov	r3, r6
    5692:	aa02      	add	r2, sp, #8
    5694:	f000 fb3a 	bl	5d0c <flash_area_write>
    if (rc != 0) {
    5698:	1e04      	subs	r4, r0, #0
    569a:	bf18      	it	ne
    569c:	2401      	movne	r4, #1
    flash_area_close(fap);
    569e:	9801      	ldr	r0, [sp, #4]
    56a0:	f000 fb16 	bl	5cd0 <flash_area_close>
}
    56a4:	4620      	mov	r0, r4
    56a6:	b004      	add	sp, #16
    56a8:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    56aa:	2401      	movs	r4, #1
    56ac:	e7f7      	b.n	569e <boot_write_status+0x54>

000056ae <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    56ae:	f000 bb56 	b.w	5d5e <flash_area_erase>

000056b2 <swap_erase_trailer_sectors>:

#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)
int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    56b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56b6:	460e      	mov	r6, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    56b8:	2100      	movs	r1, #0
{
    56ba:	4607      	mov	r7, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    56bc:	4608      	mov	r0, r1
    56be:	f7ff fe2b 	bl	5318 <flash_area_id_from_multi_image_slot>
    56c2:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    56c4:	2101      	movs	r1, #1
    56c6:	2000      	movs	r0, #0
    56c8:	f7ff fe26 	bl	5318 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    56cc:	7833      	ldrb	r3, [r6, #0]
    56ce:	429c      	cmp	r4, r3
    56d0:	d020      	beq.n	5714 <swap_erase_trailer_sectors+0x62>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    56d2:	4298      	cmp	r0, r3
    56d4:	d120      	bne.n	5718 <swap_erase_trailer_sectors+0x66>
        slot = BOOT_SECONDARY_SLOT;
    56d6:	2401      	movs	r4, #1
    return BOOT_IMG(state, slot).num_sectors;
    56d8:	232c      	movs	r3, #44	; 0x2c
    56da:	fb03 7404 	mla	r4, r3, r4, r7
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    56de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    sector = boot_img_num_sectors(state, slot) - 1;
    56e0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    56e2:	f7ff fee8 	bl	54b6 <boot_trailer_sz>
    total_sz = 0;
    56e6:	2700      	movs	r7, #0
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    56e8:	4680      	mov	r8, r0
    sector = boot_img_num_sectors(state, slot) - 1;
    56ea:	3d01      	subs	r5, #1
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    56ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    56ee:	4630      	mov	r0, r6
    56f0:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    56f4:	f853 1035 	ldr.w	r1, [r3, r5, lsl #3]
    return BOOT_IMG(state, slot).sectors[sector].fs_size;
    56f8:	f8d2 9004 	ldr.w	r9, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fs_off -
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	464a      	mov	r2, r9
    5700:	1ac9      	subs	r1, r1, r3
        assert(rc == 0);

        sector--;
        total_sz += sz;
    5702:	444f      	add	r7, r9
        rc = boot_erase_region(fap, off, sz);
    5704:	f7ff ffd3 	bl	56ae <boot_erase_region>
    } while (total_sz < trailer_sz);
    5708:	45b8      	cmp	r8, r7
        sector--;
    570a:	f105 35ff 	add.w	r5, r5, #4294967295
    } while (total_sz < trailer_sz);
    570e:	d8ed      	bhi.n	56ec <swap_erase_trailer_sectors+0x3a>

    return rc;
}
    5710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        slot = BOOT_PRIMARY_SLOT;
    5714:	2400      	movs	r4, #0
    5716:	e7df      	b.n	56d8 <swap_erase_trailer_sectors+0x26>
        return BOOT_EFLASH;
    5718:	2001      	movs	r0, #1
    571a:	e7f9      	b.n	5710 <swap_erase_trailer_sectors+0x5e>

0000571c <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    571c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    571e:	4615      	mov	r5, r2
    5720:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    5722:	2007      	movs	r0, #7
    5724:	4669      	mov	r1, sp
    5726:	f000 fecb 	bl	64c0 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    572a:	79e9      	ldrb	r1, [r5, #7]
    572c:	2901      	cmp	r1, #1
    572e:	d003      	beq.n	5738 <swap_status_init+0x1c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    5730:	2200      	movs	r2, #0
    5732:	4620      	mov	r0, r4
    5734:	f000 fed8 	bl	64e8 <boot_write_swap_info>
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    5738:	f89d 3003 	ldrb.w	r3, [sp, #3]
    573c:	2b01      	cmp	r3, #1
    573e:	d102      	bne.n	5746 <swap_status_init+0x2a>
        rc = boot_write_image_ok(fap);
    5740:	4620      	mov	r0, r4
    5742:	f000 fead 	bl	64a0 <boot_write_image_ok>
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    5746:	68a9      	ldr	r1, [r5, #8]
    5748:	4620      	mov	r0, r4
    574a:	f7ff feda 	bl	5502 <boot_write_swap_size>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    574e:	4620      	mov	r0, r4
    5750:	f7fd fd94 	bl	327c <boot_write_magic>
    assert(rc == 0);

    return 0;
}
    5754:	2000      	movs	r0, #0
    5756:	b003      	add	sp, #12
    5758:	bd30      	pop	{r4, r5, pc}

0000575a <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    575a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    575c:	460d      	mov	r5, r1
    575e:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    5760:	f7fb fc4a 	bl	ff8 <swap_status_source>
    5764:	4604      	mov	r4, r0
    5766:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    5768:	b138      	cbz	r0, 577a <swap_read_status+0x20>
    576a:	2802      	cmp	r0, #2
    576c:	d12f      	bne.n	57ce <swap_read_status+0x74>
    default:
        assert(0);
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    576e:	2003      	movs	r0, #3
    5770:	a901      	add	r1, sp, #4
    5772:	f7fc f8b5 	bl	18e0 <flash_area_open>
    if (rc != 0) {
    5776:	b118      	cbz	r0, 5780 <swap_read_status+0x26>
        return BOOT_EFLASH;
    5778:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    577a:	4620      	mov	r0, r4
    577c:	b002      	add	sp, #8
    577e:	bd70      	pop	{r4, r5, r6, pc}
    rc = swap_read_status_bytes(fap, state, bs);
    5780:	462a      	mov	r2, r5
    5782:	4631      	mov	r1, r6
    5784:	9801      	ldr	r0, [sp, #4]
    5786:	f7fb fb9d 	bl	ec4 <swap_read_status_bytes>
    if (rc == 0) {
    578a:	4604      	mov	r4, r0
    578c:	b9d8      	cbnz	r0, 57c6 <swap_read_status+0x6c>
        off = boot_swap_info_off(fap);
    578e:	9801      	ldr	r0, [sp, #4]
    5790:	f000 fe52 	bl	6438 <boot_swap_info_off>
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5794:	2301      	movs	r3, #1
        off = boot_swap_info_off(fap);
    5796:	4601      	mov	r1, r0
        rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
    5798:	f10d 0203 	add.w	r2, sp, #3
    579c:	9801      	ldr	r0, [sp, #4]
    579e:	f000 fa98 	bl	5cd2 <flash_area_read>
        if (rc != 0) {
    57a2:	4604      	mov	r4, r0
    57a4:	2800      	cmp	r0, #0
    57a6:	d1e7      	bne.n	5778 <swap_read_status+0x1e>
        if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info)) {
    57a8:	2201      	movs	r2, #1
    57aa:	9801      	ldr	r0, [sp, #4]
    57ac:	f10d 0103 	add.w	r1, sp, #3
    57b0:	f000 fe53 	bl	645a <bootutil_buffer_is_erased>
    57b4:	b110      	cbz	r0, 57bc <swap_read_status+0x62>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    57b6:	2301      	movs	r3, #1
    57b8:	f88d 3003 	strb.w	r3, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    57bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
    57c0:	f003 030f 	and.w	r3, r3, #15
    57c4:	71eb      	strb	r3, [r5, #7]
    flash_area_close(fap);
    57c6:	9801      	ldr	r0, [sp, #4]
    57c8:	f000 fa82 	bl	5cd0 <flash_area_close>
    return rc;
    57cc:	e7d5      	b.n	577a <swap_read_status+0x20>
    switch (bs->source) {
    57ce:	2407      	movs	r4, #7
    57d0:	e7d3      	b.n	577a <swap_read_status+0x20>

000057d2 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    57d2:	b513      	push	{r0, r1, r4, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    57d4:	2003      	movs	r0, #3
    57d6:	a901      	add	r1, sp, #4
    57d8:	f7fc f882 	bl	18e0 <flash_area_open>
            &fap);
    if (rc != 0) {
    57dc:	b948      	cbnz	r0, 57f2 <swap_set_copy_done+0x20>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    57de:	9801      	ldr	r0, [sp, #4]
    57e0:	f7ff fe83 	bl	54ea <boot_write_copy_done>
    57e4:	4604      	mov	r4, r0
    flash_area_close(fap);
    57e6:	9801      	ldr	r0, [sp, #4]
    57e8:	f000 fa72 	bl	5cd0 <flash_area_close>
    return rc;
}
    57ec:	4620      	mov	r0, r4
    57ee:	b002      	add	sp, #8
    57f0:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    57f2:	2401      	movs	r4, #1
    57f4:	e7fa      	b.n	57ec <swap_set_copy_done+0x1a>

000057f6 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    57f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    57f8:	2003      	movs	r0, #3
    57fa:	a901      	add	r1, sp, #4
    57fc:	f7fc f870 	bl	18e0 <flash_area_open>
            &fap);
    if (rc != 0) {
    5800:	b9a8      	cbnz	r0, 582e <swap_set_image_ok+0x38>
        return BOOT_EFLASH;
    }

    rc = boot_read_swap_state(fap, &state);
    5802:	9801      	ldr	r0, [sp, #4]
    5804:	a902      	add	r1, sp, #8
    5806:	f7fd fd47 	bl	3298 <boot_read_swap_state>
    if (rc != 0) {
    580a:	4604      	mov	r4, r0
    580c:	b968      	cbnz	r0, 582a <swap_set_image_ok+0x34>
        rc = BOOT_EFLASH;
        goto out;
    }

    if (state.image_ok == BOOT_FLAG_UNSET) {
    580e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    5812:	2b03      	cmp	r3, #3
    5814:	d103      	bne.n	581e <swap_set_image_ok+0x28>
        rc = boot_write_image_ok(fap);
    5816:	9801      	ldr	r0, [sp, #4]
    5818:	f000 fe42 	bl	64a0 <boot_write_image_ok>
    581c:	4604      	mov	r4, r0
    }

out:
    flash_area_close(fap);
    581e:	9801      	ldr	r0, [sp, #4]
    5820:	f000 fa56 	bl	5cd0 <flash_area_close>
    return rc;
}
    5824:	4620      	mov	r0, r4
    5826:	b004      	add	sp, #16
    5828:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    582a:	2401      	movs	r4, #1
    582c:	e7f7      	b.n	581e <swap_set_image_ok+0x28>
        return BOOT_EFLASH;
    582e:	2401      	movs	r4, #1
    5830:	e7f8      	b.n	5824 <swap_set_image_ok+0x2e>

00005832 <boot_status_internal_off>:
{
    5832:	b530      	push	{r4, r5, lr}
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5834:	7943      	ldrb	r3, [r0, #5]
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5836:	6804      	ldr	r4, [r0, #0]
            BOOT_STATUS_MOVE_STATE_COUNT : BOOT_STATUS_SWAP_STATE_COUNT);
    5838:	2b01      	cmp	r3, #1
    583a:	bf0a      	itet	eq
    583c:	2201      	moveq	r2, #1
    583e:	2202      	movne	r2, #2
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5840:	2500      	moveq	r5, #0
    idx_sz = elem_sz * ((bs->op == BOOT_STATUS_OP_MOVE) ?
    5842:	fb01 f202 	mul.w	r2, r1, r2
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5846:	f104 34ff 	add.w	r4, r4, #4294967295
    584a:	fb02 f204 	mul.w	r2, r2, r4
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    584e:	7903      	ldrb	r3, [r0, #4]
               0 : (BOOT_MAX_IMG_SECTORS * BOOT_STATUS_MOVE_STATE_COUNT * elem_sz)) +
    5850:	bf18      	it	ne
    5852:	01cd      	lslne	r5, r1, #7
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    5854:	3b01      	subs	r3, #1
           (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    5856:	fb01 2103 	mla	r1, r1, r3, r2
}
    585a:	1948      	adds	r0, r1, r5
    585c:	bd30      	pop	{r4, r5, pc}

0000585e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    585e:	4603      	mov	r3, r0
    5860:	b158      	cbz	r0, 587a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5862:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5864:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5868:	2a01      	cmp	r2, #1
    586a:	d003      	beq.n	5874 <sys_notify_validate+0x16>
    586c:	2a03      	cmp	r2, #3
    586e:	d104      	bne.n	587a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    5870:	6802      	ldr	r2, [r0, #0]
    5872:	b112      	cbz	r2, 587a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5874:	2000      	movs	r0, #0
    5876:	6098      	str	r0, [r3, #8]
    5878:	4770      	bx	lr
		return -EINVAL;
    587a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    587e:	4770      	bx	lr

00005880 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5880:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    5882:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    5884:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    5888:	2a03      	cmp	r2, #3
    588a:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    588e:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
    5890:	bf14      	ite	ne
    5892:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5894:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    5896:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5898:	4770      	bx	lr

0000589a <arch_printk_char_out>:
}
    589a:	2000      	movs	r0, #0
    589c:	4770      	bx	lr

0000589e <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    589e:	b40f      	push	{r0, r1, r2, r3}
    58a0:	b507      	push	{r0, r1, r2, lr}
    58a2:	a904      	add	r1, sp, #16
    58a4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    58a8:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    58aa:	f7fb fd8d 	bl	13c8 <vprintk>
	}
	va_end(ap);
}
    58ae:	b003      	add	sp, #12
    58b0:	f85d eb04 	ldr.w	lr, [sp], #4
    58b4:	b004      	add	sp, #16
    58b6:	4770      	bx	lr

000058b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    58b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    58ba:	f013 0307 	ands.w	r3, r3, #7
    58be:	d105      	bne.n	58cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    58c0:	6803      	ldr	r3, [r0, #0]
    58c2:	2b00      	cmp	r3, #0
		evt = EVT_START;
    58c4:	bf0c      	ite	eq
    58c6:	2000      	moveq	r0, #0
    58c8:	2003      	movne	r0, #3
    58ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    58cc:	2b02      	cmp	r3, #2
    58ce:	d105      	bne.n	58dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    58d0:	8b43      	ldrh	r3, [r0, #26]
    58d2:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    58d4:	bf14      	ite	ne
    58d6:	2000      	movne	r0, #0
    58d8:	2004      	moveq	r0, #4
    58da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    58dc:	2b01      	cmp	r3, #1
    58de:	d105      	bne.n	58ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    58e0:	6803      	ldr	r3, [r0, #0]
    58e2:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    58e4:	bf0c      	ite	eq
    58e6:	2000      	moveq	r0, #0
    58e8:	2005      	movne	r0, #5
    58ea:	4770      	bx	lr
	int evt = EVT_NOP;
    58ec:	2000      	movs	r0, #0
}
    58ee:	4770      	bx	lr

000058f0 <notify_one>:
{
    58f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58f4:	460d      	mov	r5, r1
    58f6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    58f8:	4619      	mov	r1, r3
    58fa:	1d28      	adds	r0, r5, #4
{
    58fc:	4690      	mov	r8, r2
    58fe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5900:	f7ff ffbe 	bl	5880 <sys_notify_finalize>
	if (cb) {
    5904:	4604      	mov	r4, r0
    5906:	b138      	cbz	r0, 5918 <notify_one+0x28>
		cb(mgr, cli, state, res);
    5908:	4633      	mov	r3, r6
    590a:	4642      	mov	r2, r8
    590c:	4629      	mov	r1, r5
    590e:	4638      	mov	r0, r7
    5910:	46a4      	mov	ip, r4
}
    5912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    5916:	4760      	bx	ip
}
    5918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000591c <transition_complete>:
{
    591c:	b410      	push	{r4}
    591e:	f04f 0420 	mov.w	r4, #32
    5922:	f3ef 8211 	mrs	r2, BASEPRI
    5926:	f384 8811 	msr	BASEPRI, r4
    592a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    592e:	6141      	str	r1, [r0, #20]
}
    5930:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    5932:	2101      	movs	r1, #1
    5934:	f7fb bd56 	b.w	13e4 <process_event>

00005938 <validate_args>:
{
    5938:	b510      	push	{r4, lr}
    593a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    593c:	b140      	cbz	r0, 5950 <validate_args+0x18>
    593e:	b139      	cbz	r1, 5950 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    5940:	1d08      	adds	r0, r1, #4
    5942:	f7ff ff8c 	bl	585e <sys_notify_validate>
	if ((rv == 0)
    5946:	b928      	cbnz	r0, 5954 <validate_args+0x1c>
	    && ((cli->notify.flags
    5948:	68a3      	ldr	r3, [r4, #8]
    594a:	f033 0303 	bics.w	r3, r3, #3
    594e:	d001      	beq.n	5954 <validate_args+0x1c>
		rv = -EINVAL;
    5950:	f06f 0015 	mvn.w	r0, #21
}
    5954:	bd10      	pop	{r4, pc}

00005956 <onoff_manager_init>:
{
    5956:	b538      	push	{r3, r4, r5, lr}
    5958:	460c      	mov	r4, r1
	if ((mgr == NULL)
    595a:	4605      	mov	r5, r0
    595c:	b158      	cbz	r0, 5976 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    595e:	b151      	cbz	r1, 5976 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    5960:	680b      	ldr	r3, [r1, #0]
    5962:	b143      	cbz	r3, 5976 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    5964:	684b      	ldr	r3, [r1, #4]
    5966:	b133      	cbz	r3, 5976 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5968:	221c      	movs	r2, #28
    596a:	2100      	movs	r1, #0
    596c:	f000 fb2e 	bl	5fcc <memset>
	return 0;
    5970:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    5972:	612c      	str	r4, [r5, #16]
}
    5974:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    5976:	f06f 0015 	mvn.w	r0, #21
    597a:	e7fb      	b.n	5974 <onoff_manager_init+0x1e>

0000597c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    597c:	b570      	push	{r4, r5, r6, lr}
    597e:	4604      	mov	r4, r0
    5980:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5982:	f7ff ffd9 	bl	5938 <validate_args>

	if (rv < 0) {
    5986:	1e05      	subs	r5, r0, #0
    5988:	db31      	blt.n	59ee <onoff_request+0x72>
    598a:	f04f 0320 	mov.w	r3, #32
    598e:	f3ef 8111 	mrs	r1, BASEPRI
    5992:	f383 8811 	msr	BASEPRI, r3
    5996:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    599a:	f64f 75ff 	movw	r5, #65535	; 0xffff
    599e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    59a0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    59a2:	42ab      	cmp	r3, r5
    59a4:	f000 0207 	and.w	r2, r0, #7
    59a8:	d02e      	beq.n	5a08 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    59aa:	2a02      	cmp	r2, #2
    59ac:	d10e      	bne.n	59cc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    59ae:	3301      	adds	r3, #1
    59b0:	8363      	strh	r3, [r4, #26]
	rv = state;
    59b2:	4615      	mov	r5, r2
		notify = true;
    59b4:	2301      	movs	r3, #1
	__asm__ volatile(
    59b6:	f381 8811 	msr	BASEPRI, r1
    59ba:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    59be:	b1b3      	cbz	r3, 59ee <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    59c0:	2300      	movs	r3, #0
    59c2:	4631      	mov	r1, r6
    59c4:	4620      	mov	r0, r4
    59c6:	f7ff ff93 	bl	58f0 <notify_one>
    59ca:	e010      	b.n	59ee <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    59cc:	0783      	lsls	r3, r0, #30
    59ce:	d001      	beq.n	59d4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    59d0:	2a06      	cmp	r2, #6
    59d2:	d10e      	bne.n	59f2 <onoff_request+0x76>
	parent->next = child;
    59d4:	2300      	movs	r3, #0
    59d6:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    59d8:	6863      	ldr	r3, [r4, #4]
    59da:	b993      	cbnz	r3, 5a02 <onoff_request+0x86>
	list->head = node;
    59dc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    59e0:	4615      	mov	r5, r2
    59e2:	b962      	cbnz	r2, 59fe <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    59e4:	460a      	mov	r2, r1
    59e6:	4620      	mov	r0, r4
    59e8:	2102      	movs	r1, #2
    59ea:	f7fb fcfb 	bl	13e4 <process_event>
		}
	}

	return rv;
}
    59ee:	4628      	mov	r0, r5
    59f0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    59f2:	2a05      	cmp	r2, #5
    59f4:	bf0c      	ite	eq
    59f6:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    59fa:	f06f 0504 	mvnne.w	r5, #4
    59fe:	2300      	movs	r3, #0
    5a00:	e7d9      	b.n	59b6 <onoff_request+0x3a>
	parent->next = child;
    5a02:	601e      	str	r6, [r3, #0]
	list->tail = node;
    5a04:	6066      	str	r6, [r4, #4]
}
    5a06:	e7eb      	b.n	59e0 <onoff_request+0x64>
		rv = -EAGAIN;
    5a08:	f06f 050a 	mvn.w	r5, #10
    5a0c:	e7f7      	b.n	59fe <onoff_request+0x82>

00005a0e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5a0e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    5a10:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    5a18:	bf2c      	ite	cs
    5a1a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    5a1e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    5a22:	4770      	bx	lr

00005a24 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    5a24:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    5a28:	6880      	ldr	r0, [r0, #8]
    5a2a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    5a2e:	bf2c      	ite	cs
    5a30:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    5a34:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    5a38:	4770      	bx	lr

00005a3a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5a3a:	2201      	movs	r2, #1
{
    5a3c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    5a3e:	f7ff ffe6 	bl	5a0e <chunk_field>
}
    5a42:	0840      	lsrs	r0, r0, #1
    5a44:	bd08      	pop	{r3, pc}

00005a46 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    5a46:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    5a48:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    5a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5a50:	d308      	bcc.n	5a64 <set_chunk_used+0x1e>
		if (used) {
    5a52:	684b      	ldr	r3, [r1, #4]
    5a54:	b11a      	cbz	r2, 5a5e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    5a56:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5a5a:	604b      	str	r3, [r1, #4]
    5a5c:	4770      	bx	lr
    5a5e:	f023 0301 	bic.w	r3, r3, #1
    5a62:	e7fa      	b.n	5a5a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    5a64:	884b      	ldrh	r3, [r1, #2]
    5a66:	b11a      	cbz	r2, 5a70 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    5a68:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5a6c:	804b      	strh	r3, [r1, #2]
		}
	}
}
    5a6e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    5a70:	f023 0301 	bic.w	r3, r3, #1
    5a74:	e7fa      	b.n	5a6c <set_chunk_used+0x26>

00005a76 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    5a76:	0053      	lsls	r3, r2, #1
    5a78:	2201      	movs	r2, #1
    5a7a:	f7ff bfd3 	b.w	5a24 <chunk_set>

00005a7e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    5a7e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5a80:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5a82:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    5a86:	bf2c      	ite	cs
    5a88:	2002      	movcs	r0, #2
    5a8a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    5a8c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    5a8e:	fab0 f080 	clz	r0, r0
}
    5a92:	f1c0 001f 	rsb	r0, r0, #31
    5a96:	4770      	bx	lr

00005a98 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    5a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a9c:	4604      	mov	r4, r0
    5a9e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    5aa0:	f7ff ffcb 	bl	5a3a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    5aa4:	68a3      	ldr	r3, [r4, #8]
    5aa6:	4601      	mov	r1, r0
    5aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    5aac:	d301      	bcc.n	5ab2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    5aae:	2801      	cmp	r0, #1
    5ab0:	d035      	beq.n	5b1e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    5ab2:	4620      	mov	r0, r4
    5ab4:	f7ff ffe3 	bl	5a7e <bucket_idx>
	if (b->next == 0U) {
    5ab8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    5abc:	6916      	ldr	r6, [r2, #16]
    5abe:	b99e      	cbnz	r6, 5ae8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    5ac0:	2301      	movs	r3, #1
    5ac2:	fa03 f000 	lsl.w	r0, r3, r0
    5ac6:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    5ac8:	4629      	mov	r1, r5
    5aca:	4303      	orrs	r3, r0
    5acc:	60e3      	str	r3, [r4, #12]
    5ace:	4620      	mov	r0, r4
		b->next = c;
    5ad0:	6115      	str	r5, [r2, #16]
    5ad2:	462b      	mov	r3, r5
    5ad4:	2202      	movs	r2, #2
    5ad6:	f7ff ffa5 	bl	5a24 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5ada:	2203      	movs	r2, #3
    5adc:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    5ade:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    5ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5ae4:	f7ff bf9e 	b.w	5a24 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    5ae8:	2202      	movs	r2, #2
    5aea:	4631      	mov	r1, r6
    5aec:	4620      	mov	r0, r4
    5aee:	f7ff ff8e 	bl	5a0e <chunk_field>
    5af2:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    5af4:	4603      	mov	r3, r0
    5af6:	2202      	movs	r2, #2
    5af8:	4629      	mov	r1, r5
    5afa:	4620      	mov	r0, r4
    5afc:	f7ff ff92 	bl	5a24 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5b00:	4633      	mov	r3, r6
    5b02:	2203      	movs	r2, #3
    5b04:	4629      	mov	r1, r5
    5b06:	4620      	mov	r0, r4
    5b08:	f7ff ff8c 	bl	5a24 <chunk_set>
    5b0c:	2203      	movs	r2, #3
    5b0e:	4639      	mov	r1, r7
    5b10:	462b      	mov	r3, r5
    5b12:	4620      	mov	r0, r4
    5b14:	f7ff ff86 	bl	5a24 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    5b18:	2202      	movs	r2, #2
    5b1a:	4631      	mov	r1, r6
    5b1c:	e7df      	b.n	5ade <free_list_add+0x46>
    5b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005b22 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    5b22:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    5b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b28:	bf2c      	ite	cs
    5b2a:	2508      	movcs	r5, #8
    5b2c:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    5b2e:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
    5b30:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
    5b32:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5b34:	1dcc      	adds	r4, r1, #7
    5b36:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
    5b3a:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
    5b3c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    5b40:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5b42:	440d      	add	r5, r1
    5b44:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5b48:	1b2d      	subs	r5, r5, r4
    5b4a:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5b4c:	4629      	mov	r1, r5
    5b4e:	4620      	mov	r0, r4
	h->len = buf_sz;
    5b50:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    5b52:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5b54:	f7ff ff93 	bl	5a7e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    5b58:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5b5a:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
    5b5c:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5b5e:	361b      	adds	r6, #27
    5b60:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
    5b62:	f104 0210 	add.w	r2, r4, #16
    5b66:	428b      	cmp	r3, r1
    5b68:	db29      	blt.n	5bbe <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    5b6a:	4632      	mov	r2, r6
    5b6c:	4620      	mov	r0, r4
    5b6e:	2100      	movs	r1, #0
    5b70:	f7ff ff81 	bl	5a76 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5b74:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    5b76:	4620      	mov	r0, r4
    5b78:	2201      	movs	r2, #1
    5b7a:	2100      	movs	r1, #0
    5b7c:	f7ff ff63 	bl	5a46 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5b80:	463a      	mov	r2, r7
    5b82:	4631      	mov	r1, r6
    5b84:	f7ff ff77 	bl	5a76 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    5b88:	4633      	mov	r3, r6
    5b8a:	4631      	mov	r1, r6
    5b8c:	4620      	mov	r0, r4
    5b8e:	2200      	movs	r2, #0
    5b90:	f7ff ff48 	bl	5a24 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    5b94:	4629      	mov	r1, r5
    5b96:	4620      	mov	r0, r4
    5b98:	2200      	movs	r2, #0
    5b9a:	f7ff ff6c 	bl	5a76 <set_chunk_size>
    5b9e:	463b      	mov	r3, r7
    5ba0:	4629      	mov	r1, r5
    5ba2:	4620      	mov	r0, r4
    5ba4:	2200      	movs	r2, #0
    5ba6:	f7ff ff3d 	bl	5a24 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    5baa:	4629      	mov	r1, r5
    5bac:	4620      	mov	r0, r4
    5bae:	2201      	movs	r2, #1
    5bb0:	f7ff ff49 	bl	5a46 <set_chunk_used>

	free_list_add(h, chunk0_size);
    5bb4:	4631      	mov	r1, r6
}
    5bb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    5bba:	f7ff bf6d 	b.w	5a98 <free_list_add>
		h->buckets[i].next = 0;
    5bbe:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    5bc2:	3301      	adds	r3, #1
    5bc4:	e7cf      	b.n	5b66 <sys_heap_init+0x44>

00005bc6 <print_digits>:
{
    5bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bca:	b08b      	sub	sp, #44	; 0x2c
    5bcc:	469b      	mov	fp, r3
    5bce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    5bd2:	460e      	mov	r6, r1
    5bd4:	9303      	str	r3, [sp, #12]
		char c = num % base;
    5bd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
{
    5bd8:	4692      	mov	sl, r2
		char c = num % base;
    5bda:	4619      	mov	r1, r3
    5bdc:	2200      	movs	r2, #0
{
    5bde:	4605      	mov	r5, r0
	int i = 0;
    5be0:	2400      	movs	r4, #0
		char c = num % base;
    5be2:	e9cd 1200 	strd	r1, r2, [sp]
{
    5be6:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
    5bea:	9f18      	ldr	r7, [sp, #96]	; 0x60
    5bec:	f10d 0910 	add.w	r9, sp, #16
		char c = num % base;
    5bf0:	4650      	mov	r0, sl
    5bf2:	e9dd 2300 	ldrd	r2, r3, [sp]
    5bf6:	4659      	mov	r1, fp
    5bf8:	f7fa faa4 	bl	144 <__aeabi_uldivmod>
    5bfc:	b2d3      	uxtb	r3, r2
		if (c >= 10) {
    5bfe:	2b09      	cmp	r3, #9
			c += 'a' - '0' - 10;
    5c00:	bf84      	itt	hi
    5c02:	3227      	addhi	r2, #39	; 0x27
    5c04:	b2d3      	uxtbhi	r3, r2
		buf[i++] = c + '0';
    5c06:	f103 0230 	add.w	r2, r3, #48	; 0x30
    5c0a:	f809 2b01 	strb.w	r2, [r9], #1
	} while (num);
    5c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
    5c12:	459b      	cmp	fp, r3
    5c14:	bf08      	it	eq
    5c16:	4592      	cmpeq	sl, r2
		buf[i++] = c + '0';
    5c18:	f104 0401 	add.w	r4, r4, #1
	} while (num);
    5c1c:	d223      	bcs.n	5c66 <print_digits+0xa0>
	int pad = MAX(min_width - i, 0);
    5c1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    5c20:	eba3 0a04 	sub.w	sl, r3, r4
    5c24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
    5c28:	46d3      	mov	fp, sl
    5c2a:	ebaa 090b 	sub.w	r9, sl, fp
	for (/**/; pad > 0 && pad_before; pad--) {
    5c2e:	f1bb 0f00 	cmp.w	fp, #0
    5c32:	d001      	beq.n	5c38 <print_digits+0x72>
    5c34:	9b03      	ldr	r3, [sp, #12]
    5c36:	b9cb      	cbnz	r3, 5c6c <print_digits+0xa6>
		buf[i++] = c + '0';
    5c38:	46a2      	mov	sl, r4
		OUTC(buf[--i]);
    5c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
    5c3e:	ab04      	add	r3, sp, #16
    5c40:	4631      	mov	r1, r6
    5c42:	f813 000a 	ldrb.w	r0, [r3, sl]
    5c46:	47a8      	blx	r5
	} while (i > 0);
    5c48:	f1ba 0f00 	cmp.w	sl, #0
    5c4c:	d1f5      	bne.n	5c3a <print_digits+0x74>
    5c4e:	46da      	mov	sl, fp
	for (/**/; pad > 0; pad--) {
    5c50:	f1ba 0f00 	cmp.w	sl, #0
    5c54:	d110      	bne.n	5c78 <print_digits+0xb2>
	*countp += count;
    5c56:	683b      	ldr	r3, [r7, #0]
    5c58:	441c      	add	r4, r3
    5c5a:	444c      	add	r4, r9
    5c5c:	445c      	add	r4, fp
    5c5e:	603c      	str	r4, [r7, #0]
}
    5c60:	b00b      	add	sp, #44	; 0x2c
    5c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		num /= base;
    5c66:	4682      	mov	sl, r0
    5c68:	468b      	mov	fp, r1
    5c6a:	e7c1      	b.n	5bf0 <print_digits+0x2a>
		OUTC(pad_char);
    5c6c:	4631      	mov	r1, r6
    5c6e:	4640      	mov	r0, r8
    5c70:	47a8      	blx	r5
	for (/**/; pad > 0 && pad_before; pad--) {
    5c72:	f10b 3bff 	add.w	fp, fp, #4294967295
    5c76:	e7d8      	b.n	5c2a <print_digits+0x64>
		OUTC(pad_char);
    5c78:	4631      	mov	r1, r6
    5c7a:	4640      	mov	r0, r8
    5c7c:	47a8      	blx	r5
	for (/**/; pad > 0; pad--) {
    5c7e:	f10a 3aff 	add.w	sl, sl, #4294967295
    5c82:	e7e5      	b.n	5c50 <print_digits+0x8a>

00005c84 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5c84:	4770      	bx	lr

00005c86 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    5c86:	f7fd bbcd 	b.w	3424 <SystemInit>

00005c8a <z_impl_flash_write_protection_set>:
						    bool enable)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->write_protection(dev, enable);
    5c8a:	6883      	ldr	r3, [r0, #8]
    5c8c:	68db      	ldr	r3, [r3, #12]
    5c8e:	4718      	bx	r3

00005c90 <device_get_binding>:
    5c90:	f7fe bc2c 	b.w	44ec <z_impl_device_get_binding>

00005c94 <get_sectors_cb>:
{
    5c94:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
    5c96:	6802      	ldr	r2, [r0, #0]
    5c98:	684c      	ldr	r4, [r1, #4]
    5c9a:	42a2      	cmp	r2, r4
    5c9c:	d316      	bcc.n	5ccc <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
    5c9e:	688b      	ldr	r3, [r1, #8]
    5ca0:	4423      	add	r3, r4
    5ca2:	429a      	cmp	r2, r3
    5ca4:	d206      	bcs.n	5cb4 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
    5ca6:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
    5caa:	42ab      	cmp	r3, r5
    5cac:	d304      	bcc.n	5cb8 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
    5cae:	f06f 030b 	mvn.w	r3, #11
    5cb2:	618b      	str	r3, [r1, #24]
		*bail_value = false;
    5cb4:	2000      	movs	r0, #0
    5cb6:	e00a      	b.n	5cce <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5cb8:	68cd      	ldr	r5, [r1, #12]
    5cba:	1b12      	subs	r2, r2, r4
    5cbc:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
    5cc0:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
    5cc2:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
    5cc6:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
    5cc8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
    5cca:	610b      	str	r3, [r1, #16]
		*bail_value = true;
    5ccc:	2001      	movs	r0, #1
}
    5cce:	bd70      	pop	{r4, r5, r6, pc}

00005cd0 <flash_area_close>:
}
    5cd0:	4770      	bx	lr

00005cd2 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
    5cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cd6:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5cd8:	6883      	ldr	r3, [r0, #8]
{
    5cda:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5cdc:	428b      	cmp	r3, r1
{
    5cde:	460c      	mov	r4, r1
    5ce0:	4617      	mov	r7, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5ce2:	d30f      	bcc.n	5d04 <flash_area_read+0x32>
    5ce4:	1872      	adds	r2, r6, r1
    5ce6:	4293      	cmp	r3, r2
    5ce8:	d30c      	bcc.n	5d04 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
    5cea:	68c0      	ldr	r0, [r0, #12]
    5cec:	f7ff ffd0 	bl	5c90 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
    5cf0:	6869      	ldr	r1, [r5, #4]
    5cf2:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
    5cf4:	6883      	ldr	r3, [r0, #8]
    5cf6:	463a      	mov	r2, r7
    5cf8:	681c      	ldr	r4, [r3, #0]
    5cfa:	4633      	mov	r3, r6
    5cfc:	46a4      	mov	ip, r4
}
    5cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d02:	4760      	bx	ip
    5d04:	f06f 0015 	mvn.w	r0, #21
    5d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d0c <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
    5d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5d10:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5d12:	6883      	ldr	r3, [r0, #8]
{
    5d14:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5d16:	428b      	cmp	r3, r1
{
    5d18:	460d      	mov	r5, r1
    5d1a:	4691      	mov	r9, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5d1c:	d31c      	bcc.n	5d58 <flash_area_write+0x4c>
    5d1e:	eb08 0201 	add.w	r2, r8, r1
    5d22:	4293      	cmp	r3, r2
    5d24:	d318      	bcc.n	5d58 <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5d26:	68c0      	ldr	r0, [r0, #12]
    5d28:	f7ff ffb2 	bl	5c90 <device_get_binding>
    5d2c:	4606      	mov	r6, r0
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&dev, *(uintptr_t *)&enable, K_SYSCALL_FLASH_WRITE_PROTECTION_SET);
	}
#endif
	compiler_barrier();
	return z_impl_flash_write_protection_set(dev, enable);
    5d2e:	2100      	movs	r1, #0
    5d30:	f7ff ffab 	bl	5c8a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    5d34:	4604      	mov	r4, r0
    5d36:	b960      	cbnz	r0, 5d52 <flash_area_write+0x46>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
    5d38:	6879      	ldr	r1, [r7, #4]
    5d3a:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
    5d3c:	68b3      	ldr	r3, [r6, #8]
    5d3e:	464a      	mov	r2, r9
    5d40:	685c      	ldr	r4, [r3, #4]
    5d42:	4630      	mov	r0, r6
    5d44:	4643      	mov	r3, r8
    5d46:	47a0      	blx	r4
    5d48:	4604      	mov	r4, r0
    5d4a:	2101      	movs	r1, #1
    5d4c:	4630      	mov	r0, r6
    5d4e:	f7ff ff9c 	bl	5c8a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    5d52:	4620      	mov	r0, r4
    5d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    5d58:	f06f 0415 	mvn.w	r4, #21
    5d5c:	e7f9      	b.n	5d52 <flash_area_write+0x46>

00005d5e <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
    5d5e:	6883      	ldr	r3, [r0, #8]
{
    5d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5d64:	428b      	cmp	r3, r1
{
    5d66:	4607      	mov	r7, r0
    5d68:	460d      	mov	r5, r1
    5d6a:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
    5d6c:	d31a      	bcc.n	5da4 <flash_area_erase+0x46>
    5d6e:	440a      	add	r2, r1
    5d70:	4293      	cmp	r3, r2
    5d72:	d317      	bcc.n	5da4 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
    5d74:	68c0      	ldr	r0, [r0, #12]
    5d76:	f7ff ff8b 	bl	5c90 <device_get_binding>
    5d7a:	4606      	mov	r6, r0
    5d7c:	2100      	movs	r1, #0
    5d7e:	f7ff ff84 	bl	5c8a <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
    5d82:	4604      	mov	r4, r0
    5d84:	b958      	cbnz	r0, 5d9e <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
    5d86:	6879      	ldr	r1, [r7, #4]
    5d88:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
    5d8a:	68b3      	ldr	r3, [r6, #8]
    5d8c:	4642      	mov	r2, r8
    5d8e:	4630      	mov	r0, r6
    5d90:	689b      	ldr	r3, [r3, #8]
    5d92:	4798      	blx	r3
    5d94:	4604      	mov	r4, r0
    5d96:	2101      	movs	r1, #1
    5d98:	4630      	mov	r0, r6
    5d9a:	f7ff ff76 	bl	5c8a <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
    5d9e:	4620      	mov	r0, r4
    5da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
    5da4:	f06f 0415 	mvn.w	r4, #21
    5da8:	e7f9      	b.n	5d9e <flash_area_erase+0x40>

00005daa <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
    5daa:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
    5dac:	68c0      	ldr	r0, [r0, #12]
    5dae:	f7ff ff6f 	bl	5c90 <device_get_binding>
static inline size_t z_impl_flash_get_write_block_size(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev)->write_block_size;
    5db2:	6883      	ldr	r3, [r0, #8]
    5db4:	691b      	ldr	r3, [r3, #16]
    5db6:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
    5db8:	7800      	ldrb	r0, [r0, #0]
    5dba:	bd08      	pop	{r3, pc}

00005dbc <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
    5dbc:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
    5dbe:	68c0      	ldr	r0, [r0, #12]
    5dc0:	f7ff ff66 	bl	5c90 <device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    5dc4:	6883      	ldr	r3, [r0, #8]
    5dc6:	691b      	ldr	r3, [r3, #16]
    5dc8:	4798      	blx	r3

	return param->erase_value;
}
    5dca:	7900      	ldrb	r0, [r0, #4]
    5dcc:	bd08      	pop	{r3, pc}

00005dce <uart_poll_out>:
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5dce:	6883      	ldr	r3, [r0, #8]
    5dd0:	685b      	ldr	r3, [r3, #4]
    5dd2:	4718      	bx	r3

00005dd4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5dd4:	b2cb      	uxtb	r3, r1
    5dd6:	210c      	movs	r1, #12
    5dd8:	68c2      	ldr	r2, [r0, #12]
    5dda:	fb03 2101 	mla	r1, r3, r1, r2
    5dde:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    5de0:	f000 0007 	and.w	r0, r0, #7
    5de4:	4770      	bx	lr

00005de6 <set_off_state>:
	__asm__ volatile(
    5de6:	f04f 0320 	mov.w	r3, #32
    5dea:	f3ef 8211 	mrs	r2, BASEPRI
    5dee:	f383 8811 	msr	BASEPRI, r3
    5df2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5df6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5df8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5dfc:	d001      	beq.n	5e02 <set_off_state+0x1c>
    5dfe:	428b      	cmp	r3, r1
    5e00:	d107      	bne.n	5e12 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5e02:	2301      	movs	r3, #1
    5e04:	6003      	str	r3, [r0, #0]
	int err = 0;
    5e06:	2000      	movs	r0, #0
	__asm__ volatile(
    5e08:	f382 8811 	msr	BASEPRI, r2
    5e0c:	f3bf 8f6f 	isb	sy
}
    5e10:	4770      	bx	lr
		err = -EPERM;
    5e12:	f04f 30ff 	mov.w	r0, #4294967295
    5e16:	e7f7      	b.n	5e08 <set_off_state+0x22>

00005e18 <set_starting_state>:
{
    5e18:	b510      	push	{r4, lr}
	__asm__ volatile(
    5e1a:	f04f 0320 	mov.w	r3, #32
    5e1e:	f3ef 8211 	mrs	r2, BASEPRI
    5e22:	f383 8811 	msr	BASEPRI, r3
    5e26:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5e2a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5e2c:	f003 0407 	and.w	r4, r3, #7
    5e30:	2c01      	cmp	r4, #1
    5e32:	d106      	bne.n	5e42 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5e34:	6001      	str	r1, [r0, #0]
	int err = 0;
    5e36:	2000      	movs	r0, #0
	__asm__ volatile(
    5e38:	f382 8811 	msr	BASEPRI, r2
    5e3c:	f3bf 8f6f 	isb	sy
}
    5e40:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    5e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    5e46:	428b      	cmp	r3, r1
		err = -EALREADY;
    5e48:	bf14      	ite	ne
    5e4a:	f04f 30ff 	movne.w	r0, #4294967295
    5e4e:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    5e52:	e7f1      	b.n	5e38 <set_starting_state+0x20>

00005e54 <set_on_state>:
	__asm__ volatile(
    5e54:	f04f 0320 	mov.w	r3, #32
    5e58:	f3ef 8211 	mrs	r2, BASEPRI
    5e5c:	f383 8811 	msr	BASEPRI, r3
    5e60:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5e64:	6803      	ldr	r3, [r0, #0]
    5e66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5e6a:	f043 0302 	orr.w	r3, r3, #2
    5e6e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5e70:	f382 8811 	msr	BASEPRI, r2
    5e74:	f3bf 8f6f 	isb	sy
}
    5e78:	4770      	bx	lr

00005e7a <api_blocking_start>:
}
    5e7a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    5e7e:	4770      	bx	lr

00005e80 <onoff_started_callback>:
{
    5e80:	b410      	push	{r4}
	notify(mgr, 0);
    5e82:	241c      	movs	r4, #28
	return &data->mgr[type];
    5e84:	68c0      	ldr	r0, [r0, #12]
    5e86:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    5e88:	fb03 0004 	mla	r0, r3, r4, r0
    5e8c:	2100      	movs	r1, #0
}
    5e8e:	bc10      	pop	{r4}
	notify(mgr, 0);
    5e90:	4710      	bx	r2

00005e92 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5e92:	2000      	movs	r0, #0
    5e94:	f7fd bb7e 	b.w	3594 <nrfx_clock_start>

00005e98 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5e98:	2000      	movs	r0, #0
    5e9a:	f7fd bbad 	b.w	35f8 <nrfx_clock_stop>

00005e9e <api_stop>:
{
    5e9e:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
    5ea0:	240c      	movs	r4, #12
    5ea2:	b2c9      	uxtb	r1, r1
    5ea4:	434c      	muls	r4, r1
{
    5ea6:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5ea8:	68c0      	ldr	r0, [r0, #12]
    5eaa:	f104 0340 	add.w	r3, r4, #64	; 0x40
    5eae:	2180      	movs	r1, #128	; 0x80
    5eb0:	4418      	add	r0, r3
    5eb2:	f7ff ff98 	bl	5de6 <set_off_state>
	if (err < 0) {
    5eb6:	2800      	cmp	r0, #0
    5eb8:	db04      	blt.n	5ec4 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5eba:	6869      	ldr	r1, [r5, #4]
    5ebc:	440c      	add	r4, r1
    5ebe:	6863      	ldr	r3, [r4, #4]
    5ec0:	4798      	blx	r3
	return 0;
    5ec2:	2000      	movs	r0, #0
}
    5ec4:	bd38      	pop	{r3, r4, r5, pc}

00005ec6 <api_start>:
{
    5ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
    5eca:	240c      	movs	r4, #12
    5ecc:	b2c9      	uxtb	r1, r1
    5ece:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5ed0:	68c5      	ldr	r5, [r0, #12]
{
    5ed2:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5ed4:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5ed8:	2180      	movs	r1, #128	; 0x80
    5eda:	4428      	add	r0, r5
{
    5edc:	4690      	mov	r8, r2
    5ede:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    5ee0:	f7ff ff9a 	bl	5e18 <set_starting_state>
	if (err < 0) {
    5ee4:	2800      	cmp	r0, #0
    5ee6:	db06      	blt.n	5ef6 <api_start+0x30>
	subdata->cb = cb;
    5ee8:	4425      	add	r5, r4
	subdata->user_data = user_data;
    5eea:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    5eee:	6873      	ldr	r3, [r6, #4]
    5ef0:	591b      	ldr	r3, [r3, r4]
    5ef2:	4798      	blx	r3
	return 0;
    5ef4:	2000      	movs	r0, #0
}
    5ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005efa <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5efa:	4770      	bx	lr

00005efc <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    5efc:	4770      	bx	lr

00005efe <sys_clock_disable>:
    5efe:	4770      	bx	lr

00005f00 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    5f00:	2000      	movs	r0, #0
    5f02:	f7fb bd29 	b.w	1958 <sys_reboot>

00005f06 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5f06:	2100      	movs	r1, #0
    5f08:	2001      	movs	r0, #1
    5f0a:	f7fc b959 	b.w	21c0 <z_arm_fatal_error>

00005f0e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5f0e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    5f10:	f383 880b 	msr	PSPLIM, r3
}
    5f14:	4770      	bx	lr

00005f16 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5f16:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5f18:	6800      	ldr	r0, [r0, #0]
    5f1a:	f7fc b951 	b.w	21c0 <z_arm_fatal_error>

00005f1e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    5f1e:	b508      	push	{r3, lr}
	handler();
    5f20:	f7fc f97c 	bl	221c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5f24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5f28:	f7fc bba2 	b.w	2670 <z_arm_exc_exit>

00005f2c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5f2c:	e840 f300 	tt	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5f30:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5f34:	b2d8      	uxtb	r0, r3
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    5f36:	bf08      	it	eq
    5f38:	f06f 0015 	mvneq.w	r0, #21
    5f3c:	4770      	bx	lr

00005f3e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    5f3e:	1e43      	subs	r3, r0, #1
    5f40:	3901      	subs	r1, #1
    5f42:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    5f46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    5f4a:	4282      	cmp	r2, r0
    5f4c:	d101      	bne.n	5f52 <strcmp+0x14>
    5f4e:	2a00      	cmp	r2, #0
    5f50:	d1f7      	bne.n	5f42 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    5f52:	1a10      	subs	r0, r2, r0
    5f54:	4770      	bx	lr

00005f56 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    5f56:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    5f58:	b15a      	cbz	r2, 5f72 <memcmp+0x1c>
    5f5a:	3901      	subs	r1, #1
    5f5c:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    5f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
    5f62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    5f66:	42a0      	cmp	r0, r4
    5f68:	d001      	beq.n	5f6e <memcmp+0x18>
    5f6a:	429a      	cmp	r2, r3
    5f6c:	d0f7      	beq.n	5f5e <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    5f6e:	1ad0      	subs	r0, r2, r3
}
    5f70:	bd10      	pop	{r4, pc}
		return 0;
    5f72:	4610      	mov	r0, r2
    5f74:	e7fc      	b.n	5f70 <memcmp+0x1a>

00005f76 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    5f76:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5f78:	ea81 0400 	eor.w	r4, r1, r0
    5f7c:	07a5      	lsls	r5, r4, #30
    5f7e:	4603      	mov	r3, r0
    5f80:	d00b      	beq.n	5f9a <memcpy+0x24>
    5f82:	3b01      	subs	r3, #1
    5f84:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    5f86:	4291      	cmp	r1, r2
    5f88:	d11b      	bne.n	5fc2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    5f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    5f8c:	2a00      	cmp	r2, #0
    5f8e:	d0fc      	beq.n	5f8a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    5f90:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    5f94:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    5f96:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    5f9a:	079c      	lsls	r4, r3, #30
    5f9c:	d1f6      	bne.n	5f8c <memcpy+0x16>
    5f9e:	f022 0403 	bic.w	r4, r2, #3
    5fa2:	1f1d      	subs	r5, r3, #4
    5fa4:	0896      	lsrs	r6, r2, #2
    5fa6:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    5fa8:	42b9      	cmp	r1, r7
    5faa:	d105      	bne.n	5fb8 <memcpy+0x42>
    5fac:	f06f 0503 	mvn.w	r5, #3
    5fb0:	4423      	add	r3, r4
    5fb2:	fb05 2206 	mla	r2, r5, r6, r2
    5fb6:	e7e4      	b.n	5f82 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    5fb8:	f851 cb04 	ldr.w	ip, [r1], #4
    5fbc:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    5fc0:	e7f2      	b.n	5fa8 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    5fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
    5fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    5fca:	e7dc      	b.n	5f86 <memcpy+0x10>

00005fcc <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    5fcc:	4603      	mov	r3, r0
{
    5fce:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    5fd0:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5fd2:	079c      	lsls	r4, r3, #30
    5fd4:	d111      	bne.n	5ffa <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    5fd6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    5fda:	f022 0603 	bic.w	r6, r2, #3
    5fde:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5fe2:	441e      	add	r6, r3
    5fe4:	0894      	lsrs	r4, r2, #2
    5fe6:	42b3      	cmp	r3, r6
    5fe8:	d10d      	bne.n	6006 <memset+0x3a>
    5fea:	f06f 0503 	mvn.w	r5, #3
    5fee:	fb05 2204 	mla	r2, r5, r4, r2
    5ff2:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5ff4:	4293      	cmp	r3, r2
    5ff6:	d109      	bne.n	600c <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    5ff8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    5ffa:	2a00      	cmp	r2, #0
    5ffc:	d0fc      	beq.n	5ff8 <memset+0x2c>
		*(d_byte++) = c_byte;
    5ffe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6002:	3a01      	subs	r2, #1
    6004:	e7e5      	b.n	5fd2 <memset+0x6>
		*(d_word++) = c_word;
    6006:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    600a:	e7ec      	b.n	5fe6 <memset+0x1a>
		*(d_byte++) = c_byte;
    600c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6010:	e7f0      	b.n	5ff4 <memset+0x28>

00006012 <_stdout_hook_default>:
}
    6012:	f04f 30ff 	mov.w	r0, #4294967295
    6016:	4770      	bx	lr

00006018 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6018:	6843      	ldr	r3, [r0, #4]
}
    601a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    601c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    601e:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    6020:	600b      	str	r3, [r1, #0]
}
    6022:	4770      	bx	lr

00006024 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6024:	6843      	ldr	r3, [r0, #4]
    6026:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6028:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    602a:	4042      	eors	r2, r0
    602c:	400a      	ands	r2, r1
    602e:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6030:	605a      	str	r2, [r3, #4]
}
    6032:	2000      	movs	r0, #0
    6034:	4770      	bx	lr

00006036 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6036:	6843      	ldr	r3, [r0, #4]
}
    6038:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    603a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    603c:	6099      	str	r1, [r3, #8]
}
    603e:	4770      	bx	lr

00006040 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6040:	6843      	ldr	r3, [r0, #4]
}
    6042:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6044:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    6046:	60d9      	str	r1, [r3, #12]
}
    6048:	4770      	bx	lr

0000604a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    604a:	6843      	ldr	r3, [r0, #4]
}
    604c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    604e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6050:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    6052:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6054:	6053      	str	r3, [r2, #4]
}
    6056:	4770      	bx	lr

00006058 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6058:	68c3      	ldr	r3, [r0, #12]
{
    605a:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
    605c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    605e:	b158      	cbz	r0, 6078 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6060:	2400      	movs	r4, #0
    6062:	4281      	cmp	r1, r0
    6064:	d113      	bne.n	608e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    6066:	6808      	ldr	r0, [r1, #0]
    6068:	b95c      	cbnz	r4, 6082 <gpio_nrfx_manage_callback+0x2a>
    606a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    606c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    606e:	42a1      	cmp	r1, r4
    6070:	d100      	bne.n	6074 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6072:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6074:	2000      	movs	r0, #0
    6076:	6008      	str	r0, [r1, #0]
	if (set) {
    6078:	b972      	cbnz	r2, 6098 <gpio_nrfx_manage_callback+0x40>
	return 0;
    607a:	2000      	movs	r0, #0
}
    607c:	bd30      	pop	{r4, r5, pc}
    607e:	4628      	mov	r0, r5
    6080:	e7ef      	b.n	6062 <gpio_nrfx_manage_callback+0xa>
    6082:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6084:	6898      	ldr	r0, [r3, #8]
    6086:	4281      	cmp	r1, r0
	list->tail = node;
    6088:	bf08      	it	eq
    608a:	609c      	streq	r4, [r3, #8]
}
    608c:	e7f2      	b.n	6074 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    608e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6090:	4604      	mov	r4, r0
    6092:	2d00      	cmp	r5, #0
    6094:	d1f3      	bne.n	607e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6096:	b13a      	cbz	r2, 60a8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    6098:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    609a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    609c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    609e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    60a0:	2800      	cmp	r0, #0
    60a2:	d1ea      	bne.n	607a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    60a4:	6099      	str	r1, [r3, #8]
}
    60a6:	e7e9      	b.n	607c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    60a8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    60ac:	e7e6      	b.n	607c <gpio_nrfx_manage_callback+0x24>

000060ae <flash_nrf_write_protection>:
}
    60ae:	2000      	movs	r0, #0
    60b0:	4770      	bx	lr

000060b2 <is_regular_addr_valid>:
{
    60b2:	b538      	push	{r3, r4, r5, lr}
    60b4:	4604      	mov	r4, r0
    60b6:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
    60b8:	f000 fa32 	bl	6520 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    60bc:	4284      	cmp	r4, r0
    60be:	d209      	bcs.n	60d4 <is_regular_addr_valid+0x22>
    60c0:	2c00      	cmp	r4, #0
    60c2:	db07      	blt.n	60d4 <is_regular_addr_valid+0x22>
	    addr < 0 ||
    60c4:	42a8      	cmp	r0, r5
    60c6:	d305      	bcc.n	60d4 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
    60c8:	442c      	add	r4, r5
	    len > flash_size ||
    60ca:	4284      	cmp	r4, r0
    60cc:	bf8c      	ite	hi
    60ce:	2000      	movhi	r0, #0
    60d0:	2001      	movls	r0, #1
}
    60d2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
    60d4:	2000      	movs	r0, #0
    60d6:	e7fc      	b.n	60d2 <is_regular_addr_valid+0x20>

000060d8 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
    60d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
    60dc:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
    60de:	6883      	ldr	r3, [r0, #8]
{
    60e0:	b086      	sub	sp, #24
    60e2:	4688      	mov	r8, r1
    60e4:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
    60e6:	695b      	ldr	r3, [r3, #20]
    60e8:	aa02      	add	r2, sp, #8
    60ea:	a901      	add	r1, sp, #4
    60ec:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
    60ee:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
    60f0:	4625      	mov	r5, r4
    60f2:	9b02      	ldr	r3, [sp, #8]
    60f4:	42ab      	cmp	r3, r5
    60f6:	d802      	bhi.n	60fe <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
    60f8:	b006      	add	sp, #24
    60fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
    60fe:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
    6100:	9f01      	ldr	r7, [sp, #4]
    6102:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
    6106:	687b      	ldr	r3, [r7, #4]
    6108:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    610a:	683a      	ldr	r2, [r7, #0]
    610c:	eb0a 0306 	add.w	r3, sl, r6
    6110:	42b2      	cmp	r2, r6
    6112:	d802      	bhi.n	611a <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
    6114:	469a      	mov	sl, r3
    6116:	3501      	adds	r5, #1
    6118:	e7eb      	b.n	60f2 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
    611a:	4649      	mov	r1, r9
    611c:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
    611e:	9403      	str	r4, [sp, #12]
			page_info.index = page;
    6120:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
    6122:	47c0      	blx	r8
    6124:	2800      	cmp	r0, #0
    6126:	d0e7      	beq.n	60f8 <flash_page_foreach+0x20>
			off += page_info.size;
    6128:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
    612a:	3601      	adds	r6, #1
			off += page_info.size;
    612c:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
    612e:	e7ec      	b.n	610a <flash_page_foreach+0x32>

00006130 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    6130:	6843      	ldr	r3, [r0, #4]
{
    6132:	b410      	push	{r4}
	return config->uarte_regs;
    6134:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    6136:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    613a:	05d2      	lsls	r2, r2, #23
    613c:	d518      	bpl.n	6170 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    613e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    6142:	b1aa      	cbz	r2, 6170 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
    6144:	f04f 0120 	mov.w	r1, #32
    6148:	f3ef 8211 	mrs	r2, BASEPRI
    614c:	f381 8811 	msr	BASEPRI, r1
    6150:	f3bf 8f6f 	isb	sy
    6154:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    6158:	b131      	cbz	r1, 6168 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    615a:	2100      	movs	r1, #0
    615c:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    6160:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6164:	2101      	movs	r1, #1
    6166:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    6168:	f382 8811 	msr	BASEPRI, r2
    616c:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
    6170:	68c2      	ldr	r2, [r0, #12]
    6172:	68d2      	ldr	r2, [r2, #12]
    6174:	b15a      	cbz	r2, 618e <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6176:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    617a:	b151      	cbz	r1, 6192 <uarte_nrfx_isr_int+0x62>
		data->int_driven->fifo_fill_lock = 0;
    617c:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
    617e:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
    6180:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    6182:	b134      	cbz	r4, 6192 <uarte_nrfx_isr_int+0x62>
    p_reg->INTENCLR = mask;
    6184:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    6188:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    618c:	7391      	strb	r1, [r2, #14]
}
    618e:	bc10      	pop	{r4}
    6190:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6192:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6196:	b121      	cbz	r1, 61a2 <uarte_nrfx_isr_int+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6198:	2100      	movs	r1, #0
    619a:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
    619e:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
    61a2:	6813      	ldr	r3, [r2, #0]
    61a4:	2b00      	cmp	r3, #0
    61a6:	d0f2      	beq.n	618e <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    61a8:	6851      	ldr	r1, [r2, #4]
}
    61aa:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
    61ac:	4718      	bx	r3

000061ae <uarte_nrfx_config_get>:
{
    61ae:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    61b0:	68c2      	ldr	r2, [r0, #12]
    61b2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    61b6:	e883 0003 	stmia.w	r3, {r0, r1}
}
    61ba:	2000      	movs	r0, #0
    61bc:	4770      	bx	lr

000061be <uarte_nrfx_err_check>:
	return config->uarte_regs;
    61be:	6843      	ldr	r3, [r0, #4]
    61c0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    61c2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    61c6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    61ca:	4770      	bx	lr

000061cc <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    61cc:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    61ce:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61d0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    61d4:	b938      	cbnz	r0, 61e6 <is_tx_ready+0x1a>
    61d6:	7992      	ldrb	r2, [r2, #6]
    61d8:	b932      	cbnz	r2, 61e8 <is_tx_ready+0x1c>
    61da:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    61de:	3800      	subs	r0, #0
    61e0:	bf18      	it	ne
    61e2:	2001      	movne	r0, #1
    61e4:	4770      	bx	lr
    61e6:	2001      	movs	r0, #1
}
    61e8:	4770      	bx	lr

000061ea <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    61ea:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    61ec:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    61ee:	681b      	ldr	r3, [r3, #0]
    61f0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    61f4:	b148      	cbz	r0, 620a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61f6:	2000      	movs	r0, #0
	*c = data->rx_data;
    61f8:	7d52      	ldrb	r2, [r2, #21]
    61fa:	700a      	strb	r2, [r1, #0]
    61fc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6200:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6204:	2201      	movs	r2, #1
    6206:	601a      	str	r2, [r3, #0]
	return 0;
    6208:	4770      	bx	lr
		return -1;
    620a:	f04f 30ff 	mov.w	r0, #4294967295
}
    620e:	4770      	bx	lr

00006210 <uarte_nrfx_fifo_fill>:
{
    6210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    6212:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    6214:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
    6216:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
    6218:	68f3      	ldr	r3, [r6, #12]
    621a:	899c      	ldrh	r4, [r3, #12]
    621c:	3310      	adds	r3, #16
    621e:	4294      	cmp	r4, r2
    6220:	bfa8      	it	ge
    6222:	4614      	movge	r4, r2
    6224:	2201      	movs	r2, #1
    6226:	e8d3 7fef 	ldaex	r7, [r3]
    622a:	2f00      	cmp	r7, #0
    622c:	d104      	bne.n	6238 <uarte_nrfx_fifo_fill+0x28>
    622e:	e8c3 2fec 	stlex	ip, r2, [r3]
    6232:	f1bc 0f00 	cmp.w	ip, #0
    6236:	d1f6      	bne.n	6226 <uarte_nrfx_fifo_fill+0x16>
    6238:	bf0c      	ite	eq
    623a:	4613      	moveq	r3, r2
    623c:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    623e:	d01c      	beq.n	627a <uarte_nrfx_fifo_fill+0x6a>
		return 0;
    6240:	461c      	mov	r4, r3
}
    6242:	4620      	mov	r0, r4
    6244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
    6246:	68f2      	ldr	r2, [r6, #12]
    6248:	5ccf      	ldrb	r7, [r1, r3]
    624a:	6892      	ldr	r2, [r2, #8]
    624c:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
    624e:	3301      	adds	r3, #1
    6250:	42a3      	cmp	r3, r4
    6252:	dbf8      	blt.n	6246 <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
    6254:	f04f 0320 	mov.w	r3, #32
    6258:	f3ef 8111 	mrs	r1, BASEPRI
    625c:	f383 8811 	msr	BASEPRI, r3
    6260:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    6264:	f7ff ffb2 	bl	61cc <is_tx_ready>
    6268:	68f3      	ldr	r3, [r6, #12]
    626a:	b940      	cbnz	r0, 627e <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
    626c:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
    626e:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
    6270:	f381 8811 	msr	BASEPRI, r1
    6274:	f3bf 8f6f 	isb	sy
	return len;
    6278:	e7e3      	b.n	6242 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
    627a:	2300      	movs	r3, #0
    627c:	e7e8      	b.n	6250 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    627e:	689b      	ldr	r3, [r3, #8]
    6280:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6284:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
    6286:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    628a:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
    628e:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
    6292:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
    6296:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    629a:	2301      	movs	r3, #1
    629c:	60ab      	str	r3, [r5, #8]
}
    629e:	e7e7      	b.n	6270 <uarte_nrfx_fifo_fill+0x60>

000062a0 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
    62a0:	6843      	ldr	r3, [r0, #4]
{
    62a2:	4602      	mov	r2, r0
	return config->uarte_regs;
    62a4:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62a6:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    62aa:	b148      	cbz	r0, 62c0 <uarte_nrfx_fifo_read+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62ac:	2000      	movs	r0, #0
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    62ae:	68d2      	ldr	r2, [r2, #12]
    62b0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    62b4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62b8:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    62ba:	7d52      	ldrb	r2, [r2, #21]
    62bc:	700a      	strb	r2, [r1, #0]
    62be:	6018      	str	r0, [r3, #0]
}
    62c0:	4770      	bx	lr

000062c2 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
    62c2:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    62c4:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
    62c6:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    62c8:	f04f 0020 	mov.w	r0, #32
    62cc:	f3ef 8311 	mrs	r3, BASEPRI
    62d0:	f380 8811 	msr	BASEPRI, r0
    62d4:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    62d8:	2000      	movs	r0, #0
    62da:	68c9      	ldr	r1, [r1, #12]
    62dc:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    62de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    62e2:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    62e6:	f383 8811 	msr	BASEPRI, r3
    62ea:	f3bf 8f6f 	isb	sy
}
    62ee:	4770      	bx	lr

000062f0 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
    62f0:	2201      	movs	r2, #1
    62f2:	68c3      	ldr	r3, [r0, #12]
    62f4:	68db      	ldr	r3, [r3, #12]
    62f6:	739a      	strb	r2, [r3, #14]
}
    62f8:	4770      	bx	lr

000062fa <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
    62fa:	68c3      	ldr	r3, [r0, #12]
    62fc:	68db      	ldr	r3, [r3, #12]
    62fe:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6300:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    6304:	b962      	cbnz	r2, 6320 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
    6306:	6842      	ldr	r2, [r0, #4]
    6308:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    630a:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    630e:	b140      	cbz	r0, 6322 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
    6310:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
    6314:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
    6318:	d003      	beq.n	6322 <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    631a:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
    631c:	6119      	str	r1, [r3, #16]
    631e:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    6320:	2000      	movs	r0, #0
}
    6322:	4770      	bx	lr

00006324 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
    6324:	6843      	ldr	r3, [r0, #4]
    6326:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6328:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    632c:	3800      	subs	r0, #0
    632e:	bf18      	it	ne
    6330:	2001      	movne	r0, #1
    6332:	4770      	bx	lr

00006334 <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
    6334:	2210      	movs	r2, #16
	return config->uarte_regs;
    6336:	6843      	ldr	r3, [r0, #4]
    6338:	681b      	ldr	r3, [r3, #0]
    633a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    633e:	4770      	bx	lr

00006340 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
    6340:	2210      	movs	r2, #16
	return config->uarte_regs;
    6342:	6843      	ldr	r3, [r0, #4]
    6344:	681b      	ldr	r3, [r3, #0]
    6346:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    634a:	4770      	bx	lr

0000634c <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
    634c:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    6350:	6843      	ldr	r3, [r0, #4]
    6352:	681b      	ldr	r3, [r3, #0]
    6354:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6358:	4770      	bx	lr

0000635a <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
    635a:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
    635e:	6843      	ldr	r3, [r0, #4]
    6360:	681b      	ldr	r3, [r3, #0]
    6362:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6366:	4770      	bx	lr

00006368 <uarte_nrfx_irq_update>:
}
    6368:	2001      	movs	r0, #1
    636a:	4770      	bx	lr

0000636c <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
    636c:	68c3      	ldr	r3, [r0, #12]
    636e:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
    6370:	e9c3 1200 	strd	r1, r2, [r3]
}
    6374:	4770      	bx	lr

00006376 <uarte_nrfx_irq_is_pending>:
{
    6376:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    6378:	6843      	ldr	r3, [r0, #4]
{
    637a:	4604      	mov	r4, r0
	return config->uarte_regs;
    637c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    637e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    6382:	025b      	lsls	r3, r3, #9
    6384:	d405      	bmi.n	6392 <uarte_nrfx_irq_is_pending+0x1c>
    6386:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    638a:	f010 0010 	ands.w	r0, r0, #16
    638e:	d106      	bne.n	639e <uarte_nrfx_irq_is_pending+0x28>
}
    6390:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    6392:	f7ff ffb2 	bl	62fa <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    6396:	2800      	cmp	r0, #0
    6398:	d0f5      	beq.n	6386 <uarte_nrfx_irq_is_pending+0x10>
		||
    639a:	2001      	movs	r0, #1
    639c:	e7f8      	b.n	6390 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
    639e:	4620      	mov	r0, r4
    63a0:	f7ff ffc0 	bl	6324 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    63a4:	3800      	subs	r0, #0
    63a6:	bf18      	it	ne
    63a8:	2001      	movne	r0, #1
    63aa:	e7f1      	b.n	6390 <uarte_nrfx_irq_is_pending+0x1a>

000063ac <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
    63ac:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    63ae:	f7fb fd79 	bl	1ea4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    63b2:	f7fb fe23 	bl	1ffc <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
    63b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    63ba:	f7fe bdf5 	b.w	4fa8 <nrf_cc3xx_platform_init_no_rng>

000063be <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
    63be:	b538      	push	{r3, r4, r5, lr}
    63c0:	460c      	mov	r4, r1
    63c2:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
    63c4:	f7ff fcfa 	bl	5dbc <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
    63c8:	4621      	mov	r1, r4
    63ca:	4425      	add	r5, r4
    63cc:	42a9      	cmp	r1, r5
    63ce:	d101      	bne.n	63d4 <bootutil_buffer_is_erased.part.0+0x16>
    return true;
    63d0:	2001      	movs	r0, #1
}
    63d2:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
    63d4:	f811 3b01 	ldrb.w	r3, [r1], #1
    63d8:	4298      	cmp	r0, r3
    63da:	d0f7      	beq.n	63cc <bootutil_buffer_is_erased.part.0+0xe>
            return false;
    63dc:	2000      	movs	r0, #0
    63de:	e7f8      	b.n	63d2 <bootutil_buffer_is_erased.part.0+0x14>

000063e0 <boot_write_trailer.constprop.0>:
boot_write_trailer(const struct flash_area *fap, uint32_t off,
    63e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    63e4:	4605      	mov	r5, r0
    63e6:	460e      	mov	r6, r1
    63e8:	4690      	mov	r8, r2
    align = flash_area_align(fap);
    63ea:	f7ff fcde 	bl	5daa <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    63ee:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    63f0:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    63f2:	d81e      	bhi.n	6432 <boot_write_trailer.constprop.0+0x52>
    erased_val = flash_area_erased_val(fap);
    63f4:	4628      	mov	r0, r5
    63f6:	f7ff fce1 	bl	5dbc <flash_area_erased_val>
    63fa:	2c01      	cmp	r4, #1
    63fc:	bf38      	it	cc
    63fe:	2401      	movcc	r4, #1
    6400:	4607      	mov	r7, r0
    memcpy(buf, inbuf, inlen);
    6402:	2201      	movs	r2, #1
    6404:	4641      	mov	r1, r8
    6406:	b2e4      	uxtb	r4, r4
    6408:	4668      	mov	r0, sp
    640a:	f7ff fdb4 	bl	5f76 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    640e:	4639      	mov	r1, r7
    6410:	1e62      	subs	r2, r4, #1
    6412:	f10d 0001 	add.w	r0, sp, #1
    6416:	f7ff fdd9 	bl	5fcc <memset>
    rc = flash_area_write(fap, off, buf, align);
    641a:	4623      	mov	r3, r4
    641c:	466a      	mov	r2, sp
    641e:	4631      	mov	r1, r6
    6420:	4628      	mov	r0, r5
    6422:	f7ff fc73 	bl	5d0c <flash_area_write>
    if (rc != 0) {
    6426:	3800      	subs	r0, #0
    6428:	bf18      	it	ne
    642a:	2001      	movne	r0, #1
}
    642c:	b002      	add	sp, #8
    642e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    6432:	f04f 30ff 	mov.w	r0, #4294967295
    6436:	e7f9      	b.n	642c <boot_write_trailer.constprop.0+0x4c>

00006438 <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    6438:	6880      	ldr	r0, [r0, #8]
}
    643a:	3828      	subs	r0, #40	; 0x28
    643c:	4770      	bx	lr

0000643e <boot_magic_compatible_check>:
    switch (tbl_val) {
    643e:	2804      	cmp	r0, #4
    6440:	d009      	beq.n	6456 <boot_magic_compatible_check+0x18>
    6442:	2805      	cmp	r0, #5
    6444:	d103      	bne.n	644e <boot_magic_compatible_check+0x10>
        return val != BOOT_MAGIC_GOOD;
    6446:	1e48      	subs	r0, r1, #1
    6448:	bf18      	it	ne
    644a:	2001      	movne	r0, #1
    644c:	4770      	bx	lr
        return tbl_val == val;
    644e:	1a43      	subs	r3, r0, r1
    6450:	4258      	negs	r0, r3
    6452:	4158      	adcs	r0, r3
    6454:	4770      	bx	lr
    switch (tbl_val) {
    6456:	2001      	movs	r0, #1
}
    6458:	4770      	bx	lr

0000645a <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
    645a:	b111      	cbz	r1, 6462 <bootutil_buffer_is_erased+0x8>
    645c:	b10a      	cbz	r2, 6462 <bootutil_buffer_is_erased+0x8>
    645e:	f7ff bfae 	b.w	63be <bootutil_buffer_is_erased.part.0>
}
    6462:	2000      	movs	r0, #0
    6464:	4770      	bx	lr

00006466 <boot_read_flag>:
{
    6466:	b538      	push	{r3, r4, r5, lr}
    6468:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    646a:	2301      	movs	r3, #1
{
    646c:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    646e:	4622      	mov	r2, r4
{
    6470:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
    6472:	f7ff fc2e 	bl	5cd2 <flash_area_read>
    if (rc < 0) {
    6476:	2800      	cmp	r0, #0
    6478:	db10      	blt.n	649c <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
    647a:	2201      	movs	r2, #1
    647c:	4621      	mov	r1, r4
    647e:	4628      	mov	r0, r5
    6480:	f7ff ffeb 	bl	645a <bootutil_buffer_is_erased>
    6484:	b118      	cbz	r0, 648e <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
    6486:	2303      	movs	r3, #3
    return 0;
    6488:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
    648a:	7023      	strb	r3, [r4, #0]
}
    648c:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    648e:	7823      	ldrb	r3, [r4, #0]
    6490:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
    6492:	bf0c      	ite	eq
    6494:	2301      	moveq	r3, #1
    6496:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
    6498:	7023      	strb	r3, [r4, #0]
    649a:	e7f7      	b.n	648c <boot_read_flag+0x26>
        return BOOT_EFLASH;
    649c:	2001      	movs	r0, #1
    649e:	e7f5      	b.n	648c <boot_read_flag+0x26>

000064a0 <boot_write_image_ok>:
    const uint8_t buf[1] = { flag_val };
    64a0:	2301      	movs	r3, #1
{
    64a2:	b507      	push	{r0, r1, r2, lr}
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    64a4:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, buf, 1);
    64a6:	aa01      	add	r2, sp, #4
    64a8:	3918      	subs	r1, #24
    const uint8_t buf[1] = { flag_val };
    64aa:	f88d 3004 	strb.w	r3, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
    64ae:	f7ff ff97 	bl	63e0 <boot_write_trailer.constprop.0>
}
    64b2:	b003      	add	sp, #12
    64b4:	f85d fb04 	ldr.w	pc, [sp], #4

000064b8 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    64b8:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
    64ba:	3a18      	subs	r2, #24
    64bc:	f7ff bfd3 	b.w	6466 <boot_read_flag>

000064c0 <boot_read_swap_state_by_id>:
{
    64c0:	b513      	push	{r0, r1, r4, lr}
    64c2:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    64c4:	b2c0      	uxtb	r0, r0
    64c6:	a901      	add	r1, sp, #4
    64c8:	f7fb fa0a 	bl	18e0 <flash_area_open>
    if (rc != 0) {
    64cc:	b950      	cbnz	r0, 64e4 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
    64ce:	4621      	mov	r1, r4
    64d0:	9801      	ldr	r0, [sp, #4]
    64d2:	f7fc fee1 	bl	3298 <boot_read_swap_state>
    64d6:	4604      	mov	r4, r0
    flash_area_close(fap);
    64d8:	9801      	ldr	r0, [sp, #4]
    64da:	f7ff fbf9 	bl	5cd0 <flash_area_close>
}
    64de:	4620      	mov	r0, r4
    64e0:	b002      	add	sp, #8
    64e2:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    64e4:	2401      	movs	r4, #1
    64e6:	e7fa      	b.n	64de <boot_read_swap_state_by_id+0x1e>

000064e8 <boot_write_swap_info>:
{
    64e8:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    64ea:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    64ee:	f88d 1007 	strb.w	r1, [sp, #7]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    64f2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    64f4:	f10d 0207 	add.w	r2, sp, #7
    64f8:	3928      	subs	r1, #40	; 0x28
    64fa:	f7ff ff71 	bl	63e0 <boot_write_trailer.constprop.0>
}
    64fe:	b003      	add	sp, #12
    6500:	f85d fb04 	ldr.w	pc, [sp], #4

00006504 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6504:	4700      	bx	r0

00006506 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6506:	f001 bd4b 	b.w	7fa0 <z_impl_k_busy_wait>

0000650a <nrfx_clock_enable>:
{
    650a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    650c:	2005      	movs	r0, #5
    650e:	f7fb fdf1 	bl	20f4 <arch_irq_is_enabled>
    6512:	b920      	cbnz	r0, 651e <nrfx_clock_enable+0x14>
}
    6514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6518:	2005      	movs	r0, #5
    651a:	f7fb bddb 	b.w	20d4 <arch_irq_enable>
    651e:	bd08      	pop	{r3, pc}

00006520 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
    6520:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    6524:	4770      	bx	lr

00006526 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
    6526:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    652a:	4770      	bx	lr

0000652c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
    652c:	f44f 7080 	mov.w	r0, #256	; 0x100
    6530:	4770      	bx	lr

00006532 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    6532:	2000      	movs	r0, #0
    6534:	4770      	bx	lr

00006536 <mbedtls_asn1_get_len>:
 */
int mbedtls_asn1_get_len( unsigned char **p,
                  const unsigned char *end,
                  size_t *len )
{
    if( ( end - *p ) < 1 )
    6536:	6803      	ldr	r3, [r0, #0]
{
    6538:	b570      	push	{r4, r5, r6, lr}
    if( ( end - *p ) < 1 )
    653a:	1acd      	subs	r5, r1, r3
    653c:	2d00      	cmp	r5, #0
    653e:	dd0d      	ble.n	655c <mbedtls_asn1_get_len+0x26>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( ( **p & 0x80 ) == 0 )
    6540:	f993 6000 	ldrsb.w	r6, [r3]
    6544:	781c      	ldrb	r4, [r3, #0]
    6546:	2e00      	cmp	r6, #0
    6548:	db0b      	blt.n	6562 <mbedtls_asn1_get_len+0x2c>
        *len = *(*p)++;
    654a:	1c5c      	adds	r4, r3, #1
    654c:	6004      	str	r4, [r0, #0]
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	6013      	str	r3, [r2, #0]
        default:
            return( MBEDTLS_ERR_ASN1_INVALID_LENGTH );
        }
    }

    if( *len > (size_t) ( end - *p ) )
    6552:	6803      	ldr	r3, [r0, #0]
    6554:	1ac9      	subs	r1, r1, r3
    6556:	6813      	ldr	r3, [r2, #0]
    6558:	428b      	cmp	r3, r1
    655a:	d932      	bls.n	65c2 <mbedtls_asn1_get_len+0x8c>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    655c:	f06f 005f 	mvn.w	r0, #95	; 0x5f

    return( 0 );
}
    6560:	bd70      	pop	{r4, r5, r6, pc}
        switch( **p & 0x7F )
    6562:	f004 047f 	and.w	r4, r4, #127	; 0x7f
    6566:	3c01      	subs	r4, #1
    6568:	2c03      	cmp	r4, #3
    656a:	d827      	bhi.n	65bc <mbedtls_asn1_get_len+0x86>
    656c:	e8df f004 	tbb	[pc, r4]
    6570:	1e120902 	.word	0x1e120902
            if( ( end - *p ) < 2 )
    6574:	2d01      	cmp	r5, #1
    6576:	d0f1      	beq.n	655c <mbedtls_asn1_get_len+0x26>
            *len = (*p)[1];
    6578:	785c      	ldrb	r4, [r3, #1]
            (*p) += 2;
    657a:	3302      	adds	r3, #2
            *len = (*p)[1];
    657c:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    657e:	6003      	str	r3, [r0, #0]
            break;
    6580:	e7e7      	b.n	6552 <mbedtls_asn1_get_len+0x1c>
            if( ( end - *p ) < 3 )
    6582:	2d02      	cmp	r5, #2
    6584:	ddea      	ble.n	655c <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    6586:	f8b3 4001 	ldrh.w	r4, [r3, #1]
            (*p) += 3;
    658a:	3303      	adds	r3, #3
            *len = ( (size_t)(*p)[1] << 8 ) | (*p)[2];
    658c:	ba64      	rev16	r4, r4
    658e:	b2a4      	uxth	r4, r4
    6590:	6014      	str	r4, [r2, #0]
            (*p) += 3;
    6592:	e7f4      	b.n	657e <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 4 )
    6594:	2d03      	cmp	r5, #3
    6596:	dde1      	ble.n	655c <mbedtls_asn1_get_len+0x26>
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    6598:	789c      	ldrb	r4, [r3, #2]
            *len = ( (size_t)(*p)[1] << 16 ) |
    659a:	785d      	ldrb	r5, [r3, #1]
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    659c:	0224      	lsls	r4, r4, #8
            *len = ( (size_t)(*p)[1] << 16 ) |
    659e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    65a2:	78dd      	ldrb	r5, [r3, #3]
            (*p) += 4;
    65a4:	3304      	adds	r3, #4
                   ( (size_t)(*p)[2] << 8  ) | (*p)[3];
    65a6:	432c      	orrs	r4, r5
            *len = ( (size_t)(*p)[1] << 16 ) |
    65a8:	6014      	str	r4, [r2, #0]
            (*p) += 4;
    65aa:	e7e8      	b.n	657e <mbedtls_asn1_get_len+0x48>
            if( ( end - *p ) < 5 )
    65ac:	2d04      	cmp	r5, #4
    65ae:	ddd5      	ble.n	655c <mbedtls_asn1_get_len+0x26>
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    65b0:	f8d3 4001 	ldr.w	r4, [r3, #1]
            (*p) += 5;
    65b4:	3305      	adds	r3, #5
    65b6:	ba24      	rev	r4, r4
            *len = ( (size_t)(*p)[1] << 24 ) | ( (size_t)(*p)[2] << 16 ) |
    65b8:	6014      	str	r4, [r2, #0]
            (*p) += 5;
    65ba:	e7e0      	b.n	657e <mbedtls_asn1_get_len+0x48>
    if( ( **p & 0x80 ) == 0 )
    65bc:	f06f 0063 	mvn.w	r0, #99	; 0x63
    65c0:	e7ce      	b.n	6560 <mbedtls_asn1_get_len+0x2a>
    return( 0 );
    65c2:	2000      	movs	r0, #0
    65c4:	e7cc      	b.n	6560 <mbedtls_asn1_get_len+0x2a>

000065c6 <mbedtls_asn1_get_tag>:

int mbedtls_asn1_get_tag( unsigned char **p,
                  const unsigned char *end,
                  size_t *len, int tag )
{
    65c6:	b470      	push	{r4, r5, r6}
    if( ( end - *p ) < 1 )
    65c8:	6804      	ldr	r4, [r0, #0]
    65ca:	1b0e      	subs	r6, r1, r4
    65cc:	2e00      	cmp	r6, #0
    65ce:	dd07      	ble.n	65e0 <mbedtls_asn1_get_tag+0x1a>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );

    if( **p != tag )
    65d0:	7826      	ldrb	r6, [r4, #0]
    65d2:	429e      	cmp	r6, r3
    65d4:	d108      	bne.n	65e8 <mbedtls_asn1_get_tag+0x22>
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );

    (*p)++;
    65d6:	3401      	adds	r4, #1
    65d8:	6004      	str	r4, [r0, #0]

    return( mbedtls_asn1_get_len( p, end, len ) );
}
    65da:	bc70      	pop	{r4, r5, r6}
    return( mbedtls_asn1_get_len( p, end, len ) );
    65dc:	f7ff bfab 	b.w	6536 <mbedtls_asn1_get_len>
        return( MBEDTLS_ERR_ASN1_OUT_OF_DATA );
    65e0:	f06f 005f 	mvn.w	r0, #95	; 0x5f
}
    65e4:	bc70      	pop	{r4, r5, r6}
    65e6:	4770      	bx	lr
        return( MBEDTLS_ERR_ASN1_UNEXPECTED_TAG );
    65e8:	f06f 0061 	mvn.w	r0, #97	; 0x61
    65ec:	e7fa      	b.n	65e4 <mbedtls_asn1_get_tag+0x1e>

000065ee <mbedtls_asn1_get_mpi>:

#if defined(MBEDTLS_BIGNUM_C)
int mbedtls_asn1_get_mpi( unsigned char **p,
                  const unsigned char *end,
                  mbedtls_mpi *X )
{
    65ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int ret;
    size_t len;

    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    65f0:	2302      	movs	r3, #2
{
    65f2:	4615      	mov	r5, r2
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    65f4:	aa01      	add	r2, sp, #4
{
    65f6:	4604      	mov	r4, r0
    if( ( ret = mbedtls_asn1_get_tag( p, end, &len, MBEDTLS_ASN1_INTEGER ) ) != 0 )
    65f8:	f7ff ffe5 	bl	65c6 <mbedtls_asn1_get_tag>
    65fc:	b940      	cbnz	r0, 6610 <mbedtls_asn1_get_mpi+0x22>
        return( ret );

    ret = mbedtls_mpi_read_binary( X, *p, len );
    65fe:	9a01      	ldr	r2, [sp, #4]
    6600:	4628      	mov	r0, r5
    6602:	6821      	ldr	r1, [r4, #0]
    6604:	f000 fbe4 	bl	6dd0 <mbedtls_mpi_read_binary>

    *p += len;
    6608:	6823      	ldr	r3, [r4, #0]
    660a:	9a01      	ldr	r2, [sp, #4]
    660c:	4413      	add	r3, r2
    660e:	6023      	str	r3, [r4, #0]

    return( ret );
}
    6610:	b003      	add	sp, #12
    6612:	bd30      	pop	{r4, r5, pc}

00006614 <mpi_sub_hlp>:
 *                      0 if `d >= s`.
 */
static mbedtls_mpi_uint mpi_sub_hlp( size_t n,
                                     mbedtls_mpi_uint *d,
                                     const mbedtls_mpi_uint *s )
{
    6614:	b5f0      	push	{r4, r5, r6, r7, lr}
    6616:	4605      	mov	r5, r0
    size_t i;
    mbedtls_mpi_uint c, z;

    for( i = c = 0; i < n; i++, s++, d++ )
    6618:	2000      	movs	r0, #0
    661a:	4604      	mov	r4, r0
    661c:	3904      	subs	r1, #4
    661e:	42ac      	cmp	r4, r5
    6620:	d100      	bne.n	6624 <mpi_sub_hlp+0x10>
        z = ( *d <  c );     *d -=  c;
        c = ( *d < *s ) + z; *d -= *s;
    }

    return( c );
}
    6622:	bdf0      	pop	{r4, r5, r6, r7, pc}
        z = ( *d <  c );     *d -=  c;
    6624:	f851 7f04 	ldr.w	r7, [r1, #4]!
    6628:	1a3b      	subs	r3, r7, r0
    662a:	600b      	str	r3, [r1, #0]
        c = ( *d < *s ) + z; *d -= *s;
    662c:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
    for( i = c = 0; i < n; i++, s++, d++ )
    6630:	3401      	adds	r4, #1
        c = ( *d < *s ) + z; *d -= *s;
    6632:	42b3      	cmp	r3, r6
    6634:	bf2c      	ite	cs
    6636:	f04f 0c00 	movcs.w	ip, #0
    663a:	f04f 0c01 	movcc.w	ip, #1
    663e:	1b9b      	subs	r3, r3, r6
    6640:	4287      	cmp	r7, r0
    6642:	bf2c      	ite	cs
    6644:	4660      	movcs	r0, ip
    6646:	f10c 0001 	addcc.w	r0, ip, #1
    664a:	600b      	str	r3, [r1, #0]
    for( i = c = 0; i < n; i++, s++, d++ )
    664c:	e7e7      	b.n	661e <mpi_sub_hlp+0xa>

0000664e <mpi_mul_hlp>:
 * appears to need this to prevent bad ARM code generation at -O3.
 */
__attribute__ ((noinline))
#endif
void mpi_mul_hlp( size_t i, mbedtls_mpi_uint *s, mbedtls_mpi_uint *d, mbedtls_mpi_uint b )
{
    664e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        MULADDC_INIT
        MULADDC_CORE
        MULADDC_STOP
    }
#else /* MULADDC_HUIT */
    for( ; i >= 16; i -= 16 )
    6652:	4684      	mov	ip, r0
    6654:	460d      	mov	r5, r1
    mbedtls_mpi_uint c = 0, t = 0;
    6656:	f04f 0e00 	mov.w	lr, #0
    665a:	f102 0440 	add.w	r4, r2, #64	; 0x40
    for( ; i >= 16; i -= 16 )
    665e:	f1bc 0f0f 	cmp.w	ip, #15
    6662:	f854 8c40 	ldr.w	r8, [r4, #-64]
    6666:	f105 0540 	add.w	r5, r5, #64	; 0x40
    666a:	f104 0440 	add.w	r4, r4, #64	; 0x40
    666e:	f200 80bf 	bhi.w	67f0 <mpi_mul_hlp+0x1a2>
    6672:	f06f 050f 	mvn.w	r5, #15
    6676:	0904      	lsrs	r4, r0, #4
    6678:	fb05 0004 	mla	r0, r5, r4, r0
        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
        MULADDC_STOP
    }

    for( ; i >= 8; i -= 8 )
    667c:	2807      	cmp	r0, #7
    667e:	ea4f 1984 	mov.w	r9, r4, lsl #6
    6682:	eb01 1584 	add.w	r5, r1, r4, lsl #6
    6686:	eb02 1484 	add.w	r4, r2, r4, lsl #6
    668a:	f240 809c 	bls.w	67c6 <mpi_mul_hlp+0x178>
    {
        MULADDC_INIT
        MULADDC_CORE   MULADDC_CORE
    668e:	f851 6009 	ldr.w	r6, [r1, r9]
    for( ; i >= 8; i -= 8 )
    6692:	3808      	subs	r0, #8
        MULADDC_CORE   MULADDC_CORE
    6694:	fba3 6706 	umull	r6, r7, r3, r6
    6698:	eb1e 0e06 	adds.w	lr, lr, r6
    669c:	bf2c      	ite	cs
    669e:	f04f 0c01 	movcs.w	ip, #1
    66a2:	f04f 0c00 	movcc.w	ip, #0
    66a6:	eb18 010e 	adds.w	r1, r8, lr
    66aa:	f842 1009 	str.w	r1, [r2, r9]
    66ae:	bf2c      	ite	cs
    66b0:	2201      	movcs	r2, #1
    66b2:	2200      	movcc	r2, #0
    66b4:	686e      	ldr	r6, [r5, #4]
    66b6:	44bc      	add	ip, r7
    66b8:	fba3 6706 	umull	r6, r7, r3, r6
    66bc:	4462      	add	r2, ip
    66be:	1992      	adds	r2, r2, r6
    66c0:	bf2c      	ite	cs
    66c2:	2101      	movcs	r1, #1
    66c4:	2100      	movcc	r1, #0
    66c6:	eb01 0c07 	add.w	ip, r1, r7
    66ca:	6861      	ldr	r1, [r4, #4]
        MULADDC_CORE   MULADDC_CORE

        MULADDC_CORE   MULADDC_CORE
        MULADDC_CORE   MULADDC_CORE
    66cc:	3520      	adds	r5, #32
    66ce:	1852      	adds	r2, r2, r1
        MULADDC_CORE   MULADDC_CORE
    66d0:	bf2c      	ite	cs
    66d2:	2101      	movcs	r1, #1
    66d4:	2100      	movcc	r1, #0
    66d6:	6062      	str	r2, [r4, #4]
        MULADDC_CORE   MULADDC_CORE
    66d8:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
    66dc:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    66de:	fba3 6706 	umull	r6, r7, r3, r6
    66e2:	1989      	adds	r1, r1, r6
    66e4:	bf2c      	ite	cs
    66e6:	2201      	movcs	r2, #1
    66e8:	2200      	movcc	r2, #0
    66ea:	eb02 0c07 	add.w	ip, r2, r7
    66ee:	68a2      	ldr	r2, [r4, #8]
        MULADDC_CORE   MULADDC_CORE
    66f0:	3420      	adds	r4, #32
    66f2:	1889      	adds	r1, r1, r2
        MULADDC_CORE   MULADDC_CORE
    66f4:	bf2c      	ite	cs
    66f6:	2201      	movcs	r2, #1
    66f8:	2200      	movcc	r2, #0
    66fa:	f844 1c18 	str.w	r1, [r4, #-24]
    66fe:	f855 6c14 	ldr.w	r6, [r5, #-20]
    6702:	4462      	add	r2, ip
    6704:	fba3 6706 	umull	r6, r7, r3, r6
    6708:	1992      	adds	r2, r2, r6
    670a:	bf2c      	ite	cs
    670c:	2101      	movcs	r1, #1
    670e:	2100      	movcc	r1, #0
    6710:	eb01 0c07 	add.w	ip, r1, r7
    6714:	f854 1c14 	ldr.w	r1, [r4, #-20]
    6718:	1852      	adds	r2, r2, r1
    671a:	bf2c      	ite	cs
    671c:	2101      	movcs	r1, #1
    671e:	2100      	movcc	r1, #0
    6720:	f844 2c14 	str.w	r2, [r4, #-20]
        MULADDC_CORE   MULADDC_CORE
    6724:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    6728:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    672a:	fba3 6706 	umull	r6, r7, r3, r6
    672e:	1989      	adds	r1, r1, r6
    6730:	bf2c      	ite	cs
    6732:	2201      	movcs	r2, #1
    6734:	2200      	movcc	r2, #0
    6736:	eb02 0c07 	add.w	ip, r2, r7
    673a:	f854 2c10 	ldr.w	r2, [r4, #-16]
    673e:	1889      	adds	r1, r1, r2
    6740:	bf2c      	ite	cs
    6742:	2201      	movcs	r2, #1
    6744:	2200      	movcc	r2, #0
    6746:	f844 1c10 	str.w	r1, [r4, #-16]
    674a:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    674e:	4462      	add	r2, ip
    6750:	fba3 6706 	umull	r6, r7, r3, r6
    6754:	1992      	adds	r2, r2, r6
    6756:	bf2c      	ite	cs
    6758:	2101      	movcs	r1, #1
    675a:	2100      	movcc	r1, #0
    675c:	eb01 0c07 	add.w	ip, r1, r7
    6760:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    6764:	1852      	adds	r2, r2, r1
    6766:	bf2c      	ite	cs
    6768:	2101      	movcs	r1, #1
    676a:	2100      	movcc	r1, #0
    676c:	f844 2c0c 	str.w	r2, [r4, #-12]
        MULADDC_CORE   MULADDC_CORE
    6770:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    6774:	4461      	add	r1, ip
        MULADDC_CORE   MULADDC_CORE
    6776:	fba3 6706 	umull	r6, r7, r3, r6
    677a:	1989      	adds	r1, r1, r6
    677c:	bf2c      	ite	cs
    677e:	2201      	movcs	r2, #1
    6780:	2200      	movcc	r2, #0
    6782:	eb02 0c07 	add.w	ip, r2, r7
    6786:	f854 2c08 	ldr.w	r2, [r4, #-8]
    678a:	1889      	adds	r1, r1, r2
    678c:	bf2c      	ite	cs
    678e:	2201      	movcs	r2, #1
    6790:	2200      	movcc	r2, #0
    6792:	f844 1c08 	str.w	r1, [r4, #-8]
    6796:	f855 6c04 	ldr.w	r6, [r5, #-4]
    679a:	4462      	add	r2, ip
    679c:	fba3 6706 	umull	r6, r7, r3, r6
    67a0:	1992      	adds	r2, r2, r6
    67a2:	bf2c      	ite	cs
    67a4:	f04f 0e01 	movcs.w	lr, #1
    67a8:	f04f 0e00 	movcc.w	lr, #0
    67ac:	f854 6c04 	ldr.w	r6, [r4, #-4]
    67b0:	eb0e 0107 	add.w	r1, lr, r7
    67b4:	1992      	adds	r2, r2, r6
    67b6:	bf2c      	ite	cs
    67b8:	f04f 0e01 	movcs.w	lr, #1
    67bc:	f04f 0e00 	movcc.w	lr, #0
    67c0:	f844 2c04 	str.w	r2, [r4, #-4]
    67c4:	448e      	add	lr, r1
    67c6:	4621      	mov	r1, r4
    67c8:	ea4f 0c80 	mov.w	ip, r0, lsl #2
    67cc:	eb05 0080 	add.w	r0, r5, r0, lsl #2
        MULADDC_STOP
    }

    for( ; i > 0; i-- )
    67d0:	4285      	cmp	r5, r0
    67d2:	f851 2b04 	ldr.w	r2, [r1], #4
    67d6:	f040 819a 	bne.w	6b0e <mpi_mul_hlp+0x4c0>
    67da:	4464      	add	r4, ip
#endif /* MULADDC_HUIT */

    t++;

    do {
        *d += c; c = ( *d < c ); d++;
    67dc:	6823      	ldr	r3, [r4, #0]
    67de:	eb13 030e 	adds.w	r3, r3, lr
    67e2:	f844 3b04 	str.w	r3, [r4], #4
    67e6:	f04f 0e01 	mov.w	lr, #1
    }
    while( c != 0 );
    67ea:	d2f7      	bcs.n	67dc <mpi_mul_hlp+0x18e>
}
    67ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MULADDC_CORE   MULADDC_CORE
    67f0:	f855 6c40 	ldr.w	r6, [r5, #-64]
    for( ; i >= 16; i -= 16 )
    67f4:	f1ac 0c10 	sub.w	ip, ip, #16
        MULADDC_CORE   MULADDC_CORE
    67f8:	fba3 6706 	umull	r6, r7, r3, r6
    67fc:	eb1e 0e06 	adds.w	lr, lr, r6
    6800:	bf2c      	ite	cs
    6802:	f04f 0901 	movcs.w	r9, #1
    6806:	f04f 0900 	movcc.w	r9, #0
    680a:	eb1e 0608 	adds.w	r6, lr, r8
    680e:	bf2c      	ite	cs
    6810:	f04f 0801 	movcs.w	r8, #1
    6814:	f04f 0800 	movcc.w	r8, #0
    6818:	f844 6c80 	str.w	r6, [r4, #-128]
    681c:	f855 6c3c 	ldr.w	r6, [r5, #-60]
    6820:	44b9      	add	r9, r7
    6822:	fba3 6706 	umull	r6, r7, r3, r6
    6826:	44c8      	add	r8, r9
    6828:	eb18 0806 	adds.w	r8, r8, r6
    682c:	bf2c      	ite	cs
    682e:	f04f 0e01 	movcs.w	lr, #1
    6832:	f04f 0e00 	movcc.w	lr, #0
    6836:	f854 6c7c 	ldr.w	r6, [r4, #-124]
    683a:	eb0e 0907 	add.w	r9, lr, r7
    683e:	eb16 0608 	adds.w	r6, r6, r8
    6842:	bf2c      	ite	cs
    6844:	f04f 0e01 	movcs.w	lr, #1
    6848:	f04f 0e00 	movcc.w	lr, #0
    684c:	f844 6c7c 	str.w	r6, [r4, #-124]
        MULADDC_CORE   MULADDC_CORE
    6850:	f855 6c38 	ldr.w	r6, [r5, #-56]
        MULADDC_CORE   MULADDC_CORE
    6854:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6856:	fba3 6706 	umull	r6, r7, r3, r6
    685a:	eb1e 0e06 	adds.w	lr, lr, r6
    685e:	bf2c      	ite	cs
    6860:	f04f 0801 	movcs.w	r8, #1
    6864:	f04f 0800 	movcc.w	r8, #0
    6868:	eb08 0907 	add.w	r9, r8, r7
    686c:	f854 7c78 	ldr.w	r7, [r4, #-120]
    6870:	eb17 070e 	adds.w	r7, r7, lr
    6874:	bf2c      	ite	cs
    6876:	f04f 0801 	movcs.w	r8, #1
    687a:	f04f 0800 	movcc.w	r8, #0
    687e:	f844 7c78 	str.w	r7, [r4, #-120]
    6882:	f855 6c34 	ldr.w	r6, [r5, #-52]
    6886:	44c8      	add	r8, r9
    6888:	fba3 6706 	umull	r6, r7, r3, r6
    688c:	eb18 0806 	adds.w	r8, r8, r6
    6890:	bf2c      	ite	cs
    6892:	f04f 0e01 	movcs.w	lr, #1
    6896:	f04f 0e00 	movcc.w	lr, #0
    689a:	f854 6c74 	ldr.w	r6, [r4, #-116]
    689e:	eb0e 0907 	add.w	r9, lr, r7
    68a2:	eb16 0608 	adds.w	r6, r6, r8
    68a6:	bf2c      	ite	cs
    68a8:	f04f 0e01 	movcs.w	lr, #1
    68ac:	f04f 0e00 	movcc.w	lr, #0
    68b0:	f844 6c74 	str.w	r6, [r4, #-116]
        MULADDC_CORE   MULADDC_CORE
    68b4:	f855 6c30 	ldr.w	r6, [r5, #-48]
        MULADDC_CORE   MULADDC_CORE
    68b8:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    68ba:	fba3 6706 	umull	r6, r7, r3, r6
    68be:	eb1e 0e06 	adds.w	lr, lr, r6
    68c2:	bf2c      	ite	cs
    68c4:	f04f 0801 	movcs.w	r8, #1
    68c8:	f04f 0800 	movcc.w	r8, #0
    68cc:	eb08 0907 	add.w	r9, r8, r7
    68d0:	f854 7c70 	ldr.w	r7, [r4, #-112]
    68d4:	eb17 070e 	adds.w	r7, r7, lr
    68d8:	bf2c      	ite	cs
    68da:	f04f 0801 	movcs.w	r8, #1
    68de:	f04f 0800 	movcc.w	r8, #0
    68e2:	f844 7c70 	str.w	r7, [r4, #-112]
    68e6:	f855 6c2c 	ldr.w	r6, [r5, #-44]
    68ea:	44c8      	add	r8, r9
    68ec:	fba3 6706 	umull	r6, r7, r3, r6
    68f0:	eb18 0806 	adds.w	r8, r8, r6
    68f4:	bf2c      	ite	cs
    68f6:	f04f 0e01 	movcs.w	lr, #1
    68fa:	f04f 0e00 	movcc.w	lr, #0
    68fe:	f854 6c6c 	ldr.w	r6, [r4, #-108]
    6902:	eb0e 0907 	add.w	r9, lr, r7
    6906:	eb16 0608 	adds.w	r6, r6, r8
    690a:	bf2c      	ite	cs
    690c:	f04f 0e01 	movcs.w	lr, #1
    6910:	f04f 0e00 	movcc.w	lr, #0
    6914:	f844 6c6c 	str.w	r6, [r4, #-108]
        MULADDC_CORE   MULADDC_CORE
    6918:	f855 6c28 	ldr.w	r6, [r5, #-40]
        MULADDC_CORE   MULADDC_CORE
    691c:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    691e:	fba3 6706 	umull	r6, r7, r3, r6
    6922:	eb1e 0e06 	adds.w	lr, lr, r6
    6926:	bf2c      	ite	cs
    6928:	f04f 0801 	movcs.w	r8, #1
    692c:	f04f 0800 	movcc.w	r8, #0
    6930:	eb08 0907 	add.w	r9, r8, r7
    6934:	f854 7c68 	ldr.w	r7, [r4, #-104]
    6938:	eb17 070e 	adds.w	r7, r7, lr
    693c:	bf2c      	ite	cs
    693e:	f04f 0801 	movcs.w	r8, #1
    6942:	f04f 0800 	movcc.w	r8, #0
    6946:	f844 7c68 	str.w	r7, [r4, #-104]
    694a:	f855 6c24 	ldr.w	r6, [r5, #-36]
    694e:	44c8      	add	r8, r9
    6950:	fba3 6706 	umull	r6, r7, r3, r6
    6954:	eb18 0806 	adds.w	r8, r8, r6
    6958:	bf2c      	ite	cs
    695a:	f04f 0e01 	movcs.w	lr, #1
    695e:	f04f 0e00 	movcc.w	lr, #0
    6962:	f854 6c64 	ldr.w	r6, [r4, #-100]
    6966:	eb0e 0907 	add.w	r9, lr, r7
    696a:	eb16 0608 	adds.w	r6, r6, r8
    696e:	bf2c      	ite	cs
    6970:	f04f 0e01 	movcs.w	lr, #1
    6974:	f04f 0e00 	movcc.w	lr, #0
    6978:	f844 6c64 	str.w	r6, [r4, #-100]
        MULADDC_CORE   MULADDC_CORE
    697c:	f855 6c20 	ldr.w	r6, [r5, #-32]
        MULADDC_CORE   MULADDC_CORE
    6980:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6982:	fba3 6706 	umull	r6, r7, r3, r6
    6986:	eb1e 0e06 	adds.w	lr, lr, r6
    698a:	bf2c      	ite	cs
    698c:	f04f 0801 	movcs.w	r8, #1
    6990:	f04f 0800 	movcc.w	r8, #0
    6994:	eb08 0907 	add.w	r9, r8, r7
    6998:	f854 7c60 	ldr.w	r7, [r4, #-96]
    699c:	eb17 070e 	adds.w	r7, r7, lr
    69a0:	bf2c      	ite	cs
    69a2:	f04f 0801 	movcs.w	r8, #1
    69a6:	f04f 0800 	movcc.w	r8, #0
    69aa:	f844 7c60 	str.w	r7, [r4, #-96]
    69ae:	f855 6c1c 	ldr.w	r6, [r5, #-28]
    69b2:	44c8      	add	r8, r9
    69b4:	fba3 6706 	umull	r6, r7, r3, r6
    69b8:	eb18 0806 	adds.w	r8, r8, r6
    69bc:	bf2c      	ite	cs
    69be:	f04f 0e01 	movcs.w	lr, #1
    69c2:	f04f 0e00 	movcc.w	lr, #0
    69c6:	f854 6c5c 	ldr.w	r6, [r4, #-92]
    69ca:	eb0e 0907 	add.w	r9, lr, r7
    69ce:	eb16 0608 	adds.w	r6, r6, r8
    69d2:	bf2c      	ite	cs
    69d4:	f04f 0e01 	movcs.w	lr, #1
    69d8:	f04f 0e00 	movcc.w	lr, #0
    69dc:	f844 6c5c 	str.w	r6, [r4, #-92]
        MULADDC_CORE   MULADDC_CORE
    69e0:	f855 6c18 	ldr.w	r6, [r5, #-24]
        MULADDC_CORE   MULADDC_CORE
    69e4:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    69e6:	fba3 6706 	umull	r6, r7, r3, r6
    69ea:	eb1e 0e06 	adds.w	lr, lr, r6
    69ee:	bf2c      	ite	cs
    69f0:	f04f 0801 	movcs.w	r8, #1
    69f4:	f04f 0800 	movcc.w	r8, #0
    69f8:	eb08 0907 	add.w	r9, r8, r7
    69fc:	f854 7c58 	ldr.w	r7, [r4, #-88]
    6a00:	eb17 070e 	adds.w	r7, r7, lr
    6a04:	bf2c      	ite	cs
    6a06:	f04f 0801 	movcs.w	r8, #1
    6a0a:	f04f 0800 	movcc.w	r8, #0
    6a0e:	f844 7c58 	str.w	r7, [r4, #-88]
    6a12:	f855 6c14 	ldr.w	r6, [r5, #-20]
    6a16:	44c8      	add	r8, r9
    6a18:	fba3 6706 	umull	r6, r7, r3, r6
    6a1c:	eb18 0806 	adds.w	r8, r8, r6
    6a20:	bf2c      	ite	cs
    6a22:	f04f 0e01 	movcs.w	lr, #1
    6a26:	f04f 0e00 	movcc.w	lr, #0
    6a2a:	f854 6c54 	ldr.w	r6, [r4, #-84]
    6a2e:	eb0e 0907 	add.w	r9, lr, r7
    6a32:	eb16 0608 	adds.w	r6, r6, r8
    6a36:	bf2c      	ite	cs
    6a38:	f04f 0e01 	movcs.w	lr, #1
    6a3c:	f04f 0e00 	movcc.w	lr, #0
    6a40:	f844 6c54 	str.w	r6, [r4, #-84]
        MULADDC_CORE   MULADDC_CORE
    6a44:	f855 6c10 	ldr.w	r6, [r5, #-16]
        MULADDC_CORE   MULADDC_CORE
    6a48:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6a4a:	fba3 6706 	umull	r6, r7, r3, r6
    6a4e:	eb1e 0e06 	adds.w	lr, lr, r6
    6a52:	bf2c      	ite	cs
    6a54:	f04f 0801 	movcs.w	r8, #1
    6a58:	f04f 0800 	movcc.w	r8, #0
    6a5c:	eb08 0907 	add.w	r9, r8, r7
    6a60:	f854 7c50 	ldr.w	r7, [r4, #-80]
    6a64:	eb17 070e 	adds.w	r7, r7, lr
    6a68:	bf2c      	ite	cs
    6a6a:	f04f 0801 	movcs.w	r8, #1
    6a6e:	f04f 0800 	movcc.w	r8, #0
    6a72:	f844 7c50 	str.w	r7, [r4, #-80]
    6a76:	f855 6c0c 	ldr.w	r6, [r5, #-12]
    6a7a:	44c8      	add	r8, r9
    6a7c:	fba3 6706 	umull	r6, r7, r3, r6
    6a80:	eb18 0806 	adds.w	r8, r8, r6
    6a84:	bf2c      	ite	cs
    6a86:	f04f 0e01 	movcs.w	lr, #1
    6a8a:	f04f 0e00 	movcc.w	lr, #0
    6a8e:	f854 6c4c 	ldr.w	r6, [r4, #-76]
    6a92:	eb0e 0907 	add.w	r9, lr, r7
    6a96:	eb16 0608 	adds.w	r6, r6, r8
    6a9a:	bf2c      	ite	cs
    6a9c:	f04f 0e01 	movcs.w	lr, #1
    6aa0:	f04f 0e00 	movcc.w	lr, #0
    6aa4:	f844 6c4c 	str.w	r6, [r4, #-76]
        MULADDC_CORE   MULADDC_CORE
    6aa8:	f855 6c08 	ldr.w	r6, [r5, #-8]
        MULADDC_CORE   MULADDC_CORE
    6aac:	44ce      	add	lr, r9
        MULADDC_CORE   MULADDC_CORE
    6aae:	fba3 6706 	umull	r6, r7, r3, r6
    6ab2:	eb1e 0e06 	adds.w	lr, lr, r6
    6ab6:	bf2c      	ite	cs
    6ab8:	f04f 0801 	movcs.w	r8, #1
    6abc:	f04f 0800 	movcc.w	r8, #0
    6ac0:	eb08 0907 	add.w	r9, r8, r7
    6ac4:	f854 7c48 	ldr.w	r7, [r4, #-72]
    6ac8:	eb17 070e 	adds.w	r7, r7, lr
    6acc:	bf2c      	ite	cs
    6ace:	f04f 0801 	movcs.w	r8, #1
    6ad2:	f04f 0800 	movcc.w	r8, #0
    6ad6:	f844 7c48 	str.w	r7, [r4, #-72]
    6ada:	f855 6c04 	ldr.w	r6, [r5, #-4]
    6ade:	44c8      	add	r8, r9
    6ae0:	fba3 6706 	umull	r6, r7, r3, r6
    6ae4:	eb18 0806 	adds.w	r8, r8, r6
    6ae8:	bf2c      	ite	cs
    6aea:	f04f 0e01 	movcs.w	lr, #1
    6aee:	f04f 0e00 	movcc.w	lr, #0
    6af2:	f854 6c44 	ldr.w	r6, [r4, #-68]
    6af6:	4477      	add	r7, lr
    6af8:	eb16 0608 	adds.w	r6, r6, r8
    6afc:	bf2c      	ite	cs
    6afe:	f04f 0e01 	movcs.w	lr, #1
    6b02:	f04f 0e00 	movcc.w	lr, #0
    6b06:	f844 6c44 	str.w	r6, [r4, #-68]
    6b0a:	44be      	add	lr, r7
    for( ; i >= 16; i -= 16 )
    6b0c:	e5a7      	b.n	665e <mpi_mul_hlp+0x10>
        MULADDC_CORE
    6b0e:	f855 6b04 	ldr.w	r6, [r5], #4
    6b12:	fba3 7806 	umull	r7, r8, r3, r6
    6b16:	eb1e 0e07 	adds.w	lr, lr, r7
    6b1a:	bf2c      	ite	cs
    6b1c:	2601      	movcs	r6, #1
    6b1e:	2600      	movcc	r6, #0
    6b20:	eb12 020e 	adds.w	r2, r2, lr
    6b24:	bf2c      	ite	cs
    6b26:	f04f 0e01 	movcs.w	lr, #1
    6b2a:	f04f 0e00 	movcc.w	lr, #0
    6b2e:	4446      	add	r6, r8
    6b30:	44b6      	add	lr, r6
    6b32:	f841 2c04 	str.w	r2, [r1, #-4]
    for( ; i > 0; i-- )
    6b36:	e64b      	b.n	67d0 <mpi_mul_hlp+0x182>

00006b38 <mpi_bigendian_to_host.part.0>:
static void mpi_bigendian_to_host( mbedtls_mpi_uint * const p, size_t limbs )
    6b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
    for( cur_limb_left = p, cur_limb_right = p + ( limbs - 1 );
    6b3a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6b3e:	3901      	subs	r1, #1
    6b40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    6b44:	4281      	cmp	r1, r0
    6b46:	d201      	bcs.n	6b4c <mpi_bigendian_to_host.part.0+0x14>
}
    6b48:	b002      	add	sp, #8
    6b4a:	bd70      	pop	{r4, r5, r6, pc}
    return( mpi_uint_bigendian_to_host_c( x ) );
    6b4c:	6803      	ldr	r3, [r0, #0]
    mbedtls_mpi_uint tmp = 0;
    6b4e:	2500      	movs	r5, #0
    6b50:	9301      	str	r3, [sp, #4]
        tmp             = mpi_uint_bigendian_to_host( *cur_limb_left  );
    6b52:	2304      	movs	r3, #4
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6b54:	eb0d 0203 	add.w	r2, sp, r3
    6b58:	4614      	mov	r4, r2
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6b5a:	f812 6b01 	ldrb.w	r6, [r2], #1
    6b5e:	3b01      	subs	r3, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6b60:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6b64:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6b68:	d1f7      	bne.n	6b5a <mpi_bigendian_to_host.part.0+0x22>
    return( mpi_uint_bigendian_to_host_c( x ) );
    6b6a:	680a      	ldr	r2, [r1, #0]
    6b6c:	9201      	str	r2, [sp, #4]
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    6b6e:	2204      	movs	r2, #4
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6b70:	f814 6b01 	ldrb.w	r6, [r4], #1
    6b74:	3a01      	subs	r2, #1
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6b76:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
        tmp |= (mbedtls_mpi_uint) *x_ptr;
    6b7a:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    for( i = 0, x_ptr = (unsigned char*) &x; i < ciL; i++, x_ptr++ )
    6b7e:	d1f7      	bne.n	6b70 <mpi_bigendian_to_host.part.0+0x38>
        *cur_limb_left  = mpi_uint_bigendian_to_host( *cur_limb_right );
    6b80:	f840 3b04 	str.w	r3, [r0], #4
        *cur_limb_right = tmp;
    6b84:	f841 5904 	str.w	r5, [r1], #-4
         cur_limb_left++, cur_limb_right-- )
    6b88:	e7dc      	b.n	6b44 <mpi_bigendian_to_host.part.0+0xc>

00006b8a <mpi_montmul.isra.0>:
 *                      Its initial content is unused and
 *                      its final content is indeterminate.
 *                      Note that unlike the usual convention in the library
 *                      for `const mbedtls_mpi*`, the content of T can change.
 */
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    6b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6b8e:	468a      	mov	sl, r1
    6b90:	4617      	mov	r7, r2
    6b92:	b085      	sub	sp, #20
    6b94:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    6b96:	9000      	str	r0, [sp, #0]
                         const mbedtls_mpi *T )
{
    size_t i, n, m;
    mbedtls_mpi_uint u0, u1, *d;

    memset( T->p, 0, T->n * ciL );
    6b98:	6862      	ldr	r2, [r4, #4]
    6b9a:	68a0      	ldr	r0, [r4, #8]
    6b9c:	2100      	movs	r1, #0
    6b9e:	0092      	lsls	r2, r2, #2
static void mpi_montmul( mbedtls_mpi *A, const mbedtls_mpi *B, const mbedtls_mpi *N, mbedtls_mpi_uint mm,
    6ba0:	9303      	str	r3, [sp, #12]
    memset( T->p, 0, T->n * ciL );
    6ba2:	f7ff fa13 	bl	5fcc <memset>

    d = T->p;
    n = N->n;
    6ba6:	f8d7 9004 	ldr.w	r9, [r7, #4]
    m = ( B->n < n ) ? B->n : n;
    6baa:	f8da 3004 	ldr.w	r3, [sl, #4]
    d = T->p;
    6bae:	68a6      	ldr	r6, [r4, #8]
    m = ( B->n < n ) ? B->n : n;
    6bb0:	454b      	cmp	r3, r9
    6bb2:	bf28      	it	cs
    6bb4:	464b      	movcs	r3, r9
    d = T->p;
    6bb6:	46b0      	mov	r8, r6

    for( i = 0; i < n; i++ )
    6bb8:	2500      	movs	r5, #0
        u1 = ( d[0] + u0 * B->p[0] ) * mm;

        mpi_mul_hlp( m, B->p, d, u0 );
        mpi_mul_hlp( n, N->p, d, u1 );

        *d++ = u0; d[n + 1] = 0;
    6bba:	f109 0401 	add.w	r4, r9, #1
    m = ( B->n < n ) ? B->n : n;
    6bbe:	9301      	str	r3, [sp, #4]
        *d++ = u0; d[n + 1] = 0;
    6bc0:	00a4      	lsls	r4, r4, #2
    for( i = 0; i < n; i++ )
    6bc2:	9b00      	ldr	r3, [sp, #0]
    6bc4:	45a9      	cmp	r9, r5
    6bc6:	6818      	ldr	r0, [r3, #0]
    6bc8:	d120      	bne.n	6c0c <mpi_montmul.isra.0+0x82>
    6bca:	3c04      	subs	r4, #4
    6bcc:	eb06 0804 	add.w	r8, r6, r4
     * plus N. We now potentially subtract N, avoiding leaking whether the
     * subtraction is performed through side channels. */

    /* Copy the n least significant limbs of d to A, so that
     * A = d if d < N (recall that N has n limbs). */
    memcpy( A->p, d, n * ciL );
    6bd0:	4622      	mov	r2, r4
    6bd2:	4641      	mov	r1, r8
    6bd4:	f7ff f9cf 	bl	5f76 <memcpy>
    /* If d >= N then we want to set A to d - N. To prevent timing attacks,
     * do the calculation without using conditional tests. */
    /* Set d to d0 + (2^biL)^n - N where d0 is the current value of d. */
    d[n] += 1;
    6bd8:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    6bdc:	4641      	mov	r1, r8
    d[n] += 1;
    6bde:	3301      	adds	r3, #1
    6be0:	f846 3014 	str.w	r3, [r6, r4, lsl #1]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    6be4:	4628      	mov	r0, r5
    6be6:	68ba      	ldr	r2, [r7, #8]
    6be8:	f7ff fd14 	bl	6614 <mpi_sub_hlp>
    6bec:	f856 3014 	ldr.w	r3, [r6, r4, lsl #1]
    6bf0:	1a18      	subs	r0, r3, r0
     * so d[n] == 0 and we want to keep A as it is.
     * If d0 >= N then d >= (2^biL)^n, and d <= (2^biL)^n + N < 2 * (2^biL)^n
     * so d[n] == 1 and we want to set A to the result of the subtraction
     * which is d - (2^biL)^n, i.e. the n least significant limbs of d.
     * This exactly corresponds to a conditional assignment. */
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    6bf2:	9b00      	ldr	r3, [sp, #0]
    d[n] -= mpi_sub_hlp( n, d, N->p );
    6bf4:	f846 0014 	str.w	r0, [r6, r4, lsl #1]
    mpi_safe_cond_assign( n, A->p, d, (unsigned char) d[n] );
    6bf8:	681c      	ldr	r4, [r3, #0]
    for( i = 0; i < n; i++ )
    6bfa:	2300      	movs	r3, #0
    6bfc:	b2c0      	uxtb	r0, r0
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    6bfe:	f1c0 0601 	rsb	r6, r0, #1
    for( i = 0; i < n; i++ )
    6c02:	429d      	cmp	r5, r3
    6c04:	d120      	bne.n	6c48 <mpi_montmul.isra.0+0xbe>
}
    6c06:	b005      	add	sp, #20
    6c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6c0c:	f8da 1008 	ldr.w	r1, [sl, #8]
        u0 = A->p[i];
    6c10:	f850 b025 	ldr.w	fp, [r0, r5, lsl #2]
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6c14:	680b      	ldr	r3, [r1, #0]
    6c16:	f8d8 0000 	ldr.w	r0, [r8]
    6c1a:	9a03      	ldr	r2, [sp, #12]
    6c1c:	fb03 030b 	mla	r3, r3, fp, r0
    6c20:	4353      	muls	r3, r2
        mpi_mul_hlp( m, B->p, d, u0 );
    6c22:	9801      	ldr	r0, [sp, #4]
    6c24:	4642      	mov	r2, r8
        u1 = ( d[0] + u0 * B->p[0] ) * mm;
    6c26:	9302      	str	r3, [sp, #8]
        mpi_mul_hlp( m, B->p, d, u0 );
    6c28:	465b      	mov	r3, fp
    6c2a:	f7ff fd10 	bl	664e <mpi_mul_hlp>
        mpi_mul_hlp( n, N->p, d, u1 );
    6c2e:	4642      	mov	r2, r8
    6c30:	9b02      	ldr	r3, [sp, #8]
    6c32:	4648      	mov	r0, r9
    6c34:	68b9      	ldr	r1, [r7, #8]
    6c36:	f7ff fd0a 	bl	664e <mpi_mul_hlp>
        *d++ = u0; d[n + 1] = 0;
    6c3a:	2300      	movs	r3, #0
    6c3c:	f848 bb04 	str.w	fp, [r8], #4
    6c40:	f848 3004 	str.w	r3, [r8, r4]
    for( i = 0; i < n; i++ )
    6c44:	3501      	adds	r5, #1
    6c46:	e7bc      	b.n	6bc2 <mpi_montmul.isra.0+0x38>
        dest[i] = dest[i] * ( 1 - assign ) + src[i] * assign;
    6c48:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
    6c4c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6c50:	4341      	muls	r1, r0
    6c52:	fb02 1206 	mla	r2, r2, r6, r1
    6c56:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for( i = 0; i < n; i++ )
    6c5a:	3301      	adds	r3, #1
    6c5c:	e7d1      	b.n	6c02 <mpi_montmul.isra.0+0x78>

00006c5e <mbedtls_mpi_init>:
    X->n = 0;
    6c5e:	2300      	movs	r3, #0
    6c60:	2201      	movs	r2, #1
    X->p = NULL;
    6c62:	6083      	str	r3, [r0, #8]
    X->n = 0;
    6c64:	e9c0 2300 	strd	r2, r3, [r0]
}
    6c68:	4770      	bx	lr

00006c6a <mbedtls_mpi_free>:
{
    6c6a:	b510      	push	{r4, lr}
    if( X == NULL )
    6c6c:	4604      	mov	r4, r0
    6c6e:	b168      	cbz	r0, 6c8c <mbedtls_mpi_free+0x22>
    if( X->p != NULL )
    6c70:	6880      	ldr	r0, [r0, #8]
    6c72:	b130      	cbz	r0, 6c82 <mbedtls_mpi_free+0x18>
    mbedtls_platform_zeroize( v, ciL * n );
    6c74:	6861      	ldr	r1, [r4, #4]
    6c76:	0089      	lsls	r1, r1, #2
    6c78:	f7fc ff80 	bl	3b7c <mbedtls_platform_zeroize>
        mbedtls_free( X->p );
    6c7c:	68a0      	ldr	r0, [r4, #8]
    6c7e:	f7fc ff6d 	bl	3b5c <mbedtls_free>
    X->n = 0;
    6c82:	2300      	movs	r3, #0
    6c84:	2201      	movs	r2, #1
    6c86:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    6c8a:	60a3      	str	r3, [r4, #8]
}
    6c8c:	bd10      	pop	{r4, pc}

00006c8e <mbedtls_mpi_grow>:
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    6c8e:	f242 7310 	movw	r3, #10000	; 0x2710
    6c92:	4299      	cmp	r1, r3
{
    6c94:	b570      	push	{r4, r5, r6, lr}
    6c96:	4604      	mov	r4, r0
    6c98:	460d      	mov	r5, r1
    if( nblimbs > MBEDTLS_MPI_MAX_LIMBS )
    6c9a:	d902      	bls.n	6ca2 <mbedtls_mpi_grow+0x14>
        return( MBEDTLS_ERR_MPI_ALLOC_FAILED );
    6c9c:	f06f 000f 	mvn.w	r0, #15
}
    6ca0:	bd70      	pop	{r4, r5, r6, pc}
    if( X->n < nblimbs )
    6ca2:	6843      	ldr	r3, [r0, #4]
    6ca4:	428b      	cmp	r3, r1
    6ca6:	d216      	bcs.n	6cd6 <mbedtls_mpi_grow+0x48>
        if( ( p = (mbedtls_mpi_uint*)mbedtls_calloc( nblimbs, ciL ) ) == NULL )
    6ca8:	2104      	movs	r1, #4
    6caa:	4628      	mov	r0, r5
    6cac:	f7fc ff50 	bl	3b50 <mbedtls_calloc>
    6cb0:	4606      	mov	r6, r0
    6cb2:	2800      	cmp	r0, #0
    6cb4:	d0f2      	beq.n	6c9c <mbedtls_mpi_grow+0xe>
        if( X->p != NULL )
    6cb6:	68a1      	ldr	r1, [r4, #8]
    6cb8:	b159      	cbz	r1, 6cd2 <mbedtls_mpi_grow+0x44>
            memcpy( p, X->p, X->n * ciL );
    6cba:	6862      	ldr	r2, [r4, #4]
    6cbc:	0092      	lsls	r2, r2, #2
    6cbe:	f7ff f95a 	bl	5f76 <memcpy>
    mbedtls_platform_zeroize( v, ciL * n );
    6cc2:	6861      	ldr	r1, [r4, #4]
    6cc4:	68a0      	ldr	r0, [r4, #8]
    6cc6:	0089      	lsls	r1, r1, #2
    6cc8:	f7fc ff58 	bl	3b7c <mbedtls_platform_zeroize>
            mbedtls_free( X->p );
    6ccc:	68a0      	ldr	r0, [r4, #8]
    6cce:	f7fc ff45 	bl	3b5c <mbedtls_free>
        X->p = p;
    6cd2:	e9c4 5601 	strd	r5, r6, [r4, #4]
    return( 0 );
    6cd6:	2000      	movs	r0, #0
    6cd8:	e7e2      	b.n	6ca0 <mbedtls_mpi_grow+0x12>

00006cda <mbedtls_mpi_copy>:
    if( X == Y )
    6cda:	4288      	cmp	r0, r1
{
    6cdc:	b570      	push	{r4, r5, r6, lr}
    6cde:	4605      	mov	r5, r0
    6ce0:	460e      	mov	r6, r1
    if( X == Y )
    6ce2:	d003      	beq.n	6cec <mbedtls_mpi_copy+0x12>
    if( Y->n == 0 )
    6ce4:	684c      	ldr	r4, [r1, #4]
    6ce6:	b93c      	cbnz	r4, 6cf8 <mbedtls_mpi_copy+0x1e>
        mbedtls_mpi_free( X );
    6ce8:	f7ff ffbf 	bl	6c6a <mbedtls_mpi_free>
        return( 0 );
    6cec:	2000      	movs	r0, #0
    6cee:	e011      	b.n	6d14 <mbedtls_mpi_copy+0x3a>
        if( Y->p[i] != 0 )
    6cf0:	68b3      	ldr	r3, [r6, #8]
    6cf2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    6cf6:	b913      	cbnz	r3, 6cfe <mbedtls_mpi_copy+0x24>
    for( i = Y->n - 1; i > 0; i-- )
    6cf8:	3c01      	subs	r4, #1
    6cfa:	2c00      	cmp	r4, #0
    6cfc:	d1f8      	bne.n	6cf0 <mbedtls_mpi_copy+0x16>
    if( X->n < i )
    6cfe:	686a      	ldr	r2, [r5, #4]
    X->s = Y->s;
    6d00:	6833      	ldr	r3, [r6, #0]
    i++;
    6d02:	3401      	adds	r4, #1
    if( X->n < i )
    6d04:	42a2      	cmp	r2, r4
    X->s = Y->s;
    6d06:	602b      	str	r3, [r5, #0]
    if( X->n < i )
    6d08:	d205      	bcs.n	6d16 <mbedtls_mpi_copy+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i ) );
    6d0a:	4621      	mov	r1, r4
    6d0c:	4628      	mov	r0, r5
    6d0e:	f7ff ffbe 	bl	6c8e <mbedtls_mpi_grow>
    6d12:	b140      	cbz	r0, 6d26 <mbedtls_mpi_copy+0x4c>
}
    6d14:	bd70      	pop	{r4, r5, r6, pc}
        memset( X->p + i, 0, ( X->n - i ) * ciL );
    6d16:	68a8      	ldr	r0, [r5, #8]
    6d18:	1b12      	subs	r2, r2, r4
    6d1a:	2100      	movs	r1, #0
    6d1c:	0092      	lsls	r2, r2, #2
    6d1e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6d22:	f7ff f953 	bl	5fcc <memset>
    memcpy( X->p, Y->p, i * ciL );
    6d26:	68b1      	ldr	r1, [r6, #8]
    6d28:	68a8      	ldr	r0, [r5, #8]
    6d2a:	00a2      	lsls	r2, r4, #2
    6d2c:	f7ff f923 	bl	5f76 <memcpy>
    6d30:	e7dc      	b.n	6cec <mbedtls_mpi_copy+0x12>

00006d32 <mbedtls_mpi_lset>:
{
    6d32:	b570      	push	{r4, r5, r6, lr}
    6d34:	460e      	mov	r6, r1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    6d36:	2101      	movs	r1, #1
{
    6d38:	4604      	mov	r4, r0
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, 1 ) );
    6d3a:	f7ff ffa8 	bl	6c8e <mbedtls_mpi_grow>
    6d3e:	4605      	mov	r5, r0
    6d40:	b988      	cbnz	r0, 6d66 <mbedtls_mpi_lset+0x34>
    memset( X->p, 0, X->n * ciL );
    6d42:	6862      	ldr	r2, [r4, #4]
    6d44:	4601      	mov	r1, r0
    6d46:	0092      	lsls	r2, r2, #2
    6d48:	68a0      	ldr	r0, [r4, #8]
    6d4a:	f7ff f93f 	bl	5fcc <memset>
    X->p[0] = ( z < 0 ) ? -z : z;
    6d4e:	68a3      	ldr	r3, [r4, #8]
    6d50:	ea86 72e6 	eor.w	r2, r6, r6, asr #31
    X->s    = ( z < 0 ) ? -1 : 1;
    6d54:	2e00      	cmp	r6, #0
    X->p[0] = ( z < 0 ) ? -z : z;
    6d56:	eba2 72e6 	sub.w	r2, r2, r6, asr #31
    6d5a:	601a      	str	r2, [r3, #0]
    X->s    = ( z < 0 ) ? -1 : 1;
    6d5c:	bfb4      	ite	lt
    6d5e:	f04f 33ff 	movlt.w	r3, #4294967295
    6d62:	2301      	movge	r3, #1
    6d64:	6023      	str	r3, [r4, #0]
}
    6d66:	4628      	mov	r0, r5
    6d68:	bd70      	pop	{r4, r5, r6, pc}

00006d6a <mbedtls_mpi_get_bit>:
    if( X->n * biL <= pos )
    6d6a:	6843      	ldr	r3, [r0, #4]
    6d6c:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
    return( ( X->p[pos / biL] >> ( pos % biL ) ) & 0x01 );
    6d70:	bf3f      	itttt	cc
    6d72:	6883      	ldrcc	r3, [r0, #8]
    6d74:	094a      	lsrcc	r2, r1, #5
    6d76:	f853 0022 	ldrcc.w	r0, [r3, r2, lsl #2]
    6d7a:	f001 011f 	andcc.w	r1, r1, #31
    6d7e:	bf3a      	itte	cc
    6d80:	fa20 f101 	lsrcc.w	r1, r0, r1
    6d84:	f001 0001 	andcc.w	r0, r1, #1
        return( 0 );
    6d88:	2000      	movcs	r0, #0
}
    6d8a:	4770      	bx	lr

00006d8c <mbedtls_mpi_bitlen>:
{
    6d8c:	4602      	mov	r2, r0
    if( X->n == 0 )
    6d8e:	6840      	ldr	r0, [r0, #4]
    6d90:	b188      	cbz	r0, 6db6 <mbedtls_mpi_bitlen+0x2a>
    for( i = X->n - 1; i > 0; i-- )
    6d92:	6892      	ldr	r2, [r2, #8]
    6d94:	1e43      	subs	r3, r0, #1
    6d96:	b97b      	cbnz	r3, 6db8 <mbedtls_mpi_bitlen+0x2c>
    j = biL - mbedtls_clz( X->p[i] );
    6d98:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for( j = 0; j < biL; j++ )
    6d9c:	2000      	movs	r0, #0
    mbedtls_mpi_uint mask = (mbedtls_mpi_uint) 1 << (biL - 1);
    6d9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
        if( x & mask ) break;
    6da2:	4211      	tst	r1, r2
    6da4:	d104      	bne.n	6db0 <mbedtls_mpi_bitlen+0x24>
    for( j = 0; j < biL; j++ )
    6da6:	3001      	adds	r0, #1
    6da8:	2820      	cmp	r0, #32
        mask >>= 1;
    6daa:	ea4f 0252 	mov.w	r2, r2, lsr #1
    for( j = 0; j < biL; j++ )
    6dae:	d1f8      	bne.n	6da2 <mbedtls_mpi_bitlen+0x16>
    return( ( i * biL ) + j );
    6db0:	3301      	adds	r3, #1
    6db2:	ebc0 1043 	rsb	r0, r0, r3, lsl #5
}
    6db6:	4770      	bx	lr
        if( X->p[i] != 0 )
    6db8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    6dbc:	2900      	cmp	r1, #0
    6dbe:	d1eb      	bne.n	6d98 <mbedtls_mpi_bitlen+0xc>
    for( i = X->n - 1; i > 0; i-- )
    6dc0:	3b01      	subs	r3, #1
    6dc2:	e7e8      	b.n	6d96 <mbedtls_mpi_bitlen+0xa>

00006dc4 <mbedtls_mpi_size>:
{
    6dc4:	b508      	push	{r3, lr}
    return( ( mbedtls_mpi_bitlen( X ) + 7 ) >> 3 );
    6dc6:	f7ff ffe1 	bl	6d8c <mbedtls_mpi_bitlen>
    6dca:	3007      	adds	r0, #7
}
    6dcc:	08c0      	lsrs	r0, r0, #3
    6dce:	bd08      	pop	{r3, pc}

00006dd0 <mbedtls_mpi_read_binary>:
{
    6dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    6dd4:	f012 0503 	ands.w	r5, r2, #3
    6dd8:	bf18      	it	ne
    6dda:	2501      	movne	r5, #1
    if( X->n != limbs )
    6ddc:	6843      	ldr	r3, [r0, #4]
    size_t const limbs    = CHARS_TO_LIMBS( buflen );
    6dde:	eb05 0592 	add.w	r5, r5, r2, lsr #2
    if( X->n != limbs )
    6de2:	42ab      	cmp	r3, r5
{
    6de4:	4604      	mov	r4, r0
    6de6:	4688      	mov	r8, r1
    6de8:	4617      	mov	r7, r2
    if( X->n != limbs )
    6dea:	d108      	bne.n	6dfe <mbedtls_mpi_read_binary+0x2e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    6dec:	2100      	movs	r1, #0
    6dee:	4620      	mov	r0, r4
    6df0:	f7ff ff9f 	bl	6d32 <mbedtls_mpi_lset>
    6df4:	4606      	mov	r6, r0
    6df6:	b188      	cbz	r0, 6e1c <mbedtls_mpi_read_binary+0x4c>
}
    6df8:	4630      	mov	r0, r6
    6dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        mbedtls_mpi_free( X );
    6dfe:	f7ff ff34 	bl	6c6a <mbedtls_mpi_free>
    X->n = 0;
    6e02:	2300      	movs	r3, #0
    6e04:	2201      	movs	r2, #1
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    6e06:	4629      	mov	r1, r5
    6e08:	4620      	mov	r0, r4
    X->n = 0;
    6e0a:	e9c4 2300 	strd	r2, r3, [r4]
    X->p = NULL;
    6e0e:	60a3      	str	r3, [r4, #8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, limbs ) );
    6e10:	f7ff ff3d 	bl	6c8e <mbedtls_mpi_grow>
    6e14:	4606      	mov	r6, r0
    6e16:	2800      	cmp	r0, #0
    6e18:	d0e8      	beq.n	6dec <mbedtls_mpi_read_binary+0x1c>
    6e1a:	e7ed      	b.n	6df8 <mbedtls_mpi_read_binary+0x28>
    if( buf != NULL )
    6e1c:	f1b8 0f00 	cmp.w	r8, #0
    6e20:	d0ea      	beq.n	6df8 <mbedtls_mpi_read_binary+0x28>
        memcpy( Xp + overhead, buf, buflen );
    6e22:	68a3      	ldr	r3, [r4, #8]
    size_t const overhead = ( limbs * ciL ) - buflen;
    6e24:	ebc7 0085 	rsb	r0, r7, r5, lsl #2
        memcpy( Xp + overhead, buf, buflen );
    6e28:	463a      	mov	r2, r7
    6e2a:	4641      	mov	r1, r8
    6e2c:	4418      	add	r0, r3
    6e2e:	f7ff f8a2 	bl	5f76 <memcpy>
    if( limbs == 0 )
    6e32:	2d00      	cmp	r5, #0
    6e34:	d0e0      	beq.n	6df8 <mbedtls_mpi_read_binary+0x28>
    6e36:	4629      	mov	r1, r5
    6e38:	68a0      	ldr	r0, [r4, #8]
    6e3a:	f7ff fe7d 	bl	6b38 <mpi_bigendian_to_host.part.0>
    return( ret );
    6e3e:	e7db      	b.n	6df8 <mbedtls_mpi_read_binary+0x28>

00006e40 <mbedtls_mpi_write_binary>:
{
    6e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e42:	4604      	mov	r4, r0
    stored_bytes = X->n * ciL;
    6e44:	6863      	ldr	r3, [r4, #4]
{
    6e46:	4608      	mov	r0, r1
    if( stored_bytes < buflen )
    6e48:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
    stored_bytes = X->n * ciL;
    6e4c:	ea4f 0583 	mov.w	r5, r3, lsl #2
    if( stored_bytes < buflen )
    6e50:	d91c      	bls.n	6e8c <mbedtls_mpi_write_binary+0x4c>
        p = buf + buflen - stored_bytes;
    6e52:	1b52      	subs	r2, r2, r5
    6e54:	188e      	adds	r6, r1, r2
        memset( buf, 0, buflen - stored_bytes );
    6e56:	2100      	movs	r1, #0
    6e58:	f7ff f8b8 	bl	5fcc <memset>
        p = buf + buflen - stored_bytes;
    6e5c:	4630      	mov	r0, r6
    6e5e:	462a      	mov	r2, r5
    for( i = 0; i < bytes_to_copy; i++ )
    6e60:	2300      	movs	r3, #0
    6e62:	1881      	adds	r1, r0, r2
    6e64:	429a      	cmp	r2, r3
    6e66:	d113      	bne.n	6e90 <mbedtls_mpi_write_binary+0x50>
    return( 0 );
    6e68:	2000      	movs	r0, #0
}
    6e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( GET_BYTE( X, i ) != 0 )
    6e6c:	68a7      	ldr	r7, [r4, #8]
    6e6e:	f003 0103 	and.w	r1, r3, #3
    6e72:	f023 0c03 	bic.w	ip, r3, #3
    6e76:	00ce      	lsls	r6, r1, #3
    6e78:	f857 100c 	ldr.w	r1, [r7, ip]
    6e7c:	40f1      	lsrs	r1, r6
    6e7e:	f011 0fff 	tst.w	r1, #255	; 0xff
    6e82:	d111      	bne.n	6ea8 <mbedtls_mpi_write_binary+0x68>
        for( i = bytes_to_copy; i < stored_bytes; i++ )
    6e84:	3301      	adds	r3, #1
    6e86:	42ab      	cmp	r3, r5
    6e88:	d1f0      	bne.n	6e6c <mbedtls_mpi_write_binary+0x2c>
    6e8a:	e7e9      	b.n	6e60 <mbedtls_mpi_write_binary+0x20>
    6e8c:	4613      	mov	r3, r2
    6e8e:	e7fa      	b.n	6e86 <mbedtls_mpi_write_binary+0x46>
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    6e90:	68a7      	ldr	r7, [r4, #8]
    6e92:	f003 0003 	and.w	r0, r3, #3
    6e96:	f023 0603 	bic.w	r6, r3, #3
    6e9a:	00c5      	lsls	r5, r0, #3
    6e9c:	59b8      	ldr	r0, [r7, r6]
    for( i = 0; i < bytes_to_copy; i++ )
    6e9e:	3301      	adds	r3, #1
        p[bytes_to_copy - i - 1] = GET_BYTE( X, i );
    6ea0:	40e8      	lsrs	r0, r5
    6ea2:	f801 0d01 	strb.w	r0, [r1, #-1]!
    for( i = 0; i < bytes_to_copy; i++ )
    6ea6:	e7dd      	b.n	6e64 <mbedtls_mpi_write_binary+0x24>
                return( MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL );
    6ea8:	f06f 0007 	mvn.w	r0, #7
    6eac:	e7dd      	b.n	6e6a <mbedtls_mpi_write_binary+0x2a>

00006eae <mbedtls_mpi_shift_l>:
{
    6eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eb0:	4604      	mov	r4, r0
    6eb2:	460e      	mov	r6, r1
    v0 = count / (biL    );
    6eb4:	094d      	lsrs	r5, r1, #5
    t1 = count & (biL - 1);
    6eb6:	f001 071f 	and.w	r7, r1, #31
    i = mbedtls_mpi_bitlen( X ) + count;
    6eba:	f7ff ff67 	bl	6d8c <mbedtls_mpi_bitlen>
    if( X->n * biL < i )
    6ebe:	6863      	ldr	r3, [r4, #4]
    i = mbedtls_mpi_bitlen( X ) + count;
    6ec0:	4430      	add	r0, r6
    if( X->n * biL < i )
    6ec2:	ebb0 1f43 	cmp.w	r0, r3, lsl #5
    6ec6:	d805      	bhi.n	6ed4 <mbedtls_mpi_shift_l+0x26>
    if( v0 > 0 )
    6ec8:	2e1f      	cmp	r6, #31
    6eca:	d80f      	bhi.n	6eec <mbedtls_mpi_shift_l+0x3e>
    if( t1 > 0 )
    6ecc:	2f00      	cmp	r7, #0
    6ece:	d13a      	bne.n	6f46 <mbedtls_mpi_shift_l+0x98>
    ret = 0;
    6ed0:	2000      	movs	r0, #0
    6ed2:	e00a      	b.n	6eea <mbedtls_mpi_shift_l+0x3c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, BITS_TO_LIMBS( i ) ) );
    6ed4:	f010 011f 	ands.w	r1, r0, #31
    6ed8:	bf18      	it	ne
    6eda:	2101      	movne	r1, #1
    6edc:	eb01 1150 	add.w	r1, r1, r0, lsr #5
    6ee0:	4620      	mov	r0, r4
    6ee2:	f7ff fed4 	bl	6c8e <mbedtls_mpi_grow>
    6ee6:	2800      	cmp	r0, #0
    6ee8:	d0ee      	beq.n	6ec8 <mbedtls_mpi_shift_l+0x1a>
}
    6eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for( i = X->n; i > v0; i-- )
    6eec:	f06f 0003 	mvn.w	r0, #3
    6ef0:	6863      	ldr	r3, [r4, #4]
    6ef2:	4368      	muls	r0, r5
    6ef4:	4619      	mov	r1, r3
    6ef6:	009a      	lsls	r2, r3, #2
    6ef8:	42a9      	cmp	r1, r5
    6efa:	f1a2 0204 	sub.w	r2, r2, #4
    6efe:	d80a      	bhi.n	6f16 <mbedtls_mpi_shift_l+0x68>
    6f00:	42ab      	cmp	r3, r5
    6f02:	bf28      	it	cs
    6f04:	462b      	movcs	r3, r5
            X->p[i - 1] = 0;
    6f06:	2200      	movs	r2, #0
    6f08:	009b      	lsls	r3, r3, #2
        for( ; i > 0; i-- )
    6f0a:	3b04      	subs	r3, #4
    6f0c:	1d19      	adds	r1, r3, #4
    6f0e:	d0dd      	beq.n	6ecc <mbedtls_mpi_shift_l+0x1e>
            X->p[i - 1] = 0;
    6f10:	68a1      	ldr	r1, [r4, #8]
    6f12:	50ca      	str	r2, [r1, r3]
        for( ; i > 0; i-- )
    6f14:	e7f9      	b.n	6f0a <mbedtls_mpi_shift_l+0x5c>
            X->p[i - 1] = X->p[i - v0 - 1];
    6f16:	68a6      	ldr	r6, [r4, #8]
        for( i = X->n; i > v0; i-- )
    6f18:	3901      	subs	r1, #1
            X->p[i - 1] = X->p[i - v0 - 1];
    6f1a:	eb06 0c02 	add.w	ip, r6, r2
    6f1e:	f85c c000 	ldr.w	ip, [ip, r0]
    6f22:	f846 c002 	str.w	ip, [r6, r2]
        for( i = X->n; i > v0; i-- )
    6f26:	e7e7      	b.n	6ef8 <mbedtls_mpi_shift_l+0x4a>
            r1 = X->p[i] >> (biL - t1);
    6f28:	68a0      	ldr	r0, [r4, #8]
    6f2a:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
            X->p[i] <<= t1;
    6f2e:	fa01 f307 	lsl.w	r3, r1, r7
            X->p[i] |= r0;
    6f32:	4313      	orrs	r3, r2
    6f34:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
            r0 = r1;
    6f38:	fa21 f206 	lsr.w	r2, r1, r6
        for( i = v0; i < X->n; i++ )
    6f3c:	3501      	adds	r5, #1
    6f3e:	6863      	ldr	r3, [r4, #4]
    6f40:	42ab      	cmp	r3, r5
    6f42:	d8f1      	bhi.n	6f28 <mbedtls_mpi_shift_l+0x7a>
    6f44:	e7c4      	b.n	6ed0 <mbedtls_mpi_shift_l+0x22>
    mbedtls_mpi_uint r0 = 0, r1;
    6f46:	2200      	movs	r2, #0
            r1 = X->p[i] >> (biL - t1);
    6f48:	f1c7 0620 	rsb	r6, r7, #32
    6f4c:	e7f7      	b.n	6f3e <mbedtls_mpi_shift_l+0x90>

00006f4e <mbedtls_mpi_shift_r>:
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    6f4e:	6843      	ldr	r3, [r0, #4]
{
    6f50:	b4f0      	push	{r4, r5, r6, r7}
    v0 = count /  biL;
    6f52:	094c      	lsrs	r4, r1, #5
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    6f54:	42a3      	cmp	r3, r4
    v1 = count & (biL - 1);
    6f56:	f001 021f 	and.w	r2, r1, #31
    if( v0 > X->n || ( v0 == X->n && v1 > 0 ) )
    6f5a:	d301      	bcc.n	6f60 <mbedtls_mpi_shift_r+0x12>
    6f5c:	d104      	bne.n	6f68 <mbedtls_mpi_shift_r+0x1a>
    6f5e:	b36a      	cbz	r2, 6fbc <mbedtls_mpi_shift_r+0x6e>
}
    6f60:	bcf0      	pop	{r4, r5, r6, r7}
        return mbedtls_mpi_lset( X, 0 );
    6f62:	2100      	movs	r1, #0
    6f64:	f7ff bee5 	b.w	6d32 <mbedtls_mpi_lset>
    if( v0 > 0 )
    6f68:	291f      	cmp	r1, #31
    6f6a:	d829      	bhi.n	6fc0 <mbedtls_mpi_shift_r+0x72>
    if( v1 > 0 )
    6f6c:	b9aa      	cbnz	r2, 6f9a <mbedtls_mpi_shift_r+0x4c>
}
    6f6e:	bcf0      	pop	{r4, r5, r6, r7}
    6f70:	2000      	movs	r0, #0
    6f72:	4770      	bx	lr
            X->p[i] = X->p[i + v0];
    6f74:	6885      	ldr	r5, [r0, #8]
    6f76:	586e      	ldr	r6, [r5, r1]
    6f78:	3104      	adds	r1, #4
    6f7a:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
        for( i = 0; i < X->n - v0; i++ )
    6f7e:	3301      	adds	r3, #1
    6f80:	6845      	ldr	r5, [r0, #4]
    6f82:	1b2d      	subs	r5, r5, r4
    6f84:	429d      	cmp	r5, r3
    6f86:	d8f5      	bhi.n	6f74 <mbedtls_mpi_shift_r+0x26>
            X->p[i] = 0;
    6f88:	2400      	movs	r4, #0
        for( ; i < X->n; i++ )
    6f8a:	6841      	ldr	r1, [r0, #4]
    6f8c:	4299      	cmp	r1, r3
    6f8e:	d9ed      	bls.n	6f6c <mbedtls_mpi_shift_r+0x1e>
            X->p[i] = 0;
    6f90:	6881      	ldr	r1, [r0, #8]
    6f92:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
        for( ; i < X->n; i++ )
    6f96:	3301      	adds	r3, #1
    6f98:	e7f7      	b.n	6f8a <mbedtls_mpi_shift_r+0x3c>
    mbedtls_mpi_uint r0 = 0, r1;
    6f9a:	2400      	movs	r4, #0
        for( i = X->n; i > 0; i-- )
    6f9c:	6843      	ldr	r3, [r0, #4]
            r1 = X->p[i - 1] << (biL - v1);
    6f9e:	f1c2 0720 	rsb	r7, r2, #32
        for( i = X->n; i > 0; i-- )
    6fa2:	3b01      	subs	r3, #1
    6fa4:	d3e3      	bcc.n	6f6e <mbedtls_mpi_shift_r+0x20>
            r1 = X->p[i - 1] << (biL - v1);
    6fa6:	6886      	ldr	r6, [r0, #8]
    6fa8:	f856 5023 	ldr.w	r5, [r6, r3, lsl #2]
            X->p[i - 1] >>= v1;
    6fac:	fa25 f102 	lsr.w	r1, r5, r2
            X->p[i - 1] |= r0;
    6fb0:	4321      	orrs	r1, r4
    6fb2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
            r0 = r1;
    6fb6:	fa05 f407 	lsl.w	r4, r5, r7
    6fba:	e7f2      	b.n	6fa2 <mbedtls_mpi_shift_r+0x54>
    if( v0 > 0 )
    6fbc:	291f      	cmp	r1, #31
    6fbe:	d9d6      	bls.n	6f6e <mbedtls_mpi_shift_r+0x20>
{
    6fc0:	2300      	movs	r3, #0
    6fc2:	00a1      	lsls	r1, r4, #2
    6fc4:	e7dc      	b.n	6f80 <mbedtls_mpi_shift_r+0x32>

00006fc6 <mbedtls_mpi_cmp_abs>:
{
    6fc6:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    6fc8:	6843      	ldr	r3, [r0, #4]
    6fca:	b92b      	cbnz	r3, 6fd8 <mbedtls_mpi_cmp_abs+0x12>
    for( j = Y->n; j > 0; j-- )
    6fcc:	684a      	ldr	r2, [r1, #4]
    6fce:	b962      	cbnz	r2, 6fea <mbedtls_mpi_cmp_abs+0x24>
    if( i == 0 && j == 0 )
    6fd0:	1e18      	subs	r0, r3, #0
    6fd2:	bf18      	it	ne
    6fd4:	2001      	movne	r0, #1
    6fd6:	e028      	b.n	702a <mbedtls_mpi_cmp_abs+0x64>
        if( X->p[i - 1] != 0 )
    6fd8:	6882      	ldr	r2, [r0, #8]
    6fda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    6fde:	f852 2c04 	ldr.w	r2, [r2, #-4]
    6fe2:	2a00      	cmp	r2, #0
    6fe4:	d1f2      	bne.n	6fcc <mbedtls_mpi_cmp_abs+0x6>
    for( i = X->n; i > 0; i-- )
    6fe6:	3b01      	subs	r3, #1
    6fe8:	e7ef      	b.n	6fca <mbedtls_mpi_cmp_abs+0x4>
        if( Y->p[j - 1] != 0 )
    6fea:	688c      	ldr	r4, [r1, #8]
    6fec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
    6ff0:	f855 5c04 	ldr.w	r5, [r5, #-4]
    6ff4:	b985      	cbnz	r5, 7018 <mbedtls_mpi_cmp_abs+0x52>
    for( j = Y->n; j > 0; j-- )
    6ff6:	3a01      	subs	r2, #1
    6ff8:	e7e9      	b.n	6fce <mbedtls_mpi_cmp_abs+0x8>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  1 );
    6ffa:	6882      	ldr	r2, [r0, #8]
    6ffc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    7000:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    7004:	4291      	cmp	r1, r2
    7006:	d805      	bhi.n	7014 <mbedtls_mpi_cmp_abs+0x4e>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -1 );
    7008:	f103 33ff 	add.w	r3, r3, #4294967295
    700c:	d20a      	bcs.n	7024 <mbedtls_mpi_cmp_abs+0x5e>
    if( j > i ) return( -1 );
    700e:	f04f 30ff 	mov.w	r0, #4294967295
    7012:	e00a      	b.n	702a <mbedtls_mpi_cmp_abs+0x64>
    if( i > j ) return(  1 );
    7014:	2001      	movs	r0, #1
    7016:	e008      	b.n	702a <mbedtls_mpi_cmp_abs+0x64>
    if( i == 0 && j == 0 )
    7018:	b10b      	cbz	r3, 701e <mbedtls_mpi_cmp_abs+0x58>
    if( i > j ) return(  1 );
    701a:	4293      	cmp	r3, r2
    701c:	d8fa      	bhi.n	7014 <mbedtls_mpi_cmp_abs+0x4e>
    if( j > i ) return( -1 );
    701e:	4293      	cmp	r3, r2
    7020:	d3f5      	bcc.n	700e <mbedtls_mpi_cmp_abs+0x48>
    7022:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    7024:	1c5a      	adds	r2, r3, #1
    7026:	d1e8      	bne.n	6ffa <mbedtls_mpi_cmp_abs+0x34>
    return( 0 );
    7028:	2000      	movs	r0, #0
}
    702a:	bd30      	pop	{r4, r5, pc}

0000702c <mbedtls_mpi_cmp_mpi>:
{
    702c:	4602      	mov	r2, r0
    702e:	b530      	push	{r4, r5, lr}
    for( i = X->n; i > 0; i-- )
    7030:	6843      	ldr	r3, [r0, #4]
    7032:	b923      	cbnz	r3, 703e <mbedtls_mpi_cmp_mpi+0x12>
    for( j = Y->n; j > 0; j-- )
    7034:	6848      	ldr	r0, [r1, #4]
    7036:	b958      	cbnz	r0, 7050 <mbedtls_mpi_cmp_mpi+0x24>
    if( i == 0 && j == 0 )
    7038:	2b00      	cmp	r3, #0
    703a:	d138      	bne.n	70ae <mbedtls_mpi_cmp_mpi+0x82>
    703c:	e031      	b.n	70a2 <mbedtls_mpi_cmp_mpi+0x76>
        if( X->p[i - 1] != 0 )
    703e:	6890      	ldr	r0, [r2, #8]
    7040:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7044:	f850 0c04 	ldr.w	r0, [r0, #-4]
    7048:	2800      	cmp	r0, #0
    704a:	d1f3      	bne.n	7034 <mbedtls_mpi_cmp_mpi+0x8>
    for( i = X->n; i > 0; i-- )
    704c:	3b01      	subs	r3, #1
    704e:	e7f0      	b.n	7032 <mbedtls_mpi_cmp_mpi+0x6>
        if( Y->p[j - 1] != 0 )
    7050:	688c      	ldr	r4, [r1, #8]
    7052:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    7056:	f855 5c04 	ldr.w	r5, [r5, #-4]
    705a:	bb25      	cbnz	r5, 70a6 <mbedtls_mpi_cmp_mpi+0x7a>
    for( j = Y->n; j > 0; j-- )
    705c:	3801      	subs	r0, #1
    705e:	e7ea      	b.n	7036 <mbedtls_mpi_cmp_mpi+0xa>
    if( j > i ) return( -Y->s );
    7060:	4283      	cmp	r3, r0
    7062:	6809      	ldr	r1, [r1, #0]
    7064:	d201      	bcs.n	706a <mbedtls_mpi_cmp_mpi+0x3e>
    7066:	4248      	negs	r0, r1
    7068:	e022      	b.n	70b0 <mbedtls_mpi_cmp_mpi+0x84>
    if( X->s > 0 && Y->s < 0 ) return(  1 );
    706a:	6810      	ldr	r0, [r2, #0]
    706c:	2800      	cmp	r0, #0
    706e:	dd03      	ble.n	7078 <mbedtls_mpi_cmp_mpi+0x4c>
    7070:	2900      	cmp	r1, #0
    7072:	da13      	bge.n	709c <mbedtls_mpi_cmp_mpi+0x70>
    7074:	2001      	movs	r0, #1
    7076:	e01b      	b.n	70b0 <mbedtls_mpi_cmp_mpi+0x84>
    if( Y->s > 0 && X->s < 0 ) return( -1 );
    7078:	2900      	cmp	r1, #0
    707a:	dd0f      	ble.n	709c <mbedtls_mpi_cmp_mpi+0x70>
    707c:	b170      	cbz	r0, 709c <mbedtls_mpi_cmp_mpi+0x70>
    707e:	f04f 30ff 	mov.w	r0, #4294967295
    7082:	e015      	b.n	70b0 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] > Y->p[i - 1] ) return(  X->s );
    7084:	6891      	ldr	r1, [r2, #8]
    7086:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    708a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    708e:	428d      	cmp	r5, r1
    7090:	d80e      	bhi.n	70b0 <mbedtls_mpi_cmp_mpi+0x84>
        if( X->p[i - 1] < Y->p[i - 1] ) return( -X->s );
    7092:	f103 33ff 	add.w	r3, r3, #4294967295
    7096:	d202      	bcs.n	709e <mbedtls_mpi_cmp_mpi+0x72>
    7098:	4240      	negs	r0, r0
    709a:	e009      	b.n	70b0 <mbedtls_mpi_cmp_mpi+0x84>
    709c:	3b01      	subs	r3, #1
    for( ; i > 0; i-- )
    709e:	1c59      	adds	r1, r3, #1
    70a0:	d1f0      	bne.n	7084 <mbedtls_mpi_cmp_mpi+0x58>
    return( 0 );
    70a2:	2000      	movs	r0, #0
    70a4:	e004      	b.n	70b0 <mbedtls_mpi_cmp_mpi+0x84>
    if( i == 0 && j == 0 )
    70a6:	2b00      	cmp	r3, #0
    70a8:	d0da      	beq.n	7060 <mbedtls_mpi_cmp_mpi+0x34>
    if( i > j ) return(  X->s );
    70aa:	4283      	cmp	r3, r0
    70ac:	d9d8      	bls.n	7060 <mbedtls_mpi_cmp_mpi+0x34>
    70ae:	6810      	ldr	r0, [r2, #0]
}
    70b0:	bd30      	pop	{r4, r5, pc}

000070b2 <mbedtls_mpi_cmp_int>:
{
    70b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    *p  = ( z < 0 ) ? -z : z;
    70b4:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
    70b8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
    Y.s = ( z < 0 ) ? -1 : 1;
    70bc:	2900      	cmp	r1, #0
    *p  = ( z < 0 ) ? -z : z;
    70be:	9300      	str	r3, [sp, #0]
    Y.s = ( z < 0 ) ? -1 : 1;
    70c0:	bfb4      	ite	lt
    70c2:	f04f 33ff 	movlt.w	r3, #4294967295
    70c6:	2301      	movge	r3, #1
    70c8:	9301      	str	r3, [sp, #4]
    Y.n = 1;
    70ca:	2301      	movs	r3, #1
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    70cc:	a901      	add	r1, sp, #4
    Y.n = 1;
    70ce:	9302      	str	r3, [sp, #8]
    Y.p = p;
    70d0:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_cmp_mpi( X, &Y ) );
    70d4:	f7ff ffaa 	bl	702c <mbedtls_mpi_cmp_mpi>
}
    70d8:	b005      	add	sp, #20
    70da:	f85d fb04 	ldr.w	pc, [sp], #4

000070de <mbedtls_mpi_add_abs>:
    if( X == B )
    70de:	4290      	cmp	r0, r2
{
    70e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70e4:	4607      	mov	r7, r0
    70e6:	460d      	mov	r5, r1
    70e8:	4616      	mov	r6, r2
    if( X == B )
    70ea:	d002      	beq.n	70f2 <mbedtls_mpi_add_abs+0x14>
    if( X != A )
    70ec:	4288      	cmp	r0, r1
    70ee:	d129      	bne.n	7144 <mbedtls_mpi_add_abs+0x66>
{
    70f0:	4635      	mov	r5, r6
    X->s = 1;
    70f2:	2301      	movs	r3, #1
    for( j = B->n; j > 0; j-- )
    70f4:	686e      	ldr	r6, [r5, #4]
    X->s = 1;
    70f6:	603b      	str	r3, [r7, #0]
    for( j = B->n; j > 0; j-- )
    70f8:	bb66      	cbnz	r6, 7154 <mbedtls_mpi_add_abs+0x76>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    70fa:	4631      	mov	r1, r6
    70fc:	4638      	mov	r0, r7
    70fe:	f7ff fdc6 	bl	6c8e <mbedtls_mpi_grow>
    7102:	4604      	mov	r4, r0
    7104:	bb18      	cbnz	r0, 714e <mbedtls_mpi_add_abs+0x70>
    o = B->p; p = X->p; c = 0;
    7106:	68a9      	ldr	r1, [r5, #8]
    7108:	4605      	mov	r5, r0
    710a:	68bb      	ldr	r3, [r7, #8]
    for( i = 0; i < j; i++, o++, p++ )
    710c:	4286      	cmp	r6, r0
    710e:	d12a      	bne.n	7166 <mbedtls_mpi_add_abs+0x88>
    7110:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    while( c != 0 )
    7114:	b1dd      	cbz	r5, 714e <mbedtls_mpi_add_abs+0x70>
        if( i >= X->n )
    7116:	687a      	ldr	r2, [r7, #4]
    7118:	f106 0801 	add.w	r8, r6, #1
    711c:	42b2      	cmp	r2, r6
    711e:	d808      	bhi.n	7132 <mbedtls_mpi_add_abs+0x54>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    7120:	4641      	mov	r1, r8
    7122:	4638      	mov	r0, r7
    7124:	f7ff fdb3 	bl	6c8e <mbedtls_mpi_grow>
    7128:	2800      	cmp	r0, #0
    712a:	d12f      	bne.n	718c <mbedtls_mpi_add_abs+0xae>
            p = X->p + i;
    712c:	68bb      	ldr	r3, [r7, #8]
    712e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
        *p += c; c = ( *p < c ); i++; p++;
    7132:	681a      	ldr	r2, [r3, #0]
    7134:	4646      	mov	r6, r8
    7136:	1955      	adds	r5, r2, r5
    7138:	f843 5b04 	str.w	r5, [r3], #4
    713c:	bf2c      	ite	cs
    713e:	2501      	movcs	r5, #1
    7140:	2500      	movcc	r5, #0
    7142:	e7e7      	b.n	7114 <mbedtls_mpi_add_abs+0x36>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    7144:	f7ff fdc9 	bl	6cda <mbedtls_mpi_copy>
    7148:	4604      	mov	r4, r0
    714a:	2800      	cmp	r0, #0
    714c:	d0d0      	beq.n	70f0 <mbedtls_mpi_add_abs+0x12>
}
    714e:	4620      	mov	r0, r4
    7150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( B->p[j - 1] != 0 )
    7154:	68ab      	ldr	r3, [r5, #8]
    7156:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    715a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    715e:	2b00      	cmp	r3, #0
    7160:	d1cb      	bne.n	70fa <mbedtls_mpi_add_abs+0x1c>
    for( j = B->n; j > 0; j-- )
    7162:	3e01      	subs	r6, #1
    7164:	e7c8      	b.n	70f8 <mbedtls_mpi_add_abs+0x1a>
        *p +=  c; c  = ( *p <  c );
    7166:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    716a:	eb12 0c05 	adds.w	ip, r2, r5
    716e:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
    7172:	bf2c      	ite	cs
    7174:	2501      	movcs	r5, #1
    7176:	2500      	movcc	r5, #0
        *p += tmp; c += ( *p < tmp );
    7178:	eb1c 0202 	adds.w	r2, ip, r2
    717c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    7180:	bf2c      	ite	cs
    7182:	2201      	movcs	r2, #1
    7184:	2200      	movcc	r2, #0
    for( i = 0; i < j; i++, o++, p++ )
    7186:	3001      	adds	r0, #1
        *p += tmp; c += ( *p < tmp );
    7188:	4415      	add	r5, r2
    for( i = 0; i < j; i++, o++, p++ )
    718a:	e7bf      	b.n	710c <mbedtls_mpi_add_abs+0x2e>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + 1 ) );
    718c:	4604      	mov	r4, r0
    return( ret );
    718e:	e7de      	b.n	714e <mbedtls_mpi_add_abs+0x70>

00007190 <mbedtls_mpi_sub_abs>:
{
    7190:	b5f0      	push	{r4, r5, r6, r7, lr}
    7192:	4617      	mov	r7, r2
    X->n = 0;
    7194:	2300      	movs	r3, #0
    7196:	2201      	movs	r2, #1
{
    7198:	b085      	sub	sp, #20
    if( X == B )
    719a:	42b8      	cmp	r0, r7
{
    719c:	4606      	mov	r6, r0
    719e:	460d      	mov	r5, r1
    X->n = 0;
    71a0:	e9cd 2301 	strd	r2, r3, [sp, #4]
    X->p = NULL;
    71a4:	9303      	str	r3, [sp, #12]
    if( X == B )
    71a6:	d106      	bne.n	71b6 <mbedtls_mpi_sub_abs+0x26>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) );
    71a8:	4601      	mov	r1, r0
    71aa:	a801      	add	r0, sp, #4
    71ac:	f7ff fd95 	bl	6cda <mbedtls_mpi_copy>
    71b0:	4604      	mov	r4, r0
    71b2:	bb28      	cbnz	r0, 7200 <mbedtls_mpi_sub_abs+0x70>
        B = &TB;
    71b4:	af01      	add	r7, sp, #4
    if( X != A )
    71b6:	42ae      	cmp	r6, r5
    71b8:	d11b      	bne.n	71f2 <mbedtls_mpi_sub_abs+0x62>
    X->s = 1;
    71ba:	e9d7 5201 	ldrd	r5, r2, [r7, #4]
    71be:	2301      	movs	r3, #1
    71c0:	6033      	str	r3, [r6, #0]
    for( n = B->n; n > 0; n-- )
    71c2:	bb1d      	cbnz	r5, 720c <mbedtls_mpi_sub_abs+0x7c>
    carry = mpi_sub_hlp( n, X->p, B->p );
    71c4:	4628      	mov	r0, r5
    71c6:	68b1      	ldr	r1, [r6, #8]
    71c8:	f7ff fa24 	bl	6614 <mpi_sub_hlp>
    if( carry != 0 )
    71cc:	4604      	mov	r4, r0
    71ce:	b1b8      	cbz	r0, 7200 <mbedtls_mpi_sub_abs+0x70>
            --X->p[n];
    71d0:	f04f 31ff 	mov.w	r1, #4294967295
        for( ; n < X->n && X->p[n] == 0; n++ )
    71d4:	6873      	ldr	r3, [r6, #4]
    71d6:	42ab      	cmp	r3, r5
    71d8:	d924      	bls.n	7224 <mbedtls_mpi_sub_abs+0x94>
    71da:	68b3      	ldr	r3, [r6, #8]
    71dc:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    71e0:	b1e2      	cbz	r2, 721c <mbedtls_mpi_sub_abs+0x8c>
        --X->p[n];
    71e2:	68b2      	ldr	r2, [r6, #8]
    ret = 0;
    71e4:	2400      	movs	r4, #0
        --X->p[n];
    71e6:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
    71ea:	3b01      	subs	r3, #1
    71ec:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    71f0:	e006      	b.n	7200 <mbedtls_mpi_sub_abs+0x70>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, A ) );
    71f2:	4629      	mov	r1, r5
    71f4:	4630      	mov	r0, r6
    71f6:	f7ff fd70 	bl	6cda <mbedtls_mpi_copy>
    71fa:	4604      	mov	r4, r0
    71fc:	2800      	cmp	r0, #0
    71fe:	d0dc      	beq.n	71ba <mbedtls_mpi_sub_abs+0x2a>
    mbedtls_mpi_free( &TB );
    7200:	a801      	add	r0, sp, #4
    7202:	f7ff fd32 	bl	6c6a <mbedtls_mpi_free>
}
    7206:	4620      	mov	r0, r4
    7208:	b005      	add	sp, #20
    720a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( B->p[n - 1] != 0 )
    720c:	eb02 0385 	add.w	r3, r2, r5, lsl #2
    7210:	f853 3c04 	ldr.w	r3, [r3, #-4]
    7214:	2b00      	cmp	r3, #0
    7216:	d1d5      	bne.n	71c4 <mbedtls_mpi_sub_abs+0x34>
    for( n = B->n; n > 0; n-- )
    7218:	3d01      	subs	r5, #1
    721a:	e7d2      	b.n	71c2 <mbedtls_mpi_sub_abs+0x32>
            --X->p[n];
    721c:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
        for( ; n < X->n && X->p[n] == 0; n++ )
    7220:	3501      	adds	r5, #1
    7222:	e7d7      	b.n	71d4 <mbedtls_mpi_sub_abs+0x44>
        if( n == X->n )
    7224:	d1dd      	bne.n	71e2 <mbedtls_mpi_sub_abs+0x52>
            return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7226:	f06f 0409 	mvn.w	r4, #9
    722a:	e7ec      	b.n	7206 <mbedtls_mpi_sub_abs+0x76>

0000722c <mbedtls_mpi_add_mpi>:
{
    722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    722e:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s < 0 )
    7230:	6813      	ldr	r3, [r2, #0]
{
    7232:	4604      	mov	r4, r0
    if( A->s * B->s < 0 )
    7234:	436b      	muls	r3, r5
{
    7236:	460f      	mov	r7, r1
    7238:	4616      	mov	r6, r2
    if( A->s * B->s < 0 )
    723a:	d516      	bpl.n	726a <mbedtls_mpi_add_mpi+0x3e>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    723c:	4611      	mov	r1, r2
    723e:	4638      	mov	r0, r7
    7240:	f7ff fec1 	bl	6fc6 <mbedtls_mpi_cmp_abs>
    7244:	2800      	cmp	r0, #0
    7246:	db06      	blt.n	7256 <mbedtls_mpi_add_mpi+0x2a>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    7248:	4632      	mov	r2, r6
    724a:	4639      	mov	r1, r7
    724c:	4620      	mov	r0, r4
    724e:	f7ff ff9f 	bl	7190 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7252:	b140      	cbz	r0, 7266 <mbedtls_mpi_add_mpi+0x3a>
}
    7254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    7256:	463a      	mov	r2, r7
    7258:	4631      	mov	r1, r6
    725a:	4620      	mov	r0, r4
    725c:	f7ff ff98 	bl	7190 <mbedtls_mpi_sub_abs>
    7260:	2800      	cmp	r0, #0
    7262:	d1f7      	bne.n	7254 <mbedtls_mpi_add_mpi+0x28>
            X->s = -s;
    7264:	426d      	negs	r5, r5
        X->s = s;
    7266:	6025      	str	r5, [r4, #0]
    return( ret );
    7268:	e7f4      	b.n	7254 <mbedtls_mpi_add_mpi+0x28>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    726a:	f7ff ff38 	bl	70de <mbedtls_mpi_add_abs>
    726e:	e7f0      	b.n	7252 <mbedtls_mpi_add_mpi+0x26>

00007270 <mbedtls_mpi_sub_mpi>:
{
    7270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    s = A->s;
    7272:	680d      	ldr	r5, [r1, #0]
    if( A->s * B->s > 0 )
    7274:	6813      	ldr	r3, [r2, #0]
{
    7276:	4604      	mov	r4, r0
    if( A->s * B->s > 0 )
    7278:	436b      	muls	r3, r5
    727a:	2b00      	cmp	r3, #0
{
    727c:	460f      	mov	r7, r1
    727e:	4616      	mov	r6, r2
    if( A->s * B->s > 0 )
    7280:	dd16      	ble.n	72b0 <mbedtls_mpi_sub_mpi+0x40>
        if( mbedtls_mpi_cmp_abs( A, B ) >= 0 )
    7282:	4611      	mov	r1, r2
    7284:	4638      	mov	r0, r7
    7286:	f7ff fe9e 	bl	6fc6 <mbedtls_mpi_cmp_abs>
    728a:	2800      	cmp	r0, #0
    728c:	db06      	blt.n	729c <mbedtls_mpi_sub_mpi+0x2c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, A, B ) );
    728e:	4632      	mov	r2, r6
    7290:	4639      	mov	r1, r7
    7292:	4620      	mov	r0, r4
    7294:	f7ff ff7c 	bl	7190 <mbedtls_mpi_sub_abs>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    7298:	b140      	cbz	r0, 72ac <mbedtls_mpi_sub_mpi+0x3c>
}
    729a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            MBEDTLS_MPI_CHK( mbedtls_mpi_sub_abs( X, B, A ) );
    729c:	463a      	mov	r2, r7
    729e:	4631      	mov	r1, r6
    72a0:	4620      	mov	r0, r4
    72a2:	f7ff ff75 	bl	7190 <mbedtls_mpi_sub_abs>
    72a6:	2800      	cmp	r0, #0
    72a8:	d1f7      	bne.n	729a <mbedtls_mpi_sub_mpi+0x2a>
            X->s = -s;
    72aa:	426d      	negs	r5, r5
        X->s = s;
    72ac:	6025      	str	r5, [r4, #0]
    return( ret );
    72ae:	e7f4      	b.n	729a <mbedtls_mpi_sub_mpi+0x2a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_abs( X, A, B ) );
    72b0:	f7ff ff15 	bl	70de <mbedtls_mpi_add_abs>
    72b4:	e7f0      	b.n	7298 <mbedtls_mpi_sub_mpi+0x28>

000072b6 <mbedtls_mpi_mul_mpi>:
{
    72b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    X->n = 0;
    72ba:	2300      	movs	r3, #0
{
    72bc:	4615      	mov	r5, r2
    X->n = 0;
    72be:	2201      	movs	r2, #1
{
    72c0:	b087      	sub	sp, #28
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    72c2:	4288      	cmp	r0, r1
{
    72c4:	4680      	mov	r8, r0
    72c6:	460e      	mov	r6, r1
    X->n = 0;
    72c8:	e9cd 2300 	strd	r2, r3, [sp]
    X->s = 1;
    72cc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    X->p = NULL;
    72d0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    if( X == A ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TA, A ) ); A = &TA; }
    72d4:	d105      	bne.n	72e2 <mbedtls_mpi_mul_mpi+0x2c>
    72d6:	4668      	mov	r0, sp
    72d8:	f7ff fcff 	bl	6cda <mbedtls_mpi_copy>
    72dc:	4604      	mov	r4, r0
    72de:	b9e8      	cbnz	r0, 731c <mbedtls_mpi_mul_mpi+0x66>
    72e0:	466e      	mov	r6, sp
    if( X == B ) { MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &TB, B ) ); B = &TB; }
    72e2:	45a8      	cmp	r8, r5
    72e4:	d106      	bne.n	72f4 <mbedtls_mpi_mul_mpi+0x3e>
    72e6:	4641      	mov	r1, r8
    72e8:	a803      	add	r0, sp, #12
    72ea:	f7ff fcf6 	bl	6cda <mbedtls_mpi_copy>
    72ee:	4604      	mov	r4, r0
    72f0:	b9a0      	cbnz	r0, 731c <mbedtls_mpi_mul_mpi+0x66>
    72f2:	ad03      	add	r5, sp, #12
    for( i = A->n; i > 0; i-- )
    72f4:	f8d6 9004 	ldr.w	r9, [r6, #4]
    72f8:	f1b9 0f00 	cmp.w	r9, #0
    72fc:	d118      	bne.n	7330 <mbedtls_mpi_mul_mpi+0x7a>
    for( j = B->n; j > 0; j-- )
    72fe:	686f      	ldr	r7, [r5, #4]
    7300:	bb07      	cbnz	r7, 7344 <mbedtls_mpi_mul_mpi+0x8e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, i + j ) );
    7302:	4640      	mov	r0, r8
    7304:	eb09 0107 	add.w	r1, r9, r7
    7308:	f7ff fcc1 	bl	6c8e <mbedtls_mpi_grow>
    730c:	4604      	mov	r4, r0
    730e:	b928      	cbnz	r0, 731c <mbedtls_mpi_mul_mpi+0x66>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( X, 0 ) );
    7310:	4601      	mov	r1, r0
    7312:	4640      	mov	r0, r8
    7314:	f7ff fd0d 	bl	6d32 <mbedtls_mpi_lset>
    7318:	4604      	mov	r4, r0
    731a:	b338      	cbz	r0, 736c <mbedtls_mpi_mul_mpi+0xb6>
    mbedtls_mpi_free( &TB ); mbedtls_mpi_free( &TA );
    731c:	a803      	add	r0, sp, #12
    731e:	f7ff fca4 	bl	6c6a <mbedtls_mpi_free>
    7322:	4668      	mov	r0, sp
    7324:	f7ff fca1 	bl	6c6a <mbedtls_mpi_free>
}
    7328:	4620      	mov	r0, r4
    732a:	b007      	add	sp, #28
    732c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( A->p[i - 1] != 0 )
    7330:	68b3      	ldr	r3, [r6, #8]
    7332:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    7336:	f853 3c04 	ldr.w	r3, [r3, #-4]
    733a:	2b00      	cmp	r3, #0
    733c:	d1df      	bne.n	72fe <mbedtls_mpi_mul_mpi+0x48>
    for( i = A->n; i > 0; i-- )
    733e:	f109 39ff 	add.w	r9, r9, #4294967295
    7342:	e7d9      	b.n	72f8 <mbedtls_mpi_mul_mpi+0x42>
        if( B->p[j - 1] != 0 )
    7344:	68ab      	ldr	r3, [r5, #8]
    7346:	eb03 0387 	add.w	r3, r3, r7, lsl #2
    734a:	f853 3c04 	ldr.w	r3, [r3, #-4]
    734e:	2b00      	cmp	r3, #0
    7350:	d1d7      	bne.n	7302 <mbedtls_mpi_mul_mpi+0x4c>
    for( j = B->n; j > 0; j-- )
    7352:	3f01      	subs	r7, #1
    7354:	e7d4      	b.n	7300 <mbedtls_mpi_mul_mpi+0x4a>
        mpi_mul_hlp( i, A->p, X->p + j - 1, B->p[j - 1] );
    7356:	68ab      	ldr	r3, [r5, #8]
    7358:	f8d8 2008 	ldr.w	r2, [r8, #8]
    735c:	4648      	mov	r0, r9
    735e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    7362:	68b1      	ldr	r1, [r6, #8]
    7364:	eb02 0287 	add.w	r2, r2, r7, lsl #2
    7368:	f7ff f971 	bl	664e <mpi_mul_hlp>
    for( ; j > 0; j-- )
    736c:	3f01      	subs	r7, #1
    736e:	d2f2      	bcs.n	7356 <mbedtls_mpi_mul_mpi+0xa0>
    X->s = A->s * B->s;
    7370:	6832      	ldr	r2, [r6, #0]
    7372:	682b      	ldr	r3, [r5, #0]
    7374:	4353      	muls	r3, r2
    7376:	f8c8 3000 	str.w	r3, [r8]
    737a:	e7cf      	b.n	731c <mbedtls_mpi_mul_mpi+0x66>

0000737c <mbedtls_mpi_mul_int>:
{
    737c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _B.s = 1;
    737e:	2301      	movs	r3, #1
    p[0] = b;
    7380:	9200      	str	r2, [sp, #0]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    7382:	aa01      	add	r2, sp, #4
    _B.n = 1;
    7384:	e9cd 3301 	strd	r3, r3, [sp, #4]
    _B.p = p;
    7388:	f8cd d00c 	str.w	sp, [sp, #12]
    return( mbedtls_mpi_mul_mpi( X, A, &_B ) );
    738c:	f7ff ff93 	bl	72b6 <mbedtls_mpi_mul_mpi>
}
    7390:	b005      	add	sp, #20
    7392:	f85d fb04 	ldr.w	pc, [sp], #4

00007396 <mbedtls_mpi_div_mpi>:
{
    7396:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    739a:	b097      	sub	sp, #92	; 0x5c
    739c:	460f      	mov	r7, r1
    739e:	9000      	str	r0, [sp, #0]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    73a0:	2100      	movs	r1, #0
    73a2:	4618      	mov	r0, r3
{
    73a4:	4690      	mov	r8, r2
    73a6:	9302      	str	r3, [sp, #8]
    if( mbedtls_mpi_cmp_int( B, 0 ) == 0 )
    73a8:	f7ff fe83 	bl	70b2 <mbedtls_mpi_cmp_int>
    73ac:	2800      	cmp	r0, #0
    73ae:	f000 819d 	beq.w	76ec <mbedtls_mpi_div_mpi+0x356>
    X->n = 0;
    73b2:	2400      	movs	r4, #0
    73b4:	2501      	movs	r5, #1
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    73b6:	4640      	mov	r0, r8
    73b8:	9902      	ldr	r1, [sp, #8]
    X->n = 0;
    73ba:	e9cd 5407 	strd	r5, r4, [sp, #28]
    X->s = 1;
    73be:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
    X->p = NULL;
    73c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
    X->n = 0;
    73c6:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
    X->s = 1;
    73ca:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
    X->p = NULL;
    73ce:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
    X->n = 0;
    73d2:	e9cd 5413 	strd	r5, r4, [sp, #76]	; 0x4c
    X->p = NULL;
    73d6:	9415      	str	r4, [sp, #84]	; 0x54
    if( mbedtls_mpi_cmp_abs( A, B ) < 0 )
    73d8:	f7ff fdf5 	bl	6fc6 <mbedtls_mpi_cmp_abs>
    73dc:	42a0      	cmp	r0, r4
    73de:	da26      	bge.n	742e <mbedtls_mpi_div_mpi+0x98>
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    73e0:	9b00      	ldr	r3, [sp, #0]
    73e2:	b92b      	cbnz	r3, 73f0 <mbedtls_mpi_div_mpi+0x5a>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    73e4:	b9df      	cbnz	r7, 741e <mbedtls_mpi_div_mpi+0x88>
        return( 0 );
    73e6:	2400      	movs	r4, #0
}
    73e8:	4620      	mov	r0, r4
    73ea:	b017      	add	sp, #92	; 0x5c
    73ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if( Q != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_lset( Q, 0 ) );
    73f0:	4621      	mov	r1, r4
    73f2:	9800      	ldr	r0, [sp, #0]
    73f4:	f7ff fc9d 	bl	6d32 <mbedtls_mpi_lset>
    73f8:	4604      	mov	r4, r0
    73fa:	2800      	cmp	r0, #0
    73fc:	d0f2      	beq.n	73e4 <mbedtls_mpi_div_mpi+0x4e>
    mbedtls_mpi_free( &X ); mbedtls_mpi_free( &Y ); mbedtls_mpi_free( &Z );
    73fe:	a807      	add	r0, sp, #28
    7400:	f7ff fc33 	bl	6c6a <mbedtls_mpi_free>
    7404:	a80a      	add	r0, sp, #40	; 0x28
    7406:	f7ff fc30 	bl	6c6a <mbedtls_mpi_free>
    740a:	a80d      	add	r0, sp, #52	; 0x34
    740c:	f7ff fc2d 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &T1 ); mbedtls_mpi_free( &T2 );
    7410:	a810      	add	r0, sp, #64	; 0x40
    7412:	f7ff fc2a 	bl	6c6a <mbedtls_mpi_free>
    7416:	a813      	add	r0, sp, #76	; 0x4c
    7418:	f7ff fc27 	bl	6c6a <mbedtls_mpi_free>
    return( ret );
    741c:	e7e4      	b.n	73e8 <mbedtls_mpi_div_mpi+0x52>
        if( R != NULL ) MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, A ) );
    741e:	4641      	mov	r1, r8
    7420:	4638      	mov	r0, r7
    7422:	f7ff fc5a 	bl	6cda <mbedtls_mpi_copy>
    7426:	4604      	mov	r4, r0
    7428:	2800      	cmp	r0, #0
    742a:	d1e8      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    742c:	e7db      	b.n	73e6 <mbedtls_mpi_div_mpi+0x50>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &X, A ) );
    742e:	4641      	mov	r1, r8
    7430:	a807      	add	r0, sp, #28
    7432:	f7ff fc52 	bl	6cda <mbedtls_mpi_copy>
    7436:	4604      	mov	r4, r0
    7438:	2800      	cmp	r0, #0
    743a:	d1e0      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Y, B ) );
    743c:	ae0a      	add	r6, sp, #40	; 0x28
    743e:	4630      	mov	r0, r6
    7440:	9902      	ldr	r1, [sp, #8]
    7442:	f7ff fc4a 	bl	6cda <mbedtls_mpi_copy>
    7446:	4604      	mov	r4, r0
    7448:	2800      	cmp	r0, #0
    744a:	d1d8      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    744c:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7450:	a80d      	add	r0, sp, #52	; 0x34
    7452:	3102      	adds	r1, #2
    X.s = Y.s = 1;
    7454:	950a      	str	r5, [sp, #40]	; 0x28
    7456:	9507      	str	r5, [sp, #28]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &Z, A->n + 2 ) );
    7458:	f7ff fc19 	bl	6c8e <mbedtls_mpi_grow>
    745c:	4604      	mov	r4, r0
    745e:	2800      	cmp	r0, #0
    7460:	d1cd      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &Z,  0 ) );
    7462:	4601      	mov	r1, r0
    7464:	a80d      	add	r0, sp, #52	; 0x34
    7466:	f7ff fc64 	bl	6d32 <mbedtls_mpi_lset>
    746a:	4604      	mov	r4, r0
    746c:	2800      	cmp	r0, #0
    746e:	d1c6      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T1, 2 ) );
    7470:	2102      	movs	r1, #2
    7472:	a810      	add	r0, sp, #64	; 0x40
    7474:	f7ff fc0b 	bl	6c8e <mbedtls_mpi_grow>
    7478:	4604      	mov	r4, r0
    747a:	2800      	cmp	r0, #0
    747c:	d1bf      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T2, 3 ) );
    747e:	2103      	movs	r1, #3
    7480:	a813      	add	r0, sp, #76	; 0x4c
    7482:	f7ff fc04 	bl	6c8e <mbedtls_mpi_grow>
    7486:	4604      	mov	r4, r0
    7488:	2800      	cmp	r0, #0
    748a:	d1b8      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    k = mbedtls_mpi_bitlen( &Y ) % biL;
    748c:	4630      	mov	r0, r6
    748e:	f7ff fc7d 	bl	6d8c <mbedtls_mpi_bitlen>
    7492:	f000 001f 	and.w	r0, r0, #31
    if( k < biL - 1 )
    7496:	281f      	cmp	r0, #31
    7498:	d06f      	beq.n	757a <mbedtls_mpi_div_mpi+0x1e4>
        k = biL - 1 - k;
    749a:	f1c0 091f 	rsb	r9, r0, #31
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &X, k ) );
    749e:	4649      	mov	r1, r9
    74a0:	a807      	add	r0, sp, #28
    74a2:	f7ff fd04 	bl	6eae <mbedtls_mpi_shift_l>
    74a6:	4604      	mov	r4, r0
    74a8:	2800      	cmp	r0, #0
    74aa:	d1a8      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, k ) );
    74ac:	4649      	mov	r1, r9
    74ae:	4630      	mov	r0, r6
    74b0:	f7ff fcfd 	bl	6eae <mbedtls_mpi_shift_l>
    74b4:	4604      	mov	r4, r0
    74b6:	2800      	cmp	r0, #0
    74b8:	d1a1      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    n = X.n - 1;
    74ba:	9d08      	ldr	r5, [sp, #32]
    t = Y.n - 1;
    74bc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &Y, biL * ( n - t ) ) );
    74c0:	4630      	mov	r0, r6
    74c2:	eba5 030a 	sub.w	r3, r5, sl
    74c6:	ea4f 1b43 	mov.w	fp, r3, lsl #5
    74ca:	4659      	mov	r1, fp
    74cc:	9301      	str	r3, [sp, #4]
    74ce:	f7ff fcee 	bl	6eae <mbedtls_mpi_shift_l>
    74d2:	4604      	mov	r4, r0
    74d4:	2800      	cmp	r0, #0
    74d6:	d192      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
        Z.p[n - t]++;
    74d8:	9b01      	ldr	r3, [sp, #4]
    74da:	009b      	lsls	r3, r3, #2
    while( mbedtls_mpi_cmp_mpi( &X, &Y ) >= 0 )
    74dc:	4631      	mov	r1, r6
    74de:	a807      	add	r0, sp, #28
    74e0:	9301      	str	r3, [sp, #4]
    74e2:	f7ff fda3 	bl	702c <mbedtls_mpi_cmp_mpi>
    74e6:	2800      	cmp	r0, #0
    74e8:	9b01      	ldr	r3, [sp, #4]
    74ea:	da48      	bge.n	757e <mbedtls_mpi_div_mpi+0x1e8>
    MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &Y, biL * ( n - t ) ) );
    74ec:	4659      	mov	r1, fp
    74ee:	4630      	mov	r0, r6
    74f0:	f7ff fd2d 	bl	6f4e <mbedtls_mpi_shift_r>
    74f4:	4604      	mov	r4, r0
    74f6:	2800      	cmp	r0, #0
    74f8:	d181      	bne.n	73fe <mbedtls_mpi_div_mpi+0x68>
    t = Y.n - 1;
    74fa:	f10a 33ff 	add.w	r3, sl, #4294967295
    74fe:	9301      	str	r3, [sp, #4]
        if( X.p[i] >= Y.p[t] )
    7500:	009b      	lsls	r3, r3, #2
    n = X.n - 1;
    7502:	1e6e      	subs	r6, r5, #1
        if( X.p[i] >= Y.p[t] )
    7504:	9303      	str	r3, [sp, #12]
    7506:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    750a:	f10a 4380 	add.w	r3, sl, #1073741824	; 0x40000000
    750e:	3b02      	subs	r3, #2
    7510:	3d01      	subs	r5, #1
    7512:	009b      	lsls	r3, r3, #2
    7514:	eba5 0a0a 	sub.w	sl, r5, sl
    7518:	9305      	str	r3, [sp, #20]
    751a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
    for( i = n; i > t ; i-- )
    751e:	9b01      	ldr	r3, [sp, #4]
    7520:	429e      	cmp	r6, r3
    7522:	d83b      	bhi.n	759c <mbedtls_mpi_div_mpi+0x206>
    if( Q != NULL )
    7524:	9b00      	ldr	r3, [sp, #0]
    7526:	b15b      	cbz	r3, 7540 <mbedtls_mpi_div_mpi+0x1aa>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( Q, &Z ) );
    7528:	4618      	mov	r0, r3
    752a:	a90d      	add	r1, sp, #52	; 0x34
    752c:	f7ff fbd5 	bl	6cda <mbedtls_mpi_copy>
    7530:	bb08      	cbnz	r0, 7576 <mbedtls_mpi_div_mpi+0x1e0>
        Q->s = A->s * B->s;
    7532:	9b02      	ldr	r3, [sp, #8]
    7534:	f8d8 2000 	ldr.w	r2, [r8]
    7538:	681b      	ldr	r3, [r3, #0]
    753a:	4353      	muls	r3, r2
    753c:	9a00      	ldr	r2, [sp, #0]
    753e:	6013      	str	r3, [r2, #0]
    if( R != NULL )
    7540:	2f00      	cmp	r7, #0
    7542:	f43f af5c 	beq.w	73fe <mbedtls_mpi_div_mpi+0x68>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_r( &X, k ) );
    7546:	4649      	mov	r1, r9
    7548:	a807      	add	r0, sp, #28
    754a:	f7ff fd00 	bl	6f4e <mbedtls_mpi_shift_r>
    754e:	b990      	cbnz	r0, 7576 <mbedtls_mpi_div_mpi+0x1e0>
        X.s = A->s;
    7550:	f8d8 3000 	ldr.w	r3, [r8]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    7554:	a907      	add	r1, sp, #28
    7556:	4638      	mov	r0, r7
        X.s = A->s;
    7558:	9307      	str	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( R, &X ) );
    755a:	f7ff fbbe 	bl	6cda <mbedtls_mpi_copy>
    755e:	4601      	mov	r1, r0
    7560:	2800      	cmp	r0, #0
    7562:	f040 80c1 	bne.w	76e8 <mbedtls_mpi_div_mpi+0x352>
        if( mbedtls_mpi_cmp_int( R, 0 ) == 0 )
    7566:	4638      	mov	r0, r7
    7568:	f7ff fda3 	bl	70b2 <mbedtls_mpi_cmp_int>
    756c:	2800      	cmp	r0, #0
    756e:	f47f af46 	bne.w	73fe <mbedtls_mpi_div_mpi+0x68>
            R->s = 1;
    7572:	2301      	movs	r3, #1
    7574:	603b      	str	r3, [r7, #0]
    7576:	4604      	mov	r4, r0
    7578:	e741      	b.n	73fe <mbedtls_mpi_div_mpi+0x68>
    else k = 0;
    757a:	46a1      	mov	r9, r4
    757c:	e79d      	b.n	74ba <mbedtls_mpi_div_mpi+0x124>
        Z.p[n - t]++;
    757e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    7580:	9301      	str	r3, [sp, #4]
    7582:	58ca      	ldr	r2, [r1, r3]
    7584:	3201      	adds	r2, #1
    7586:	50ca      	str	r2, [r1, r3]
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &Y ) );
    7588:	a907      	add	r1, sp, #28
    758a:	4632      	mov	r2, r6
    758c:	4608      	mov	r0, r1
    758e:	f7ff fe6f 	bl	7270 <mbedtls_mpi_sub_mpi>
    7592:	9b01      	ldr	r3, [sp, #4]
    7594:	4604      	mov	r4, r0
    7596:	2800      	cmp	r0, #0
    7598:	d0a0      	beq.n	74dc <mbedtls_mpi_div_mpi+0x146>
    759a:	e730      	b.n	73fe <mbedtls_mpi_div_mpi+0x68>
        if( X.p[i] >= Y.p[t] )
    759c:	9803      	ldr	r0, [sp, #12]
    759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    75a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75a2:	ea4f 0b86 	mov.w	fp, r6, lsl #2
    75a6:	5812      	ldr	r2, [r2, r0]
    75a8:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
    75ac:	f1ab 0004 	sub.w	r0, fp, #4
    75b0:	9004      	str	r0, [sp, #16]
    75b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    75b4:	4291      	cmp	r1, r2
    75b6:	eb00 050a 	add.w	r5, r0, sl
    75ba:	d37e      	bcc.n	76ba <mbedtls_mpi_div_mpi+0x324>
            Z.p[i - t - 1] = ~0;
    75bc:	f04f 33ff 	mov.w	r3, #4294967295
    75c0:	f840 300a 	str.w	r3, [r0, sl]
        Z.p[i - t - 1]++;
    75c4:	682b      	ldr	r3, [r5, #0]
    75c6:	3301      	adds	r3, #1
    75c8:	602b      	str	r3, [r5, #0]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    75ca:	f1ab 0508 	sub.w	r5, fp, #8
            Z.p[i - t - 1]--;
    75ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    75d0:	2100      	movs	r1, #0
            Z.p[i - t - 1]--;
    75d2:	f852 300a 	ldr.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    75d6:	a810      	add	r0, sp, #64	; 0x40
            Z.p[i - t - 1]--;
    75d8:	3b01      	subs	r3, #1
    75da:	f842 300a 	str.w	r3, [r2, sl]
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T1, 0 ) );
    75de:	f7ff fba8 	bl	6d32 <mbedtls_mpi_lset>
    75e2:	2800      	cmp	r0, #0
    75e4:	d1c7      	bne.n	7576 <mbedtls_mpi_div_mpi+0x1e0>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    75e6:	9b01      	ldr	r3, [sp, #4]
    75e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    75ea:	2b00      	cmp	r3, #0
    75ec:	d07a      	beq.n	76e4 <mbedtls_mpi_div_mpi+0x34e>
    75ee:	9b05      	ldr	r3, [sp, #20]
    75f0:	58d1      	ldr	r1, [r2, r3]
    75f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    75f4:	6019      	str	r1, [r3, #0]
            T1.p[1] = Y.p[t];
    75f6:	9903      	ldr	r1, [sp, #12]
    75f8:	5852      	ldr	r2, [r2, r1]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    75fa:	a910      	add	r1, sp, #64	; 0x40
            T1.p[1] = Y.p[t];
    75fc:	605a      	str	r2, [r3, #4]
            MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &T1, Z.p[i - t - 1] ) );
    75fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7600:	4608      	mov	r0, r1
    7602:	f853 200a 	ldr.w	r2, [r3, sl]
    7606:	f7ff feb9 	bl	737c <mbedtls_mpi_mul_int>
    760a:	4601      	mov	r1, r0
    760c:	2800      	cmp	r0, #0
    760e:	d16b      	bne.n	76e8 <mbedtls_mpi_div_mpi+0x352>
            MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &T2, 0 ) );
    7610:	a813      	add	r0, sp, #76	; 0x4c
    7612:	f7ff fb8e 	bl	6d32 <mbedtls_mpi_lset>
    7616:	2800      	cmp	r0, #0
    7618:	d1ad      	bne.n	7576 <mbedtls_mpi_div_mpi+0x1e0>
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    761a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    761c:	2e01      	cmp	r6, #1
    761e:	bf18      	it	ne
    7620:	5950      	ldrne	r0, [r2, r5]
    7622:	9b15      	ldr	r3, [sp, #84]	; 0x54
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7624:	9904      	ldr	r1, [sp, #16]
            T2.p[0] = ( i < 2 ) ? 0 : X.p[i - 2];
    7626:	6018      	str	r0, [r3, #0]
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    7628:	5851      	ldr	r1, [r2, r1]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    762a:	a810      	add	r0, sp, #64	; 0x40
            T2.p[1] = ( i < 1 ) ? 0 : X.p[i - 1];
    762c:	6059      	str	r1, [r3, #4]
            T2.p[2] = X.p[i];
    762e:	f852 200b 	ldr.w	r2, [r2, fp]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7632:	a913      	add	r1, sp, #76	; 0x4c
            T2.p[2] = X.p[i];
    7634:	609a      	str	r2, [r3, #8]
        while( mbedtls_mpi_cmp_mpi( &T1, &T2 ) > 0 );
    7636:	f7ff fcf9 	bl	702c <mbedtls_mpi_cmp_mpi>
    763a:	2800      	cmp	r0, #0
    763c:	dcc7      	bgt.n	75ce <mbedtls_mpi_div_mpi+0x238>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mul_int( &T1, &Y, Z.p[i - t - 1] ) );
    763e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7640:	a90a      	add	r1, sp, #40	; 0x28
    7642:	f853 200a 	ldr.w	r2, [r3, sl]
    7646:	a810      	add	r0, sp, #64	; 0x40
    7648:	f7ff fe98 	bl	737c <mbedtls_mpi_mul_int>
    764c:	2800      	cmp	r0, #0
    764e:	d192      	bne.n	7576 <mbedtls_mpi_div_mpi+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1,  biL * ( i - t - 1 ) ) );
    7650:	ea4f 05ca 	mov.w	r5, sl, lsl #3
    7654:	4629      	mov	r1, r5
    7656:	a810      	add	r0, sp, #64	; 0x40
    7658:	f7ff fc29 	bl	6eae <mbedtls_mpi_shift_l>
    765c:	2800      	cmp	r0, #0
    765e:	d18a      	bne.n	7576 <mbedtls_mpi_div_mpi+0x1e0>
        MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( &X, &X, &T1 ) );
    7660:	a907      	add	r1, sp, #28
    7662:	4608      	mov	r0, r1
    7664:	aa10      	add	r2, sp, #64	; 0x40
    7666:	f7ff fe03 	bl	7270 <mbedtls_mpi_sub_mpi>
    766a:	4601      	mov	r1, r0
    766c:	2800      	cmp	r0, #0
    766e:	d13b      	bne.n	76e8 <mbedtls_mpi_div_mpi+0x352>
        if( mbedtls_mpi_cmp_int( &X, 0 ) < 0 )
    7670:	a807      	add	r0, sp, #28
    7672:	f7ff fd1e 	bl	70b2 <mbedtls_mpi_cmp_int>
    7676:	2800      	cmp	r0, #0
    7678:	da1b      	bge.n	76b2 <mbedtls_mpi_div_mpi+0x31c>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &T1, &Y ) );
    767a:	a90a      	add	r1, sp, #40	; 0x28
    767c:	a810      	add	r0, sp, #64	; 0x40
    767e:	f7ff fb2c 	bl	6cda <mbedtls_mpi_copy>
    7682:	2800      	cmp	r0, #0
    7684:	f47f af77 	bne.w	7576 <mbedtls_mpi_div_mpi+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &T1, biL * ( i - t - 1 ) ) );
    7688:	4629      	mov	r1, r5
    768a:	a810      	add	r0, sp, #64	; 0x40
    768c:	f7ff fc0f 	bl	6eae <mbedtls_mpi_shift_l>
    7690:	2800      	cmp	r0, #0
    7692:	f47f af70 	bne.w	7576 <mbedtls_mpi_div_mpi+0x1e0>
            MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( &X, &X, &T1 ) );
    7696:	a907      	add	r1, sp, #28
    7698:	4608      	mov	r0, r1
    769a:	aa10      	add	r2, sp, #64	; 0x40
    769c:	f7ff fdc6 	bl	722c <mbedtls_mpi_add_mpi>
    76a0:	2800      	cmp	r0, #0
    76a2:	f47f af68 	bne.w	7576 <mbedtls_mpi_div_mpi+0x1e0>
            Z.p[i - t - 1]--;
    76a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    76a8:	f852 300a 	ldr.w	r3, [r2, sl]
    76ac:	3b01      	subs	r3, #1
    76ae:	f842 300a 	str.w	r3, [r2, sl]
    for( i = n; i > t ; i-- )
    76b2:	3e01      	subs	r6, #1
    76b4:	f1aa 0a04 	sub.w	sl, sl, #4
    76b8:	e731      	b.n	751e <mbedtls_mpi_div_mpi+0x188>
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    76ba:	9804      	ldr	r0, [sp, #16]
    76bc:	5818      	ldr	r0, [r3, r0]
    if( 0 == d || u1 >= d )
    76be:	b172      	cbz	r2, 76de <mbedtls_mpi_div_mpi+0x348>
    quotient = dividend / d;
    76c0:	2300      	movs	r3, #0
    76c2:	f7f8 fd3f 	bl	144 <__aeabi_uldivmod>
    76c6:	460b      	mov	r3, r1
    return (mbedtls_mpi_uint) quotient;
    76c8:	2100      	movs	r1, #0
    quotient = dividend / d;
    76ca:	4602      	mov	r2, r0
    return (mbedtls_mpi_uint) quotient;
    76cc:	f04f 30ff 	mov.w	r0, #4294967295
    76d0:	4299      	cmp	r1, r3
    76d2:	bf08      	it	eq
    76d4:	4290      	cmpeq	r0, r2
    76d6:	d200      	bcs.n	76da <mbedtls_mpi_div_mpi+0x344>
    76d8:	4602      	mov	r2, r0
            Z.p[i - t - 1] = mbedtls_int_div_int( X.p[i], X.p[i - 1],
    76da:	602a      	str	r2, [r5, #0]
    76dc:	e772      	b.n	75c4 <mbedtls_mpi_div_mpi+0x22e>
        return ( ~0 );
    76de:	f04f 32ff 	mov.w	r2, #4294967295
    76e2:	e7fa      	b.n	76da <mbedtls_mpi_div_mpi+0x344>
            T1.p[0] = ( t < 1 ) ? 0 : Y.p[t - 1];
    76e4:	9901      	ldr	r1, [sp, #4]
    76e6:	e784      	b.n	75f2 <mbedtls_mpi_div_mpi+0x25c>
    76e8:	460c      	mov	r4, r1
    76ea:	e688      	b.n	73fe <mbedtls_mpi_div_mpi+0x68>
        return( MBEDTLS_ERR_MPI_DIVISION_BY_ZERO );
    76ec:	f06f 040b 	mvn.w	r4, #11
    76f0:	e67a      	b.n	73e8 <mbedtls_mpi_div_mpi+0x52>

000076f2 <mbedtls_mpi_mod_mpi>:
{
    76f2:	b570      	push	{r4, r5, r6, lr}
    76f4:	4604      	mov	r4, r0
    76f6:	460d      	mov	r5, r1
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    76f8:	4610      	mov	r0, r2
    76fa:	2100      	movs	r1, #0
{
    76fc:	4616      	mov	r6, r2
    if( mbedtls_mpi_cmp_int( B, 0 ) < 0 )
    76fe:	f7ff fcd8 	bl	70b2 <mbedtls_mpi_cmp_int>
    7702:	2800      	cmp	r0, #0
    7704:	db24      	blt.n	7750 <mbedtls_mpi_mod_mpi+0x5e>
    MBEDTLS_MPI_CHK( mbedtls_mpi_div_mpi( NULL, R, A, B ) );
    7706:	462a      	mov	r2, r5
    7708:	4633      	mov	r3, r6
    770a:	4621      	mov	r1, r4
    770c:	2000      	movs	r0, #0
    770e:	f7ff fe42 	bl	7396 <mbedtls_mpi_div_mpi>
    7712:	4605      	mov	r5, r0
    7714:	b138      	cbz	r0, 7726 <mbedtls_mpi_mod_mpi+0x34>
}
    7716:	4628      	mov	r0, r5
    7718:	bd70      	pop	{r4, r5, r6, pc}
      MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( R, R, B ) );
    771a:	4632      	mov	r2, r6
    771c:	4621      	mov	r1, r4
    771e:	4620      	mov	r0, r4
    7720:	f7ff fd84 	bl	722c <mbedtls_mpi_add_mpi>
    7724:	b990      	cbnz	r0, 774c <mbedtls_mpi_mod_mpi+0x5a>
    while( mbedtls_mpi_cmp_int( R, 0 ) < 0 )
    7726:	2100      	movs	r1, #0
    7728:	4620      	mov	r0, r4
    772a:	f7ff fcc2 	bl	70b2 <mbedtls_mpi_cmp_int>
    772e:	2800      	cmp	r0, #0
    7730:	dbf3      	blt.n	771a <mbedtls_mpi_mod_mpi+0x28>
    while( mbedtls_mpi_cmp_mpi( R, B ) >= 0 )
    7732:	4631      	mov	r1, r6
    7734:	4620      	mov	r0, r4
    7736:	f7ff fc79 	bl	702c <mbedtls_mpi_cmp_mpi>
    773a:	2800      	cmp	r0, #0
    773c:	dbeb      	blt.n	7716 <mbedtls_mpi_mod_mpi+0x24>
      MBEDTLS_MPI_CHK( mbedtls_mpi_sub_mpi( R, R, B ) );
    773e:	4632      	mov	r2, r6
    7740:	4621      	mov	r1, r4
    7742:	4620      	mov	r0, r4
    7744:	f7ff fd94 	bl	7270 <mbedtls_mpi_sub_mpi>
    7748:	2800      	cmp	r0, #0
    774a:	d0f2      	beq.n	7732 <mbedtls_mpi_mod_mpi+0x40>
    774c:	4605      	mov	r5, r0
    774e:	e7e2      	b.n	7716 <mbedtls_mpi_mod_mpi+0x24>
        return( MBEDTLS_ERR_MPI_NEGATIVE_VALUE );
    7750:	f06f 0509 	mvn.w	r5, #9
    7754:	e7df      	b.n	7716 <mbedtls_mpi_mod_mpi+0x24>

00007756 <mbedtls_mpi_exp_mod>:
 * Sliding-window exponentiation: X = A^E mod N  (HAC 14.85)
 */
int mbedtls_mpi_exp_mod( mbedtls_mpi *X, const mbedtls_mpi *A,
                         const mbedtls_mpi *E, const mbedtls_mpi *N,
                         mbedtls_mpi *_RR )
{
    7756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    775a:	f2ad 6d64 	subw	sp, sp, #1636	; 0x664
    775e:	9004      	str	r0, [sp, #16]
    7760:	460f      	mov	r7, r1
    MPI_VALIDATE_RET( X != NULL );
    MPI_VALIDATE_RET( A != NULL );
    MPI_VALIDATE_RET( E != NULL );
    MPI_VALIDATE_RET( N != NULL );

    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    7762:	4618      	mov	r0, r3
    7764:	2100      	movs	r1, #0
{
    7766:	461d      	mov	r5, r3
    7768:	9206      	str	r2, [sp, #24]
    if( mbedtls_mpi_cmp_int( N, 0 ) <= 0 || ( N->p[0] & 1 ) == 0 )
    776a:	f7ff fca2 	bl	70b2 <mbedtls_mpi_cmp_int>
    776e:	2800      	cmp	r0, #0
    7770:	f340 81ed 	ble.w	7b4e <mbedtls_mpi_exp_mod+0x3f8>
    7774:	68ab      	ldr	r3, [r5, #8]
    7776:	681c      	ldr	r4, [r3, #0]
    7778:	f014 0301 	ands.w	r3, r4, #1
    777c:	9308      	str	r3, [sp, #32]
    777e:	f000 81e6 	beq.w	7b4e <mbedtls_mpi_exp_mod+0x3f8>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );

    if( mbedtls_mpi_cmp_int( E, 0 ) < 0 )
    7782:	2100      	movs	r1, #0
    7784:	9806      	ldr	r0, [sp, #24]
    7786:	f7ff fc94 	bl	70b2 <mbedtls_mpi_cmp_int>
    778a:	2800      	cmp	r0, #0
    778c:	f2c0 81df 	blt.w	7b4e <mbedtls_mpi_exp_mod+0x3f8>
    x += ( ( m0 + 2 ) & 4 ) << 1;
    7790:	2103      	movs	r1, #3
    7792:	1ca6      	adds	r6, r4, #2
    7794:	0076      	lsls	r6, r6, #1
    7796:	f006 0608 	and.w	r6, r6, #8
    779a:	4426      	add	r6, r4
        x *= ( 2 - ( m0 * x ) );
    779c:	fb06 f304 	mul.w	r3, r6, r4
    for( i = biL; i >= 8; i /= 2 )
    77a0:	3901      	subs	r1, #1
        x *= ( 2 - ( m0 * x ) );
    77a2:	f1c3 0302 	rsb	r3, r3, #2
    77a6:	fb03 f606 	mul.w	r6, r3, r6
    for( i = biL; i >= 8; i /= 2 )
    77aa:	d1f7      	bne.n	779c <mbedtls_mpi_exp_mod+0x46>
    X->s = 1;
    77ac:	2301      	movs	r3, #1
     * Init temps and window size
     */
    mpi_montg_init( &mm, N );
    mbedtls_mpi_init( &RR ); mbedtls_mpi_init( &T );
    mbedtls_mpi_init( &Apos );
    memset( W, 0, sizeof( W ) );
    77ae:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    77b2:	a818      	add	r0, sp, #96	; 0x60
    X->n = 0;
    77b4:	e9cd 310c 	strd	r3, r1, [sp, #48]	; 0x30
    X->s = 1;
    77b8:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
    X->p = NULL;
    77bc:	e9cd 1110 	strd	r1, r1, [sp, #64]	; 0x40
    X->n = 0;
    77c0:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
    X->p = NULL;
    77c4:	9114      	str	r1, [sp, #80]	; 0x50
    memset( W, 0, sizeof( W ) );
    77c6:	f7fe fc01 	bl	5fcc <memset>

    i = mbedtls_mpi_bitlen( E );
    77ca:	9806      	ldr	r0, [sp, #24]
    77cc:	f7ff fade 	bl	6d8c <mbedtls_mpi_bitlen>

    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    77d0:	f5b0 7f28 	cmp.w	r0, #672	; 0x2a0
    77d4:	f080 80f2 	bcs.w	79bc <mbedtls_mpi_exp_mod+0x266>
    77d8:	28ef      	cmp	r0, #239	; 0xef
    77da:	f200 80f1 	bhi.w	79c0 <mbedtls_mpi_exp_mod+0x26a>
    77de:	284f      	cmp	r0, #79	; 0x4f
    77e0:	f200 80f0 	bhi.w	79c4 <mbedtls_mpi_exp_mod+0x26e>
    77e4:	2817      	cmp	r0, #23
    77e6:	9b08      	ldr	r3, [sp, #32]
    77e8:	bf88      	it	hi
    77ea:	2303      	movhi	r3, #3
#if( MBEDTLS_MPI_WINDOW_SIZE < 6 )
    if( wsize > MBEDTLS_MPI_WINDOW_SIZE )
        wsize = MBEDTLS_MPI_WINDOW_SIZE;
#endif

    j = N->n + 1;
    77ec:	6869      	ldr	r1, [r5, #4]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    77ee:	9804      	ldr	r0, [sp, #16]
    j = N->n + 1;
    77f0:	f101 0801 	add.w	r8, r1, #1
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    77f4:	4641      	mov	r1, r8
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    77f6:	9303      	str	r3, [sp, #12]
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( X, j ) );
    77f8:	f7ff fa49 	bl	6c8e <mbedtls_mpi_grow>
    77fc:	4604      	mov	r4, r0
    77fe:	2800      	cmp	r0, #0
    7800:	f040 80ba 	bne.w	7978 <mbedtls_mpi_exp_mod+0x222>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[1],  j ) );
    7804:	4641      	mov	r1, r8
    7806:	a81b      	add	r0, sp, #108	; 0x6c
    7808:	f7ff fa41 	bl	6c8e <mbedtls_mpi_grow>
    780c:	4604      	mov	r4, r0
    780e:	2800      	cmp	r0, #0
    7810:	f040 80b2 	bne.w	7978 <mbedtls_mpi_exp_mod+0x222>
    MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &T, j * 2 ) );
    7814:	ea4f 0148 	mov.w	r1, r8, lsl #1
    7818:	a80f      	add	r0, sp, #60	; 0x3c
    781a:	f7ff fa38 	bl	6c8e <mbedtls_mpi_grow>
    781e:	4604      	mov	r4, r0
    7820:	2800      	cmp	r0, #0
    7822:	f040 80a9 	bne.w	7978 <mbedtls_mpi_exp_mod+0x222>

    /*
     * Compensate for negative A (and correct at the end)
     */
    neg = ( A->s == -1 );
    7826:	683b      	ldr	r3, [r7, #0]
    7828:	9307      	str	r3, [sp, #28]
    if( neg )
    782a:	3301      	adds	r3, #1
    782c:	d10a      	bne.n	7844 <mbedtls_mpi_exp_mod+0xee>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &Apos, A ) );
    782e:	4639      	mov	r1, r7
    7830:	a812      	add	r0, sp, #72	; 0x48
    7832:	f7ff fa52 	bl	6cda <mbedtls_mpi_copy>
    7836:	4604      	mov	r4, r0
    7838:	2800      	cmp	r0, #0
    783a:	f040 809d 	bne.w	7978 <mbedtls_mpi_exp_mod+0x222>
        Apos.s = 1;
    783e:	2301      	movs	r3, #1
        A = &Apos;
    7840:	af12      	add	r7, sp, #72	; 0x48
        Apos.s = 1;
    7842:	9312      	str	r3, [sp, #72]	; 0x48
    }

    /*
     * If 1st call, pre-compute R^2 mod N
     */
    if( _RR == NULL || _RR->p == NULL )
    7844:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
    7848:	b11b      	cbz	r3, 7852 <mbedtls_mpi_exp_mod+0xfc>
    784a:	689b      	ldr	r3, [r3, #8]
    784c:	2b00      	cmp	r3, #0
    784e:	f040 80bb 	bne.w	79c8 <mbedtls_mpi_exp_mod+0x272>
    {
        MBEDTLS_MPI_CHK( mbedtls_mpi_lset( &RR, 1 ) );
    7852:	2101      	movs	r1, #1
    7854:	a80c      	add	r0, sp, #48	; 0x30
    7856:	f7ff fa6c 	bl	6d32 <mbedtls_mpi_lset>
    785a:	4604      	mov	r4, r0
    785c:	2800      	cmp	r0, #0
    785e:	f040 808b 	bne.w	7978 <mbedtls_mpi_exp_mod+0x222>
        MBEDTLS_MPI_CHK( mbedtls_mpi_shift_l( &RR, N->n * 2 * biL ) );
    7862:	6869      	ldr	r1, [r5, #4]
    7864:	a80c      	add	r0, sp, #48	; 0x30
    7866:	0189      	lsls	r1, r1, #6
    7868:	f7ff fb21 	bl	6eae <mbedtls_mpi_shift_l>
    786c:	4604      	mov	r4, r0
    786e:	2800      	cmp	r0, #0
    7870:	f040 8082 	bne.w	7978 <mbedtls_mpi_exp_mod+0x222>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &RR, &RR, N ) );
    7874:	a90c      	add	r1, sp, #48	; 0x30
    7876:	462a      	mov	r2, r5
    7878:	4608      	mov	r0, r1
    787a:	f7ff ff3a 	bl	76f2 <mbedtls_mpi_mod_mpi>
    787e:	4604      	mov	r4, r0
    7880:	2800      	cmp	r0, #0
    7882:	d179      	bne.n	7978 <mbedtls_mpi_exp_mod+0x222>

        if( _RR != NULL )
    7884:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
    7888:	b123      	cbz	r3, 7894 <mbedtls_mpi_exp_mod+0x13e>
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    788a:	220c      	movs	r2, #12
    788c:	4618      	mov	r0, r3
    788e:	a90c      	add	r1, sp, #48	; 0x30
    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    7890:	f7fe fb71 	bl	5f76 <memcpy>

    /*
     * W[1] = A * R^2 * R^-1 mod N = A * R mod N
     */
    if( mbedtls_mpi_cmp_mpi( A, N ) >= 0 )
    7894:	4629      	mov	r1, r5
    7896:	4638      	mov	r0, r7
    7898:	f7ff fbc8 	bl	702c <mbedtls_mpi_cmp_mpi>
    789c:	2800      	cmp	r0, #0
    789e:	f2c0 8098 	blt.w	79d2 <mbedtls_mpi_exp_mod+0x27c>
        MBEDTLS_MPI_CHK( mbedtls_mpi_mod_mpi( &W[1], A, N ) );
    78a2:	462a      	mov	r2, r5
    78a4:	4639      	mov	r1, r7
    78a6:	a81b      	add	r0, sp, #108	; 0x6c
    78a8:	f7ff ff23 	bl	76f2 <mbedtls_mpi_mod_mpi>
    78ac:	4604      	mov	r4, r0
    78ae:	2800      	cmp	r0, #0
    78b0:	d162      	bne.n	7978 <mbedtls_mpi_exp_mod+0x222>
    *mm = ~x + 1;
    78b2:	4276      	negs	r6, r6
    else
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );

    mpi_montmul( &W[1], &RR, N, mm, &T );
    78b4:	f10d 093c 	add.w	r9, sp, #60	; 0x3c
    78b8:	4633      	mov	r3, r6
    78ba:	462a      	mov	r2, r5
    78bc:	a90c      	add	r1, sp, #48	; 0x30
    78be:	a81d      	add	r0, sp, #116	; 0x74
    78c0:	f8cd 9000 	str.w	r9, [sp]
    78c4:	f7ff f961 	bl	6b8a <mpi_montmul.isra.0>

    /*
     * X = R^2 * R^-1 mod N = R mod N
     */
    MBEDTLS_MPI_CHK( mbedtls_mpi_copy( X, &RR ) );
    78c8:	9804      	ldr	r0, [sp, #16]
    78ca:	a90c      	add	r1, sp, #48	; 0x30
    78cc:	f7ff fa05 	bl	6cda <mbedtls_mpi_copy>
    78d0:	4604      	mov	r4, r0
    78d2:	2800      	cmp	r0, #0
    78d4:	d150      	bne.n	7978 <mbedtls_mpi_exp_mod+0x222>
    mbedtls_mpi_uint z = 1;
    78d6:	2701      	movs	r7, #1
    78d8:	ab0b      	add	r3, sp, #44	; 0x2c
    U.p = &z;
    78da:	9317      	str	r3, [sp, #92]	; 0x5c
    78dc:	9b04      	ldr	r3, [sp, #16]
    mpi_montmul( A, &U, N, mm, T );
    78de:	462a      	mov	r2, r5
    78e0:	f103 0808 	add.w	r8, r3, #8
    78e4:	4640      	mov	r0, r8
    78e6:	4633      	mov	r3, r6
    78e8:	f8cd 9000 	str.w	r9, [sp]
    78ec:	a915      	add	r1, sp, #84	; 0x54
    U.n = U.s = (int) z;
    78ee:	e9cd 7715 	strd	r7, r7, [sp, #84]	; 0x54
    mbedtls_mpi_uint z = 1;
    78f2:	970b      	str	r7, [sp, #44]	; 0x2c
    mpi_montmul( A, &U, N, mm, T );
    78f4:	f7ff f949 	bl	6b8a <mpi_montmul.isra.0>
    mpi_montred( X, N, mm, &T );

    if( wsize > 1 )
    78f8:	9b03      	ldr	r3, [sp, #12]
    78fa:	42bb      	cmp	r3, r7
    78fc:	d16e      	bne.n	79dc <mbedtls_mpi_exp_mod+0x286>

    nblimbs = E->n;
    bufsize = 0;
    nbits   = 0;
    wbits   = 0;
    state   = 0;
    78fe:	f04f 0a00 	mov.w	sl, #0
    nbits   = 0;
    7902:	46d1      	mov	r9, sl
    bufsize = 0;
    7904:	46d3      	mov	fp, sl
    wbits   = 0;
    7906:	4657      	mov	r7, sl
    nblimbs = E->n;
    7908:	9b06      	ldr	r3, [sp, #24]
    790a:	685b      	ldr	r3, [r3, #4]
    790c:	9305      	str	r3, [sp, #20]

    while( 1 )
    {
        if( bufsize == 0 )
    790e:	f1bb 0f00 	cmp.w	fp, #0
    7912:	f040 80b9 	bne.w	7a88 <mbedtls_mpi_exp_mod+0x332>
        {
            if( nblimbs == 0 )
    7916:	9b05      	ldr	r3, [sp, #20]
    7918:	2b00      	cmp	r3, #0
    791a:	f040 80b0 	bne.w	7a7e <mbedtls_mpi_exp_mod+0x328>
    {
        mpi_montmul( X, X, N, mm, &T );

        wbits <<= 1;

        if( ( wbits & ( one << wsize ) ) != 0 )
    791e:	f04f 0b01 	mov.w	fp, #1
    7922:	9b03      	ldr	r3, [sp, #12]
    7924:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
    7928:	fa0b fb03 	lsl.w	fp, fp, r3
    for( i = 0; i < nbits; i++ )
    792c:	9b05      	ldr	r3, [sp, #20]
    792e:	454b      	cmp	r3, r9
    7930:	f040 80ee 	bne.w	7b10 <mbedtls_mpi_exp_mod+0x3ba>
    mbedtls_mpi_uint z = 1;
    7934:	2301      	movs	r3, #1
    7936:	aa0b      	add	r2, sp, #44	; 0x2c
    U.n = U.s = (int) z;
    7938:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
    mbedtls_mpi_uint z = 1;
    793c:	930b      	str	r3, [sp, #44]	; 0x2c
    U.p = &z;
    793e:	9217      	str	r2, [sp, #92]	; 0x5c
    mpi_montmul( A, &U, N, mm, T );
    7940:	4633      	mov	r3, r6
    7942:	462a      	mov	r2, r5
    7944:	4640      	mov	r0, r8
    7946:	f8cd a000 	str.w	sl, [sp]
    794a:	a915      	add	r1, sp, #84	; 0x54
    794c:	f7ff f91d 	bl	6b8a <mpi_montmul.isra.0>
    /*
     * X = A^E * R * R^-1 mod N = A^E mod N
     */
    mpi_montred( X, N, mm, &T );

    if( neg && E->n != 0 && ( E->p[0] & 1 ) != 0 )
    7950:	9b07      	ldr	r3, [sp, #28]
    7952:	3301      	adds	r3, #1
    7954:	d110      	bne.n	7978 <mbedtls_mpi_exp_mod+0x222>
    7956:	9b06      	ldr	r3, [sp, #24]
    7958:	685b      	ldr	r3, [r3, #4]
    795a:	b16b      	cbz	r3, 7978 <mbedtls_mpi_exp_mod+0x222>
    795c:	9b06      	ldr	r3, [sp, #24]
    795e:	689b      	ldr	r3, [r3, #8]
    7960:	681b      	ldr	r3, [r3, #0]
    7962:	07db      	lsls	r3, r3, #31
    7964:	d508      	bpl.n	7978 <mbedtls_mpi_exp_mod+0x222>
    {
        X->s = -1;
    7966:	9b04      	ldr	r3, [sp, #16]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7968:	4629      	mov	r1, r5
        X->s = -1;
    796a:	461a      	mov	r2, r3
    796c:	9b07      	ldr	r3, [sp, #28]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    796e:	4610      	mov	r0, r2
        X->s = -1;
    7970:	6013      	str	r3, [r2, #0]
        MBEDTLS_MPI_CHK( mbedtls_mpi_add_mpi( X, N, X ) );
    7972:	f7ff fc5b 	bl	722c <mbedtls_mpi_add_mpi>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    7976:	4604      	mov	r4, r0
    }

cleanup:

    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7978:	9b03      	ldr	r3, [sp, #12]
        mbedtls_mpi_free( &W[i] );
    797a:	270c      	movs	r7, #12
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    797c:	1e5d      	subs	r5, r3, #1
    797e:	2301      	movs	r3, #1
    7980:	9a03      	ldr	r2, [sp, #12]
    7982:	fa03 f505 	lsl.w	r5, r3, r5
    7986:	fa03 f602 	lsl.w	r6, r3, r2
    798a:	42ae      	cmp	r6, r5
    798c:	f200 80d8 	bhi.w	7b40 <mbedtls_mpi_exp_mod+0x3ea>

    mbedtls_mpi_free( &W[1] ); mbedtls_mpi_free( &T ); mbedtls_mpi_free( &Apos );
    7990:	a81b      	add	r0, sp, #108	; 0x6c
    7992:	f7ff f96a 	bl	6c6a <mbedtls_mpi_free>
    7996:	a80f      	add	r0, sp, #60	; 0x3c
    7998:	f7ff f967 	bl	6c6a <mbedtls_mpi_free>
    799c:	a812      	add	r0, sp, #72	; 0x48
    799e:	f7ff f964 	bl	6c6a <mbedtls_mpi_free>

    if( _RR == NULL || _RR->p == NULL )
    79a2:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
    79a6:	b10b      	cbz	r3, 79ac <mbedtls_mpi_exp_mod+0x256>
    79a8:	689b      	ldr	r3, [r3, #8]
    79aa:	b913      	cbnz	r3, 79b2 <mbedtls_mpi_exp_mod+0x25c>
        mbedtls_mpi_free( &RR );
    79ac:	a80c      	add	r0, sp, #48	; 0x30
    79ae:	f7ff f95c 	bl	6c6a <mbedtls_mpi_free>

    return( ret );
}
    79b2:	4620      	mov	r0, r4
    79b4:	f20d 6d64 	addw	sp, sp, #1636	; 0x664
    79b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wsize = ( i > 671 ) ? 6 : ( i > 239 ) ? 5 :
    79bc:	2306      	movs	r3, #6
    79be:	e715      	b.n	77ec <mbedtls_mpi_exp_mod+0x96>
    79c0:	2305      	movs	r3, #5
    79c2:	e713      	b.n	77ec <mbedtls_mpi_exp_mod+0x96>
    79c4:	2304      	movs	r3, #4
    79c6:	e711      	b.n	77ec <mbedtls_mpi_exp_mod+0x96>
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );
    79c8:	220c      	movs	r2, #12
    79ca:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
    79ce:	a80c      	add	r0, sp, #48	; 0x30
    79d0:	e75e      	b.n	7890 <mbedtls_mpi_exp_mod+0x13a>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[1], A ) );
    79d2:	4639      	mov	r1, r7
    79d4:	a81b      	add	r0, sp, #108	; 0x6c
    79d6:	f7ff f980 	bl	6cda <mbedtls_mpi_copy>
    79da:	e767      	b.n	78ac <mbedtls_mpi_exp_mod+0x156>
    79dc:	9b03      	ldr	r3, [sp, #12]
        MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[j], N->n + 1 ) );
    79de:	6869      	ldr	r1, [r5, #4]
    79e0:	f103 3aff 	add.w	sl, r3, #4294967295
    79e4:	fa07 f30a 	lsl.w	r3, r7, sl
    79e8:	270c      	movs	r7, #12
    79ea:	9305      	str	r3, [sp, #20]
    79ec:	fa07 f70a 	lsl.w	r7, r7, sl
    79f0:	ab18      	add	r3, sp, #96	; 0x60
    79f2:	441f      	add	r7, r3
    79f4:	4638      	mov	r0, r7
    79f6:	3101      	adds	r1, #1
    79f8:	f7ff f949 	bl	6c8e <mbedtls_mpi_grow>
    79fc:	2800      	cmp	r0, #0
    79fe:	d1ba      	bne.n	7976 <mbedtls_mpi_exp_mod+0x220>
        MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[j], &W[1]    ) );
    7a00:	4638      	mov	r0, r7
    7a02:	a91b      	add	r1, sp, #108	; 0x6c
    7a04:	f7ff f969 	bl	6cda <mbedtls_mpi_copy>
    7a08:	2800      	cmp	r0, #0
    7a0a:	d1b4      	bne.n	7976 <mbedtls_mpi_exp_mod+0x220>
        for( i = 0; i < wsize - 1; i++ )
    7a0c:	46a3      	mov	fp, r4
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    7a0e:	f107 0008 	add.w	r0, r7, #8
    7a12:	4633      	mov	r3, r6
    7a14:	462a      	mov	r2, r5
    7a16:	4639      	mov	r1, r7
    7a18:	f8cd 9000 	str.w	r9, [sp]
        for( i = 0; i < wsize - 1; i++ )
    7a1c:	f10b 0b01 	add.w	fp, fp, #1
            mpi_montmul( &W[j], &W[j], N, mm, &T );
    7a20:	9009      	str	r0, [sp, #36]	; 0x24
    7a22:	f7ff f8b2 	bl	6b8a <mpi_montmul.isra.0>
        for( i = 0; i < wsize - 1; i++ )
    7a26:	45d3      	cmp	fp, sl
    7a28:	9809      	ldr	r0, [sp, #36]	; 0x24
    7a2a:	d3f2      	bcc.n	7a12 <mbedtls_mpi_exp_mod+0x2bc>
        for( i = j + 1; i < ( one << wsize ); i++ )
    7a2c:	9b05      	ldr	r3, [sp, #20]
    7a2e:	9a03      	ldr	r2, [sp, #12]
    7a30:	f103 0901 	add.w	r9, r3, #1
    7a34:	2301      	movs	r3, #1
    7a36:	fa03 fb02 	lsl.w	fp, r3, r2
    7a3a:	45cb      	cmp	fp, r9
    7a3c:	f67f af5f 	bls.w	78fe <mbedtls_mpi_exp_mod+0x1a8>
            MBEDTLS_MPI_CHK( mbedtls_mpi_grow( &W[i], N->n + 1 ) );
    7a40:	6869      	ldr	r1, [r5, #4]
    7a42:	f107 0a0c 	add.w	sl, r7, #12
    7a46:	4650      	mov	r0, sl
    7a48:	3101      	adds	r1, #1
    7a4a:	f7ff f920 	bl	6c8e <mbedtls_mpi_grow>
    7a4e:	2800      	cmp	r0, #0
    7a50:	d191      	bne.n	7976 <mbedtls_mpi_exp_mod+0x220>
            MBEDTLS_MPI_CHK( mbedtls_mpi_copy( &W[i], &W[i - 1] ) );
    7a52:	4639      	mov	r1, r7
    7a54:	4650      	mov	r0, sl
    7a56:	f7ff f940 	bl	6cda <mbedtls_mpi_copy>
    7a5a:	2800      	cmp	r0, #0
    7a5c:	d18b      	bne.n	7976 <mbedtls_mpi_exp_mod+0x220>
            mpi_montmul( &W[i], &W[1], N, mm, &T );
    7a5e:	ab0f      	add	r3, sp, #60	; 0x3c
    7a60:	9300      	str	r3, [sp, #0]
    7a62:	f107 0014 	add.w	r0, r7, #20
    7a66:	4633      	mov	r3, r6
    7a68:	462a      	mov	r2, r5
    7a6a:	a91b      	add	r1, sp, #108	; 0x6c
    7a6c:	f7ff f88d 	bl	6b8a <mpi_montmul.isra.0>
        for( i = j + 1; i < ( one << wsize ); i++ )
    7a70:	4657      	mov	r7, sl
    7a72:	f109 0901 	add.w	r9, r9, #1
    7a76:	e7e0      	b.n	7a3a <mbedtls_mpi_exp_mod+0x2e4>
        state = 2;
    7a78:	f04f 0a02 	mov.w	sl, #2
    7a7c:	e747      	b.n	790e <mbedtls_mpi_exp_mod+0x1b8>
            bufsize = sizeof( mbedtls_mpi_uint ) << 3;
    7a7e:	f04f 0b20 	mov.w	fp, #32
            nblimbs--;
    7a82:	9b05      	ldr	r3, [sp, #20]
    7a84:	3b01      	subs	r3, #1
    7a86:	9305      	str	r3, [sp, #20]
        ei = (E->p[nblimbs] >> bufsize) & 1;
    7a88:	9b06      	ldr	r3, [sp, #24]
    7a8a:	9a05      	ldr	r2, [sp, #20]
    7a8c:	689b      	ldr	r3, [r3, #8]
        bufsize--;
    7a8e:	f10b 3bff 	add.w	fp, fp, #4294967295
        ei = (E->p[nblimbs] >> bufsize) & 1;
    7a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    7a96:	fa23 f30b 	lsr.w	r3, r3, fp
        if( ei == 0 && state == 0 )
    7a9a:	f013 0301 	ands.w	r3, r3, #1
    7a9e:	d10f      	bne.n	7ac0 <mbedtls_mpi_exp_mod+0x36a>
    7aa0:	f1ba 0f00 	cmp.w	sl, #0
    7aa4:	f43f af33 	beq.w	790e <mbedtls_mpi_exp_mod+0x1b8>
        if( ei == 0 && state == 1 )
    7aa8:	f1ba 0f01 	cmp.w	sl, #1
    7aac:	d108      	bne.n	7ac0 <mbedtls_mpi_exp_mod+0x36a>
            mpi_montmul( X, X, N, mm, &T );
    7aae:	ab0f      	add	r3, sp, #60	; 0x3c
    7ab0:	9300      	str	r3, [sp, #0]
    7ab2:	462a      	mov	r2, r5
    7ab4:	4633      	mov	r3, r6
    7ab6:	4640      	mov	r0, r8
    7ab8:	9904      	ldr	r1, [sp, #16]
    7aba:	f7ff f866 	bl	6b8a <mpi_montmul.isra.0>
            continue;
    7abe:	e726      	b.n	790e <mbedtls_mpi_exp_mod+0x1b8>
        wbits |= ( ei << ( wsize - nbits ) );
    7ac0:	9a03      	ldr	r2, [sp, #12]
        nbits++;
    7ac2:	f109 0901 	add.w	r9, r9, #1
        wbits |= ( ei << ( wsize - nbits ) );
    7ac6:	eba2 0209 	sub.w	r2, r2, r9
    7aca:	4093      	lsls	r3, r2
    7acc:	431f      	orrs	r7, r3
        if( nbits == wsize )
    7ace:	9b03      	ldr	r3, [sp, #12]
    7ad0:	454b      	cmp	r3, r9
    7ad2:	d1d1      	bne.n	7a78 <mbedtls_mpi_exp_mod+0x322>
            for( i = 0; i < wsize; i++ )
    7ad4:	f04f 0a00 	mov.w	sl, #0
                mpi_montmul( X, X, N, mm, &T );
    7ad8:	ab0f      	add	r3, sp, #60	; 0x3c
    7ada:	9300      	str	r3, [sp, #0]
    7adc:	462a      	mov	r2, r5
    7ade:	4633      	mov	r3, r6
    7ae0:	4640      	mov	r0, r8
    7ae2:	9904      	ldr	r1, [sp, #16]
            for( i = 0; i < wsize; i++ )
    7ae4:	f10a 0a01 	add.w	sl, sl, #1
                mpi_montmul( X, X, N, mm, &T );
    7ae8:	f7ff f84f 	bl	6b8a <mpi_montmul.isra.0>
            for( i = 0; i < wsize; i++ )
    7aec:	45d1      	cmp	r9, sl
    7aee:	d8f3      	bhi.n	7ad8 <mbedtls_mpi_exp_mod+0x382>
            mpi_montmul( X, &W[wbits], N, mm, &T );
    7af0:	210c      	movs	r1, #12
    7af2:	a818      	add	r0, sp, #96	; 0x60
    7af4:	fb01 0107 	mla	r1, r1, r7, r0
            nbits = 0;
    7af8:	2700      	movs	r7, #0
            mpi_montmul( X, &W[wbits], N, mm, &T );
    7afa:	ab0f      	add	r3, sp, #60	; 0x3c
    7afc:	9300      	str	r3, [sp, #0]
    7afe:	462a      	mov	r2, r5
    7b00:	4633      	mov	r3, r6
    7b02:	4640      	mov	r0, r8
    7b04:	f7ff f841 	bl	6b8a <mpi_montmul.isra.0>
            wbits = 0;
    7b08:	46b9      	mov	r9, r7
            state--;
    7b0a:	f8dd a020 	ldr.w	sl, [sp, #32]
    7b0e:	e6fe      	b.n	790e <mbedtls_mpi_exp_mod+0x1b8>
        mpi_montmul( X, X, N, mm, &T );
    7b10:	4633      	mov	r3, r6
    7b12:	462a      	mov	r2, r5
    7b14:	4640      	mov	r0, r8
    7b16:	9904      	ldr	r1, [sp, #16]
    7b18:	f8cd a000 	str.w	sl, [sp]
        wbits <<= 1;
    7b1c:	007f      	lsls	r7, r7, #1
        mpi_montmul( X, X, N, mm, &T );
    7b1e:	f7ff f834 	bl	6b8a <mpi_montmul.isra.0>
        if( ( wbits & ( one << wsize ) ) != 0 )
    7b22:	ea1b 0f07 	tst.w	fp, r7
    7b26:	d007      	beq.n	7b38 <mbedtls_mpi_exp_mod+0x3e2>
            mpi_montmul( X, &W[1], N, mm, &T );
    7b28:	4633      	mov	r3, r6
    7b2a:	462a      	mov	r2, r5
    7b2c:	4640      	mov	r0, r8
    7b2e:	f8cd a000 	str.w	sl, [sp]
    7b32:	a91b      	add	r1, sp, #108	; 0x6c
    7b34:	f7ff f829 	bl	6b8a <mpi_montmul.isra.0>
    for( i = 0; i < nbits; i++ )
    7b38:	9b05      	ldr	r3, [sp, #20]
    7b3a:	3301      	adds	r3, #1
    7b3c:	9305      	str	r3, [sp, #20]
    7b3e:	e6f5      	b.n	792c <mbedtls_mpi_exp_mod+0x1d6>
        mbedtls_mpi_free( &W[i] );
    7b40:	ab18      	add	r3, sp, #96	; 0x60
    7b42:	fb07 3005 	mla	r0, r7, r5, r3
    7b46:	f7ff f890 	bl	6c6a <mbedtls_mpi_free>
    for( i = ( one << ( wsize - 1 ) ); i < ( one << wsize ); i++ )
    7b4a:	3501      	adds	r5, #1
    7b4c:	e71d      	b.n	798a <mbedtls_mpi_exp_mod+0x234>
        return( MBEDTLS_ERR_MPI_BAD_INPUT_DATA );
    7b4e:	f06f 0403 	mvn.w	r4, #3
    7b52:	e72e      	b.n	79b2 <mbedtls_mpi_exp_mod+0x25c>

00007b54 <platform_calloc_uninit>:
}
    7b54:	2000      	movs	r0, #0
    7b56:	4770      	bx	lr

00007b58 <platform_exit_uninit>:
 * Make dummy function to prevent NULL pointer dereferences
 */
static void platform_exit_uninit( int status )
{
    ((void) status);
}
    7b58:	4770      	bx	lr

00007b5a <platform_free_uninit>:
    7b5a:	4770      	bx	lr

00007b5c <mbedtls_rsa_import>:
{
    7b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7b60:	4605      	mov	r5, r0
    7b62:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
    7b66:	4691      	mov	r9, r2
    7b68:	4698      	mov	r8, r3
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    7b6a:	460c      	mov	r4, r1
    7b6c:	b979      	cbnz	r1, 7b8e <mbedtls_rsa_import+0x32>
    7b6e:	f1b9 0f00 	cmp.w	r9, #0
    7b72:	d115      	bne.n	7ba0 <mbedtls_rsa_import+0x44>
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    7b74:	f1b8 0f00 	cmp.w	r8, #0
    7b78:	d11a      	bne.n	7bb0 <mbedtls_rsa_import+0x54>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    7b7a:	bb0f      	cbnz	r7, 7bc0 <mbedtls_rsa_import+0x64>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    7b7c:	bb46      	cbnz	r6, 7bd0 <mbedtls_rsa_import+0x74>
    if( N != NULL )
    7b7e:	b37c      	cbz	r4, 7be0 <mbedtls_rsa_import+0x84>
        ctx->len = mbedtls_mpi_size( &ctx->N );
    7b80:	f105 0008 	add.w	r0, r5, #8
    7b84:	f7ff f91e 	bl	6dc4 <mbedtls_mpi_size>
    7b88:	6068      	str	r0, [r5, #4]
    return( 0 );
    7b8a:	2000      	movs	r0, #0
    7b8c:	e006      	b.n	7b9c <mbedtls_rsa_import+0x40>
    if( ( N != NULL && ( ret = mbedtls_mpi_copy( &ctx->N, N ) ) != 0 ) ||
    7b8e:	3008      	adds	r0, #8
    7b90:	f7ff f8a3 	bl	6cda <mbedtls_mpi_copy>
    7b94:	2800      	cmp	r0, #0
    7b96:	d0ea      	beq.n	7b6e <mbedtls_rsa_import+0x12>
        return( MBEDTLS_ERR_RSA_BAD_INPUT_DATA + ret );
    7b98:	f5a0 4081 	sub.w	r0, r0, #16512	; 0x4080
}
    7b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ( P != NULL && ( ret = mbedtls_mpi_copy( &ctx->P, P ) ) != 0 ) ||
    7ba0:	4649      	mov	r1, r9
    7ba2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    7ba6:	f7ff f898 	bl	6cda <mbedtls_mpi_copy>
    7baa:	2800      	cmp	r0, #0
    7bac:	d0e2      	beq.n	7b74 <mbedtls_rsa_import+0x18>
    7bae:	e7f3      	b.n	7b98 <mbedtls_rsa_import+0x3c>
        ( Q != NULL && ( ret = mbedtls_mpi_copy( &ctx->Q, Q ) ) != 0 ) ||
    7bb0:	4641      	mov	r1, r8
    7bb2:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7bb6:	f7ff f890 	bl	6cda <mbedtls_mpi_copy>
    7bba:	2800      	cmp	r0, #0
    7bbc:	d0dd      	beq.n	7b7a <mbedtls_rsa_import+0x1e>
    7bbe:	e7eb      	b.n	7b98 <mbedtls_rsa_import+0x3c>
        ( D != NULL && ( ret = mbedtls_mpi_copy( &ctx->D, D ) ) != 0 ) ||
    7bc0:	4639      	mov	r1, r7
    7bc2:	f105 0020 	add.w	r0, r5, #32
    7bc6:	f7ff f888 	bl	6cda <mbedtls_mpi_copy>
    7bca:	2800      	cmp	r0, #0
    7bcc:	d0d6      	beq.n	7b7c <mbedtls_rsa_import+0x20>
    7bce:	e7e3      	b.n	7b98 <mbedtls_rsa_import+0x3c>
        ( E != NULL && ( ret = mbedtls_mpi_copy( &ctx->E, E ) ) != 0 ) )
    7bd0:	4631      	mov	r1, r6
    7bd2:	f105 0014 	add.w	r0, r5, #20
    7bd6:	f7ff f880 	bl	6cda <mbedtls_mpi_copy>
    7bda:	2800      	cmp	r0, #0
    7bdc:	d0cf      	beq.n	7b7e <mbedtls_rsa_import+0x22>
    7bde:	e7db      	b.n	7b98 <mbedtls_rsa_import+0x3c>
    return( 0 );
    7be0:	4620      	mov	r0, r4
    7be2:	e7db      	b.n	7b9c <mbedtls_rsa_import+0x40>

00007be4 <mbedtls_rsa_init>:
{
    7be4:	b570      	push	{r4, r5, r6, lr}
    7be6:	4604      	mov	r4, r0
    7be8:	460e      	mov	r6, r1
    7bea:	4615      	mov	r5, r2
    memset( ctx, 0, sizeof( mbedtls_rsa_context ) );
    7bec:	2100      	movs	r1, #0
    7bee:	22ac      	movs	r2, #172	; 0xac
    7bf0:	f7fe f9ec 	bl	5fcc <memset>
    ctx->hash_id = hash_id;
    7bf4:	e9c4 6529 	strd	r6, r5, [r4, #164]	; 0xa4
}
    7bf8:	bd70      	pop	{r4, r5, r6, pc}

00007bfa <mbedtls_rsa_free>:

/*
 * Free the components of an RSA key
 */
void mbedtls_rsa_free( mbedtls_rsa_context *ctx )
{
    7bfa:	b510      	push	{r4, lr}
    if( ctx == NULL )
    7bfc:	4604      	mov	r4, r0
    7bfe:	b3a0      	cbz	r0, 7c6a <mbedtls_rsa_free+0x70>
        return;

    mbedtls_mpi_free( &ctx->Vi );
    7c00:	308c      	adds	r0, #140	; 0x8c
    7c02:	f7ff f832 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Vf );
    7c06:	f104 0098 	add.w	r0, r4, #152	; 0x98
    7c0a:	f7ff f82e 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RN );
    7c0e:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7c12:	f7ff f82a 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->D  );
    7c16:	f104 0020 	add.w	r0, r4, #32
    7c1a:	f7ff f826 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->Q  );
    7c1e:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7c22:	f7ff f822 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->P  );
    7c26:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7c2a:	f7ff f81e 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->E  );
    7c2e:	f104 0014 	add.w	r0, r4, #20
    7c32:	f7ff f81a 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->N  );
    7c36:	f104 0008 	add.w	r0, r4, #8
    7c3a:	f7ff f816 	bl	6c6a <mbedtls_mpi_free>

#if !defined(MBEDTLS_RSA_NO_CRT)
    mbedtls_mpi_free( &ctx->RQ );
    7c3e:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7c42:	f7ff f812 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->RP );
    7c46:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7c4a:	f7ff f80e 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->QP );
    7c4e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    7c52:	f7ff f80a 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DQ );
    7c56:	f104 0050 	add.w	r0, r4, #80	; 0x50
    7c5a:	f7ff f806 	bl	6c6a <mbedtls_mpi_free>
    mbedtls_mpi_free( &ctx->DP );
    7c5e:	f104 0044 	add.w	r0, r4, #68	; 0x44
#endif /* MBEDTLS_RSA_NO_CRT */

#if defined(MBEDTLS_THREADING_C)
    mbedtls_mutex_free( &ctx->mutex );
#endif
}
    7c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mbedtls_mpi_free( &ctx->DP );
    7c66:	f7ff b800 	b.w	6c6a <mbedtls_mpi_free>
}
    7c6a:	bd10      	pop	{r4, pc}

00007c6c <mbedtls_sha256_init>:
    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    7c6c:	226c      	movs	r2, #108	; 0x6c
    7c6e:	2100      	movs	r1, #0
    7c70:	f7fe b9ac 	b.w	5fcc <memset>

00007c74 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    7c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c78:	4605      	mov	r5, r0
    7c7a:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    7c7c:	4614      	mov	r4, r2
    7c7e:	b912      	cbnz	r2, 7c86 <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    7c80:	2000      	movs	r0, #0
}
    7c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    7c86:	6803      	ldr	r3, [r0, #0]
    7c88:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    ctx->total[0] += (uint32_t) ilen;
    7c8c:	18d3      	adds	r3, r2, r3
    7c8e:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    7c90:	bf22      	ittt	cs
    7c92:	6843      	ldrcs	r3, [r0, #4]
    7c94:	3301      	addcs	r3, #1
    7c96:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    7c98:	b1a7      	cbz	r7, 7cc4 <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    7c9a:	f1c7 0940 	rsb	r9, r7, #64	; 0x40
    if( left && ilen >= fill )
    7c9e:	454a      	cmp	r2, r9
    7ca0:	d310      	bcc.n	7cc4 <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    7ca2:	f100 0828 	add.w	r8, r0, #40	; 0x28
    7ca6:	464a      	mov	r2, r9
    7ca8:	eb08 0007 	add.w	r0, r8, r7
    7cac:	f7fe f963 	bl	5f76 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7cb0:	4641      	mov	r1, r8
    7cb2:	4628      	mov	r0, r5
    7cb4:	f7fc f87c 	bl	3db0 <mbedtls_internal_sha256_process>
    7cb8:	2800      	cmp	r0, #0
    7cba:	d1e2      	bne.n	7c82 <mbedtls_sha256_update_ret+0xe>
        ilen  -= fill;
    7cbc:	443c      	add	r4, r7
        left = 0;
    7cbe:	4607      	mov	r7, r0
        input += fill;
    7cc0:	444e      	add	r6, r9
        ilen  -= fill;
    7cc2:	3c40      	subs	r4, #64	; 0x40
        left = 0;
    7cc4:	4426      	add	r6, r4
    7cc6:	e005      	b.n	7cd4 <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    7cc8:	4628      	mov	r0, r5
    7cca:	f7fc f871 	bl	3db0 <mbedtls_internal_sha256_process>
    7cce:	2800      	cmp	r0, #0
    7cd0:	d1d7      	bne.n	7c82 <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    7cd2:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    7cd4:	2c3f      	cmp	r4, #63	; 0x3f
    7cd6:	eba6 0104 	sub.w	r1, r6, r4
    7cda:	d8f5      	bhi.n	7cc8 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    7cdc:	2c00      	cmp	r4, #0
    7cde:	d0cf      	beq.n	7c80 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    7ce0:	f105 0028 	add.w	r0, r5, #40	; 0x28
    7ce4:	4622      	mov	r2, r4
    7ce6:	4438      	add	r0, r7
    7ce8:	f7fe f945 	bl	5f76 <memcpy>
    7cec:	e7c8      	b.n	7c80 <mbedtls_sha256_update_ret+0xc>

00007cee <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    7cee:	b570      	push	{r4, r5, r6, lr}
    7cf0:	460d      	mov	r5, r1
    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;

    ctx->buffer[used++] = 0x80;
    7cf2:	2180      	movs	r1, #128	; 0x80
    used = ctx->total[0] & 0x3F;
    7cf4:	6803      	ldr	r3, [r0, #0]
    7cf6:	f100 0628 	add.w	r6, r0, #40	; 0x28
    7cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ctx->buffer[used++] = 0x80;
    7cfe:	1c5a      	adds	r2, r3, #1

    if( used <= 56 )
    7d00:	2a38      	cmp	r2, #56	; 0x38
    ctx->buffer[used++] = 0x80;
    7d02:	4403      	add	r3, r0
{
    7d04:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    7d06:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    if( used <= 56 )
    7d0a:	eb06 0002 	add.w	r0, r6, r2
    7d0e:	d861      	bhi.n	7dd4 <mbedtls_sha256_finish_ret+0xe6>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    7d10:	2100      	movs	r1, #0
    7d12:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    7d16:	f7fe f959 	bl	5fcc <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    7d1a:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    7d1e:	0f5a      	lsrs	r2, r3, #29
    7d20:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );
    7d24:	00db      	lsls	r3, r3, #3
    7d26:	ba12      	rev	r2, r2
    7d28:	ba1b      	rev	r3, r3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    PUT_UINT32_BE( low,  ctx->buffer, 60 );

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7d2a:	4631      	mov	r1, r6
    7d2c:	4620      	mov	r0, r4
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    7d2e:	6622      	str	r2, [r4, #96]	; 0x60
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    7d30:	6663      	str	r3, [r4, #100]	; 0x64
    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7d32:	f7fc f83d 	bl	3db0 <mbedtls_internal_sha256_process>
    7d36:	2800      	cmp	r0, #0
    7d38:	d14b      	bne.n	7dd2 <mbedtls_sha256_finish_ret+0xe4>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    7d3a:	7ae3      	ldrb	r3, [r4, #11]
    7d3c:	702b      	strb	r3, [r5, #0]
    7d3e:	8963      	ldrh	r3, [r4, #10]
    7d40:	706b      	strb	r3, [r5, #1]
    7d42:	68a3      	ldr	r3, [r4, #8]
    7d44:	0a1b      	lsrs	r3, r3, #8
    7d46:	70ab      	strb	r3, [r5, #2]
    7d48:	68a3      	ldr	r3, [r4, #8]
    7d4a:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    7d4c:	7be3      	ldrb	r3, [r4, #15]
    7d4e:	712b      	strb	r3, [r5, #4]
    7d50:	89e3      	ldrh	r3, [r4, #14]
    7d52:	716b      	strb	r3, [r5, #5]
    7d54:	68e3      	ldr	r3, [r4, #12]
    7d56:	0a1b      	lsrs	r3, r3, #8
    7d58:	71ab      	strb	r3, [r5, #6]
    7d5a:	68e3      	ldr	r3, [r4, #12]
    7d5c:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    7d5e:	7ce3      	ldrb	r3, [r4, #19]
    7d60:	722b      	strb	r3, [r5, #8]
    7d62:	8a63      	ldrh	r3, [r4, #18]
    7d64:	726b      	strb	r3, [r5, #9]
    7d66:	6923      	ldr	r3, [r4, #16]
    7d68:	0a1b      	lsrs	r3, r3, #8
    7d6a:	72ab      	strb	r3, [r5, #10]
    7d6c:	6923      	ldr	r3, [r4, #16]
    7d6e:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    7d70:	7de3      	ldrb	r3, [r4, #23]
    7d72:	732b      	strb	r3, [r5, #12]
    7d74:	8ae3      	ldrh	r3, [r4, #22]
    7d76:	736b      	strb	r3, [r5, #13]
    7d78:	6963      	ldr	r3, [r4, #20]
    7d7a:	0a1b      	lsrs	r3, r3, #8
    7d7c:	73ab      	strb	r3, [r5, #14]
    7d7e:	6963      	ldr	r3, [r4, #20]
    7d80:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    7d82:	7ee3      	ldrb	r3, [r4, #27]
    7d84:	742b      	strb	r3, [r5, #16]
    7d86:	8b63      	ldrh	r3, [r4, #26]
    7d88:	746b      	strb	r3, [r5, #17]
    7d8a:	69a3      	ldr	r3, [r4, #24]
    7d8c:	0a1b      	lsrs	r3, r3, #8
    7d8e:	74ab      	strb	r3, [r5, #18]
    7d90:	69a3      	ldr	r3, [r4, #24]
    7d92:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    7d94:	7fe3      	ldrb	r3, [r4, #31]
    7d96:	752b      	strb	r3, [r5, #20]
    7d98:	8be3      	ldrh	r3, [r4, #30]
    7d9a:	756b      	strb	r3, [r5, #21]
    7d9c:	69e3      	ldr	r3, [r4, #28]
    7d9e:	0a1b      	lsrs	r3, r3, #8
    7da0:	75ab      	strb	r3, [r5, #22]
    7da2:	69e3      	ldr	r3, [r4, #28]
    7da4:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    7da6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    7daa:	762b      	strb	r3, [r5, #24]
    7dac:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    7dae:	766b      	strb	r3, [r5, #25]
    7db0:	6a23      	ldr	r3, [r4, #32]
    7db2:	0a1b      	lsrs	r3, r3, #8
    7db4:	76ab      	strb	r3, [r5, #26]
    7db6:	6a23      	ldr	r3, [r4, #32]
    7db8:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    7dba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    7dbc:	b94b      	cbnz	r3, 7dd2 <mbedtls_sha256_finish_ret+0xe4>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    7dbe:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    7dc2:	772b      	strb	r3, [r5, #28]
    7dc4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    7dc6:	776b      	strb	r3, [r5, #29]
    7dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7dca:	0a1b      	lsrs	r3, r3, #8
    7dcc:	77ab      	strb	r3, [r5, #30]
    7dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7dd0:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    7dd2:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    7dd4:	2100      	movs	r1, #0
    7dd6:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    7dda:	f7fe f8f7 	bl	5fcc <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    7dde:	4631      	mov	r1, r6
    7de0:	4620      	mov	r0, r4
    7de2:	f7fb ffe5 	bl	3db0 <mbedtls_internal_sha256_process>
    7de6:	2800      	cmp	r0, #0
    7de8:	d1f3      	bne.n	7dd2 <mbedtls_sha256_finish_ret+0xe4>
        memset( ctx->buffer, 0, 56 );
    7dea:	4601      	mov	r1, r0
    7dec:	2238      	movs	r2, #56	; 0x38
    7dee:	4630      	mov	r0, r6
    7df0:	e791      	b.n	7d16 <mbedtls_sha256_finish_ret+0x28>

00007df2 <z_pm_save_idle_exit>:
	if (pm_idle_exit_notify) {
		pm_system_resume();
	}
#endif

	z_clock_idle_exit();
    7df2:	f7fe b883 	b.w	5efc <z_clock_idle_exit>

00007df6 <k_mem_slab_init>:
{
    7df6:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7df8:	2400      	movs	r4, #0
    7dfa:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7dfc:	ea41 0402 	orr.w	r4, r1, r2
    7e00:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7e04:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    7e08:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7e0a:	d10c      	bne.n	7e26 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    7e0c:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7e0e:	42a3      	cmp	r3, r4
    7e10:	d103      	bne.n	7e1a <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    7e12:	e9c0 0000 	strd	r0, r0, [r0]
}
    7e16:	2000      	movs	r0, #0
}
    7e18:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7e1a:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    7e1c:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    7e1e:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    7e20:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    7e22:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7e24:	e7f3      	b.n	7e0e <k_mem_slab_init+0x18>
		return -EINVAL;
    7e26:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7e2a:	e7f5      	b.n	7e18 <k_mem_slab_init+0x22>

00007e2c <z_impl_k_mutex_init>:
{
    7e2c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    7e2e:	2000      	movs	r0, #0
    7e30:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    7e34:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    7e38:	4770      	bx	lr

00007e3a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7e3a:	4603      	mov	r3, r0
    7e3c:	b920      	cbnz	r0, 7e48 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7e3e:	f3ef 8205 	mrs	r2, IPSR
    7e42:	b90a      	cbnz	r2, 7e48 <z_reschedule_irqlock+0xe>
    7e44:	f7fa b8f0 	b.w	2028 <arch_swap>
    7e48:	f383 8811 	msr	BASEPRI, r3
    7e4c:	f3bf 8f6f 	isb	sy
}
    7e50:	4770      	bx	lr

00007e52 <z_reschedule_unlocked>:
	__asm__ volatile(
    7e52:	f04f 0320 	mov.w	r3, #32
    7e56:	f3ef 8011 	mrs	r0, BASEPRI
    7e5a:	f383 8811 	msr	BASEPRI, r3
    7e5e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7e62:	f7ff bfea 	b.w	7e3a <z_reschedule_irqlock>

00007e66 <k_sched_unlock>:
}
    7e66:	4770      	bx	lr

00007e68 <unpend_thread_no_timeout>:
{
    7e68:	4601      	mov	r1, r0
    7e6a:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    7e6c:	6880      	ldr	r0, [r0, #8]
    7e6e:	f7fc fd51 	bl	4914 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    7e72:	7b4b      	ldrb	r3, [r1, #13]
    7e74:	f023 0302 	bic.w	r3, r3, #2
    7e78:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    7e7a:	2300      	movs	r3, #0
    7e7c:	608b      	str	r3, [r1, #8]
}
    7e7e:	bd08      	pop	{r3, pc}

00007e80 <z_priq_dumb_best>:
{
    7e80:	4603      	mov	r3, r0
	return list->head == list;
    7e82:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e84:	4283      	cmp	r3, r0
    7e86:	d003      	beq.n	7e90 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    7e88:	2800      	cmp	r0, #0
    7e8a:	bf38      	it	cc
    7e8c:	2000      	movcc	r0, #0
    7e8e:	4770      	bx	lr
	struct k_thread *thread = NULL;
    7e90:	2000      	movs	r0, #0
}
    7e92:	4770      	bx	lr

00007e94 <z_ready_thread>:
{
    7e94:	b510      	push	{r4, lr}
    7e96:	f04f 0320 	mov.w	r3, #32
    7e9a:	f3ef 8411 	mrs	r4, BASEPRI
    7e9e:	f383 8811 	msr	BASEPRI, r3
    7ea2:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    7ea6:	f7fc fd6d 	bl	4984 <ready_thread>
	__asm__ volatile(
    7eaa:	f384 8811 	msr	BASEPRI, r4
    7eae:	f3bf 8f6f 	isb	sy
}
    7eb2:	bd10      	pop	{r4, pc}

00007eb4 <z_thread_timeout>:
{
    7eb4:	b570      	push	{r4, r5, r6, lr}
    7eb6:	4604      	mov	r4, r0
	__asm__ volatile(
    7eb8:	f04f 0320 	mov.w	r3, #32
    7ebc:	f3ef 8611 	mrs	r6, BASEPRI
    7ec0:	f383 8811 	msr	BASEPRI, r3
    7ec4:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    7ec8:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    7ecc:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    7ed0:	b113      	cbz	r3, 7ed8 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    7ed2:	4628      	mov	r0, r5
    7ed4:	f7ff ffc8 	bl	7e68 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7ed8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		ready_thread(thread);
    7edc:	4628      	mov	r0, r5
    7ede:	f023 0314 	bic.w	r3, r3, #20
    7ee2:	f804 3c0b 	strb.w	r3, [r4, #-11]
    7ee6:	f7fc fd4d 	bl	4984 <ready_thread>
	__asm__ volatile(
    7eea:	f386 8811 	msr	BASEPRI, r6
    7eee:	f3bf 8f6f 	isb	sy
}
    7ef2:	bd70      	pop	{r4, r5, r6, pc}

00007ef4 <add_to_waitq_locked>:
{
    7ef4:	b538      	push	{r3, r4, r5, lr}
    7ef6:	4604      	mov	r4, r0
    7ef8:	460d      	mov	r5, r1
	unready_thread(thread);
    7efa:	f7fc fe27 	bl	4b4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    7efe:	7b63      	ldrb	r3, [r4, #13]
    7f00:	f043 0302 	orr.w	r3, r3, #2
    7f04:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7f06:	b1c5      	cbz	r5, 7f3a <add_to_waitq_locked+0x46>
	return list->head == list;
    7f08:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    7f0a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7f0c:	429d      	cmp	r5, r3
    7f0e:	bf08      	it	eq
    7f10:	2300      	moveq	r3, #0
    7f12:	2b00      	cmp	r3, #0
    7f14:	bf38      	it	cc
    7f16:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f18:	b183      	cbz	r3, 7f3c <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    7f1a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    7f1e:	f993 200e 	ldrsb.w	r2, [r3, #14]
    7f22:	4291      	cmp	r1, r2
    7f24:	db04      	blt.n	7f30 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    7f26:	686a      	ldr	r2, [r5, #4]
    7f28:	429a      	cmp	r2, r3
    7f2a:	d007      	beq.n	7f3c <add_to_waitq_locked+0x48>
    7f2c:	681b      	ldr	r3, [r3, #0]
    7f2e:	e7f3      	b.n	7f18 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    7f30:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7f32:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    7f36:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7f38:	605c      	str	r4, [r3, #4]
}
    7f3a:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    7f3c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    7f3e:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    7f40:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    7f42:	686b      	ldr	r3, [r5, #4]
    7f44:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7f46:	606c      	str	r4, [r5, #4]
    7f48:	e7f7      	b.n	7f3a <add_to_waitq_locked+0x46>

00007f4a <z_unpend_first_thread>:
{
    7f4a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7f4c:	f04f 0320 	mov.w	r3, #32
    7f50:	f3ef 8211 	mrs	r2, BASEPRI
    7f54:	f383 8811 	msr	BASEPRI, r3
    7f58:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    7f5c:	f7ff ff90 	bl	7e80 <z_priq_dumb_best>
    7f60:	4604      	mov	r4, r0
	__asm__ volatile(
    7f62:	f382 8811 	msr	BASEPRI, r2
    7f66:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    7f6a:	b188      	cbz	r0, 7f90 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    7f6c:	f04f 0320 	mov.w	r3, #32
    7f70:	f3ef 8511 	mrs	r5, BASEPRI
    7f74:	f383 8811 	msr	BASEPRI, r3
    7f78:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    7f7c:	f7ff ff74 	bl	7e68 <unpend_thread_no_timeout>
	__asm__ volatile(
    7f80:	f385 8811 	msr	BASEPRI, r5
    7f84:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    7f88:	f104 0018 	add.w	r0, r4, #24
    7f8c:	f000 f80e 	bl	7fac <z_abort_timeout>
}
    7f90:	4620      	mov	r0, r4
    7f92:	bd38      	pop	{r3, r4, r5, pc}

00007f94 <k_is_in_isr>:
    7f94:	f3ef 8005 	mrs	r0, IPSR
}

bool k_is_in_isr(void)
{
	return arch_is_in_isr();
}
    7f98:	3800      	subs	r0, #0
    7f9a:	bf18      	it	ne
    7f9c:	2001      	movne	r0, #1
    7f9e:	4770      	bx	lr

00007fa0 <z_impl_k_busy_wait>:
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	if (usec_to_wait == 0) {
    7fa0:	b108      	cbz	r0, 7fa6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7fa2:	f7f9 bc7b 	b.w	189c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
}
    7fa6:	4770      	bx	lr

00007fa8 <k_thread_name_get>:
	return (const char *)thread->name;
#else
	ARG_UNUSED(thread);
	return NULL;
#endif /* CONFIG_THREAD_NAME */
}
    7fa8:	2000      	movs	r0, #0
    7faa:	4770      	bx	lr

00007fac <z_abort_timeout>:
{
    7fac:	b510      	push	{r4, lr}
	__asm__ volatile(
    7fae:	f04f 0220 	mov.w	r2, #32
    7fb2:	f3ef 8411 	mrs	r4, BASEPRI
    7fb6:	f382 8811 	msr	BASEPRI, r2
    7fba:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7fbe:	6803      	ldr	r3, [r0, #0]
    7fc0:	b13b      	cbz	r3, 7fd2 <z_abort_timeout+0x26>
			remove_timeout(to);
    7fc2:	f7fc feb3 	bl	4d2c <remove_timeout>
			ret = 0;
    7fc6:	2000      	movs	r0, #0
	__asm__ volatile(
    7fc8:	f384 8811 	msr	BASEPRI, r4
    7fcc:	f3bf 8f6f 	isb	sy
}
    7fd0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7fd2:	f06f 0015 	mvn.w	r0, #21
    7fd6:	e7f7      	b.n	7fc8 <z_abort_timeout+0x1c>

00007fd8 <k_heap_init>:
{
    7fd8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    7fda:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    7fde:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    7fe2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    7fe4:	f7fd bd9d 	b.w	5b22 <sys_heap_init>

00007fe8 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    7fe8:	4770      	bx	lr
