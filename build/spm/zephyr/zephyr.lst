
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010200 <_vector_start>:
   10200:	20001888 	.word	0x20001888
   10204:	000125c9 	.word	0x000125c9
   10208:	00015c01 	.word	0x00015c01
   1020c:	00012629 	.word	0x00012629
   10210:	00012629 	.word	0x00012629
   10214:	00012629 	.word	0x00012629
   10218:	00012629 	.word	0x00012629
   1021c:	00012629 	.word	0x00012629
	...
   1022c:	000123dd 	.word	0x000123dd
   10230:	00012629 	.word	0x00012629
   10234:	00000000 	.word	0x00000000
   10238:	00012385 	.word	0x00012385
   1023c:	00015a2b 	.word	0x00015a2b

00010240 <_irq_vector_table>:
   10240:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10250:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10260:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10270:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10280:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10290:	00012589 00012589 00012589 00012589     .%...%...%...%..
   102a0:	00012589 00012589 00012589 00012589     .%...%...%...%..
   102b0:	00012589 00012589 00012589 00012589     .%...%...%...%..
   102c0:	00012589 00012589 00012589 00012589     .%...%...%...%..
   102d0:	00012589 00012589 00012589 00012589     .%...%...%...%..
   102e0:	00012589 00012589 00012589 00012589     .%...%...%...%..
   102f0:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10300:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10310:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10320:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10330:	00012589 00012589 00012589 00012589     .%...%...%...%..
   10340:	00012589                                .%..

00010344 <_vector_end>:
	...

00010400 <m_firmware_info>:
   10400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   10410:	00007e00 00000001 00010200 00010200     .~..............
   10420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001043c <__aeabi_uldivmod>:
   1043c:	b953      	cbnz	r3, 10454 <__aeabi_uldivmod+0x18>
   1043e:	b94a      	cbnz	r2, 10454 <__aeabi_uldivmod+0x18>
   10440:	2900      	cmp	r1, #0
   10442:	bf08      	it	eq
   10444:	2800      	cmpeq	r0, #0
   10446:	bf1c      	itt	ne
   10448:	f04f 31ff 	movne.w	r1, #4294967295
   1044c:	f04f 30ff 	movne.w	r0, #4294967295
   10450:	f000 b96c 	b.w	1072c <__aeabi_idiv0>
   10454:	f1ad 0c08 	sub.w	ip, sp, #8
   10458:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1045c:	f000 f806 	bl	1046c <__udivmoddi4>
   10460:	f8dd e004 	ldr.w	lr, [sp, #4]
   10464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10468:	b004      	add	sp, #16
   1046a:	4770      	bx	lr

0001046c <__udivmoddi4>:
   1046c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10470:	9d08      	ldr	r5, [sp, #32]
   10472:	4604      	mov	r4, r0
   10474:	4688      	mov	r8, r1
   10476:	2b00      	cmp	r3, #0
   10478:	d17d      	bne.n	10576 <__udivmoddi4+0x10a>
   1047a:	428a      	cmp	r2, r1
   1047c:	4617      	mov	r7, r2
   1047e:	d93f      	bls.n	10500 <__udivmoddi4+0x94>
   10480:	fab2 f282 	clz	r2, r2
   10484:	b142      	cbz	r2, 10498 <__udivmoddi4+0x2c>
   10486:	f1c2 0020 	rsb	r0, r2, #32
   1048a:	4091      	lsls	r1, r2
   1048c:	4097      	lsls	r7, r2
   1048e:	fa24 f000 	lsr.w	r0, r4, r0
   10492:	4094      	lsls	r4, r2
   10494:	ea40 0801 	orr.w	r8, r0, r1
   10498:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1049c:	0c23      	lsrs	r3, r4, #16
   1049e:	fa1f fe87 	uxth.w	lr, r7
   104a2:	fbb8 f6fc 	udiv	r6, r8, ip
   104a6:	fb0c 8116 	mls	r1, ip, r6, r8
   104aa:	fb06 f00e 	mul.w	r0, r6, lr
   104ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   104b2:	4298      	cmp	r0, r3
   104b4:	d905      	bls.n	104c2 <__udivmoddi4+0x56>
   104b6:	18fb      	adds	r3, r7, r3
   104b8:	d202      	bcs.n	104c0 <__udivmoddi4+0x54>
   104ba:	4298      	cmp	r0, r3
   104bc:	f200 8124 	bhi.w	10708 <__udivmoddi4+0x29c>
   104c0:	3e01      	subs	r6, #1
   104c2:	1a19      	subs	r1, r3, r0
   104c4:	b2a3      	uxth	r3, r4
   104c6:	fbb1 f0fc 	udiv	r0, r1, ip
   104ca:	fb0c 1110 	mls	r1, ip, r0, r1
   104ce:	fb00 fe0e 	mul.w	lr, r0, lr
   104d2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   104d6:	45a6      	cmp	lr, r4
   104d8:	d905      	bls.n	104e6 <__udivmoddi4+0x7a>
   104da:	193c      	adds	r4, r7, r4
   104dc:	d202      	bcs.n	104e4 <__udivmoddi4+0x78>
   104de:	45a6      	cmp	lr, r4
   104e0:	f200 810f 	bhi.w	10702 <__udivmoddi4+0x296>
   104e4:	3801      	subs	r0, #1
   104e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   104ea:	eba4 040e 	sub.w	r4, r4, lr
   104ee:	2600      	movs	r6, #0
   104f0:	b11d      	cbz	r5, 104fa <__udivmoddi4+0x8e>
   104f2:	40d4      	lsrs	r4, r2
   104f4:	2300      	movs	r3, #0
   104f6:	e9c5 4300 	strd	r4, r3, [r5]
   104fa:	4631      	mov	r1, r6
   104fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10500:	b902      	cbnz	r2, 10504 <__udivmoddi4+0x98>
   10502:	deff      	udf	#255	; 0xff
   10504:	fab2 f282 	clz	r2, r2
   10508:	2a00      	cmp	r2, #0
   1050a:	d150      	bne.n	105ae <__udivmoddi4+0x142>
   1050c:	1bcb      	subs	r3, r1, r7
   1050e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   10512:	fa1f f887 	uxth.w	r8, r7
   10516:	2601      	movs	r6, #1
   10518:	0c21      	lsrs	r1, r4, #16
   1051a:	fbb3 fcfe 	udiv	ip, r3, lr
   1051e:	fb0e 301c 	mls	r0, lr, ip, r3
   10522:	460b      	mov	r3, r1
   10524:	fb08 f90c 	mul.w	r9, r8, ip
   10528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1052c:	4589      	cmp	r9, r1
   1052e:	d90a      	bls.n	10546 <__udivmoddi4+0xda>
   10530:	1879      	adds	r1, r7, r1
   10532:	bf2c      	ite	cs
   10534:	2301      	movcs	r3, #1
   10536:	2300      	movcc	r3, #0
   10538:	4589      	cmp	r9, r1
   1053a:	d902      	bls.n	10542 <__udivmoddi4+0xd6>
   1053c:	2b00      	cmp	r3, #0
   1053e:	f000 80d9 	beq.w	106f4 <__udivmoddi4+0x288>
   10542:	f10c 3cff 	add.w	ip, ip, #4294967295
   10546:	eba1 0109 	sub.w	r1, r1, r9
   1054a:	b2a3      	uxth	r3, r4
   1054c:	fbb1 f0fe 	udiv	r0, r1, lr
   10550:	fb0e 1110 	mls	r1, lr, r0, r1
   10554:	fb08 f800 	mul.w	r8, r8, r0
   10558:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1055c:	45a0      	cmp	r8, r4
   1055e:	d905      	bls.n	1056c <__udivmoddi4+0x100>
   10560:	193c      	adds	r4, r7, r4
   10562:	d202      	bcs.n	1056a <__udivmoddi4+0xfe>
   10564:	45a0      	cmp	r8, r4
   10566:	f200 80c9 	bhi.w	106fc <__udivmoddi4+0x290>
   1056a:	3801      	subs	r0, #1
   1056c:	eba4 0408 	sub.w	r4, r4, r8
   10570:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   10574:	e7bc      	b.n	104f0 <__udivmoddi4+0x84>
   10576:	428b      	cmp	r3, r1
   10578:	d909      	bls.n	1058e <__udivmoddi4+0x122>
   1057a:	2d00      	cmp	r5, #0
   1057c:	f000 80b1 	beq.w	106e2 <__udivmoddi4+0x276>
   10580:	2600      	movs	r6, #0
   10582:	e9c5 0100 	strd	r0, r1, [r5]
   10586:	4630      	mov	r0, r6
   10588:	4631      	mov	r1, r6
   1058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1058e:	fab3 f683 	clz	r6, r3
   10592:	2e00      	cmp	r6, #0
   10594:	d146      	bne.n	10624 <__udivmoddi4+0x1b8>
   10596:	428b      	cmp	r3, r1
   10598:	f0c0 80a6 	bcc.w	106e8 <__udivmoddi4+0x27c>
   1059c:	4282      	cmp	r2, r0
   1059e:	f240 80a3 	bls.w	106e8 <__udivmoddi4+0x27c>
   105a2:	4630      	mov	r0, r6
   105a4:	2d00      	cmp	r5, #0
   105a6:	d0a8      	beq.n	104fa <__udivmoddi4+0x8e>
   105a8:	e9c5 4800 	strd	r4, r8, [r5]
   105ac:	e7a5      	b.n	104fa <__udivmoddi4+0x8e>
   105ae:	4097      	lsls	r7, r2
   105b0:	f1c2 0320 	rsb	r3, r2, #32
   105b4:	fa01 f002 	lsl.w	r0, r1, r2
   105b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   105bc:	40d9      	lsrs	r1, r3
   105be:	fa24 f303 	lsr.w	r3, r4, r3
   105c2:	fa1f f887 	uxth.w	r8, r7
   105c6:	4094      	lsls	r4, r2
   105c8:	4303      	orrs	r3, r0
   105ca:	fbb1 f0fe 	udiv	r0, r1, lr
   105ce:	0c1e      	lsrs	r6, r3, #16
   105d0:	fb0e 1110 	mls	r1, lr, r0, r1
   105d4:	fb00 fc08 	mul.w	ip, r0, r8
   105d8:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   105dc:	458c      	cmp	ip, r1
   105de:	d909      	bls.n	105f4 <__udivmoddi4+0x188>
   105e0:	1879      	adds	r1, r7, r1
   105e2:	bf2c      	ite	cs
   105e4:	2601      	movcs	r6, #1
   105e6:	2600      	movcc	r6, #0
   105e8:	458c      	cmp	ip, r1
   105ea:	d902      	bls.n	105f2 <__udivmoddi4+0x186>
   105ec:	2e00      	cmp	r6, #0
   105ee:	f000 8093 	beq.w	10718 <__udivmoddi4+0x2ac>
   105f2:	3801      	subs	r0, #1
   105f4:	eba1 010c 	sub.w	r1, r1, ip
   105f8:	b29b      	uxth	r3, r3
   105fa:	fbb1 f6fe 	udiv	r6, r1, lr
   105fe:	fb0e 1116 	mls	r1, lr, r6, r1
   10602:	fb06 fc08 	mul.w	ip, r6, r8
   10606:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1060a:	458c      	cmp	ip, r1
   1060c:	d905      	bls.n	1061a <__udivmoddi4+0x1ae>
   1060e:	1879      	adds	r1, r7, r1
   10610:	d202      	bcs.n	10618 <__udivmoddi4+0x1ac>
   10612:	458c      	cmp	ip, r1
   10614:	f200 8087 	bhi.w	10726 <__udivmoddi4+0x2ba>
   10618:	3e01      	subs	r6, #1
   1061a:	eba1 030c 	sub.w	r3, r1, ip
   1061e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   10622:	e779      	b.n	10518 <__udivmoddi4+0xac>
   10624:	f1c6 0720 	rsb	r7, r6, #32
   10628:	fa03 f406 	lsl.w	r4, r3, r6
   1062c:	fa02 fc06 	lsl.w	ip, r2, r6
   10630:	fa01 fe06 	lsl.w	lr, r1, r6
   10634:	40fa      	lsrs	r2, r7
   10636:	fa20 f807 	lsr.w	r8, r0, r7
   1063a:	40f9      	lsrs	r1, r7
   1063c:	fa00 f306 	lsl.w	r3, r0, r6
   10640:	4322      	orrs	r2, r4
   10642:	ea48 040e 	orr.w	r4, r8, lr
   10646:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1064a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1064e:	fa1f f982 	uxth.w	r9, r2
   10652:	fbb1 faf8 	udiv	sl, r1, r8
   10656:	fb08 111a 	mls	r1, r8, sl, r1
   1065a:	fb0a f009 	mul.w	r0, sl, r9
   1065e:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   10662:	4570      	cmp	r0, lr
   10664:	d90a      	bls.n	1067c <__udivmoddi4+0x210>
   10666:	eb12 0e0e 	adds.w	lr, r2, lr
   1066a:	bf2c      	ite	cs
   1066c:	2101      	movcs	r1, #1
   1066e:	2100      	movcc	r1, #0
   10670:	4570      	cmp	r0, lr
   10672:	d901      	bls.n	10678 <__udivmoddi4+0x20c>
   10674:	2900      	cmp	r1, #0
   10676:	d052      	beq.n	1071e <__udivmoddi4+0x2b2>
   10678:	f10a 3aff 	add.w	sl, sl, #4294967295
   1067c:	ebae 0e00 	sub.w	lr, lr, r0
   10680:	b2a4      	uxth	r4, r4
   10682:	fbbe f0f8 	udiv	r0, lr, r8
   10686:	fb08 ee10 	mls	lr, r8, r0, lr
   1068a:	fb00 f909 	mul.w	r9, r0, r9
   1068e:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   10692:	45f1      	cmp	r9, lr
   10694:	d905      	bls.n	106a2 <__udivmoddi4+0x236>
   10696:	eb12 0e0e 	adds.w	lr, r2, lr
   1069a:	d201      	bcs.n	106a0 <__udivmoddi4+0x234>
   1069c:	45f1      	cmp	r9, lr
   1069e:	d838      	bhi.n	10712 <__udivmoddi4+0x2a6>
   106a0:	3801      	subs	r0, #1
   106a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   106a6:	ebae 0e09 	sub.w	lr, lr, r9
   106aa:	fba0 890c 	umull	r8, r9, r0, ip
   106ae:	45ce      	cmp	lr, r9
   106b0:	4641      	mov	r1, r8
   106b2:	464c      	mov	r4, r9
   106b4:	d302      	bcc.n	106bc <__udivmoddi4+0x250>
   106b6:	d106      	bne.n	106c6 <__udivmoddi4+0x25a>
   106b8:	4543      	cmp	r3, r8
   106ba:	d204      	bcs.n	106c6 <__udivmoddi4+0x25a>
   106bc:	3801      	subs	r0, #1
   106be:	ebb8 010c 	subs.w	r1, r8, ip
   106c2:	eb69 0402 	sbc.w	r4, r9, r2
   106c6:	b315      	cbz	r5, 1070e <__udivmoddi4+0x2a2>
   106c8:	1a5a      	subs	r2, r3, r1
   106ca:	eb6e 0e04 	sbc.w	lr, lr, r4
   106ce:	40f2      	lsrs	r2, r6
   106d0:	fa0e f707 	lsl.w	r7, lr, r7
   106d4:	fa2e f306 	lsr.w	r3, lr, r6
   106d8:	2600      	movs	r6, #0
   106da:	4317      	orrs	r7, r2
   106dc:	e9c5 7300 	strd	r7, r3, [r5]
   106e0:	e70b      	b.n	104fa <__udivmoddi4+0x8e>
   106e2:	462e      	mov	r6, r5
   106e4:	4628      	mov	r0, r5
   106e6:	e708      	b.n	104fa <__udivmoddi4+0x8e>
   106e8:	1a84      	subs	r4, r0, r2
   106ea:	eb61 0103 	sbc.w	r1, r1, r3
   106ee:	2001      	movs	r0, #1
   106f0:	4688      	mov	r8, r1
   106f2:	e757      	b.n	105a4 <__udivmoddi4+0x138>
   106f4:	f1ac 0c02 	sub.w	ip, ip, #2
   106f8:	4439      	add	r1, r7
   106fa:	e724      	b.n	10546 <__udivmoddi4+0xda>
   106fc:	3802      	subs	r0, #2
   106fe:	443c      	add	r4, r7
   10700:	e734      	b.n	1056c <__udivmoddi4+0x100>
   10702:	3802      	subs	r0, #2
   10704:	443c      	add	r4, r7
   10706:	e6ee      	b.n	104e6 <__udivmoddi4+0x7a>
   10708:	3e02      	subs	r6, #2
   1070a:	443b      	add	r3, r7
   1070c:	e6d9      	b.n	104c2 <__udivmoddi4+0x56>
   1070e:	462e      	mov	r6, r5
   10710:	e6f3      	b.n	104fa <__udivmoddi4+0x8e>
   10712:	3802      	subs	r0, #2
   10714:	4496      	add	lr, r2
   10716:	e7c4      	b.n	106a2 <__udivmoddi4+0x236>
   10718:	3802      	subs	r0, #2
   1071a:	4439      	add	r1, r7
   1071c:	e76a      	b.n	105f4 <__udivmoddi4+0x188>
   1071e:	f1aa 0a02 	sub.w	sl, sl, #2
   10722:	4496      	add	lr, r2
   10724:	e7aa      	b.n	1067c <__udivmoddi4+0x210>
   10726:	3e02      	subs	r6, #2
   10728:	4439      	add	r1, r7
   1072a:	e776      	b.n	1061a <__udivmoddi4+0x1ae>

0001072c <__aeabi_idiv0>:
   1072c:	4770      	bx	lr
   1072e:	bf00      	nop

00010730 <__gnu_cmse_nonsecure_call>:
   10730:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
   10734:	4627      	mov	r7, r4
   10736:	46a0      	mov	r8, r4
   10738:	46a1      	mov	r9, r4
   1073a:	46a2      	mov	sl, r4
   1073c:	46a3      	mov	fp, r4
   1073e:	46a4      	mov	ip, r4
   10740:	ed2d 8b10 	vpush	{d8-d15}
   10744:	f04f 0500 	mov.w	r5, #0
   10748:	ec45 5b18 	vmov	d8, r5, r5
   1074c:	ec45 5a19 	vmov	s18, s19, r5, r5
   10750:	ec45 5a1a 	vmov	s20, s21, r5, r5
   10754:	ec45 5a1b 	vmov	s22, s23, r5, r5
   10758:	ec45 5a1c 	vmov	s24, s25, r5, r5
   1075c:	ec45 5a1d 	vmov	s26, s27, r5, r5
   10760:	ec45 5a1e 	vmov	s28, s29, r5, r5
   10764:	ec45 5a1f 	vmov	s30, s31, r5, r5
   10768:	eef1 5a10 	vmrs	r5, fpscr
   1076c:	f64f 7660 	movw	r6, #65376	; 0xff60
   10770:	f6c0 76ff 	movt	r6, #4095	; 0xfff
   10774:	4035      	ands	r5, r6
   10776:	eee1 5a10 	vmsr	fpscr, r5
   1077a:	f384 8800 	msr	CPSR_f, r4
   1077e:	4625      	mov	r5, r4
   10780:	4626      	mov	r6, r4
   10782:	47a4      	blxns	r4
   10784:	ecbd 8b10 	vpop	{d8-d15}
   10788:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0001078c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1078c:	680b      	ldr	r3, [r1, #0]
   1078e:	3301      	adds	r3, #1
   10790:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10792:	4b01      	ldr	r3, [pc, #4]	; (10798 <char_out+0xc>)
   10794:	681b      	ldr	r3, [r3, #0]
   10796:	4718      	bx	r3
   10798:	20000000 	.word	0x20000000

0001079c <__printk_hook_install>:
	_char_out = fn;
   1079c:	4b01      	ldr	r3, [pc, #4]	; (107a4 <__printk_hook_install+0x8>)
   1079e:	6018      	str	r0, [r3, #0]
}
   107a0:	4770      	bx	lr
   107a2:	bf00      	nop
   107a4:	20000000 	.word	0x20000000

000107a8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   107a8:	b507      	push	{r0, r1, r2, lr}
   107aa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   107ac:	2100      	movs	r1, #0
{
   107ae:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   107b0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   107b2:	4803      	ldr	r0, [pc, #12]	; (107c0 <vprintk+0x18>)
   107b4:	a901      	add	r1, sp, #4
   107b6:	f000 f8ed 	bl	10994 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   107ba:	b003      	add	sp, #12
   107bc:	f85d fb04 	ldr.w	pc, [sp], #4
   107c0:	0001078d 	.word	0x0001078d

000107c4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   107c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107c8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
   107cc:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   107ce:	f019 0808 	ands.w	r8, r9, #8
{
   107d2:	4693      	mov	fp, r2
	if (processing) {
   107d4:	d00e      	beq.n	107f4 <process_event+0x30>
		if (evt == EVT_COMPLETE) {
   107d6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   107d8:	bf0c      	ite	eq
   107da:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   107de:	f049 0920 	orrne.w	r9, r9, #32
   107e2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   107e6:	f38b 8811 	msr	BASEPRI, fp
   107ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   107ee:	b003      	add	sp, #12
   107f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				transit(mgr, transition_complete);
   107f4:	f8df a198 	ldr.w	sl, [pc, #408]	; 10990 <process_event+0x1cc>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   107f8:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   107fc:	2902      	cmp	r1, #2
   107fe:	d107      	bne.n	10810 <process_event+0x4c>
			evt = process_recheck(mgr);
   10800:	4620      	mov	r0, r4
   10802:	f004 fe4e 	bl	154a2 <process_recheck>
		if (evt == EVT_NOP) {
   10806:	2800      	cmp	r0, #0
   10808:	d0ed      	beq.n	107e6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   1080a:	2801      	cmp	r0, #1
   1080c:	8b23      	ldrh	r3, [r4, #24]
   1080e:	d14d      	bne.n	108ac <process_event+0xe8>
			res = mgr->last_res;
   10810:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10812:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   10814:	2f00      	cmp	r7, #0
   10816:	da15      	bge.n	10844 <process_event+0x80>
		*clients = mgr->clients;
   10818:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1081a:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   1081e:	e9c4 8800 	strd	r8, r8, [r4]
   10822:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   10826:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   10828:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1082a:	8b21      	ldrh	r1, [r4, #24]
   1082c:	f001 0207 	and.w	r2, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10830:	454a      	cmp	r2, r9
   10832:	d002      	beq.n	1083a <process_event+0x76>
		if (do_monitors
   10834:	68a3      	ldr	r3, [r4, #8]
   10836:	2b00      	cmp	r3, #0
   10838:	d159      	bne.n	108ee <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
   1083a:	b90d      	cbnz	r5, 10840 <process_event+0x7c>
		    || (transit != NULL)) {
   1083c:	2e00      	cmp	r6, #0
   1083e:	d071      	beq.n	10924 <process_event+0x160>
   10840:	2300      	movs	r3, #0
   10842:	e055      	b.n	108f0 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10844:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10848:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1084a:	2a01      	cmp	r2, #1
   1084c:	d81f      	bhi.n	1088e <process_event+0xca>
		*clients = mgr->clients;
   1084e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   10852:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   10854:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
   10856:	b289      	uxth	r1, r1
	list->tail = NULL;
   10858:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   1085c:	d10c      	bne.n	10878 <process_event+0xb4>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1085e:	2d00      	cmp	r5, #0
   10860:	462b      	mov	r3, r5
   10862:	bf38      	it	cc
   10864:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10866:	b12b      	cbz	r3, 10874 <process_event+0xb0>
				mgr->refs += 1U;
   10868:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1086a:	681b      	ldr	r3, [r3, #0]
   1086c:	3201      	adds	r2, #1
   1086e:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10870:	2b00      	cmp	r3, #0
   10872:	d1f8      	bne.n	10866 <process_event+0xa2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10874:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
   10878:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1087a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1087c:	f004 fe11 	bl	154a2 <process_recheck>
   10880:	2800      	cmp	r0, #0
   10882:	d0d1      	beq.n	10828 <process_event+0x64>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10884:	8b23      	ldrh	r3, [r4, #24]
   10886:	f043 0320 	orr.w	r3, r3, #32
   1088a:	8323      	strh	r3, [r4, #24]
   1088c:	e7cc      	b.n	10828 <process_event+0x64>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1088e:	2b04      	cmp	r3, #4
   10890:	d10a      	bne.n	108a8 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10892:	f021 0107 	bic.w	r1, r1, #7
   10896:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
   10898:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   1089a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1089c:	f004 fe01 	bl	154a2 <process_recheck>
   108a0:	b110      	cbz	r0, 108a8 <process_event+0xe4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   108a2:	f041 0120 	orr.w	r1, r1, #32
   108a6:	8321      	strh	r1, [r4, #24]
   108a8:	2500      	movs	r5, #0
   108aa:	e7bd      	b.n	10828 <process_event+0x64>
		} else if (evt == EVT_START) {
   108ac:	2803      	cmp	r0, #3
   108ae:	d109      	bne.n	108c4 <process_event+0x100>
			transit = mgr->transitions->start;
   108b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   108b6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108b8:	f043 0306 	orr.w	r3, r3, #6
}
   108bc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   108be:	8323      	strh	r3, [r4, #24]
		res = 0;
   108c0:	462f      	mov	r7, r5
   108c2:	e7b2      	b.n	1082a <process_event+0x66>
		} else if (evt == EVT_STOP) {
   108c4:	2804      	cmp	r0, #4
   108c6:	d106      	bne.n	108d6 <process_event+0x112>
			transit = mgr->transitions->stop;
   108c8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   108ce:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108d0:	f043 0304 	orr.w	r3, r3, #4
   108d4:	e7f2      	b.n	108bc <process_event+0xf8>
		} else if (evt == EVT_RESET) {
   108d6:	2805      	cmp	r0, #5
   108d8:	d106      	bne.n	108e8 <process_event+0x124>
			transit = mgr->transitions->reset;
   108da:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108dc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   108e0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   108e2:	f043 0305 	orr.w	r3, r3, #5
   108e6:	e7e9      	b.n	108bc <process_event+0xf8>
   108e8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   108ea:	462e      	mov	r6, r5
   108ec:	e7e8      	b.n	108c0 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
   108ee:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   108f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   108f4:	8321      	strh	r1, [r4, #24]
   108f6:	f38b 8811 	msr	BASEPRI, fp
   108fa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   108fe:	bb03      	cbnz	r3, 10942 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
   10900:	2d00      	cmp	r5, #0
   10902:	d134      	bne.n	1096e <process_event+0x1aa>
			if (transit != NULL) {
   10904:	b116      	cbz	r6, 1090c <process_event+0x148>
				transit(mgr, transition_complete);
   10906:	4651      	mov	r1, sl
   10908:	4620      	mov	r0, r4
   1090a:	47b0      	blx	r6
	__asm__ volatile(
   1090c:	f04f 0320 	mov.w	r3, #32
   10910:	f3ef 8b11 	mrs	fp, BASEPRI
   10914:	f383 8811 	msr	BASEPRI, r3
   10918:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   1091c:	8b23      	ldrh	r3, [r4, #24]
   1091e:	f023 0308 	bic.w	r3, r3, #8
   10922:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10924:	8b23      	ldrh	r3, [r4, #24]
   10926:	06da      	lsls	r2, r3, #27
   10928:	d52a      	bpl.n	10980 <process_event+0x1bc>
			evt = EVT_COMPLETE;
   1092a:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1092c:	f023 0310 	bic.w	r3, r3, #16
   10930:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   10932:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   10936:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   1093a:	2900      	cmp	r1, #0
   1093c:	f47f af5e 	bne.w	107fc <process_event+0x38>
out:
   10940:	e751      	b.n	107e6 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10942:	68a1      	ldr	r1, [r4, #8]
   10944:	2900      	cmp	r1, #0
   10946:	d0db      	beq.n	10900 <process_event+0x13c>
	return node->next;
   10948:	680b      	ldr	r3, [r1, #0]
   1094a:	2b00      	cmp	r3, #0
   1094c:	bf38      	it	cc
   1094e:	2300      	movcc	r3, #0
   10950:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   10952:	4620      	mov	r0, r4
   10954:	463b      	mov	r3, r7
   10956:	f8d1 b004 	ldr.w	fp, [r1, #4]
   1095a:	9201      	str	r2, [sp, #4]
   1095c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1095e:	9a01      	ldr	r2, [sp, #4]
   10960:	f1b9 0f00 	cmp.w	r9, #0
   10964:	d0cc      	beq.n	10900 <process_event+0x13c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10966:	4649      	mov	r1, r9
   10968:	f8d9 3000 	ldr.w	r3, [r9]
   1096c:	e7ed      	b.n	1094a <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1096e:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10970:	463b      	mov	r3, r7
   10972:	4620      	mov	r0, r4
   10974:	9201      	str	r2, [sp, #4]
   10976:	682d      	ldr	r5, [r5, #0]
   10978:	f004 fdaf 	bl	154da <notify_one>
	while (!sys_slist_is_empty(list)) {
   1097c:	9a01      	ldr	r2, [sp, #4]
   1097e:	e7bf      	b.n	10900 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10980:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10984:	bf1e      	ittt	ne
   10986:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   1098a:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1098c:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   1098e:	e7d0      	b.n	10932 <process_event+0x16e>
   10990:	00015507 	.word	0x00015507

00010994 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10998:	4688      	mov	r8, r1
   1099a:	4691      	mov	r9, r2
   1099c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   1099e:	2500      	movs	r5, #0
{
   109a0:	b0a5      	sub	sp, #148	; 0x94
   109a2:	9003      	str	r0, [sp, #12]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   109a4:	f899 0000 	ldrb.w	r0, [r9]
   109a8:	b910      	cbnz	r0, 109b0 <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   109aa:	4628      	mov	r0, r5
   109ac:	f000 be18 	b.w	115e0 <cbvprintf+0xc4c>
		if (*fp != '%') {
   109b0:	f109 0301 	add.w	r3, r9, #1
   109b4:	2825      	cmp	r0, #37	; 0x25
   109b6:	9309      	str	r3, [sp, #36]	; 0x24
   109b8:	d007      	beq.n	109ca <cbvprintf+0x36>
			OUTC(*fp++);
   109ba:	4641      	mov	r1, r8
			OUTC('%');
   109bc:	9b03      	ldr	r3, [sp, #12]
   109be:	4798      	blx	r3
   109c0:	2800      	cmp	r0, #0
   109c2:	f2c0 860d 	blt.w	115e0 <cbvprintf+0xc4c>
   109c6:	3501      	adds	r5, #1
		if (bps == NULL) {
   109c8:	e245      	b.n	10e56 <cbvprintf+0x4c2>
		} state = {
   109ca:	2218      	movs	r2, #24
   109cc:	2100      	movs	r1, #0
   109ce:	a816      	add	r0, sp, #88	; 0x58
   109d0:	f005 f9b7 	bl	15d42 <memset>
	if (*sp == '%') {
   109d4:	f899 3001 	ldrb.w	r3, [r9, #1]
   109d8:	2b25      	cmp	r3, #37	; 0x25
   109da:	d079      	beq.n	10ad0 <cbvprintf+0x13c>
   109dc:	2200      	movs	r2, #0
   109de:	4616      	mov	r6, r2
   109e0:	4696      	mov	lr, r2
   109e2:	4617      	mov	r7, r2
   109e4:	4694      	mov	ip, r2
   109e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   109e8:	4601      	mov	r1, r0
		switch (*sp) {
   109ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   109ee:	2b2b      	cmp	r3, #43	; 0x2b
   109f0:	f000 809e 	beq.w	10b30 <cbvprintf+0x19c>
   109f4:	f200 8095 	bhi.w	10b22 <cbvprintf+0x18e>
   109f8:	2b20      	cmp	r3, #32
   109fa:	f000 809b 	beq.w	10b34 <cbvprintf+0x1a0>
   109fe:	2b23      	cmp	r3, #35	; 0x23
   10a00:	f000 809b 	beq.w	10b3a <cbvprintf+0x1a6>
   10a04:	f1bc 0f00 	cmp.w	ip, #0
   10a08:	d005      	beq.n	10a16 <cbvprintf+0x82>
   10a0a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10a0e:	f040 0004 	orr.w	r0, r0, #4
   10a12:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10a16:	b12f      	cbz	r7, 10a24 <cbvprintf+0x90>
   10a18:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10a1c:	f040 0008 	orr.w	r0, r0, #8
   10a20:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10a24:	f1be 0f00 	cmp.w	lr, #0
   10a28:	d005      	beq.n	10a36 <cbvprintf+0xa2>
   10a2a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10a2e:	f040 0010 	orr.w	r0, r0, #16
   10a32:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10a36:	b12e      	cbz	r6, 10a44 <cbvprintf+0xb0>
   10a38:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10a3c:	f040 0020 	orr.w	r0, r0, #32
   10a40:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10a44:	b12a      	cbz	r2, 10a52 <cbvprintf+0xbe>
   10a46:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10a4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   10a4e:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (conv->flag_zero && conv->flag_dash) {
   10a52:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10a56:	f002 0044 	and.w	r0, r2, #68	; 0x44
   10a5a:	2844      	cmp	r0, #68	; 0x44
   10a5c:	d103      	bne.n	10a66 <cbvprintf+0xd2>
		conv->flag_zero = false;
   10a5e:	f36f 1286 	bfc	r2, #6, #1
   10a62:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	conv->width_present = true;
   10a66:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
   10a6a:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   10a6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10a70:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	if (*sp == '*') {
   10a74:	d17c      	bne.n	10b70 <cbvprintf+0x1dc>
		conv->width_star = true;
   10a76:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10a7a:	1c4b      	adds	r3, r1, #1
   10a7c:	f042 0201 	orr.w	r2, r2, #1
   10a80:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	conv->prec_present = (*sp == '.');
   10a84:	781a      	ldrb	r2, [r3, #0]
   10a86:	2a2e      	cmp	r2, #46	; 0x2e
   10a88:	bf0c      	ite	eq
   10a8a:	2101      	moveq	r1, #1
   10a8c:	2100      	movne	r1, #0
   10a8e:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10a92:	f361 0241 	bfi	r2, r1, #1, #1
   10a96:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	if (!conv->prec_present) {
   10a9a:	d175      	bne.n	10b88 <cbvprintf+0x1f4>
	if (*sp == '*') {
   10a9c:	785a      	ldrb	r2, [r3, #1]
   10a9e:	2a2a      	cmp	r2, #42	; 0x2a
   10aa0:	d06b      	beq.n	10b7a <cbvprintf+0x1e6>
	size_t val = 0;
   10aa2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   10aa4:	260a      	movs	r6, #10
   10aa6:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10aa8:	4618      	mov	r0, r3
   10aaa:	f810 2b01 	ldrb.w	r2, [r0], #1
   10aae:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10ab2:	2f09      	cmp	r7, #9
   10ab4:	f240 80aa 	bls.w	10c0c <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
   10ab8:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
	conv->prec_value = prec;
   10abc:	911a      	str	r1, [sp, #104]	; 0x68
	conv->unsupported |= ((conv->prec_value < 0)
   10abe:	f3c2 0040 	ubfx	r0, r2, #1, #1
   10ac2:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   10ac6:	f361 0241 	bfi	r2, r1, #1, #1
   10aca:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
   10ace:	e05b      	b.n	10b88 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
   10ad0:	f109 0202 	add.w	r2, r9, #2
   10ad4:	9209      	str	r2, [sp, #36]	; 0x24
   10ad6:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
		if (conv->width_star) {
   10ada:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10ade:	07de      	lsls	r6, r3, #31
   10ae0:	f140 816f 	bpl.w	10dc2 <cbvprintf+0x42e>
			width = va_arg(ap, int);
   10ae4:	f854 2b04 	ldr.w	r2, [r4], #4
			if (width < 0) {
   10ae8:	2a00      	cmp	r2, #0
			width = va_arg(ap, int);
   10aea:	9208      	str	r2, [sp, #32]
			if (width < 0) {
   10aec:	da08      	bge.n	10b00 <cbvprintf+0x16c>
				conv->flag_dash = true;
   10aee:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10af2:	f042 0204 	orr.w	r2, r2, #4
   10af6:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
				width = -width;
   10afa:	9a08      	ldr	r2, [sp, #32]
   10afc:	4252      	negs	r2, r2
		int width = -1;
   10afe:	9208      	str	r2, [sp, #32]
		if (conv->prec_star) {
   10b00:	0758      	lsls	r0, r3, #29
   10b02:	f140 8166 	bpl.w	10dd2 <cbvprintf+0x43e>
			int arg = va_arg(ap, int);
   10b06:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   10b0a:	2f00      	cmp	r7, #0
   10b0c:	f280 8165 	bge.w	10dda <cbvprintf+0x446>
				conv->prec_present = false;
   10b10:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10b14:	f36f 0341 	bfc	r3, #1, #1
   10b18:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		int precision = -1;
   10b1c:	f04f 37ff 	mov.w	r7, #4294967295
   10b20:	e15b      	b.n	10dda <cbvprintf+0x446>
		switch (*sp) {
   10b22:	2b2d      	cmp	r3, #45	; 0x2d
   10b24:	d00b      	beq.n	10b3e <cbvprintf+0x1aa>
   10b26:	2b30      	cmp	r3, #48	; 0x30
   10b28:	f47f af6c 	bne.w	10a04 <cbvprintf+0x70>
			conv->flag_zero = true;
   10b2c:	2201      	movs	r2, #1
	} while (loop);
   10b2e:	e75b      	b.n	109e8 <cbvprintf+0x54>
			conv->flag_plus = true;
   10b30:	2701      	movs	r7, #1
   10b32:	e759      	b.n	109e8 <cbvprintf+0x54>
			conv->flag_space = true;
   10b34:	f04f 0e01 	mov.w	lr, #1
   10b38:	e756      	b.n	109e8 <cbvprintf+0x54>
			conv->flag_hash = true;
   10b3a:	2601      	movs	r6, #1
   10b3c:	e754      	b.n	109e8 <cbvprintf+0x54>
		switch (*sp) {
   10b3e:	f04f 0c01 	mov.w	ip, #1
   10b42:	e751      	b.n	109e8 <cbvprintf+0x54>
		val = 10U * val + *sp++ - '0';
   10b44:	4633      	mov	r3, r6
   10b46:	fb0c 0202 	mla	r2, ip, r2, r0
   10b4a:	3a30      	subs	r2, #48	; 0x30
   10b4c:	461e      	mov	r6, r3
   10b4e:	f816 0b01 	ldrb.w	r0, [r6], #1
   10b52:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   10b56:	2f09      	cmp	r7, #9
   10b58:	d9f4      	bls.n	10b44 <cbvprintf+0x1b0>
	if (sp != wp) {
   10b5a:	4299      	cmp	r1, r3
   10b5c:	d092      	beq.n	10a84 <cbvprintf+0xf0>
		conv->unsupported |= ((conv->width_value < 0)
   10b5e:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
		conv->width_value = width;
   10b62:	9219      	str	r2, [sp, #100]	; 0x64
				      || (width != (size_t)conv->width_value));
   10b64:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   10b66:	f362 0141 	bfi	r1, r2, #1, #1
   10b6a:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
   10b6e:	e789      	b.n	10a84 <cbvprintf+0xf0>
   10b70:	460b      	mov	r3, r1
	size_t val = 0;
   10b72:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10b74:	f04f 0c0a 	mov.w	ip, #10
   10b78:	e7e8      	b.n	10b4c <cbvprintf+0x1b8>
		conv->prec_star = true;
   10b7a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
		return ++sp;
   10b7e:	3302      	adds	r3, #2
		conv->prec_star = true;
   10b80:	f042 0204 	orr.w	r2, r2, #4
   10b84:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
	switch (*sp) {
   10b88:	4619      	mov	r1, r3
   10b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
   10b8e:	2a6c      	cmp	r2, #108	; 0x6c
   10b90:	d05c      	beq.n	10c4c <cbvprintf+0x2b8>
   10b92:	d840      	bhi.n	10c16 <cbvprintf+0x282>
   10b94:	2a68      	cmp	r2, #104	; 0x68
   10b96:	d046      	beq.n	10c26 <cbvprintf+0x292>
   10b98:	2a6a      	cmp	r2, #106	; 0x6a
   10b9a:	d061      	beq.n	10c60 <cbvprintf+0x2cc>
   10b9c:	2a4c      	cmp	r2, #76	; 0x4c
   10b9e:	d067      	beq.n	10c70 <cbvprintf+0x2dc>
   10ba0:	4619      	mov	r1, r3
	conv->specifier = *sp++;
   10ba2:	460b      	mov	r3, r1
   10ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   10ba8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   10baa:	9309      	str	r3, [sp, #36]	; 0x24
   10bac:	f88d 2063 	strb.w	r2, [sp, #99]	; 0x63
	switch (conv->specifier) {
   10bb0:	f200 80df 	bhi.w	10d72 <cbvprintf+0x3de>
   10bb4:	2a57      	cmp	r2, #87	; 0x57
   10bb6:	d868      	bhi.n	10c8a <cbvprintf+0x2f6>
   10bb8:	2a41      	cmp	r2, #65	; 0x41
   10bba:	d004      	beq.n	10bc6 <cbvprintf+0x232>
   10bbc:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   10bc0:	2b02      	cmp	r3, #2
   10bc2:	f200 80d6 	bhi.w	10d72 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
   10bc6:	2104      	movs	r1, #4
   10bc8:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			|| (conv->specifier == 'A');
   10bcc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   10bd0:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   10bd4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   10bd8:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   10bdc:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
			|| (conv->specifier == 'A');
   10be0:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   10be4:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   10be8:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   10bea:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		conv->specifier_a = (conv->specifier == 'a')
   10bee:	f88d 1061 	strb.w	r1, [sp, #97]	; 0x61
		if (conv->specifier_a
   10bf2:	b2cb      	uxtb	r3, r1
   10bf4:	f100 80e3 	bmi.w	10dbe <cbvprintf+0x42a>
		if (conv->length_mod == LENGTH_L) {
   10bf8:	f003 0278 	and.w	r2, r3, #120	; 0x78
   10bfc:	2a18      	cmp	r2, #24
   10bfe:	f040 80b5 	bne.w	10d6c <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
   10c02:	f36f 03c6 	bfc	r3, #3, #4
   10c06:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
   10c0a:	e09c      	b.n	10d46 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
   10c0c:	fb06 2101 	mla	r1, r6, r1, r2
   10c10:	4603      	mov	r3, r0
   10c12:	3930      	subs	r1, #48	; 0x30
   10c14:	e748      	b.n	10aa8 <cbvprintf+0x114>
	switch (*sp) {
   10c16:	2a74      	cmp	r2, #116	; 0x74
   10c18:	d026      	beq.n	10c68 <cbvprintf+0x2d4>
   10c1a:	2a7a      	cmp	r2, #122	; 0x7a
   10c1c:	d1c0      	bne.n	10ba0 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
   10c1e:	2206      	movs	r2, #6
   10c20:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10c24:	e00d      	b.n	10c42 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
   10c26:	785a      	ldrb	r2, [r3, #1]
   10c28:	2a68      	cmp	r2, #104	; 0x68
   10c2a:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10c2e:	d106      	bne.n	10c3e <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
   10c30:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10c32:	f361 02c6 	bfi	r2, r1, #3, #4
   10c36:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
			++sp;
   10c3a:	1c99      	adds	r1, r3, #2
   10c3c:	e7b1      	b.n	10ba2 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
   10c3e:	4613      	mov	r3, r2
   10c40:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   10c42:	f362 03c6 	bfi	r3, r2, #3, #4
   10c46:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
		break;
   10c4a:	e7aa      	b.n	10ba2 <cbvprintf+0x20e>
		if (*++sp == 'l') {
   10c4c:	785a      	ldrb	r2, [r3, #1]
   10c4e:	2a6c      	cmp	r2, #108	; 0x6c
   10c50:	f89d 2061 	ldrb.w	r2, [sp, #97]	; 0x61
   10c54:	d101      	bne.n	10c5a <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
   10c56:	2104      	movs	r1, #4
   10c58:	e7eb      	b.n	10c32 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
   10c5a:	4613      	mov	r3, r2
   10c5c:	2203      	movs	r2, #3
   10c5e:	e7f0      	b.n	10c42 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   10c60:	2205      	movs	r2, #5
   10c62:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10c66:	e7ec      	b.n	10c42 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   10c68:	2207      	movs	r2, #7
   10c6a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10c6e:	e7e8      	b.n	10c42 <cbvprintf+0x2ae>
		conv->unsupported = true;
   10c70:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   10c74:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10c78:	f023 0302 	bic.w	r3, r3, #2
   10c7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10c80:	f043 0302 	orr.w	r3, r3, #2
   10c84:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
		break;
   10c88:	e78b      	b.n	10ba2 <cbvprintf+0x20e>
   10c8a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   10c8e:	2b20      	cmp	r3, #32
   10c90:	d86f      	bhi.n	10d72 <cbvprintf+0x3de>
   10c92:	a101      	add	r1, pc, #4	; (adr r1, 10c98 <cbvprintf+0x304>)
   10c94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   10c98:	00010d4b 	.word	0x00010d4b
   10c9c:	00010d73 	.word	0x00010d73
   10ca0:	00010d73 	.word	0x00010d73
   10ca4:	00010d73 	.word	0x00010d73
   10ca8:	00010d73 	.word	0x00010d73
   10cac:	00010d73 	.word	0x00010d73
   10cb0:	00010d73 	.word	0x00010d73
   10cb4:	00010d73 	.word	0x00010d73
   10cb8:	00010d73 	.word	0x00010d73
   10cbc:	00010bc7 	.word	0x00010bc7
   10cc0:	00010d73 	.word	0x00010d73
   10cc4:	00010d4b 	.word	0x00010d4b
   10cc8:	00010d1d 	.word	0x00010d1d
   10ccc:	00010bc7 	.word	0x00010bc7
   10cd0:	00010bc7 	.word	0x00010bc7
   10cd4:	00010bc7 	.word	0x00010bc7
   10cd8:	00010d73 	.word	0x00010d73
   10cdc:	00010d1d 	.word	0x00010d1d
   10ce0:	00010d73 	.word	0x00010d73
   10ce4:	00010d73 	.word	0x00010d73
   10ce8:	00010d73 	.word	0x00010d73
   10cec:	00010d73 	.word	0x00010d73
   10cf0:	00010d81 	.word	0x00010d81
   10cf4:	00010d4b 	.word	0x00010d4b
   10cf8:	00010da1 	.word	0x00010da1
   10cfc:	00010d73 	.word	0x00010d73
   10d00:	00010d73 	.word	0x00010d73
   10d04:	00010da1 	.word	0x00010da1
   10d08:	00010d73 	.word	0x00010d73
   10d0c:	00010d4b 	.word	0x00010d4b
   10d10:	00010d73 	.word	0x00010d73
   10d14:	00010d73 	.word	0x00010d73
   10d18:	00010d4b 	.word	0x00010d4b
		conv->specifier_cat = SPECIFIER_SINT;
   10d1c:	2101      	movs	r1, #1
   10d1e:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		conv->specifier_cat = SPECIFIER_UINT;
   10d22:	f361 0302 	bfi	r3, r1, #0, #3
   10d26:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
   10d2a:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10d2e:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10d32:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   10d34:	bf02      	ittt	eq
   10d36:	f89d 1060 	ldrbeq.w	r1, [sp, #96]	; 0x60
   10d3a:	f041 0101 	orreq.w	r1, r1, #1
   10d3e:	f88d 1060 	strbeq.w	r1, [sp, #96]	; 0x60
		if (conv->specifier == 'c') {
   10d42:	2a63      	cmp	r2, #99	; 0x63
   10d44:	d005      	beq.n	10d52 <cbvprintf+0x3be>
	bool unsupported = false;
   10d46:	2300      	movs	r3, #0
   10d48:	e006      	b.n	10d58 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
   10d4a:	2102      	movs	r1, #2
   10d4c:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   10d50:	e7e7      	b.n	10d22 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10d52:	3b00      	subs	r3, #0
   10d54:	bf18      	it	ne
   10d56:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10d58:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   10d5c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10d60:	430b      	orrs	r3, r1
   10d62:	f363 0241 	bfi	r2, r3, #1, #1
   10d66:	f88d 2060 	strb.w	r2, [sp, #96]	; 0x60
	return sp;
   10d6a:	e6b6      	b.n	10ada <cbvprintf+0x146>
		} else if ((conv->length_mod != LENGTH_NONE)
   10d6c:	f013 0f38 	tst.w	r3, #56	; 0x38
   10d70:	d0e9      	beq.n	10d46 <cbvprintf+0x3b2>
			conv->invalid = true;
   10d72:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   10d76:	f043 0301 	orr.w	r3, r3, #1
   10d7a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
   10d7e:	e7e2      	b.n	10d46 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
   10d80:	2203      	movs	r2, #3
   10d82:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   10d86:	f362 0302 	bfi	r3, r2, #0, #3
   10d8a:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod == LENGTH_UPPER_L) {
   10d8e:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10d92:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10d96:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   10d9a:	427b      	negs	r3, r7
   10d9c:	417b      	adcs	r3, r7
   10d9e:	e7db      	b.n	10d58 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
   10da0:	2203      	movs	r2, #3
   10da2:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
   10da6:	f362 0302 	bfi	r3, r2, #0, #3
   10daa:	f88d 3062 	strb.w	r3, [sp, #98]	; 0x62
		if (conv->length_mod != LENGTH_NONE) {
   10dae:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10db2:	f013 0f78 	tst.w	r3, #120	; 0x78
   10db6:	bf14      	ite	ne
   10db8:	2301      	movne	r3, #1
   10dba:	2300      	moveq	r3, #0
   10dbc:	e7cc      	b.n	10d58 <cbvprintf+0x3c4>
			unsupported = true;
   10dbe:	2301      	movs	r3, #1
   10dc0:	e7ca      	b.n	10d58 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   10dc2:	f99d 2060 	ldrsb.w	r2, [sp, #96]	; 0x60
   10dc6:	2a00      	cmp	r2, #0
		int width = -1;
   10dc8:	bfac      	ite	ge
   10dca:	f04f 32ff 	movge.w	r2, #4294967295
			width = conv->width_value;
   10dce:	9a19      	ldrlt	r2, [sp, #100]	; 0x64
   10dd0:	e695      	b.n	10afe <cbvprintf+0x16a>
		} else if (conv->prec_present) {
   10dd2:	0799      	lsls	r1, r3, #30
   10dd4:	f57f aea2 	bpl.w	10b1c <cbvprintf+0x188>
			precision = conv->prec_value;
   10dd8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
		conv->pad0_value = 0;
   10dda:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   10ddc:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
		    && (conv->specifier_cat == SPECIFIER_FP)
   10de0:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   10de4:	f003 0307 	and.w	r3, r3, #7
   10de8:	2b04      	cmp	r3, #4
   10dea:	d109      	bne.n	10e00 <cbvprintf+0x46c>
		    && !conv->prec_present) {
   10dec:	f89d 3061 	ldrb.w	r3, [sp, #97]	; 0x61
   10df0:	079a      	lsls	r2, r3, #30
   10df2:	d405      	bmi.n	10e00 <cbvprintf+0x46c>
			if (conv->specifier_a) {
   10df4:	f99d 3061 	ldrsb.w	r3, [sp, #97]	; 0x61
				precision = 6;
   10df8:	2b00      	cmp	r3, #0
   10dfa:	bfb4      	ite	lt
   10dfc:	270d      	movlt	r7, #13
   10dfe:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   10e00:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
			= (enum length_mod_enum)conv->length_mod;
   10e04:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
		enum specifier_cat_enum specifier_cat
   10e08:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   10e0c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   10e0e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   10e12:	d136      	bne.n	10e82 <cbvprintf+0x4ee>
			switch (length_mod) {
   10e14:	1ecb      	subs	r3, r1, #3
   10e16:	2b04      	cmp	r3, #4
   10e18:	d820      	bhi.n	10e5c <cbvprintf+0x4c8>
   10e1a:	e8df f003 	tbb	[pc, r3]
   10e1e:	0703      	.short	0x0703
   10e20:	1f07      	.short	0x1f07
   10e22:	1f          	.byte	0x1f
   10e23:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   10e24:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   10e28:	17d3      	asrs	r3, r2, #31
   10e2a:	e004      	b.n	10e36 <cbvprintf+0x4a2>
					(sint_value_type)va_arg(ap, intmax_t);
   10e2c:	3407      	adds	r4, #7
   10e2e:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   10e32:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   10e36:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		if (conv->invalid || conv->unsupported) {
   10e3a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   10e3e:	07b3      	lsls	r3, r6, #30
   10e40:	d055      	beq.n	10eee <cbvprintf+0x55a>
			OUTS(sp, fp);
   10e42:	464a      	mov	r2, r9
   10e44:	4641      	mov	r1, r8
   10e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e48:	9803      	ldr	r0, [sp, #12]
   10e4a:	f004 fd3d 	bl	158c8 <outs>
   10e4e:	2800      	cmp	r0, #0
   10e50:	f2c0 83c6 	blt.w	115e0 <cbvprintf+0xc4c>
   10e54:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   10e56:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   10e5a:	e5a3      	b.n	109a4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10e5c:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   10e60:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   10e62:	ea4f 73e2 	mov.w	r3, r2, asr #31
   10e66:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			if (length_mod == LENGTH_HH) {
   10e6a:	d105      	bne.n	10e78 <cbvprintf+0x4e4>
				value->uint = (unsigned char)value->uint;
   10e6c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
				value->uint = (unsigned short)value->uint;
   10e70:	9316      	str	r3, [sp, #88]	; 0x58
   10e72:	2300      	movs	r3, #0
   10e74:	9317      	str	r3, [sp, #92]	; 0x5c
   10e76:	e7e0      	b.n	10e3a <cbvprintf+0x4a6>
			} else if (length_mod == LENGTH_H) {
   10e78:	2902      	cmp	r1, #2
   10e7a:	d1de      	bne.n	10e3a <cbvprintf+0x4a6>
				value->sint = (short)value->sint;
   10e7c:	f9bd 2058 	ldrsh.w	r2, [sp, #88]	; 0x58
   10e80:	e7d2      	b.n	10e28 <cbvprintf+0x494>
		} else if (specifier_cat == SPECIFIER_UINT) {
   10e82:	2b02      	cmp	r3, #2
   10e84:	d123      	bne.n	10ece <cbvprintf+0x53a>
			switch (length_mod) {
   10e86:	1ecb      	subs	r3, r1, #3
   10e88:	2b04      	cmp	r3, #4
   10e8a:	d813      	bhi.n	10eb4 <cbvprintf+0x520>
   10e8c:	e8df f003 	tbb	[pc, r3]
   10e90:	120a0a03 	.word	0x120a0a03
   10e94:	12          	.byte	0x12
   10e95:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   10e96:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   10e98:	6822      	ldr	r2, [r4, #0]
   10e9a:	1d20      	adds	r0, r4, #4
   10e9c:	9216      	str	r2, [sp, #88]	; 0x58
   10e9e:	9317      	str	r3, [sp, #92]	; 0x5c
					(uint_value_type)va_arg(ap, size_t);
   10ea0:	4604      	mov	r4, r0
   10ea2:	e7ca      	b.n	10e3a <cbvprintf+0x4a6>
					(uint_value_type)va_arg(ap,
   10ea4:	3407      	adds	r4, #7
   10ea6:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   10eaa:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   10eae:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
				break;
   10eb2:	e7f5      	b.n	10ea0 <cbvprintf+0x50c>
					(uint_value_type)va_arg(ap, size_t);
   10eb4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   10eb8:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   10eba:	9316      	str	r3, [sp, #88]	; 0x58
   10ebc:	f04f 0300 	mov.w	r3, #0
   10ec0:	9317      	str	r3, [sp, #92]	; 0x5c
			if (length_mod == LENGTH_HH) {
   10ec2:	d0d3      	beq.n	10e6c <cbvprintf+0x4d8>
			} else if (length_mod == LENGTH_H) {
   10ec4:	2902      	cmp	r1, #2
   10ec6:	d1b8      	bne.n	10e3a <cbvprintf+0x4a6>
				value->uint = (unsigned short)value->uint;
   10ec8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   10ecc:	e7d0      	b.n	10e70 <cbvprintf+0x4dc>
		} else if (specifier_cat == SPECIFIER_FP) {
   10ece:	2b04      	cmp	r3, #4
   10ed0:	d107      	bne.n	10ee2 <cbvprintf+0x54e>
			if (length_mod == LENGTH_UPPER_L) {
   10ed2:	3407      	adds	r4, #7
   10ed4:	f024 0407 	bic.w	r4, r4, #7
   10ed8:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   10edc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   10ee0:	e7ab      	b.n	10e3a <cbvprintf+0x4a6>
		} else if (specifier_cat == SPECIFIER_PTR) {
   10ee2:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   10ee4:	bf04      	itt	eq
   10ee6:	f854 3b04 	ldreq.w	r3, [r4], #4
   10eea:	9316      	streq	r3, [sp, #88]	; 0x58
   10eec:	e7a5      	b.n	10e3a <cbvprintf+0x4a6>
		switch (conv->specifier) {
   10eee:	f89d 9063 	ldrb.w	r9, [sp, #99]	; 0x63
   10ef2:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   10ef6:	d8ae      	bhi.n	10e56 <cbvprintf+0x4c2>
   10ef8:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   10efc:	f200 80a7 	bhi.w	1104e <cbvprintf+0x6ba>
   10f00:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   10f04:	f000 80ee 	beq.w	110e4 <cbvprintf+0x750>
   10f08:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   10f0c:	d9a3      	bls.n	10e56 <cbvprintf+0x4c2>
   10f0e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   10f12:	d003      	beq.n	10f1c <cbvprintf+0x588>
   10f14:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   10f18:	2b02      	cmp	r3, #2
   10f1a:	d89c      	bhi.n	10e56 <cbvprintf+0x4c2>
	} u = {
   10f1c:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
	if ((u.u64 & SIGN_MASK) != 0U) {
   10f20:	2a00      	cmp	r2, #0
   10f22:	f173 0100 	sbcs.w	r1, r3, #0
   10f26:	f2c0 81d5 	blt.w	112d4 <cbvprintf+0x940>
	} else if (conv->flag_plus) {
   10f2a:	0731      	lsls	r1, r6, #28
   10f2c:	f100 81d4 	bmi.w	112d8 <cbvprintf+0x944>
		*sign = ' ';
   10f30:	f016 0610 	ands.w	r6, r6, #16
   10f34:	bf18      	it	ne
   10f36:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   10f38:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   10f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
   10f40:	9206      	str	r2, [sp, #24]
   10f42:	9307      	str	r3, [sp, #28]
   10f44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10f48:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	bool is_subnormal = (exp == 0) && (fract != 0);
   10f4c:	f1bb 0f00 	cmp.w	fp, #0
   10f50:	f040 81c4 	bne.w	112dc <cbvprintf+0x948>
   10f54:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   10f58:	4313      	orrs	r3, r2
   10f5a:	bf14      	ite	ne
   10f5c:	f04f 0c01 	movne.w	ip, #1
   10f60:	f04f 0c00 	moveq.w	ip, #0
	if ((exp | fract) != 0) {
   10f64:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
   10f66:	9907      	ldr	r1, [sp, #28]
		c = 'f';
   10f68:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
   10f6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10f70:	9906      	ldr	r1, [sp, #24]
		c = 'f';
   10f72:	bf08      	it	eq
   10f74:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
   10f78:	02ca      	lsls	r2, r1, #11
   10f7a:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
   10f7e:	ea4b 0102 	orr.w	r1, fp, r2
   10f82:	910c      	str	r1, [sp, #48]	; 0x30
   10f84:	17c1      	asrs	r1, r0, #31
   10f86:	4319      	orrs	r1, r3
   10f88:	910d      	str	r1, [sp, #52]	; 0x34
   10f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   10f8e:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   10f90:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
	if ((exp | fract) != 0) {
   10f94:	f000 8215 	beq.w	113c2 <cbvprintf+0xa2e>
		if (is_subnormal) {
   10f98:	f1bc 0f00 	cmp.w	ip, #0
   10f9c:	f040 81d5 	bne.w	1134a <cbvprintf+0x9b6>
		fract |= BIT_63;
   10fa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
		fract *= 5U;
   10fa2:	2105      	movs	r1, #5
		fract |= BIT_63;
   10fa4:	9304      	str	r3, [sp, #16]
   10fa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   10fa8:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   10fac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10fb0:	9305      	str	r3, [sp, #20]
   10fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10fb6:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   10fba:	2300      	movs	r3, #0
   10fbc:	461a      	mov	r2, r3
	while (exp < -2) {
   10fbe:	f11b 0f02 	cmn.w	fp, #2
   10fc2:	f2c0 81cb 	blt.w	1135c <cbvprintf+0x9c8>
   10fc6:	b11b      	cbz	r3, 10fd0 <cbvprintf+0x63c>
   10fc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   10fcc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (exp > 0) {
   10fd0:	e9dd 3112 	ldrd	r3, r1, [sp, #72]	; 0x48
   10fd4:	f1bb 0f00 	cmp.w	fp, #0
   10fd8:	f300 81db 	bgt.w	11392 <cbvprintf+0x9fe>
	fract >>= (4 - exp);
   10fdc:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10fde:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10fe0:	f1cb 0004 	rsb	r0, fp, #4
   10fe4:	f10b 0b1c 	add.w	fp, fp, #28
   10fe8:	fa01 fb0b 	lsl.w	fp, r1, fp
   10fec:	f1a0 0c20 	sub.w	ip, r0, #32
   10ff0:	40c3      	lsrs	r3, r0
   10ff2:	fa21 fc0c 	lsr.w	ip, r1, ip
   10ff6:	ea43 030b 	orr.w	r3, r3, fp
   10ffa:	ea43 030c 	orr.w	r3, r3, ip
   10ffe:	40c1      	lsrs	r1, r0
   11000:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	if ((c == 'g') || (c == 'G')) {
   11004:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   11008:	2b47      	cmp	r3, #71	; 0x47
   1100a:	f040 81e1 	bne.w	113d0 <cbvprintf+0xa3c>
		if (decexp < (-4 + 1) || decexp > precision) {
   1100e:	1cd0      	adds	r0, r2, #3
   11010:	db02      	blt.n	11018 <cbvprintf+0x684>
   11012:	4297      	cmp	r7, r2
   11014:	f280 81d8 	bge.w	113c8 <cbvprintf+0xa34>
			c += 'e' - 'g';  /* e or E */
   11018:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   1101c:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   1101e:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   11022:	dd00      	ble.n	11026 <cbvprintf+0x692>
				precision--;
   11024:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   11026:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   1102a:	0699      	lsls	r1, r3, #26
   1102c:	f100 81d0 	bmi.w	113d0 <cbvprintf+0xa3c>
   11030:	2f00      	cmp	r7, #0
   11032:	bfd4      	ite	le
   11034:	2300      	movle	r3, #0
   11036:	2301      	movgt	r3, #1
	if (c == 'f') {
   11038:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   1103c:	930e      	str	r3, [sp, #56]	; 0x38
	if (c == 'f') {
   1103e:	f040 81c9 	bne.w	113d4 <cbvprintf+0xa40>
		if (decimals < 0) {
   11042:	18bb      	adds	r3, r7, r2
   11044:	f140 81c7 	bpl.w	113d6 <cbvprintf+0xa42>
			decimals = 0;
   11048:	f04f 0a00 	mov.w	sl, #0
   1104c:	e1c7      	b.n	113de <cbvprintf+0xa4a>
   1104e:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   11052:	2b20      	cmp	r3, #32
   11054:	f63f aeff 	bhi.w	10e56 <cbvprintf+0x4c2>
   11058:	a201      	add	r2, pc, #4	; (adr r2, 11060 <cbvprintf+0x6cc>)
   1105a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1105e:	bf00      	nop
   11060:	00011275 	.word	0x00011275
   11064:	00010e57 	.word	0x00010e57
   11068:	00010e57 	.word	0x00010e57
   1106c:	00010e57 	.word	0x00010e57
   11070:	00010e57 	.word	0x00010e57
   11074:	00010e57 	.word	0x00010e57
   11078:	00010e57 	.word	0x00010e57
   1107c:	00010e57 	.word	0x00010e57
   11080:	00010e57 	.word	0x00010e57
   11084:	00010f1d 	.word	0x00010f1d
   11088:	00010e57 	.word	0x00010e57
   1108c:	00011111 	.word	0x00011111
   11090:	00011215 	.word	0x00011215
   11094:	00010f1d 	.word	0x00010f1d
   11098:	00010f1d 	.word	0x00010f1d
   1109c:	00010f1d 	.word	0x00010f1d
   110a0:	00010e57 	.word	0x00010e57
   110a4:	00011215 	.word	0x00011215
   110a8:	00010e57 	.word	0x00010e57
   110ac:	00010e57 	.word	0x00010e57
   110b0:	00010e57 	.word	0x00010e57
   110b4:	00010e57 	.word	0x00010e57
   110b8:	000112ab 	.word	0x000112ab
   110bc:	00011275 	.word	0x00011275
   110c0:	00011279 	.word	0x00011279
   110c4:	00010e57 	.word	0x00010e57
   110c8:	00010e57 	.word	0x00010e57
   110cc:	000110eb 	.word	0x000110eb
   110d0:	00010e57 	.word	0x00010e57
   110d4:	00011275 	.word	0x00011275
   110d8:	00010e57 	.word	0x00010e57
   110dc:	00010e57 	.word	0x00010e57
   110e0:	00011275 	.word	0x00011275
			OUTC('%');
   110e4:	4641      	mov	r1, r8
   110e6:	4648      	mov	r0, r9
   110e8:	e468      	b.n	109bc <cbvprintf+0x28>
			if (precision >= 0) {
   110ea:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   110ec:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
			if (precision >= 0) {
   110f0:	db0a      	blt.n	11108 <cbvprintf+0x774>
				len = strnlen(bps, precision);
   110f2:	4639      	mov	r1, r7
   110f4:	4648      	mov	r0, r9
   110f6:	f004 fdbd 	bl	15c74 <strnlen>
		char sign = 0;
   110fa:	2600      	movs	r6, #0
			bpe = bps + len;
   110fc:	eb09 0a00 	add.w	sl, r9, r0
		if (bps == NULL) {
   11100:	f1b9 0f00 	cmp.w	r9, #0
   11104:	d10c      	bne.n	11120 <cbvprintf+0x78c>
   11106:	e6a6      	b.n	10e56 <cbvprintf+0x4c2>
				len = strlen(bps);
   11108:	4648      	mov	r0, r9
   1110a:	f004 fdac 	bl	15c66 <strlen>
   1110e:	e7f4      	b.n	110fa <cbvprintf+0x766>
		char sign = 0;
   11110:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11112:	9b16      	ldr	r3, [sp, #88]	; 0x58
			bpe = buf + 1;
   11114:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11118:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
				bps = encode_float(value->dbl, conv, precision,
   1111c:	f10d 0974 	add.w	r9, sp, #116	; 0x74
		size_t nj_len = (bpe - bps);
   11120:	ebaa 0209 	sub.w	r2, sl, r9
		if (sign != 0) {
   11124:	b106      	cbz	r6, 11128 <cbvprintf+0x794>
			nj_len += 1U;
   11126:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   11128:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   1112c:	06c3      	lsls	r3, r0, #27
   1112e:	f140 824c 	bpl.w	115ca <cbvprintf+0xc36>
			nj_len += 2U;
   11132:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   11134:	9919      	ldr	r1, [sp, #100]	; 0x64
		if (conv->pad_fp) {
   11136:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   11138:	440a      	add	r2, r1
		if (width > 0) {
   1113a:	9b08      	ldr	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   1113c:	bf44      	itt	mi
   1113e:	991a      	ldrmi	r1, [sp, #104]	; 0x68
   11140:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   11142:	2b00      	cmp	r3, #0
   11144:	dd25      	ble.n	11192 <cbvprintf+0x7fe>
			width -= (int)nj_len;
   11146:	1a9b      	subs	r3, r3, r2
			if (!conv->flag_dash) {
   11148:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
   1114c:	0751      	lsls	r1, r2, #29
   1114e:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   11152:	f100 824c 	bmi.w	115ee <cbvprintf+0xc5a>
				if (conv->flag_zero) {
   11156:	0657      	lsls	r7, r2, #25
   11158:	f140 8245 	bpl.w	115e6 <cbvprintf+0xc52>
					if (sign != 0) {
   1115c:	2e00      	cmp	r6, #0
   1115e:	f000 8244 	beq.w	115ea <cbvprintf+0xc56>
   11162:	9308      	str	r3, [sp, #32]
						OUTC(sign);
   11164:	4641      	mov	r1, r8
   11166:	4630      	mov	r0, r6
   11168:	9b03      	ldr	r3, [sp, #12]
   1116a:	4798      	blx	r3
   1116c:	2800      	cmp	r0, #0
   1116e:	f2c0 8237 	blt.w	115e0 <cbvprintf+0xc4c>
						sign = 0;
   11172:	465e      	mov	r6, fp
					pad = '0';
   11174:	2730      	movs	r7, #48	; 0x30
   11176:	9b08      	ldr	r3, [sp, #32]
						OUTC(sign);
   11178:	3501      	adds	r5, #1
					pad = '0';
   1117a:	9308      	str	r3, [sp, #32]
   1117c:	eb03 0b05 	add.w	fp, r3, r5
   11180:	9b08      	ldr	r3, [sp, #32]
   11182:	ebab 0503 	sub.w	r5, fp, r3
				while (width-- > 0) {
   11186:	2b00      	cmp	r3, #0
   11188:	f103 33ff 	add.w	r3, r3, #4294967295
   1118c:	9308      	str	r3, [sp, #32]
   1118e:	f300 8220 	bgt.w	115d2 <cbvprintf+0xc3e>
		if (sign != 0) {
   11192:	b13e      	cbz	r6, 111a4 <cbvprintf+0x810>
			OUTC(sign);
   11194:	4641      	mov	r1, r8
   11196:	4630      	mov	r0, r6
   11198:	9b03      	ldr	r3, [sp, #12]
   1119a:	4798      	blx	r3
   1119c:	2800      	cmp	r0, #0
   1119e:	f2c0 821f 	blt.w	115e0 <cbvprintf+0xc4c>
   111a2:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   111a4:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
   111a8:	0656      	lsls	r6, r2, #25
   111aa:	f140 827e 	bpl.w	116aa <cbvprintf+0xd16>
			if (conv->specifier_a) {
   111ae:	f99d 2061 	ldrsb.w	r2, [sp, #97]	; 0x61
   111b2:	2a00      	cmp	r2, #0
   111b4:	f2c0 821d 	blt.w	115f2 <cbvprintf+0xc5e>
   111b8:	eba5 0509 	sub.w	r5, r5, r9
				while (isdigit((int)*cp)) {
   111bc:	f899 0000 	ldrb.w	r0, [r9]
   111c0:	464f      	mov	r7, r9
   111c2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   111c6:	2a09      	cmp	r2, #9
   111c8:	eb05 0b09 	add.w	fp, r5, r9
   111cc:	f109 0901 	add.w	r9, r9, #1
   111d0:	f240 823f 	bls.w	11652 <cbvprintf+0xcbe>
				if (!conv->pad_postdp) {
   111d4:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
				pad_len = conv->pad0_value;
   111d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
				if (!conv->pad_postdp) {
   111da:	0690      	lsls	r0, r2, #26
   111dc:	d408      	bmi.n	111f0 <cbvprintf+0x85c>
   111de:	eb06 090b 	add.w	r9, r6, fp
					while (pad_len-- > 0) {
   111e2:	2e00      	cmp	r6, #0
   111e4:	eba9 0b06 	sub.w	fp, r9, r6
   111e8:	f106 36ff 	add.w	r6, r6, #4294967295
   111ec:	f300 8238 	bgt.w	11660 <cbvprintf+0xccc>
				if (*cp == '.') {
   111f0:	7838      	ldrb	r0, [r7, #0]
   111f2:	282e      	cmp	r0, #46	; 0x2e
   111f4:	d10b      	bne.n	1120e <cbvprintf+0x87a>
					OUTC(*cp++);
   111f6:	4641      	mov	r1, r8
   111f8:	9b03      	ldr	r3, [sp, #12]
   111fa:	4798      	blx	r3
						OUTC('0');
   111fc:	2800      	cmp	r0, #0
   111fe:	f2c0 81ef 	blt.w	115e0 <cbvprintf+0xc4c>
					while (pad_len-- > 0) {
   11202:	2e00      	cmp	r6, #0
						OUTC('0');
   11204:	f10b 0b01 	add.w	fp, fp, #1
					while (pad_len-- > 0) {
   11208:	f300 8232 	bgt.w	11670 <cbvprintf+0xcdc>
					OUTC(*cp++);
   1120c:	3701      	adds	r7, #1
   1120e:	ebab 0b07 	sub.w	fp, fp, r7
   11212:	e238      	b.n	11686 <cbvprintf+0xcf2>
			if (conv->flag_plus) {
   11214:	0730      	lsls	r0, r6, #28
   11216:	d42b      	bmi.n	11270 <cbvprintf+0x8dc>
				sign = ' ';
   11218:	f016 0610 	ands.w	r6, r6, #16
   1121c:	bf18      	it	ne
   1121e:	2620      	movne	r6, #32
			if (value->sint < 0) {
   11220:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   11224:	2a00      	cmp	r2, #0
   11226:	f173 0100 	sbcs.w	r1, r3, #0
   1122a:	da05      	bge.n	11238 <cbvprintf+0x8a4>
				sign = '-';
   1122c:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
   1122e:	4252      	negs	r2, r2
   11230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11234:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
			bps = encode_uint(value->uint, conv, buf, bpe);
   11238:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   1123c:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   11240:	9300      	str	r3, [sp, #0]
   11242:	aa18      	add	r2, sp, #96	; 0x60
   11244:	ab1d      	add	r3, sp, #116	; 0x74
   11246:	f004 faf4 	bl	15832 <encode_uint>
   1124a:	4681      	mov	r9, r0
			if (precision >= 0) {
   1124c:	2f00      	cmp	r7, #0
   1124e:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   11252:	db0b      	blt.n	1126c <cbvprintf+0x8d8>
				conv->flag_zero = false;
   11254:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
				size_t len = bpe - bps;
   11258:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   1125c:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   11260:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   11262:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
				if (len < (size_t)precision) {
   11266:	d901      	bls.n	1126c <cbvprintf+0x8d8>
					conv->pad0_value = precision - (int)len;
   11268:	1abf      	subs	r7, r7, r2
   1126a:	9719      	str	r7, [sp, #100]	; 0x64
		const char *bpe = buf + sizeof(buf);
   1126c:	469a      	mov	sl, r3
   1126e:	e747      	b.n	11100 <cbvprintf+0x76c>
				sign = '+';
   11270:	262b      	movs	r6, #43	; 0x2b
   11272:	e7d5      	b.n	11220 <cbvprintf+0x88c>
		switch (conv->specifier) {
   11274:	2600      	movs	r6, #0
   11276:	e7df      	b.n	11238 <cbvprintf+0x8a4>
			if (value->ptr != NULL) {
   11278:	9816      	ldr	r0, [sp, #88]	; 0x58
   1127a:	2800      	cmp	r0, #0
   1127c:	f000 819f 	beq.w	115be <cbvprintf+0xc2a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11280:	f10d 038d 	add.w	r3, sp, #141	; 0x8d
   11284:	9300      	str	r3, [sp, #0]
   11286:	2100      	movs	r1, #0
   11288:	ab1d      	add	r3, sp, #116	; 0x74
   1128a:	aa18      	add	r2, sp, #96	; 0x60
   1128c:	f004 fad1 	bl	15832 <encode_uint>
				conv->altform_0c = true;
   11290:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11294:	4681      	mov	r9, r0
				conv->altform_0c = true;
   11296:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1129a:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1129e:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   112a2:	2600      	movs	r6, #0
				conv->altform_0c = true;
   112a4:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
				goto prec_int_pad0;
   112a8:	e7d0      	b.n	1124c <cbvprintf+0x8b8>
				store_count(conv, value->ptr, count);
   112aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
	switch ((enum length_mod_enum)conv->length_mod) {
   112ac:	2907      	cmp	r1, #7
   112ae:	f63f add2 	bhi.w	10e56 <cbvprintf+0x4c2>
   112b2:	e8df f001 	tbb	[pc, r1]
   112b6:	040d      	.short	0x040d
   112b8:	08080d06 	.word	0x08080d06
   112bc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   112be:	701d      	strb	r5, [r3, #0]
		break;
   112c0:	e5c9      	b.n	10e56 <cbvprintf+0x4c2>
		*(short *)dp = (short)count;
   112c2:	801d      	strh	r5, [r3, #0]
		break;
   112c4:	e5c7      	b.n	10e56 <cbvprintf+0x4c2>
		*(intmax_t *)dp = (intmax_t)count;
   112c6:	4628      	mov	r0, r5
   112c8:	17e9      	asrs	r1, r5, #31
   112ca:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   112ce:	e5c2      	b.n	10e56 <cbvprintf+0x4c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   112d0:	601d      	str	r5, [r3, #0]
		break;
   112d2:	e5c0      	b.n	10e56 <cbvprintf+0x4c2>
		*sign = '-';
   112d4:	262d      	movs	r6, #45	; 0x2d
   112d6:	e62f      	b.n	10f38 <cbvprintf+0x5a4>
		*sign = '+';
   112d8:	262b      	movs	r6, #43	; 0x2b
   112da:	e62d      	b.n	10f38 <cbvprintf+0x5a4>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
   112dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
   112e0:	459b      	cmp	fp, r3
   112e2:	d12d      	bne.n	11340 <cbvprintf+0x9ac>
		if (fract == 0) {
   112e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   112e8:	4313      	orrs	r3, r2
   112ea:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
   112ee:	d118      	bne.n	11322 <cbvprintf+0x98e>
			if (isupper((int)c)) {
   112f0:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'I';
   112f4:	bf95      	itete	ls
   112f6:	f644 6349 	movwls	r3, #20041	; 0x4e49
				*buf++ = 'i';
   112fa:	f646 6369 	movwhi	r3, #28265	; 0x6e69
				*buf++ = 'I';
   112fe:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'i';
   11302:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'F';
   11306:	bf94      	ite	ls
   11308:	2346      	movls	r3, #70	; 0x46
				*buf++ = 'f';
   1130a:	2366      	movhi	r3, #102	; 0x66
				*buf++ = 'n';
   1130c:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
		conv->flag_zero = false;
   11310:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		*bpe = buf;
   11314:	f10d 0a77 	add.w	sl, sp, #119	; 0x77
		conv->flag_zero = false;
   11318:	f36f 1386 	bfc	r3, #6, #1
   1131c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
		return bps;
   11320:	e6fc      	b.n	1111c <cbvprintf+0x788>
			if (isupper((int)c)) {
   11322:	f1b9 0f19 	cmp.w	r9, #25
				*buf++ = 'N';
   11326:	bf95      	itete	ls
   11328:	f244 134e 	movwls	r3, #16718	; 0x414e
				*buf++ = 'n';
   1132c:	f246 136e 	movwhi	r3, #24942	; 0x616e
				*buf++ = 'N';
   11330:	f8ad 3074 	strhls.w	r3, [sp, #116]	; 0x74
				*buf++ = 'n';
   11334:	f8ad 3074 	strhhi.w	r3, [sp, #116]	; 0x74
				*buf++ = 'N';
   11338:	bf94      	ite	ls
   1133a:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'n';
   1133c:	236e      	movhi	r3, #110	; 0x6e
   1133e:	e7e5      	b.n	1130c <cbvprintf+0x978>
	bool is_subnormal = (exp == 0) && (fract != 0);
   11340:	f04f 0c00 	mov.w	ip, #0
   11344:	e60e      	b.n	10f64 <cbvprintf+0x5d0>
				exp--;
   11346:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   1134a:	1892      	adds	r2, r2, r2
   1134c:	415b      	adcs	r3, r3
   1134e:	2a00      	cmp	r2, #0
   11350:	f173 0100 	sbcs.w	r1, r3, #0
   11354:	daf7      	bge.n	11346 <cbvprintf+0x9b2>
   11356:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   1135a:	e621      	b.n	10fa0 <cbvprintf+0x60c>
			fract >>= 1;
   1135c:	9b04      	ldr	r3, [sp, #16]
   1135e:	9805      	ldr	r0, [sp, #20]
   11360:	085b      	lsrs	r3, r3, #1
   11362:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   11366:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11368:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   1136c:	46dc      	mov	ip, fp
			fract >>= 1;
   1136e:	e9cd 3004 	strd	r3, r0, [sp, #16]
			exp++;
   11372:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11376:	d2f1      	bcs.n	1135c <cbvprintf+0x9c8>
		fract *= 5U;
   11378:	fba3 ab01 	umull	sl, fp, r3, r1
   1137c:	4348      	muls	r0, r1
   1137e:	e9cd ab04 	strd	sl, fp, [sp, #16]
   11382:	9b05      	ldr	r3, [sp, #20]
		exp++;
   11384:	f10c 0b02 	add.w	fp, ip, #2
		fract *= 5U;
   11388:	18c3      	adds	r3, r0, r3
   1138a:	9305      	str	r3, [sp, #20]
		decexp--;
   1138c:	3a01      	subs	r2, #1
   1138e:	2301      	movs	r3, #1
   11390:	e615      	b.n	10fbe <cbvprintf+0x62a>
		fract += 2;
   11392:	3302      	adds	r3, #2
   11394:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11398:	a812      	add	r0, sp, #72	; 0x48
		fract += 2;
   1139a:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
   1139e:	920e      	str	r2, [sp, #56]	; 0x38
		_ldiv5(&fract);
   113a0:	f004 fa11 	bl	157c6 <_ldiv5>
		exp--;
   113a4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
		decexp++;
   113a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		exp--;
   113aa:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   113ae:	3201      	adds	r2, #1
			fract <<= 1;
   113b0:	1800      	adds	r0, r0, r0
   113b2:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   113b4:	2800      	cmp	r0, #0
   113b6:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
   113ba:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   113be:	daf7      	bge.n	113b0 <cbvprintf+0xa1c>
   113c0:	e604      	b.n	10fcc <cbvprintf+0x638>
   113c2:	2200      	movs	r2, #0
   113c4:	4693      	mov	fp, r2
   113c6:	e609      	b.n	10fdc <cbvprintf+0x648>
			c = 'f';
   113c8:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
   113cc:	1abf      	subs	r7, r7, r2
   113ce:	e62a      	b.n	11026 <cbvprintf+0x692>
	bool prune_zero = false;
   113d0:	2300      	movs	r3, #0
   113d2:	e631      	b.n	11038 <cbvprintf+0x6a4>
		decimals = precision + 1;
   113d4:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   113d6:	2b10      	cmp	r3, #16
   113d8:	bfa8      	it	ge
   113da:	2310      	movge	r3, #16
   113dc:	469a      	mov	sl, r3
   113de:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
   113e0:	2000      	movs	r0, #0
   113e2:	9111      	str	r1, [sp, #68]	; 0x44
   113e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   113e8:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	while (decimals--) {
   113ec:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
   113f0:	f10a 3aff 	add.w	sl, sl, #4294967295
   113f4:	f1ba 3fff 	cmp.w	sl, #4294967295
   113f8:	d11f      	bne.n	1143a <cbvprintf+0xaa6>
	fract += round;
   113fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   113fc:	18cb      	adds	r3, r1, r3
   113fe:	930a      	str	r3, [sp, #40]	; 0x28
   11400:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	if (fract >= BIT64(60)) {
   11402:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
   11406:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
   1140a:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
   1140e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (fract >= BIT64(60)) {
   11410:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
   11414:	4559      	cmp	r1, fp
   11416:	bf08      	it	eq
   11418:	4550      	cmpeq	r0, sl
   1141a:	d31a      	bcc.n	11452 <cbvprintf+0xabe>
	fract += round;
   1141c:	4650      	mov	r0, sl
   1141e:	4659      	mov	r1, fp
   11420:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	if (c == 'f') {
   11424:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   11428:	d153      	bne.n	114d2 <cbvprintf+0xb3e>
		if (decexp > 0) {
   1142a:	2a00      	cmp	r2, #0
   1142c:	dc20      	bgt.n	11470 <cbvprintf+0xadc>
			*buf++ = '0';
   1142e:	2330      	movs	r3, #48	; 0x30
   11430:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
   11434:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   11438:	e02b      	b.n	11492 <cbvprintf+0xafe>
	*v >>= 1;
   1143a:	0849      	lsrs	r1, r1, #1
   1143c:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   11440:	0840      	lsrs	r0, r0, #1
   11442:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
	_ldiv5(v);
   11446:	a814      	add	r0, sp, #80	; 0x50
   11448:	920f      	str	r2, [sp, #60]	; 0x3c
   1144a:	f004 f9bc 	bl	157c6 <_ldiv5>
   1144e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
}
   11450:	e7cc      	b.n	113ec <cbvprintf+0xa58>
	*v >>= 1;
   11452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11454:	920f      	str	r2, [sp, #60]	; 0x3c
   11456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11458:	085b      	lsrs	r3, r3, #1
   1145a:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1145e:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   11460:	a812      	add	r0, sp, #72	; 0x48
	*v >>= 1;
   11462:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
	_ldiv5(v);
   11466:	f004 f9ae 	bl	157c6 <_ldiv5>
		decexp++;
   1146a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1146c:	3201      	adds	r2, #1
   1146e:	e7d9      	b.n	11424 <cbvprintf+0xa90>
	char *buf = bps;
   11470:	f10d 0a74 	add.w	sl, sp, #116	; 0x74
			while (decexp > 0 && digit_count > 0) {
   11474:	9911      	ldr	r1, [sp, #68]	; 0x44
   11476:	2900      	cmp	r1, #0
   11478:	dd09      	ble.n	1148e <cbvprintf+0xafa>
				*buf++ = _get_digit(&fract, &digit_count);
   1147a:	a911      	add	r1, sp, #68	; 0x44
   1147c:	a812      	add	r0, sp, #72	; 0x48
   1147e:	920f      	str	r2, [sp, #60]	; 0x3c
   11480:	f004 f9c0 	bl	15804 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   11484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
				*buf++ = _get_digit(&fract, &digit_count);
   11486:	f80a 0b01 	strb.w	r0, [sl], #1
			while (decexp > 0 && digit_count > 0) {
   1148a:	3a01      	subs	r2, #1
   1148c:	d1f2      	bne.n	11474 <cbvprintf+0xae0>
			conv->pad0_value = decexp;
   1148e:	9219      	str	r2, [sp, #100]	; 0x64
			decexp = 0;
   11490:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   11492:	f89d 1060 	ldrb.w	r1, [sp, #96]	; 0x60
   11496:	0688      	lsls	r0, r1, #26
   11498:	d401      	bmi.n	1149e <cbvprintf+0xb0a>
   1149a:	2f00      	cmp	r7, #0
   1149c:	dd3f      	ble.n	1151e <cbvprintf+0xb8a>
			*buf++ = '.';
   1149e:	4653      	mov	r3, sl
   114a0:	212e      	movs	r1, #46	; 0x2e
   114a2:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   114a6:	b192      	cbz	r2, 114ce <cbvprintf+0xb3a>
   114a8:	2f00      	cmp	r7, #0
   114aa:	dd76      	ble.n	1159a <cbvprintf+0xc06>
			conv->pad0_value = -decexp;
   114ac:	4251      	negs	r1, r2
   114ae:	42b9      	cmp	r1, r7
   114b0:	bfa8      	it	ge
   114b2:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   114b4:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   114b6:	9119      	str	r1, [sp, #100]	; 0x64
			precision -= conv->pad0_value;
   114b8:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   114bc:	bfd4      	ite	le
   114be:	2100      	movle	r1, #0
   114c0:	2101      	movgt	r1, #1
   114c2:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   114c6:	f361 1045 	bfi	r0, r1, #5, #1
   114ca:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
			*buf++ = '.';
   114ce:	469a      	mov	sl, r3
   114d0:	e020      	b.n	11514 <cbvprintf+0xb80>
		*buf = _get_digit(&fract, &digit_count);
   114d2:	a911      	add	r1, sp, #68	; 0x44
   114d4:	a812      	add	r0, sp, #72	; 0x48
   114d6:	920f      	str	r2, [sp, #60]	; 0x3c
   114d8:	f004 f994 	bl	15804 <_get_digit>
		if (*buf++ != '0') {
   114dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		if (conv->flag_hash || (precision > 0)) {
   114de:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
		if (*buf++ != '0') {
   114e2:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   114e4:	bf18      	it	ne
   114e6:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   114ea:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   114ec:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
		if (conv->flag_hash || (precision > 0)) {
   114f0:	d401      	bmi.n	114f6 <cbvprintf+0xb62>
   114f2:	2f00      	cmp	r7, #0
   114f4:	dd53      	ble.n	1159e <cbvprintf+0xc0a>
			*buf++ = '.';
   114f6:	232e      	movs	r3, #46	; 0x2e
   114f8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
   114fc:	f10d 0376 	add.w	r3, sp, #118	; 0x76
   11500:	e7e5      	b.n	114ce <cbvprintf+0xb3a>
		*buf++ = _get_digit(&fract, &digit_count);
   11502:	a911      	add	r1, sp, #68	; 0x44
   11504:	a812      	add	r0, sp, #72	; 0x48
   11506:	920f      	str	r2, [sp, #60]	; 0x3c
   11508:	f004 f97c 	bl	15804 <_get_digit>
   1150c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1150e:	f80a 0b01 	strb.w	r0, [sl], #1
		precision--;
   11512:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   11514:	2f00      	cmp	r7, #0
   11516:	dd02      	ble.n	1151e <cbvprintf+0xb8a>
   11518:	9911      	ldr	r1, [sp, #68]	; 0x44
   1151a:	2900      	cmp	r1, #0
   1151c:	dcf1      	bgt.n	11502 <cbvprintf+0xb6e>
	if (prune_zero) {
   1151e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11520:	2b00      	cmp	r3, #0
   11522:	d13f      	bne.n	115a4 <cbvprintf+0xc10>
	conv->pad0_pre_exp = precision;
   11524:	971a      	str	r7, [sp, #104]	; 0x68
	if ((c == 'e') || (c == 'E')) {
   11526:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   1152a:	2945      	cmp	r1, #69	; 0x45
   1152c:	d123      	bne.n	11576 <cbvprintf+0xbe2>
		if (decexp < 0) {
   1152e:	2a00      	cmp	r2, #0
			*buf++ = '-';
   11530:	bfb4      	ite	lt
   11532:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   11534:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
   11536:	4650      	mov	r0, sl
			decexp = -decexp;
   11538:	bfb8      	it	lt
   1153a:	4252      	neglt	r2, r2
		if (decexp >= 100) {
   1153c:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   1153e:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   11542:	f88a 1001 	strb.w	r1, [sl, #1]
		if (decexp >= 100) {
   11546:	dd0a      	ble.n	1155e <cbvprintf+0xbca>
			*buf++ = (decexp / 100) + '0';
   11548:	2764      	movs	r7, #100	; 0x64
   1154a:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
   1154e:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
   11552:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   11556:	f10a 0003 	add.w	r0, sl, #3
   1155a:	f88a c002 	strb.w	ip, [sl, #2]
		*buf++ = (decexp / 10) + '0';
   1155e:	270a      	movs	r7, #10
   11560:	fb92 f1f7 	sdiv	r1, r2, r7
   11564:	4682      	mov	sl, r0
		*buf++ = (decexp % 10) + '0';
   11566:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   1156a:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   1156e:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   11570:	f80a cb02 	strb.w	ip, [sl], #2
		*buf++ = (decexp % 10) + '0';
   11574:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   11576:	9a19      	ldr	r2, [sp, #100]	; 0x64
   11578:	2a00      	cmp	r2, #0
   1157a:	dc1e      	bgt.n	115ba <cbvprintf+0xc26>
   1157c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1157e:	2a00      	cmp	r2, #0
   11580:	bfd4      	ite	le
   11582:	2200      	movle	r2, #0
   11584:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11586:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
   1158a:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   1158e:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   11590:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
	*buf = 0;
   11594:	f88a 2000 	strb.w	r2, [sl]
	return bps;
   11598:	e5c0      	b.n	1111c <cbvprintf+0x788>
			*buf++ = '.';
   1159a:	469a      	mov	sl, r3
   1159c:	e7bf      	b.n	1151e <cbvprintf+0xb8a>
		if (*buf++ != '0') {
   1159e:	f10d 0a75 	add.w	sl, sp, #117	; 0x75
   115a2:	e7bc      	b.n	1151e <cbvprintf+0xb8a>
		conv->pad0_pre_exp = 0;
   115a4:	2100      	movs	r1, #0
   115a6:	911a      	str	r1, [sp, #104]	; 0x68
		while (*--buf == '0') {
   115a8:	4650      	mov	r0, sl
   115aa:	f81a 1d01 	ldrb.w	r1, [sl, #-1]!
   115ae:	2930      	cmp	r1, #48	; 0x30
   115b0:	d0fa      	beq.n	115a8 <cbvprintf+0xc14>
		if (*buf != '.') {
   115b2:	292e      	cmp	r1, #46	; 0x2e
   115b4:	bf18      	it	ne
   115b6:	4682      	movne	sl, r0
   115b8:	e7b5      	b.n	11526 <cbvprintf+0xb92>
		|| (conv->pad0_pre_exp > 0);
   115ba:	2201      	movs	r2, #1
   115bc:	e7e3      	b.n	11586 <cbvprintf+0xbf2>
			bpe = bps + 5;
   115be:	f8df a13c 	ldr.w	sl, [pc, #316]	; 116fc <cbvprintf+0xd68>
		char sign = 0;
   115c2:	4606      	mov	r6, r0
			bps = "(nil)";
   115c4:	f1aa 0905 	sub.w	r9, sl, #5
   115c8:	e5aa      	b.n	11120 <cbvprintf+0x78c>
		} else if (conv->altform_0) {
   115ca:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   115cc:	bf48      	it	mi
   115ce:	3201      	addmi	r2, #1
   115d0:	e5b0      	b.n	11134 <cbvprintf+0x7a0>
					OUTC(pad);
   115d2:	4641      	mov	r1, r8
   115d4:	4638      	mov	r0, r7
   115d6:	9b03      	ldr	r3, [sp, #12]
   115d8:	4798      	blx	r3
   115da:	2800      	cmp	r0, #0
   115dc:	f6bf add0 	bge.w	11180 <cbvprintf+0x7ec>
#undef OUTS
#undef OUTC
}
   115e0:	b025      	add	sp, #148	; 0x94
   115e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   115e6:	2720      	movs	r7, #32
   115e8:	e5c7      	b.n	1117a <cbvprintf+0x7e6>
					pad = '0';
   115ea:	2730      	movs	r7, #48	; 0x30
   115ec:	e5c5      	b.n	1117a <cbvprintf+0x7e6>
			width -= (int)nj_len;
   115ee:	9308      	str	r3, [sp, #32]
   115f0:	e5cf      	b.n	11192 <cbvprintf+0x7fe>
   115f2:	eba5 0b09 	sub.w	fp, r5, r9
   115f6:	464e      	mov	r6, r9
   115f8:	eb0b 0509 	add.w	r5, fp, r9
				while (*cp != 'p') {
   115fc:	f819 0b01 	ldrb.w	r0, [r9], #1
   11600:	2870      	cmp	r0, #112	; 0x70
   11602:	d120      	bne.n	11646 <cbvprintf+0xcb2>
			while (pad_len-- > 0) {
   11604:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11606:	eb02 0905 	add.w	r9, r2, r5
   1160a:	eba9 0205 	sub.w	r2, r9, r5
   1160e:	2a00      	cmp	r2, #0
   11610:	dc43      	bgt.n	1169a <cbvprintf+0xd06>
			OUTS(cp, bpe);
   11612:	4653      	mov	r3, sl
   11614:	4632      	mov	r2, r6
			OUTS(bps, bpe);
   11616:	4641      	mov	r1, r8
   11618:	9803      	ldr	r0, [sp, #12]
   1161a:	f004 f955 	bl	158c8 <outs>
   1161e:	2800      	cmp	r0, #0
   11620:	dbde      	blt.n	115e0 <cbvprintf+0xc4c>
   11622:	9b08      	ldr	r3, [sp, #32]
   11624:	4428      	add	r0, r5
   11626:	4403      	add	r3, r0
			while (pad_len-- > 0) {
   11628:	4605      	mov	r5, r0
   1162a:	469a      	mov	sl, r3
		while (width > 0) {
   1162c:	ebaa 0305 	sub.w	r3, sl, r5
   11630:	2b00      	cmp	r3, #0
   11632:	f77f ac10 	ble.w	10e56 <cbvprintf+0x4c2>
			OUTC(' ');
   11636:	4641      	mov	r1, r8
   11638:	2020      	movs	r0, #32
   1163a:	9b03      	ldr	r3, [sp, #12]
   1163c:	4798      	blx	r3
   1163e:	2800      	cmp	r0, #0
   11640:	dbce      	blt.n	115e0 <cbvprintf+0xc4c>
   11642:	3501      	adds	r5, #1
			--width;
   11644:	e7f2      	b.n	1162c <cbvprintf+0xc98>
					OUTC(*cp++);
   11646:	4641      	mov	r1, r8
   11648:	9b03      	ldr	r3, [sp, #12]
   1164a:	4798      	blx	r3
   1164c:	2800      	cmp	r0, #0
   1164e:	dad2      	bge.n	115f6 <cbvprintf+0xc62>
   11650:	e7c6      	b.n	115e0 <cbvprintf+0xc4c>
					OUTC(*cp++);
   11652:	4641      	mov	r1, r8
   11654:	9b03      	ldr	r3, [sp, #12]
   11656:	4798      	blx	r3
   11658:	2800      	cmp	r0, #0
   1165a:	f6bf adaf 	bge.w	111bc <cbvprintf+0x828>
   1165e:	e7bf      	b.n	115e0 <cbvprintf+0xc4c>
						OUTC('0');
   11660:	4641      	mov	r1, r8
   11662:	2030      	movs	r0, #48	; 0x30
   11664:	9b03      	ldr	r3, [sp, #12]
   11666:	4798      	blx	r3
   11668:	2800      	cmp	r0, #0
   1166a:	f6bf adba 	bge.w	111e2 <cbvprintf+0x84e>
   1166e:	e7b7      	b.n	115e0 <cbvprintf+0xc4c>
						OUTC('0');
   11670:	4641      	mov	r1, r8
   11672:	2030      	movs	r0, #48	; 0x30
   11674:	9b03      	ldr	r3, [sp, #12]
   11676:	4798      	blx	r3
   11678:	3e01      	subs	r6, #1
   1167a:	e5bf      	b.n	111fc <cbvprintf+0x868>
					OUTC(*cp++);
   1167c:	4641      	mov	r1, r8
   1167e:	9b03      	ldr	r3, [sp, #12]
   11680:	4798      	blx	r3
   11682:	2800      	cmp	r0, #0
   11684:	dbac      	blt.n	115e0 <cbvprintf+0xc4c>
   11686:	463e      	mov	r6, r7
   11688:	eb0b 0507 	add.w	r5, fp, r7
				while (isdigit((int)*cp)) {
   1168c:	f817 0b01 	ldrb.w	r0, [r7], #1
   11690:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
   11694:	2a09      	cmp	r2, #9
   11696:	d9f1      	bls.n	1167c <cbvprintf+0xce8>
   11698:	e7b4      	b.n	11604 <cbvprintf+0xc70>
				OUTC('0');
   1169a:	4641      	mov	r1, r8
   1169c:	2030      	movs	r0, #48	; 0x30
   1169e:	9b03      	ldr	r3, [sp, #12]
   116a0:	4798      	blx	r3
   116a2:	2800      	cmp	r0, #0
   116a4:	db9c      	blt.n	115e0 <cbvprintf+0xc4c>
   116a6:	3501      	adds	r5, #1
   116a8:	e7af      	b.n	1160a <cbvprintf+0xc76>
			if (conv->altform_0c | conv->altform_0) {
   116aa:	06d1      	lsls	r1, r2, #27
   116ac:	d401      	bmi.n	116b2 <cbvprintf+0xd1e>
   116ae:	0712      	lsls	r2, r2, #28
   116b0:	d506      	bpl.n	116c0 <cbvprintf+0xd2c>
				OUTC('0');
   116b2:	4641      	mov	r1, r8
   116b4:	2030      	movs	r0, #48	; 0x30
   116b6:	9b03      	ldr	r3, [sp, #12]
   116b8:	4798      	blx	r3
   116ba:	2800      	cmp	r0, #0
   116bc:	db90      	blt.n	115e0 <cbvprintf+0xc4c>
   116be:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   116c0:	f89d 2062 	ldrb.w	r2, [sp, #98]	; 0x62
   116c4:	06d3      	lsls	r3, r2, #27
   116c6:	d507      	bpl.n	116d8 <cbvprintf+0xd44>
				OUTC(conv->specifier);
   116c8:	4641      	mov	r1, r8
   116ca:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
   116ce:	9b03      	ldr	r3, [sp, #12]
   116d0:	4798      	blx	r3
   116d2:	2800      	cmp	r0, #0
   116d4:	db84      	blt.n	115e0 <cbvprintf+0xc4c>
   116d6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   116d8:	9e19      	ldr	r6, [sp, #100]	; 0x64
   116da:	442e      	add	r6, r5
   116dc:	1b72      	subs	r2, r6, r5
   116de:	2a00      	cmp	r2, #0
   116e0:	dc02      	bgt.n	116e8 <cbvprintf+0xd54>
			OUTS(bps, bpe);
   116e2:	4653      	mov	r3, sl
   116e4:	464a      	mov	r2, r9
   116e6:	e796      	b.n	11616 <cbvprintf+0xc82>
				OUTC('0');
   116e8:	4641      	mov	r1, r8
   116ea:	2030      	movs	r0, #48	; 0x30
   116ec:	9b03      	ldr	r3, [sp, #12]
   116ee:	4798      	blx	r3
   116f0:	2800      	cmp	r0, #0
   116f2:	f6ff af75 	blt.w	115e0 <cbvprintf+0xc4c>
   116f6:	3501      	adds	r5, #1
   116f8:	e7f0      	b.n	116dc <cbvprintf+0xd48>
   116fa:	bf00      	nop
   116fc:	00016662 	.word	0x00016662

00011700 <nordicsemi_nrf91_init>:
   11700:	f04f 0220 	mov.w	r2, #32
   11704:	f3ef 8311 	mrs	r3, BASEPRI
   11708:	f382 8811 	msr	BASEPRI, r2
   1170c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   11710:	2101      	movs	r1, #1
   11712:	4a04      	ldr	r2, [pc, #16]	; (11724 <nordicsemi_nrf91_init+0x24>)
   11714:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   11718:	f383 8811 	msr	BASEPRI, r3
   1171c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   11720:	2000      	movs	r0, #0
   11722:	4770      	bx	lr
   11724:	50039000 	.word	0x50039000

00011728 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   11728:	b120      	cbz	r0, 11734 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1172a:	4b03      	ldr	r3, [pc, #12]	; (11738 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   1172c:	0180      	lsls	r0, r0, #6
   1172e:	f043 0301 	orr.w	r3, r3, #1
   11732:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   11734:	4770      	bx	lr
   11736:	bf00      	nop
   11738:	000163b0 	.word	0x000163b0

0001173c <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   1173c:	b507      	push	{r0, r1, r2, lr}
   1173e:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   11740:	f04f 0220 	mov.w	r2, #32
   11744:	f3ef 8311 	mrs	r3, BASEPRI
   11748:	f382 8811 	msr	BASEPRI, r2
   1174c:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   11750:	f004 f96d 	bl	15a2e <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11754:	9801      	ldr	r0, [sp, #4]
   11756:	f001 f889 	bl	1286c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1175a:	4803      	ldr	r0, [pc, #12]	; (11768 <sys_reboot+0x2c>)
   1175c:	f003 fe94 	bl	15488 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11760:	f000 fec0 	bl	124e4 <arch_cpu_idle>
   11764:	e7fc      	b.n	11760 <sys_reboot+0x24>
   11766:	bf00      	nop
   11768:	00016663 	.word	0x00016663

0001176c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1176c:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1176e:	4806      	ldr	r0, [pc, #24]	; (11788 <uart_console_init+0x1c>)
   11770:	f001 fed4 	bl	1351c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   11774:	4b05      	ldr	r3, [pc, #20]	; (1178c <uart_console_init+0x20>)
   11776:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   11778:	4805      	ldr	r0, [pc, #20]	; (11790 <uart_console_init+0x24>)
   1177a:	f001 facd 	bl	12d18 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1177e:	4804      	ldr	r0, [pc, #16]	; (11790 <uart_console_init+0x24>)
   11780:	f7ff f80c 	bl	1079c <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   11784:	2000      	movs	r0, #0
   11786:	bd08      	pop	{r3, pc}
   11788:	0001668c 	.word	0x0001668c
   1178c:	20000268 	.word	0x20000268
   11790:	00011795 	.word	0x00011795

00011794 <console_out>:
	if ('\n' == c) {
   11794:	280a      	cmp	r0, #10
{
   11796:	b538      	push	{r3, r4, r5, lr}
   11798:	4604      	mov	r4, r0
   1179a:	4d07      	ldr	r5, [pc, #28]	; (117b8 <console_out+0x24>)
	if ('\n' == c) {
   1179c:	d104      	bne.n	117a8 <console_out+0x14>
   1179e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   117a0:	6883      	ldr	r3, [r0, #8]
   117a2:	210d      	movs	r1, #13
   117a4:	685b      	ldr	r3, [r3, #4]
   117a6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   117a8:	6828      	ldr	r0, [r5, #0]
   117aa:	6883      	ldr	r3, [r0, #8]
   117ac:	b2e1      	uxtb	r1, r4
   117ae:	685b      	ldr	r3, [r3, #4]
   117b0:	4798      	blx	r3
}
   117b2:	4620      	mov	r0, r4
   117b4:	bd38      	pop	{r3, r4, r5, pc}
   117b6:	bf00      	nop
   117b8:	20000268 	.word	0x20000268

000117bc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   117bc:	4a0e      	ldr	r2, [pc, #56]	; (117f8 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   117be:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   117c0:	1a84      	subs	r4, r0, r2
{
   117c2:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   117c4:	200c      	movs	r0, #12
{
   117c6:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
   117c8:	2140      	movs	r1, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   117ca:	10a3      	asrs	r3, r4, #2
   117cc:	4c0b      	ldr	r4, [pc, #44]	; (117fc <onoff_stop+0x40>)
   117ce:	435c      	muls	r4, r3
   117d0:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
   117d2:	fb00 2004 	mla	r0, r0, r4, r2
   117d6:	4408      	add	r0, r1
   117d8:	f004 f89b 	bl	15912 <set_off_state>
	if (err < 0) {
   117dc:	1e01      	subs	r1, r0, #0
   117de:	db05      	blt.n	117ec <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
   117e0:	4b07      	ldr	r3, [pc, #28]	; (11800 <onoff_stop+0x44>)
   117e2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   117e6:	6863      	ldr	r3, [r4, #4]
   117e8:	4798      	blx	r3
	return 0;
   117ea:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
   117ec:	4628      	mov	r0, r5
   117ee:	4633      	mov	r3, r6
}
   117f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   117f4:	4718      	bx	r3
   117f6:	bf00      	nop
   117f8:	2000027c 	.word	0x2000027c
   117fc:	b6db6db7 	.word	0xb6db6db7
   11800:	000163cc 	.word	0x000163cc

00011804 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   11804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   11808:	250c      	movs	r5, #12
	size_t offset = (size_t)(mgr - data->mgr);
   1180a:	4e10      	ldr	r6, [pc, #64]	; (1184c <onoff_start+0x48>)
{
   1180c:	4680      	mov	r8, r0
	size_t offset = (size_t)(mgr - data->mgr);
   1180e:	1b84      	subs	r4, r0, r6
   11810:	10a3      	asrs	r3, r4, #2
   11812:	4c0f      	ldr	r4, [pc, #60]	; (11850 <onoff_start+0x4c>)
{
   11814:	460f      	mov	r7, r1
	size_t offset = (size_t)(mgr - data->mgr);
   11816:	435c      	muls	r4, r3
   11818:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
   1181a:	4365      	muls	r5, r4
   1181c:	f105 0040 	add.w	r0, r5, #64	; 0x40
   11820:	2140      	movs	r1, #64	; 0x40
   11822:	4430      	add	r0, r6
   11824:	f004 f88e 	bl	15944 <set_starting_state>
	if (err < 0) {
   11828:	1e01      	subs	r1, r0, #0
   1182a:	db09      	blt.n	11840 <onoff_start+0x3c>
	subdata->cb = cb;
   1182c:	4a09      	ldr	r2, [pc, #36]	; (11854 <onoff_start+0x50>)
   1182e:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
   11830:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   11834:	4b08      	ldr	r3, [pc, #32]	; (11858 <onoff_start+0x54>)
   11836:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   1183a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   1183e:	4718      	bx	r3
		notify(mgr, err);
   11840:	4640      	mov	r0, r8
   11842:	463b      	mov	r3, r7
}
   11844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   11848:	4718      	bx	r3
   1184a:	bf00      	nop
   1184c:	2000027c 	.word	0x2000027c
   11850:	b6db6db7 	.word	0xb6db6db7
   11854:	000159a7 	.word	0x000159a7
   11858:	000163cc 	.word	0x000163cc

0001185c <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   1185c:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1185e:	2200      	movs	r2, #0
   11860:	2101      	movs	r1, #1
{
   11862:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   11864:	2005      	movs	r0, #5
   11866:	f000 fde7 	bl	12438 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1186a:	2005      	movs	r0, #5
   1186c:	f000 fdc6 	bl	123fc <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   11870:	480f      	ldr	r0, [pc, #60]	; (118b0 <clk_init+0x54>)
   11872:	f001 fd3f 	bl	132f4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   11876:	4b0f      	ldr	r3, [pc, #60]	; (118b4 <clk_init+0x58>)
   11878:	4298      	cmp	r0, r3
   1187a:	d115      	bne.n	118a8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1187c:	f004 fae8 	bl	15e50 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   11880:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   11882:	490d      	ldr	r1, [pc, #52]	; (118b8 <clk_init+0x5c>)
   11884:	4630      	mov	r0, r6
   11886:	f003 fe5c 	bl	15542 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1188a:	2800      	cmp	r0, #0
   1188c:	db0b      	blt.n	118a6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1188e:	2501      	movs	r5, #1
   11890:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
   11892:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   11894:	4908      	ldr	r1, [pc, #32]	; (118b8 <clk_init+0x5c>)
   11896:	f104 001c 	add.w	r0, r4, #28
   1189a:	f003 fe52 	bl	15542 <onoff_manager_init>
		if (err < 0) {
   1189e:	2800      	cmp	r0, #0
   118a0:	db01      	blt.n	118a6 <clk_init+0x4a>
	}

	return 0;
   118a2:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   118a4:	64e5      	str	r5, [r4, #76]	; 0x4c
}
   118a6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   118a8:	f06f 0004 	mvn.w	r0, #4
   118ac:	e7fb      	b.n	118a6 <clk_init+0x4a>
   118ae:	bf00      	nop
   118b0:	000118f9 	.word	0x000118f9
   118b4:	0bad0000 	.word	0x0bad0000
   118b8:	000163dc 	.word	0x000163dc

000118bc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   118bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   118be:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   118c0:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   118c2:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   118c4:	434b      	muls	r3, r1
   118c6:	480a      	ldr	r0, [pc, #40]	; (118f0 <clkstarted_handle.constprop.0+0x34>)
   118c8:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   118ca:	3340      	adds	r3, #64	; 0x40
	void *user_data = sub_data->user_data;
   118cc:	e9d4 520e 	ldrd	r5, r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   118d0:	4418      	add	r0, r3
	sub_data->cb = NULL;
   118d2:	63a6      	str	r6, [r4, #56]	; 0x38
	void *user_data = sub_data->user_data;
   118d4:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   118d6:	f004 f853 	bl	15980 <set_on_state>
	if (callback) {
   118da:	b135      	cbz	r5, 118ea <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   118dc:	462b      	mov	r3, r5
   118de:	9a01      	ldr	r2, [sp, #4]
   118e0:	4804      	ldr	r0, [pc, #16]	; (118f4 <clkstarted_handle.constprop.0+0x38>)
}
   118e2:	b002      	add	sp, #8
   118e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   118e8:	4718      	bx	r3
}
   118ea:	b002      	add	sp, #8
   118ec:	bd70      	pop	{r4, r5, r6, pc}
   118ee:	bf00      	nop
   118f0:	2000027c 	.word	0x2000027c
   118f4:	200000bc 	.word	0x200000bc

000118f8 <clock_event_handler>:
	switch (event) {
   118f8:	b110      	cbz	r0, 11900 <clock_event_handler+0x8>
   118fa:	2801      	cmp	r0, #1
   118fc:	d004      	beq.n	11908 <clock_event_handler+0x10>
   118fe:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   11900:	4b03      	ldr	r3, [pc, #12]	; (11910 <clock_event_handler+0x18>)
   11902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   11904:	075b      	lsls	r3, r3, #29
   11906:	d101      	bne.n	1190c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   11908:	f7ff bfd8 	b.w	118bc <clkstarted_handle.constprop.0>
}
   1190c:	4770      	bx	lr
   1190e:	bf00      	nop
   11910:	2000027c 	.word	0x2000027c

00011914 <generic_hfclk_start>:
{
   11914:	b508      	push	{r3, lr}
   11916:	f04f 0320 	mov.w	r3, #32
   1191a:	f3ef 8111 	mrs	r1, BASEPRI
   1191e:	f383 8811 	msr	BASEPRI, r3
   11922:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   11926:	4a12      	ldr	r2, [pc, #72]	; (11970 <generic_hfclk_start+0x5c>)
   11928:	6813      	ldr	r3, [r2, #0]
   1192a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1192e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   11932:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   11934:	d00c      	beq.n	11950 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   11936:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   1193a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1193e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   11942:	f013 0301 	ands.w	r3, r3, #1
   11946:	d003      	beq.n	11950 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   11948:	480a      	ldr	r0, [pc, #40]	; (11974 <generic_hfclk_start+0x60>)
   1194a:	f004 f819 	bl	15980 <set_on_state>
			already_started = true;
   1194e:	2301      	movs	r3, #1
	__asm__ volatile(
   11950:	f381 8811 	msr	BASEPRI, r1
   11954:	f3bf 8f6f 	isb	sy
	if (already_started) {
   11958:	b123      	cbz	r3, 11964 <generic_hfclk_start+0x50>
}
   1195a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1195e:	2000      	movs	r0, #0
   11960:	f7ff bfac 	b.w	118bc <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11964:	2001      	movs	r0, #1
}
   11966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1196a:	f001 bcd3 	b.w	13314 <nrfx_clock_start>
   1196e:	bf00      	nop
   11970:	200002cc 	.word	0x200002cc
   11974:	200002bc 	.word	0x200002bc

00011978 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   11978:	4b07      	ldr	r3, [pc, #28]	; (11998 <generic_hfclk_stop+0x20>)
   1197a:	e8d3 2fef 	ldaex	r2, [r3]
   1197e:	f022 0102 	bic.w	r1, r2, #2
   11982:	e8c3 1fe0 	stlex	r0, r1, [r3]
   11986:	2800      	cmp	r0, #0
   11988:	d1f7      	bne.n	1197a <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1198a:	07d3      	lsls	r3, r2, #31
   1198c:	d402      	bmi.n	11994 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1198e:	2001      	movs	r0, #1
   11990:	f001 bcf2 	b.w	13378 <nrfx_clock_stop>
}
   11994:	4770      	bx	lr
   11996:	bf00      	nop
   11998:	200002cc 	.word	0x200002cc

0001199c <api_blocking_start>:
{
   1199c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1199e:	2200      	movs	r2, #0
   119a0:	2301      	movs	r3, #1
   119a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   119a6:	466b      	mov	r3, sp
   119a8:	4a08      	ldr	r2, [pc, #32]	; (119cc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   119aa:	f8cd d000 	str.w	sp, [sp]
   119ae:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   119b2:	f004 f81f 	bl	159f4 <api_start>
	if (err < 0) {
   119b6:	2800      	cmp	r0, #0
   119b8:	db05      	blt.n	119c6 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   119ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   119be:	2300      	movs	r3, #0
   119c0:	4668      	mov	r0, sp
   119c2:	f002 fba7 	bl	14114 <z_impl_k_sem_take>
}
   119c6:	b005      	add	sp, #20
   119c8:	f85d fb04 	ldr.w	pc, [sp], #4
   119cc:	000159c7 	.word	0x000159c7

000119d0 <z_nrf_clock_control_lf_on>:
{
   119d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   119d4:	2201      	movs	r2, #1
   119d6:	4606      	mov	r6, r0
   119d8:	4939      	ldr	r1, [pc, #228]	; (11ac0 <z_nrf_clock_control_lf_on+0xf0>)
   119da:	e8d1 3fef 	ldaex	r3, [r1]
   119de:	e8c1 2fe0 	stlex	r0, r2, [r1]
   119e2:	2800      	cmp	r0, #0
   119e4:	d1f9      	bne.n	119da <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   119e6:	b933      	cbnz	r3, 119f6 <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   119e8:	4936      	ldr	r1, [pc, #216]	; (11ac4 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
   119ea:	4837      	ldr	r0, [pc, #220]	; (11ac8 <z_nrf_clock_control_lf_on+0xf8>)
   119ec:	604b      	str	r3, [r1, #4]
   119ee:	60cb      	str	r3, [r1, #12]
   119f0:	608a      	str	r2, [r1, #8]
   119f2:	f003 fdb9 	bl	15568 <onoff_request>
	switch (start_mode) {
   119f6:	1e73      	subs	r3, r6, #1
   119f8:	2b01      	cmp	r3, #1
   119fa:	d832      	bhi.n	11a62 <z_nrf_clock_control_lf_on+0x92>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   119fc:	2e01      	cmp	r6, #1
   119fe:	d107      	bne.n	11a10 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   11a00:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11a04:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   11a08:	f003 0303 	and.w	r3, r3, #3
   11a0c:	2b02      	cmp	r3, #2
   11a0e:	d028      	beq.n	11a62 <z_nrf_clock_control_lf_on+0x92>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   11a10:	f004 fb15 	bl	1603e <k_is_in_isr>
   11a14:	4604      	mov	r4, r0
   11a16:	b918      	cbnz	r0, 11a20 <z_nrf_clock_control_lf_on+0x50>
	return !z_sys_post_kernel;
   11a18:	4b2c      	ldr	r3, [pc, #176]	; (11acc <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
   11a1a:	781b      	ldrb	r3, [r3, #0]
   11a1c:	2b00      	cmp	r3, #0
   11a1e:	d147      	bne.n	11ab0 <z_nrf_clock_control_lf_on+0xe0>
	__asm__ volatile(
   11a20:	f04f 0320 	mov.w	r3, #32
   11a24:	f3ef 8511 	mrs	r5, BASEPRI
   11a28:	f383 8811 	msr	BASEPRI, r3
   11a2c:	f3bf 8f6f 	isb	sy
   11a30:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11a32:	4f27      	ldr	r7, [pc, #156]	; (11ad0 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11a34:	f8df 809c 	ldr.w	r8, [pc, #156]	; 11ad4 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11a38:	f8df 909c 	ldr.w	r9, [pc, #156]	; 11ad8 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   11a3c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   11a40:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   11a44:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   11a48:	03d2      	lsls	r2, r2, #15
   11a4a:	d50c      	bpl.n	11a66 <z_nrf_clock_control_lf_on+0x96>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   11a4c:	f003 0303 	and.w	r3, r3, #3
   11a50:	2b02      	cmp	r3, #2
   11a52:	d001      	beq.n	11a58 <z_nrf_clock_control_lf_on+0x88>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   11a54:	2e01      	cmp	r6, #1
   11a56:	d106      	bne.n	11a66 <z_nrf_clock_control_lf_on+0x96>
	if (isr_mode) {
   11a58:	b324      	cbz	r4, 11aa4 <z_nrf_clock_control_lf_on+0xd4>
	__asm__ volatile(
   11a5a:	f385 8811 	msr	BASEPRI, r5
   11a5e:	f3bf 8f6f 	isb	sy
}
   11a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   11a66:	b1c4      	cbz	r4, 11a9a <z_nrf_clock_control_lf_on+0xca>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   11a68:	4628      	mov	r0, r5
   11a6a:	f000 fd49 	bl	12500 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   11a6e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   11a72:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   11a76:	b2db      	uxtb	r3, r3
   11a78:	2b01      	cmp	r3, #1
   11a7a:	d1df      	bne.n	11a3c <z_nrf_clock_control_lf_on+0x6c>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   11a7c:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   11a7e:	2900      	cmp	r1, #0
   11a80:	d0dc      	beq.n	11a3c <z_nrf_clock_control_lf_on+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11a82:	2100      	movs	r1, #0
   11a84:	6039      	str	r1, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   11a86:	6839      	ldr	r1, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   11a88:	2102      	movs	r1, #2
   11a8a:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
   11a8e:	2220      	movs	r2, #32
   11a90:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11a94:	f8c9 3000 	str.w	r3, [r9]
}
   11a98:	e7d0      	b.n	11a3c <z_nrf_clock_control_lf_on+0x6c>
	return z_impl_k_sleep(timeout);
   11a9a:	2100      	movs	r1, #0
   11a9c:	2021      	movs	r0, #33	; 0x21
   11a9e:	f002 faf1 	bl	14084 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   11aa2:	e7e4      	b.n	11a6e <z_nrf_clock_control_lf_on+0x9e>
    p_reg->INTENSET = mask;
   11aa4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11aa8:	2202      	movs	r2, #2
   11aaa:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   11aae:	e7d8      	b.n	11a62 <z_nrf_clock_control_lf_on+0x92>
    p_reg->INTENCLR = mask;
   11ab0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   11ab4:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
   11ab6:	4605      	mov	r5, r0
   11ab8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   11abc:	e7b9      	b.n	11a32 <z_nrf_clock_control_lf_on+0x62>
   11abe:	bf00      	nop
   11ac0:	200002d0 	.word	0x200002d0
   11ac4:	2000026c 	.word	0x2000026c
   11ac8:	20000298 	.word	0x20000298
   11acc:	20000881 	.word	0x20000881
   11ad0:	50005104 	.word	0x50005104
   11ad4:	e000e100 	.word	0xe000e100
   11ad8:	50005008 	.word	0x50005008

00011adc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   11adc:	4a04      	ldr	r2, [pc, #16]	; (11af0 <sys_clock_timeout_handler+0x14>)
   11ade:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   11ae0:	1ac9      	subs	r1, r1, r3
   11ae2:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   11ae6:	4403      	add	r3, r0
   11ae8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   11aea:	f002 bce3 	b.w	144b4 <z_clock_announce>
   11aee:	bf00      	nop
   11af0:	200002e0 	.word	0x200002e0

00011af4 <set_absolute_alarm>:
{
   11af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11af8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11afc:	f04f 0900 	mov.w	r9, #0
   11b00:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   11b02:	f100 0450 	add.w	r4, r0, #80	; 0x50
   11b06:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
   11b0a:	00a4      	lsls	r4, r4, #2
   11b0c:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
   11b10:	b2a4      	uxth	r4, r4
   11b12:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
   11b16:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   11b1a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 11b88 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   11b1e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11b22:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   11b26:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   11b28:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   11b2c:	eba3 030a 	sub.w	r3, r3, sl
   11b30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11b34:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   11b38:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   11b3a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   11b3e:	d102      	bne.n	11b46 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   11b40:	2013      	movs	r0, #19
   11b42:	f004 fa82 	bl	1604a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   11b46:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   11b4a:	1aab      	subs	r3, r5, r2
   11b4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   11b50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   11b54:	bf88      	it	hi
   11b56:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11b58:	f8c4 9000 	str.w	r9, [r4]
   11b5c:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   11b5e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   11b62:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   11b66:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   11b6a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   11b6e:	459a      	cmp	sl, r3
   11b70:	d006      	beq.n	11b80 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   11b72:	1aeb      	subs	r3, r5, r3
   11b74:	3b02      	subs	r3, #2
   11b76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   11b7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   11b7e:	d801      	bhi.n	11b84 <set_absolute_alarm+0x90>
}
   11b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   11b84:	462b      	mov	r3, r5
   11b86:	e7cf      	b.n	11b28 <set_absolute_alarm+0x34>
   11b88:	50015000 	.word	0x50015000

00011b8c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   11b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11b8e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11b90:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11b92:	4e0f      	ldr	r6, [pc, #60]	; (11bd0 <rtc_nrf_isr+0x44>)
   11b94:	4b0f      	ldr	r3, [pc, #60]	; (11bd4 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   11b96:	4a10      	ldr	r2, [pc, #64]	; (11bd8 <rtc_nrf_isr+0x4c>)
   11b98:	4618      	mov	r0, r3
   11b9a:	681d      	ldr	r5, [r3, #0]
   11b9c:	b104      	cbz	r4, 11ba0 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   11b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ba0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   11ba4:	03c9      	lsls	r1, r1, #15
   11ba6:	d5fa      	bpl.n	11b9e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ba8:	6831      	ldr	r1, [r6, #0]
   11baa:	2900      	cmp	r1, #0
   11bac:	d0f7      	beq.n	11b9e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   11bae:	6034      	str	r4, [r6, #0]
   11bb0:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   11bb2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   11bb6:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   11bba:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   11bbc:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   11bc0:	b125      	cbz	r5, 11bcc <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   11bc2:	2000      	movs	r0, #0
   11bc4:	685a      	ldr	r2, [r3, #4]
   11bc6:	601f      	str	r7, [r3, #0]
   11bc8:	47a8      	blx	r5
   11bca:	e7e3      	b.n	11b94 <rtc_nrf_isr+0x8>
   11bcc:	6005      	str	r5, [r0, #0]
}
   11bce:	e7e6      	b.n	11b9e <rtc_nrf_isr+0x12>
   11bd0:	50015140 	.word	0x50015140
   11bd4:	200002d4 	.word	0x200002d4
   11bd8:	50015000 	.word	0x50015000

00011bdc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
   11bdc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   11bde:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   11be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   11be4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   11be8:	4d0d      	ldr	r5, [pc, #52]	; (11c20 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   11bea:	2101      	movs	r1, #1
   11bec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   11bf0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   11bf4:	4b0b      	ldr	r3, [pc, #44]	; (11c24 <z_clock_driver_init+0x48>)
   11bf6:	2015      	movs	r0, #21
   11bf8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   11bfc:	4622      	mov	r2, r4
   11bfe:	f000 fc1b 	bl	12438 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   11c02:	2015      	movs	r0, #21
   11c04:	f000 fbfa 	bl	123fc <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   11c08:	2301      	movs	r3, #1
   11c0a:	4a07      	ldr	r2, [pc, #28]	; (11c28 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   11c0c:	2002      	movs	r0, #2
   11c0e:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   11c10:	4a06      	ldr	r2, [pc, #24]	; (11c2c <z_clock_driver_init+0x50>)
   11c12:	602b      	str	r3, [r5, #0]
   11c14:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   11c16:	f7ff fedb 	bl	119d0 <z_nrf_clock_control_lf_on>

	return 0;
}
   11c1a:	4620      	mov	r0, r4
   11c1c:	bd38      	pop	{r3, r4, r5, pc}
   11c1e:	bf00      	nop
   11c20:	50015000 	.word	0x50015000
   11c24:	e000e100 	.word	0xe000e100
   11c28:	50015008 	.word	0x50015008
   11c2c:	200002dc 	.word	0x200002dc

00011c30 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   11c30:	4b13      	ldr	r3, [pc, #76]	; (11c80 <z_clock_set_timeout+0x50>)
   11c32:	f1b0 3fff 	cmp.w	r0, #4294967295
   11c36:	bf08      	it	eq
   11c38:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11c3a:	3801      	subs	r0, #1
   11c3c:	2800      	cmp	r0, #0
   11c3e:	dd1c      	ble.n	11c7a <z_clock_set_timeout+0x4a>
   11c40:	4298      	cmp	r0, r3
   11c42:	bfa8      	it	ge
   11c44:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   11c46:	4b0f      	ldr	r3, [pc, #60]	; (11c84 <z_clock_set_timeout+0x54>)
   11c48:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   11c4c:	4b0e      	ldr	r3, [pc, #56]	; (11c88 <z_clock_set_timeout+0x58>)
   11c4e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   11c50:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   11c52:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   11c56:	bf18      	it	ne
   11c58:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   11c5a:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11c5e:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   11c60:	4a0a      	ldr	r2, [pc, #40]	; (11c8c <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   11c62:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   11c64:	480a      	ldr	r0, [pc, #40]	; (11c90 <z_clock_set_timeout+0x60>)
   11c66:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   11c68:	2000      	movs	r0, #0
   11c6a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   11c6c:	4a04      	ldr	r2, [pc, #16]	; (11c80 <z_clock_set_timeout+0x50>)
   11c6e:	4293      	cmp	r3, r2
   11c70:	bf94      	ite	ls
   11c72:	18c9      	addls	r1, r1, r3
   11c74:	1889      	addhi	r1, r1, r2
   11c76:	f7ff bf3d 	b.w	11af4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   11c7a:	2000      	movs	r0, #0
   11c7c:	e7e3      	b.n	11c46 <z_clock_set_timeout+0x16>
   11c7e:	bf00      	nop
   11c80:	007fffff 	.word	0x007fffff
   11c84:	50015000 	.word	0x50015000
   11c88:	200002e0 	.word	0x200002e0
   11c8c:	200002d4 	.word	0x200002d4
   11c90:	00011add 	.word	0x00011add

00011c94 <z_clock_elapsed>:
	__asm__ volatile(
   11c94:	f04f 0220 	mov.w	r2, #32
   11c98:	f3ef 8311 	mrs	r3, BASEPRI
   11c9c:	f382 8811 	msr	BASEPRI, r2
   11ca0:	f3bf 8f6f 	isb	sy
   11ca4:	4a06      	ldr	r2, [pc, #24]	; (11cc0 <z_clock_elapsed+0x2c>)
   11ca6:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   11caa:	4a06      	ldr	r2, [pc, #24]	; (11cc4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   11cac:	6812      	ldr	r2, [r2, #0]
   11cae:	1a80      	subs	r0, r0, r2
   11cb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   11cb4:	f383 8811 	msr	BASEPRI, r3
   11cb8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   11cbc:	4770      	bx	lr
   11cbe:	bf00      	nop
   11cc0:	50015000 	.word	0x50015000
   11cc4:	200002e0 	.word	0x200002e0

00011cc8 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, uint32_t perm)
{
   11cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11cca:	2800      	cmp	r0, #0
{
   11ccc:	461c      	mov	r4, r3
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
   11cce:	bf14      	ite	ne
   11cd0:	f44f 5300 	movne.w	r3, #8192	; 0x2000
   11cd4:	f44f 4300 	moveq.w	r3, #32768	; 0x8000

	__ASSERT_NO_MSG(end >= start);
	if (end <= start) {
   11cd8:	428a      	cmp	r2, r1
   11cda:	d941      	bls.n	11d60 <config_regions+0x98>
   11cdc:	460d      	mov	r5, r1
   11cde:	4f21      	ldr	r7, [pc, #132]	; (11d64 <config_regions+0x9c>)
		return;
	}

	for (size_t i = start; i < end; i++) {
		if (ram) {
   11ce0:	2800      	cmp	r0, #0
   11ce2:	d03a      	beq.n	11d5a <config_regions+0x92>
			NRF_SPU->RAMREGION[i].PERM = perm;
   11ce4:	f505 76e0 	add.w	r6, r5, #448	; 0x1c0
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11ce8:	f847 4026 	str.w	r4, [r7, r6, lsl #2]
	for (size_t i = start; i < end; i++) {
   11cec:	1c6e      	adds	r6, r5, #1
   11cee:	42b2      	cmp	r2, r6
   11cf0:	d131      	bne.n	11d56 <config_regions+0x8e>
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
   11cf2:	435a      	muls	r2, r3
   11cf4:	481c      	ldr	r0, [pc, #112]	; (11d68 <config_regions+0xa0>)
   11cf6:	434b      	muls	r3, r1
   11cf8:	9200      	str	r2, [sp, #0]
   11cfa:	462a      	mov	r2, r5
   11cfc:	f003 fbc4 	bl	15488 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
   11d00:	4b1a      	ldr	r3, [pc, #104]	; (11d6c <config_regions+0xa4>)
   11d02:	f014 0f10 	tst.w	r4, #16
   11d06:	491a      	ldr	r1, [pc, #104]	; (11d70 <config_regions+0xa8>)
   11d08:	481a      	ldr	r0, [pc, #104]	; (11d74 <config_regions+0xac>)
   11d0a:	bf08      	it	eq
   11d0c:	4619      	moveq	r1, r3
   11d0e:	f003 fbbb 	bl	15488 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
   11d12:	f014 0f04 	tst.w	r4, #4
   11d16:	bf14      	ite	ne
   11d18:	2172      	movne	r1, #114	; 0x72
   11d1a:	212d      	moveq	r1, #45	; 0x2d
   11d1c:	4816      	ldr	r0, [pc, #88]	; (11d78 <config_regions+0xb0>)
   11d1e:	f003 fbb3 	bl	15488 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
   11d22:	f014 0f02 	tst.w	r4, #2
   11d26:	bf14      	ite	ne
   11d28:	2177      	movne	r1, #119	; 0x77
   11d2a:	212d      	moveq	r1, #45	; 0x2d
   11d2c:	4812      	ldr	r0, [pc, #72]	; (11d78 <config_regions+0xb0>)
   11d2e:	f003 fbab 	bl	15488 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
   11d32:	f014 0f01 	tst.w	r4, #1
   11d36:	bf0c      	ite	eq
   11d38:	212d      	moveq	r1, #45	; 0x2d
   11d3a:	2178      	movne	r1, #120	; 0x78
   11d3c:	480e      	ldr	r0, [pc, #56]	; (11d78 <config_regions+0xb0>)
   11d3e:	f003 fba3 	bl	15488 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
   11d42:	216c      	movs	r1, #108	; 0x6c
   11d44:	480c      	ldr	r0, [pc, #48]	; (11d78 <config_regions+0xb0>)
   11d46:	f003 fb9f 	bl	15488 <printk>
	PRINT("\n");
   11d4a:	480c      	ldr	r0, [pc, #48]	; (11d7c <config_regions+0xb4>)
}
   11d4c:	b003      	add	sp, #12
   11d4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
   11d52:	f003 bb99 	b.w	15488 <printk>
   11d56:	4635      	mov	r5, r6
   11d58:	e7c2      	b.n	11ce0 <config_regions+0x18>
			NRF_SPU->FLASHREGION[i].PERM = perm;
   11d5a:	f505 76c0 	add.w	r6, r5, #384	; 0x180
   11d5e:	e7c3      	b.n	11ce8 <config_regions+0x20>
}
   11d60:	b003      	add	sp, #12
   11d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11d64:	50003000 	.word	0x50003000
   11d68:	000166b2 	.word	0x000166b2
   11d6c:	000166a6 	.word	0x000166a6
   11d70:	0001669d 	.word	0x0001669d
   11d74:	00016831 	.word	0x00016831
   11d78:	000166cc 	.word	0x000166cc
   11d7c:	00016a07 	.word	0x00016a07

00011d80 <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(uint8_t id, bool dma_present)
   11d80:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
   11d82:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   11d84:	2b00      	cmp	r3, #0
   11d86:	db0c      	blt.n	11da2 <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11d88:	2201      	movs	r2, #1
   11d8a:	f000 011f 	and.w	r1, r0, #31
   11d8e:	408a      	lsls	r2, r1
   11d90:	095b      	lsrs	r3, r3, #5
   11d92:	4910      	ldr	r1, [pc, #64]	; (11dd4 <spm_config_peripheral.constprop.0+0x54>)
   11d94:	3320      	adds	r3, #32
   11d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11d9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11d9e:	f3bf 8f6f 	isb	sy
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11da2:	0083      	lsls	r3, r0, #2
   11da4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   11da8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11dac:	2831      	cmp	r0, #49	; 0x31
	const uint32_t perm = NRF_SPU->PERIPHID[id].PERM;
   11dae:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
   11db2:	d006      	beq.n	11dc2 <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
   11db4:	2a00      	cmp	r2, #0
   11db6:	da07      	bge.n	11dc8 <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
   11db8:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
   11dbc:	3a02      	subs	r2, #2
   11dbe:	2a01      	cmp	r2, #1
   11dc0:	d802      	bhi.n	11dc8 <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
   11dc2:	4a05      	ldr	r2, [pc, #20]	; (11dd8 <spm_config_peripheral.constprop.0+0x58>)
   11dc4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, IRQ_TARGET_STATE_NON_SECURE);
   11dc8:	2101      	movs	r1, #1
   11dca:	f003 fee1 	bl	15b90 <irq_target_state_set>
	return 0;
}
   11dce:	2000      	movs	r0, #0
   11dd0:	bd08      	pop	{r3, pc}
   11dd2:	bf00      	nop
   11dd4:	e000e100 	.word	0xe000e100
   11dd8:	80000100 	.word	0x80000100

00011ddc <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
   11ddc:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	uint32_t *vtor_ns = (uint32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11dde:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
{
   11de2:	b085      	sub	sp, #20
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   11de4:	4d2e      	ldr	r5, [pc, #184]	; (11ea0 <spm_jump+0xc4>)
	PRINT("SPM: NS image at 0x%x\n", (uint32_t)vtor_ns);
   11de6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   11dea:	482e      	ldr	r0, [pc, #184]	; (11ea4 <spm_jump+0xc8>)
   11dec:	f003 fb4c 	bl	15488 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
   11df0:	6821      	ldr	r1, [r4, #0]
   11df2:	482d      	ldr	r0, [pc, #180]	; (11ea8 <spm_jump+0xcc>)
   11df4:	f003 fb48 	bl	15488 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
   11df8:	6829      	ldr	r1, [r5, #0]
   11dfa:	482c      	ldr	r0, [pc, #176]	; (11eac <spm_jump+0xd0>)
   11dfc:	f003 fb44 	bl	15488 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11e00:	2210      	movs	r2, #16
   11e02:	2100      	movs	r1, #0
   11e04:	4668      	mov	r0, sp
   11e06:	f003 ff9c 	bl	15d42 <memset>
		.vtor_ns = (uint32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
   11e0a:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
   11e0c:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
   11e0e:	9300      	str	r3, [sp, #0]
   11e10:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
   11e12:	f000 ff0b 	bl	12c2c <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
   11e16:	2001      	movs	r0, #1
   11e18:	f000 ff38 	bl	12c8c <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
   11e1c:	2000      	movs	r0, #0
   11e1e:	f000 ff21 	bl	12c64 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
   11e22:	2000      	movs	r0, #0
   11e24:	f000 ff46 	bl	12cb4 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
   11e28:	2101      	movs	r1, #1
   11e2a:	2000      	movs	r0, #0
   11e2c:	f000 ff60 	bl	12cf0 <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
   11e30:	f000 ff54 	bl	12cdc <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11e34:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
   11e36:	481e      	ldr	r0, [pc, #120]	; (11eb0 <spm_jump+0xd4>)
   11e38:	f003 fb26 	bl	15488 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
   11e3c:	2008      	movs	r0, #8
   11e3e:	f7ff ff9f 	bl	11d80 <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
   11e42:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
   11e46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11e4a:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
   11e4e:	0864      	lsrs	r4, r4, #1
   11e50:	0064      	lsls	r4, r4, #1
   11e52:	4620      	mov	r0, r4
   11e54:	4621      	mov	r1, r4
   11e56:	4622      	mov	r2, r4
   11e58:	4623      	mov	r3, r4
   11e5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   11e5e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   11e62:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   11e66:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   11e6a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   11e6e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   11e72:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   11e76:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   11e7a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   11e7e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   11e82:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   11e86:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   11e8a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   11e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   11e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   11e96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   11e9a:	f7fe fc49 	bl	10730 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
   11e9e:	bf00      	nop
   11ea0:	0001c204 	.word	0x0001c204
   11ea4:	000166cf 	.word	0x000166cf
   11ea8:	000166e6 	.word	0x000166e6
   11eac:	000166fb 	.word	0x000166fb
   11eb0:	00016719 	.word	0x00016719

00011eb4 <spm_config>:
		      (uint32_t)reset_ns);
	}
}

void spm_config(void)
{
   11eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
   11eb8:	483b      	ldr	r0, [pc, #236]	; (11fa8 <spm_config+0xf4>)
   11eba:	f003 fae5 	bl	15488 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
   11ebe:	2100      	movs	r1, #0
   11ec0:	f240 1317 	movw	r3, #279	; 0x117
   11ec4:	4608      	mov	r0, r1
   11ec6:	2203      	movs	r2, #3
   11ec8:	f7ff fefe 	bl	11cc8 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
   11ecc:	f240 1307 	movw	r3, #263	; 0x107
   11ed0:	2220      	movs	r2, #32
   11ed2:	2103      	movs	r1, #3
   11ed4:	2000      	movs	r0, #0
   11ed6:	f7ff fef7 	bl	11cc8 <config_regions>
	PRINT("\n");
   11eda:	4834      	ldr	r0, [pc, #208]	; (11fac <spm_config+0xf8>)
   11edc:	f003 fad4 	bl	15488 <printk>
	uint32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
   11ee0:	4b33      	ldr	r3, [pc, #204]	; (11fb0 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11ee2:	4a34      	ldr	r2, [pc, #208]	; (11fb4 <spm_config+0x100>)
   11ee4:	f3c3 31c4 	ubfx	r1, r3, #15, #5
   11ee8:	f3c3 030e 	ubfx	r3, r3, #0, #15
   11eec:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11ef0:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
   11ef4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
   11ef8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
   11efc:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
   11f00:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
   11f04:	482c      	ldr	r0, [pc, #176]	; (11fb8 <spm_config+0x104>)
   11f06:	0152      	lsls	r2, r2, #5
   11f08:	f003 fabe 	bl	15488 <printk>
	PRINT("\n");
   11f0c:	4827      	ldr	r0, [pc, #156]	; (11fac <spm_config+0xf8>)
   11f0e:	f003 fabb 	bl	15488 <printk>
	int err = spm_secure_services_init();
   11f12:	f003 fd8d 	bl	15a30 <spm_secure_services_init>
	if (err != 0) {
   11f16:	4601      	mov	r1, r0
   11f18:	b110      	cbz	r0, 11f20 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
   11f1a:	4828      	ldr	r0, [pc, #160]	; (11fbc <spm_config+0x108>)
   11f1c:	f003 fab4 	bl	15488 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11f20:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
   11f22:	4827      	ldr	r0, [pc, #156]	; (11fc0 <spm_config+0x10c>)
   11f24:	f003 fab0 	bl	15488 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
   11f28:	f240 1317 	movw	r3, #279	; 0x117
   11f2c:	2208      	movs	r2, #8
   11f2e:	2100      	movs	r1, #0
   11f30:	2001      	movs	r0, #1
   11f32:	f7ff fec9 	bl	11cc8 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
   11f36:	4d1f      	ldr	r5, [pc, #124]	; (11fb4 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
   11f38:	f240 1307 	movw	r3, #263	; 0x107
   11f3c:	2220      	movs	r2, #32
   11f3e:	2108      	movs	r1, #8
   11f40:	2001      	movs	r0, #1
   11f42:	f7ff fec1 	bl	11cc8 <config_regions>
	PRINT("\n");
   11f46:	4819      	ldr	r0, [pc, #100]	; (11fac <spm_config+0xf8>)
   11f48:	f003 fa9e 	bl	15488 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
   11f4c:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
   11f50:	481c      	ldr	r0, [pc, #112]	; (11fc4 <spm_config+0x110>)
   11f52:	f003 fa99 	bl	15488 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
   11f56:	4f1c      	ldr	r7, [pc, #112]	; (11fc8 <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
   11f58:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
   11f5c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11fdc <spm_config+0x128>
   11f60:	4d1a      	ldr	r5, [pc, #104]	; (11fcc <spm_config+0x118>)
   11f62:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11fe0 <spm_config+0x12c>
   11f66:	796e      	ldrb	r6, [r5, #5]
   11f68:	4621      	mov	r1, r4
   11f6a:	2e00      	cmp	r6, #0
   11f6c:	bf14      	ite	ne
   11f6e:	463b      	movne	r3, r7
   11f70:	4643      	moveq	r3, r8
   11f72:	4648      	mov	r0, r9
   11f74:	682a      	ldr	r2, [r5, #0]
   11f76:	f003 fa87 	bl	15488 <printk>
		if (!periph[i].nonsecure) {
   11f7a:	b966      	cbnz	r6, 11f96 <spm_config+0xe2>
			PRINT("\tSKIP\n");
   11f7c:	4814      	ldr	r0, [pc, #80]	; (11fd0 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11f7e:	3401      	adds	r4, #1
			PRINT("\tOK\n");
   11f80:	f003 fa82 	bl	15488 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
   11f84:	2c1a      	cmp	r4, #26
   11f86:	f105 0508 	add.w	r5, r5, #8
   11f8a:	d1ec      	bne.n	11f66 <spm_config+0xb2>
	PRINT("\n");
   11f8c:	4807      	ldr	r0, [pc, #28]	; (11fac <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
   11f8e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
   11f92:	f003 ba79 	b.w	15488 <printk>
		err = spm_config_peripheral(periph[i].id, false);
   11f96:	7928      	ldrb	r0, [r5, #4]
   11f98:	f7ff fef2 	bl	11d80 <spm_config_peripheral.constprop.0>
		if (err) {
   11f9c:	b108      	cbz	r0, 11fa2 <spm_config+0xee>
			PRINT("\tERROR\n");
   11f9e:	480d      	ldr	r0, [pc, #52]	; (11fd4 <spm_config+0x120>)
   11fa0:	e7ed      	b.n	11f7e <spm_config+0xca>
			PRINT("\tOK\n");
   11fa2:	480d      	ldr	r0, [pc, #52]	; (11fd8 <spm_config+0x124>)
   11fa4:	e7eb      	b.n	11f7e <spm_config+0xca>
   11fa6:	bf00      	nop
   11fa8:	0001674f 	.word	0x0001674f
   11fac:	00016a07 	.word	0x00016a07
   11fb0:	00017fe0 	.word	0x00017fe0
   11fb4:	50003000 	.word	0x50003000
   11fb8:	00016773 	.word	0x00016773
   11fbc:	000167b9 	.word	0x000167b9
   11fc0:	000167e9 	.word	0x000167e9
   11fc4:	0001680b 	.word	0x0001680b
   11fc8:	00016744 	.word	0x00016744
   11fcc:	000163e8 	.word	0x000163e8
   11fd0:	00016834 	.word	0x00016834
   11fd4:	0001683b 	.word	0x0001683b
   11fd8:	00016843 	.word	0x00016843
   11fdc:	000166aa 	.word	0x000166aa
   11fe0:	00016827 	.word	0x00016827

00011fe4 <fw_info_find>:
 *                              at the allowed offsets from firmware_address.
 *
 * @return  A pointer to the fw_info struct if found. Otherwise NULL.
 */
static inline const struct fw_info *fw_info_find(uint32_t firmware_address)
{
   11fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11fe8:	4607      	mov	r7, r0
	const struct fw_info *finfo;

	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   11fea:	2600      	movs	r6, #0
{
   11fec:	b085      	sub	sp, #20
   11fee:	f8df 9034 	ldr.w	r9, [pc, #52]	; 12024 <fw_info_find+0x40>
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11ff2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 12028 <fw_info_find+0x44>
   11ff6:	ad01      	add	r5, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
   11ff8:	f859 4b04 	ldr.w	r4, [r9], #4
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   11ffc:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
	finfo = (const struct fw_info *)(fw_info_addr);
   12000:	443c      	add	r4, r7
	const uint32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
   12002:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
   12006:	220c      	movs	r2, #12
   12008:	4629      	mov	r1, r5
   1200a:	4620      	mov	r0, r4
   1200c:	f003 fe47 	bl	15c9e <memcmp>
   12010:	b900      	cbnz	r0, 12014 <fw_info_find+0x30>
		if (finfo) {
   12012:	b91c      	cbnz	r4, 1201c <fw_info_find+0x38>
	for (uint32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
   12014:	3601      	adds	r6, #1
   12016:	2e05      	cmp	r6, #5
   12018:	d1ee      	bne.n	11ff8 <fw_info_find+0x14>
			return finfo;
		}
	}
	return NULL;
   1201a:	2400      	movs	r4, #0
}
   1201c:	4620      	mov	r0, r4
   1201e:	b005      	add	sp, #20
   12020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12024:	000164b8 	.word	0x000164b8
   12028:	00016360 	.word	0x00016360

0001202c <__acle_se_spm_request_read_nse>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read_nse(void *destination, uint32_t addr, size_t len)
{
   1202c:	b570      	push	{r4, r5, r6, lr}
   1202e:	460c      	mov	r4, r1
   12030:	4615      	mov	r5, r2
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
   12032:	4606      	mov	r6, r0
   12034:	bbb0      	cbnz	r0, 120a4 <__acle_se_spm_request_read_nse+0x78>
		return -EINVAL;
   12036:	f06f 0015 	mvn.w	r0, #21
			return 0;
		}
	}

	return -EPERM;
}
   1203a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1203e:	4671      	mov	r1, lr
   12040:	4672      	mov	r2, lr
   12042:	4673      	mov	r3, lr
   12044:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   12048:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   1204c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   12050:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   12054:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   12058:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   1205c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   12060:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   12064:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   12068:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   1206c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   12070:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   12074:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   12078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1207c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12080:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   12084:	f38e 8c00 	msr	CPSR_fs, lr
   12088:	b410      	push	{r4}
   1208a:	eef1 ca10 	vmrs	ip, fpscr
   1208e:	f64f 7460 	movw	r4, #65376	; 0xff60
   12092:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   12096:	ea0c 0c04 	and.w	ip, ip, r4
   1209a:	eee1 ca10 	vmsr	fpscr, ip
   1209e:	bc10      	pop	{r4}
   120a0:	46f4      	mov	ip, lr
   120a2:	4774      	bxns	lr
	if (destination == NULL || len <= 0) {
   120a4:	2a00      	cmp	r2, #0
   120a6:	d0c6      	beq.n	12036 <__acle_se_spm_request_read_nse+0xa>
	return arm_cmse_addr_is_secure(ptr) == 1;
   120a8:	f003 fdd8 	bl	15c5c <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)destination)) {
   120ac:	2801      	cmp	r0, #1
   120ae:	d0c2      	beq.n	12036 <__acle_se_spm_request_read_nse+0xa>
		if (addr >= start && addr + len <= start + size) {
   120b0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   120b4:	d317      	bcc.n	120e6 <__acle_se_spm_request_read_nse+0xba>
   120b6:	192b      	adds	r3, r5, r4
   120b8:	f5b3 3f81 	cmp.w	r3, #66048	; 0x10200
   120bc:	d906      	bls.n	120cc <__acle_se_spm_request_read_nse+0xa0>
   120be:	4a0b      	ldr	r2, [pc, #44]	; (120ec <__acle_se_spm_request_read_nse+0xc0>)
   120c0:	4294      	cmp	r4, r2
   120c2:	d90a      	bls.n	120da <__acle_se_spm_request_read_nse+0xae>
   120c4:	f602 221d 	addw	r2, r2, #2589	; 0xa1d
   120c8:	4293      	cmp	r3, r2
   120ca:	d809      	bhi.n	120e0 <__acle_se_spm_request_read_nse+0xb4>
			memcpy(destination, (const void *)addr, len);
   120cc:	462a      	mov	r2, r5
   120ce:	4621      	mov	r1, r4
   120d0:	4630      	mov	r0, r6
   120d2:	f003 fe0b 	bl	15cec <memcpy>
			return 0;
   120d6:	2000      	movs	r0, #0
   120d8:	e7af      	b.n	1203a <__acle_se_spm_request_read_nse+0xe>
		if (addr >= start && addr + len <= start + size) {
   120da:	4a05      	ldr	r2, [pc, #20]	; (120f0 <__acle_se_spm_request_read_nse+0xc4>)
   120dc:	4294      	cmp	r4, r2
   120de:	d902      	bls.n	120e6 <__acle_se_spm_request_read_nse+0xba>
   120e0:	4a04      	ldr	r2, [pc, #16]	; (120f4 <__acle_se_spm_request_read_nse+0xc8>)
   120e2:	4293      	cmp	r3, r2
   120e4:	d9f2      	bls.n	120cc <__acle_se_spm_request_read_nse+0xa0>
	return -EPERM;
   120e6:	f04f 30ff 	mov.w	r0, #4294967295
   120ea:	e7a6      	b.n	1203a <__acle_se_spm_request_read_nse+0xe>
   120ec:	00ff0203 	.word	0x00ff0203
   120f0:	00ff012f 	.word	0x00ff012f
   120f4:	00ff0138 	.word	0x00ff0138

000120f8 <__acle_se_spm_s0_active>:
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_S0_ACTIVE
__TZ_NONSECURE_ENTRY_FUNC
int spm_s0_active(uint32_t s0_address, uint32_t s1_address, bool *s0_active)
{
   120f8:	b570      	push	{r4, r5, r6, lr}
   120fa:	4605      	mov	r5, r0
	return arm_cmse_addr_is_secure(ptr) == 1;
   120fc:	4610      	mov	r0, r2
{
   120fe:	460e      	mov	r6, r1
   12100:	4614      	mov	r4, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
   12102:	f003 fdab 	bl	15c5c <arm_cmse_addr_is_secure>
	const struct fw_info *s0;
	const struct fw_info *s1;
	bool s0_valid;
	bool s1_valid;

	if (ptr_in_secure_area((intptr_t)s0_active)) {
   12106:	2801      	cmp	r0, #1
   12108:	d137      	bne.n	1217a <__acle_se_spm_s0_active+0x82>
		return -EINVAL;
   1210a:	f06f 0315 	mvn.w	r3, #21
	} else {
		*s0_active = s0->version >= s1->version;
	}

	return 0;
}
   1210e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12112:	4618      	mov	r0, r3
   12114:	4671      	mov	r1, lr
   12116:	4672      	mov	r2, lr
   12118:	4673      	mov	r3, lr
   1211a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   1211e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   12122:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   12126:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   1212a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   1212e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   12132:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   12136:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   1213a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   1213e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   12142:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   12146:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   1214a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1214e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   12152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12156:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1215a:	f38e 8c00 	msr	CPSR_fs, lr
   1215e:	b410      	push	{r4}
   12160:	eef1 ca10 	vmrs	ip, fpscr
   12164:	f64f 7460 	movw	r4, #65376	; 0xff60
   12168:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   1216c:	ea0c 0c04 	and.w	ip, ip, r4
   12170:	eee1 ca10 	vmsr	fpscr, ip
   12174:	bc10      	pop	{r4}
   12176:	46f4      	mov	ip, lr
   12178:	4774      	bxns	lr
	s0 = fw_info_find(s0_address);
   1217a:	4628      	mov	r0, r5
   1217c:	f7ff ff32 	bl	11fe4 <fw_info_find>
   12180:	4605      	mov	r5, r0
	s1 = fw_info_find(s1_address);
   12182:	4630      	mov	r0, r6
   12184:	f7ff ff2e 	bl	11fe4 <fw_info_find>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
   12188:	b1cd      	cbz	r5, 121be <__acle_se_spm_s0_active+0xc6>
   1218a:	6a2a      	ldr	r2, [r5, #32]
   1218c:	4b0e      	ldr	r3, [pc, #56]	; (121c8 <__acle_se_spm_s0_active+0xd0>)
   1218e:	429a      	cmp	r2, r3
   12190:	d115      	bne.n	121be <__acle_se_spm_s0_active+0xc6>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
   12192:	b148      	cbz	r0, 121a8 <__acle_se_spm_s0_active+0xb0>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
   12194:	2301      	movs	r3, #1
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
   12196:	6a01      	ldr	r1, [r0, #32]
   12198:	4a0b      	ldr	r2, [pc, #44]	; (121c8 <__acle_se_spm_s0_active+0xd0>)
   1219a:	4291      	cmp	r1, r2
   1219c:	d102      	bne.n	121a4 <__acle_se_spm_s0_active+0xac>
	} else if (!s0_valid) {
   1219e:	b93b      	cbnz	r3, 121b0 <__acle_se_spm_s0_active+0xb8>
		*s0_active = false;
   121a0:	7023      	strb	r3, [r4, #0]
   121a2:	e7b4      	b.n	1210e <__acle_se_spm_s0_active+0x16>
	if (!s1_valid && !s0_valid) {
   121a4:	2b00      	cmp	r3, #0
   121a6:	d0b0      	beq.n	1210a <__acle_se_spm_s0_active+0x12>
		*s0_active = true;
   121a8:	2301      	movs	r3, #1
		*s0_active = s0->version >= s1->version;
   121aa:	7023      	strb	r3, [r4, #0]
	return 0;
   121ac:	2300      	movs	r3, #0
   121ae:	e7ae      	b.n	1210e <__acle_se_spm_s0_active+0x16>
		*s0_active = s0->version >= s1->version;
   121b0:	696b      	ldr	r3, [r5, #20]
   121b2:	6942      	ldr	r2, [r0, #20]
   121b4:	4293      	cmp	r3, r2
   121b6:	bf34      	ite	cc
   121b8:	2300      	movcc	r3, #0
   121ba:	2301      	movcs	r3, #1
   121bc:	e7f5      	b.n	121aa <__acle_se_spm_s0_active+0xb2>
	s1_valid = (s1 != NULL) && (s1->valid == CONFIG_FW_INFO_VALID_VAL);
   121be:	2800      	cmp	r0, #0
   121c0:	d0a3      	beq.n	1210a <__acle_se_spm_s0_active+0x12>
	s0_valid = (s0 != NULL) && (s0->valid == CONFIG_FW_INFO_VALID_VAL);
   121c2:	2300      	movs	r3, #0
   121c4:	e7e7      	b.n	12196 <__acle_se_spm_s0_active+0x9e>
   121c6:	bf00      	nop
   121c8:	9102ffff 	.word	0x9102ffff

000121cc <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   121cc:	4801      	ldr	r0, [pc, #4]	; (121d4 <nrf_cc3xx_platform_abort_init+0x8>)
   121ce:	f002 bc21 	b.w	14a14 <nrf_cc3xx_platform_set_abort>
   121d2:	bf00      	nop
   121d4:	000164cc 	.word	0x000164cc

000121d8 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   121d8:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   121da:	b1b0      	cbz	r0, 1220a <mutex_unlock_platform+0x32>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   121dc:	6843      	ldr	r3, [r0, #4]
   121de:	2b04      	cmp	r3, #4
   121e0:	d10d      	bne.n	121fe <mutex_unlock_platform+0x26>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   121e2:	2200      	movs	r2, #0
   121e4:	6803      	ldr	r3, [r0, #0]
   121e6:	e8d3 1fef 	ldaex	r1, [r3]
   121ea:	2901      	cmp	r1, #1
   121ec:	d103      	bne.n	121f6 <mutex_unlock_platform+0x1e>
   121ee:	e8c3 2fe0 	stlex	r0, r2, [r3]
   121f2:	2800      	cmp	r0, #0
   121f4:	d1f7      	bne.n	121e6 <mutex_unlock_platform+0xe>
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   121f6:	4807      	ldr	r0, [pc, #28]	; (12214 <mutex_unlock_platform+0x3c>)
   121f8:	bf08      	it	eq
   121fa:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   121fc:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   121fe:	b13b      	cbz	r3, 12210 <mutex_unlock_platform+0x38>
        p_mutex = (struct k_mutex *)mutex->mutex;
   12200:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   12202:	f001 fb83 	bl	1390c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   12206:	2000      	movs	r0, #0
   12208:	e7f8      	b.n	121fc <mutex_unlock_platform+0x24>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   1220a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   1220e:	e7f5      	b.n	121fc <mutex_unlock_platform+0x24>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12210:	4801      	ldr	r0, [pc, #4]	; (12218 <mutex_unlock_platform+0x40>)
   12212:	e7f3      	b.n	121fc <mutex_unlock_platform+0x24>
   12214:	ffff8fe9 	.word	0xffff8fe9
   12218:	ffff8fea 	.word	0xffff8fea

0001221c <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   1221c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   1221e:	4604      	mov	r4, r0
   12220:	b918      	cbnz	r0, 1222a <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   12222:	4b0d      	ldr	r3, [pc, #52]	; (12258 <mutex_free_platform+0x3c>)
   12224:	480d      	ldr	r0, [pc, #52]	; (1225c <mutex_free_platform+0x40>)
   12226:	685b      	ldr	r3, [r3, #4]
   12228:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   1222a:	6861      	ldr	r1, [r4, #4]
   1222c:	2908      	cmp	r1, #8
   1222e:	d00d      	beq.n	1224c <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   12230:	f031 0304 	bics.w	r3, r1, #4
   12234:	d00a      	beq.n	1224c <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   12236:	f011 0102 	ands.w	r1, r1, #2
   1223a:	d008      	beq.n	1224e <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   1223c:	4621      	mov	r1, r4
   1223e:	4808      	ldr	r0, [pc, #32]	; (12260 <mutex_free_platform+0x44>)
   12240:	f001 fac2 	bl	137c8 <k_mem_slab_free>
        mutex->mutex = NULL;
   12244:	2300      	movs	r3, #0
   12246:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   12248:	2300      	movs	r3, #0
   1224a:	6063      	str	r3, [r4, #4]
}
   1224c:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   1224e:	2214      	movs	r2, #20
   12250:	6820      	ldr	r0, [r4, #0]
   12252:	f003 fd76 	bl	15d42 <memset>
   12256:	e7f7      	b.n	12248 <mutex_free_platform+0x2c>
   12258:	20000070 	.word	0x20000070
   1225c:	00016944 	.word	0x00016944
   12260:	200002e4 	.word	0x200002e4

00012264 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   12264:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   12266:	4604      	mov	r4, r0
   12268:	b918      	cbnz	r0, 12272 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   1226a:	4b16      	ldr	r3, [pc, #88]	; (122c4 <mutex_init_platform+0x60>)
   1226c:	4816      	ldr	r0, [pc, #88]	; (122c8 <mutex_init_platform+0x64>)
   1226e:	685b      	ldr	r3, [r3, #4]
   12270:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   12272:	6863      	ldr	r3, [r4, #4]
   12274:	2b04      	cmp	r3, #4
   12276:	d023      	beq.n	122c0 <mutex_init_platform+0x5c>
   12278:	2b08      	cmp	r3, #8
   1227a:	d021      	beq.n	122c0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   1227c:	b9cb      	cbnz	r3, 122b2 <mutex_init_platform+0x4e>
   1227e:	6823      	ldr	r3, [r4, #0]
   12280:	b9bb      	cbnz	r3, 122b2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   12282:	f04f 32ff 	mov.w	r2, #4294967295
   12286:	f04f 33ff 	mov.w	r3, #4294967295
   1228a:	4621      	mov	r1, r4
   1228c:	480f      	ldr	r0, [pc, #60]	; (122cc <mutex_init_platform+0x68>)
   1228e:	f001 fa69 	bl	13764 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   12292:	b908      	cbnz	r0, 12298 <mutex_init_platform+0x34>
   12294:	6823      	ldr	r3, [r4, #0]
   12296:	b91b      	cbnz	r3, 122a0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   12298:	4b0a      	ldr	r3, [pc, #40]	; (122c4 <mutex_init_platform+0x60>)
   1229a:	480d      	ldr	r0, [pc, #52]	; (122d0 <mutex_init_platform+0x6c>)
   1229c:	685b      	ldr	r3, [r3, #4]
   1229e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   122a0:	2214      	movs	r2, #20
   122a2:	2100      	movs	r1, #0
   122a4:	6820      	ldr	r0, [r4, #0]
   122a6:	f003 fd4c 	bl	15d42 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   122aa:	6863      	ldr	r3, [r4, #4]
   122ac:	f043 0302 	orr.w	r3, r3, #2
   122b0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   122b2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   122b4:	f003 fe10 	bl	15ed8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   122b8:	6863      	ldr	r3, [r4, #4]
   122ba:	f043 0301 	orr.w	r3, r3, #1
   122be:	6063      	str	r3, [r4, #4]
}
   122c0:	bd10      	pop	{r4, pc}
   122c2:	bf00      	nop
   122c4:	20000070 	.word	0x20000070
   122c8:	00016944 	.word	0x00016944
   122cc:	200002e4 	.word	0x200002e4
   122d0:	0001696a 	.word	0x0001696a

000122d4 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   122d4:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   122d6:	b1e8      	cbz	r0, 12314 <mutex_lock_platform+0x40>
    switch (mutex->flags) {
   122d8:	6843      	ldr	r3, [r0, #4]
   122da:	2b04      	cmp	r3, #4
   122dc:	d10c      	bne.n	122f8 <mutex_lock_platform+0x24>
   122de:	2201      	movs	r2, #1
   122e0:	6803      	ldr	r3, [r0, #0]
   122e2:	e8d3 1fef 	ldaex	r1, [r3]
   122e6:	2900      	cmp	r1, #0
   122e8:	d103      	bne.n	122f2 <mutex_lock_platform+0x1e>
   122ea:	e8c3 2fe0 	stlex	r0, r2, [r3]
   122ee:	2800      	cmp	r0, #0
   122f0:	d1f7      	bne.n	122e2 <mutex_lock_platform+0xe>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   122f2:	d10b      	bne.n	1230c <mutex_lock_platform+0x38>
   122f4:	2000      	movs	r0, #0
}
   122f6:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   122f8:	b153      	cbz	r3, 12310 <mutex_lock_platform+0x3c>
        p_mutex = (struct k_mutex *)mutex->mutex;
   122fa:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   122fc:	f04f 32ff 	mov.w	r2, #4294967295
   12300:	f04f 33ff 	mov.w	r3, #4294967295
   12304:	f001 fa8a 	bl	1381c <z_impl_k_mutex_lock>
        if (ret == 0) {
   12308:	2800      	cmp	r0, #0
   1230a:	d0f3      	beq.n	122f4 <mutex_lock_platform+0x20>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   1230c:	4803      	ldr	r0, [pc, #12]	; (1231c <mutex_lock_platform+0x48>)
   1230e:	e7f2      	b.n	122f6 <mutex_lock_platform+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   12310:	4803      	ldr	r0, [pc, #12]	; (12320 <mutex_lock_platform+0x4c>)
   12312:	e7f0      	b.n	122f6 <mutex_lock_platform+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   12314:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   12318:	e7ed      	b.n	122f6 <mutex_lock_platform+0x22>
   1231a:	bf00      	nop
   1231c:	ffff8fe9 	.word	0xffff8fe9
   12320:	ffff8fea 	.word	0xffff8fea

00012324 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   12324:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   12326:	4906      	ldr	r1, [pc, #24]	; (12340 <nrf_cc3xx_platform_mutex_init+0x1c>)
   12328:	2340      	movs	r3, #64	; 0x40
   1232a:	2214      	movs	r2, #20
   1232c:	4805      	ldr	r0, [pc, #20]	; (12344 <nrf_cc3xx_platform_mutex_init+0x20>)
   1232e:	f003 fdb8 	bl	15ea2 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   12332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   12336:	4904      	ldr	r1, [pc, #16]	; (12348 <nrf_cc3xx_platform_mutex_init+0x24>)
   12338:	4804      	ldr	r0, [pc, #16]	; (1234c <nrf_cc3xx_platform_mutex_init+0x28>)
   1233a:	f002 bbbd 	b.w	14ab8 <nrf_cc3xx_platform_set_mutexes>
   1233e:	bf00      	nop
   12340:	20000300 	.word	0x20000300
   12344:	200002e4 	.word	0x200002e4
   12348:	000164e4 	.word	0x000164e4
   1234c:	000164d4 	.word	0x000164d4

00012350 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12350:	4a09      	ldr	r2, [pc, #36]	; (12378 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12352:	490a      	ldr	r1, [pc, #40]	; (1237c <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12354:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12356:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   12358:	6798      	str	r0, [r3, #120]	; 0x78
	_current->arch.swap_return_value = _k_neg_eagain;
   1235a:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1235c:	4908      	ldr	r1, [pc, #32]	; (12380 <arch_swap+0x30>)
   1235e:	684b      	ldr	r3, [r1, #4]
   12360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12364:	604b      	str	r3, [r1, #4]
   12366:	2300      	movs	r3, #0
   12368:	f383 8811 	msr	BASEPRI, r3
   1236c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12370:	6893      	ldr	r3, [r2, #8]
}
   12372:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12374:	4770      	bx	lr
   12376:	bf00      	nop
   12378:	20000820 	.word	0x20000820
   1237c:	00016564 	.word	0x00016564
   12380:	e000ed00 	.word	0xe000ed00

00012384 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12384:	4913      	ldr	r1, [pc, #76]	; (123d4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12386:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12388:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   1238c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1238e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12392:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12396:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12398:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1239c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   123a0:	4f0d      	ldr	r7, [pc, #52]	; (123d8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   123a2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   123a6:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   123a8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   123aa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   123ac:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   123ae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   123b0:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   123b2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   123b6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   123ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   123be:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   123c2:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   123c6:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   123c8:	f003 fc10 	bl	15bec <configure_builtin_stack_guard>
    pop {r2, lr}
   123cc:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   123d0:	4770      	bx	lr
   123d2:	0000      	.short	0x0000
    ldr r1, =_kernel
   123d4:	20000820 	.word	0x20000820
    ldr v4, =_SCS_ICSR
   123d8:	e000ed04 	.word	0xe000ed04

000123dc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   123dc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   123e0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   123e2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   123e6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   123ea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   123ec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   123f0:	2902      	cmp	r1, #2
    beq _oops
   123f2:	d0ff      	beq.n	123f4 <_oops>

000123f4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   123f4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   123f6:	f003 fbff 	bl	15bf8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   123fa:	bd01      	pop	{r0, pc}

000123fc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   123fc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   123fe:	2b00      	cmp	r3, #0
   12400:	db08      	blt.n	12414 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12402:	2201      	movs	r2, #1
   12404:	f000 001f 	and.w	r0, r0, #31
   12408:	fa02 f000 	lsl.w	r0, r2, r0
   1240c:	4a02      	ldr	r2, [pc, #8]	; (12418 <arch_irq_enable+0x1c>)
   1240e:	095b      	lsrs	r3, r3, #5
   12410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12414:	4770      	bx	lr
   12416:	bf00      	nop
   12418:	e000e100 	.word	0xe000e100

0001241c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1241c:	4b05      	ldr	r3, [pc, #20]	; (12434 <arch_irq_is_enabled+0x18>)
   1241e:	0942      	lsrs	r2, r0, #5
   12420:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12424:	2301      	movs	r3, #1
   12426:	f000 001f 	and.w	r0, r0, #31
   1242a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1242e:	4010      	ands	r0, r2
   12430:	4770      	bx	lr
   12432:	bf00      	nop
   12434:	e000e100 	.word	0xe000e100

00012438 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12438:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1243a:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   1243c:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12440:	bfac      	ite	ge
   12442:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12446:	4b06      	ldrlt	r3, [pc, #24]	; (12460 <z_arm_irq_priority_set+0x28>)
   12448:	ea4f 1141 	mov.w	r1, r1, lsl #5
   1244c:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1244e:	bfab      	itete	ge
   12450:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12454:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12458:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1245c:	5419      	strblt	r1, [r3, r0]
}
   1245e:	4770      	bx	lr
   12460:	e000ed14 	.word	0xe000ed14

00012464 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12464:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12468:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   1246a:	490b      	ldr	r1, [pc, #44]	; (12498 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
   1246c:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   12470:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   12472:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   12476:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1247a:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   1247c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   12480:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12484:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12488:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1248c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1248e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12490:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   12492:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12494:	4770      	bx	lr
   12496:	bf00      	nop
   12498:	000155fb 	.word	0x000155fb

0001249c <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   1249c:	b508      	push	{r3, lr}
   1249e:	4604      	mov	r4, r0
   124a0:	460e      	mov	r6, r1
   124a2:	4615      	mov	r5, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   124a4:	2300      	movs	r3, #0
   124a6:	eee1 3a10 	vmsr	fpscr, r3
	z_arm_configure_static_mpu_regions();
   124aa:	f000 fa55 	bl	12958 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   124ae:	4b09      	ldr	r3, [pc, #36]	; (124d4 <arch_switch_to_main_thread+0x38>)
   124b0:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   124b2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   124b4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   124b8:	4628      	mov	r0, r5
   124ba:	f386 8809 	msr	PSP, r6
   124be:	2100      	movs	r1, #0
   124c0:	b663      	cpsie	if
   124c2:	f381 8811 	msr	BASEPRI, r1
   124c6:	f3bf 8f6f 	isb	sy
   124ca:	2200      	movs	r2, #0
   124cc:	2300      	movs	r3, #0
   124ce:	f003 f894 	bl	155fa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   124d2:	bf00      	nop
   124d4:	20000820 	.word	0x20000820

000124d8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   124d8:	4901      	ldr	r1, [pc, #4]	; (124e0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   124da:	2210      	movs	r2, #16
	str	r2, [r1]
   124dc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   124de:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   124e0:	e000ed10 	.word	0xe000ed10

000124e4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   124e4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   124e6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   124e8:	f380 8811 	msr	BASEPRI, r0
	isb
   124ec:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   124f0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   124f4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   124f6:	b662      	cpsie	i
	isb
   124f8:	f3bf 8f6f 	isb	sy

	bx	lr
   124fc:	4770      	bx	lr
   124fe:	bf00      	nop

00012500 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12500:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12502:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12504:	f381 8811 	msr	BASEPRI, r1

	wfe
   12508:	bf20      	wfe

	msr	BASEPRI, r0
   1250a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1250e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12510:	4770      	bx	lr
   12512:	bf00      	nop

00012514 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12514:	bf30      	wfi
    b z_SysNmiOnReset
   12516:	f7ff bffd 	b.w	12514 <z_SysNmiOnReset>
   1251a:	bf00      	nop

0001251c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1251c:	4a17      	ldr	r2, [pc, #92]	; (1257c <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1251e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12520:	4b17      	ldr	r3, [pc, #92]	; (12580 <z_arm_prep_c+0x64>)
   12522:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12526:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12528:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1252c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12530:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12534:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   1253c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12540:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   12544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   12548:	4a0e      	ldr	r2, [pc, #56]	; (12584 <z_arm_prep_c+0x68>)
   1254a:	6853      	ldr	r3, [r2, #4]
   1254c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   12550:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12552:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12556:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1255a:	2300      	movs	r3, #0
   1255c:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   12560:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   12564:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   12568:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1256c:	f001 f82e 	bl	135cc <z_bss_zero>
	z_data_copy();
   12570:	f001 fea8 	bl	142c4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12574:	f000 f9c2 	bl	128fc <z_arm_interrupt_init>
	z_cstart();
   12578:	f001 f84c 	bl	13614 <z_cstart>
   1257c:	00010200 	.word	0x00010200
   12580:	e000ed00 	.word	0xe000ed00
   12584:	e000ef30 	.word	0xe000ef30

00012588 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12588:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1258a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   1258c:	4a0b      	ldr	r2, [pc, #44]	; (125bc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   1258e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   12590:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12592:	bf1e      	ittt	ne
	movne	r1, #0
   12594:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12596:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
   12598:	f003 fc81 	blne	15e9e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   1259c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   1259e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   125a2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   125a6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   125aa:	4905      	ldr	r1, [pc, #20]	; (125c0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   125ac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   125ae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   125b0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   125b2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   125b6:	4903      	ldr	r1, [pc, #12]	; (125c4 <_isr_wrapper+0x3c>)
	bx r1
   125b8:	4708      	bx	r1
   125ba:	0000      	.short	0x0000
	ldr r2, =_kernel
   125bc:	20000820 	.word	0x20000820
	ldr r1, =_sw_isr_table
   125c0:	00016150 	.word	0x00016150
	ldr r1, =z_arm_int_exit
   125c4:	00012851 	.word	0x00012851

000125c8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   125c8:	2000      	movs	r0, #0
    msr CONTROL, r0
   125ca:	f380 8814 	msr	CONTROL, r0
    isb
   125ce:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   125d2:	2000      	movs	r0, #0
    msr MSPLIM, r0
   125d4:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   125d8:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   125dc:	f003 f98e 	bl	158fc <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   125e0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   125e2:	490e      	ldr	r1, [pc, #56]	; (1261c <__start+0x54>)
    str r0, [r1]
   125e4:	6008      	str	r0, [r1, #0]
    dsb
   125e6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   125ea:	480d      	ldr	r0, [pc, #52]	; (12620 <__start+0x58>)
    msr msp, r0
   125ec:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   125f0:	f000 f95e 	bl	128b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   125f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
   125f6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   125fa:	480a      	ldr	r0, [pc, #40]	; (12624 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   125fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   12600:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12602:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12606:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   1260a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1260c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1260e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12612:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12616:	f7ff ff81 	bl	1251c <z_arm_prep_c>
   1261a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   1261c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12620:	20001888 	.word	0x20001888
    ldr r0, =z_interrupt_stacks
   12624:	200019c8 	.word	0x200019c8

00012628 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12628:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1262c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12630:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12632:	4672      	mov	r2, lr
	bl z_arm_fault
   12634:	f000 f874 	bl	12720 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12638:	bd01      	pop	{r0, pc}
   1263a:	bf00      	nop

0001263c <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   1263c:	4b0e      	ldr	r3, [pc, #56]	; (12678 <mem_manage_fault.isra.0+0x3c>)
   1263e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12644:	0792      	lsls	r2, r2, #30
   12646:	d508      	bpl.n	1265a <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   12648:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1264a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1264c:	0612      	lsls	r2, r2, #24
   1264e:	d504      	bpl.n	1265a <mem_manage_fault.isra.0+0x1e>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   12650:	b118      	cbz	r0, 1265a <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12654:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   12658:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   1265a:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1265c:	4b06      	ldr	r3, [pc, #24]	; (12678 <mem_manage_fault.isra.0+0x3c>)
   1265e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12664:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12666:	bf58      	it	pl
   12668:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1266a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1266c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   12670:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   12672:	7008      	strb	r0, [r1, #0]

	return reason;
}
   12674:	4770      	bx	lr
   12676:	bf00      	nop
   12678:	e000ed00 	.word	0xe000ed00

0001267c <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   1267c:	4b0d      	ldr	r3, [pc, #52]	; (126b4 <bus_fault.isra.0+0x38>)
   1267e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   12680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12684:	0592      	lsls	r2, r2, #22
   12686:	d508      	bpl.n	1269a <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   12688:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   1268a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1268c:	0412      	lsls	r2, r2, #16
   1268e:	d504      	bpl.n	1269a <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   12690:	b118      	cbz	r0, 1269a <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   12692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12694:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   1269a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1269c:	4b05      	ldr	r3, [pc, #20]	; (126b4 <bus_fault.isra.0+0x38>)
   1269e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   126a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   126a2:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   126a4:	bf58      	it	pl
   126a6:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   126a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   126aa:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   126ae:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   126b0:	7008      	strb	r0, [r1, #0]

	return reason;
}
   126b2:	4770      	bx	lr
   126b4:	e000ed00 	.word	0xe000ed00

000126b8 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   126b8:	4b09      	ldr	r3, [pc, #36]	; (126e0 <usage_fault.isra.0+0x28>)
   126ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   126bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   126be:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   126c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   126c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   126c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   126c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   126c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   126ca:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   126ce:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   126d2:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
   126d6:	bf18      	it	ne
   126d8:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   126da:	629a      	str	r2, [r3, #40]	; 0x28
}
   126dc:	4770      	bx	lr
   126de:	bf00      	nop
   126e0:	e000ed00 	.word	0xe000ed00

000126e4 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
   126e4:	4b0d      	ldr	r3, [pc, #52]	; (1271c <secure_fault.isra.0+0x38>)
   126e6:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
   126e8:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
   126ea:	695a      	ldr	r2, [r3, #20]
   126ec:	07d0      	lsls	r0, r2, #31
   126ee:	d40f      	bmi.n	12710 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
   126f0:	695a      	ldr	r2, [r3, #20]
   126f2:	0791      	lsls	r1, r2, #30
   126f4:	d40c      	bmi.n	12710 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
   126f6:	695a      	ldr	r2, [r3, #20]
   126f8:	0752      	lsls	r2, r2, #29
   126fa:	d409      	bmi.n	12710 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
   126fc:	695a      	ldr	r2, [r3, #20]
   126fe:	0710      	lsls	r0, r2, #28
   12700:	d406      	bmi.n	12710 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
   12702:	695a      	ldr	r2, [r3, #20]
   12704:	06d1      	lsls	r1, r2, #27
   12706:	d403      	bmi.n	12710 <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
   12708:	695a      	ldr	r2, [r3, #20]
   1270a:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
   1270c:	bf58      	it	pl
   1270e:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
   12710:	695a      	ldr	r2, [r3, #20]
   12712:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   12716:	615a      	str	r2, [r3, #20]
}
   12718:	4770      	bx	lr
   1271a:	bf00      	nop
   1271c:	e000edd0 	.word	0xe000edd0

00012720 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12720:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12722:	4b41      	ldr	r3, [pc, #260]	; (12828 <z_arm_fault+0x108>)
   12724:	2500      	movs	r5, #0
   12726:	685b      	ldr	r3, [r3, #4]
{
   12728:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1272e:	f385 8811 	msr	BASEPRI, r5
   12732:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12736:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   1273a:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   1273e:	d11e      	bne.n	1277e <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
   12740:	f012 0401 	ands.w	r4, r2, #1
   12744:	d01a      	beq.n	1277c <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   12746:	0656      	lsls	r6, r2, #25
   12748:	f002 0408 	and.w	r4, r2, #8
   1274c:	d467      	bmi.n	1281e <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   1274e:	f082 0204 	eor.w	r2, r2, #4
   12752:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12756:	b164      	cbz	r4, 12772 <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
   12758:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
   1275c:	2200      	movs	r2, #0
   1275e:	3b03      	subs	r3, #3
   12760:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   12764:	2b04      	cmp	r3, #4
   12766:	d84b      	bhi.n	12800 <z_arm_fault+0xe0>
   12768:	e8df f003 	tbb	[pc, r3]
   1276c:	41504c0b 	.word	0x41504c0b
   12770:	48          	.byte	0x48
   12771:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
   12772:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
   12776:	e7f1      	b.n	1275c <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
   12778:	460e      	mov	r6, r1
   1277a:	e7ef      	b.n	1275c <z_arm_fault+0x3c>
	*nested_exc = false;
   1277c:	4625      	mov	r5, r4
		return NULL;
   1277e:	462e      	mov	r6, r5
   12780:	e7ec      	b.n	1275c <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12782:	4b29      	ldr	r3, [pc, #164]	; (12828 <z_arm_fault+0x108>)
   12784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   12786:	0792      	lsls	r2, r2, #30
   12788:	d43a      	bmi.n	12800 <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1278a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   1278c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
   12790:	d008      	beq.n	127a4 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
   12792:	3328      	adds	r3, #40	; 0x28
   12794:	781b      	ldrb	r3, [r3, #0]
   12796:	b1eb      	cbz	r3, 127d4 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
   12798:	2001      	movs	r0, #1
   1279a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   1279e:	f7ff ff4d 	bl	1263c <mem_manage_fault.isra.0>
   127a2:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   127a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   127a8:	b993      	cbnz	r3, 127d0 <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   127aa:	2220      	movs	r2, #32
   127ac:	4631      	mov	r1, r6
   127ae:	a802      	add	r0, sp, #8
   127b0:	f003 fa9c 	bl	15cec <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   127b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   127b6:	b36d      	cbz	r5, 12814 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   127b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
   127bc:	b922      	cbnz	r2, 127c8 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   127be:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   127c2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   127c6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   127c8:	4620      	mov	r0, r4
   127ca:	a902      	add	r1, sp, #8
   127cc:	f003 fa12 	bl	15bf4 <z_arm_fatal_error>
}
   127d0:	b00b      	add	sp, #44	; 0x2c
   127d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   127d4:	4b15      	ldr	r3, [pc, #84]	; (1282c <z_arm_fault+0x10c>)
   127d6:	781b      	ldrb	r3, [r3, #0]
   127d8:	b12b      	cbz	r3, 127e6 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
   127da:	2001      	movs	r0, #1
   127dc:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   127e0:	f7ff ff4c 	bl	1267c <bus_fault.isra.0>
   127e4:	e7dd      	b.n	127a2 <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
   127e6:	4b12      	ldr	r3, [pc, #72]	; (12830 <z_arm_fault+0x110>)
   127e8:	881f      	ldrh	r7, [r3, #0]
   127ea:	b2bf      	uxth	r7, r7
   127ec:	b117      	cbz	r7, 127f4 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
   127ee:	f7ff ff63 	bl	126b8 <usage_fault.isra.0>
   127f2:	e7d6      	b.n	127a2 <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
   127f4:	4b0f      	ldr	r3, [pc, #60]	; (12834 <z_arm_fault+0x114>)
   127f6:	695c      	ldr	r4, [r3, #20]
   127f8:	2c00      	cmp	r4, #0
   127fa:	d0d3      	beq.n	127a4 <z_arm_fault+0x84>
		secure_fault(esf);
   127fc:	f7ff ff72 	bl	126e4 <secure_fault.isra.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12800:	2400      	movs	r4, #0
   12802:	e7cf      	b.n	127a4 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
   12804:	2000      	movs	r0, #0
   12806:	f10d 0107 	add.w	r1, sp, #7
   1280a:	e7c8      	b.n	1279e <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
   1280c:	2000      	movs	r0, #0
   1280e:	f10d 0107 	add.w	r1, sp, #7
   12812:	e7e5      	b.n	127e0 <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12814:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12818:	f023 0301 	bic.w	r3, r3, #1
   1281c:	e7d3      	b.n	127c6 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1281e:	2c00      	cmp	r4, #0
   12820:	d1aa      	bne.n	12778 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
   12822:	4606      	mov	r6, r0
			*nested_exc = true;
   12824:	2501      	movs	r5, #1
   12826:	e799      	b.n	1275c <z_arm_fault+0x3c>
   12828:	e000ed00 	.word	0xe000ed00
   1282c:	e000ed29 	.word	0xe000ed29
   12830:	e000ed2a 	.word	0xe000ed2a
   12834:	e000edd0 	.word	0xe000edd0

00012838 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12838:	4b04      	ldr	r3, [pc, #16]	; (1284c <z_arm_fault_init+0x14>)
   1283a:	695a      	ldr	r2, [r3, #20]
   1283c:	f042 0210 	orr.w	r2, r2, #16
   12840:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   12842:	695a      	ldr	r2, [r3, #20]
   12844:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   12848:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1284a:	4770      	bx	lr
   1284c:	e000ed00 	.word	0xe000ed00

00012850 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12850:	4b04      	ldr	r3, [pc, #16]	; (12864 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   12852:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   12854:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   12856:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12858:	d003      	beq.n	12862 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1285a:	4903      	ldr	r1, [pc, #12]	; (12868 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12860:	600a      	str	r2, [r1, #0]

00012862 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   12862:	4770      	bx	lr
	ldr r3, =_kernel
   12864:	20000820 	.word	0x20000820
	ldr r1, =_SCS_ICSR
   12868:	e000ed04 	.word	0xe000ed04

0001286c <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   1286c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12870:	4905      	ldr	r1, [pc, #20]	; (12888 <sys_arch_reboot+0x1c>)
   12872:	4b06      	ldr	r3, [pc, #24]	; (1288c <sys_arch_reboot+0x20>)
   12874:	68ca      	ldr	r2, [r1, #12]
   12876:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1287a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1287c:	60cb      	str	r3, [r1, #12]
   1287e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12882:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12884:	e7fd      	b.n	12882 <sys_arch_reboot+0x16>
   12886:	bf00      	nop
   12888:	e000ed00 	.word	0xe000ed00
   1288c:	05fa0004 	.word	0x05fa0004

00012890 <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   12890:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   12892:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12894:	4a05      	ldr	r2, [pc, #20]	; (128ac <z_arm_clear_arm_mpu_config+0x1c>)
   12896:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   12898:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   1289c:	428b      	cmp	r3, r1
   1289e:	d100      	bne.n	128a2 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   128a0:	4770      	bx	lr
  mpu->RNR = rnr;
   128a2:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   128a4:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   128a6:	3301      	adds	r3, #1
   128a8:	e7f8      	b.n	1289c <z_arm_clear_arm_mpu_config+0xc>
   128aa:	bf00      	nop
   128ac:	e000ed90 	.word	0xe000ed90

000128b0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   128b0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   128b2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   128b4:	2400      	movs	r4, #0
   128b6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   128ba:	f7ff ffe9 	bl	12890 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   128be:	4a0e      	ldr	r2, [pc, #56]	; (128f8 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   128c0:	4623      	mov	r3, r4
   128c2:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   128c4:	f04f 34ff 	mov.w	r4, #4294967295
   128c8:	f103 0020 	add.w	r0, r3, #32
   128cc:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   128ce:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   128d0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   128d4:	d1f8      	bne.n	128c8 <z_arm_init_arch_hw_at_boot+0x18>
   128d6:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   128d8:	f04f 30ff 	mov.w	r0, #4294967295
   128dc:	f103 0260 	add.w	r2, r3, #96	; 0x60
   128e0:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   128e2:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   128e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   128e8:	d1f8      	bne.n	128dc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   128ea:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   128ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   128f0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   128f4:	bd10      	pop	{r4, pc}
   128f6:	bf00      	nop
   128f8:	e000e100 	.word	0xe000e100

000128fc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   128fc:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   128fe:	2120      	movs	r1, #32
   12900:	4803      	ldr	r0, [pc, #12]	; (12910 <z_arm_interrupt_init+0x14>)
   12902:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12904:	3301      	adds	r3, #1
   12906:	2b41      	cmp	r3, #65	; 0x41
   12908:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1290c:	d1f9      	bne.n	12902 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1290e:	4770      	bx	lr
   12910:	e000e100 	.word	0xe000e100

00012914 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   12914:	b508      	push	{r3, lr}
	if (_current == thread) {
   12916:	4b0e      	ldr	r3, [pc, #56]	; (12950 <z_impl_k_thread_abort+0x3c>)
   12918:	689b      	ldr	r3, [r3, #8]
   1291a:	4283      	cmp	r3, r0
   1291c:	d107      	bne.n	1292e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1291e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12922:	b193      	cbz	r3, 1294a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12924:	4a0b      	ldr	r2, [pc, #44]	; (12954 <z_impl_k_thread_abort+0x40>)
   12926:	6853      	ldr	r3, [r2, #4]
   12928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1292c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   1292e:	f001 f9fb 	bl	13d28 <z_thread_single_abort>
	__asm__ volatile(
   12932:	f04f 0320 	mov.w	r3, #32
   12936:	f3ef 8011 	mrs	r0, BASEPRI
   1293a:	f383 8811 	msr	BASEPRI, r3
   1293e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   12942:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   12946:	f003 bace 	b.w	15ee6 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   1294a:	f001 fc9b 	bl	14284 <z_self_abort>
   1294e:	bf00      	nop
   12950:	20000820 	.word	0x20000820
   12954:	e000ed00 	.word	0xe000ed00

00012958 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   12958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   1295a:	4c09      	ldr	r4, [pc, #36]	; (12980 <z_arm_configure_static_mpu_regions+0x28>)
   1295c:	4a09      	ldr	r2, [pc, #36]	; (12984 <z_arm_configure_static_mpu_regions+0x2c>)
   1295e:	4623      	mov	r3, r4
   12960:	2101      	movs	r1, #1
   12962:	4809      	ldr	r0, [pc, #36]	; (12988 <z_arm_configure_static_mpu_regions+0x30>)
   12964:	f000 f902 	bl	12b6c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12968:	2300      	movs	r3, #0
   1296a:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   1296c:	4b07      	ldr	r3, [pc, #28]	; (1298c <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   1296e:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   12970:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12972:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   12974:	9301      	str	r3, [sp, #4]
   12976:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   12978:	f000 f902 	bl	12b80 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1297c:	b004      	add	sp, #16
   1297e:	bd10      	pop	{r4, pc}
   12980:	20010000 	.word	0x20010000
   12984:	20000000 	.word	0x20000000
   12988:	000164f8 	.word	0x000164f8
   1298c:	20000160 	.word	0x20000160

00012990 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   12990:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12992:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   12994:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   12996:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   1299a:	f004 031f 	and.w	r3, r4, #31
   1299e:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   129a0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   129a2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   129a4:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   129a8:	4904      	ldr	r1, [pc, #16]	; (129bc <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   129aa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   129ae:	f043 0301 	orr.w	r3, r3, #1
   129b2:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   129b4:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   129b6:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   129b8:	bd10      	pop	{r4, pc}
   129ba:	bf00      	nop
   129bc:	e000ed90 	.word	0xe000ed90

000129c0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129c4:	4688      	mov	r8, r1
   129c6:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   129c8:	4606      	mov	r6, r0
   129ca:	f04f 0900 	mov.w	r9, #0
	MPU->RNR = index;
   129ce:	4d4a      	ldr	r5, [pc, #296]	; (12af8 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   129d0:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   129d2:	45c1      	cmp	r9, r8
   129d4:	da05      	bge.n	129e2 <mpu_configure_regions_and_partition.constprop.0+0x22>
		if (regions[i].size == 0U) {
   129d6:	6877      	ldr	r7, [r6, #4]
   129d8:	b3bf      	cbz	r7, 12a4a <mpu_configure_regions_and_partition.constprop.0+0x8a>
		&&
   129da:	2f1f      	cmp	r7, #31
   129dc:	d805      	bhi.n	129ea <mpu_configure_regions_and_partition.constprop.0+0x2a>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   129de:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   129e2:	4620      	mov	r0, r4
   129e4:	b005      	add	sp, #20
   129e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   129ea:	06fb      	lsls	r3, r7, #27
   129ec:	d1f7      	bne.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
		((part->start &
   129ee:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   129f2:	f01a 0f1f 	tst.w	sl, #31
   129f6:	d1f2      	bne.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   129f8:	4650      	mov	r0, sl
   129fa:	f003 f925 	bl	15c48 <arm_cmse_mpu_region_get>
   129fe:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12a00:	eb07 000a 	add.w	r0, r7, sl
   12a04:	3801      	subs	r0, #1
   12a06:	f003 f91f 	bl	15c48 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12a0a:	4583      	cmp	fp, r0
   12a0c:	d1e7      	bne.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
		if ((u_reg_index == -EINVAL) ||
   12a0e:	f11b 0f16 	cmn.w	fp, #22
   12a12:	d0e4      	beq.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
			(u_reg_index > (reg_index - 1))) {
   12a14:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   12a16:	455b      	cmp	r3, fp
   12a18:	dbe1      	blt.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
   12a1a:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   12a1e:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   12a20:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12a24:	692f      	ldr	r7, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   12a26:	f021 011f 	bic.w	r1, r1, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   12a2a:	e9d6 3200 	ldrd	r3, r2, [r6]
   12a2e:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   12a30:	4299      	cmp	r1, r3
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   12a32:	f047 071f 	orr.w	r7, r7, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   12a36:	f102 3aff 	add.w	sl, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   12a3a:	d11c      	bne.n	12a76 <mpu_configure_regions_and_partition.constprop.0+0xb6>
   12a3c:	4557      	cmp	r7, sl
   12a3e:	d108      	bne.n	12a52 <mpu_configure_regions_and_partition.constprop.0+0x92>
			mpu_configure_region(u_reg_index, &regions[i]);
   12a40:	4631      	mov	r1, r6
   12a42:	fa5f f08b 	uxtb.w	r0, fp
   12a46:	f003 f8e2 	bl	15c0e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   12a4a:	f109 0901 	add.w	r9, r9, #1
   12a4e:	360c      	adds	r6, #12
   12a50:	e7bf      	b.n	129d2 <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
   12a52:	4631      	mov	r1, r6
	MPU->RNR = index;
   12a54:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12a58:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   12a5a:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12a5e:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   12a62:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   12a64:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   12a66:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   12a68:	f003 f8d1 	bl	15c0e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   12a6c:	f110 0f16 	cmn.w	r0, #22
   12a70:	d0b5      	beq.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
			reg_index++;
   12a72:	1c44      	adds	r4, r0, #1
   12a74:	e7e9      	b.n	12a4a <mpu_configure_regions_and_partition.constprop.0+0x8a>
		} else if (reg_last == u_reg_last) {
   12a76:	3b01      	subs	r3, #1
   12a78:	4557      	cmp	r7, sl
   12a7a:	b2e0      	uxtb	r0, r4
   12a7c:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   12a80:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   12a84:	d106      	bne.n	12a94 <mpu_configure_regions_and_partition.constprop.0+0xd4>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12a86:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   12a88:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12a8a:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   12a8e:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12a90:	612b      	str	r3, [r5, #16]
			reg_index =
   12a92:	e7e9      	b.n	12a68 <mpu_configure_regions_and_partition.constprop.0+0xa8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12a94:	6929      	ldr	r1, [r5, #16]
   12a96:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   12a9a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   12a9c:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   12a9e:	4631      	mov	r1, r6
   12aa0:	f003 f8b5 	bl	15c0e <mpu_configure_region>
			if (reg_index == -EINVAL) {
   12aa4:	f110 0f16 	cmn.w	r0, #22
   12aa8:	d099      	beq.n	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
	MPU->RNR = index;
   12aaa:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   12aae:	68ea      	ldr	r2, [r5, #12]
   12ab0:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   12ab4:	3f01      	subs	r7, #1
	attr->rbar = MPU->RBAR &
   12ab6:	f362 0304 	bfi	r3, r2, #0, #5
   12aba:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12abe:	692b      	ldr	r3, [r5, #16]
   12ac0:	f89d 2008 	ldrb.w	r2, [sp, #8]
   12ac4:	085b      	lsrs	r3, r3, #1
   12ac6:	f363 1247 	bfi	r2, r3, #5, #3
   12aca:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
   12ace:	e9d6 3200 	ldrd	r3, r2, [r6]
   12ad2:	4413      	add	r3, r2
   12ad4:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   12ad6:	f023 031f 	bic.w	r3, r3, #31
   12ada:	443b      	add	r3, r7
			reg_index++;
   12adc:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   12ade:	eba3 0a0a 	sub.w	sl, r3, sl
   12ae2:	b2e0      	uxtb	r0, r4
   12ae4:	f02a 031f 	bic.w	r3, sl, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   12ae8:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   12aea:	9303      	str	r3, [sp, #12]
   12aec:	f63f af77 	bhi.w	129de <mpu_configure_regions_and_partition.constprop.0+0x1e>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   12af0:	4669      	mov	r1, sp
   12af2:	f7ff ff4d 	bl	12990 <region_init>
   12af6:	e7bc      	b.n	12a72 <mpu_configure_regions_and_partition.constprop.0+0xb2>
   12af8:	e000ed90 	.word	0xe000ed90

00012afc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12afc:	2205      	movs	r2, #5
   12afe:	4b03      	ldr	r3, [pc, #12]	; (12b0c <arm_core_mpu_enable+0x10>)
   12b00:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12b06:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12b0a:	4770      	bx	lr
   12b0c:	e000ed90 	.word	0xe000ed90

00012b10 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   12b10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12b14:	2200      	movs	r2, #0
   12b16:	4b01      	ldr	r3, [pc, #4]	; (12b1c <arm_core_mpu_disable+0xc>)
   12b18:	605a      	str	r2, [r3, #4]
}
   12b1a:	4770      	bx	lr
   12b1c:	e000ed90 	.word	0xe000ed90

00012b20 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   12b20:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12b22:	4c0e      	ldr	r4, [pc, #56]	; (12b5c <arm_mpu_init+0x3c>)
   12b24:	6825      	ldr	r5, [r4, #0]
   12b26:	2d10      	cmp	r5, #16
   12b28:	d814      	bhi.n	12b54 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12b2a:	f7ff fff1 	bl	12b10 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12b2e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   12b30:	4b0b      	ldr	r3, [pc, #44]	; (12b60 <arm_mpu_init+0x40>)
   12b32:	4a0c      	ldr	r2, [pc, #48]	; (12b64 <arm_mpu_init+0x44>)
   12b34:	631a      	str	r2, [r3, #48]	; 0x30
   12b36:	4285      	cmp	r5, r0
   12b38:	d105      	bne.n	12b46 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12b3a:	4b0b      	ldr	r3, [pc, #44]	; (12b68 <arm_mpu_init+0x48>)
   12b3c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   12b3e:	f7ff ffdd 	bl	12afc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   12b42:	2000      	movs	r0, #0
}
   12b44:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   12b46:	6861      	ldr	r1, [r4, #4]
   12b48:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   12b4c:	f7ff ff20 	bl	12990 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12b50:	3001      	adds	r0, #1
   12b52:	e7f0      	b.n	12b36 <arm_mpu_init+0x16>
		return -1;
   12b54:	f04f 30ff 	mov.w	r0, #4294967295
   12b58:	e7f4      	b.n	12b44 <arm_mpu_init+0x24>
   12b5a:	bf00      	nop
   12b5c:	00016504 	.word	0x00016504
   12b60:	e000ed90 	.word	0xe000ed90
   12b64:	0044ffaa 	.word	0x0044ffaa
   12b68:	20000880 	.word	0x20000880

00012b6c <arm_core_mpu_configure_static_mpu_regions>:
{
   12b6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   12b6e:	4c03      	ldr	r4, [pc, #12]	; (12b7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   12b70:	7822      	ldrb	r2, [r4, #0]
   12b72:	f7ff ff25 	bl	129c0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12b76:	7020      	strb	r0, [r4, #0]
}
   12b78:	bd10      	pop	{r4, pc}
   12b7a:	bf00      	nop
   12b7c:	20000880 	.word	0x20000880

00012b80 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   12b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b84:	4d26      	ldr	r5, [pc, #152]	; (12c20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   12b86:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12b88:	4606      	mov	r6, r0
   12b8a:	f04f 0800 	mov.w	r8, #0
   12b8e:	46ab      	mov	fp, r5
	MPU->RNR = index;
   12b90:	4f24      	ldr	r7, [pc, #144]	; (12c24 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12b92:	45d0      	cmp	r8, sl
   12b94:	da1b      	bge.n	12bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   12b96:	f8d6 9004 	ldr.w	r9, [r6, #4]
   12b9a:	f1b9 0f00 	cmp.w	r9, #0
   12b9e:	d039      	beq.n	12c14 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   12ba0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12ba2:	4608      	mov	r0, r1
   12ba4:	9101      	str	r1, [sp, #4]
   12ba6:	f003 f84f 	bl	15c48 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12baa:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   12bac:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   12bae:	eb09 0001 	add.w	r0, r9, r1
   12bb2:	3801      	subs	r0, #1
   12bb4:	f003 f848 	bl	15c48 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   12bb8:	4284      	cmp	r4, r0
   12bba:	f04f 0214 	mov.w	r2, #20
   12bbe:	4b1a      	ldr	r3, [pc, #104]	; (12c28 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   12bc0:	d008      	beq.n	12bd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   12bc2:	f06f 0315 	mvn.w	r3, #21
   12bc6:	fb02 f808 	mul.w	r8, r2, r8
   12bca:	f84b 3008 	str.w	r3, [fp, r8]
}
   12bce:	b003      	add	sp, #12
   12bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   12bd4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   12bd8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   12bda:	d0f8      	beq.n	12bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   12bdc:	7819      	ldrb	r1, [r3, #0]
   12bde:	42a1      	cmp	r1, r4
   12be0:	ddf5      	ble.n	12bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   12be2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   12be6:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   12be8:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   12bea:	68fc      	ldr	r4, [r7, #12]
   12bec:	f100 0108 	add.w	r1, r0, #8
   12bf0:	7b00      	ldrb	r0, [r0, #12]
   12bf2:	f364 0004 	bfi	r0, r4, #0, #5
   12bf6:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   12bf8:	6938      	ldr	r0, [r7, #16]
   12bfa:	790c      	ldrb	r4, [r1, #4]
   12bfc:	0840      	lsrs	r0, r0, #1
   12bfe:	f360 1447 	bfi	r4, r0, #5, #3
   12c02:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   12c04:	68f9      	ldr	r1, [r7, #12]
   12c06:	f021 011f 	bic.w	r1, r1, #31
   12c0a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   12c0c:	6939      	ldr	r1, [r7, #16]
   12c0e:	f021 011f 	bic.w	r1, r1, #31
   12c12:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   12c14:	f108 0801 	add.w	r8, r8, #1
   12c18:	3514      	adds	r5, #20
   12c1a:	360c      	adds	r6, #12
   12c1c:	e7b9      	b.n	12b92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   12c1e:	bf00      	nop
   12c20:	20000800 	.word	0x20000800
   12c24:	e000ed90 	.word	0xe000ed90
   12c28:	20000880 	.word	0x20000880

00012c2c <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
   12c2c:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
   12c2e:	4b0c      	ldr	r3, [pc, #48]	; (12c60 <tz_nonsecure_state_setup+0x34>)
   12c30:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
   12c32:	6803      	ldr	r3, [r0, #0]
   12c34:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
   12c38:	6843      	ldr	r3, [r0, #4]
   12c3a:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
   12c3e:	7b02      	ldrb	r2, [r0, #12]
   12c40:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
   12c44:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
   12c48:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
   12c4c:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
   12c4e:	bf48      	it	mi
   12c50:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
   12c54:	b109      	cbz	r1, 12c5a <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
   12c56:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
   12c5a:	f383 8894 	msr	CONTROL_NS, r3
}
   12c5e:	4770      	bx	lr
   12c60:	e002ed00 	.word	0xe002ed00

00012c64 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12c64:	4a08      	ldr	r2, [pc, #32]	; (12c88 <tz_nbanked_exception_target_state_set+0x24>)
   12c66:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
   12c68:	b148      	cbz	r0, 12c7e <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
   12c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   12c6e:	041b      	lsls	r3, r3, #16
   12c70:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12c72:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12c7a:	60d3      	str	r3, [r2, #12]
}
   12c7c:	4770      	bx	lr
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12c7e:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
   12c80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   12c84:	e7f5      	b.n	12c72 <tz_nbanked_exception_target_state_set+0xe>
   12c86:	bf00      	nop
   12c88:	e000ed00 	.word	0xe000ed00

00012c8c <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12c8c:	4a08      	ldr	r2, [pc, #32]	; (12cb0 <tz_nonsecure_exception_prio_config+0x24>)
   12c8e:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
   12c90:	b140      	cbz	r0, 12ca4 <tz_nonsecure_exception_prio_config+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12c92:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
   12c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
   12ca0:	60d3      	str	r3, [r2, #12]
}
   12ca2:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
   12ca4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   12ca8:	041b      	lsls	r3, r3, #16
   12caa:	0c1b      	lsrs	r3, r3, #16
   12cac:	e7f4      	b.n	12c98 <tz_nonsecure_exception_prio_config+0xc>
   12cae:	bf00      	nop
   12cb0:	e000ed00 	.word	0xe000ed00

00012cb4 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12cb4:	4a08      	ldr	r2, [pc, #32]	; (12cd8 <tz_nonsecure_system_reset_req_block+0x24>)
   12cb6:	68d3      	ldr	r3, [r2, #12]
	if (block) {
   12cb8:	b140      	cbz	r0, 12ccc <tz_nonsecure_system_reset_req_block+0x18>
	uint32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
   12cba:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
   12cbc:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
   12cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
   12cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
   12cc8:	60d3      	str	r3, [r2, #12]
}
   12cca:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
   12ccc:	f023 0308 	bic.w	r3, r3, #8
   12cd0:	041b      	lsls	r3, r3, #16
   12cd2:	0c1b      	lsrs	r3, r3, #16
   12cd4:	e7f4      	b.n	12cc0 <tz_nonsecure_system_reset_req_block+0xc>
   12cd6:	bf00      	nop
   12cd8:	e000ed00 	.word	0xe000ed00

00012cdc <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
   12cdc:	4a03      	ldr	r2, [pc, #12]	; (12cec <tz_nonsecure_fpu_access_enable+0x10>)
   12cde:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   12ce2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
   12ce6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
   12cea:	4770      	bx	lr
   12cec:	e000ed00 	.word	0xe000ed00

00012cf0 <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
   12cf0:	4b08      	ldr	r3, [pc, #32]	; (12d14 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
   12cf2:	681a      	ldr	r2, [r3, #0]
   12cf4:	b118      	cbz	r0, 12cfe <tz_sau_configure+0xe>
   12cf6:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12cfa:	601a      	str	r2, [r3, #0]
		}
	}
}
   12cfc:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
   12cfe:	f022 0201 	bic.w	r2, r2, #1
   12d02:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12d04:	681a      	ldr	r2, [r3, #0]
		if (allns) {
   12d06:	b111      	cbz	r1, 12d0e <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
   12d08:	f042 0202 	orr.w	r2, r2, #2
   12d0c:	e7f5      	b.n	12cfa <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
   12d0e:	f022 0202 	bic.w	r2, r2, #2
   12d12:	e7f2      	b.n	12cfa <tz_sau_configure+0xa>
   12d14:	e000edd0 	.word	0xe000edd0

00012d18 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12d18:	4b01      	ldr	r3, [pc, #4]	; (12d20 <__stdout_hook_install+0x8>)
   12d1a:	6018      	str	r0, [r3, #0]
}
   12d1c:	4770      	bx	lr
   12d1e:	bf00      	nop
   12d20:	20000024 	.word	0x20000024

00012d24 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   12d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   12d26:	794b      	ldrb	r3, [r1, #5]
   12d28:	2b01      	cmp	r3, #1
   12d2a:	d029      	beq.n	12d80 <uarte_nrfx_configure+0x5c>
   12d2c:	2b03      	cmp	r3, #3
   12d2e:	d124      	bne.n	12d7a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   12d30:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   12d32:	798b      	ldrb	r3, [r1, #6]
   12d34:	2b03      	cmp	r3, #3
   12d36:	d120      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   12d38:	79cc      	ldrb	r4, [r1, #7]
   12d3a:	b124      	cbz	r4, 12d46 <uarte_nrfx_configure+0x22>
   12d3c:	2c01      	cmp	r4, #1
   12d3e:	d11c      	bne.n	12d7a <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   12d40:	6843      	ldr	r3, [r0, #4]
   12d42:	791b      	ldrb	r3, [r3, #4]
   12d44:	b1cb      	cbz	r3, 12d7a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   12d46:	790a      	ldrb	r2, [r1, #4]
   12d48:	b112      	cbz	r2, 12d50 <uarte_nrfx_configure+0x2c>
   12d4a:	2a02      	cmp	r2, #2
   12d4c:	d115      	bne.n	12d7a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   12d4e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   12d50:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   12d52:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   12d54:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   12d58:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   12d5a:	d065      	beq.n	12e28 <uarte_nrfx_configure+0x104>
   12d5c:	d82d      	bhi.n	12dba <uarte_nrfx_configure+0x96>
   12d5e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   12d62:	d064      	beq.n	12e2e <uarte_nrfx_configure+0x10a>
   12d64:	d816      	bhi.n	12d94 <uarte_nrfx_configure+0x70>
   12d66:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   12d6a:	d062      	beq.n	12e32 <uarte_nrfx_configure+0x10e>
   12d6c:	d80a      	bhi.n	12d84 <uarte_nrfx_configure+0x60>
   12d6e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   12d72:	d061      	beq.n	12e38 <uarte_nrfx_configure+0x114>
   12d74:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   12d78:	d061      	beq.n	12e3e <uarte_nrfx_configure+0x11a>
   12d7a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   12d7e:	e052      	b.n	12e26 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   12d80:	2600      	movs	r6, #0
   12d82:	e7d6      	b.n	12d32 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   12d84:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   12d88:	d05c      	beq.n	12e44 <uarte_nrfx_configure+0x120>
   12d8a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   12d8e:	d1f4      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   12d90:	4b37      	ldr	r3, [pc, #220]	; (12e70 <uarte_nrfx_configure+0x14c>)
   12d92:	e03c      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12d94:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   12d98:	d057      	beq.n	12e4a <uarte_nrfx_configure+0x126>
   12d9a:	d807      	bhi.n	12dac <uarte_nrfx_configure+0x88>
   12d9c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   12da0:	d055      	beq.n	12e4e <uarte_nrfx_configure+0x12a>
   12da2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   12da6:	d1e8      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   12da8:	4b32      	ldr	r3, [pc, #200]	; (12e74 <uarte_nrfx_configure+0x150>)
   12daa:	e030      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12dac:	f647 2712 	movw	r7, #31250	; 0x7a12
   12db0:	42bb      	cmp	r3, r7
   12db2:	d1e2      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   12db4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   12db8:	e029      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12dba:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   12dbe:	d048      	beq.n	12e52 <uarte_nrfx_configure+0x12e>
   12dc0:	d813      	bhi.n	12dea <uarte_nrfx_configure+0xc6>
   12dc2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   12dc6:	d047      	beq.n	12e58 <uarte_nrfx_configure+0x134>
   12dc8:	d809      	bhi.n	12dde <uarte_nrfx_configure+0xba>
   12dca:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   12dce:	42bb      	cmp	r3, r7
   12dd0:	d044      	beq.n	12e5c <uarte_nrfx_configure+0x138>
   12dd2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   12dd6:	d1d0      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   12dd8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   12ddc:	e017      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12dde:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   12de2:	d1ca      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   12de4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   12de8:	e011      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12dea:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   12dee:	d038      	beq.n	12e62 <uarte_nrfx_configure+0x13e>
   12df0:	d808      	bhi.n	12e04 <uarte_nrfx_configure+0xe0>
   12df2:	4f21      	ldr	r7, [pc, #132]	; (12e78 <uarte_nrfx_configure+0x154>)
   12df4:	42bb      	cmp	r3, r7
   12df6:	d037      	beq.n	12e68 <uarte_nrfx_configure+0x144>
   12df8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   12dfc:	d1bd      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   12dfe:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   12e02:	e004      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12e04:	4f1d      	ldr	r7, [pc, #116]	; (12e7c <uarte_nrfx_configure+0x158>)
   12e06:	42bb      	cmp	r3, r7
   12e08:	d1b7      	bne.n	12d7a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   12e0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   12e0e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   12e12:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   12e14:	4334      	orrs	r4, r6
   12e16:	4322      	orrs	r2, r4
   12e18:	3304      	adds	r3, #4
   12e1a:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   12e1c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   12e20:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   12e24:	2000      	movs	r0, #0
}
   12e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   12e28:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   12e2c:	e7ef      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   12e2e:	4b14      	ldr	r3, [pc, #80]	; (12e80 <uarte_nrfx_configure+0x15c>)
   12e30:	e7ed      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   12e32:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   12e36:	e7ea      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   12e38:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   12e3c:	e7e7      	b.n	12e0e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   12e3e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   12e42:	e7e4      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   12e44:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   12e48:	e7e1      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   12e4a:	4b0e      	ldr	r3, [pc, #56]	; (12e84 <uarte_nrfx_configure+0x160>)
   12e4c:	e7df      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   12e4e:	4b0e      	ldr	r3, [pc, #56]	; (12e88 <uarte_nrfx_configure+0x164>)
   12e50:	e7dd      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   12e52:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   12e56:	e7da      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   12e58:	4b0c      	ldr	r3, [pc, #48]	; (12e8c <uarte_nrfx_configure+0x168>)
   12e5a:	e7d8      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   12e5c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   12e60:	e7d5      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   12e62:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   12e66:	e7d2      	b.n	12e0e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   12e68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   12e6c:	e7cf      	b.n	12e0e <uarte_nrfx_configure+0xea>
   12e6e:	bf00      	nop
   12e70:	0013b000 	.word	0x0013b000
   12e74:	004ea000 	.word	0x004ea000
   12e78:	0003d090 	.word	0x0003d090
   12e7c:	000f4240 	.word	0x000f4240
   12e80:	00275000 	.word	0x00275000
   12e84:	0075c000 	.word	0x0075c000
   12e88:	003af000 	.word	0x003af000
   12e8c:	013a9000 	.word	0x013a9000

00012e90 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   12e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12e94:	4606      	mov	r6, r0
   12e96:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12e98:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12e9a:	f003 f8d0 	bl	1603e <k_is_in_isr>
   12e9e:	b9b8      	cbnz	r0, 12ed0 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   12ea0:	4b28      	ldr	r3, [pc, #160]	; (12f44 <uarte_nrfx_poll_out+0xb4>)
   12ea2:	781b      	ldrb	r3, [r3, #0]
   12ea4:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   12ea8:	6872      	ldr	r2, [r6, #4]
   12eaa:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   12eac:	b193      	cbz	r3, 12ed4 <uarte_nrfx_poll_out+0x44>
   12eae:	f04f 0320 	mov.w	r3, #32
   12eb2:	f3ef 8411 	mrs	r4, BASEPRI
   12eb6:	f383 8811 	msr	BASEPRI, r3
   12eba:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   12ebe:	4630      	mov	r0, r6
   12ec0:	f002 ff94 	bl	15dec <is_tx_ready>
   12ec4:	bb38      	cbnz	r0, 12f16 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   12ec6:	f384 8811 	msr	BASEPRI, r4
   12eca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12ece:	e7ee      	b.n	12eae <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   12ed0:	2301      	movs	r3, #1
   12ed2:	e7e9      	b.n	12ea8 <uarte_nrfx_poll_out+0x18>
   12ed4:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12ed6:	4630      	mov	r0, r6
   12ed8:	f002 ff88 	bl	15dec <is_tx_ready>
   12edc:	b970      	cbnz	r0, 12efc <uarte_nrfx_poll_out+0x6c>
   12ede:	2001      	movs	r0, #1
   12ee0:	f002 ffb4 	bl	15e4c <nrfx_busy_wait>
   12ee4:	3c01      	subs	r4, #1
   12ee6:	d1f6      	bne.n	12ed6 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   12ee8:	2100      	movs	r1, #0
   12eea:	2021      	movs	r0, #33	; 0x21
   12eec:	f001 f8ca 	bl	14084 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   12ef0:	e7f0      	b.n	12ed4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   12ef2:	f384 8811 	msr	BASEPRI, r4
   12ef6:	f3bf 8f6f 	isb	sy
}
   12efa:	e7f5      	b.n	12ee8 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   12efc:	f04f 0320 	mov.w	r3, #32
   12f00:	f3ef 8411 	mrs	r4, BASEPRI
   12f04:	f383 8811 	msr	BASEPRI, r3
   12f08:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   12f0c:	4630      	mov	r0, r6
   12f0e:	f002 ff6d 	bl	15dec <is_tx_ready>
   12f12:	2800      	cmp	r0, #0
   12f14:	d0ed      	beq.n	12ef2 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   12f16:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f18:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   12f1a:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   12f1e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   12f22:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12f26:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   12f2a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   12f2e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   12f32:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12f36:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   12f38:	f384 8811 	msr	BASEPRI, r4
   12f3c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   12f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f44:	20000881 	.word	0x20000881

00012f48 <uarte_instance_init.isra.0>:
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   12f48:	f04f 0c00 	mov.w	ip, #0
	return config->uarte_regs;
   12f4c:	6843      	ldr	r3, [r0, #4]
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   12f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   12f52:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   12f54:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   12f56:	460f      	mov	r7, r1
   12f58:	f8c4 c500 	str.w	ip, [r4, #1280]	; 0x500
   12f5c:	4605      	mov	r5, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   12f5e:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(config->pseltxd, 1);
   12f60:	6808      	ldr	r0, [r1, #0]

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12f62:	2101      	movs	r1, #1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   12f64:	4b3d      	ldr	r3, [pc, #244]	; (1305c <uarte_instance_init.isra.0+0x114>)
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   12f66:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12f6a:	4091      	lsls	r1, r2
    p_reg->OUTSET = set_mask;
   12f6c:	6099      	str	r1, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12f6e:	2103      	movs	r1, #3
   12f70:	3280      	adds	r2, #128	; 0x80
   12f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   12f76:	687a      	ldr	r2, [r7, #4]
   12f78:	1c51      	adds	r1, r2, #1
    *p_pin = pin_number & 0x1F;
   12f7a:	bf1e      	ittt	ne
   12f7c:	f002 011f 	andne.w	r1, r2, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12f80:	3180      	addne	r1, #128	; 0x80
   12f82:	f843 c021 	strne.w	ip, [r3, r1, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   12f86:	68b9      	ldr	r1, [r7, #8]
    p_reg->PSEL.TXD = pseltxd;
   12f88:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   12f8c:	1c48      	adds	r0, r1, #1
   12f8e:	bf18      	it	ne
   12f90:	2000      	movne	r0, #0
    p_reg->PSEL.RXD = pselrxd;
   12f92:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    *p_pin = pin_number & 0x1F;
   12f96:	bf1e      	ittt	ne
   12f98:	f001 021f 	andne.w	r2, r1, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12f9c:	3280      	addne	r2, #128	; 0x80
   12f9e:	f843 0022 	strne.w	r0, [r3, r2, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   12fa2:	68f8      	ldr	r0, [r7, #12]
   12fa4:	1c42      	adds	r2, r0, #1
   12fa6:	d00c      	beq.n	12fc2 <uarte_instance_init.isra.0+0x7a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12fa8:	f04f 0c01 	mov.w	ip, #1
    *p_pin = pin_number & 0x1F;
   12fac:	f000 021f 	and.w	r2, r0, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   12fb0:	fa0c fc02 	lsl.w	ip, ip, r2
    p_reg->OUTSET = set_mask;
   12fb4:	f8c3 c008 	str.w	ip, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   12fb8:	f04f 0c03 	mov.w	ip, #3
   12fbc:	3280      	adds	r2, #128	; 0x80
   12fbe:	f843 c022 	str.w	ip, [r3, r2, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   12fc2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   12fc6:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   12fca:	68e9      	ldr	r1, [r5, #12]
   12fcc:	4628      	mov	r0, r5
   12fce:	3104      	adds	r1, #4
   12fd0:	f7ff fea8 	bl	12d24 <uarte_nrfx_configure>
	if (err) {
   12fd4:	4680      	mov	r8, r0
   12fd6:	2800      	cmp	r0, #0
   12fd8:	d139      	bne.n	1304e <uarte_instance_init.isra.0+0x106>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   12fda:	686b      	ldr	r3, [r5, #4]
   12fdc:	799b      	ldrb	r3, [r3, #6]
   12fde:	b19b      	cbz	r3, 13008 <uarte_instance_init.isra.0+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   12fe0:	f106 0012 	add.w	r0, r6, #18
   12fe4:	f000 fa3e 	bl	13464 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   12fe8:	4b1d      	ldr	r3, [pc, #116]	; (13060 <uarte_instance_init.isra.0+0x118>)
   12fea:	4298      	cmp	r0, r3
   12fec:	d132      	bne.n	13054 <uarte_instance_init.isra.0+0x10c>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   12fee:	7cb3      	ldrb	r3, [r6, #18]
   12ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12ff4:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   12ff8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   12ffc:	2301      	movs	r3, #1
   12ffe:	7cb2      	ldrb	r2, [r6, #18]
   13000:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   13002:	4a18      	ldr	r2, [pc, #96]	; (13064 <uarte_instance_init.isra.0+0x11c>)
   13004:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13008:	2308      	movs	r3, #8
   1300a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1300e:	687b      	ldr	r3, [r7, #4]
   13010:	3301      	adds	r3, #1
   13012:	d00c      	beq.n	1302e <uarte_instance_init.isra.0+0xe6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13014:	2300      	movs	r3, #0
   13016:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1301a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1301e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   13022:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   13026:	2301      	movs	r3, #1
   13028:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1302c:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!get_dev_config(dev)->ppi_endtx) {
   1302e:	686b      	ldr	r3, [r5, #4]
   13030:	799b      	ldrb	r3, [r3, #6]
   13032:	b91b      	cbnz	r3, 1303c <uarte_instance_init.isra.0+0xf4>
    p_reg->INTENSET = mask;
   13034:	f44f 7380 	mov.w	r3, #256	; 0x100
   13038:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1303c:	2300      	movs	r3, #0

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1303e:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13040:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13044:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13048:	2301      	movs	r3, #1
   1304a:	60a3      	str	r3, [r4, #8]
   1304c:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1304e:	4640      	mov	r0, r8
   13050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
   13054:	f06f 0804 	mvn.w	r8, #4
   13058:	e7f9      	b.n	1304e <uarte_instance_init.isra.0+0x106>
   1305a:	bf00      	nop
   1305c:	50842500 	.word	0x50842500
   13060:	0bad0000 	.word	0x0bad0000
   13064:	50017000 	.word	0x50017000

00013068 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   13068:	b530      	push	{r4, r5, lr}
   1306a:	b085      	sub	sp, #20
   1306c:	466c      	mov	r4, sp
   1306e:	4605      	mov	r5, r0
   13070:	4b08      	ldr	r3, [pc, #32]	; (13094 <uarte_0_init+0x2c>)
   13072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   13074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   13078:	2200      	movs	r2, #0
   1307a:	2101      	movs	r1, #1
   1307c:	2008      	movs	r0, #8
   1307e:	f7ff f9db 	bl	12438 <z_arm_irq_priority_set>
   13082:	2008      	movs	r0, #8
   13084:	f7ff f9ba 	bl	123fc <arch_irq_enable>
   13088:	4621      	mov	r1, r4
   1308a:	4628      	mov	r0, r5
   1308c:	f7ff ff5c 	bl	12f48 <uarte_instance_init.isra.0>
   13090:	b005      	add	sp, #20
   13092:	bd30      	pop	{r4, r5, pc}
   13094:	0001636c 	.word	0x0001636c

00013098 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   13098:	b530      	push	{r4, r5, lr}
   1309a:	b085      	sub	sp, #20
   1309c:	466c      	mov	r4, sp
   1309e:	4605      	mov	r5, r0
   130a0:	4b08      	ldr	r3, [pc, #32]	; (130c4 <uarte_1_init+0x2c>)
   130a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   130a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   130a8:	2200      	movs	r2, #0
   130aa:	2101      	movs	r1, #1
   130ac:	2009      	movs	r0, #9
   130ae:	f7ff f9c3 	bl	12438 <z_arm_irq_priority_set>
   130b2:	2009      	movs	r0, #9
   130b4:	f7ff f9a2 	bl	123fc <arch_irq_enable>
   130b8:	4621      	mov	r1, r4
   130ba:	4628      	mov	r0, r5
   130bc:	f7ff ff44 	bl	12f48 <uarte_instance_init.isra.0>
   130c0:	b005      	add	sp, #20
   130c2:	bd30      	pop	{r4, r5, pc}
   130c4:	0001637c 	.word	0x0001637c

000130c8 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   130c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   130cc:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   130ce:	4c21      	ldr	r4, [pc, #132]	; (13154 <check_ext_api_requests+0x8c>)
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   130d0:	4e21      	ldr	r6, [pc, #132]	; (13158 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   130d2:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   130d6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13160 <check_ext_api_requests+0x98>
{
   130da:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   130dc:	45a8      	cmp	r8, r5
   130de:	d803      	bhi.n	130e8 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   130e0:	2000      	movs	r0, #0
   130e2:	b005      	add	sp, #20
   130e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   130e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   130ea:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   130ee:	681f      	ldr	r7, [r3, #0]
   130f0:	ab01      	add	r3, sp, #4
   130f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   130f6:	220c      	movs	r2, #12
   130f8:	4619      	mov	r1, r3
   130fa:	4638      	mov	r0, r7
   130fc:	f002 fdcf 	bl	15c9e <memcmp>
   13100:	b990      	cbnz	r0, 13128 <check_ext_api_requests+0x60>
   13102:	b18f      	cbz	r7, 13128 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   13104:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   13106:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   13108:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1310a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1310c:	4291      	cmp	r1, r2
   1310e:	d10b      	bne.n	13128 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   13110:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   13112:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   13114:	4291      	cmp	r1, r2
   13116:	d807      	bhi.n	13128 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   13118:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1311a:	4291      	cmp	r1, r2
   1311c:	d904      	bls.n	13128 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   1311e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   13120:	695b      	ldr	r3, [r3, #20]
   13122:	ea32 0303 	bics.w	r3, r2, r3
   13126:	d00a      	beq.n	1313e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   13128:	6a27      	ldr	r7, [r4, #32]
   1312a:	b167      	cbz	r7, 13146 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1312c:	480b      	ldr	r0, [pc, #44]	; (1315c <check_ext_api_requests+0x94>)
   1312e:	f002 f9ab 	bl	15488 <printk>
			k_panic();
   13132:	4040      	eors	r0, r0
   13134:	f380 8811 	msr	BASEPRI, r0
   13138:	f04f 0004 	mov.w	r0, #4
   1313c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1313e:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13140:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   13142:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   13144:	e7ca      	b.n	130dc <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   13146:	4648      	mov	r0, r9
   13148:	f002 f99e 	bl	15488 <printk>
			*ext_api_req->ext_api = NULL;
   1314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1314e:	601f      	str	r7, [r3, #0]
   13150:	e7f5      	b.n	1313e <check_ext_api_requests+0x76>
   13152:	bf00      	nop
   13154:	0001043c 	.word	0x0001043c
   13158:	0001638c 	.word	0x0001638c
   1315c:	000169ad 	.word	0x000169ad
   13160:	000169d6 	.word	0x000169d6

00013164 <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   13164:	4b05      	ldr	r3, [pc, #20]	; (1317c <nrf91_errata_14+0x18>)
   13166:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   13168:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   1316a:	681b      	ldr	r3, [r3, #0]
   1316c:	2b09      	cmp	r3, #9
   1316e:	d103      	bne.n	13178 <nrf91_errata_14+0x14>
            {
                switch(var2)
   13170:	1e43      	subs	r3, r0, #1
   13172:	4258      	negs	r0, r3
   13174:	4158      	adcs	r0, r3
   13176:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   13178:	2000      	movs	r0, #0
    #endif
}
   1317a:	4770      	bx	lr
   1317c:	00ff0134 	.word	0x00ff0134

00013180 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   13180:	4a4f      	ldr	r2, [pc, #316]	; (132c0 <SystemInit+0x140>)
{
   13182:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
   13184:	6813      	ldr	r3, [r2, #0]
   13186:	f043 0302 	orr.w	r3, r3, #2
   1318a:	6013      	str	r3, [r2, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   1318c:	4b4d      	ldr	r3, [pc, #308]	; (132c4 <SystemInit+0x144>)
            if (var1 == 0x09)
   1318e:	681b      	ldr	r3, [r3, #0]
   13190:	2b09      	cmp	r3, #9
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
   13192:	bf01      	itttt	eq
   13194:	f04f 2350 	moveq.w	r3, #1342197760	; 0x50005000
   13198:	2200      	moveq	r2, #0
   1319a:	f8c3 2114 	streq.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
   1319e:	f8c3 2118 	streq.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
   131a2:	f7ff ffdf 	bl	13164 <nrf91_errata_14>
   131a6:	b130      	cbz	r0, 131b6 <SystemInit+0x36>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
   131a8:	2301      	movs	r3, #1
   131aa:	4a47      	ldr	r2, [pc, #284]	; (132c8 <SystemInit+0x148>)
   131ac:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   131ae:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
   131b2:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   131b6:	4b43      	ldr	r3, [pc, #268]	; (132c4 <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
   131b8:	681b      	ldr	r3, [r3, #0]
   131ba:	2b09      	cmp	r3, #9
   131bc:	d107      	bne.n	131ce <SystemInit+0x4e>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
   131be:	4b43      	ldr	r3, [pc, #268]	; (132cc <SystemInit+0x14c>)
            {
                switch(var2)
   131c0:	681b      	ldr	r3, [r3, #0]
   131c2:	2b01      	cmp	r3, #1
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
   131c4:	bf1e      	ittt	ne
   131c6:	2201      	movne	r2, #1
   131c8:	4b41      	ldrne	r3, [pc, #260]	; (132d0 <SystemInit+0x150>)
   131ca:	f8c3 2578 	strne.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
   131ce:	f7ff ffc9 	bl	13164 <nrf91_errata_14>
   131d2:	b110      	cbz	r0, 131da <SystemInit+0x5a>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
   131d4:	220e      	movs	r2, #14
   131d6:	4b3f      	ldr	r3, [pc, #252]	; (132d4 <SystemInit+0x154>)
   131d8:	601a      	str	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
   131da:	4b3a      	ldr	r3, [pc, #232]	; (132c4 <SystemInit+0x144>)
            if (var1 == 0x09)
   131dc:	681b      	ldr	r3, [r3, #0]
   131de:	2b09      	cmp	r3, #9
   131e0:	d104      	bne.n	131ec <SystemInit+0x6c>
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
   131e2:	2200      	movs	r2, #0
   131e4:	4b3c      	ldr	r3, [pc, #240]	; (132d8 <SystemInit+0x158>)
   131e6:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
   131e8:	2201      	movs	r2, #1
   131ea:	605a      	str	r2, [r3, #4]
{
   131ec:	2200      	movs	r2, #0
   131ee:	00d3      	lsls	r3, r2, #3
   131f0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   131f4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
   131f8:	3101      	adds	r1, #1
   131fa:	d008      	beq.n	1320e <SystemInit+0x8e>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   131fc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13200:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   13202:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   13206:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
   1320a:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
   1320c:	d1ef      	bne.n	131ee <SystemInit+0x6e>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   1320e:	4b33      	ldr	r3, [pc, #204]	; (132dc <SystemInit+0x15c>)
   13210:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
   13212:	07d1      	lsls	r1, r2, #31
   13214:	d53b      	bpl.n	1328e <SystemInit+0x10e>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13216:	4b32      	ldr	r3, [pc, #200]	; (132e0 <SystemInit+0x160>)
   13218:	4619      	mov	r1, r3
   1321a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1321e:	2a01      	cmp	r2, #1
   13220:	d1fb      	bne.n	1321a <SystemInit+0x9a>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
   13222:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13226:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1322a:	2b01      	cmp	r3, #1
   1322c:	d1fb      	bne.n	13226 <SystemInit+0xa6>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
   1322e:	4b2b      	ldr	r3, [pc, #172]	; (132dc <SystemInit+0x15c>)
   13230:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
   13232:	07d2      	lsls	r2, r2, #31
   13234:	d508      	bpl.n	13248 <SystemInit+0xc8>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
   13236:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13238:	4929      	ldr	r1, [pc, #164]	; (132e0 <SystemInit+0x160>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
   1323a:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
   1323e:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   13240:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
   13244:	2a01      	cmp	r2, #1
   13246:	d1fb      	bne.n	13240 <SystemInit+0xc0>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   13248:	6a1a      	ldr	r2, [r3, #32]
   1324a:	3201      	adds	r2, #1
   1324c:	d10a      	bne.n	13264 <SystemInit+0xe4>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
   1324e:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
   13250:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13254:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
   13258:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1325a:	4a21      	ldr	r2, [pc, #132]	; (132e0 <SystemInit+0x160>)
   1325c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   13260:	2b01      	cmp	r3, #1
   13262:	d1fb      	bne.n	1325c <SystemInit+0xdc>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
   13264:	2200      	movs	r2, #0
   13266:	4b1e      	ldr	r3, [pc, #120]	; (132e0 <SystemInit+0x160>)
   13268:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
   1326c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   13270:	2a01      	cmp	r2, #1
   13272:	d1fb      	bne.n	1326c <SystemInit+0xec>
  __ASM volatile ("dsb 0xF":::"memory");
   13274:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13278:	491a      	ldr	r1, [pc, #104]	; (132e4 <SystemInit+0x164>)
   1327a:	4b1b      	ldr	r3, [pc, #108]	; (132e8 <SystemInit+0x168>)
   1327c:	68ca      	ldr	r2, [r1, #12]
   1327e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13282:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13284:	60cb      	str	r3, [r1, #12]
   13286:	f3bf 8f4f 	dsb	sy
    __NOP();
   1328a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1328c:	e7fd      	b.n	1328a <SystemInit+0x10a>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
   1328e:	6a1b      	ldr	r3, [r3, #32]
   13290:	3301      	adds	r3, #1
   13292:	d0c0      	beq.n	13216 <SystemInit+0x96>
        SCB->NSACR |= (3UL << 10);
   13294:	4b13      	ldr	r3, [pc, #76]	; (132e4 <SystemInit+0x164>)
   13296:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1329a:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   1329e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   132a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   132a6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   132aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   132ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   132b2:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   132b6:	4b0d      	ldr	r3, [pc, #52]	; (132ec <SystemInit+0x16c>)
   132b8:	4a0d      	ldr	r2, [pc, #52]	; (132f0 <SystemInit+0x170>)
   132ba:	601a      	str	r2, [r3, #0]
}
   132bc:	bd08      	pop	{r3, pc}
   132be:	bf00      	nop
   132c0:	e000edd0 	.word	0xe000edd0
   132c4:	00ff0130 	.word	0x00ff0130
   132c8:	50004a38 	.word	0x50004a38
   132cc:	00ff0134 	.word	0x00ff0134
   132d0:	50004000 	.word	0x50004000
   132d4:	5003aee4 	.word	0x5003aee4
   132d8:	5000470c 	.word	0x5000470c
   132dc:	00ff8000 	.word	0x00ff8000
   132e0:	50039000 	.word	0x50039000
   132e4:	e000ed00 	.word	0xe000ed00
   132e8:	05fa0004 	.word	0x05fa0004
   132ec:	20000050 	.word	0x20000050
   132f0:	03d09000 	.word	0x03d09000

000132f4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   132f4:	4b04      	ldr	r3, [pc, #16]	; (13308 <nrfx_clock_init+0x14>)
   132f6:	791a      	ldrb	r2, [r3, #4]
   132f8:	b922      	cbnz	r2, 13304 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   132fa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   132fc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   132fe:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   13300:	4802      	ldr	r0, [pc, #8]	; (1330c <nrfx_clock_init+0x18>)
   13302:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   13304:	4802      	ldr	r0, [pc, #8]	; (13310 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   13306:	4770      	bx	lr
   13308:	20000814 	.word	0x20000814
   1330c:	0bad0000 	.word	0x0bad0000
   13310:	0bad000c 	.word	0x0bad000c

00013314 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   13314:	b110      	cbz	r0, 1331c <nrfx_clock_start+0x8>
   13316:	2801      	cmp	r0, #1
   13318:	d020      	beq.n	1335c <nrfx_clock_start+0x48>
   1331a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1331c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
   13320:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   13324:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   13328:	03c9      	lsls	r1, r1, #15
   1332a:	d511      	bpl.n	13350 <nrfx_clock_start+0x3c>
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1332c:	f003 0303 	and.w	r3, r3, #3
   13330:	2b02      	cmp	r3, #2
   13332:	d10d      	bne.n	13350 <nrfx_clock_start+0x3c>
    p_reg->LFCLKSRC = (uint32_t)(source);
   13334:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13338:	2200      	movs	r2, #0
   1333a:	4b0d      	ldr	r3, [pc, #52]	; (13370 <nrfx_clock_start+0x5c>)
   1333c:	601a      	str	r2, [r3, #0]
   1333e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   13340:	2202      	movs	r2, #2
   13342:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13346:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1334a:	2201      	movs	r2, #1
   1334c:	609a      	str	r2, [r3, #8]
}
   1334e:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   13350:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13354:	2201      	movs	r2, #1
   13356:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1335a:	e7ed      	b.n	13338 <nrfx_clock_start+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1335c:	2200      	movs	r2, #0
   1335e:	4b05      	ldr	r3, [pc, #20]	; (13374 <nrfx_clock_start+0x60>)
   13360:	601a      	str	r2, [r3, #0]
   13362:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   13364:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13368:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1336c:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1336e:	4770      	bx	lr
   13370:	50005104 	.word	0x50005104
   13374:	50005100 	.word	0x50005100

00013378 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   13378:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1337a:	b110      	cbz	r0, 13382 <nrfx_clock_stop+0xa>
   1337c:	2801      	cmp	r0, #1
   1337e:	d018      	beq.n	133b2 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   13380:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   13382:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13386:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13388:	2101      	movs	r1, #1
   1338a:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1338e:	461c      	mov	r4, r3
    p_reg->INTENCLR = mask;
   13390:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13394:	4a15      	ldr	r2, [pc, #84]	; (133ec <nrfx_clock_stop+0x74>)
   13396:	6010      	str	r0, [r2, #0]
   13398:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1339a:	4a15      	ldr	r2, [pc, #84]	; (133f0 <nrfx_clock_stop+0x78>)
   1339c:	6011      	str	r1, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1339e:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   133a2:	03db      	lsls	r3, r3, #15
   133a4:	d5ec      	bpl.n	13380 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   133a6:	2001      	movs	r0, #1
   133a8:	f002 fd50 	bl	15e4c <nrfx_busy_wait>
   133ac:	3d01      	subs	r5, #1
   133ae:	d1f6      	bne.n	1339e <nrfx_clock_stop+0x26>
   133b0:	e7e6      	b.n	13380 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   133b2:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133b6:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133b8:	f242 7510 	movw	r5, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133bc:	4b0d      	ldr	r3, [pc, #52]	; (133f4 <nrfx_clock_stop+0x7c>)
    p_reg->INTENCLR = mask;
   133be:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   133c2:	601a      	str	r2, [r3, #0]
   133c4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   133c6:	4b0c      	ldr	r3, [pc, #48]	; (133f8 <nrfx_clock_stop+0x80>)
   133c8:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   133ca:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   133ce:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   133d2:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   133d6:	03d2      	lsls	r2, r2, #15
   133d8:	d5d2      	bpl.n	13380 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   133da:	2b00      	cmp	r3, #0
   133dc:	d0d0      	beq.n	13380 <nrfx_clock_stop+0x8>
   133de:	2001      	movs	r0, #1
   133e0:	f002 fd34 	bl	15e4c <nrfx_busy_wait>
   133e4:	3d01      	subs	r5, #1
   133e6:	d1f0      	bne.n	133ca <nrfx_clock_stop+0x52>
   133e8:	e7ca      	b.n	13380 <nrfx_clock_stop+0x8>
   133ea:	bf00      	nop
   133ec:	50005104 	.word	0x50005104
   133f0:	5000500c 	.word	0x5000500c
   133f4:	50005100 	.word	0x50005100
   133f8:	50005004 	.word	0x50005004

000133fc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   133fc:	4b16      	ldr	r3, [pc, #88]	; (13458 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   133fe:	b510      	push	{r4, lr}
   13400:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   13402:	b152      	cbz	r2, 1341a <nrfx_power_clock_irq_handler+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13404:	2000      	movs	r0, #0
   13406:	6018      	str	r0, [r3, #0]
   13408:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1340a:	2201      	movs	r2, #1
   1340c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   13410:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   13414:	4b11      	ldr	r3, [pc, #68]	; (1345c <nrfx_power_clock_irq_handler+0x60>)
   13416:	681b      	ldr	r3, [r3, #0]
   13418:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1341a:	4b11      	ldr	r3, [pc, #68]	; (13460 <nrfx_power_clock_irq_handler+0x64>)
   1341c:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1341e:	b18a      	cbz	r2, 13444 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13420:	2200      	movs	r2, #0
   13422:	601a      	str	r2, [r3, #0]
   13424:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   13426:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
   1342a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1342e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   13432:	f002 0203 	and.w	r2, r2, #3
   13436:	2a01      	cmp	r2, #1
   13438:	f04f 0102 	mov.w	r1, #2
   1343c:	d103      	bne.n	13446 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1343e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13442:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   13444:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   13446:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1344a:	4b04      	ldr	r3, [pc, #16]	; (1345c <nrfx_power_clock_irq_handler+0x60>)
   1344c:	2001      	movs	r0, #1
}
   1344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   13452:	681b      	ldr	r3, [r3, #0]
   13454:	4718      	bx	r3
   13456:	bf00      	nop
   13458:	50005100 	.word	0x50005100
   1345c:	20000814 	.word	0x20000814
   13460:	50005104 	.word	0x50005104

00013464 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   13464:	4a0b      	ldr	r2, [pc, #44]	; (13494 <nrfx_dppi_channel_alloc+0x30>)
{
   13466:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   13468:	6816      	ldr	r6, [r2, #0]
   1346a:	43f1      	mvns	r1, r6
   1346c:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   1346e:	b171      	cbz	r1, 1348e <nrfx_dppi_channel_alloc+0x2a>
   13470:	2500      	movs	r5, #0
   13472:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   13474:	fa21 f304 	lsr.w	r3, r1, r4
   13478:	07db      	lsls	r3, r3, #31
   1347a:	f105 0501 	add.w	r5, r5, #1
   1347e:	d5f8      	bpl.n	13472 <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   13480:	2301      	movs	r3, #1
   13482:	40a3      	lsls	r3, r4
   13484:	4333      	orrs	r3, r6
    *p_channel = channel;
   13486:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   13488:	4803      	ldr	r0, [pc, #12]	; (13498 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   1348a:	6013      	str	r3, [r2, #0]
}
   1348c:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1348e:	4803      	ldr	r0, [pc, #12]	; (1349c <nrfx_dppi_channel_alloc+0x38>)
   13490:	e7fc      	b.n	1348c <nrfx_dppi_channel_alloc+0x28>
   13492:	bf00      	nop
   13494:	2000081c 	.word	0x2000081c
   13498:	0bad0000 	.word	0x0bad0000
   1349c:	0bad0002 	.word	0x0bad0002

000134a0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   134a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   134a2:	4b10      	ldr	r3, [pc, #64]	; (134e4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   134a4:	4f10      	ldr	r7, [pc, #64]	; (134e8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   134a6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   134aa:	3001      	adds	r0, #1
   134ac:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   134b0:	42ae      	cmp	r6, r5
   134b2:	d800      	bhi.n	134b6 <z_sys_init_run_level+0x16>
		}
	}
}
   134b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   134b6:	e9d5 3400 	ldrd	r3, r4, [r5]
   134ba:	4620      	mov	r0, r4
   134bc:	4798      	blx	r3
   134be:	b170      	cbz	r0, 134de <z_sys_init_run_level+0x3e>
   134c0:	b16c      	cbz	r4, 134de <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   134c2:	2301      	movs	r3, #1
				(dev - __device_start));
   134c4:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   134c6:	4a09      	ldr	r2, [pc, #36]	; (134ec <z_sys_init_run_level+0x4c>)
   134c8:	1124      	asrs	r4, r4, #4
   134ca:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   134cc:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   134d0:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   134d4:	fa03 f404 	lsl.w	r4, r3, r4
   134d8:	4304      	orrs	r4, r0
   134da:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   134de:	3508      	adds	r5, #8
   134e0:	e7e6      	b.n	134b0 <z_sys_init_run_level+0x10>
   134e2:	bf00      	nop
   134e4:	00016550 	.word	0x00016550
   134e8:	200000bc 	.word	0x200000bc
   134ec:	2000010c 	.word	0x2000010c

000134f0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   134f0:	4b08      	ldr	r3, [pc, #32]	; (13514 <z_device_ready+0x24>)
   134f2:	1ac0      	subs	r0, r0, r3
   134f4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   134f6:	4b08      	ldr	r3, [pc, #32]	; (13518 <z_device_ready+0x28>)
   134f8:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   134fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   134fe:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   13500:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   13504:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   13508:	4210      	tst	r0, r2
}
   1350a:	bf0c      	ite	eq
   1350c:	4618      	moveq	r0, r3
   1350e:	2000      	movne	r0, #0
   13510:	4770      	bx	lr
   13512:	bf00      	nop
   13514:	200000bc 	.word	0x200000bc
   13518:	2000010c 	.word	0x2000010c

0001351c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1351c:	4911      	ldr	r1, [pc, #68]	; (13564 <z_impl_device_get_binding+0x48>)
{
   1351e:	b570      	push	{r4, r5, r6, lr}
   13520:	4605      	mov	r5, r0
   13522:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   13524:	4c10      	ldr	r4, [pc, #64]	; (13568 <z_impl_device_get_binding+0x4c>)
   13526:	428c      	cmp	r4, r1
   13528:	d104      	bne.n	13534 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1352a:	4c0f      	ldr	r4, [pc, #60]	; (13568 <z_impl_device_get_binding+0x4c>)
   1352c:	42b4      	cmp	r4, r6
   1352e:	d10a      	bne.n	13546 <z_impl_device_get_binding+0x2a>
	return NULL;
   13530:	2400      	movs	r4, #0
   13532:	e014      	b.n	1355e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   13534:	4620      	mov	r0, r4
   13536:	f7ff ffdb 	bl	134f0 <z_device_ready>
   1353a:	b110      	cbz	r0, 13542 <z_impl_device_get_binding+0x26>
   1353c:	6823      	ldr	r3, [r4, #0]
   1353e:	42ab      	cmp	r3, r5
   13540:	d00d      	beq.n	1355e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   13542:	3410      	adds	r4, #16
   13544:	e7ef      	b.n	13526 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   13546:	4620      	mov	r0, r4
   13548:	f7ff ffd2 	bl	134f0 <z_device_ready>
   1354c:	b908      	cbnz	r0, 13552 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1354e:	3410      	adds	r4, #16
   13550:	e7ec      	b.n	1352c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   13552:	4628      	mov	r0, r5
   13554:	6821      	ldr	r1, [r4, #0]
   13556:	f002 fb96 	bl	15c86 <strcmp>
   1355a:	2800      	cmp	r0, #0
   1355c:	d1f7      	bne.n	1354e <z_impl_device_get_binding+0x32>
}
   1355e:	4620      	mov	r0, r4
   13560:	bd70      	pop	{r4, r5, r6, pc}
   13562:	bf00      	nop
   13564:	2000010c 	.word	0x2000010c
   13568:	200000bc 	.word	0x200000bc

0001356c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1356e:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   13570:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   13572:	4e15      	ldr	r6, [pc, #84]	; (135c8 <idle+0x5c>)
	__asm__ volatile(
   13574:	f04f 0220 	mov.w	r2, #32
   13578:	f3ef 8311 	mrs	r3, BASEPRI
   1357c:	f382 8811 	msr	BASEPRI, r2
   13580:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   13584:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   13586:	b188      	cbz	r0, 135ac <idle+0x40>
			cpu->pending_abort = NULL;
   13588:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   1358a:	f383 8811 	msr	BASEPRI, r3
   1358e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   13592:	f000 fbc9 	bl	13d28 <z_thread_single_abort>
	__asm__ volatile(
   13596:	f04f 0320 	mov.w	r3, #32
   1359a:	f3ef 8011 	mrs	r0, BASEPRI
   1359e:	f383 8811 	msr	BASEPRI, r3
   135a2:	f3bf 8f6f 	isb	sy
   135a6:	f002 fc9e 	bl	15ee6 <z_reschedule_irqlock>
			continue;
   135aa:	e7e3      	b.n	13574 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   135ac:	f002 fd67 	bl	1607e <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   135b0:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   135b2:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   135b4:	2802      	cmp	r0, #2
   135b6:	bfd8      	it	le
   135b8:	4608      	movle	r0, r1
   135ba:	f002 fd70 	bl	1609e <z_set_timeout_expiry>
		_kernel.idle = ticks;
   135be:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   135c0:	f7fe ff90 	bl	124e4 <arch_cpu_idle>
}
   135c4:	e7d6      	b.n	13574 <idle+0x8>
   135c6:	bf00      	nop
   135c8:	20000820 	.word	0x20000820

000135cc <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   135cc:	4802      	ldr	r0, [pc, #8]	; (135d8 <z_bss_zero+0xc>)
   135ce:	4a03      	ldr	r2, [pc, #12]	; (135dc <z_bss_zero+0x10>)
   135d0:	2100      	movs	r1, #0
   135d2:	1a12      	subs	r2, r2, r0
   135d4:	f002 bbb5 	b.w	15d42 <memset>
   135d8:	20000160 	.word	0x20000160
   135dc:	20000884 	.word	0x20000884

000135e0 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   135e0:	2201      	movs	r2, #1
{
   135e2:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   135e4:	4b09      	ldr	r3, [pc, #36]	; (1360c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   135e6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   135e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   135ea:	f7ff ff59 	bl	134a0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   135ee:	f000 fe5d 	bl	142ac <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   135f2:	2003      	movs	r0, #3
   135f4:	f7ff ff54 	bl	134a0 <z_sys_init_run_level>

	z_init_static_threads();
   135f8:	f000 fde6 	bl	141c8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   135fc:	f001 ff1e 	bl	1543c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   13600:	4a03      	ldr	r2, [pc, #12]	; (13610 <bg_thread_main+0x30>)
   13602:	7b13      	ldrb	r3, [r2, #12]
   13604:	f023 0301 	bic.w	r3, r3, #1
   13608:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1360a:	bd08      	pop	{r3, pc}
   1360c:	20000881 	.word	0x20000881
   13610:	200001e0 	.word	0x200001e0

00013614 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   13614:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   13618:	4b37      	ldr	r3, [pc, #220]	; (136f8 <z_cstart+0xe4>)
   1361a:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
   1361c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   13620:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   13624:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13628:	2400      	movs	r4, #0
   1362a:	23e0      	movs	r3, #224	; 0xe0
   1362c:	4d33      	ldr	r5, [pc, #204]	; (136fc <z_cstart+0xe8>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1362e:	f04f 0b01 	mov.w	fp, #1
   13632:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   13636:	77ec      	strb	r4, [r5, #31]
   13638:	762c      	strb	r4, [r5, #24]
   1363a:	766c      	strb	r4, [r5, #25]
   1363c:	76ac      	strb	r4, [r5, #26]
   1363e:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   13640:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   13642:	4e2f      	ldr	r6, [pc, #188]	; (13700 <z_cstart+0xec>)
   13644:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   13648:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
   1364a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1364c:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 1371c <z_cstart+0x108>
   13650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13654:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
   13656:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   13658:	f7ff f8ee 	bl	12838 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1365c:	f7fe ff3c 	bl	124d8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   13660:	f04f 33ff 	mov.w	r3, #4294967295
   13664:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   13666:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   13668:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1366c:	4d25      	ldr	r5, [pc, #148]	; (13704 <z_cstart+0xf0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1366e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   13672:	ab06      	add	r3, sp, #24
   13674:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   13676:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   13678:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1367c:	f7ff ff10 	bl	134a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   13680:	2001      	movs	r0, #1
   13682:	f7ff ff0d 	bl	134a0 <z_sys_init_run_level>
	z_sched_init();
   13686:	f000 fca3 	bl	13fd0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1368a:	4b1f      	ldr	r3, [pc, #124]	; (13708 <z_cstart+0xf4>)
	_kernel.ready_q.cache = &z_main_thread;
   1368c:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1368e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   13692:	491e      	ldr	r1, [pc, #120]	; (1370c <z_cstart+0xf8>)
   13694:	9305      	str	r3, [sp, #20]
   13696:	4630      	mov	r0, r6
   13698:	4653      	mov	r3, sl
   1369a:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1369e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   136a2:	9400      	str	r4, [sp, #0]
   136a4:	f000 fd60 	bl	14168 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   136a8:	7b73      	ldrb	r3, [r6, #13]
   136aa:	4680      	mov	r8, r0
   136ac:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   136b0:	4630      	mov	r0, r6
   136b2:	7373      	strb	r3, [r6, #13]
   136b4:	f002 fc43 	bl	15f3e <z_ready_thread>
	z_setup_new_thread(thread, stack,
   136b8:	230f      	movs	r3, #15
   136ba:	4f15      	ldr	r7, [pc, #84]	; (13710 <z_cstart+0xfc>)
   136bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   136c0:	e9cd 4302 	strd	r4, r3, [sp, #8]
   136c4:	4913      	ldr	r1, [pc, #76]	; (13714 <z_cstart+0x100>)
   136c6:	4b14      	ldr	r3, [pc, #80]	; (13718 <z_cstart+0x104>)
   136c8:	4638      	mov	r0, r7
   136ca:	e9cd b404 	strd	fp, r4, [sp, #16]
   136ce:	e9cd 5400 	strd	r5, r4, [sp]
   136d2:	f000 fd49 	bl	14168 <z_setup_new_thread>
   136d6:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   136d8:	4652      	mov	r2, sl
   136da:	f023 0304 	bic.w	r3, r3, #4
   136de:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   136e0:	f105 031c 	add.w	r3, r5, #28
   136e4:	4641      	mov	r1, r8
   136e6:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   136e8:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   136ec:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   136ee:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   136f0:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   136f4:	f7fe fed2 	bl	1249c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   136f8:	200019c8 	.word	0x200019c8
   136fc:	e000ed00 	.word	0xe000ed00
   13700:	200001e0 	.word	0x200001e0
   13704:	20000820 	.word	0x20000820
   13708:	00016a14 	.word	0x00016a14
   1370c:	20000888 	.word	0x20000888
   13710:	20000160 	.word	0x20000160
   13714:	20001888 	.word	0x20001888
   13718:	0001356d 	.word	0x0001356d
   1371c:	000135e1 	.word	0x000135e1

00013720 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   13720:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   13722:	4b0e      	ldr	r3, [pc, #56]	; (1375c <init_mem_slab_module+0x3c>)
   13724:	4c0e      	ldr	r4, [pc, #56]	; (13760 <init_mem_slab_module+0x40>)
   13726:	42a3      	cmp	r3, r4
   13728:	d301      	bcc.n	1372e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1372a:	2000      	movs	r0, #0
	return rc;
}
   1372c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1372e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   13732:	ea41 0200 	orr.w	r2, r1, r0
   13736:	f012 0203 	ands.w	r2, r2, #3
   1373a:	d10b      	bne.n	13754 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1373c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1373e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   13740:	42aa      	cmp	r2, r5
   13742:	d101      	bne.n	13748 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   13744:	331c      	adds	r3, #28
   13746:	e7ee      	b.n	13726 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   13748:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1374a:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   1374c:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1374e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   13750:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   13752:	e7f5      	b.n	13740 <init_mem_slab_module+0x20>
		return -EINVAL;
   13754:	f06f 0015 	mvn.w	r0, #21
	return rc;
   13758:	e7e8      	b.n	1372c <init_mem_slab_module+0xc>
   1375a:	bf00      	nop
   1375c:	20000110 	.word	0x20000110
   13760:	20000110 	.word	0x20000110

00013764 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   13764:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   13766:	460c      	mov	r4, r1
   13768:	4616      	mov	r6, r2
   1376a:	461f      	mov	r7, r3
   1376c:	f04f 0320 	mov.w	r3, #32
   13770:	f3ef 8111 	mrs	r1, BASEPRI
   13774:	f383 8811 	msr	BASEPRI, r3
   13778:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1377c:	6943      	ldr	r3, [r0, #20]
   1377e:	b15b      	cbz	r3, 13798 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   13780:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   13782:	681b      	ldr	r3, [r3, #0]
   13784:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   13786:	6983      	ldr	r3, [r0, #24]
   13788:	3301      	adds	r3, #1
   1378a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1378c:	2000      	movs	r0, #0
	__asm__ volatile(
   1378e:	f381 8811 	msr	BASEPRI, r1
   13792:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   13796:	e011      	b.n	137bc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13798:	ea56 0207 	orrs.w	r2, r6, r7
   1379c:	d103      	bne.n	137a6 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1379e:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   137a2:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   137a4:	e7f3      	b.n	1378e <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   137a6:	4602      	mov	r2, r0
   137a8:	e9cd 6700 	strd	r6, r7, [sp]
   137ac:	4804      	ldr	r0, [pc, #16]	; (137c0 <k_mem_slab_alloc+0x5c>)
   137ae:	f000 fb7d 	bl	13eac <z_pend_curr>
		if (result == 0) {
   137b2:	b918      	cbnz	r0, 137bc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   137b4:	4b03      	ldr	r3, [pc, #12]	; (137c4 <k_mem_slab_alloc+0x60>)
   137b6:	689b      	ldr	r3, [r3, #8]
   137b8:	695b      	ldr	r3, [r3, #20]
   137ba:	6023      	str	r3, [r4, #0]
}
   137bc:	b002      	add	sp, #8
   137be:	bdd0      	pop	{r4, r6, r7, pc}
   137c0:	20000882 	.word	0x20000882
   137c4:	20000820 	.word	0x20000820

000137c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   137c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   137ca:	4604      	mov	r4, r0
   137cc:	460d      	mov	r5, r1
	__asm__ volatile(
   137ce:	f04f 0320 	mov.w	r3, #32
   137d2:	f3ef 8611 	mrs	r6, BASEPRI
   137d6:	f383 8811 	msr	BASEPRI, r3
   137da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   137de:	6947      	ldr	r7, [r0, #20]
   137e0:	b96f      	cbnz	r7, 137fe <k_mem_slab_free+0x36>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   137e2:	f002 fc07 	bl	15ff4 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   137e6:	b150      	cbz	r0, 137fe <k_mem_slab_free+0x36>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   137e8:	682a      	ldr	r2, [r5, #0]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   137ea:	67c7      	str	r7, [r0, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   137ec:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   137ee:	f002 fba6 	bl	15f3e <z_ready_thread>
			z_reschedule(&lock, key);
   137f2:	4631      	mov	r1, r6
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   137f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   137f8:	4807      	ldr	r0, [pc, #28]	; (13818 <k_mem_slab_free+0x50>)
   137fa:	f000 b90f 	b.w	13a1c <z_reschedule>
	**(char ***) mem = slab->free_list;
   137fe:	682b      	ldr	r3, [r5, #0]
   13800:	6962      	ldr	r2, [r4, #20]
   13802:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   13804:	682b      	ldr	r3, [r5, #0]
   13806:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   13808:	69a3      	ldr	r3, [r4, #24]
   1380a:	3b01      	subs	r3, #1
   1380c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1380e:	f386 8811 	msr	BASEPRI, r6
   13812:	f3bf 8f6f 	isb	sy
}
   13816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13818:	20000882 	.word	0x20000882

0001381c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1381c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   13820:	4604      	mov	r4, r0
   13822:	4616      	mov	r6, r2
   13824:	461f      	mov	r7, r3
	__asm__ volatile(
   13826:	f04f 0320 	mov.w	r3, #32
   1382a:	f3ef 8811 	mrs	r8, BASEPRI
   1382e:	f383 8811 	msr	BASEPRI, r3
   13832:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   13836:	68c3      	ldr	r3, [r0, #12]
   13838:	4a32      	ldr	r2, [pc, #200]	; (13904 <z_impl_k_mutex_lock+0xe8>)
   1383a:	b16b      	cbz	r3, 13858 <z_impl_k_mutex_lock+0x3c>
   1383c:	6880      	ldr	r0, [r0, #8]
   1383e:	6891      	ldr	r1, [r2, #8]
   13840:	4288      	cmp	r0, r1
   13842:	d019      	beq.n	13878 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   13844:	ea56 0307 	orrs.w	r3, r6, r7
   13848:	d118      	bne.n	1387c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1384a:	f388 8811 	msr	BASEPRI, r8
   1384e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   13852:	f06f 000f 	mvn.w	r0, #15
   13856:	e00c      	b.n	13872 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   13858:	6891      	ldr	r1, [r2, #8]
   1385a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1385e:	3301      	adds	r3, #1
   13860:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   13862:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   13864:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   13866:	60a3      	str	r3, [r4, #8]
   13868:	f388 8811 	msr	BASEPRI, r8
   1386c:	f3bf 8f6f 	isb	sy
		return 0;
   13870:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   13872:	b002      	add	sp, #8
   13874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   13878:	6921      	ldr	r1, [r4, #16]
   1387a:	e7f0      	b.n	1385e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1387c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   13880:	f991 100e 	ldrsb.w	r1, [r1, #14]
   13884:	4299      	cmp	r1, r3
   13886:	bfa8      	it	ge
   13888:	4619      	movge	r1, r3
   1388a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1388e:	4299      	cmp	r1, r3
   13890:	da2c      	bge.n	138ec <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   13892:	f000 fb59 	bl	13f48 <z_set_prio>
   13896:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   13898:	4622      	mov	r2, r4
   1389a:	4641      	mov	r1, r8
   1389c:	e9cd 6700 	strd	r6, r7, [sp]
   138a0:	4819      	ldr	r0, [pc, #100]	; (13908 <z_impl_k_mutex_lock+0xec>)
   138a2:	f000 fb03 	bl	13eac <z_pend_curr>
	if (got_mutex == 0) {
   138a6:	2800      	cmp	r0, #0
   138a8:	d0e3      	beq.n	13872 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   138aa:	f04f 0320 	mov.w	r3, #32
   138ae:	f3ef 8611 	mrs	r6, BASEPRI
   138b2:	f383 8811 	msr	BASEPRI, r3
   138b6:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   138ba:	6823      	ldr	r3, [r4, #0]
   138bc:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   138be:	42a3      	cmp	r3, r4
   138c0:	d007      	beq.n	138d2 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   138c2:	b133      	cbz	r3, 138d2 <z_impl_k_mutex_lock+0xb6>
   138c4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   138c8:	4299      	cmp	r1, r3
   138ca:	bfa8      	it	ge
   138cc:	4619      	movge	r1, r3
   138ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   138d2:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   138d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   138d8:	4299      	cmp	r1, r3
   138da:	d109      	bne.n	138f0 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   138dc:	b16d      	cbz	r5, 138fa <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   138de:	4631      	mov	r1, r6
   138e0:	4809      	ldr	r0, [pc, #36]	; (13908 <z_impl_k_mutex_lock+0xec>)
   138e2:	f000 f89b 	bl	13a1c <z_reschedule>
	return -EAGAIN;
   138e6:	f06f 000a 	mvn.w	r0, #10
   138ea:	e7c2      	b.n	13872 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   138ec:	2500      	movs	r5, #0
   138ee:	e7d3      	b.n	13898 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   138f0:	f000 fb2a 	bl	13f48 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   138f4:	2800      	cmp	r0, #0
   138f6:	d1f2      	bne.n	138de <z_impl_k_mutex_lock+0xc2>
   138f8:	e7f0      	b.n	138dc <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   138fa:	f386 8811 	msr	BASEPRI, r6
   138fe:	f3bf 8f6f 	isb	sy
   13902:	e7f0      	b.n	138e6 <z_impl_k_mutex_lock+0xca>
   13904:	20000820 	.word	0x20000820
   13908:	20000882 	.word	0x20000882

0001390c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1390c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1390e:	6883      	ldr	r3, [r0, #8]
{
   13910:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   13912:	2b00      	cmp	r3, #0
   13914:	d036      	beq.n	13984 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   13916:	4a1e      	ldr	r2, [pc, #120]	; (13990 <z_impl_k_mutex_unlock+0x84>)
   13918:	6892      	ldr	r2, [r2, #8]
   1391a:	4293      	cmp	r3, r2
   1391c:	d135      	bne.n	1398a <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1391e:	7bda      	ldrb	r2, [r3, #15]
   13920:	3a01      	subs	r2, #1
   13922:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   13924:	68c3      	ldr	r3, [r0, #12]
   13926:	2b01      	cmp	r3, #1
   13928:	d005      	beq.n	13936 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1392a:	3b01      	subs	r3, #1
   1392c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1392e:	f000 f8d9 	bl	13ae4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   13932:	2000      	movs	r0, #0
}
   13934:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   13936:	f04f 0320 	mov.w	r3, #32
   1393a:	f3ef 8511 	mrs	r5, BASEPRI
   1393e:	f383 8811 	msr	BASEPRI, r3
   13942:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   13946:	6901      	ldr	r1, [r0, #16]
   13948:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1394a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1394e:	4299      	cmp	r1, r3
   13950:	d001      	beq.n	13956 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   13952:	f000 faf9 	bl	13f48 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   13956:	4620      	mov	r0, r4
   13958:	f002 fb4c 	bl	15ff4 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1395c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1395e:	b158      	cbz	r0, 13978 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   13960:	f990 200e 	ldrsb.w	r2, [r0, #14]
   13964:	6122      	str	r2, [r4, #16]
   13966:	2200      	movs	r2, #0
   13968:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1396a:	f002 fae8 	bl	15f3e <z_ready_thread>
		z_reschedule(&lock, key);
   1396e:	4629      	mov	r1, r5
   13970:	4808      	ldr	r0, [pc, #32]	; (13994 <z_impl_k_mutex_unlock+0x88>)
   13972:	f000 f853 	bl	13a1c <z_reschedule>
   13976:	e7da      	b.n	1392e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   13978:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1397a:	f385 8811 	msr	BASEPRI, r5
   1397e:	f3bf 8f6f 	isb	sy
   13982:	e7d4      	b.n	1392e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   13984:	f06f 0015 	mvn.w	r0, #21
   13988:	e7d4      	b.n	13934 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1398a:	f04f 30ff 	mov.w	r0, #4294967295
   1398e:	e7d1      	b.n	13934 <z_impl_k_mutex_unlock+0x28>
   13990:	20000820 	.word	0x20000820
   13994:	20000882 	.word	0x20000882

00013998 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   13998:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1399a:	4c08      	ldr	r4, [pc, #32]	; (139bc <z_reset_time_slice+0x24>)
   1399c:	6823      	ldr	r3, [r4, #0]
   1399e:	b15b      	cbz	r3, 139b8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   139a0:	f7fe f978 	bl	11c94 <z_clock_elapsed>
   139a4:	6822      	ldr	r2, [r4, #0]
   139a6:	4906      	ldr	r1, [pc, #24]	; (139c0 <z_reset_time_slice+0x28>)
   139a8:	4410      	add	r0, r2
   139aa:	6148      	str	r0, [r1, #20]
		z_set_timeout_expiry(slice_time, false);
	}
}
   139ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   139b0:	2100      	movs	r1, #0
   139b2:	4610      	mov	r0, r2
   139b4:	f002 bb73 	b.w	1609e <z_set_timeout_expiry>
}
   139b8:	bd10      	pop	{r4, pc}
   139ba:	bf00      	nop
   139bc:	2000085c 	.word	0x2000085c
   139c0:	20000820 	.word	0x20000820

000139c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   139c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139c6:	460c      	mov	r4, r1
	__asm__ volatile(
   139c8:	f04f 0320 	mov.w	r3, #32
   139cc:	f3ef 8511 	mrs	r5, BASEPRI
   139d0:	f383 8811 	msr	BASEPRI, r3
   139d4:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   139d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   139dc:	f240 36e7 	movw	r6, #999	; 0x3e7
   139e0:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   139e2:	2200      	movs	r2, #0
   139e4:	fbe1 6700 	umlal	r6, r7, r1, r0
   139e8:	4b09      	ldr	r3, [pc, #36]	; (13a10 <k_sched_time_slice_set+0x4c>)
   139ea:	4630      	mov	r0, r6
   139ec:	615a      	str	r2, [r3, #20]
   139ee:	4639      	mov	r1, r7
   139f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   139f4:	2300      	movs	r3, #0
   139f6:	f7fc fd21 	bl	1043c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   139fa:	4b06      	ldr	r3, [pc, #24]	; (13a14 <k_sched_time_slice_set+0x50>)
   139fc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   139fe:	4b06      	ldr	r3, [pc, #24]	; (13a18 <k_sched_time_slice_set+0x54>)
   13a00:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   13a02:	f7ff ffc9 	bl	13998 <z_reset_time_slice>
	__asm__ volatile(
   13a06:	f385 8811 	msr	BASEPRI, r5
   13a0a:	f3bf 8f6f 	isb	sy
	}
}
   13a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13a10:	20000820 	.word	0x20000820
   13a14:	2000085c 	.word	0x2000085c
   13a18:	20000858 	.word	0x20000858

00013a1c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13a1c:	b949      	cbnz	r1, 13a32 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13a1e:	f3ef 8005 	mrs	r0, IPSR
   13a22:	b930      	cbnz	r0, 13a32 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   13a24:	4b05      	ldr	r3, [pc, #20]	; (13a3c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   13a26:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13a28:	689b      	ldr	r3, [r3, #8]
   13a2a:	429a      	cmp	r2, r3
   13a2c:	d001      	beq.n	13a32 <z_reschedule+0x16>
	ret = arch_swap(key);
   13a2e:	f7fe bc8f 	b.w	12350 <arch_swap>
   13a32:	f381 8811 	msr	BASEPRI, r1
   13a36:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   13a3a:	4770      	bx	lr
   13a3c:	20000820 	.word	0x20000820

00013a40 <k_sched_lock>:
	__asm__ volatile(
   13a40:	f04f 0320 	mov.w	r3, #32
   13a44:	f3ef 8111 	mrs	r1, BASEPRI
   13a48:	f383 8811 	msr	BASEPRI, r3
   13a4c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   13a50:	4b04      	ldr	r3, [pc, #16]	; (13a64 <k_sched_lock+0x24>)
   13a52:	689a      	ldr	r2, [r3, #8]
   13a54:	7bd3      	ldrb	r3, [r2, #15]
   13a56:	3b01      	subs	r3, #1
   13a58:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   13a5a:	f381 8811 	msr	BASEPRI, r1
   13a5e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   13a62:	4770      	bx	lr
   13a64:	20000820 	.word	0x20000820

00013a68 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   13a68:	4b09      	ldr	r3, [pc, #36]	; (13a90 <z_priq_dumb_remove+0x28>)
   13a6a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   13a6e:	4282      	cmp	r2, r0
   13a70:	d105      	bne.n	13a7e <z_priq_dumb_remove+0x16>
   13a72:	689b      	ldr	r3, [r3, #8]
   13a74:	428b      	cmp	r3, r1
   13a76:	d102      	bne.n	13a7e <z_priq_dumb_remove+0x16>
   13a78:	7b4b      	ldrb	r3, [r1, #13]
   13a7a:	06db      	lsls	r3, r3, #27
   13a7c:	d106      	bne.n	13a8c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   13a7e:	e9d1 3200 	ldrd	r3, r2, [r1]
   13a82:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   13a84:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13a86:	2300      	movs	r3, #0
	node->prev = NULL;
   13a88:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   13a8c:	4770      	bx	lr
   13a8e:	bf00      	nop
   13a90:	20000820 	.word	0x20000820

00013a94 <update_cache>:
{
   13a94:	b538      	push	{r3, r4, r5, lr}
   13a96:	4c12      	ldr	r4, [pc, #72]	; (13ae0 <update_cache+0x4c>)
   13a98:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   13a9a:	6923      	ldr	r3, [r4, #16]
   13a9c:	68a2      	ldr	r2, [r4, #8]
   13a9e:	b10b      	cbz	r3, 13aa4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   13aa0:	68e5      	ldr	r5, [r4, #12]
   13aa2:	e00c      	b.n	13abe <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   13aa4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   13aa8:	f002 fa3f 	bl	15f2a <z_priq_dumb_best>
   13aac:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   13aae:	7b53      	ldrb	r3, [r2, #13]
   13ab0:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   13ab2:	bf44      	itt	mi
   13ab4:	f043 0308 	orrmi.w	r3, r3, #8
   13ab8:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   13aba:	2d00      	cmp	r5, #0
   13abc:	d0f0      	beq.n	13aa0 <update_cache+0xc>
	if (preempt_ok != 0) {
   13abe:	b949      	cbnz	r1, 13ad4 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   13ac0:	7b53      	ldrb	r3, [r2, #13]
   13ac2:	06db      	lsls	r3, r3, #27
   13ac4:	d106      	bne.n	13ad4 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   13ac6:	69ab      	ldr	r3, [r5, #24]
   13ac8:	b923      	cbnz	r3, 13ad4 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   13aca:	89d3      	ldrh	r3, [r2, #14]
   13acc:	2b7f      	cmp	r3, #127	; 0x7f
   13ace:	d901      	bls.n	13ad4 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   13ad0:	62a2      	str	r2, [r4, #40]	; 0x28
}
   13ad2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   13ad4:	4295      	cmp	r5, r2
   13ad6:	d001      	beq.n	13adc <update_cache+0x48>
			z_reset_time_slice();
   13ad8:	f7ff ff5e 	bl	13998 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   13adc:	62a5      	str	r5, [r4, #40]	; 0x28
}
   13ade:	e7f8      	b.n	13ad2 <update_cache+0x3e>
   13ae0:	20000820 	.word	0x20000820

00013ae4 <k_sched_unlock>:
{
   13ae4:	b510      	push	{r4, lr}
	__asm__ volatile(
   13ae6:	f04f 0320 	mov.w	r3, #32
   13aea:	f3ef 8411 	mrs	r4, BASEPRI
   13aee:	f383 8811 	msr	BASEPRI, r3
   13af2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   13af6:	4b08      	ldr	r3, [pc, #32]	; (13b18 <k_sched_unlock+0x34>)
		update_cache(0);
   13af8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   13afa:	689a      	ldr	r2, [r3, #8]
   13afc:	7bd3      	ldrb	r3, [r2, #15]
   13afe:	3301      	adds	r3, #1
   13b00:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   13b02:	f7ff ffc7 	bl	13a94 <update_cache>
	__asm__ volatile(
   13b06:	f384 8811 	msr	BASEPRI, r4
   13b0a:	f3bf 8f6f 	isb	sy
}
   13b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   13b12:	f002 b9f4 	b.w	15efe <z_reschedule_unlocked>
   13b16:	bf00      	nop
   13b18:	20000820 	.word	0x20000820

00013b1c <ready_thread>:
{
   13b1c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   13b1e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   13b22:	7b43      	ldrb	r3, [r0, #13]
   13b24:	2a00      	cmp	r2, #0
   13b26:	db2c      	blt.n	13b82 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13b28:	06db      	lsls	r3, r3, #27
   13b2a:	d12a      	bne.n	13b82 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   13b2c:	6983      	ldr	r3, [r0, #24]
   13b2e:	bb43      	cbnz	r3, 13b82 <ready_thread+0x66>
	return list->head == list;
   13b30:	4a15      	ldr	r2, [pc, #84]	; (13b88 <ready_thread+0x6c>)
   13b32:	4611      	mov	r1, r2
   13b34:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13b38:	428c      	cmp	r4, r1
   13b3a:	bf18      	it	ne
   13b3c:	4623      	movne	r3, r4
   13b3e:	2b00      	cmp	r3, #0
   13b40:	bf38      	it	cc
   13b42:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13b44:	6b14      	ldr	r4, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13b46:	b1b3      	cbz	r3, 13b76 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   13b48:	f990 600e 	ldrsb.w	r6, [r0, #14]
   13b4c:	f993 500e 	ldrsb.w	r5, [r3, #14]
   13b50:	42ae      	cmp	r6, r5
   13b52:	db03      	blt.n	13b5c <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   13b54:	42a3      	cmp	r3, r4
   13b56:	d00e      	beq.n	13b76 <ready_thread+0x5a>
   13b58:	681b      	ldr	r3, [r3, #0]
   13b5a:	e7f4      	b.n	13b46 <ready_thread+0x2a>
	node->prev = successor->prev;
   13b5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   13b5e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   13b62:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   13b64:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   13b66:	7b43      	ldrb	r3, [r0, #13]
   13b68:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13b6c:	7343      	strb	r3, [r0, #13]
}
   13b6e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   13b70:	2000      	movs	r0, #0
   13b72:	f7ff bf8f 	b.w	13a94 <update_cache>
	node->prev = list->tail;
   13b76:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   13b7a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   13b7c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   13b7e:	6310      	str	r0, [r2, #48]	; 0x30
}
   13b80:	e7f1      	b.n	13b66 <ready_thread+0x4a>
}
   13b82:	bc70      	pop	{r4, r5, r6}
   13b84:	4770      	bx	lr
   13b86:	bf00      	nop
   13b88:	20000820 	.word	0x20000820

00013b8c <z_sched_start>:
{
   13b8c:	b510      	push	{r4, lr}
	__asm__ volatile(
   13b8e:	f04f 0220 	mov.w	r2, #32
   13b92:	f3ef 8411 	mrs	r4, BASEPRI
   13b96:	f382 8811 	msr	BASEPRI, r2
   13b9a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   13b9e:	7b42      	ldrb	r2, [r0, #13]
   13ba0:	0751      	lsls	r1, r2, #29
   13ba2:	d404      	bmi.n	13bae <z_sched_start+0x22>
	__asm__ volatile(
   13ba4:	f384 8811 	msr	BASEPRI, r4
   13ba8:	f3bf 8f6f 	isb	sy
}
   13bac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13bae:	f022 0204 	bic.w	r2, r2, #4
   13bb2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   13bb4:	f7ff ffb2 	bl	13b1c <ready_thread>
	z_reschedule(&sched_spinlock, key);
   13bb8:	4621      	mov	r1, r4
}
   13bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   13bbe:	4801      	ldr	r0, [pc, #4]	; (13bc4 <z_sched_start+0x38>)
   13bc0:	f7ff bf2c 	b.w	13a1c <z_reschedule>
   13bc4:	20000882 	.word	0x20000882

00013bc8 <move_thread_to_end_of_prio_q>:
{
   13bc8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   13bca:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   13bce:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   13bd0:	2b00      	cmp	r3, #0
   13bd2:	da02      	bge.n	13bda <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   13bd4:	4817      	ldr	r0, [pc, #92]	; (13c34 <move_thread_to_end_of_prio_q+0x6c>)
   13bd6:	f7ff ff47 	bl	13a68 <z_priq_dumb_remove>
	return list->head == list;
   13bda:	4a17      	ldr	r2, [pc, #92]	; (13c38 <move_thread_to_end_of_prio_q+0x70>)
   13bdc:	4610      	mov	r0, r2
   13bde:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13be2:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13be4:	4283      	cmp	r3, r0
   13be6:	bf08      	it	eq
   13be8:	2300      	moveq	r3, #0
   13bea:	2b00      	cmp	r3, #0
   13bec:	bf38      	it	cc
   13bee:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13bf0:	b1d3      	cbz	r3, 13c28 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   13bf2:	f991 600e 	ldrsb.w	r6, [r1, #14]
   13bf6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   13bfa:	42ae      	cmp	r6, r5
   13bfc:	db03      	blt.n	13c06 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   13bfe:	42a3      	cmp	r3, r4
   13c00:	d012      	beq.n	13c28 <move_thread_to_end_of_prio_q+0x60>
   13c02:	681b      	ldr	r3, [r3, #0]
   13c04:	e7f4      	b.n	13bf0 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   13c06:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   13c08:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   13c0c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   13c0e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   13c10:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   13c12:	6890      	ldr	r0, [r2, #8]
   13c14:	f063 037f 	orn	r3, r3, #127	; 0x7f
   13c18:	734b      	strb	r3, [r1, #13]
   13c1a:	1a43      	subs	r3, r0, r1
   13c1c:	4258      	negs	r0, r3
   13c1e:	4158      	adcs	r0, r3
}
   13c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   13c24:	f7ff bf36 	b.w	13a94 <update_cache>
	node->prev = list->tail;
   13c28:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   13c2c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   13c2e:	6019      	str	r1, [r3, #0]
	list->tail = node;
   13c30:	6311      	str	r1, [r2, #48]	; 0x30
}
   13c32:	e7ed      	b.n	13c10 <move_thread_to_end_of_prio_q+0x48>
   13c34:	2000084c 	.word	0x2000084c
   13c38:	20000820 	.word	0x20000820

00013c3c <z_time_slice>:
{
   13c3c:	4601      	mov	r1, r0
   13c3e:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   13c40:	f04f 0320 	mov.w	r3, #32
   13c44:	f3ef 8411 	mrs	r4, BASEPRI
   13c48:	f383 8811 	msr	BASEPRI, r3
   13c4c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   13c50:	4b16      	ldr	r3, [pc, #88]	; (13cac <z_time_slice+0x70>)
   13c52:	4a17      	ldr	r2, [pc, #92]	; (13cb0 <z_time_slice+0x74>)
   13c54:	6898      	ldr	r0, [r3, #8]
   13c56:	6815      	ldr	r5, [r2, #0]
   13c58:	42a8      	cmp	r0, r5
   13c5a:	461d      	mov	r5, r3
   13c5c:	d106      	bne.n	13c6c <z_time_slice+0x30>
			z_reset_time_slice();
   13c5e:	f7ff fe9b 	bl	13998 <z_reset_time_slice>
	__asm__ volatile(
   13c62:	f384 8811 	msr	BASEPRI, r4
   13c66:	f3bf 8f6f 	isb	sy
}
   13c6a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   13c6c:	2600      	movs	r6, #0
   13c6e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   13c70:	4a10      	ldr	r2, [pc, #64]	; (13cb4 <z_time_slice+0x78>)
   13c72:	6812      	ldr	r2, [r2, #0]
   13c74:	b1ba      	cbz	r2, 13ca6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   13c76:	89c2      	ldrh	r2, [r0, #14]
   13c78:	2a7f      	cmp	r2, #127	; 0x7f
   13c7a:	d814      	bhi.n	13ca6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   13c7c:	7b42      	ldrb	r2, [r0, #13]
   13c7e:	06d2      	lsls	r2, r2, #27
   13c80:	d111      	bne.n	13ca6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   13c82:	4a0d      	ldr	r2, [pc, #52]	; (13cb8 <z_time_slice+0x7c>)
   13c84:	f990 600e 	ldrsb.w	r6, [r0, #14]
   13c88:	6812      	ldr	r2, [r2, #0]
   13c8a:	4296      	cmp	r6, r2
   13c8c:	db0b      	blt.n	13ca6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   13c8e:	4a0b      	ldr	r2, [pc, #44]	; (13cbc <z_time_slice+0x80>)
   13c90:	4290      	cmp	r0, r2
   13c92:	d008      	beq.n	13ca6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   13c94:	695a      	ldr	r2, [r3, #20]
   13c96:	428a      	cmp	r2, r1
   13c98:	dc02      	bgt.n	13ca0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   13c9a:	f7ff ff95 	bl	13bc8 <move_thread_to_end_of_prio_q>
   13c9e:	e7de      	b.n	13c5e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   13ca0:	1a52      	subs	r2, r2, r1
   13ca2:	615a      	str	r2, [r3, #20]
   13ca4:	e7dd      	b.n	13c62 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   13ca6:	2300      	movs	r3, #0
   13ca8:	616b      	str	r3, [r5, #20]
   13caa:	e7da      	b.n	13c62 <z_time_slice+0x26>
   13cac:	20000820 	.word	0x20000820
   13cb0:	20000854 	.word	0x20000854
   13cb4:	2000085c 	.word	0x2000085c
   13cb8:	20000858 	.word	0x20000858
   13cbc:	20000160 	.word	0x20000160

00013cc0 <z_impl_k_thread_suspend>:
{
   13cc0:	b570      	push	{r4, r5, r6, lr}
   13cc2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   13cc4:	3018      	adds	r0, #24
   13cc6:	f002 f9c4 	bl	16052 <z_abort_timeout>
	__asm__ volatile(
   13cca:	f04f 0320 	mov.w	r3, #32
   13cce:	f3ef 8611 	mrs	r6, BASEPRI
   13cd2:	f383 8811 	msr	BASEPRI, r3
   13cd6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   13cda:	f994 300d 	ldrsb.w	r3, [r4, #13]
   13cde:	2b00      	cmp	r3, #0
   13ce0:	da07      	bge.n	13cf2 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   13ce2:	4621      	mov	r1, r4
   13ce4:	480e      	ldr	r0, [pc, #56]	; (13d20 <z_impl_k_thread_suspend+0x60>)
   13ce6:	f7ff febf 	bl	13a68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13cea:	7b63      	ldrb	r3, [r4, #13]
   13cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13cf0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   13cf2:	4d0c      	ldr	r5, [pc, #48]	; (13d24 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13cf4:	7b63      	ldrb	r3, [r4, #13]
   13cf6:	68a8      	ldr	r0, [r5, #8]
   13cf8:	f043 0310 	orr.w	r3, r3, #16
   13cfc:	7363      	strb	r3, [r4, #13]
   13cfe:	1b03      	subs	r3, r0, r4
   13d00:	4258      	negs	r0, r3
   13d02:	4158      	adcs	r0, r3
   13d04:	f7ff fec6 	bl	13a94 <update_cache>
	__asm__ volatile(
   13d08:	f386 8811 	msr	BASEPRI, r6
   13d0c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   13d10:	68ab      	ldr	r3, [r5, #8]
   13d12:	42a3      	cmp	r3, r4
   13d14:	d103      	bne.n	13d1e <z_impl_k_thread_suspend+0x5e>
}
   13d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   13d1a:	f002 b8f0 	b.w	15efe <z_reschedule_unlocked>
}
   13d1e:	bd70      	pop	{r4, r5, r6, pc}
   13d20:	2000084c 	.word	0x2000084c
   13d24:	20000820 	.word	0x20000820

00013d28 <z_thread_single_abort>:
{
   13d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d2c:	4604      	mov	r4, r0
	__asm__ volatile(
   13d2e:	f04f 0320 	mov.w	r3, #32
   13d32:	f3ef 8211 	mrs	r2, BASEPRI
   13d36:	f383 8811 	msr	BASEPRI, r3
   13d3a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   13d3e:	7b43      	ldrb	r3, [r0, #13]
   13d40:	f013 0f28 	tst.w	r3, #40	; 0x28
   13d44:	d005      	beq.n	13d52 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   13d46:	f382 8811 	msr	BASEPRI, r2
   13d4a:	f3bf 8f6f 	isb	sy
}
   13d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   13d52:	f043 0320 	orr.w	r3, r3, #32
   13d56:	7343      	strb	r3, [r0, #13]
   13d58:	f382 8811 	msr	BASEPRI, r2
   13d5c:	f3bf 8f6f 	isb	sy
   13d60:	3018      	adds	r0, #24
   13d62:	f002 f976 	bl	16052 <z_abort_timeout>
	__asm__ volatile(
   13d66:	f04f 0320 	mov.w	r3, #32
   13d6a:	f3ef 8611 	mrs	r6, BASEPRI
   13d6e:	f383 8811 	msr	BASEPRI, r3
   13d72:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13d76:	7b63      	ldrb	r3, [r4, #13]
   13d78:	06d8      	lsls	r0, r3, #27
   13d7a:	d116      	bne.n	13daa <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   13d7c:	69a2      	ldr	r2, [r4, #24]
   13d7e:	b9a2      	cbnz	r2, 13daa <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   13d80:	0619      	lsls	r1, r3, #24
   13d82:	d507      	bpl.n	13d94 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   13d84:	4621      	mov	r1, r4
   13d86:	4826      	ldr	r0, [pc, #152]	; (13e20 <z_thread_single_abort+0xf8>)
   13d88:	f7ff fe6e 	bl	13a68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13d8c:	7b63      	ldrb	r3, [r4, #13]
   13d8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13d92:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   13d94:	4b23      	ldr	r3, [pc, #140]	; (13e24 <z_thread_single_abort+0xfc>)
   13d96:	6898      	ldr	r0, [r3, #8]
   13d98:	1b02      	subs	r2, r0, r4
   13d9a:	4250      	negs	r0, r2
   13d9c:	4150      	adcs	r0, r2
   13d9e:	f7ff fe79 	bl	13a94 <update_cache>
			waiter->base.pended_on = NULL;
   13da2:	2700      	movs	r7, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   13da4:	f104 0830 	add.w	r8, r4, #48	; 0x30
   13da8:	e01d      	b.n	13de6 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
   13daa:	079b      	lsls	r3, r3, #30
   13dac:	d5f9      	bpl.n	13da2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   13dae:	4621      	mov	r1, r4
   13db0:	68a0      	ldr	r0, [r4, #8]
   13db2:	f7ff fe59 	bl	13a68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13db6:	7b63      	ldrb	r3, [r4, #13]
   13db8:	f023 0302 	bic.w	r3, r3, #2
   13dbc:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   13dbe:	2300      	movs	r3, #0
   13dc0:	60a3      	str	r3, [r4, #8]
   13dc2:	e7ee      	b.n	13da2 <z_thread_single_abort+0x7a>
   13dc4:	f105 0018 	add.w	r0, r5, #24
   13dc8:	f002 f943 	bl	16052 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   13dcc:	68a8      	ldr	r0, [r5, #8]
   13dce:	4629      	mov	r1, r5
   13dd0:	f7ff fe4a 	bl	13a68 <z_priq_dumb_remove>
   13dd4:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   13dd6:	4628      	mov	r0, r5
   13dd8:	f023 0302 	bic.w	r3, r3, #2
   13ddc:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   13dde:	60af      	str	r7, [r5, #8]
   13de0:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   13de2:	f7ff fe9b 	bl	13b1c <ready_thread>
	return list->head == list;
   13de6:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13de8:	4545      	cmp	r5, r8
   13dea:	d001      	beq.n	13df0 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   13dec:	2d00      	cmp	r5, #0
   13dee:	d1e9      	bne.n	13dc4 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   13df0:	4b0c      	ldr	r3, [pc, #48]	; (13e24 <z_thread_single_abort+0xfc>)
   13df2:	689a      	ldr	r2, [r3, #8]
   13df4:	4b0c      	ldr	r3, [pc, #48]	; (13e28 <z_thread_single_abort+0x100>)
   13df6:	429a      	cmp	r2, r3
   13df8:	d102      	bne.n	13e00 <z_thread_single_abort+0xd8>
			update_cache(1);
   13dfa:	2001      	movs	r0, #1
   13dfc:	f7ff fe4a 	bl	13a94 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   13e00:	7b63      	ldrb	r3, [r4, #13]
   13e02:	f043 0308 	orr.w	r3, r3, #8
   13e06:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   13e08:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   13e0a:	f386 8811 	msr	BASEPRI, r6
   13e0e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   13e12:	2b00      	cmp	r3, #0
   13e14:	d09b      	beq.n	13d4e <z_thread_single_abort+0x26>
		fn_abort(thread);
   13e16:	4620      	mov	r0, r4
}
   13e18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   13e1c:	4718      	bx	r3
   13e1e:	bf00      	nop
   13e20:	2000084c 	.word	0x2000084c
   13e24:	20000820 	.word	0x20000820
   13e28:	20000160 	.word	0x20000160

00013e2c <unready_thread>:
{
   13e2c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   13e2e:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   13e32:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   13e34:	2b00      	cmp	r3, #0
   13e36:	da06      	bge.n	13e46 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   13e38:	4807      	ldr	r0, [pc, #28]	; (13e58 <unready_thread+0x2c>)
   13e3a:	f7ff fe15 	bl	13a68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   13e3e:	7b4b      	ldrb	r3, [r1, #13]
   13e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   13e44:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   13e46:	4b05      	ldr	r3, [pc, #20]	; (13e5c <unready_thread+0x30>)
   13e48:	6898      	ldr	r0, [r3, #8]
   13e4a:	1a43      	subs	r3, r0, r1
   13e4c:	4258      	negs	r0, r3
   13e4e:	4158      	adcs	r0, r3
}
   13e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   13e54:	f7ff be1e 	b.w	13a94 <update_cache>
   13e58:	2000084c 	.word	0x2000084c
   13e5c:	20000820 	.word	0x20000820

00013e60 <pend>:
{
   13e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e64:	4606      	mov	r6, r0
   13e66:	4614      	mov	r4, r2
   13e68:	461d      	mov	r5, r3
	__asm__ volatile(
   13e6a:	f04f 0320 	mov.w	r3, #32
   13e6e:	f3ef 8711 	mrs	r7, BASEPRI
   13e72:	f383 8811 	msr	BASEPRI, r3
   13e76:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   13e7a:	f002 f890 	bl	15f9e <add_to_waitq_locked>
	__asm__ volatile(
   13e7e:	f387 8811 	msr	BASEPRI, r7
   13e82:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13e86:	1c6b      	adds	r3, r5, #1
   13e88:	bf08      	it	eq
   13e8a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   13e8e:	d008      	beq.n	13ea2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   13e90:	4622      	mov	r2, r4
   13e92:	462b      	mov	r3, r5
   13e94:	f106 0018 	add.w	r0, r6, #24
   13e98:	4903      	ldr	r1, [pc, #12]	; (13ea8 <pend+0x48>)
}
   13e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13e9e:	f000 ba7b 	b.w	14398 <z_add_timeout>
   13ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13ea6:	bf00      	nop
   13ea8:	00015f5f 	.word	0x00015f5f

00013eac <z_pend_curr>:
{
   13eac:	b510      	push	{r4, lr}
   13eae:	460c      	mov	r4, r1
	pending_current = _current;
   13eb0:	4b06      	ldr	r3, [pc, #24]	; (13ecc <z_pend_curr+0x20>)
{
   13eb2:	4611      	mov	r1, r2
	pending_current = _current;
   13eb4:	6898      	ldr	r0, [r3, #8]
   13eb6:	4b06      	ldr	r3, [pc, #24]	; (13ed0 <z_pend_curr+0x24>)
   13eb8:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   13eba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   13ebe:	f7ff ffcf 	bl	13e60 <pend>
   13ec2:	4620      	mov	r0, r4
}
   13ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ec8:	f7fe ba42 	b.w	12350 <arch_swap>
   13ecc:	20000820 	.word	0x20000820
   13ed0:	20000854 	.word	0x20000854

00013ed4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   13ed4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13ed6:	4605      	mov	r5, r0
   13ed8:	9101      	str	r1, [sp, #4]
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   13eda:	f002 f8fb 	bl	160d4 <z_tick_get_32>
   13ede:	4604      	mov	r4, r0
	__asm__ volatile(
   13ee0:	f04f 0220 	mov.w	r2, #32
   13ee4:	f3ef 8711 	mrs	r7, BASEPRI
   13ee8:	f382 8811 	msr	BASEPRI, r2
   13eec:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   13ef0:	4e12      	ldr	r6, [pc, #72]	; (13f3c <z_tick_sleep.part.0+0x68>)
   13ef2:	4a13      	ldr	r2, [pc, #76]	; (13f40 <z_tick_sleep.part.0+0x6c>)
   13ef4:	68b0      	ldr	r0, [r6, #8]
   13ef6:	6010      	str	r0, [r2, #0]
#endif
	unready_thread(_current);
   13ef8:	f7ff ff98 	bl	13e2c <unready_thread>
	z_add_thread_timeout(_current, timeout);
   13efc:	68b0      	ldr	r0, [r6, #8]
   13efe:	4911      	ldr	r1, [pc, #68]	; (13f44 <z_tick_sleep.part.0+0x70>)
   13f00:	462a      	mov	r2, r5
   13f02:	9b01      	ldr	r3, [sp, #4]
   13f04:	3018      	adds	r0, #24
   13f06:	f000 fa47 	bl	14398 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   13f0a:	68b2      	ldr	r2, [r6, #8]
   13f0c:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   13f0e:	7b53      	ldrb	r3, [r2, #13]
   13f10:	f043 0310 	orr.w	r3, r3, #16
   13f14:	7353      	strb	r3, [r2, #13]
   13f16:	f7fe fa1b 	bl	12350 <arch_swap>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   13f1a:	1960      	adds	r0, r4, r5

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   13f1c:	4604      	mov	r4, r0
   13f1e:	f002 f8d9 	bl	160d4 <z_tick_get_32>
   13f22:	2500      	movs	r5, #0
   13f24:	1a24      	subs	r4, r4, r0
   13f26:	f165 0500 	sbc.w	r5, r5, #0
   13f2a:	2c00      	cmp	r4, #0
   13f2c:	f175 0300 	sbcs.w	r3, r5, #0
   13f30:	bfb8      	it	lt
   13f32:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   13f34:	4620      	mov	r0, r4
   13f36:	b003      	add	sp, #12
   13f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13f3a:	bf00      	nop
   13f3c:	20000820 	.word	0x20000820
   13f40:	20000854 	.word	0x20000854
   13f44:	00015f5f 	.word	0x00015f5f

00013f48 <z_set_prio>:
{
   13f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f4c:	4604      	mov	r4, r0
   13f4e:	f04f 0320 	mov.w	r3, #32
   13f52:	f3ef 8811 	mrs	r8, BASEPRI
   13f56:	f383 8811 	msr	BASEPRI, r3
   13f5a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   13f5e:	7b43      	ldrb	r3, [r0, #13]
   13f60:	b24e      	sxtb	r6, r1
   13f62:	06db      	lsls	r3, r3, #27
   13f64:	d12e      	bne.n	13fc4 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   13f66:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   13f68:	bb65      	cbnz	r5, 13fc4 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   13f6a:	4f18      	ldr	r7, [pc, #96]	; (13fcc <z_set_prio+0x84>)
   13f6c:	4621      	mov	r1, r4
   13f6e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   13f72:	f7ff fd79 	bl	13a68 <z_priq_dumb_remove>
	return list->head == list;
   13f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13f7a:	4283      	cmp	r3, r0
   13f7c:	bf18      	it	ne
   13f7e:	461d      	movne	r5, r3
   13f80:	2d00      	cmp	r5, #0
   13f82:	bf38      	it	cc
   13f84:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   13f86:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13f88:	b1b5      	cbz	r5, 13fb8 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   13f8a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   13f8e:	42b1      	cmp	r1, r6
   13f90:	dc03      	bgt.n	13f9a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   13f92:	42aa      	cmp	r2, r5
   13f94:	d010      	beq.n	13fb8 <z_set_prio+0x70>
   13f96:	682d      	ldr	r5, [r5, #0]
   13f98:	e7f6      	b.n	13f88 <z_set_prio+0x40>
	node->prev = successor->prev;
   13f9a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   13f9c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   13fa0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   13fa2:	606c      	str	r4, [r5, #4]
			update_cache(1);
   13fa4:	2001      	movs	r0, #1
   13fa6:	f7ff fd75 	bl	13a94 <update_cache>
   13faa:	2001      	movs	r0, #1
	__asm__ volatile(
   13fac:	f388 8811 	msr	BASEPRI, r8
   13fb0:	f3bf 8f6f 	isb	sy
}
   13fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   13fb8:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   13fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13fbe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   13fc0:	633c      	str	r4, [r7, #48]	; 0x30
}
   13fc2:	e7ef      	b.n	13fa4 <z_set_prio+0x5c>
			thread->base.prio = prio;
   13fc4:	2000      	movs	r0, #0
   13fc6:	73a6      	strb	r6, [r4, #14]
   13fc8:	e7f0      	b.n	13fac <z_set_prio+0x64>
   13fca:	bf00      	nop
   13fcc:	20000820 	.word	0x20000820

00013fd0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   13fd0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   13fd2:	4b04      	ldr	r3, [pc, #16]	; (13fe4 <z_sched_init+0x14>)
   13fd4:	4608      	mov	r0, r1
   13fd6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   13fda:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   13fde:	f7ff bcf1 	b.w	139c4 <k_sched_time_slice_set>
   13fe2:	bf00      	nop
   13fe4:	20000820 	.word	0x20000820

00013fe8 <z_impl_k_yield>:
{
   13fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   13fea:	4c24      	ldr	r4, [pc, #144]	; (1407c <z_impl_k_yield+0x94>)
   13fec:	4b24      	ldr	r3, [pc, #144]	; (14080 <z_impl_k_yield+0x98>)
   13fee:	68a2      	ldr	r2, [r4, #8]
   13ff0:	429a      	cmp	r2, r3
   13ff2:	d030      	beq.n	14056 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   13ff4:	f04f 0320 	mov.w	r3, #32
   13ff8:	f3ef 8511 	mrs	r5, BASEPRI
   13ffc:	f383 8811 	msr	BASEPRI, r3
   14000:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   14004:	68a1      	ldr	r1, [r4, #8]
   14006:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1400a:	f7ff fd2d 	bl	13a68 <z_priq_dumb_remove>
	return list->head == list;
   1400e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   14010:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14012:	4283      	cmp	r3, r0
   14014:	bf08      	it	eq
   14016:	2300      	moveq	r3, #0
   14018:	2b00      	cmp	r3, #0
   1401a:	bf38      	it	cc
   1401c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1401e:	6b21      	ldr	r1, [r4, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   14020:	b32b      	cbz	r3, 1406e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   14022:	f992 700e 	ldrsb.w	r7, [r2, #14]
   14026:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1402a:	42b7      	cmp	r7, r6
   1402c:	db03      	blt.n	14036 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1402e:	428b      	cmp	r3, r1
   14030:	d01d      	beq.n	1406e <z_impl_k_yield+0x86>
   14032:	681b      	ldr	r3, [r3, #0]
   14034:	e7f4      	b.n	14020 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   14036:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   14038:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1403c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1403e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   14040:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   14042:	2001      	movs	r0, #1
   14044:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14048:	7353      	strb	r3, [r2, #13]
   1404a:	f7ff fd23 	bl	13a94 <update_cache>
	__asm__ volatile(
   1404e:	f385 8811 	msr	BASEPRI, r5
   14052:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   14056:	f04f 0320 	mov.w	r3, #32
   1405a:	f3ef 8011 	mrs	r0, BASEPRI
   1405e:	f383 8811 	msr	BASEPRI, r3
   14062:	f3bf 8f6f 	isb	sy
}
   14066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1406a:	f7fe b971 	b.w	12350 <arch_swap>
	node->prev = list->tail;
   1406e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   14072:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14074:	601a      	str	r2, [r3, #0]
	list->tail = node;
   14076:	6322      	str	r2, [r4, #48]	; 0x30
}
   14078:	e7e2      	b.n	14040 <z_impl_k_yield+0x58>
   1407a:	bf00      	nop
   1407c:	20000820 	.word	0x20000820
   14080:	20000160 	.word	0x20000160

00014084 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14084:	f1b1 3fff 	cmp.w	r1, #4294967295
   14088:	bf08      	it	eq
   1408a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1408e:	b508      	push	{r3, lr}
   14090:	4602      	mov	r2, r0
   14092:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   14094:	d106      	bne.n	140a4 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   14096:	4b0b      	ldr	r3, [pc, #44]	; (140c4 <z_impl_k_sleep+0x40>)
   14098:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1409a:	f7ff fe11 	bl	13cc0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1409e:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   140a2:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   140a4:	4313      	orrs	r3, r2
   140a6:	d10a      	bne.n	140be <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   140a8:	f7ff ff9e 	bl	13fe8 <z_impl_k_yield>
		return 0;
   140ac:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
   140ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   140b2:	fb80 2303 	smull	r2, r3, r0, r3
   140b6:	0bd0      	lsrs	r0, r2, #15
   140b8:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   140bc:	e7f1      	b.n	140a2 <z_impl_k_sleep+0x1e>
   140be:	f7ff ff09 	bl	13ed4 <z_tick_sleep.part.0>
   140c2:	e7f4      	b.n	140ae <z_impl_k_sleep+0x2a>
   140c4:	20000820 	.word	0x20000820

000140c8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   140c8:	4b01      	ldr	r3, [pc, #4]	; (140d0 <z_impl_k_current_get+0x8>)
   140ca:	6898      	ldr	r0, [r3, #8]
   140cc:	4770      	bx	lr
   140ce:	bf00      	nop
   140d0:	20000820 	.word	0x20000820

000140d4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   140d4:	b538      	push	{r3, r4, r5, lr}
   140d6:	4604      	mov	r4, r0
   140d8:	f04f 0320 	mov.w	r3, #32
   140dc:	f3ef 8511 	mrs	r5, BASEPRI
   140e0:	f383 8811 	msr	BASEPRI, r3
   140e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   140e8:	f001 ff84 	bl	15ff4 <z_unpend_first_thread>

	if (thread != NULL) {
   140ec:	b148      	cbz	r0, 14102 <z_impl_k_sem_give+0x2e>
   140ee:	2200      	movs	r2, #0
   140f0:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   140f2:	f001 ff24 	bl	15f3e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   140f6:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   140f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   140fc:	4804      	ldr	r0, [pc, #16]	; (14110 <z_impl_k_sem_give+0x3c>)
   140fe:	f7ff bc8d 	b.w	13a1c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   14102:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   14106:	429a      	cmp	r2, r3
   14108:	bf18      	it	ne
   1410a:	3301      	addne	r3, #1
   1410c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   1410e:	e7f2      	b.n	140f6 <z_impl_k_sem_give+0x22>
   14110:	20000882 	.word	0x20000882

00014114 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   14114:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14116:	4614      	mov	r4, r2
   14118:	461d      	mov	r5, r3
   1411a:	f04f 0320 	mov.w	r3, #32
   1411e:	f3ef 8111 	mrs	r1, BASEPRI
   14122:	f383 8811 	msr	BASEPRI, r3
   14126:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   1412a:	6883      	ldr	r3, [r0, #8]
   1412c:	b143      	cbz	r3, 14140 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1412e:	3b01      	subs	r3, #1
   14130:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   14132:	f381 8811 	msr	BASEPRI, r1
   14136:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1413a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1413c:	b003      	add	sp, #12
   1413e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   14140:	ea54 0305 	orrs.w	r3, r4, r5
   14144:	d106      	bne.n	14154 <z_impl_k_sem_take+0x40>
   14146:	f381 8811 	msr	BASEPRI, r1
   1414a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1414e:	f06f 000f 	mvn.w	r0, #15
   14152:	e7f3      	b.n	1413c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   14154:	4602      	mov	r2, r0
   14156:	e9cd 4500 	strd	r4, r5, [sp]
   1415a:	4802      	ldr	r0, [pc, #8]	; (14164 <z_impl_k_sem_take+0x50>)
   1415c:	f7ff fea6 	bl	13eac <z_pend_curr>
	return ret;
   14160:	e7ec      	b.n	1413c <z_impl_k_sem_take+0x28>
   14162:	bf00      	nop
   14164:	20000882 	.word	0x20000882

00014168 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   14168:	e92d 41b0 	stmdb	sp!, {r4, r5, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1416c:	f100 0530 	add.w	r5, r0, #48	; 0x30
   14170:	b085      	sub	sp, #20
	list->tail = (sys_dnode_t *)list;
   14172:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   14176:	9d0e      	ldr	r5, [sp, #56]	; 0x38
{
   14178:	4604      	mov	r4, r0
	thread_base->user_options = (uint8_t)options;
   1417a:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1417c:	2504      	movs	r5, #4
   1417e:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;
   14180:	9d0d      	ldr	r5, [sp, #52]	; 0x34
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14182:	3207      	adds	r2, #7
	thread_base->prio = priority;
   14184:	7385      	strb	r5, [r0, #14]

	thread_base->sched_locked = 0U;
   14186:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   14188:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.size = stack_buf_size;
   1418c:	e9c0 121a 	strd	r1, r2, [r0, #104]	; 0x68
	stack_ptr = (char *)stack + stack_obj_size;
   14190:	eb01 0802 	add.w	r8, r1, r2
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   14194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	node->prev = NULL;
   14196:	e9c0 5506 	strd	r5, r5, [r0, #24]
	thread_base->sched_locked = 0U;
   1419a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1419c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1419e:	9202      	str	r2, [sp, #8]
   141a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   141a2:	9201      	str	r2, [sp, #4]
   141a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   141a6:	9200      	str	r2, [sp, #0]
   141a8:	4642      	mov	r2, r8
   141aa:	f7fe f95b 	bl	12464 <arch_new_thread>
	if (!_current) {
   141ae:	4b05      	ldr	r3, [pc, #20]	; (141c4 <z_setup_new_thread+0x5c>)
	new_thread->fn_abort = NULL;
   141b0:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   141b4:	689b      	ldr	r3, [r3, #8]
   141b6:	b103      	cbz	r3, 141ba <z_setup_new_thread+0x52>
	new_thread->resource_pool = _current->resource_pool;
   141b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
}
   141ba:	4640      	mov	r0, r8
   141bc:	6763      	str	r3, [r4, #116]	; 0x74
   141be:	b005      	add	sp, #20
   141c0:	e8bd 81b0 	ldmia.w	sp!, {r4, r5, r7, r8, pc}
   141c4:	20000820 	.word	0x20000820

000141c8 <z_init_static_threads>:
{
   141c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   141cc:	4e2a      	ldr	r6, [pc, #168]	; (14278 <z_init_static_threads+0xb0>)
   141ce:	4d2b      	ldr	r5, [pc, #172]	; (1427c <z_init_static_threads+0xb4>)
   141d0:	46b0      	mov	r8, r6
{
   141d2:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   141d4:	42b5      	cmp	r5, r6
   141d6:	f105 0430 	add.w	r4, r5, #48	; 0x30
   141da:	d310      	bcc.n	141fe <z_init_static_threads+0x36>
	k_sched_lock();
   141dc:	f7ff fc30 	bl	13a40 <k_sched_lock>
   141e0:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   141e4:	f240 36e7 	movw	r6, #999	; 0x3e7
   141e8:	2700      	movs	r7, #0
	_FOREACH_STATIC_THREAD(thread_data) {
   141ea:	4c24      	ldr	r4, [pc, #144]	; (1427c <z_init_static_threads+0xb4>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   141ec:	f8df a090 	ldr.w	sl, [pc, #144]	; 14280 <z_init_static_threads+0xb8>
   141f0:	4544      	cmp	r4, r8
   141f2:	d321      	bcc.n	14238 <z_init_static_threads+0x70>
}
   141f4:	b006      	add	sp, #24
   141f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   141fa:	f7ff bc73 	b.w	13ae4 <k_sched_unlock>
		z_setup_new_thread(
   141fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   14202:	9305      	str	r3, [sp, #20]
   14204:	f854 3c10 	ldr.w	r3, [r4, #-16]
   14208:	9304      	str	r3, [sp, #16]
   1420a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1420e:	9303      	str	r3, [sp, #12]
   14210:	f854 3c18 	ldr.w	r3, [r4, #-24]
   14214:	9302      	str	r3, [sp, #8]
   14216:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1421a:	9301      	str	r3, [sp, #4]
   1421c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   14220:	9300      	str	r3, [sp, #0]
   14222:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   14226:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1422a:	f7ff ff9d 	bl	14168 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1422e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   14232:	65dd      	str	r5, [r3, #92]	; 0x5c
   14234:	4625      	mov	r5, r4
   14236:	e7cd      	b.n	141d4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   14238:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1423a:	1c5a      	adds	r2, r3, #1
   1423c:	d00d      	beq.n	1425a <z_init_static_threads+0x92>
   1423e:	4630      	mov	r0, r6
   14240:	4639      	mov	r1, r7
					    K_MSEC(thread_data->init_delay));
   14242:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   14246:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1424a:	42b9      	cmp	r1, r7
   1424c:	bf08      	it	eq
   1424e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   14250:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   14252:	d104      	bne.n	1425e <z_init_static_threads+0x96>
	z_sched_start(thread);
   14254:	4628      	mov	r0, r5
   14256:	f7ff fc99 	bl	13b8c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1425a:	3430      	adds	r4, #48	; 0x30
   1425c:	e7c8      	b.n	141f0 <z_init_static_threads+0x28>
   1425e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14262:	2300      	movs	r3, #0
   14264:	f7fc f8ea 	bl	1043c <__aeabi_uldivmod>
   14268:	4602      	mov	r2, r0
   1426a:	460b      	mov	r3, r1
   1426c:	f105 0018 	add.w	r0, r5, #24
   14270:	4651      	mov	r1, sl
   14272:	f000 f891 	bl	14398 <z_add_timeout>
   14276:	e7f0      	b.n	1425a <z_init_static_threads+0x92>
   14278:	20000110 	.word	0x20000110
   1427c:	20000110 	.word	0x20000110
   14280:	00015f5f 	.word	0x00015f5f

00014284 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   14284:	b508      	push	{r3, lr}
	__asm__ volatile(
   14286:	f04f 0320 	mov.w	r3, #32
   1428a:	f3ef 8411 	mrs	r4, BASEPRI
   1428e:	f383 8811 	msr	BASEPRI, r3
   14292:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   14296:	4b04      	ldr	r3, [pc, #16]	; (142a8 <z_self_abort+0x24>)
   14298:	6898      	ldr	r0, [r3, #8]
   1429a:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   1429c:	f7ff fd10 	bl	13cc0 <z_impl_k_thread_suspend>
   142a0:	4620      	mov	r0, r4
   142a2:	f7fe f855 	bl	12350 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   142a6:	bf00      	nop
   142a8:	20000820 	.word	0x20000820

000142ac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   142ac:	4a02      	ldr	r2, [pc, #8]	; (142b8 <boot_banner+0xc>)
   142ae:	4903      	ldr	r1, [pc, #12]	; (142bc <boot_banner+0x10>)
   142b0:	4803      	ldr	r0, [pc, #12]	; (142c0 <boot_banner+0x14>)
   142b2:	f001 b8e9 	b.w	15488 <printk>
   142b6:	bf00      	nop
   142b8:	000166a5 	.word	0x000166a5
   142bc:	00016a19 	.word	0x00016a19
   142c0:	00016a26 	.word	0x00016a26

000142c4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   142c4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   142c6:	4806      	ldr	r0, [pc, #24]	; (142e0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   142c8:	4a06      	ldr	r2, [pc, #24]	; (142e4 <z_data_copy+0x20>)
   142ca:	4907      	ldr	r1, [pc, #28]	; (142e8 <z_data_copy+0x24>)
   142cc:	1a12      	subs	r2, r2, r0
   142ce:	f001 fd0d 	bl	15cec <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   142d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   142d6:	4a05      	ldr	r2, [pc, #20]	; (142ec <z_data_copy+0x28>)
   142d8:	4905      	ldr	r1, [pc, #20]	; (142f0 <z_data_copy+0x2c>)
   142da:	4806      	ldr	r0, [pc, #24]	; (142f4 <z_data_copy+0x30>)
   142dc:	f001 bd06 	b.w	15cec <memcpy>
   142e0:	20000000 	.word	0x20000000
   142e4:	20000160 	.word	0x20000160
   142e8:	00016a54 	.word	0x00016a54
   142ec:	00000000 	.word	0x00000000
   142f0:	00016a54 	.word	0x00016a54
   142f4:	20000000 	.word	0x20000000

000142f8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   142f8:	4b03      	ldr	r3, [pc, #12]	; (14308 <elapsed+0x10>)
   142fa:	681b      	ldr	r3, [r3, #0]
   142fc:	b90b      	cbnz	r3, 14302 <elapsed+0xa>
   142fe:	f7fd bcc9 	b.w	11c94 <z_clock_elapsed>
}
   14302:	2000      	movs	r0, #0
   14304:	4770      	bx	lr
   14306:	bf00      	nop
   14308:	20000860 	.word	0x20000860

0001430c <remove_timeout>:
{
   1430c:	b530      	push	{r4, r5, lr}
   1430e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14310:	b168      	cbz	r0, 1432e <remove_timeout+0x22>
   14312:	4a0a      	ldr	r2, [pc, #40]	; (1433c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   14314:	6852      	ldr	r2, [r2, #4]
   14316:	4290      	cmp	r0, r2
   14318:	d009      	beq.n	1432e <remove_timeout+0x22>
	if (next(t) != NULL) {
   1431a:	b143      	cbz	r3, 1432e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1431c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   14320:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   14324:	1912      	adds	r2, r2, r4
   14326:	eb45 0101 	adc.w	r1, r5, r1
   1432a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1432e:	6842      	ldr	r2, [r0, #4]
   14330:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   14332:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   14334:	2300      	movs	r3, #0
	node->prev = NULL;
   14336:	e9c0 3300 	strd	r3, r3, [r0]
}
   1433a:	bd30      	pop	{r4, r5, pc}
   1433c:	20000054 	.word	0x20000054

00014340 <next_timeout>:
	return list->head == list;
   14340:	4b13      	ldr	r3, [pc, #76]	; (14390 <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   14342:	b510      	push	{r4, lr}
   14344:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   14346:	429c      	cmp	r4, r3
   14348:	bf08      	it	eq
   1434a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1434c:	f7ff ffd4 	bl	142f8 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   14350:	b1cc      	cbz	r4, 14386 <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   14352:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   14356:	1a12      	subs	r2, r2, r0
   14358:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1435c:	2a01      	cmp	r2, #1
   1435e:	f173 0100 	sbcs.w	r1, r3, #0
   14362:	db13      	blt.n	1438c <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   14364:	4610      	mov	r0, r2
   14366:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1436a:	4619      	mov	r1, r3
   1436c:	2300      	movs	r3, #0
   1436e:	4282      	cmp	r2, r0
   14370:	eb73 0401 	sbcs.w	r4, r3, r1
   14374:	da00      	bge.n	14378 <next_timeout+0x38>
   14376:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   14378:	4b06      	ldr	r3, [pc, #24]	; (14394 <next_timeout+0x54>)
   1437a:	695b      	ldr	r3, [r3, #20]
   1437c:	b113      	cbz	r3, 14384 <next_timeout+0x44>
   1437e:	4298      	cmp	r0, r3
   14380:	bfa8      	it	ge
   14382:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   14384:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   14386:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1438a:	e7f5      	b.n	14378 <next_timeout+0x38>
   1438c:	2000      	movs	r0, #0
   1438e:	e7f3      	b.n	14378 <next_timeout+0x38>
   14390:	20000054 	.word	0x20000054
   14394:	20000820 	.word	0x20000820

00014398 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   14398:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1439c:	9101      	str	r1, [sp, #4]
   1439e:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   143a0:	1c4b      	adds	r3, r1, #1
   143a2:	bf08      	it	eq
   143a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   143a8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   143aa:	d070      	beq.n	1448e <z_add_timeout+0xf6>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   143ac:	f06f 0301 	mvn.w	r3, #1
   143b0:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   143b4:	1c54      	adds	r4, r2, #1
   143b6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   143ba:	ebb3 0804 	subs.w	r8, r3, r4
   143be:	eb6b 0905 	sbc.w	r9, fp, r5
   143c2:	f1b8 0f00 	cmp.w	r8, #0
   143c6:	f179 0300 	sbcs.w	r3, r9, #0
   143ca:	db0f      	blt.n	143ec <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   143cc:	f7ff ff94 	bl	142f8 <elapsed>
   143d0:	f06f 0301 	mvn.w	r3, #1
   143d4:	4a34      	ldr	r2, [pc, #208]	; (144a8 <z_add_timeout+0x110>)
   143d6:	e9d2 1c00 	ldrd	r1, ip, [r2]
   143da:	1a5b      	subs	r3, r3, r1
   143dc:	eb6b 020c 	sbc.w	r2, fp, ip
   143e0:	1b1e      	subs	r6, r3, r4
   143e2:	eb62 0705 	sbc.w	r7, r2, r5
   143e6:	1a34      	subs	r4, r6, r0
   143e8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   143ec:	9b01      	ldr	r3, [sp, #4]
   143ee:	f8ca 3008 	str.w	r3, [sl, #8]
   143f2:	f04f 0320 	mov.w	r3, #32
   143f6:	f3ef 8611 	mrs	r6, BASEPRI
   143fa:	f383 8811 	msr	BASEPRI, r3
   143fe:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   14402:	f7ff ff79 	bl	142f8 <elapsed>
	ticks = MAX(1, ticks);
   14406:	2c01      	cmp	r4, #1
   14408:	f175 0300 	sbcs.w	r3, r5, #0
   1440c:	bfbc      	itt	lt
   1440e:	2401      	movlt	r4, #1
   14410:	2500      	movlt	r5, #0
	return list->head == list;
   14412:	4b26      	ldr	r3, [pc, #152]	; (144ac <z_add_timeout+0x114>)
		to->dticks = ticks + elapsed();
   14414:	1824      	adds	r4, r4, r0
   14416:	681a      	ldr	r2, [r3, #0]
   14418:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1441c:	429a      	cmp	r2, r3
   1441e:	e9ca 4504 	strd	r4, r5, [sl, #16]
   14422:	d001      	beq.n	14428 <z_add_timeout+0x90>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   14424:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   14426:	b952      	cbnz	r2, 1443e <z_add_timeout+0xa6>
	node->prev = list->tail;
   14428:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1442a:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1442e:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   14432:	685a      	ldr	r2, [r3, #4]
   14434:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   14438:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1443c:	e014      	b.n	14468 <z_add_timeout+0xd0>
			if (t->dticks > to->dticks) {
   1443e:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   14442:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   14446:	4544      	cmp	r4, r8
   14448:	eb75 0109 	sbcs.w	r1, r5, r9
   1444c:	da22      	bge.n	14494 <z_add_timeout+0xfc>
				t->dticks -= to->dticks;
   1444e:	ebb8 0004 	subs.w	r0, r8, r4
   14452:	eb69 0105 	sbc.w	r1, r9, r5
   14456:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1445a:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1445c:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   14460:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   14464:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   14468:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1446a:	429a      	cmp	r2, r3
   1446c:	d00b      	beq.n	14486 <z_add_timeout+0xee>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1446e:	4592      	cmp	sl, r2
   14470:	d109      	bne.n	14486 <z_add_timeout+0xee>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   14472:	f7ff ff65 	bl	14340 <next_timeout>

			if (next_time == 0 ||
   14476:	b118      	cbz	r0, 14480 <z_add_timeout+0xe8>
			    _current_cpu->slice_ticks != next_time) {
   14478:	4b0d      	ldr	r3, [pc, #52]	; (144b0 <z_add_timeout+0x118>)
			if (next_time == 0 ||
   1447a:	695b      	ldr	r3, [r3, #20]
   1447c:	4283      	cmp	r3, r0
   1447e:	d002      	beq.n	14486 <z_add_timeout+0xee>
				z_clock_set_timeout(next_time, false);
   14480:	2100      	movs	r1, #0
   14482:	f7fd fbd5 	bl	11c30 <z_clock_set_timeout>
	__asm__ volatile(
   14486:	f386 8811 	msr	BASEPRI, r6
   1448a:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1448e:	b003      	add	sp, #12
   14490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   14494:	ebb4 0008 	subs.w	r0, r4, r8
   14498:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1449c:	42ba      	cmp	r2, r7
   1449e:	e9ca 0104 	strd	r0, r1, [sl, #16]
   144a2:	d0c1      	beq.n	14428 <z_add_timeout+0x90>
   144a4:	6812      	ldr	r2, [r2, #0]
   144a6:	e7be      	b.n	14426 <z_add_timeout+0x8e>
   144a8:	20000260 	.word	0x20000260
   144ac:	20000054 	.word	0x20000054
   144b0:	20000820 	.word	0x20000820

000144b4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   144b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144b8:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   144ba:	f7ff fbbf 	bl	13c3c <z_time_slice>
	__asm__ volatile(
   144be:	f04f 0320 	mov.w	r3, #32
   144c2:	f3ef 8411 	mrs	r4, BASEPRI
   144c6:	f383 8811 	msr	BASEPRI, r3
   144ca:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   144ce:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 14580 <z_clock_announce+0xcc>
   144d2:	4d2a      	ldr	r5, [pc, #168]	; (1457c <z_clock_announce+0xc8>)
   144d4:	4651      	mov	r1, sl
	return list->head == list;
   144d6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 14584 <z_clock_announce+0xd0>
   144da:	602e      	str	r6, [r5, #0]
   144dc:	f8d5 c000 	ldr.w	ip, [r5]
   144e0:	f8db 0000 	ldr.w	r0, [fp]
   144e4:	4662      	mov	r2, ip
   144e6:	e9da 8900 	ldrd	r8, r9, [sl]
   144ea:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   144ec:	4558      	cmp	r0, fp
   144ee:	e9cd 2300 	strd	r2, r3, [sp]
   144f2:	d00d      	beq.n	14510 <z_clock_announce+0x5c>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   144f4:	b160      	cbz	r0, 14510 <z_clock_announce+0x5c>
   144f6:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   144fa:	45b4      	cmp	ip, r6
   144fc:	41bb      	sbcs	r3, r7
   144fe:	da1d      	bge.n	1453c <z_clock_announce+0x88>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   14500:	9b00      	ldr	r3, [sp, #0]
   14502:	ebb6 0c03 	subs.w	ip, r6, r3
   14506:	9b01      	ldr	r3, [sp, #4]
   14508:	eb67 0603 	sbc.w	r6, r7, r3
   1450c:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
	announce_remaining = 0;
   14510:	2600      	movs	r6, #0
	curr_tick += announce_remaining;
   14512:	9b00      	ldr	r3, [sp, #0]
	announce_remaining = 0;
   14514:	602e      	str	r6, [r5, #0]
	curr_tick += announce_remaining;
   14516:	eb13 0208 	adds.w	r2, r3, r8
   1451a:	9b01      	ldr	r3, [sp, #4]
   1451c:	eb43 0309 	adc.w	r3, r3, r9
   14520:	e9c1 2300 	strd	r2, r3, [r1]

	z_clock_set_timeout(next_timeout(), false);
   14524:	f7ff ff0c 	bl	14340 <next_timeout>
   14528:	4631      	mov	r1, r6
   1452a:	f7fd fb81 	bl	11c30 <z_clock_set_timeout>
	__asm__ volatile(
   1452e:	f384 8811 	msr	BASEPRI, r4
   14532:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   14536:	b003      	add	sp, #12
   14538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   1453c:	2200      	movs	r2, #0
   1453e:	2300      	movs	r3, #0
		curr_tick += dt;
   14540:	eb18 0806 	adds.w	r8, r8, r6
   14544:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   14548:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1454c:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   14550:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   14554:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   14556:	f7ff fed9 	bl	1430c <remove_timeout>
   1455a:	f384 8811 	msr	BASEPRI, r4
   1455e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   14562:	6883      	ldr	r3, [r0, #8]
   14564:	4798      	blx	r3
	__asm__ volatile(
   14566:	f04f 0320 	mov.w	r3, #32
   1456a:	f3ef 8411 	mrs	r4, BASEPRI
   1456e:	f383 8811 	msr	BASEPRI, r3
   14572:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   14576:	4902      	ldr	r1, [pc, #8]	; (14580 <z_clock_announce+0xcc>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   14578:	e7b0      	b.n	144dc <z_clock_announce+0x28>
   1457a:	bf00      	nop
   1457c:	20000860 	.word	0x20000860
   14580:	20000260 	.word	0x20000260
   14584:	20000054 	.word	0x20000054

00014588 <z_tick_get>:

int64_t z_tick_get(void)
{
   14588:	b510      	push	{r4, lr}
   1458a:	f04f 0320 	mov.w	r3, #32
   1458e:	f3ef 8411 	mrs	r4, BASEPRI
   14592:	f383 8811 	msr	BASEPRI, r3
   14596:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1459a:	f7fd fb7b 	bl	11c94 <z_clock_elapsed>
   1459e:	4b06      	ldr	r3, [pc, #24]	; (145b8 <z_tick_get+0x30>)
   145a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   145a4:	1812      	adds	r2, r2, r0
   145a6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   145aa:	f384 8811 	msr	BASEPRI, r4
   145ae:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   145b2:	4610      	mov	r0, r2
   145b4:	4619      	mov	r1, r3
   145b6:	bd10      	pop	{r4, pc}
   145b8:	20000260 	.word	0x20000260

000145bc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   145bc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   145be:	4c06      	ldr	r4, [pc, #24]	; (145d8 <statics_init+0x1c>)
   145c0:	4d06      	ldr	r5, [pc, #24]	; (145dc <statics_init+0x20>)
   145c2:	42ac      	cmp	r4, r5
   145c4:	d301      	bcc.n	145ca <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   145c6:	2000      	movs	r0, #0
   145c8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   145ca:	4620      	mov	r0, r4
   145cc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   145d0:	f001 fd84 	bl	160dc <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   145d4:	3414      	adds	r4, #20
   145d6:	e7f4      	b.n	145c2 <statics_init+0x6>
   145d8:	20000110 	.word	0x20000110
   145dc:	20000110 	.word	0x20000110

000145e0 <CC_PalMemCopyPlat>:
   145e0:	f001 bb6d 	b.w	15cbe <memmove>

000145e4 <CC_PalMemSetZeroPlat>:
   145e4:	460a      	mov	r2, r1
   145e6:	2100      	movs	r1, #0
   145e8:	f001 bbab 	b.w	15d42 <memset>

000145ec <CC_PalInit>:
   145ec:	b510      	push	{r4, lr}
   145ee:	4811      	ldr	r0, [pc, #68]	; (14634 <CC_PalInit+0x48>)
   145f0:	f000 f848 	bl	14684 <CC_PalMutexCreate>
   145f4:	b100      	cbz	r0, 145f8 <CC_PalInit+0xc>
   145f6:	bd10      	pop	{r4, pc}
   145f8:	480f      	ldr	r0, [pc, #60]	; (14638 <CC_PalInit+0x4c>)
   145fa:	f000 f843 	bl	14684 <CC_PalMutexCreate>
   145fe:	2800      	cmp	r0, #0
   14600:	d1f9      	bne.n	145f6 <CC_PalInit+0xa>
   14602:	4c0e      	ldr	r4, [pc, #56]	; (1463c <CC_PalInit+0x50>)
   14604:	4620      	mov	r0, r4
   14606:	f000 f83d 	bl	14684 <CC_PalMutexCreate>
   1460a:	2800      	cmp	r0, #0
   1460c:	d1f3      	bne.n	145f6 <CC_PalInit+0xa>
   1460e:	4b0c      	ldr	r3, [pc, #48]	; (14640 <CC_PalInit+0x54>)
   14610:	480c      	ldr	r0, [pc, #48]	; (14644 <CC_PalInit+0x58>)
   14612:	601c      	str	r4, [r3, #0]
   14614:	f000 f836 	bl	14684 <CC_PalMutexCreate>
   14618:	4601      	mov	r1, r0
   1461a:	2800      	cmp	r0, #0
   1461c:	d1eb      	bne.n	145f6 <CC_PalInit+0xa>
   1461e:	f000 f82d 	bl	1467c <CC_PalDmaInit>
   14622:	4604      	mov	r4, r0
   14624:	b108      	cbz	r0, 1462a <CC_PalInit+0x3e>
   14626:	4620      	mov	r0, r4
   14628:	bd10      	pop	{r4, pc}
   1462a:	f000 f851 	bl	146d0 <CC_PalPowerSaveModeInit>
   1462e:	4620      	mov	r0, r4
   14630:	e7fa      	b.n	14628 <CC_PalInit+0x3c>
   14632:	bf00      	nop
   14634:	20000068 	.word	0x20000068
   14638:	2000005c 	.word	0x2000005c
   1463c:	20000064 	.word	0x20000064
   14640:	2000006c 	.word	0x2000006c
   14644:	20000060 	.word	0x20000060

00014648 <CC_PalTerminate>:
   14648:	b508      	push	{r3, lr}
   1464a:	4808      	ldr	r0, [pc, #32]	; (1466c <CC_PalTerminate+0x24>)
   1464c:	f000 f824 	bl	14698 <CC_PalMutexDestroy>
   14650:	4807      	ldr	r0, [pc, #28]	; (14670 <CC_PalTerminate+0x28>)
   14652:	f000 f821 	bl	14698 <CC_PalMutexDestroy>
   14656:	4807      	ldr	r0, [pc, #28]	; (14674 <CC_PalTerminate+0x2c>)
   14658:	f000 f81e 	bl	14698 <CC_PalMutexDestroy>
   1465c:	4806      	ldr	r0, [pc, #24]	; (14678 <CC_PalTerminate+0x30>)
   1465e:	f000 f81b 	bl	14698 <CC_PalMutexDestroy>
   14662:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14666:	f000 b80b 	b.w	14680 <CC_PalDmaTerminate>
   1466a:	bf00      	nop
   1466c:	20000068 	.word	0x20000068
   14670:	2000005c 	.word	0x2000005c
   14674:	20000064 	.word	0x20000064
   14678:	20000060 	.word	0x20000060

0001467c <CC_PalDmaInit>:
   1467c:	2000      	movs	r0, #0
   1467e:	4770      	bx	lr

00014680 <CC_PalDmaTerminate>:
   14680:	4770      	bx	lr
   14682:	bf00      	nop

00014684 <CC_PalMutexCreate>:
   14684:	b508      	push	{r3, lr}
   14686:	4b03      	ldr	r3, [pc, #12]	; (14694 <CC_PalMutexCreate+0x10>)
   14688:	6802      	ldr	r2, [r0, #0]
   1468a:	681b      	ldr	r3, [r3, #0]
   1468c:	6810      	ldr	r0, [r2, #0]
   1468e:	4798      	blx	r3
   14690:	2000      	movs	r0, #0
   14692:	bd08      	pop	{r3, pc}
   14694:	20000080 	.word	0x20000080

00014698 <CC_PalMutexDestroy>:
   14698:	b508      	push	{r3, lr}
   1469a:	4b03      	ldr	r3, [pc, #12]	; (146a8 <CC_PalMutexDestroy+0x10>)
   1469c:	6802      	ldr	r2, [r0, #0]
   1469e:	685b      	ldr	r3, [r3, #4]
   146a0:	6810      	ldr	r0, [r2, #0]
   146a2:	4798      	blx	r3
   146a4:	2000      	movs	r0, #0
   146a6:	bd08      	pop	{r3, pc}
   146a8:	20000080 	.word	0x20000080

000146ac <CC_PalMutexLock>:
   146ac:	4b02      	ldr	r3, [pc, #8]	; (146b8 <CC_PalMutexLock+0xc>)
   146ae:	6802      	ldr	r2, [r0, #0]
   146b0:	689b      	ldr	r3, [r3, #8]
   146b2:	6810      	ldr	r0, [r2, #0]
   146b4:	4718      	bx	r3
   146b6:	bf00      	nop
   146b8:	20000080 	.word	0x20000080

000146bc <CC_PalMutexUnlock>:
   146bc:	b508      	push	{r3, lr}
   146be:	4b03      	ldr	r3, [pc, #12]	; (146cc <CC_PalMutexUnlock+0x10>)
   146c0:	6802      	ldr	r2, [r0, #0]
   146c2:	68db      	ldr	r3, [r3, #12]
   146c4:	6810      	ldr	r0, [r2, #0]
   146c6:	4798      	blx	r3
   146c8:	2000      	movs	r0, #0
   146ca:	bd08      	pop	{r3, pc}
   146cc:	20000080 	.word	0x20000080

000146d0 <CC_PalPowerSaveModeInit>:
   146d0:	b570      	push	{r4, r5, r6, lr}
   146d2:	4c09      	ldr	r4, [pc, #36]	; (146f8 <CC_PalPowerSaveModeInit+0x28>)
   146d4:	4d09      	ldr	r5, [pc, #36]	; (146fc <CC_PalPowerSaveModeInit+0x2c>)
   146d6:	6920      	ldr	r0, [r4, #16]
   146d8:	68ab      	ldr	r3, [r5, #8]
   146da:	4798      	blx	r3
   146dc:	b118      	cbz	r0, 146e6 <CC_PalPowerSaveModeInit+0x16>
   146de:	4b08      	ldr	r3, [pc, #32]	; (14700 <CC_PalPowerSaveModeInit+0x30>)
   146e0:	4808      	ldr	r0, [pc, #32]	; (14704 <CC_PalPowerSaveModeInit+0x34>)
   146e2:	685b      	ldr	r3, [r3, #4]
   146e4:	4798      	blx	r3
   146e6:	2100      	movs	r1, #0
   146e8:	4a07      	ldr	r2, [pc, #28]	; (14708 <CC_PalPowerSaveModeInit+0x38>)
   146ea:	68eb      	ldr	r3, [r5, #12]
   146ec:	6011      	str	r1, [r2, #0]
   146ee:	6920      	ldr	r0, [r4, #16]
   146f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   146f4:	4718      	bx	r3
   146f6:	bf00      	nop
   146f8:	20000090 	.word	0x20000090
   146fc:	20000080 	.word	0x20000080
   14700:	20000070 	.word	0x20000070
   14704:	00016568 	.word	0x00016568
   14708:	20000864 	.word	0x20000864

0001470c <CC_PalPowerSaveModeSelect>:
   1470c:	b570      	push	{r4, r5, r6, lr}
   1470e:	4d1a      	ldr	r5, [pc, #104]	; (14778 <CC_PalPowerSaveModeSelect+0x6c>)
   14710:	4e1a      	ldr	r6, [pc, #104]	; (1477c <CC_PalPowerSaveModeSelect+0x70>)
   14712:	4604      	mov	r4, r0
   14714:	68b2      	ldr	r2, [r6, #8]
   14716:	6928      	ldr	r0, [r5, #16]
   14718:	4790      	blx	r2
   1471a:	b9f0      	cbnz	r0, 1475a <CC_PalPowerSaveModeSelect+0x4e>
   1471c:	b15c      	cbz	r4, 14736 <CC_PalPowerSaveModeSelect+0x2a>
   1471e:	4c18      	ldr	r4, [pc, #96]	; (14780 <CC_PalPowerSaveModeSelect+0x74>)
   14720:	6823      	ldr	r3, [r4, #0]
   14722:	b1ab      	cbz	r3, 14750 <CC_PalPowerSaveModeSelect+0x44>
   14724:	2b01      	cmp	r3, #1
   14726:	d01a      	beq.n	1475e <CC_PalPowerSaveModeSelect+0x52>
   14728:	3b01      	subs	r3, #1
   1472a:	6023      	str	r3, [r4, #0]
   1472c:	6928      	ldr	r0, [r5, #16]
   1472e:	68f3      	ldr	r3, [r6, #12]
   14730:	4798      	blx	r3
   14732:	2000      	movs	r0, #0
   14734:	bd70      	pop	{r4, r5, r6, pc}
   14736:	4c12      	ldr	r4, [pc, #72]	; (14780 <CC_PalPowerSaveModeSelect+0x74>)
   14738:	6821      	ldr	r1, [r4, #0]
   1473a:	b939      	cbnz	r1, 1474c <CC_PalPowerSaveModeSelect+0x40>
   1473c:	2001      	movs	r0, #1
   1473e:	4b11      	ldr	r3, [pc, #68]	; (14784 <CC_PalPowerSaveModeSelect+0x78>)
   14740:	4a11      	ldr	r2, [pc, #68]	; (14788 <CC_PalPowerSaveModeSelect+0x7c>)
   14742:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   14746:	6813      	ldr	r3, [r2, #0]
   14748:	2b00      	cmp	r3, #0
   1474a:	d1fc      	bne.n	14746 <CC_PalPowerSaveModeSelect+0x3a>
   1474c:	3101      	adds	r1, #1
   1474e:	6021      	str	r1, [r4, #0]
   14750:	68f3      	ldr	r3, [r6, #12]
   14752:	6928      	ldr	r0, [r5, #16]
   14754:	4798      	blx	r3
   14756:	2000      	movs	r0, #0
   14758:	bd70      	pop	{r4, r5, r6, pc}
   1475a:	480c      	ldr	r0, [pc, #48]	; (1478c <CC_PalPowerSaveModeSelect+0x80>)
   1475c:	bd70      	pop	{r4, r5, r6, pc}
   1475e:	4a0a      	ldr	r2, [pc, #40]	; (14788 <CC_PalPowerSaveModeSelect+0x7c>)
   14760:	6813      	ldr	r3, [r2, #0]
   14762:	2b00      	cmp	r3, #0
   14764:	d1fc      	bne.n	14760 <CC_PalPowerSaveModeSelect+0x54>
   14766:	4a07      	ldr	r2, [pc, #28]	; (14784 <CC_PalPowerSaveModeSelect+0x78>)
   14768:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   1476c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   14770:	f000 f820 	bl	147b4 <CC_HalMaskInterrupt>
   14774:	6823      	ldr	r3, [r4, #0]
   14776:	e7d7      	b.n	14728 <CC_PalPowerSaveModeSelect+0x1c>
   14778:	20000090 	.word	0x20000090
   1477c:	20000080 	.word	0x20000080
   14780:	20000864 	.word	0x20000864
   14784:	50840000 	.word	0x50840000
   14788:	50841910 	.word	0x50841910
   1478c:	ffff8fe9 	.word	0xffff8fe9

00014790 <CC_HalInit>:
   14790:	2000      	movs	r0, #0
   14792:	4770      	bx	lr

00014794 <CC_HalTerminate>:
   14794:	2000      	movs	r0, #0
   14796:	4770      	bx	lr

00014798 <CC_HalClearInterruptBit>:
   14798:	0543      	lsls	r3, r0, #21
   1479a:	d503      	bpl.n	147a4 <CC_HalClearInterruptBit+0xc>
   1479c:	f04f 32ff 	mov.w	r2, #4294967295
   147a0:	4b02      	ldr	r3, [pc, #8]	; (147ac <CC_HalClearInterruptBit+0x14>)
   147a2:	601a      	str	r2, [r3, #0]
   147a4:	4b02      	ldr	r3, [pc, #8]	; (147b0 <CC_HalClearInterruptBit+0x18>)
   147a6:	6018      	str	r0, [r3, #0]
   147a8:	4770      	bx	lr
   147aa:	bf00      	nop
   147ac:	50841108 	.word	0x50841108
   147b0:	50841a08 	.word	0x50841a08

000147b4 <CC_HalMaskInterrupt>:
   147b4:	4b01      	ldr	r3, [pc, #4]	; (147bc <CC_HalMaskInterrupt+0x8>)
   147b6:	6018      	str	r0, [r3, #0]
   147b8:	4770      	bx	lr
   147ba:	bf00      	nop
   147bc:	50841a04 	.word	0x50841a04

000147c0 <CC_HalWaitInterruptRND>:
   147c0:	b108      	cbz	r0, 147c6 <CC_HalWaitInterruptRND+0x6>
   147c2:	f000 b803 	b.w	147cc <CC_PalWaitInterruptRND>
   147c6:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   147ca:	4770      	bx	lr

000147cc <CC_PalWaitInterruptRND>:
   147cc:	4602      	mov	r2, r0
   147ce:	4807      	ldr	r0, [pc, #28]	; (147ec <CC_PalWaitInterruptRND+0x20>)
   147d0:	6803      	ldr	r3, [r0, #0]
   147d2:	4213      	tst	r3, r2
   147d4:	d0fc      	beq.n	147d0 <CC_PalWaitInterruptRND+0x4>
   147d6:	b121      	cbz	r1, 147e2 <CC_PalWaitInterruptRND+0x16>
   147d8:	4b05      	ldr	r3, [pc, #20]	; (147f0 <CC_PalWaitInterruptRND+0x24>)
   147da:	4806      	ldr	r0, [pc, #24]	; (147f4 <CC_PalWaitInterruptRND+0x28>)
   147dc:	681b      	ldr	r3, [r3, #0]
   147de:	600b      	str	r3, [r1, #0]
   147e0:	6003      	str	r3, [r0, #0]
   147e2:	4b05      	ldr	r3, [pc, #20]	; (147f8 <CC_PalWaitInterruptRND+0x2c>)
   147e4:	2000      	movs	r0, #0
   147e6:	601a      	str	r2, [r3, #0]
   147e8:	4770      	bx	lr
   147ea:	bf00      	nop
   147ec:	50841a00 	.word	0x50841a00
   147f0:	50841104 	.word	0x50841104
   147f4:	50841108 	.word	0x50841108
   147f8:	50841a08 	.word	0x50841a08

000147fc <mbedtls_platform_setup>:
   147fc:	f000 b89e 	b.w	1493c <nrf_cc3xx_platform_init>

00014800 <mbedtls_platform_zeroize>:
   14800:	b138      	cbz	r0, 14812 <mbedtls_platform_zeroize+0x12>
   14802:	b131      	cbz	r1, 14812 <mbedtls_platform_zeroize+0x12>
   14804:	2200      	movs	r2, #0
   14806:	4401      	add	r1, r0
   14808:	4603      	mov	r3, r0
   1480a:	3001      	adds	r0, #1
   1480c:	4281      	cmp	r1, r0
   1480e:	701a      	strb	r2, [r3, #0]
   14810:	d1fa      	bne.n	14808 <mbedtls_platform_zeroize+0x8>
   14812:	4770      	bx	lr

00014814 <mbedtls_hardware_poll>:
   14814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14818:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
   1481c:	460e      	mov	r6, r1
   1481e:	9205      	str	r2, [sp, #20]
   14820:	2100      	movs	r1, #0
   14822:	4614      	mov	r4, r2
   14824:	a812      	add	r0, sp, #72	; 0x48
   14826:	f44f 7208 	mov.w	r2, #544	; 0x220
   1482a:	461d      	mov	r5, r3
   1482c:	f001 fa89 	bl	15d42 <memset>
   14830:	2100      	movs	r1, #0
   14832:	2228      	movs	r2, #40	; 0x28
   14834:	a808      	add	r0, sp, #32
   14836:	9106      	str	r1, [sp, #24]
   14838:	f001 fa83 	bl	15d42 <memset>
   1483c:	2e00      	cmp	r6, #0
   1483e:	d03c      	beq.n	148ba <mbedtls_hardware_poll+0xa6>
   14840:	2d00      	cmp	r5, #0
   14842:	d03a      	beq.n	148ba <mbedtls_hardware_poll+0xa6>
   14844:	2c00      	cmp	r4, #0
   14846:	d038      	beq.n	148ba <mbedtls_hardware_poll+0xa6>
   14848:	2104      	movs	r1, #4
   1484a:	a806      	add	r0, sp, #24
   1484c:	f7ff feca 	bl	145e4 <CC_PalMemSetZeroPlat>
   14850:	a808      	add	r0, sp, #32
   14852:	2128      	movs	r1, #40	; 0x28
   14854:	f7ff fec6 	bl	145e4 <CC_PalMemSetZeroPlat>
   14858:	a808      	add	r0, sp, #32
   1485a:	f000 f831 	bl	148c0 <RNG_PLAT_SetUserRngParameters>
   1485e:	b178      	cbz	r0, 14880 <mbedtls_hardware_poll+0x6c>
   14860:	f04f 37ff 	mov.w	r7, #4294967295
   14864:	f44f 7108 	mov.w	r1, #544	; 0x220
   14868:	a812      	add	r0, sp, #72	; 0x48
   1486a:	f7ff ffc9 	bl	14800 <mbedtls_platform_zeroize>
   1486e:	2104      	movs	r1, #4
   14870:	a806      	add	r0, sp, #24
   14872:	f7ff ffc5 	bl	14800 <mbedtls_platform_zeroize>
   14876:	4638      	mov	r0, r7
   14878:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
   1487c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14880:	ab12      	add	r3, sp, #72	; 0x48
   14882:	f10d 081c 	add.w	r8, sp, #28
   14886:	4602      	mov	r2, r0
   14888:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1488c:	9003      	str	r0, [sp, #12]
   1488e:	ab05      	add	r3, sp, #20
   14890:	a908      	add	r1, sp, #32
   14892:	f8cd 8000 	str.w	r8, [sp]
   14896:	a806      	add	r0, sp, #24
   14898:	f000 fd2a 	bl	152f0 <LLF_RND_GetTrngSource>
   1489c:	2800      	cmp	r0, #0
   1489e:	d1df      	bne.n	14860 <mbedtls_hardware_poll+0x4c>
   148a0:	682b      	ldr	r3, [r5, #0]
   148a2:	42a3      	cmp	r3, r4
   148a4:	d3dc      	bcc.n	14860 <mbedtls_hardware_poll+0x4c>
   148a6:	f8d8 1000 	ldr.w	r1, [r8]
   148aa:	4607      	mov	r7, r0
   148ac:	4622      	mov	r2, r4
   148ae:	4630      	mov	r0, r6
   148b0:	3108      	adds	r1, #8
   148b2:	f7ff fe95 	bl	145e0 <CC_PalMemCopyPlat>
   148b6:	602c      	str	r4, [r5, #0]
   148b8:	e7d4      	b.n	14864 <mbedtls_hardware_poll+0x50>
   148ba:	f04f 37ff 	mov.w	r7, #4294967295
   148be:	e7da      	b.n	14876 <mbedtls_hardware_poll+0x62>

000148c0 <RNG_PLAT_SetUserRngParameters>:
   148c0:	231c      	movs	r3, #28
   148c2:	b530      	push	{r4, r5, lr}
   148c4:	b083      	sub	sp, #12
   148c6:	a901      	add	r1, sp, #4
   148c8:	4604      	mov	r4, r0
   148ca:	9301      	str	r3, [sp, #4]
   148cc:	f000 f9e4 	bl	14c98 <CC_PalTrngParamGet>
   148d0:	4605      	mov	r5, r0
   148d2:	b938      	cbnz	r0, 148e4 <RNG_PLAT_SetUserRngParameters+0x24>
   148d4:	9b01      	ldr	r3, [sp, #4]
   148d6:	2b1c      	cmp	r3, #28
   148d8:	d007      	beq.n	148ea <RNG_PLAT_SetUserRngParameters+0x2a>
   148da:	4d16      	ldr	r5, [pc, #88]	; (14934 <RNG_PLAT_SetUserRngParameters+0x74>)
   148dc:	4620      	mov	r0, r4
   148de:	211c      	movs	r1, #28
   148e0:	f7ff fe80 	bl	145e4 <CC_PalMemSetZeroPlat>
   148e4:	4628      	mov	r0, r5
   148e6:	b003      	add	sp, #12
   148e8:	bd30      	pop	{r4, r5, pc}
   148ea:	2101      	movs	r1, #1
   148ec:	e9d4 3200 	ldrd	r3, r2, [r4]
   148f0:	3b00      	subs	r3, #0
   148f2:	bf18      	it	ne
   148f4:	2301      	movne	r3, #1
   148f6:	61e1      	str	r1, [r4, #28]
   148f8:	b10a      	cbz	r2, 148fe <RNG_PLAT_SetUserRngParameters+0x3e>
   148fa:	f043 0302 	orr.w	r3, r3, #2
   148fe:	68a2      	ldr	r2, [r4, #8]
   14900:	b932      	cbnz	r2, 14910 <RNG_PLAT_SetUserRngParameters+0x50>
   14902:	68e2      	ldr	r2, [r4, #12]
   14904:	b942      	cbnz	r2, 14918 <RNG_PLAT_SetUserRngParameters+0x58>
   14906:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1490a:	b98b      	cbnz	r3, 14930 <RNG_PLAT_SetUserRngParameters+0x70>
   1490c:	4d0a      	ldr	r5, [pc, #40]	; (14938 <RNG_PLAT_SetUserRngParameters+0x78>)
   1490e:	e7e5      	b.n	148dc <RNG_PLAT_SetUserRngParameters+0x1c>
   14910:	68e2      	ldr	r2, [r4, #12]
   14912:	f043 0304 	orr.w	r3, r3, #4
   14916:	b13a      	cbz	r2, 14928 <RNG_PLAT_SetUserRngParameters+0x68>
   14918:	2200      	movs	r2, #0
   1491a:	4628      	mov	r0, r5
   1491c:	f043 0308 	orr.w	r3, r3, #8
   14920:	e9c4 3208 	strd	r3, r2, [r4, #32]
   14924:	b003      	add	sp, #12
   14926:	bd30      	pop	{r4, r5, pc}
   14928:	4615      	mov	r5, r2
   1492a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   1492e:	e7d9      	b.n	148e4 <RNG_PLAT_SetUserRngParameters+0x24>
   14930:	4615      	mov	r5, r2
   14932:	e7d7      	b.n	148e4 <RNG_PLAT_SetUserRngParameters+0x24>
   14934:	00f00c37 	.word	0x00f00c37
   14938:	00f00c0e 	.word	0x00f00c0e

0001493c <nrf_cc3xx_platform_init>:
   1493c:	b510      	push	{r4, lr}
   1493e:	4c0c      	ldr	r4, [pc, #48]	; (14970 <nrf_cc3xx_platform_init+0x34>)
   14940:	6823      	ldr	r3, [r4, #0]
   14942:	b113      	cbz	r3, 1494a <nrf_cc3xx_platform_init+0xe>
   14944:	4b0b      	ldr	r3, [pc, #44]	; (14974 <nrf_cc3xx_platform_init+0x38>)
   14946:	681b      	ldr	r3, [r3, #0]
   14948:	b92b      	cbnz	r3, 14956 <nrf_cc3xx_platform_init+0x1a>
   1494a:	f000 f965 	bl	14c18 <CC_LibInit>
   1494e:	b930      	cbnz	r0, 1495e <nrf_cc3xx_platform_init+0x22>
   14950:	2201      	movs	r2, #1
   14952:	4b08      	ldr	r3, [pc, #32]	; (14974 <nrf_cc3xx_platform_init+0x38>)
   14954:	601a      	str	r2, [r3, #0]
   14956:	2301      	movs	r3, #1
   14958:	2000      	movs	r0, #0
   1495a:	6023      	str	r3, [r4, #0]
   1495c:	bd10      	pop	{r4, pc}
   1495e:	3801      	subs	r0, #1
   14960:	2806      	cmp	r0, #6
   14962:	d901      	bls.n	14968 <nrf_cc3xx_platform_init+0x2c>
   14964:	4804      	ldr	r0, [pc, #16]	; (14978 <nrf_cc3xx_platform_init+0x3c>)
   14966:	bd10      	pop	{r4, pc}
   14968:	4b04      	ldr	r3, [pc, #16]	; (1497c <nrf_cc3xx_platform_init+0x40>)
   1496a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1496e:	bd10      	pop	{r4, pc}
   14970:	20000868 	.word	0x20000868
   14974:	2000086c 	.word	0x2000086c
   14978:	ffff8ffe 	.word	0xffff8ffe
   1497c:	00016588 	.word	0x00016588

00014980 <nrf_cc3xx_platform_init_no_rng>:
   14980:	b510      	push	{r4, lr}
   14982:	4c0a      	ldr	r4, [pc, #40]	; (149ac <nrf_cc3xx_platform_init_no_rng+0x2c>)
   14984:	6823      	ldr	r3, [r4, #0]
   14986:	b11b      	cbz	r3, 14990 <nrf_cc3xx_platform_init_no_rng+0x10>
   14988:	2301      	movs	r3, #1
   1498a:	2000      	movs	r0, #0
   1498c:	6023      	str	r3, [r4, #0]
   1498e:	bd10      	pop	{r4, pc}
   14990:	f000 f8ae 	bl	14af0 <CC_LibInitNoRng>
   14994:	2800      	cmp	r0, #0
   14996:	d0f7      	beq.n	14988 <nrf_cc3xx_platform_init_no_rng+0x8>
   14998:	3801      	subs	r0, #1
   1499a:	2806      	cmp	r0, #6
   1499c:	d803      	bhi.n	149a6 <nrf_cc3xx_platform_init_no_rng+0x26>
   1499e:	4b04      	ldr	r3, [pc, #16]	; (149b0 <nrf_cc3xx_platform_init_no_rng+0x30>)
   149a0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   149a4:	bd10      	pop	{r4, pc}
   149a6:	4803      	ldr	r0, [pc, #12]	; (149b4 <nrf_cc3xx_platform_init_no_rng+0x34>)
   149a8:	bd10      	pop	{r4, pc}
   149aa:	bf00      	nop
   149ac:	20000868 	.word	0x20000868
   149b0:	00016588 	.word	0x00016588
   149b4:	ffff8ffe 	.word	0xffff8ffe

000149b8 <nrf_cc3xx_platform_abort>:
   149b8:	f3bf 8f4f 	dsb	sy
   149bc:	4905      	ldr	r1, [pc, #20]	; (149d4 <nrf_cc3xx_platform_abort+0x1c>)
   149be:	4b06      	ldr	r3, [pc, #24]	; (149d8 <nrf_cc3xx_platform_abort+0x20>)
   149c0:	68ca      	ldr	r2, [r1, #12]
   149c2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   149c6:	4313      	orrs	r3, r2
   149c8:	60cb      	str	r3, [r1, #12]
   149ca:	f3bf 8f4f 	dsb	sy
   149ce:	bf00      	nop
   149d0:	e7fd      	b.n	149ce <nrf_cc3xx_platform_abort+0x16>
   149d2:	bf00      	nop
   149d4:	e000ed00 	.word	0xe000ed00
   149d8:	05fa0004 	.word	0x05fa0004

000149dc <CC_PalAbort>:
   149dc:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   149e0:	2100      	movs	r1, #0
   149e2:	b430      	push	{r4, r5}
   149e4:	4a06      	ldr	r2, [pc, #24]	; (14a00 <CC_PalAbort+0x24>)
   149e6:	4d07      	ldr	r5, [pc, #28]	; (14a04 <CC_PalAbort+0x28>)
   149e8:	4c07      	ldr	r4, [pc, #28]	; (14a08 <CC_PalAbort+0x2c>)
   149ea:	602b      	str	r3, [r5, #0]
   149ec:	6013      	str	r3, [r2, #0]
   149ee:	6023      	str	r3, [r4, #0]
   149f0:	4a06      	ldr	r2, [pc, #24]	; (14a0c <CC_PalAbort+0x30>)
   149f2:	4c07      	ldr	r4, [pc, #28]	; (14a10 <CC_PalAbort+0x34>)
   149f4:	60eb      	str	r3, [r5, #12]
   149f6:	6863      	ldr	r3, [r4, #4]
   149f8:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   149fc:	bc30      	pop	{r4, r5}
   149fe:	4718      	bx	r3
   14a00:	50841404 	.word	0x50841404
   14a04:	50841400 	.word	0x50841400
   14a08:	50841408 	.word	0x50841408
   14a0c:	50840000 	.word	0x50840000
   14a10:	20000070 	.word	0x20000070

00014a14 <nrf_cc3xx_platform_set_abort>:
   14a14:	4b02      	ldr	r3, [pc, #8]	; (14a20 <nrf_cc3xx_platform_set_abort+0xc>)
   14a16:	e9d0 1200 	ldrd	r1, r2, [r0]
   14a1a:	e9c3 1200 	strd	r1, r2, [r3]
   14a1e:	4770      	bx	lr
   14a20:	20000070 	.word	0x20000070

00014a24 <mutex_unlock>:
   14a24:	b148      	cbz	r0, 14a3a <mutex_unlock+0x16>
   14a26:	6843      	ldr	r3, [r0, #4]
   14a28:	b12b      	cbz	r3, 14a36 <mutex_unlock+0x12>
   14a2a:	f3bf 8f5f 	dmb	sy
   14a2e:	2300      	movs	r3, #0
   14a30:	6003      	str	r3, [r0, #0]
   14a32:	4618      	mov	r0, r3
   14a34:	4770      	bx	lr
   14a36:	4802      	ldr	r0, [pc, #8]	; (14a40 <mutex_unlock+0x1c>)
   14a38:	4770      	bx	lr
   14a3a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14a3e:	4770      	bx	lr
   14a40:	ffff8fea 	.word	0xffff8fea

00014a44 <mutex_free>:
   14a44:	b510      	push	{r4, lr}
   14a46:	4604      	mov	r4, r0
   14a48:	b128      	cbz	r0, 14a56 <mutex_free+0x12>
   14a4a:	6863      	ldr	r3, [r4, #4]
   14a4c:	b113      	cbz	r3, 14a54 <mutex_free+0x10>
   14a4e:	2300      	movs	r3, #0
   14a50:	6023      	str	r3, [r4, #0]
   14a52:	6063      	str	r3, [r4, #4]
   14a54:	bd10      	pop	{r4, pc}
   14a56:	4b02      	ldr	r3, [pc, #8]	; (14a60 <mutex_free+0x1c>)
   14a58:	4802      	ldr	r0, [pc, #8]	; (14a64 <mutex_free+0x20>)
   14a5a:	685b      	ldr	r3, [r3, #4]
   14a5c:	4798      	blx	r3
   14a5e:	e7f4      	b.n	14a4a <mutex_free+0x6>
   14a60:	20000070 	.word	0x20000070
   14a64:	000165a4 	.word	0x000165a4

00014a68 <mutex_init>:
   14a68:	b510      	push	{r4, lr}
   14a6a:	4604      	mov	r4, r0
   14a6c:	b130      	cbz	r0, 14a7c <mutex_init+0x14>
   14a6e:	2200      	movs	r2, #0
   14a70:	6863      	ldr	r3, [r4, #4]
   14a72:	6022      	str	r2, [r4, #0]
   14a74:	f043 0301 	orr.w	r3, r3, #1
   14a78:	6063      	str	r3, [r4, #4]
   14a7a:	bd10      	pop	{r4, pc}
   14a7c:	4801      	ldr	r0, [pc, #4]	; (14a84 <mutex_init+0x1c>)
   14a7e:	f7ff ffad 	bl	149dc <CC_PalAbort>
   14a82:	e7f4      	b.n	14a6e <mutex_init+0x6>
   14a84:	000165cc 	.word	0x000165cc

00014a88 <mutex_lock>:
   14a88:	b180      	cbz	r0, 14aac <mutex_lock+0x24>
   14a8a:	6843      	ldr	r3, [r0, #4]
   14a8c:	b163      	cbz	r3, 14aa8 <mutex_lock+0x20>
   14a8e:	2201      	movs	r2, #1
   14a90:	e8d0 3fef 	ldaex	r3, [r0]
   14a94:	e8c0 2fe1 	stlex	r1, r2, [r0]
   14a98:	2900      	cmp	r1, #0
   14a9a:	d1f9      	bne.n	14a90 <mutex_lock+0x8>
   14a9c:	2b01      	cmp	r3, #1
   14a9e:	d0f7      	beq.n	14a90 <mutex_lock+0x8>
   14aa0:	f3bf 8f5f 	dmb	sy
   14aa4:	2000      	movs	r0, #0
   14aa6:	4770      	bx	lr
   14aa8:	4802      	ldr	r0, [pc, #8]	; (14ab4 <mutex_lock+0x2c>)
   14aaa:	4770      	bx	lr
   14aac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14ab0:	4770      	bx	lr
   14ab2:	bf00      	nop
   14ab4:	ffff8fea 	.word	0xffff8fea

00014ab8 <nrf_cc3xx_platform_set_mutexes>:
   14ab8:	b470      	push	{r4, r5, r6}
   14aba:	4b0b      	ldr	r3, [pc, #44]	; (14ae8 <nrf_cc3xx_platform_set_mutexes+0x30>)
   14abc:	6806      	ldr	r6, [r0, #0]
   14abe:	68c2      	ldr	r2, [r0, #12]
   14ac0:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
   14ac4:	e9c3 4202 	strd	r4, r2, [r3, #8]
   14ac8:	e9c3 6500 	strd	r6, r5, [r3]
   14acc:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
   14ad0:	680e      	ldr	r6, [r1, #0]
   14ad2:	4b06      	ldr	r3, [pc, #24]	; (14aec <nrf_cc3xx_platform_set_mutexes+0x34>)
   14ad4:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
   14ad8:	e9c3 6500 	strd	r6, r5, [r3]
   14adc:	e9c3 4002 	strd	r4, r0, [r3, #8]
   14ae0:	611a      	str	r2, [r3, #16]
   14ae2:	bc70      	pop	{r4, r5, r6}
   14ae4:	4770      	bx	lr
   14ae6:	bf00      	nop
   14ae8:	20000080 	.word	0x20000080
   14aec:	20000090 	.word	0x20000090

00014af0 <CC_LibInitNoRng>:
   14af0:	b510      	push	{r4, lr}
   14af2:	f7ff fe4d 	bl	14790 <CC_HalInit>
   14af6:	b120      	cbz	r0, 14b02 <CC_LibInitNoRng+0x12>
   14af8:	2403      	movs	r4, #3
   14afa:	f7ff fda5 	bl	14648 <CC_PalTerminate>
   14afe:	4620      	mov	r0, r4
   14b00:	bd10      	pop	{r4, pc}
   14b02:	f7ff fd73 	bl	145ec <CC_PalInit>
   14b06:	b990      	cbnz	r0, 14b2e <CC_LibInitNoRng+0x3e>
   14b08:	f7ff fe00 	bl	1470c <CC_PalPowerSaveModeSelect>
   14b0c:	b990      	cbnz	r0, 14b34 <CC_LibInitNoRng+0x44>
   14b0e:	4b0f      	ldr	r3, [pc, #60]	; (14b4c <CC_LibInitNoRng+0x5c>)
   14b10:	681b      	ldr	r3, [r3, #0]
   14b12:	0e1b      	lsrs	r3, r3, #24
   14b14:	2bf0      	cmp	r3, #240	; 0xf0
   14b16:	d108      	bne.n	14b2a <CC_LibInitNoRng+0x3a>
   14b18:	4a0d      	ldr	r2, [pc, #52]	; (14b50 <CC_LibInitNoRng+0x60>)
   14b1a:	4b0e      	ldr	r3, [pc, #56]	; (14b54 <CC_LibInitNoRng+0x64>)
   14b1c:	6812      	ldr	r2, [r2, #0]
   14b1e:	429a      	cmp	r2, r3
   14b20:	d00a      	beq.n	14b38 <CC_LibInitNoRng+0x48>
   14b22:	2407      	movs	r4, #7
   14b24:	f7ff fe36 	bl	14794 <CC_HalTerminate>
   14b28:	e7e7      	b.n	14afa <CC_LibInitNoRng+0xa>
   14b2a:	2406      	movs	r4, #6
   14b2c:	e7fa      	b.n	14b24 <CC_LibInitNoRng+0x34>
   14b2e:	2404      	movs	r4, #4
   14b30:	4620      	mov	r0, r4
   14b32:	bd10      	pop	{r4, pc}
   14b34:	2400      	movs	r4, #0
   14b36:	e7f5      	b.n	14b24 <CC_LibInitNoRng+0x34>
   14b38:	2001      	movs	r0, #1
   14b3a:	f7ff fde7 	bl	1470c <CC_PalPowerSaveModeSelect>
   14b3e:	4604      	mov	r4, r0
   14b40:	2800      	cmp	r0, #0
   14b42:	d1f7      	bne.n	14b34 <CC_LibInitNoRng+0x44>
   14b44:	4b04      	ldr	r3, [pc, #16]	; (14b58 <CC_LibInitNoRng+0x68>)
   14b46:	6018      	str	r0, [r3, #0]
   14b48:	e7d9      	b.n	14afe <CC_LibInitNoRng+0xe>
   14b4a:	bf00      	nop
   14b4c:	50841928 	.word	0x50841928
   14b50:	50841a24 	.word	0x50841a24
   14b54:	20e00000 	.word	0x20e00000
   14b58:	50841a0c 	.word	0x50841a0c

00014b5c <CC_LibInitRngModule>:
   14b5c:	b530      	push	{r4, r5, lr}
   14b5e:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   14b62:	f44f 7208 	mov.w	r2, #544	; 0x220
   14b66:	2100      	movs	r1, #0
   14b68:	a80c      	add	r0, sp, #48	; 0x30
   14b6a:	f001 f8ea 	bl	15d42 <memset>
   14b6e:	2100      	movs	r1, #0
   14b70:	2228      	movs	r2, #40	; 0x28
   14b72:	a802      	add	r0, sp, #8
   14b74:	9101      	str	r1, [sp, #4]
   14b76:	f001 f8e4 	bl	15d42 <memset>
   14b7a:	a802      	add	r0, sp, #8
   14b7c:	f7ff fea0 	bl	148c0 <RNG_PLAT_SetUserRngParameters>
   14b80:	b120      	cbz	r0, 14b8c <CC_LibInitRngModule+0x30>
   14b82:	2405      	movs	r4, #5
   14b84:	4620      	mov	r0, r4
   14b86:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   14b8a:	bd30      	pop	{r4, r5, pc}
   14b8c:	4d1d      	ldr	r5, [pc, #116]	; (14c04 <CC_LibInitRngModule+0xa8>)
   14b8e:	f04f 31ff 	mov.w	r1, #4294967295
   14b92:	6828      	ldr	r0, [r5, #0]
   14b94:	f7ff fd8a 	bl	146ac <CC_PalMutexLock>
   14b98:	4604      	mov	r4, r0
   14b9a:	b9e8      	cbnz	r0, 14bd8 <CC_LibInitRngModule+0x7c>
   14b9c:	2000      	movs	r0, #0
   14b9e:	f7ff fdb5 	bl	1470c <CC_PalPowerSaveModeSelect>
   14ba2:	bb58      	cbnz	r0, 14bfc <CC_LibInitRngModule+0xa0>
   14ba4:	aa0c      	add	r2, sp, #48	; 0x30
   14ba6:	a902      	add	r1, sp, #8
   14ba8:	a801      	add	r0, sp, #4
   14baa:	f000 fbed 	bl	15388 <LLF_RND_RunTrngStartupTest>
   14bae:	4604      	mov	r4, r0
   14bb0:	2001      	movs	r0, #1
   14bb2:	f7ff fdab 	bl	1470c <CC_PalPowerSaveModeSelect>
   14bb6:	b9e8      	cbnz	r0, 14bf4 <CC_LibInitRngModule+0x98>
   14bb8:	6828      	ldr	r0, [r5, #0]
   14bba:	f7ff fd7f 	bl	146bc <CC_PalMutexUnlock>
   14bbe:	b928      	cbnz	r0, 14bcc <CC_LibInitRngModule+0x70>
   14bc0:	2c00      	cmp	r4, #0
   14bc2:	d1de      	bne.n	14b82 <CC_LibInitRngModule+0x26>
   14bc4:	4620      	mov	r0, r4
   14bc6:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
   14bca:	bd30      	pop	{r4, r5, pc}
   14bcc:	480e      	ldr	r0, [pc, #56]	; (14c08 <CC_LibInitRngModule+0xac>)
   14bce:	f7ff ff05 	bl	149dc <CC_PalAbort>
   14bd2:	2c00      	cmp	r4, #0
   14bd4:	d0f6      	beq.n	14bc4 <CC_LibInitRngModule+0x68>
   14bd6:	e7d4      	b.n	14b82 <CC_LibInitRngModule+0x26>
   14bd8:	480c      	ldr	r0, [pc, #48]	; (14c0c <CC_LibInitRngModule+0xb0>)
   14bda:	f7ff feff 	bl	149dc <CC_PalAbort>
   14bde:	2c01      	cmp	r4, #1
   14be0:	d1dc      	bne.n	14b9c <CC_LibInitRngModule+0x40>
   14be2:	6828      	ldr	r0, [r5, #0]
   14be4:	f7ff fd6a 	bl	146bc <CC_PalMutexUnlock>
   14be8:	2800      	cmp	r0, #0
   14bea:	d0ca      	beq.n	14b82 <CC_LibInitRngModule+0x26>
   14bec:	4806      	ldr	r0, [pc, #24]	; (14c08 <CC_LibInitRngModule+0xac>)
   14bee:	f7ff fef5 	bl	149dc <CC_PalAbort>
   14bf2:	e7c6      	b.n	14b82 <CC_LibInitRngModule+0x26>
   14bf4:	4806      	ldr	r0, [pc, #24]	; (14c10 <CC_LibInitRngModule+0xb4>)
   14bf6:	f7ff fef1 	bl	149dc <CC_PalAbort>
   14bfa:	e7dd      	b.n	14bb8 <CC_LibInitRngModule+0x5c>
   14bfc:	4805      	ldr	r0, [pc, #20]	; (14c14 <CC_LibInitRngModule+0xb8>)
   14bfe:	f7ff feed 	bl	149dc <CC_PalAbort>
   14c02:	e7cf      	b.n	14ba4 <CC_LibInitRngModule+0x48>
   14c04:	2000006c 	.word	0x2000006c
   14c08:	00016608 	.word	0x00016608
   14c0c:	000165f0 	.word	0x000165f0
   14c10:	00016640 	.word	0x00016640
   14c14:	00016620 	.word	0x00016620

00014c18 <CC_LibInit>:
   14c18:	b508      	push	{r3, lr}
   14c1a:	f7ff fdb9 	bl	14790 <CC_HalInit>
   14c1e:	b118      	cbz	r0, 14c28 <CC_LibInit+0x10>
   14c20:	f7ff fd12 	bl	14648 <CC_PalTerminate>
   14c24:	2003      	movs	r0, #3
   14c26:	bd08      	pop	{r3, pc}
   14c28:	f7ff fce0 	bl	145ec <CC_PalInit>
   14c2c:	b9c0      	cbnz	r0, 14c60 <CC_LibInit+0x48>
   14c2e:	f7ff fd6d 	bl	1470c <CC_PalPowerSaveModeSelect>
   14c32:	b9b8      	cbnz	r0, 14c64 <CC_LibInit+0x4c>
   14c34:	4b14      	ldr	r3, [pc, #80]	; (14c88 <CC_LibInit+0x70>)
   14c36:	681b      	ldr	r3, [r3, #0]
   14c38:	0e1b      	lsrs	r3, r3, #24
   14c3a:	2bf0      	cmp	r3, #240	; 0xf0
   14c3c:	d10a      	bne.n	14c54 <CC_LibInit+0x3c>
   14c3e:	4a13      	ldr	r2, [pc, #76]	; (14c8c <CC_LibInit+0x74>)
   14c40:	4b13      	ldr	r3, [pc, #76]	; (14c90 <CC_LibInit+0x78>)
   14c42:	6812      	ldr	r2, [r2, #0]
   14c44:	429a      	cmp	r2, r3
   14c46:	d017      	beq.n	14c78 <CC_LibInit+0x60>
   14c48:	f7ff fda4 	bl	14794 <CC_HalTerminate>
   14c4c:	f7ff fcfc 	bl	14648 <CC_PalTerminate>
   14c50:	2007      	movs	r0, #7
   14c52:	bd08      	pop	{r3, pc}
   14c54:	f7ff fd9e 	bl	14794 <CC_HalTerminate>
   14c58:	f7ff fcf6 	bl	14648 <CC_PalTerminate>
   14c5c:	2006      	movs	r0, #6
   14c5e:	bd08      	pop	{r3, pc}
   14c60:	2004      	movs	r0, #4
   14c62:	bd08      	pop	{r3, pc}
   14c64:	f7ff fd96 	bl	14794 <CC_HalTerminate>
   14c68:	f7ff fcee 	bl	14648 <CC_PalTerminate>
   14c6c:	f7ff ff76 	bl	14b5c <CC_LibInitRngModule>
   14c70:	2800      	cmp	r0, #0
   14c72:	bf18      	it	ne
   14c74:	2005      	movne	r0, #5
   14c76:	bd08      	pop	{r3, pc}
   14c78:	2001      	movs	r0, #1
   14c7a:	f7ff fd47 	bl	1470c <CC_PalPowerSaveModeSelect>
   14c7e:	2800      	cmp	r0, #0
   14c80:	d1f0      	bne.n	14c64 <CC_LibInit+0x4c>
   14c82:	4b04      	ldr	r3, [pc, #16]	; (14c94 <CC_LibInit+0x7c>)
   14c84:	6018      	str	r0, [r3, #0]
   14c86:	e7f1      	b.n	14c6c <CC_LibInit+0x54>
   14c88:	50841928 	.word	0x50841928
   14c8c:	50841a24 	.word	0x50841a24
   14c90:	20e00000 	.word	0x20e00000
   14c94:	50841a0c 	.word	0x50841a0c

00014c98 <CC_PalTrngParamGet>:
   14c98:	2800      	cmp	r0, #0
   14c9a:	d066      	beq.n	14d6a <CC_PalTrngParamGet+0xd2>
   14c9c:	2900      	cmp	r1, #0
   14c9e:	d064      	beq.n	14d6a <CC_PalTrngParamGet+0xd2>
   14ca0:	680b      	ldr	r3, [r1, #0]
   14ca2:	2b1c      	cmp	r3, #28
   14ca4:	d161      	bne.n	14d6a <CC_PalTrngParamGet+0xd2>
   14ca6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14caa:	4a3b      	ldr	r2, [pc, #236]	; (14d98 <CC_PalTrngParamGet+0x100>)
   14cac:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
   14cb0:	4291      	cmp	r1, r2
   14cb2:	d05c      	beq.n	14d6e <CC_PalTrngParamGet+0xd6>
   14cb4:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   14cb8:	3201      	adds	r2, #1
   14cba:	d058      	beq.n	14d6e <CC_PalTrngParamGet+0xd6>
   14cbc:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   14cc0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14cc4:	6002      	str	r2, [r0, #0]
   14cc6:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
   14cca:	4a34      	ldr	r2, [pc, #208]	; (14d9c <CC_PalTrngParamGet+0x104>)
   14ccc:	4291      	cmp	r1, r2
   14cce:	d060      	beq.n	14d92 <CC_PalTrngParamGet+0xfa>
   14cd0:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   14cd4:	3201      	adds	r2, #1
   14cd6:	d05c      	beq.n	14d92 <CC_PalTrngParamGet+0xfa>
   14cd8:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   14cdc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14ce0:	6042      	str	r2, [r0, #4]
   14ce2:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   14ce6:	f512 7f94 	cmn.w	r2, #296	; 0x128
   14cea:	d04f      	beq.n	14d8c <CC_PalTrngParamGet+0xf4>
   14cec:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   14cf0:	3201      	adds	r2, #1
   14cf2:	d04b      	beq.n	14d8c <CC_PalTrngParamGet+0xf4>
   14cf4:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   14cf8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14cfc:	6082      	str	r2, [r0, #8]
   14cfe:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
   14d02:	4a27      	ldr	r2, [pc, #156]	; (14da0 <CC_PalTrngParamGet+0x108>)
   14d04:	4291      	cmp	r1, r2
   14d06:	d03e      	beq.n	14d86 <CC_PalTrngParamGet+0xee>
   14d08:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   14d0c:	3201      	adds	r2, #1
   14d0e:	d03a      	beq.n	14d86 <CC_PalTrngParamGet+0xee>
   14d10:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   14d14:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14d18:	60c2      	str	r2, [r0, #12]
   14d1a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   14d1e:	3270      	adds	r2, #112	; 0x70
   14d20:	d02f      	beq.n	14d82 <CC_PalTrngParamGet+0xea>
   14d22:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   14d26:	3201      	adds	r2, #1
   14d28:	d02b      	beq.n	14d82 <CC_PalTrngParamGet+0xea>
   14d2a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   14d2e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14d32:	6102      	str	r2, [r0, #16]
   14d34:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14d38:	32af      	adds	r2, #175	; 0xaf
   14d3a:	d020      	beq.n	14d7e <CC_PalTrngParamGet+0xe6>
   14d3c:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14d40:	3201      	adds	r2, #1
   14d42:	d01c      	beq.n	14d7e <CC_PalTrngParamGet+0xe6>
   14d44:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   14d48:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14d4c:	6142      	str	r2, [r0, #20]
   14d4e:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
   14d52:	4a14      	ldr	r2, [pc, #80]	; (14da4 <CC_PalTrngParamGet+0x10c>)
   14d54:	4291      	cmp	r1, r2
   14d56:	d00d      	beq.n	14d74 <CC_PalTrngParamGet+0xdc>
   14d58:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   14d5c:	3201      	adds	r2, #1
   14d5e:	d009      	beq.n	14d74 <CC_PalTrngParamGet+0xdc>
   14d60:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
   14d64:	6183      	str	r3, [r0, #24]
   14d66:	2000      	movs	r0, #0
   14d68:	4770      	bx	lr
   14d6a:	2001      	movs	r0, #1
   14d6c:	4770      	bx	lr
   14d6e:	f640 02fc 	movw	r2, #2300	; 0x8fc
   14d72:	e7a5      	b.n	14cc0 <CC_PalTrngParamGet+0x28>
   14d74:	f240 3337 	movw	r3, #823	; 0x337
   14d78:	6183      	str	r3, [r0, #24]
   14d7a:	2000      	movs	r0, #0
   14d7c:	4770      	bx	lr
   14d7e:	2251      	movs	r2, #81	; 0x51
   14d80:	e7e2      	b.n	14d48 <CC_PalTrngParamGet+0xb0>
   14d82:	2290      	movs	r2, #144	; 0x90
   14d84:	e7d3      	b.n	14d2e <CC_PalTrngParamGet+0x96>
   14d86:	f642 1204 	movw	r2, #10500	; 0x2904
   14d8a:	e7c3      	b.n	14d14 <CC_PalTrngParamGet+0x7c>
   14d8c:	f640 62d8 	movw	r2, #3800	; 0xed8
   14d90:	e7b2      	b.n	14cf8 <CC_PalTrngParamGet+0x60>
   14d92:	f242 02d0 	movw	r2, #8400	; 0x20d0
   14d96:	e7a1      	b.n	14cdc <CC_PalTrngParamGet+0x44>
   14d98:	fffff8fc 	.word	0xfffff8fc
   14d9c:	ffff20d0 	.word	0xffff20d0
   14da0:	ffff2904 	.word	0xffff2904
   14da4:	fffff337 	.word	0xfffff337

00014da8 <startTrngHW>:
   14da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14dac:	2800      	cmp	r0, #0
   14dae:	d077      	beq.n	14ea0 <startTrngHW+0xf8>
   14db0:	460c      	mov	r4, r1
   14db2:	2900      	cmp	r1, #0
   14db4:	d074      	beq.n	14ea0 <startTrngHW+0xf8>
   14db6:	461d      	mov	r5, r3
   14db8:	2b00      	cmp	r3, #0
   14dba:	d071      	beq.n	14ea0 <startTrngHW+0xf8>
   14dbc:	4606      	mov	r6, r0
   14dbe:	b11a      	cbz	r2, 14dc8 <startTrngHW+0x20>
   14dc0:	2201      	movs	r2, #1
   14dc2:	2300      	movs	r3, #0
   14dc4:	602a      	str	r2, [r5, #0]
   14dc6:	6003      	str	r3, [r0, #0]
   14dc8:	682b      	ldr	r3, [r5, #0]
   14dca:	2b00      	cmp	r3, #0
   14dcc:	d064      	beq.n	14e98 <startTrngHW+0xf0>
   14dce:	4629      	mov	r1, r5
   14dd0:	4620      	mov	r0, r4
   14dd2:	f000 fb15 	bl	15400 <LLF_RND_GetFastestRosc>
   14dd6:	4607      	mov	r7, r0
   14dd8:	2800      	cmp	r0, #0
   14dda:	d15e      	bne.n	14e9a <startTrngHW+0xf2>
   14ddc:	4621      	mov	r1, r4
   14dde:	6828      	ldr	r0, [r5, #0]
   14de0:	f000 faf0 	bl	153c4 <LLF_RND_GetRoscSampleCnt>
   14de4:	4607      	mov	r7, r0
   14de6:	2800      	cmp	r0, #0
   14de8:	d157      	bne.n	14e9a <startTrngHW+0xf2>
   14dea:	682b      	ldr	r3, [r5, #0]
   14dec:	2b08      	cmp	r3, #8
   14dee:	d066      	beq.n	14ebe <startTrngHW+0x116>
   14df0:	2b04      	cmp	r3, #4
   14df2:	d067      	beq.n	14ec4 <startTrngHW+0x11c>
   14df4:	f1a3 0802 	sub.w	r8, r3, #2
   14df8:	fab8 f888 	clz	r8, r8
   14dfc:	ea4f 1858 	mov.w	r8, r8, lsr #5
   14e00:	2301      	movs	r3, #1
   14e02:	469c      	mov	ip, r3
   14e04:	4a31      	ldr	r2, [pc, #196]	; (14ecc <startTrngHW+0x124>)
   14e06:	4932      	ldr	r1, [pc, #200]	; (14ed0 <startTrngHW+0x128>)
   14e08:	6013      	str	r3, [r2, #0]
   14e0a:	4610      	mov	r0, r2
   14e0c:	600b      	str	r3, [r1, #0]
   14e0e:	3a94      	subs	r2, #148	; 0x94
   14e10:	f8c0 c000 	str.w	ip, [r0]
   14e14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14e16:	6013      	str	r3, [r2, #0]
   14e18:	6811      	ldr	r1, [r2, #0]
   14e1a:	428b      	cmp	r3, r1
   14e1c:	d1f8      	bne.n	14e10 <startTrngHW+0x68>
   14e1e:	f04f 0900 	mov.w	r9, #0
   14e22:	4b2c      	ldr	r3, [pc, #176]	; (14ed4 <startTrngHW+0x12c>)
   14e24:	f04f 30ff 	mov.w	r0, #4294967295
   14e28:	f8c3 9000 	str.w	r9, [r3]
   14e2c:	f7ff fcb4 	bl	14798 <CC_HalClearInterruptBit>
   14e30:	4b29      	ldr	r3, [pc, #164]	; (14ed8 <startTrngHW+0x130>)
   14e32:	4a2a      	ldr	r2, [pc, #168]	; (14edc <startTrngHW+0x134>)
   14e34:	4648      	mov	r0, r9
   14e36:	601a      	str	r2, [r3, #0]
   14e38:	f7ff fcbc 	bl	147b4 <CC_HalMaskInterrupt>
   14e3c:	4a28      	ldr	r2, [pc, #160]	; (14ee0 <startTrngHW+0x138>)
   14e3e:	4b29      	ldr	r3, [pc, #164]	; (14ee4 <startTrngHW+0x13c>)
   14e40:	f8c2 8000 	str.w	r8, [r2]
   14e44:	6818      	ldr	r0, [r3, #0]
   14e46:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   14e4a:	f7ff fcb3 	bl	147b4 <CC_HalMaskInterrupt>
   14e4e:	220a      	movs	r2, #10
   14e50:	4b25      	ldr	r3, [pc, #148]	; (14ee8 <startTrngHW+0x140>)
   14e52:	601a      	str	r2, [r3, #0]
   14e54:	9a08      	ldr	r2, [sp, #32]
   14e56:	6923      	ldr	r3, [r4, #16]
   14e58:	2a01      	cmp	r2, #1
   14e5a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14e5c:	d024      	beq.n	14ea8 <startTrngHW+0x100>
   14e5e:	4a23      	ldr	r2, [pc, #140]	; (14eec <startTrngHW+0x144>)
   14e60:	fba2 2303 	umull	r2, r3, r2, r3
   14e64:	091b      	lsrs	r3, r3, #4
   14e66:	2201      	movs	r2, #1
   14e68:	fb03 f301 	mul.w	r3, r3, r1
   14e6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14e70:	491f      	ldr	r1, [pc, #124]	; (14ef0 <startTrngHW+0x148>)
   14e72:	03db      	lsls	r3, r3, #15
   14e74:	099b      	lsrs	r3, r3, #6
   14e76:	600b      	str	r3, [r1, #0]
   14e78:	4b16      	ldr	r3, [pc, #88]	; (14ed4 <startTrngHW+0x12c>)
   14e7a:	4638      	mov	r0, r7
   14e7c:	601a      	str	r2, [r3, #0]
   14e7e:	6833      	ldr	r3, [r6, #0]
   14e80:	682a      	ldr	r2, [r5, #0]
   14e82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   14e86:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   14e8a:	6033      	str	r3, [r6, #0]
   14e8c:	682a      	ldr	r2, [r5, #0]
   14e8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   14e92:	6033      	str	r3, [r6, #0]
   14e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14e98:	4f16      	ldr	r7, [pc, #88]	; (14ef4 <startTrngHW+0x14c>)
   14e9a:	4638      	mov	r0, r7
   14e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14ea0:	4f15      	ldr	r7, [pc, #84]	; (14ef8 <startTrngHW+0x150>)
   14ea2:	4638      	mov	r0, r7
   14ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14ea8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   14eac:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   14eb0:	3201      	adds	r2, #1
   14eb2:	d002      	beq.n	14eba <startTrngHW+0x112>
   14eb4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   14eb8:	e7d1      	b.n	14e5e <startTrngHW+0xb6>
   14eba:	2316      	movs	r3, #22
   14ebc:	e7d3      	b.n	14e66 <startTrngHW+0xbe>
   14ebe:	f04f 0803 	mov.w	r8, #3
   14ec2:	e79d      	b.n	14e00 <startTrngHW+0x58>
   14ec4:	f04f 0802 	mov.w	r8, #2
   14ec8:	e79a      	b.n	14e00 <startTrngHW+0x58>
   14eca:	bf00      	nop
   14ecc:	508411c4 	.word	0x508411c4
   14ed0:	50841140 	.word	0x50841140
   14ed4:	5084112c 	.word	0x5084112c
   14ed8:	50841100 	.word	0x50841100
   14edc:	0ffffffe 	.word	0x0ffffffe
   14ee0:	5084110c 	.word	0x5084110c
   14ee4:	50841a04 	.word	0x50841a04
   14ee8:	50841138 	.word	0x50841138
   14eec:	aaaaaaab 	.word	0xaaaaaaab
   14ef0:	508411d8 	.word	0x508411d8
   14ef4:	00f10c31 	.word	0x00f10c31
   14ef8:	00f10c35 	.word	0x00f10c35

00014efc <LLF_RND_RepetitionCounterTest.part.0>:
   14efc:	b4f0      	push	{r4, r5, r6, r7}
   14efe:	2400      	movs	r4, #0
   14f00:	00c9      	lsls	r1, r1, #3
   14f02:	4626      	mov	r6, r4
   14f04:	4627      	mov	r7, r4
   14f06:	f101 3cff 	add.w	ip, r1, #4294967295
   14f0a:	e006      	b.n	14f1a <LLF_RND_RepetitionCounterTest.part.0+0x1e>
   14f0c:	429f      	cmp	r7, r3
   14f0e:	d015      	beq.n	14f3c <LLF_RND_RepetitionCounterTest.part.0+0x40>
   14f10:	2601      	movs	r6, #1
   14f12:	4565      	cmp	r5, ip
   14f14:	d818      	bhi.n	14f48 <LLF_RND_RepetitionCounterTest.part.0+0x4c>
   14f16:	462c      	mov	r4, r5
   14f18:	461f      	mov	r7, r3
   14f1a:	0963      	lsrs	r3, r4, #5
   14f1c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14f20:	f004 011f 	and.w	r1, r4, #31
   14f24:	40cb      	lsrs	r3, r1
   14f26:	291f      	cmp	r1, #31
   14f28:	f104 0501 	add.w	r5, r4, #1
   14f2c:	bf18      	it	ne
   14f2e:	f003 0301 	andne.w	r3, r3, #1
   14f32:	2c00      	cmp	r4, #0
   14f34:	d1ea      	bne.n	14f0c <LLF_RND_RepetitionCounterTest.part.0+0x10>
   14f36:	2601      	movs	r6, #1
   14f38:	4635      	mov	r5, r6
   14f3a:	e7ec      	b.n	14f16 <LLF_RND_RepetitionCounterTest.part.0+0x1a>
   14f3c:	3601      	adds	r6, #1
   14f3e:	4296      	cmp	r6, r2
   14f40:	d1e7      	bne.n	14f12 <LLF_RND_RepetitionCounterTest.part.0+0x16>
   14f42:	4803      	ldr	r0, [pc, #12]	; (14f50 <LLF_RND_RepetitionCounterTest.part.0+0x54>)
   14f44:	bcf0      	pop	{r4, r5, r6, r7}
   14f46:	4770      	bx	lr
   14f48:	2000      	movs	r0, #0
   14f4a:	bcf0      	pop	{r4, r5, r6, r7}
   14f4c:	4770      	bx	lr
   14f4e:	bf00      	nop
   14f50:	00f10c36 	.word	0x00f10c36

00014f54 <LLF_RND_AdaptiveProportionTest>:
   14f54:	2800      	cmp	r0, #0
   14f56:	d05f      	beq.n	15018 <LLF_RND_AdaptiveProportionTest+0xc4>
   14f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f5c:	1e4c      	subs	r4, r1, #1
   14f5e:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   14f62:	d226      	bcs.n	14fb2 <LLF_RND_AdaptiveProportionTest+0x5e>
   14f64:	b32b      	cbz	r3, 14fb2 <LLF_RND_AdaptiveProportionTest+0x5e>
   14f66:	b322      	cbz	r2, 14fb2 <LLF_RND_AdaptiveProportionTest+0x5e>
   14f68:	00cc      	lsls	r4, r1, #3
   14f6a:	2b01      	cmp	r3, #1
   14f6c:	f104 3eff 	add.w	lr, r4, #4294967295
   14f70:	d02f      	beq.n	14fd2 <LLF_RND_AdaptiveProportionTest+0x7e>
   14f72:	2100      	movs	r1, #0
   14f74:	468c      	mov	ip, r1
   14f76:	460f      	mov	r7, r1
   14f78:	460d      	mov	r5, r1
   14f7a:	f103 38ff 	add.w	r8, r3, #4294967295
   14f7e:	094c      	lsrs	r4, r1, #5
   14f80:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   14f84:	f001 061f 	and.w	r6, r1, #31
   14f88:	40f4      	lsrs	r4, r6
   14f8a:	2e1f      	cmp	r6, #31
   14f8c:	bf18      	it	ne
   14f8e:	f004 0401 	andne.w	r4, r4, #1
   14f92:	b921      	cbnz	r1, 14f9e <LLF_RND_AdaptiveProportionTest+0x4a>
   14f94:	2501      	movs	r5, #1
   14f96:	46ac      	mov	ip, r5
   14f98:	4629      	mov	r1, r5
   14f9a:	4627      	mov	r7, r4
   14f9c:	e7ef      	b.n	14f7e <LLF_RND_AdaptiveProportionTest+0x2a>
   14f9e:	42ab      	cmp	r3, r5
   14fa0:	d013      	beq.n	14fca <LLF_RND_AdaptiveProportionTest+0x76>
   14fa2:	42a7      	cmp	r7, r4
   14fa4:	d101      	bne.n	14faa <LLF_RND_AdaptiveProportionTest+0x56>
   14fa6:	f10c 0c01 	add.w	ip, ip, #1
   14faa:	4545      	cmp	r5, r8
   14fac:	d104      	bne.n	14fb8 <LLF_RND_AdaptiveProportionTest+0x64>
   14fae:	4562      	cmp	r2, ip
   14fb0:	d202      	bcs.n	14fb8 <LLF_RND_AdaptiveProportionTest+0x64>
   14fb2:	481a      	ldr	r0, [pc, #104]	; (1501c <LLF_RND_AdaptiveProportionTest+0xc8>)
   14fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14fb8:	463c      	mov	r4, r7
   14fba:	3101      	adds	r1, #1
   14fbc:	458e      	cmp	lr, r1
   14fbe:	f105 0501 	add.w	r5, r5, #1
   14fc2:	d2ea      	bcs.n	14f9a <LLF_RND_AdaptiveProportionTest+0x46>
   14fc4:	2000      	movs	r0, #0
   14fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14fca:	2500      	movs	r5, #0
   14fcc:	f04f 0c01 	mov.w	ip, #1
   14fd0:	e7f3      	b.n	14fba <LLF_RND_AdaptiveProportionTest+0x66>
   14fd2:	2600      	movs	r6, #0
   14fd4:	46b4      	mov	ip, r6
   14fd6:	4637      	mov	r7, r6
   14fd8:	4631      	mov	r1, r6
   14fda:	094b      	lsrs	r3, r1, #5
   14fdc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   14fe0:	f001 051f 	and.w	r5, r1, #31
   14fe4:	40eb      	lsrs	r3, r5
   14fe6:	2d1f      	cmp	r5, #31
   14fe8:	bf18      	it	ne
   14fea:	f003 0301 	andne.w	r3, r3, #1
   14fee:	b139      	cbz	r1, 15000 <LLF_RND_AdaptiveProportionTest+0xac>
   14ff0:	b95f      	cbnz	r7, 1500a <LLF_RND_AdaptiveProportionTest+0xb6>
   14ff2:	459c      	cmp	ip, r3
   14ff4:	d001      	beq.n	14ffa <LLF_RND_AdaptiveProportionTest+0xa6>
   14ff6:	4663      	mov	r3, ip
   14ff8:	e008      	b.n	1500c <LLF_RND_AdaptiveProportionTest+0xb8>
   14ffa:	4663      	mov	r3, ip
   14ffc:	3601      	adds	r6, #1
   14ffe:	e005      	b.n	1500c <LLF_RND_AdaptiveProportionTest+0xb8>
   15000:	2601      	movs	r6, #1
   15002:	4631      	mov	r1, r6
   15004:	469c      	mov	ip, r3
   15006:	2701      	movs	r7, #1
   15008:	e7e7      	b.n	14fda <LLF_RND_AdaptiveProportionTest+0x86>
   1500a:	463e      	mov	r6, r7
   1500c:	42b2      	cmp	r2, r6
   1500e:	d3d0      	bcc.n	14fb2 <LLF_RND_AdaptiveProportionTest+0x5e>
   15010:	3101      	adds	r1, #1
   15012:	42a1      	cmp	r1, r4
   15014:	d1f6      	bne.n	15004 <LLF_RND_AdaptiveProportionTest+0xb0>
   15016:	e7d5      	b.n	14fc4 <LLF_RND_AdaptiveProportionTest+0x70>
   15018:	4800      	ldr	r0, [pc, #0]	; (1501c <LLF_RND_AdaptiveProportionTest+0xc8>)
   1501a:	4770      	bx	lr
   1501c:	00f10c37 	.word	0x00f10c37

00015020 <getTrngSource>:
   15020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15024:	b08d      	sub	sp, #52	; 0x34
   15026:	9e18      	ldr	r6, [sp, #96]	; 0x60
   15028:	4607      	mov	r7, r0
   1502a:	460c      	mov	r4, r1
   1502c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   1502e:	2e00      	cmp	r6, #0
   15030:	d14c      	bne.n	150cc <getTrngSource+0xac>
   15032:	f8d1 b010 	ldr.w	fp, [r1, #16]
   15036:	2100      	movs	r1, #0
   15038:	601d      	str	r5, [r3, #0]
   1503a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1503c:	6019      	str	r1, [r3, #0]
   1503e:	2a00      	cmp	r2, #0
   15040:	f000 811e 	beq.w	15280 <getTrngSource+0x260>
   15044:	4a9a      	ldr	r2, [pc, #616]	; (152b0 <getTrngSource+0x290>)
   15046:	4b9b      	ldr	r3, [pc, #620]	; (152b4 <getTrngSource+0x294>)
   15048:	6811      	ldr	r1, [r2, #0]
   1504a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1504c:	681b      	ldr	r3, [r3, #0]
   1504e:	429a      	cmp	r2, r3
   15050:	d147      	bne.n	150e2 <getTrngSource+0xc2>
   15052:	290a      	cmp	r1, #10
   15054:	d145      	bne.n	150e2 <getTrngSource+0xc2>
   15056:	78fb      	ldrb	r3, [r7, #3]
   15058:	9304      	str	r3, [sp, #16]
   1505a:	2304      	movs	r3, #4
   1505c:	46b8      	mov	r8, r7
   1505e:	9302      	str	r3, [sp, #8]
   15060:	4b95      	ldr	r3, [pc, #596]	; (152b8 <getTrngSource+0x298>)
   15062:	fba3 230b 	umull	r2, r3, r3, fp
   15066:	ea4f 0a93 	mov.w	sl, r3, lsr #2
   1506a:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
   1506e:	f105 0208 	add.w	r2, r5, #8
   15072:	9203      	str	r2, [sp, #12]
   15074:	ebab 0a43 	sub.w	sl, fp, r3, lsl #1
   15078:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1507a:	f8c3 b000 	str.w	fp, [r3]
   1507e:	f1bb 0f00 	cmp.w	fp, #0
   15082:	f000 80c3 	beq.w	1520c <getTrngSource+0x1ec>
   15086:	465d      	mov	r5, fp
   15088:	f04f 0900 	mov.w	r9, #0
   1508c:	9e03      	ldr	r6, [sp, #12]
   1508e:	f000 f9c7 	bl	15420 <LLF_RND_TurnOffTrng>
   15092:	2300      	movs	r3, #0
   15094:	9305      	str	r3, [sp, #20]
   15096:	f1b8 0f00 	cmp.w	r8, #0
   1509a:	f000 80e5 	beq.w	15268 <getTrngSource+0x248>
   1509e:	2c00      	cmp	r4, #0
   150a0:	f000 80e2 	beq.w	15268 <getTrngSource+0x248>
   150a4:	9b04      	ldr	r3, [sp, #16]
   150a6:	2b00      	cmp	r3, #0
   150a8:	f000 80dc 	beq.w	15264 <getTrngSource+0x244>
   150ac:	4620      	mov	r0, r4
   150ae:	a904      	add	r1, sp, #16
   150b0:	f000 f9a6 	bl	15400 <LLF_RND_GetFastestRosc>
   150b4:	b1b8      	cbz	r0, 150e6 <getTrngSource+0xc6>
   150b6:	4b81      	ldr	r3, [pc, #516]	; (152bc <getTrngSource+0x29c>)
   150b8:	4298      	cmp	r0, r3
   150ba:	f040 80a7 	bne.w	1520c <getTrngSource+0x1ec>
   150be:	9002      	str	r0, [sp, #8]
   150c0:	f000 f9ae 	bl	15420 <LLF_RND_TurnOffTrng>
   150c4:	9802      	ldr	r0, [sp, #8]
   150c6:	b00d      	add	sp, #52	; 0x34
   150c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150cc:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
   150d0:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   150d4:	3001      	adds	r0, #1
   150d6:	bf0c      	ite	eq
   150d8:	f44f 7b04 	moveq.w	fp, #528	; 0x210
   150dc:	f8d1 bc0c 	ldrne.w	fp, [r1, #3084]	; 0xc0c
   150e0:	e7a9      	b.n	15036 <getTrngSource+0x16>
   150e2:	4877      	ldr	r0, [pc, #476]	; (152c0 <getTrngSource+0x2a0>)
   150e4:	e7eb      	b.n	150be <getTrngSource+0x9e>
   150e6:	4621      	mov	r1, r4
   150e8:	9804      	ldr	r0, [sp, #16]
   150ea:	f000 f96b 	bl	153c4 <LLF_RND_GetRoscSampleCnt>
   150ee:	2800      	cmp	r0, #0
   150f0:	d1e1      	bne.n	150b6 <getTrngSource+0x96>
   150f2:	9f04      	ldr	r7, [sp, #16]
   150f4:	2f08      	cmp	r7, #8
   150f6:	f000 80b9 	beq.w	1526c <getTrngSource+0x24c>
   150fa:	2f04      	cmp	r7, #4
   150fc:	f000 80b8 	beq.w	15270 <getTrngSource+0x250>
   15100:	f1a7 0702 	sub.w	r7, r7, #2
   15104:	fab7 f787 	clz	r7, r7
   15108:	097f      	lsrs	r7, r7, #5
   1510a:	2301      	movs	r3, #1
   1510c:	4619      	mov	r1, r3
   1510e:	486d      	ldr	r0, [pc, #436]	; (152c4 <getTrngSource+0x2a4>)
   15110:	6003      	str	r3, [r0, #0]
   15112:	f840 3c84 	str.w	r3, [r0, #-132]
   15116:	4b6b      	ldr	r3, [pc, #428]	; (152c4 <getTrngSource+0x2a4>)
   15118:	4866      	ldr	r0, [pc, #408]	; (152b4 <getTrngSource+0x294>)
   1511a:	6019      	str	r1, [r3, #0]
   1511c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1511e:	6003      	str	r3, [r0, #0]
   15120:	6800      	ldr	r0, [r0, #0]
   15122:	4283      	cmp	r3, r0
   15124:	d1f7      	bne.n	15116 <getTrngSource+0xf6>
   15126:	2300      	movs	r3, #0
   15128:	4a67      	ldr	r2, [pc, #412]	; (152c8 <getTrngSource+0x2a8>)
   1512a:	f04f 30ff 	mov.w	r0, #4294967295
   1512e:	6013      	str	r3, [r2, #0]
   15130:	f7ff fb32 	bl	14798 <CC_HalClearInterruptBit>
   15134:	2300      	movs	r3, #0
   15136:	4965      	ldr	r1, [pc, #404]	; (152cc <getTrngSource+0x2ac>)
   15138:	4618      	mov	r0, r3
   1513a:	4b65      	ldr	r3, [pc, #404]	; (152d0 <getTrngSource+0x2b0>)
   1513c:	6019      	str	r1, [r3, #0]
   1513e:	f7ff fb39 	bl	147b4 <CC_HalMaskInterrupt>
   15142:	4964      	ldr	r1, [pc, #400]	; (152d4 <getTrngSource+0x2b4>)
   15144:	4b64      	ldr	r3, [pc, #400]	; (152d8 <getTrngSource+0x2b8>)
   15146:	600f      	str	r7, [r1, #0]
   15148:	6818      	ldr	r0, [r3, #0]
   1514a:	4f5b      	ldr	r7, [pc, #364]	; (152b8 <getTrngSource+0x298>)
   1514c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   15150:	f7ff fb30 	bl	147b4 <CC_HalMaskInterrupt>
   15154:	210a      	movs	r1, #10
   15156:	2201      	movs	r2, #1
   15158:	4b55      	ldr	r3, [pc, #340]	; (152b0 <getTrngSource+0x290>)
   1515a:	4860      	ldr	r0, [pc, #384]	; (152dc <getTrngSource+0x2bc>)
   1515c:	6019      	str	r1, [r3, #0]
   1515e:	6921      	ldr	r1, [r4, #16]
   15160:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15162:	fba7 c101 	umull	ip, r1, r7, r1
   15166:	0909      	lsrs	r1, r1, #4
   15168:	fb03 f301 	mul.w	r3, r3, r1
   1516c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   15170:	03db      	lsls	r3, r3, #15
   15172:	099b      	lsrs	r3, r3, #6
   15174:	6003      	str	r3, [r0, #0]
   15176:	4b54      	ldr	r3, [pc, #336]	; (152c8 <getTrngSource+0x2a8>)
   15178:	a805      	add	r0, sp, #20
   1517a:	601a      	str	r2, [r3, #0]
   1517c:	9904      	ldr	r1, [sp, #16]
   1517e:	f8d8 2000 	ldr.w	r2, [r8]
   15182:	020b      	lsls	r3, r1, #8
   15184:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   15188:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1518c:	4313      	orrs	r3, r2
   1518e:	f8c8 3000 	str.w	r3, [r8]
   15192:	f000 f907 	bl	153a4 <LLF_RND_WaitRngInterrupt>
   15196:	2800      	cmp	r0, #0
   15198:	d18d      	bne.n	150b6 <getTrngSource+0x96>
   1519a:	4b51      	ldr	r3, [pc, #324]	; (152e0 <getTrngSource+0x2c0>)
   1519c:	fba7 2705 	umull	r2, r7, r7, r5
   151a0:	681a      	ldr	r2, [r3, #0]
   151a2:	3314      	adds	r3, #20
   151a4:	9206      	str	r2, [sp, #24]
   151a6:	f853 2c10 	ldr.w	r2, [r3, #-16]
   151aa:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   151ae:	9207      	str	r2, [sp, #28]
   151b0:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   151b4:	9208      	str	r2, [sp, #32]
   151b6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   151ba:	9209      	str	r2, [sp, #36]	; 0x24
   151bc:	f853 2c04 	ldr.w	r2, [r3, #-4]
   151c0:	920a      	str	r2, [sp, #40]	; 0x28
   151c2:	681b      	ldr	r3, [r3, #0]
   151c4:	930b      	str	r3, [sp, #44]	; 0x2c
   151c6:	d102      	bne.n	151ce <getTrngSource+0x1ae>
   151c8:	f1ba 0f00 	cmp.w	sl, #0
   151cc:	d141      	bne.n	15252 <getTrngSource+0x232>
   151ce:	2218      	movs	r2, #24
   151d0:	4630      	mov	r0, r6
   151d2:	eb0d 0102 	add.w	r1, sp, r2
   151d6:	f7ff fa03 	bl	145e0 <CC_PalMemCopyPlat>
   151da:	3d18      	subs	r5, #24
   151dc:	3618      	adds	r6, #24
   151de:	f109 0901 	add.w	r9, r9, #1
   151e2:	2d00      	cmp	r5, #0
   151e4:	f47f af53 	bne.w	1508e <getTrngSource+0x6e>
   151e8:	f5bb 7f04 	cmp.w	fp, #528	; 0x210
   151ec:	d85d      	bhi.n	152aa <getTrngSource+0x28a>
   151ee:	9d03      	ldr	r5, [sp, #12]
   151f0:	4659      	mov	r1, fp
   151f2:	4628      	mov	r0, r5
   151f4:	6962      	ldr	r2, [r4, #20]
   151f6:	f7ff fe81 	bl	14efc <LLF_RND_RepetitionCounterTest.part.0>
   151fa:	2800      	cmp	r0, #0
   151fc:	d04b      	beq.n	15296 <getTrngSource+0x276>
   151fe:	2300      	movs	r3, #0
   15200:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15202:	6013      	str	r3, [r2, #0]
   15204:	4b2d      	ldr	r3, [pc, #180]	; (152bc <getTrngSource+0x29c>)
   15206:	4298      	cmp	r0, r3
   15208:	f43f af59 	beq.w	150be <getTrngSource+0x9e>
   1520c:	9d04      	ldr	r5, [sp, #16]
   1520e:	2d08      	cmp	r5, #8
   15210:	d034      	beq.n	1527c <getTrngSource+0x25c>
   15212:	2200      	movs	r2, #0
   15214:	ab04      	add	r3, sp, #16
   15216:	4621      	mov	r1, r4
   15218:	4640      	mov	r0, r8
   1521a:	006d      	lsls	r5, r5, #1
   1521c:	9200      	str	r2, [sp, #0]
   1521e:	9504      	str	r5, [sp, #16]
   15220:	f7ff fdc2 	bl	14da8 <startTrngHW>
   15224:	4b2f      	ldr	r3, [pc, #188]	; (152e4 <getTrngSource+0x2c4>)
   15226:	4298      	cmp	r0, r3
   15228:	d024      	beq.n	15274 <getTrngSource+0x254>
   1522a:	2800      	cmp	r0, #0
   1522c:	f47f af47 	bne.w	150be <getTrngSource+0x9e>
   15230:	f8d8 2000 	ldr.w	r2, [r8]
   15234:	0a13      	lsrs	r3, r2, #8
   15236:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   1523a:	4313      	orrs	r3, r2
   1523c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   15240:	f8c8 3000 	str.w	r3, [r8]
   15244:	9b02      	ldr	r3, [sp, #8]
   15246:	3b01      	subs	r3, #1
   15248:	9302      	str	r3, [sp, #8]
   1524a:	f47f af15 	bne.w	15078 <getTrngSource+0x58>
   1524e:	2000      	movs	r0, #0
   15250:	e735      	b.n	150be <getTrngSource+0x9e>
   15252:	4630      	mov	r0, r6
   15254:	4652      	mov	r2, sl
   15256:	a906      	add	r1, sp, #24
   15258:	f7ff f9c2 	bl	145e0 <CC_PalMemCopyPlat>
   1525c:	eba5 050a 	sub.w	r5, r5, sl
   15260:	4456      	add	r6, sl
   15262:	e7bc      	b.n	151de <getTrngSource+0x1be>
   15264:	481f      	ldr	r0, [pc, #124]	; (152e4 <getTrngSource+0x2c4>)
   15266:	e726      	b.n	150b6 <getTrngSource+0x96>
   15268:	481f      	ldr	r0, [pc, #124]	; (152e8 <getTrngSource+0x2c8>)
   1526a:	e724      	b.n	150b6 <getTrngSource+0x96>
   1526c:	2703      	movs	r7, #3
   1526e:	e74c      	b.n	1510a <getTrngSource+0xea>
   15270:	2702      	movs	r7, #2
   15272:	e74a      	b.n	1510a <getTrngSource+0xea>
   15274:	6a23      	ldr	r3, [r4, #32]
   15276:	2b00      	cmp	r3, #0
   15278:	f43f af21 	beq.w	150be <getTrngSource+0x9e>
   1527c:	481b      	ldr	r0, [pc, #108]	; (152ec <getTrngSource+0x2cc>)
   1527e:	e71e      	b.n	150be <getTrngSource+0x9e>
   15280:	2201      	movs	r2, #1
   15282:	4621      	mov	r1, r4
   15284:	4638      	mov	r0, r7
   15286:	9600      	str	r6, [sp, #0]
   15288:	ab04      	add	r3, sp, #16
   1528a:	f7ff fd8d 	bl	14da8 <startTrngHW>
   1528e:	2800      	cmp	r0, #0
   15290:	f43f aee3 	beq.w	1505a <getTrngSource+0x3a>
   15294:	e713      	b.n	150be <getTrngSource+0x9e>
   15296:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1529a:	4659      	mov	r1, fp
   1529c:	4628      	mov	r0, r5
   1529e:	69a2      	ldr	r2, [r4, #24]
   152a0:	f7ff fe58 	bl	14f54 <LLF_RND_AdaptiveProportionTest>
   152a4:	2800      	cmp	r0, #0
   152a6:	d1aa      	bne.n	151fe <getTrngSource+0x1de>
   152a8:	e7d1      	b.n	1524e <getTrngSource+0x22e>
   152aa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   152ac:	601d      	str	r5, [r3, #0]
   152ae:	e7ad      	b.n	1520c <getTrngSource+0x1ec>
   152b0:	50841138 	.word	0x50841138
   152b4:	50841130 	.word	0x50841130
   152b8:	aaaaaaab 	.word	0xaaaaaaab
   152bc:	00f10c02 	.word	0x00f10c02
   152c0:	00f10c30 	.word	0x00f10c30
   152c4:	508411c4 	.word	0x508411c4
   152c8:	5084112c 	.word	0x5084112c
   152cc:	0ffffffe 	.word	0x0ffffffe
   152d0:	50841100 	.word	0x50841100
   152d4:	5084110c 	.word	0x5084110c
   152d8:	50841a04 	.word	0x50841a04
   152dc:	508411d8 	.word	0x508411d8
   152e0:	50841114 	.word	0x50841114
   152e4:	00f10c31 	.word	0x00f10c31
   152e8:	00f10c35 	.word	0x00f10c35
   152ec:	00f10c32 	.word	0x00f10c32

000152f0 <LLF_RND_GetTrngSource>:
   152f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152f4:	4e1f      	ldr	r6, [pc, #124]	; (15374 <LLF_RND_GetTrngSource+0x84>)
   152f6:	b084      	sub	sp, #16
   152f8:	4604      	mov	r4, r0
   152fa:	460d      	mov	r5, r1
   152fc:	6830      	ldr	r0, [r6, #0]
   152fe:	f04f 31ff 	mov.w	r1, #4294967295
   15302:	4690      	mov	r8, r2
   15304:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   15306:	f7ff f9d1 	bl	146ac <CC_PalMutexLock>
   1530a:	b9d8      	cbnz	r0, 15344 <LLF_RND_GetTrngSource+0x54>
   1530c:	2000      	movs	r0, #0
   1530e:	f7ff f9fd 	bl	1470c <CC_PalPowerSaveModeSelect>
   15312:	b9f8      	cbnz	r0, 15354 <LLF_RND_GetTrngSource+0x64>
   15314:	2300      	movs	r3, #0
   15316:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15318:	4620      	mov	r0, r4
   1531a:	9200      	str	r2, [sp, #0]
   1531c:	9302      	str	r3, [sp, #8]
   1531e:	4642      	mov	r2, r8
   15320:	4629      	mov	r1, r5
   15322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15324:	9701      	str	r7, [sp, #4]
   15326:	f7ff fe7b 	bl	15020 <getTrngSource>
   1532a:	4604      	mov	r4, r0
   1532c:	2001      	movs	r0, #1
   1532e:	f7ff f9ed 	bl	1470c <CC_PalPowerSaveModeSelect>
   15332:	b9d0      	cbnz	r0, 1536a <LLF_RND_GetTrngSource+0x7a>
   15334:	6830      	ldr	r0, [r6, #0]
   15336:	f7ff f9c1 	bl	146bc <CC_PalMutexUnlock>
   1533a:	b978      	cbnz	r0, 1535c <LLF_RND_GetTrngSource+0x6c>
   1533c:	4620      	mov	r0, r4
   1533e:	b004      	add	sp, #16
   15340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15344:	480c      	ldr	r0, [pc, #48]	; (15378 <LLF_RND_GetTrngSource+0x88>)
   15346:	f7ff fb49 	bl	149dc <CC_PalAbort>
   1534a:	2000      	movs	r0, #0
   1534c:	f7ff f9de 	bl	1470c <CC_PalPowerSaveModeSelect>
   15350:	2800      	cmp	r0, #0
   15352:	d0df      	beq.n	15314 <LLF_RND_GetTrngSource+0x24>
   15354:	4809      	ldr	r0, [pc, #36]	; (1537c <LLF_RND_GetTrngSource+0x8c>)
   15356:	f7ff fb41 	bl	149dc <CC_PalAbort>
   1535a:	e7db      	b.n	15314 <LLF_RND_GetTrngSource+0x24>
   1535c:	4808      	ldr	r0, [pc, #32]	; (15380 <LLF_RND_GetTrngSource+0x90>)
   1535e:	f7ff fb3d 	bl	149dc <CC_PalAbort>
   15362:	4620      	mov	r0, r4
   15364:	b004      	add	sp, #16
   15366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1536a:	4806      	ldr	r0, [pc, #24]	; (15384 <LLF_RND_GetTrngSource+0x94>)
   1536c:	f7ff fb36 	bl	149dc <CC_PalAbort>
   15370:	e7e0      	b.n	15334 <LLF_RND_GetTrngSource+0x44>
   15372:	bf00      	nop
   15374:	2000006c 	.word	0x2000006c
   15378:	000165f0 	.word	0x000165f0
   1537c:	00016620 	.word	0x00016620
   15380:	00016608 	.word	0x00016608
   15384:	00016640 	.word	0x00016640

00015388 <LLF_RND_RunTrngStartupTest>:
   15388:	b510      	push	{r4, lr}
   1538a:	2401      	movs	r4, #1
   1538c:	b086      	sub	sp, #24
   1538e:	ab05      	add	r3, sp, #20
   15390:	e9cd 2401 	strd	r2, r4, [sp, #4]
   15394:	9300      	str	r3, [sp, #0]
   15396:	2200      	movs	r2, #0
   15398:	ab04      	add	r3, sp, #16
   1539a:	f7ff fe41 	bl	15020 <getTrngSource>
   1539e:	b006      	add	sp, #24
   153a0:	bd10      	pop	{r4, pc}
   153a2:	bf00      	nop

000153a4 <LLF_RND_WaitRngInterrupt>:
   153a4:	4601      	mov	r1, r0
   153a6:	b508      	push	{r3, lr}
   153a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   153ac:	f7ff fa08 	bl	147c0 <CC_HalWaitInterruptRND>
   153b0:	2300      	movs	r3, #0
   153b2:	4902      	ldr	r1, [pc, #8]	; (153bc <LLF_RND_WaitRngInterrupt+0x18>)
   153b4:	4a02      	ldr	r2, [pc, #8]	; (153c0 <LLF_RND_WaitRngInterrupt+0x1c>)
   153b6:	600b      	str	r3, [r1, #0]
   153b8:	6013      	str	r3, [r2, #0]
   153ba:	bd08      	pop	{r3, pc}
   153bc:	508411c8 	.word	0x508411c8
   153c0:	5084112c 	.word	0x5084112c

000153c4 <LLF_RND_GetRoscSampleCnt>:
   153c4:	3801      	subs	r0, #1
   153c6:	2807      	cmp	r0, #7
   153c8:	d805      	bhi.n	153d6 <LLF_RND_GetRoscSampleCnt+0x12>
   153ca:	e8df f000 	tbb	[pc, r0]
   153ce:	0e0a      	.short	0x0e0a
   153d0:	04041204 	.word	0x04041204
   153d4:	0604      	.short	0x0604
   153d6:	4809      	ldr	r0, [pc, #36]	; (153fc <LLF_RND_GetRoscSampleCnt+0x38>)
   153d8:	4770      	bx	lr
   153da:	68cb      	ldr	r3, [r1, #12]
   153dc:	2000      	movs	r0, #0
   153de:	624b      	str	r3, [r1, #36]	; 0x24
   153e0:	4770      	bx	lr
   153e2:	680b      	ldr	r3, [r1, #0]
   153e4:	2000      	movs	r0, #0
   153e6:	624b      	str	r3, [r1, #36]	; 0x24
   153e8:	4770      	bx	lr
   153ea:	684b      	ldr	r3, [r1, #4]
   153ec:	2000      	movs	r0, #0
   153ee:	624b      	str	r3, [r1, #36]	; 0x24
   153f0:	4770      	bx	lr
   153f2:	688b      	ldr	r3, [r1, #8]
   153f4:	2000      	movs	r0, #0
   153f6:	624b      	str	r3, [r1, #36]	; 0x24
   153f8:	4770      	bx	lr
   153fa:	bf00      	nop
   153fc:	00f10c31 	.word	0x00f10c31

00015400 <LLF_RND_GetFastestRosc>:
   15400:	680b      	ldr	r3, [r1, #0]
   15402:	e002      	b.n	1540a <LLF_RND_GetFastestRosc+0xa>
   15404:	2b08      	cmp	r3, #8
   15406:	600b      	str	r3, [r1, #0]
   15408:	d806      	bhi.n	15418 <LLF_RND_GetFastestRosc+0x18>
   1540a:	6a02      	ldr	r2, [r0, #32]
   1540c:	4213      	tst	r3, r2
   1540e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   15412:	d0f7      	beq.n	15404 <LLF_RND_GetFastestRosc+0x4>
   15414:	2000      	movs	r0, #0
   15416:	4770      	bx	lr
   15418:	4800      	ldr	r0, [pc, #0]	; (1541c <LLF_RND_GetFastestRosc+0x1c>)
   1541a:	4770      	bx	lr
   1541c:	00f10c31 	.word	0x00f10c31

00015420 <LLF_RND_TurnOffTrng>:
   15420:	2300      	movs	r3, #0
   15422:	4904      	ldr	r1, [pc, #16]	; (15434 <LLF_RND_TurnOffTrng+0x14>)
   15424:	4a04      	ldr	r2, [pc, #16]	; (15438 <LLF_RND_TurnOffTrng+0x18>)
   15426:	600b      	str	r3, [r1, #0]
   15428:	f44f 6080 	mov.w	r0, #1024	; 0x400
   1542c:	6013      	str	r3, [r2, #0]
   1542e:	f7ff b9b3 	b.w	14798 <CC_HalClearInterruptBit>
   15432:	bf00      	nop
   15434:	5084112c 	.word	0x5084112c
   15438:	508411c4 	.word	0x508411c4

0001543c <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
   1543c:	b508      	push	{r3, lr}
	spm_config();
   1543e:	f7fc fd39 	bl	11eb4 <spm_config>
	spm_jump();
}
   15442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
   15446:	f7fc bcc9 	b.w	11ddc <spm_jump>

0001544a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1544a:	b160      	cbz	r0, 15466 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1544c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1544e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   15452:	2b01      	cmp	r3, #1
   15454:	d003      	beq.n	1545e <sys_notify_validate+0x14>
   15456:	2b03      	cmp	r3, #3
   15458:	d105      	bne.n	15466 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1545a:	6803      	ldr	r3, [r0, #0]
   1545c:	b11b      	cbz	r3, 15466 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1545e:	2300      	movs	r3, #0
   15460:	6083      	str	r3, [r0, #8]
   15462:	4618      	mov	r0, r3
   15464:	4770      	bx	lr
		return -EINVAL;
   15466:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1546a:	4770      	bx	lr

0001546c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1546c:	2200      	movs	r2, #0
   1546e:	6843      	ldr	r3, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   15470:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   15472:	f003 0303 	and.w	r3, r3, #3
	switch (method) {
   15476:	2b03      	cmp	r3, #3
	sys_notify_generic_callback rv = 0;
   15478:	bf14      	ite	ne
   1547a:	4613      	movne	r3, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1547c:	6803      	ldreq	r3, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1547e:	6042      	str	r2, [r0, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   15480:	4618      	mov	r0, r3
   15482:	4770      	bx	lr

00015484 <arch_printk_char_out>:
}
   15484:	2000      	movs	r0, #0
   15486:	4770      	bx	lr

00015488 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
   15488:	b40f      	push	{r0, r1, r2, r3}
   1548a:	b507      	push	{r0, r1, r2, lr}
   1548c:	a904      	add	r1, sp, #16
   1548e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   15492:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
   15494:	f7fb f988 	bl	107a8 <vprintk>
	}
	va_end(ap);
}
   15498:	b003      	add	sp, #12
   1549a:	f85d eb04 	ldr.w	lr, [sp], #4
   1549e:	b004      	add	sp, #16
   154a0:	4770      	bx	lr

000154a2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   154a2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   154a4:	f013 0307 	ands.w	r3, r3, #7
   154a8:	d105      	bne.n	154b6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   154aa:	6803      	ldr	r3, [r0, #0]
   154ac:	2b00      	cmp	r3, #0
		evt = EVT_START;
   154ae:	bf0c      	ite	eq
   154b0:	2000      	moveq	r0, #0
   154b2:	2003      	movne	r0, #3
   154b4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   154b6:	2b02      	cmp	r3, #2
   154b8:	d105      	bne.n	154c6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   154ba:	8b43      	ldrh	r3, [r0, #26]
   154bc:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   154be:	bf14      	ite	ne
   154c0:	2000      	movne	r0, #0
   154c2:	2004      	moveq	r0, #4
   154c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   154c6:	2b01      	cmp	r3, #1
   154c8:	d105      	bne.n	154d6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   154ca:	6803      	ldr	r3, [r0, #0]
   154cc:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   154ce:	bf0c      	ite	eq
   154d0:	2000      	moveq	r0, #0
   154d2:	2005      	movne	r0, #5
   154d4:	4770      	bx	lr
	int evt = EVT_NOP;
   154d6:	2000      	movs	r0, #0
}
   154d8:	4770      	bx	lr

000154da <notify_one>:
{
   154da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   154dc:	460d      	mov	r5, r1
   154de:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   154e0:	4619      	mov	r1, r3
   154e2:	1d28      	adds	r0, r5, #4
{
   154e4:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   154e6:	9300      	str	r3, [sp, #0]
   154e8:	f7ff ffc0 	bl	1546c <sys_notify_finalize>
	if (cb) {
   154ec:	4604      	mov	r4, r0
   154ee:	b140      	cbz	r0, 15502 <notify_one+0x28>
		cb(mgr, cli, state, res);
   154f0:	e9dd 3200 	ldrd	r3, r2, [sp]
   154f4:	4629      	mov	r1, r5
   154f6:	4630      	mov	r0, r6
   154f8:	46a4      	mov	ip, r4
}
   154fa:	b002      	add	sp, #8
   154fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   15500:	4760      	bx	ip
}
   15502:	b002      	add	sp, #8
   15504:	bd70      	pop	{r4, r5, r6, pc}

00015506 <transition_complete>:
{
   15506:	b410      	push	{r4}
	__asm__ volatile(
   15508:	f04f 0420 	mov.w	r4, #32
   1550c:	f3ef 8211 	mrs	r2, BASEPRI
   15510:	f384 8811 	msr	BASEPRI, r4
   15514:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   15518:	6141      	str	r1, [r0, #20]
}
   1551a:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
   1551e:	2101      	movs	r1, #1
   15520:	f7fb b950 	b.w	107c4 <process_event>

00015524 <validate_args>:
{
   15524:	b510      	push	{r4, lr}
   15526:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   15528:	b140      	cbz	r0, 1553c <validate_args+0x18>
   1552a:	b139      	cbz	r1, 1553c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1552c:	1d08      	adds	r0, r1, #4
   1552e:	f7ff ff8c 	bl	1544a <sys_notify_validate>
	if ((rv == 0)
   15532:	b928      	cbnz	r0, 15540 <validate_args+0x1c>
	    && ((cli->notify.flags
   15534:	68a3      	ldr	r3, [r4, #8]
   15536:	f033 0303 	bics.w	r3, r3, #3
   1553a:	d001      	beq.n	15540 <validate_args+0x1c>
		rv = -EINVAL;
   1553c:	f06f 0015 	mvn.w	r0, #21
}
   15540:	bd10      	pop	{r4, pc}

00015542 <onoff_manager_init>:
{
   15542:	b538      	push	{r3, r4, r5, lr}
   15544:	460c      	mov	r4, r1
	if ((mgr == NULL)
   15546:	4605      	mov	r5, r0
   15548:	b158      	cbz	r0, 15562 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1554a:	b151      	cbz	r1, 15562 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1554c:	680b      	ldr	r3, [r1, #0]
   1554e:	b143      	cbz	r3, 15562 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   15550:	684b      	ldr	r3, [r1, #4]
   15552:	b133      	cbz	r3, 15562 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   15554:	221c      	movs	r2, #28
   15556:	2100      	movs	r1, #0
   15558:	f000 fbf3 	bl	15d42 <memset>
	return 0;
   1555c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1555e:	612c      	str	r4, [r5, #16]
}
   15560:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15562:	f06f 0015 	mvn.w	r0, #21
   15566:	e7fb      	b.n	15560 <onoff_manager_init+0x1e>

00015568 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   15568:	b570      	push	{r4, r5, r6, lr}
   1556a:	4604      	mov	r4, r0
   1556c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1556e:	f7ff ffd9 	bl	15524 <validate_args>

	if (rv < 0) {
   15572:	1e05      	subs	r5, r0, #0
   15574:	db31      	blt.n	155da <onoff_request+0x72>
   15576:	f04f 0320 	mov.w	r3, #32
   1557a:	f3ef 8111 	mrs	r1, BASEPRI
   1557e:	f383 8811 	msr	BASEPRI, r3
   15582:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   15586:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1558a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1558c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1558e:	42ab      	cmp	r3, r5
   15590:	f000 0207 	and.w	r2, r0, #7
   15594:	d02e      	beq.n	155f4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   15596:	2a02      	cmp	r2, #2
   15598:	d10e      	bne.n	155b8 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1559a:	3301      	adds	r3, #1
   1559c:	8363      	strh	r3, [r4, #26]
	rv = state;
   1559e:	4615      	mov	r5, r2
		notify = true;
   155a0:	2301      	movs	r3, #1
	__asm__ volatile(
   155a2:	f381 8811 	msr	BASEPRI, r1
   155a6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   155aa:	b1b3      	cbz	r3, 155da <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   155ac:	2300      	movs	r3, #0
   155ae:	4631      	mov	r1, r6
   155b0:	4620      	mov	r0, r4
   155b2:	f7ff ff92 	bl	154da <notify_one>
   155b6:	e010      	b.n	155da <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   155b8:	0783      	lsls	r3, r0, #30
   155ba:	d001      	beq.n	155c0 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   155bc:	2a06      	cmp	r2, #6
   155be:	d10e      	bne.n	155de <onoff_request+0x76>
	parent->next = child;
   155c0:	2300      	movs	r3, #0
   155c2:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   155c4:	6863      	ldr	r3, [r4, #4]
   155c6:	b993      	cbnz	r3, 155ee <onoff_request+0x86>
	list->head = node;
   155c8:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   155cc:	4615      	mov	r5, r2
   155ce:	b962      	cbnz	r2, 155ea <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   155d0:	460a      	mov	r2, r1
   155d2:	4620      	mov	r0, r4
   155d4:	2102      	movs	r1, #2
   155d6:	f7fb f8f5 	bl	107c4 <process_event>
		}
	}

	return rv;
}
   155da:	4628      	mov	r0, r5
   155dc:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   155de:	2a05      	cmp	r2, #5
   155e0:	bf0c      	ite	eq
   155e2:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   155e6:	f06f 0504 	mvnne.w	r5, #4
   155ea:	2300      	movs	r3, #0
   155ec:	e7d9      	b.n	155a2 <onoff_request+0x3a>
	parent->next = child;
   155ee:	601e      	str	r6, [r3, #0]
	list->tail = node;
   155f0:	6066      	str	r6, [r4, #4]
}
   155f2:	e7eb      	b.n	155cc <onoff_request+0x64>
		rv = -EAGAIN;
   155f4:	f06f 050a 	mvn.w	r5, #10
   155f8:	e7f7      	b.n	155ea <onoff_request+0x82>

000155fa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   155fa:	4604      	mov	r4, r0
   155fc:	b508      	push	{r3, lr}
   155fe:	4608      	mov	r0, r1
   15600:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   15602:	461a      	mov	r2, r3
   15604:	47a0      	blx	r4
	return z_impl_k_current_get();
   15606:	f7fe fd5f 	bl	140c8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1560a:	f7fd f983 	bl	12914 <z_impl_k_thread_abort>

0001560e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1560e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   15610:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   15614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   15618:	bf2c      	ite	cs
   1561a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1561e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   15622:	4770      	bx	lr

00015624 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   15624:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   15628:	6880      	ldr	r0, [r0, #8]
   1562a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1562e:	bf2c      	ite	cs
   15630:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   15634:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   15638:	4770      	bx	lr

0001563a <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1563a:	2201      	movs	r2, #1
{
   1563c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1563e:	f7ff ffe6 	bl	1560e <chunk_field>
}
   15642:	0840      	lsrs	r0, r0, #1
   15644:	bd08      	pop	{r3, pc}

00015646 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   15646:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   15648:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1564c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15650:	d308      	bcc.n	15664 <set_chunk_used+0x1e>
		if (used) {
   15652:	684b      	ldr	r3, [r1, #4]
   15654:	b11a      	cbz	r2, 1565e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   15656:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1565a:	604b      	str	r3, [r1, #4]
   1565c:	4770      	bx	lr
   1565e:	f023 0301 	bic.w	r3, r3, #1
   15662:	e7fa      	b.n	1565a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   15664:	884b      	ldrh	r3, [r1, #2]
   15666:	b11a      	cbz	r2, 15670 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   15668:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1566c:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1566e:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   15670:	f023 0301 	bic.w	r3, r3, #1
   15674:	e7fa      	b.n	1566c <set_chunk_used+0x26>

00015676 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   15676:	0053      	lsls	r3, r2, #1
   15678:	2201      	movs	r2, #1
   1567a:	f7ff bfd3 	b.w	15624 <chunk_set>

0001567e <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1567e:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   15680:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   15682:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   15686:	bf2c      	ite	cs
   15688:	2002      	movcs	r0, #2
   1568a:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1568c:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1568e:	fab0 f080 	clz	r0, r0
}
   15692:	f1c0 001f 	rsb	r0, r0, #31
   15696:	4770      	bx	lr

00015698 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   15698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1569c:	4604      	mov	r4, r0
   1569e:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   156a0:	f7ff ffcb 	bl	1563a <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   156a4:	68a3      	ldr	r3, [r4, #8]
   156a6:	4601      	mov	r1, r0
   156a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   156ac:	d301      	bcc.n	156b2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   156ae:	2801      	cmp	r0, #1
   156b0:	d035      	beq.n	1571e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   156b2:	4620      	mov	r0, r4
   156b4:	f7ff ffe3 	bl	1567e <bucket_idx>
	if (b->next == 0U) {
   156b8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   156bc:	6916      	ldr	r6, [r2, #16]
   156be:	b99e      	cbnz	r6, 156e8 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   156c0:	2301      	movs	r3, #1
   156c2:	fa03 f000 	lsl.w	r0, r3, r0
   156c6:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   156c8:	4629      	mov	r1, r5
   156ca:	4303      	orrs	r3, r0
   156cc:	60e3      	str	r3, [r4, #12]
   156ce:	4620      	mov	r0, r4
		b->next = c;
   156d0:	6115      	str	r5, [r2, #16]
   156d2:	462b      	mov	r3, r5
   156d4:	2202      	movs	r2, #2
   156d6:	f7ff ffa5 	bl	15624 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   156da:	2203      	movs	r2, #3
   156dc:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   156de:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
   156e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   156e4:	f7ff bf9e 	b.w	15624 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   156e8:	2202      	movs	r2, #2
   156ea:	4631      	mov	r1, r6
   156ec:	4620      	mov	r0, r4
   156ee:	f7ff ff8e 	bl	1560e <chunk_field>
   156f2:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   156f4:	4603      	mov	r3, r0
   156f6:	2202      	movs	r2, #2
   156f8:	4629      	mov	r1, r5
   156fa:	4620      	mov	r0, r4
   156fc:	f7ff ff92 	bl	15624 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   15700:	4633      	mov	r3, r6
   15702:	2203      	movs	r2, #3
   15704:	4629      	mov	r1, r5
   15706:	4620      	mov	r0, r4
   15708:	f7ff ff8c 	bl	15624 <chunk_set>
   1570c:	2203      	movs	r2, #3
   1570e:	4639      	mov	r1, r7
   15710:	462b      	mov	r3, r5
   15712:	4620      	mov	r0, r4
   15714:	f7ff ff86 	bl	15624 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   15718:	2202      	movs	r2, #2
   1571a:	4631      	mov	r1, r6
   1571c:	e7df      	b.n	156de <free_list_add+0x46>
   1571e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015722 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   15722:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   15726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15728:	bf2c      	ite	cs
   1572a:	2508      	movcs	r5, #8
   1572c:	2504      	movcc	r5, #4
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1572e:	2300      	movs	r3, #0
	bytes -= heap_footer_bytes(bytes);
   15730:	1b55      	subs	r5, r2, r5
	h->chunk0_hdr_area = 0;
   15732:	2200      	movs	r2, #0
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   15734:	1dcc      	adds	r4, r1, #7
   15736:	f024 0407 	bic.w	r4, r4, #7
	heap->heap = h;
   1573a:	6004      	str	r4, [r0, #0]
	h->chunk0_hdr_area = 0;
   1573c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   15740:	2300      	movs	r3, #0
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   15742:	440d      	add	r5, r1
   15744:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   15748:	1b2d      	subs	r5, r5, r4
   1574a:	08ed      	lsrs	r5, r5, #3

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1574c:	4629      	mov	r1, r5
   1574e:	4620      	mov	r0, r4
	h->len = buf_sz;
   15750:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   15752:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   15754:	f7ff ff93 	bl	1567e <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   15758:	0086      	lsls	r6, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1575a:	1c41      	adds	r1, r0, #1
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   1575c:	4618      	mov	r0, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1575e:	361b      	adds	r6, #27
   15760:	08f6      	lsrs	r6, r6, #3
	for (int i = 0; i < nb_buckets; i++) {
   15762:	f104 0210 	add.w	r2, r4, #16
   15766:	428b      	cmp	r3, r1
   15768:	db29      	blt.n	157be <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1576a:	4632      	mov	r2, r6
   1576c:	4620      	mov	r0, r4
   1576e:	2100      	movs	r1, #0
   15770:	f7ff ff81 	bl	15676 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   15774:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   15776:	4620      	mov	r0, r4
   15778:	2201      	movs	r2, #1
   1577a:	2100      	movs	r1, #0
   1577c:	f7ff ff63 	bl	15646 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   15780:	463a      	mov	r2, r7
   15782:	4631      	mov	r1, r6
   15784:	f7ff ff77 	bl	15676 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   15788:	4633      	mov	r3, r6
   1578a:	4631      	mov	r1, r6
   1578c:	4620      	mov	r0, r4
   1578e:	2200      	movs	r2, #0
   15790:	f7ff ff48 	bl	15624 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   15794:	4629      	mov	r1, r5
   15796:	4620      	mov	r0, r4
   15798:	2200      	movs	r2, #0
   1579a:	f7ff ff6c 	bl	15676 <set_chunk_size>
   1579e:	463b      	mov	r3, r7
   157a0:	4629      	mov	r1, r5
   157a2:	4620      	mov	r0, r4
   157a4:	2200      	movs	r2, #0
   157a6:	f7ff ff3d 	bl	15624 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   157aa:	4629      	mov	r1, r5
   157ac:	4620      	mov	r0, r4
   157ae:	2201      	movs	r2, #1
   157b0:	f7ff ff49 	bl	15646 <set_chunk_used>

	free_list_add(h, chunk0_size);
   157b4:	4631      	mov	r1, r6
}
   157b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   157ba:	f7ff bf6d 	b.w	15698 <free_list_add>
		h->buckets[i].next = 0;
   157be:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   157c2:	3301      	adds	r3, #1
   157c4:	e7cf      	b.n	15766 <sys_heap_init+0x44>

000157c6 <_ldiv5>:
{
   157c6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   157ca:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   157ce:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   157d2:	fba2 bc03 	umull	fp, ip, r2, r3
   157d6:	eb1b 0603 	adds.w	r6, fp, r3
   157da:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   157de:	462f      	mov	r7, r5
   157e0:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   157e2:	fba4 4503 	umull	r4, r5, r4, r3
   157e6:	eb1b 0204 	adds.w	r2, fp, r4
   157ea:	eb4c 0105 	adc.w	r1, ip, r5
   157ee:	19d2      	adds	r2, r2, r7
	result >>= 32;
   157f0:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   157f2:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   157f6:	1863      	adds	r3, r4, r1
   157f8:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   157fc:	e9c0 3200 	strd	r3, r2, [r0]
}
   15800:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

00015804 <_get_digit>:
	if (*digit_count > 0) {
   15804:	680b      	ldr	r3, [r1, #0]
{
   15806:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   15808:	2b00      	cmp	r3, #0
   1580a:	dd10      	ble.n	1582e <_get_digit+0x2a>
		--*digit_count;
   1580c:	3b01      	subs	r3, #1
   1580e:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   15810:	210a      	movs	r1, #10
   15812:	6802      	ldr	r2, [r0, #0]
   15814:	6844      	ldr	r4, [r0, #4]
   15816:	fba2 5601 	umull	r5, r6, r2, r1
   1581a:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   1581e:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   15822:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   15826:	0f31      	lsrs	r1, r6, #28
   15828:	3130      	adds	r1, #48	; 0x30
}
   1582a:	4608      	mov	r0, r1
   1582c:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1582e:	2130      	movs	r1, #48	; 0x30
   15830:	e7fb      	b.n	1582a <_get_digit+0x26>

00015832 <encode_uint>:
{
   15832:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15836:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   15838:	78d3      	ldrb	r3, [r2, #3]
{
   1583a:	4614      	mov	r4, r2
	switch (specifier) {
   1583c:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1583e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
   15842:	4606      	mov	r6, r0
   15844:	460f      	mov	r7, r1
   15846:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   15848:	d02d      	beq.n	158a6 <encode_uint+0x74>
   1584a:	d828      	bhi.n	1589e <encode_uint+0x6c>
		return 16;
   1584c:	2b58      	cmp	r3, #88	; 0x58
   1584e:	bf14      	ite	ne
   15850:	250a      	movne	r5, #10
   15852:	2510      	moveq	r5, #16
		unsigned int lsv = (unsigned int)(value % radix);
   15854:	46aa      	mov	sl, r5
   15856:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   1585a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   1585e:	4652      	mov	r2, sl
   15860:	465b      	mov	r3, fp
   15862:	4630      	mov	r0, r6
   15864:	4639      	mov	r1, r7
   15866:	f7fa fde9 	bl	1043c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1586a:	2a09      	cmp	r2, #9
   1586c:	b2d3      	uxtb	r3, r2
   1586e:	d81f      	bhi.n	158b0 <encode_uint+0x7e>
   15870:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   15872:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   15874:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   15876:	bf08      	it	eq
   15878:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1587a:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   1587e:	d301      	bcc.n	15884 <encode_uint+0x52>
   15880:	45c8      	cmp	r8, r9
   15882:	d812      	bhi.n	158aa <encode_uint+0x78>
	if (conv->flag_hash) {
   15884:	7823      	ldrb	r3, [r4, #0]
   15886:	069b      	lsls	r3, r3, #26
   15888:	d505      	bpl.n	15896 <encode_uint+0x64>
		if (radix == 8) {
   1588a:	2d08      	cmp	r5, #8
   1588c:	d116      	bne.n	158bc <encode_uint+0x8a>
			conv->altform_0 = true;
   1588e:	78a3      	ldrb	r3, [r4, #2]
   15890:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   15894:	70a3      	strb	r3, [r4, #2]
}
   15896:	4640      	mov	r0, r8
   15898:	b003      	add	sp, #12
   1589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1589e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   158a2:	2b70      	cmp	r3, #112	; 0x70
   158a4:	e7d3      	b.n	1584e <encode_uint+0x1c>
	switch (specifier) {
   158a6:	2508      	movs	r5, #8
   158a8:	e7d4      	b.n	15854 <encode_uint+0x22>
		value /= radix;
   158aa:	4606      	mov	r6, r0
   158ac:	460f      	mov	r7, r1
   158ae:	e7d6      	b.n	1585e <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   158b0:	9a01      	ldr	r2, [sp, #4]
   158b2:	2a19      	cmp	r2, #25
   158b4:	bf94      	ite	ls
   158b6:	3337      	addls	r3, #55	; 0x37
   158b8:	3357      	addhi	r3, #87	; 0x57
   158ba:	e7da      	b.n	15872 <encode_uint+0x40>
		} else if (radix == 16) {
   158bc:	2d10      	cmp	r5, #16
   158be:	d1ea      	bne.n	15896 <encode_uint+0x64>
			conv->altform_0c = true;
   158c0:	78a3      	ldrb	r3, [r4, #2]
   158c2:	f043 0310 	orr.w	r3, r3, #16
   158c6:	e7e5      	b.n	15894 <encode_uint+0x62>

000158c8 <outs>:
{
   158c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   158cc:	4680      	mov	r8, r0
   158ce:	4689      	mov	r9, r1
   158d0:	4616      	mov	r6, r2
   158d2:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   158d4:	4615      	mov	r5, r2
   158d6:	42bd      	cmp	r5, r7
   158d8:	eba5 0406 	sub.w	r4, r5, r6
   158dc:	d305      	bcc.n	158ea <outs+0x22>
   158de:	b10f      	cbz	r7, 158e4 <outs+0x1c>
	return (int)count;
   158e0:	4620      	mov	r0, r4
   158e2:	e008      	b.n	158f6 <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   158e4:	782b      	ldrb	r3, [r5, #0]
   158e6:	2b00      	cmp	r3, #0
   158e8:	d0fa      	beq.n	158e0 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   158ea:	4649      	mov	r1, r9
   158ec:	f815 0b01 	ldrb.w	r0, [r5], #1
   158f0:	47c0      	blx	r8
		if (rc < 0) {
   158f2:	2800      	cmp	r0, #0
   158f4:	daef      	bge.n	158d6 <outs+0xe>
}
   158f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000158fa <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   158fa:	4770      	bx	lr

000158fc <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   158fc:	f7fd bc40 	b.w	13180 <SystemInit>

00015900 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   15900:	b2cb      	uxtb	r3, r1
   15902:	210c      	movs	r1, #12
   15904:	68c2      	ldr	r2, [r0, #12]
   15906:	fb03 2101 	mla	r1, r3, r1, r2
   1590a:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1590c:	f000 0007 	and.w	r0, r0, #7
   15910:	4770      	bx	lr

00015912 <set_off_state>:
	__asm__ volatile(
   15912:	f04f 0320 	mov.w	r3, #32
   15916:	f3ef 8211 	mrs	r2, BASEPRI
   1591a:	f383 8811 	msr	BASEPRI, r3
   1591e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15922:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   15924:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   15928:	d001      	beq.n	1592e <set_off_state+0x1c>
   1592a:	428b      	cmp	r3, r1
   1592c:	d107      	bne.n	1593e <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1592e:	2301      	movs	r3, #1
   15930:	6003      	str	r3, [r0, #0]
	int err = 0;
   15932:	2000      	movs	r0, #0
	__asm__ volatile(
   15934:	f382 8811 	msr	BASEPRI, r2
   15938:	f3bf 8f6f 	isb	sy
}
   1593c:	4770      	bx	lr
		err = -EPERM;
   1593e:	f04f 30ff 	mov.w	r0, #4294967295
   15942:	e7f7      	b.n	15934 <set_off_state+0x22>

00015944 <set_starting_state>:
{
   15944:	b510      	push	{r4, lr}
	__asm__ volatile(
   15946:	f04f 0320 	mov.w	r3, #32
   1594a:	f3ef 8211 	mrs	r2, BASEPRI
   1594e:	f383 8811 	msr	BASEPRI, r3
   15952:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   15956:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   15958:	f003 0407 	and.w	r4, r3, #7
   1595c:	2c01      	cmp	r4, #1
   1595e:	d106      	bne.n	1596e <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   15960:	6001      	str	r1, [r0, #0]
	int err = 0;
   15962:	2000      	movs	r0, #0
	__asm__ volatile(
   15964:	f382 8811 	msr	BASEPRI, r2
   15968:	f3bf 8f6f 	isb	sy
}
   1596c:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1596e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   15972:	428b      	cmp	r3, r1
		err = -EALREADY;
   15974:	bf14      	ite	ne
   15976:	f04f 30ff 	movne.w	r0, #4294967295
   1597a:	f06f 0044 	mvneq.w	r0, #68	; 0x44
   1597e:	e7f1      	b.n	15964 <set_starting_state+0x20>

00015980 <set_on_state>:
	__asm__ volatile(
   15980:	f04f 0320 	mov.w	r3, #32
   15984:	f3ef 8211 	mrs	r2, BASEPRI
   15988:	f383 8811 	msr	BASEPRI, r3
   1598c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   15990:	6803      	ldr	r3, [r0, #0]
   15992:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15996:	f043 0302 	orr.w	r3, r3, #2
   1599a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1599c:	f382 8811 	msr	BASEPRI, r2
   159a0:	f3bf 8f6f 	isb	sy
}
   159a4:	4770      	bx	lr

000159a6 <onoff_started_callback>:
{
   159a6:	b410      	push	{r4}
	notify(mgr, 0);
   159a8:	241c      	movs	r4, #28
	return &data->mgr[type];
   159aa:	68c0      	ldr	r0, [r0, #12]
   159ac:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   159ae:	fb03 0004 	mla	r0, r3, r4, r0
   159b2:	2100      	movs	r1, #0
}
   159b4:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
   159b8:	4710      	bx	r2

000159ba <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   159ba:	2000      	movs	r0, #0
   159bc:	f7fd bcaa 	b.w	13314 <nrfx_clock_start>

000159c0 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   159c0:	2000      	movs	r0, #0
   159c2:	f7fd bcd9 	b.w	13378 <nrfx_clock_stop>

000159c6 <blocking_start_callback>:
{
   159c6:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   159c8:	f7fe bb84 	b.w	140d4 <z_impl_k_sem_give>

000159cc <api_stop>:
{
   159cc:	b538      	push	{r3, r4, r5, lr}
	err = set_off_state(&subdata->flags, ctx);
   159ce:	230c      	movs	r3, #12
   159d0:	b2cc      	uxtb	r4, r1
   159d2:	4363      	muls	r3, r4
{
   159d4:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   159d6:	68c0      	ldr	r0, [r0, #12]
   159d8:	3340      	adds	r3, #64	; 0x40
   159da:	2180      	movs	r1, #128	; 0x80
   159dc:	4418      	add	r0, r3
   159de:	f7ff ff98 	bl	15912 <set_off_state>
	if (err < 0) {
   159e2:	2800      	cmp	r0, #0
   159e4:	db05      	blt.n	159f2 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   159e6:	6869      	ldr	r1, [r5, #4]
   159e8:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   159ec:	6863      	ldr	r3, [r4, #4]
   159ee:	4798      	blx	r3
	return 0;
   159f0:	2000      	movs	r0, #0
}
   159f2:	bd38      	pop	{r3, r4, r5, pc}

000159f4 <api_start>:
{
   159f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	err = set_starting_state(&subdata->flags, ctx);
   159f8:	270c      	movs	r7, #12
   159fa:	b2cd      	uxtb	r5, r1
   159fc:	436f      	muls	r7, r5
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   159fe:	68c4      	ldr	r4, [r0, #12]
{
   15a00:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   15a02:	f107 0040 	add.w	r0, r7, #64	; 0x40
   15a06:	2180      	movs	r1, #128	; 0x80
   15a08:	4420      	add	r0, r4
{
   15a0a:	4690      	mov	r8, r2
   15a0c:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
   15a0e:	f7ff ff99 	bl	15944 <set_starting_state>
	if (err < 0) {
   15a12:	2800      	cmp	r0, #0
   15a14:	db07      	blt.n	15a26 <api_start+0x32>
	subdata->cb = cb;
   15a16:	443c      	add	r4, r7
	subdata->user_data = user_data;
   15a18:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   15a1c:	6873      	ldr	r3, [r6, #4]
   15a1e:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   15a22:	4798      	blx	r3
	return 0;
   15a24:	2000      	movs	r0, #0
}
   15a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015a2a <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   15a2a:	4770      	bx	lr

00015a2c <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   15a2c:	4770      	bx	lr

00015a2e <sys_clock_disable>:
   15a2e:	4770      	bx	lr

00015a30 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
   15a30:	2300      	movs	r3, #0
{
   15a32:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
   15a34:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
   15a36:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
   15a3a:	f7fe fedf 	bl	147fc <mbedtls_platform_setup>
}
   15a3e:	b003      	add	sp, #12
   15a40:	f85d fb04 	ldr.w	pc, [sp], #4

00015a44 <__acle_se_spm_request_random_number_nse>:
{
   15a44:	b570      	push	{r4, r5, r6, lr}
   15a46:	4606      	mov	r6, r0
   15a48:	460c      	mov	r4, r1
   15a4a:	4615      	mov	r5, r2
	return arm_cmse_addr_is_secure(ptr) == 1;
   15a4c:	f000 f906 	bl	15c5c <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
   15a50:	2801      	cmp	r0, #1
   15a52:	d136      	bne.n	15ac2 <__acle_se_spm_request_random_number_nse+0x7e>
		return -EINVAL;
   15a54:	f06f 0015 	mvn.w	r0, #21
}
   15a58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15a5c:	4671      	mov	r1, lr
   15a5e:	4672      	mov	r2, lr
   15a60:	4673      	mov	r3, lr
   15a62:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   15a66:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   15a6a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   15a6e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   15a72:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   15a76:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   15a7a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   15a7e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   15a82:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   15a86:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   15a8a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   15a8e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   15a92:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   15a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   15a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   15a9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   15aa2:	f38e 8c00 	msr	CPSR_fs, lr
   15aa6:	b410      	push	{r4}
   15aa8:	eef1 ca10 	vmrs	ip, fpscr
   15aac:	f64f 7460 	movw	r4, #65376	; 0xff60
   15ab0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   15ab4:	ea0c 0c04 	and.w	ip, ip, r4
   15ab8:	eee1 ca10 	vmsr	fpscr, ip
   15abc:	bc10      	pop	{r4}
   15abe:	46f4      	mov	ip, lr
   15ac0:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
   15ac2:	4628      	mov	r0, r5
   15ac4:	f000 f8ca 	bl	15c5c <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)output) ||
   15ac8:	2801      	cmp	r0, #1
   15aca:	d0c3      	beq.n	15a54 <__acle_se_spm_request_random_number_nse+0x10>
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
   15acc:	2c90      	cmp	r4, #144	; 0x90
   15ace:	d1c1      	bne.n	15a54 <__acle_se_spm_request_random_number_nse+0x10>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
   15ad0:	462b      	mov	r3, r5
   15ad2:	4622      	mov	r2, r4
   15ad4:	4631      	mov	r1, r6
   15ad6:	2000      	movs	r0, #0
   15ad8:	f7fe fe9c 	bl	14814 <mbedtls_hardware_poll>
	return err;
   15adc:	e7bc      	b.n	15a58 <__acle_se_spm_request_random_number_nse+0x14>

00015ade <__acle_se_spm_firmware_info_nse>:
#endif /* CONFIG_SPM_SERVICE_S0_ACTIVE */

#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info_nse(uint32_t fw_address, struct fw_info *info)
{
   15ade:	b538      	push	{r3, r4, r5, lr}
   15ae0:	4605      	mov	r5, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
   15ae2:	460c      	mov	r4, r1
   15ae4:	bbb1      	cbnz	r1, 15b54 <__acle_se_spm_firmware_info_nse+0x76>
		return -EINVAL;
   15ae6:	f06f 0015 	mvn.w	r0, #21
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
}
   15aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   15aee:	4671      	mov	r1, lr
   15af0:	4672      	mov	r2, lr
   15af2:	4673      	mov	r3, lr
   15af4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   15af8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
   15afc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
   15b00:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
   15b04:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
   15b08:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
   15b0c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
   15b10:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
   15b14:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
   15b18:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
   15b1c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
   15b20:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   15b24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   15b28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   15b2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   15b30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   15b34:	f38e 8c00 	msr	CPSR_fs, lr
   15b38:	b410      	push	{r4}
   15b3a:	eef1 ca10 	vmrs	ip, fpscr
   15b3e:	f64f 7460 	movw	r4, #65376	; 0xff60
   15b42:	f6c0 74ff 	movt	r4, #4095	; 0xfff
   15b46:	ea0c 0c04 	and.w	ip, ip, r4
   15b4a:	eee1 ca10 	vmsr	fpscr, ip
   15b4e:	bc10      	pop	{r4}
   15b50:	46f4      	mov	ip, lr
   15b52:	4774      	bxns	lr
	return arm_cmse_addr_is_secure(ptr) == 1;
   15b54:	f000 f882 	bl	15c5c <arm_cmse_addr_is_secure>
	if (!ptr_in_secure_area(fw_address)) {
   15b58:	2801      	cmp	r0, #1
   15b5a:	d1c4      	bne.n	15ae6 <__acle_se_spm_firmware_info_nse+0x8>
	return arm_cmse_addr_is_secure(ptr) == 1;
   15b5c:	4620      	mov	r0, r4
   15b5e:	f000 f87d 	bl	15c5c <arm_cmse_addr_is_secure>
	if (ptr_in_secure_area((intptr_t)info)) {
   15b62:	2801      	cmp	r0, #1
   15b64:	d0bf      	beq.n	15ae6 <__acle_se_spm_firmware_info_nse+0x8>
	tmp_info = fw_info_find(fw_address);
   15b66:	4628      	mov	r0, r5
   15b68:	f7fc fa3c 	bl	11fe4 <fw_info_find>
	if (tmp_info != NULL) {
   15b6c:	4601      	mov	r1, r0
   15b6e:	b128      	cbz	r0, 15b7c <__acle_se_spm_firmware_info_nse+0x9e>
		memcpy(info, tmp_info, sizeof(*tmp_info));
   15b70:	223c      	movs	r2, #60	; 0x3c
   15b72:	4620      	mov	r0, r4
   15b74:	f000 f8ba 	bl	15cec <memcpy>
		return 0;
   15b78:	2000      	movs	r0, #0
   15b7a:	e7b6      	b.n	15aea <__acle_se_spm_firmware_info_nse+0xc>
	return -EFAULT;
   15b7c:	f06f 000d 	mvn.w	r0, #13
   15b80:	e7b3      	b.n	15aea <__acle_se_spm_firmware_info_nse+0xc>

00015b82 <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
   15b82:	2000      	movs	r0, #0
   15b84:	f7fb bdda 	b.w	1173c <sys_reboot>

00015b88 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   15b88:	2100      	movs	r1, #0
   15b8a:	2001      	movs	r0, #1
   15b8c:	f000 b832 	b.w	15bf4 <z_arm_fatal_error>

00015b90 <irq_target_state_set>:
irq_target_state_t irq_target_state_set(unsigned int irq,
	irq_target_state_t irq_target_state)
{
	uint32_t result;

	if (irq_target_state == IRQ_TARGET_STATE_SECURE) {
   15b90:	b243      	sxtb	r3, r0
   15b92:	b9c9      	cbnz	r1, 15bc8 <irq_target_state_set+0x38>
  if ((int32_t)(IRQn) >= 0)
   15b94:	2b00      	cmp	r3, #0
   15b96:	db15      	blt.n	15bc4 <irq_target_state_set+0x34>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   15b98:	2101      	movs	r1, #1
   15b9a:	095b      	lsrs	r3, r3, #5
   15b9c:	009b      	lsls	r3, r3, #2
   15b9e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15ba2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15ba6:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
   15baa:	f000 001f 	and.w	r0, r0, #31
   15bae:	4081      	lsls	r1, r0
   15bb0:	ea22 0201 	bic.w	r2, r2, r1
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   15bb4:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
   15bb8:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   15bbc:	40c1      	lsrs	r1, r0
   15bbe:	f001 0101 	and.w	r1, r1, #1
	} else {
		/* Set target to Non-Secure */
		result = NVIC_SetTargetState(irq);
	}

	if (result) {
   15bc2:	b2c9      	uxtb	r1, r1
		return IRQ_TARGET_STATE_NON_SECURE;
	} else {
		return IRQ_TARGET_STATE_SECURE;
	}
}
   15bc4:	4608      	mov	r0, r1
   15bc6:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
   15bc8:	2b00      	cmp	r3, #0
   15bca:	db0d      	blt.n	15be8 <irq_target_state_set+0x58>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
   15bcc:	2201      	movs	r2, #1
   15bce:	095b      	lsrs	r3, r3, #5
   15bd0:	009b      	lsls	r3, r3, #2
   15bd2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15bd6:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15bda:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
   15bde:	f000 001f 	and.w	r0, r0, #31
   15be2:	4082      	lsls	r2, r0
   15be4:	430a      	orrs	r2, r1
   15be6:	e7e5      	b.n	15bb4 <irq_target_state_set+0x24>
		return IRQ_TARGET_STATE_SECURE;
   15be8:	2100      	movs	r1, #0
   15bea:	e7eb      	b.n	15bc4 <irq_target_state_set+0x34>

00015bec <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   15bec:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15bee:	f383 880b 	msr	PSPLIM, r3
}
   15bf2:	4770      	bx	lr

00015bf4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15bf4:	f000 b937 	b.w	15e66 <z_fatal_error>

00015bf8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   15bf8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   15bfa:	6800      	ldr	r0, [r0, #0]
   15bfc:	f000 b933 	b.w	15e66 <z_fatal_error>

00015c00 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   15c00:	b508      	push	{r3, lr}
	handler();
   15c02:	f7fc fc87 	bl	12514 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   15c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   15c0a:	f7fc be21 	b.w	12850 <z_arm_exc_exit>

00015c0e <mpu_configure_region>:
{
   15c0e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   15c10:	890a      	ldrh	r2, [r1, #8]
   15c12:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   15c14:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   15c16:	684d      	ldr	r5, [r1, #4]
   15c18:	f002 021f 	and.w	r2, r2, #31
   15c1c:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   15c20:	9300      	str	r3, [sp, #0]
   15c22:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   15c26:	f023 031f 	bic.w	r3, r3, #31
   15c2a:	1e6a      	subs	r2, r5, #1
   15c2c:	4413      	add	r3, r2
   15c2e:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   15c32:	280f      	cmp	r0, #15
   15c34:	9303      	str	r3, [sp, #12]
   15c36:	d804      	bhi.n	15c42 <mpu_configure_region+0x34>
	region_init(index, region_conf);
   15c38:	4669      	mov	r1, sp
   15c3a:	f7fc fea9 	bl	12990 <region_init>
}
   15c3e:	b004      	add	sp, #16
   15c40:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15c42:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
   15c46:	e7fa      	b.n	15c3e <mpu_configure_region+0x30>

00015c48 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   15c48:	e840 f000 	tt	r0, r0
   15c4c:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   15c4e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   15c52:	bf14      	ite	ne
   15c54:	4618      	movne	r0, r3
   15c56:	f06f 0015 	mvneq.w	r0, #21
   15c5a:	4770      	bx	lr

00015c5c <arm_cmse_addr_is_secure>:
   15c5c:	e840 f000 	tt	r0, r0
int arm_cmse_addr_is_secure(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	return addr_info.flags.secure;
}
   15c60:	f3c0 5080 	ubfx	r0, r0, #22, #1
   15c64:	4770      	bx	lr

00015c66 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   15c66:	4603      	mov	r3, r0
	size_t n = 0;
   15c68:	2000      	movs	r0, #0

	while (*s != '\0') {
   15c6a:	5c1a      	ldrb	r2, [r3, r0]
   15c6c:	b902      	cbnz	r2, 15c70 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   15c6e:	4770      	bx	lr
		n++;
   15c70:	3001      	adds	r0, #1
   15c72:	e7fa      	b.n	15c6a <strlen+0x4>

00015c74 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   15c74:	4603      	mov	r3, r0
	size_t n = 0;
   15c76:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   15c78:	5c1a      	ldrb	r2, [r3, r0]
   15c7a:	b10a      	cbz	r2, 15c80 <strnlen+0xc>
   15c7c:	4288      	cmp	r0, r1
   15c7e:	d100      	bne.n	15c82 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   15c80:	4770      	bx	lr
		n++;
   15c82:	3001      	adds	r0, #1
   15c84:	e7f8      	b.n	15c78 <strnlen+0x4>

00015c86 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   15c86:	3801      	subs	r0, #1
   15c88:	3901      	subs	r1, #1
   15c8a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   15c8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   15c92:	4293      	cmp	r3, r2
   15c94:	d101      	bne.n	15c9a <strcmp+0x14>
   15c96:	2b00      	cmp	r3, #0
   15c98:	d1f7      	bne.n	15c8a <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   15c9a:	1a98      	subs	r0, r3, r2
   15c9c:	4770      	bx	lr

00015c9e <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   15c9e:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   15ca0:	b15a      	cbz	r2, 15cba <memcmp+0x1c>
   15ca2:	3901      	subs	r1, #1
   15ca4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   15ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
   15caa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   15cae:	42a0      	cmp	r0, r4
   15cb0:	d001      	beq.n	15cb6 <memcmp+0x18>
   15cb2:	429a      	cmp	r2, r3
   15cb4:	d0f7      	beq.n	15ca6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   15cb6:	1ad0      	subs	r0, r2, r3
}
   15cb8:	bd10      	pop	{r4, pc}
		return 0;
   15cba:	4610      	mov	r0, r2
   15cbc:	e7fc      	b.n	15cb8 <memcmp+0x1a>

00015cbe <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   15cbe:	1a43      	subs	r3, r0, r1
   15cc0:	4293      	cmp	r3, r2
{
   15cc2:	b510      	push	{r4, lr}
   15cc4:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   15cc8:	d308      	bcc.n	15cdc <memmove+0x1e>
	char *dest = d;
   15cca:	4602      	mov	r2, r0
   15ccc:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   15cce:	429a      	cmp	r2, r3
   15cd0:	d00b      	beq.n	15cea <memmove+0x2c>
			*dest = *src;
   15cd2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   15cd6:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   15cda:	e7f8      	b.n	15cce <memmove+0x10>
   15cdc:	440a      	add	r2, r1
			dest[n] = src[n];
   15cde:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
   15ce2:	428a      	cmp	r2, r1
			dest[n] = src[n];
   15ce4:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   15ce8:	d1f9      	bne.n	15cde <memmove+0x20>
		}
	}

	return d;
}
   15cea:	bd10      	pop	{r4, pc}

00015cec <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   15cec:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   15cee:	ea81 0400 	eor.w	r4, r1, r0
   15cf2:	07a5      	lsls	r5, r4, #30
   15cf4:	4603      	mov	r3, r0
   15cf6:	d00b      	beq.n	15d10 <memcpy+0x24>
   15cf8:	3b01      	subs	r3, #1
   15cfa:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   15cfc:	4291      	cmp	r1, r2
   15cfe:	d11b      	bne.n	15d38 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   15d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   15d02:	2a00      	cmp	r2, #0
   15d04:	d0fc      	beq.n	15d00 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   15d06:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
   15d0a:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
   15d0c:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
   15d10:	079c      	lsls	r4, r3, #30
   15d12:	d1f6      	bne.n	15d02 <memcpy+0x16>
   15d14:	f022 0403 	bic.w	r4, r2, #3
   15d18:	1f1d      	subs	r5, r3, #4
   15d1a:	0896      	lsrs	r6, r2, #2
   15d1c:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   15d1e:	42b9      	cmp	r1, r7
   15d20:	d105      	bne.n	15d2e <memcpy+0x42>
   15d22:	f06f 0503 	mvn.w	r5, #3
   15d26:	4423      	add	r3, r4
   15d28:	fb05 2206 	mla	r2, r5, r6, r2
   15d2c:	e7e4      	b.n	15cf8 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   15d2e:	f851 cb04 	ldr.w	ip, [r1], #4
   15d32:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   15d36:	e7f2      	b.n	15d1e <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   15d38:	f811 4b01 	ldrb.w	r4, [r1], #1
   15d3c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   15d40:	e7dc      	b.n	15cfc <memcpy+0x10>

00015d42 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
   15d42:	4603      	mov	r3, r0
{
   15d44:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
   15d46:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   15d48:	079c      	lsls	r4, r3, #30
   15d4a:	d111      	bne.n	15d70 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   15d4c:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   15d50:	f022 0603 	bic.w	r6, r2, #3
   15d54:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   15d58:	441e      	add	r6, r3
   15d5a:	0894      	lsrs	r4, r2, #2
   15d5c:	42b3      	cmp	r3, r6
   15d5e:	d10d      	bne.n	15d7c <memset+0x3a>
   15d60:	f06f 0503 	mvn.w	r5, #3
   15d64:	fb05 2204 	mla	r2, r5, r4, r2
   15d68:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   15d6a:	4293      	cmp	r3, r2
   15d6c:	d109      	bne.n	15d82 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   15d6e:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   15d70:	2a00      	cmp	r2, #0
   15d72:	d0fc      	beq.n	15d6e <memset+0x2c>
		*(d_byte++) = c_byte;
   15d74:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   15d78:	3a01      	subs	r2, #1
   15d7a:	e7e5      	b.n	15d48 <memset+0x6>
		*(d_word++) = c_word;
   15d7c:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   15d80:	e7ec      	b.n	15d5c <memset+0x1a>
		*(d_byte++) = c_byte;
   15d82:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   15d86:	e7f0      	b.n	15d6a <memset+0x28>

00015d88 <_stdout_hook_default>:
}
   15d88:	f04f 30ff 	mov.w	r0, #4294967295
   15d8c:	4770      	bx	lr

00015d8e <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   15d8e:	6843      	ldr	r3, [r0, #4]
   15d90:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   15d92:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   15d96:	05d2      	lsls	r2, r2, #23
   15d98:	d518      	bpl.n	15dcc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15d9a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   15d9e:	b1aa      	cbz	r2, 15dcc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   15da0:	f04f 0120 	mov.w	r1, #32
   15da4:	f3ef 8211 	mrs	r2, BASEPRI
   15da8:	f381 8811 	msr	BASEPRI, r1
   15dac:	f3bf 8f6f 	isb	sy
   15db0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   15db4:	b131      	cbz	r1, 15dc4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15db6:	2100      	movs	r1, #0
   15db8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   15dbc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15dc0:	2101      	movs	r1, #1
   15dc2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   15dc4:	f382 8811 	msr	BASEPRI, r2
   15dc8:	f3bf 8f6f 	isb	sy
}
   15dcc:	4770      	bx	lr

00015dce <uarte_nrfx_config_get>:
{
   15dce:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   15dd0:	68c2      	ldr	r2, [r0, #12]
   15dd2:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   15dd6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   15dda:	2000      	movs	r0, #0
   15ddc:	4770      	bx	lr

00015dde <uarte_nrfx_err_check>:
	return config->uarte_regs;
   15dde:	6843      	ldr	r3, [r0, #4]
   15de0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   15de2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   15de6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   15dea:	4770      	bx	lr

00015dec <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   15dec:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   15dee:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   15df0:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   15df4:	b938      	cbnz	r0, 15e06 <is_tx_ready+0x1a>
   15df6:	7992      	ldrb	r2, [r2, #6]
   15df8:	b932      	cbnz	r2, 15e08 <is_tx_ready+0x1c>
   15dfa:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   15dfe:	3800      	subs	r0, #0
   15e00:	bf18      	it	ne
   15e02:	2001      	movne	r0, #1
   15e04:	4770      	bx	lr
   15e06:	2001      	movs	r0, #1
}
   15e08:	4770      	bx	lr

00015e0a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   15e0a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   15e0c:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   15e0e:	681b      	ldr	r3, [r3, #0]
   15e10:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   15e14:	b148      	cbz	r0, 15e2a <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   15e16:	2000      	movs	r0, #0
	*c = data->rx_data;
   15e18:	7c52      	ldrb	r2, [r2, #17]
   15e1a:	700a      	strb	r2, [r1, #0]
   15e1c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   15e20:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15e24:	2201      	movs	r2, #1
   15e26:	601a      	str	r2, [r3, #0]
	return 0;
   15e28:	4770      	bx	lr
		return -1;
   15e2a:	f04f 30ff 	mov.w	r0, #4294967295
}
   15e2e:	4770      	bx	lr

00015e30 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   15e30:	2000      	movs	r0, #0
{
   15e32:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
   15e34:	f7fc fd1a 	bl	1286c <sys_arch_reboot>

00015e38 <hw_cc3xx_init>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init(const struct device *dev)
{
   15e38:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   15e3a:	f7fc f9c7 	bl	121cc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   15e3e:	f7fc fa71 	bl	12324 <nrf_cc3xx_platform_mutex_init>
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif
	return res;
}
   15e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
   15e46:	f7fe bd9b 	b.w	14980 <nrf_cc3xx_platform_init_no_rng>

00015e4a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   15e4a:	4700      	bx	r0

00015e4c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   15e4c:	f000 b8fd 	b.w	1604a <z_impl_k_busy_wait>

00015e50 <nrfx_clock_enable>:
{
   15e50:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   15e52:	2005      	movs	r0, #5
   15e54:	f7fc fae2 	bl	1241c <arch_irq_is_enabled>
   15e58:	b920      	cbnz	r0, 15e64 <nrfx_clock_enable+0x14>
}
   15e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   15e5e:	2005      	movs	r0, #5
   15e60:	f7fc bacc 	b.w	123fc <arch_irq_enable>
   15e64:	bd08      	pop	{r3, pc}

00015e66 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15e68:	4605      	mov	r5, r0
   15e6a:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   15e6c:	f04f 0320 	mov.w	r3, #32
   15e70:	f3ef 8611 	mrs	r6, BASEPRI
   15e74:	f383 8811 	msr	BASEPRI, r3
   15e78:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   15e7c:	f7fe f924 	bl	140c8 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   15e80:	9901      	ldr	r1, [sp, #4]
   15e82:	4604      	mov	r4, r0
   15e84:	4628      	mov	r0, r5
   15e86:	f7ff ffd3 	bl	15e30 <k_sys_fatal_error_handler>
	__asm__ volatile(
   15e8a:	f386 8811 	msr	BASEPRI, r6
   15e8e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   15e92:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   15e94:	b002      	add	sp, #8
   15e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15e9a:	f7fc bd3b 	b.w	12914 <z_impl_k_thread_abort>

00015e9e <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   15e9e:	f7ff bdc5 	b.w	15a2c <z_clock_idle_exit>

00015ea2 <k_mem_slab_init>:
{
   15ea2:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   15ea4:	2400      	movs	r4, #0
   15ea6:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15ea8:	ea41 0402 	orr.w	r4, r1, r2
   15eac:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   15eb0:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   15eb4:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15eb6:	d10c      	bne.n	15ed2 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   15eb8:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15eba:	42a3      	cmp	r3, r4
   15ebc:	d103      	bne.n	15ec6 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   15ebe:	e9c0 0000 	strd	r0, r0, [r0]
}
   15ec2:	2000      	movs	r0, #0
}
   15ec4:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   15ec6:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15ec8:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   15eca:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   15ecc:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   15ece:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   15ed0:	e7f3      	b.n	15eba <k_mem_slab_init+0x18>
		return -EINVAL;
   15ed2:	f06f 0015 	mvn.w	r0, #21
	return rc;
   15ed6:	e7f5      	b.n	15ec4 <k_mem_slab_init+0x22>

00015ed8 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   15ed8:	2300      	movs	r3, #0
   15eda:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   15ede:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   15ee2:	4618      	mov	r0, r3
   15ee4:	4770      	bx	lr

00015ee6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15ee6:	4603      	mov	r3, r0
   15ee8:	b920      	cbnz	r0, 15ef4 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15eea:	f3ef 8205 	mrs	r2, IPSR
   15eee:	b90a      	cbnz	r2, 15ef4 <z_reschedule_irqlock+0xe>
   15ef0:	f7fc ba2e 	b.w	12350 <arch_swap>
   15ef4:	f383 8811 	msr	BASEPRI, r3
   15ef8:	f3bf 8f6f 	isb	sy
}
   15efc:	4770      	bx	lr

00015efe <z_reschedule_unlocked>:
	__asm__ volatile(
   15efe:	f04f 0320 	mov.w	r3, #32
   15f02:	f3ef 8011 	mrs	r0, BASEPRI
   15f06:	f383 8811 	msr	BASEPRI, r3
   15f0a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15f0e:	f7ff bfea 	b.w	15ee6 <z_reschedule_irqlock>

00015f12 <unpend_thread_no_timeout>:
{
   15f12:	4601      	mov	r1, r0
   15f14:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   15f16:	6880      	ldr	r0, [r0, #8]
   15f18:	f7fd fda6 	bl	13a68 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15f1c:	7b4b      	ldrb	r3, [r1, #13]
   15f1e:	f023 0302 	bic.w	r3, r3, #2
   15f22:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   15f24:	2300      	movs	r3, #0
   15f26:	608b      	str	r3, [r1, #8]
}
   15f28:	bd08      	pop	{r3, pc}

00015f2a <z_priq_dumb_best>:
	return list->head == list;
   15f2a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f2c:	4298      	cmp	r0, r3
   15f2e:	d004      	beq.n	15f3a <z_priq_dumb_best+0x10>
	if (n != NULL) {
   15f30:	2b00      	cmp	r3, #0
   15f32:	bf38      	it	cc
   15f34:	2300      	movcc	r3, #0
   15f36:	4618      	mov	r0, r3
   15f38:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15f3a:	2000      	movs	r0, #0
}
   15f3c:	4770      	bx	lr

00015f3e <z_ready_thread>:
{
   15f3e:	b510      	push	{r4, lr}
   15f40:	f04f 0320 	mov.w	r3, #32
   15f44:	f3ef 8411 	mrs	r4, BASEPRI
   15f48:	f383 8811 	msr	BASEPRI, r3
   15f4c:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   15f50:	f7fd fde4 	bl	13b1c <ready_thread>
	__asm__ volatile(
   15f54:	f384 8811 	msr	BASEPRI, r4
   15f58:	f3bf 8f6f 	isb	sy
}
   15f5c:	bd10      	pop	{r4, pc}

00015f5e <z_thread_timeout>:
{
   15f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15f60:	4604      	mov	r4, r0
	__asm__ volatile(
   15f62:	f04f 0320 	mov.w	r3, #32
   15f66:	f3ef 8511 	mrs	r5, BASEPRI
   15f6a:	f383 8811 	msr	BASEPRI, r3
   15f6e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   15f72:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   15f76:	3818      	subs	r0, #24
		if (thread->base.pended_on != NULL) {
   15f78:	b11b      	cbz	r3, 15f82 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   15f7a:	9001      	str	r0, [sp, #4]
   15f7c:	f7ff ffc9 	bl	15f12 <unpend_thread_no_timeout>
   15f80:	9801      	ldr	r0, [sp, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15f82:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   15f86:	f023 0314 	bic.w	r3, r3, #20
   15f8a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   15f8e:	f7fd fdc5 	bl	13b1c <ready_thread>
	__asm__ volatile(
   15f92:	f385 8811 	msr	BASEPRI, r5
   15f96:	f3bf 8f6f 	isb	sy
}
   15f9a:	b003      	add	sp, #12
   15f9c:	bd30      	pop	{r4, r5, pc}

00015f9e <add_to_waitq_locked>:
{
   15f9e:	b538      	push	{r3, r4, r5, lr}
   15fa0:	4604      	mov	r4, r0
   15fa2:	460d      	mov	r5, r1
	unready_thread(thread);
   15fa4:	f7fd ff42 	bl	13e2c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15fa8:	7b63      	ldrb	r3, [r4, #13]
   15faa:	f043 0302 	orr.w	r3, r3, #2
   15fae:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   15fb0:	b1c5      	cbz	r5, 15fe4 <add_to_waitq_locked+0x46>
	return list->head == list;
   15fb2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   15fb4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15fb6:	429d      	cmp	r5, r3
   15fb8:	bf08      	it	eq
   15fba:	2300      	moveq	r3, #0
   15fbc:	2b00      	cmp	r3, #0
   15fbe:	bf38      	it	cc
   15fc0:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15fc2:	b183      	cbz	r3, 15fe6 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   15fc4:	f994 100e 	ldrsb.w	r1, [r4, #14]
   15fc8:	f993 200e 	ldrsb.w	r2, [r3, #14]
   15fcc:	4291      	cmp	r1, r2
   15fce:	db04      	blt.n	15fda <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   15fd0:	686a      	ldr	r2, [r5, #4]
   15fd2:	429a      	cmp	r2, r3
   15fd4:	d007      	beq.n	15fe6 <add_to_waitq_locked+0x48>
   15fd6:	681b      	ldr	r3, [r3, #0]
   15fd8:	e7f3      	b.n	15fc2 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   15fda:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15fdc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   15fe0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   15fe2:	605c      	str	r4, [r3, #4]
}
   15fe4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   15fe6:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   15fe8:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   15fea:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   15fec:	686b      	ldr	r3, [r5, #4]
   15fee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15ff0:	606c      	str	r4, [r5, #4]
   15ff2:	e7f7      	b.n	15fe4 <add_to_waitq_locked+0x46>

00015ff4 <z_unpend_first_thread>:
{
   15ff4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   15ff6:	f04f 0320 	mov.w	r3, #32
   15ffa:	f3ef 8211 	mrs	r2, BASEPRI
   15ffe:	f383 8811 	msr	BASEPRI, r3
   16002:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   16006:	f7ff ff90 	bl	15f2a <z_priq_dumb_best>
   1600a:	4604      	mov	r4, r0
	__asm__ volatile(
   1600c:	f382 8811 	msr	BASEPRI, r2
   16010:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   16014:	b188      	cbz	r0, 1603a <z_unpend_first_thread+0x46>
	__asm__ volatile(
   16016:	f04f 0320 	mov.w	r3, #32
   1601a:	f3ef 8511 	mrs	r5, BASEPRI
   1601e:	f383 8811 	msr	BASEPRI, r3
   16022:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   16026:	f7ff ff74 	bl	15f12 <unpend_thread_no_timeout>
	__asm__ volatile(
   1602a:	f385 8811 	msr	BASEPRI, r5
   1602e:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   16032:	f104 0018 	add.w	r0, r4, #24
   16036:	f000 f80c 	bl	16052 <z_abort_timeout>
}
   1603a:	4620      	mov	r0, r4
   1603c:	bd38      	pop	{r3, r4, r5, pc}

0001603e <k_is_in_isr>:
   1603e:	f3ef 8005 	mrs	r0, IPSR
}
   16042:	3800      	subs	r0, #0
   16044:	bf18      	it	ne
   16046:	2001      	movne	r0, #1
   16048:	4770      	bx	lr

0001604a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   1604a:	b108      	cbz	r0, 16050 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   1604c:	f7fb bb6c 	b.w	11728 <arch_busy_wait>
}
   16050:	4770      	bx	lr

00016052 <z_abort_timeout>:
{
   16052:	b510      	push	{r4, lr}
	__asm__ volatile(
   16054:	f04f 0220 	mov.w	r2, #32
   16058:	f3ef 8411 	mrs	r4, BASEPRI
   1605c:	f382 8811 	msr	BASEPRI, r2
   16060:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   16064:	6803      	ldr	r3, [r0, #0]
   16066:	b13b      	cbz	r3, 16078 <z_abort_timeout+0x26>
			remove_timeout(to);
   16068:	f7fe f950 	bl	1430c <remove_timeout>
			ret = 0;
   1606c:	2000      	movs	r0, #0
	__asm__ volatile(
   1606e:	f384 8811 	msr	BASEPRI, r4
   16072:	f3bf 8f6f 	isb	sy
}
   16076:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   16078:	f06f 0015 	mvn.w	r0, #21
   1607c:	e7f7      	b.n	1606e <z_abort_timeout+0x1c>

0001607e <z_get_next_timeout_expiry>:
{
   1607e:	b510      	push	{r4, lr}
	__asm__ volatile(
   16080:	f04f 0320 	mov.w	r3, #32
   16084:	f3ef 8411 	mrs	r4, BASEPRI
   16088:	f383 8811 	msr	BASEPRI, r3
   1608c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   16090:	f7fe f956 	bl	14340 <next_timeout>
	__asm__ volatile(
   16094:	f384 8811 	msr	BASEPRI, r4
   16098:	f3bf 8f6f 	isb	sy
}
   1609c:	bd10      	pop	{r4, pc}

0001609e <z_set_timeout_expiry>:
{
   1609e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   160a0:	4604      	mov	r4, r0
   160a2:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   160a4:	f04f 0320 	mov.w	r3, #32
   160a8:	f3ef 8511 	mrs	r5, BASEPRI
   160ac:	f383 8811 	msr	BASEPRI, r3
   160b0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   160b4:	f7fe f944 	bl	14340 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   160b8:	2801      	cmp	r0, #1
   160ba:	dd05      	ble.n	160c8 <z_set_timeout_expiry+0x2a>
   160bc:	42a0      	cmp	r0, r4
   160be:	9901      	ldr	r1, [sp, #4]
   160c0:	dd02      	ble.n	160c8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   160c2:	4620      	mov	r0, r4
   160c4:	f7fb fdb4 	bl	11c30 <z_clock_set_timeout>
	__asm__ volatile(
   160c8:	f385 8811 	msr	BASEPRI, r5
   160cc:	f3bf 8f6f 	isb	sy
}
   160d0:	b003      	add	sp, #12
   160d2:	bd30      	pop	{r4, r5, pc}

000160d4 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   160d4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   160d6:	f7fe fa57 	bl	14588 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   160da:	bd08      	pop	{r3, pc}

000160dc <k_heap_init>:
{
   160dc:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   160de:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   160e2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   160e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   160ea:	f7ff bb1a 	b.w	15722 <sys_heap_init>

000160ee <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   160ee:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00016bc0 <spm_firmware_info_nse-0x1420>:
	...

00017fe0 <spm_firmware_info_nse>:
   17fe0:	e97f e97f 	sg
   17fe4:	f7fd bd7b 	b.w	15ade <__acle_se_spm_firmware_info_nse>

00017fe8 <spm_request_random_number_nse>:
   17fe8:	e97f e97f 	sg
   17fec:	f7fd bd2a 	b.w	15a44 <__acle_se_spm_request_random_number_nse>

00017ff0 <spm_s0_active>:
   17ff0:	e97f e97f 	sg
   17ff4:	f7fa b880 	b.w	120f8 <__acle_se_spm_s0_active>

00017ff8 <spm_request_read_nse>:
   17ff8:	e97f e97f 	sg
   17ffc:	f7fa b816 	b.w	1202c <__acle_se_spm_request_read_nse>
