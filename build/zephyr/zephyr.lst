
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0001c200 <_vector_start>:
   1c200:	20025668 	.word	0x20025668
   1c204:	00026809 	.word	0x00026809
   1c208:	0003e03f 	.word	0x0003e03f
   1c20c:	00026869 	.word	0x00026869
   1c210:	00026869 	.word	0x00026869
   1c214:	00026869 	.word	0x00026869
   1c218:	00026869 	.word	0x00026869
   1c21c:	00026869 	.word	0x00026869
	...
   1c22c:	000264e5 	.word	0x000264e5
   1c230:	00026869 	.word	0x00026869
   1c234:	00000000 	.word	0x00000000
   1c238:	00026431 	.word	0x00026431
   1c23c:	00026055 	.word	0x00026055

0001c240 <_irq_vector_table>:
   1c240:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c250:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c260:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c270:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c280:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c290:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c2a0:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c2b0:	00029109 0003f4ff 000267c9 000267c9     .........g...g..
   1c2c0:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c2d0:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c2e0:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c2f0:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c300:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c310:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c320:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c330:	000267c9 000267c9 000267c9 000267c9     .g...g...g...g..
   1c340:	000267c9                                .g..

0001c344 <_vector_end>:
	...

0001c400 <m_firmware_info>:
   1c400:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
   1c410:	00031938 00000001 0001c200 0001c200     8...............
   1c420:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0001c440 <__aeabi_drsub>:
   1c440:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   1c444:	e002      	b.n	1c44c <__adddf3>
   1c446:	bf00      	nop

0001c448 <__aeabi_dsub>:
   1c448:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0001c44c <__adddf3>:
   1c44c:	b530      	push	{r4, r5, lr}
   1c44e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   1c452:	ea4f 0543 	mov.w	r5, r3, lsl #1
   1c456:	ea94 0f05 	teq	r4, r5
   1c45a:	bf08      	it	eq
   1c45c:	ea90 0f02 	teqeq	r0, r2
   1c460:	bf1f      	itttt	ne
   1c462:	ea54 0c00 	orrsne.w	ip, r4, r0
   1c466:	ea55 0c02 	orrsne.w	ip, r5, r2
   1c46a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   1c46e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c472:	f000 80e2 	beq.w	1c63a <__adddf3+0x1ee>
   1c476:	ea4f 5454 	mov.w	r4, r4, lsr #21
   1c47a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   1c47e:	bfb8      	it	lt
   1c480:	426d      	neglt	r5, r5
   1c482:	dd0c      	ble.n	1c49e <__adddf3+0x52>
   1c484:	442c      	add	r4, r5
   1c486:	ea80 0202 	eor.w	r2, r0, r2
   1c48a:	ea81 0303 	eor.w	r3, r1, r3
   1c48e:	ea82 0000 	eor.w	r0, r2, r0
   1c492:	ea83 0101 	eor.w	r1, r3, r1
   1c496:	ea80 0202 	eor.w	r2, r0, r2
   1c49a:	ea81 0303 	eor.w	r3, r1, r3
   1c49e:	2d36      	cmp	r5, #54	; 0x36
   1c4a0:	bf88      	it	hi
   1c4a2:	bd30      	pophi	{r4, r5, pc}
   1c4a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1c4a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1c4ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1c4b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1c4b4:	d002      	beq.n	1c4bc <__adddf3+0x70>
   1c4b6:	4240      	negs	r0, r0
   1c4b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c4bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1c4c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1c4c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   1c4c8:	d002      	beq.n	1c4d0 <__adddf3+0x84>
   1c4ca:	4252      	negs	r2, r2
   1c4cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1c4d0:	ea94 0f05 	teq	r4, r5
   1c4d4:	f000 80a7 	beq.w	1c626 <__adddf3+0x1da>
   1c4d8:	f1a4 0401 	sub.w	r4, r4, #1
   1c4dc:	f1d5 0e20 	rsbs	lr, r5, #32
   1c4e0:	db0d      	blt.n	1c4fe <__adddf3+0xb2>
   1c4e2:	fa02 fc0e 	lsl.w	ip, r2, lr
   1c4e6:	fa22 f205 	lsr.w	r2, r2, r5
   1c4ea:	1880      	adds	r0, r0, r2
   1c4ec:	f141 0100 	adc.w	r1, r1, #0
   1c4f0:	fa03 f20e 	lsl.w	r2, r3, lr
   1c4f4:	1880      	adds	r0, r0, r2
   1c4f6:	fa43 f305 	asr.w	r3, r3, r5
   1c4fa:	4159      	adcs	r1, r3
   1c4fc:	e00e      	b.n	1c51c <__adddf3+0xd0>
   1c4fe:	f1a5 0520 	sub.w	r5, r5, #32
   1c502:	f10e 0e20 	add.w	lr, lr, #32
   1c506:	2a01      	cmp	r2, #1
   1c508:	fa03 fc0e 	lsl.w	ip, r3, lr
   1c50c:	bf28      	it	cs
   1c50e:	f04c 0c02 	orrcs.w	ip, ip, #2
   1c512:	fa43 f305 	asr.w	r3, r3, r5
   1c516:	18c0      	adds	r0, r0, r3
   1c518:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   1c51c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c520:	d507      	bpl.n	1c532 <__adddf3+0xe6>
   1c522:	f04f 0e00 	mov.w	lr, #0
   1c526:	f1dc 0c00 	rsbs	ip, ip, #0
   1c52a:	eb7e 0000 	sbcs.w	r0, lr, r0
   1c52e:	eb6e 0101 	sbc.w	r1, lr, r1
   1c532:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   1c536:	d31b      	bcc.n	1c570 <__adddf3+0x124>
   1c538:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   1c53c:	d30c      	bcc.n	1c558 <__adddf3+0x10c>
   1c53e:	0849      	lsrs	r1, r1, #1
   1c540:	ea5f 0030 	movs.w	r0, r0, rrx
   1c544:	ea4f 0c3c 	mov.w	ip, ip, rrx
   1c548:	f104 0401 	add.w	r4, r4, #1
   1c54c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   1c550:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   1c554:	f080 809a 	bcs.w	1c68c <__adddf3+0x240>
   1c558:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   1c55c:	bf08      	it	eq
   1c55e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1c562:	f150 0000 	adcs.w	r0, r0, #0
   1c566:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c56a:	ea41 0105 	orr.w	r1, r1, r5
   1c56e:	bd30      	pop	{r4, r5, pc}
   1c570:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1c574:	4140      	adcs	r0, r0
   1c576:	eb41 0101 	adc.w	r1, r1, r1
   1c57a:	3c01      	subs	r4, #1
   1c57c:	bf28      	it	cs
   1c57e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1c582:	d2e9      	bcs.n	1c558 <__adddf3+0x10c>
   1c584:	f091 0f00 	teq	r1, #0
   1c588:	bf04      	itt	eq
   1c58a:	4601      	moveq	r1, r0
   1c58c:	2000      	moveq	r0, #0
   1c58e:	fab1 f381 	clz	r3, r1
   1c592:	bf08      	it	eq
   1c594:	3320      	addeq	r3, #32
   1c596:	f1a3 030b 	sub.w	r3, r3, #11
   1c59a:	f1b3 0220 	subs.w	r2, r3, #32
   1c59e:	da0c      	bge.n	1c5ba <__adddf3+0x16e>
   1c5a0:	320c      	adds	r2, #12
   1c5a2:	dd08      	ble.n	1c5b6 <__adddf3+0x16a>
   1c5a4:	f102 0c14 	add.w	ip, r2, #20
   1c5a8:	f1c2 020c 	rsb	r2, r2, #12
   1c5ac:	fa01 f00c 	lsl.w	r0, r1, ip
   1c5b0:	fa21 f102 	lsr.w	r1, r1, r2
   1c5b4:	e00c      	b.n	1c5d0 <__adddf3+0x184>
   1c5b6:	f102 0214 	add.w	r2, r2, #20
   1c5ba:	bfd8      	it	le
   1c5bc:	f1c2 0c20 	rsble	ip, r2, #32
   1c5c0:	fa01 f102 	lsl.w	r1, r1, r2
   1c5c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   1c5c8:	bfdc      	itt	le
   1c5ca:	ea41 010c 	orrle.w	r1, r1, ip
   1c5ce:	4090      	lslle	r0, r2
   1c5d0:	1ae4      	subs	r4, r4, r3
   1c5d2:	bfa2      	ittt	ge
   1c5d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   1c5d8:	4329      	orrge	r1, r5
   1c5da:	bd30      	popge	{r4, r5, pc}
   1c5dc:	ea6f 0404 	mvn.w	r4, r4
   1c5e0:	3c1f      	subs	r4, #31
   1c5e2:	da1c      	bge.n	1c61e <__adddf3+0x1d2>
   1c5e4:	340c      	adds	r4, #12
   1c5e6:	dc0e      	bgt.n	1c606 <__adddf3+0x1ba>
   1c5e8:	f104 0414 	add.w	r4, r4, #20
   1c5ec:	f1c4 0220 	rsb	r2, r4, #32
   1c5f0:	fa20 f004 	lsr.w	r0, r0, r4
   1c5f4:	fa01 f302 	lsl.w	r3, r1, r2
   1c5f8:	ea40 0003 	orr.w	r0, r0, r3
   1c5fc:	fa21 f304 	lsr.w	r3, r1, r4
   1c600:	ea45 0103 	orr.w	r1, r5, r3
   1c604:	bd30      	pop	{r4, r5, pc}
   1c606:	f1c4 040c 	rsb	r4, r4, #12
   1c60a:	f1c4 0220 	rsb	r2, r4, #32
   1c60e:	fa20 f002 	lsr.w	r0, r0, r2
   1c612:	fa01 f304 	lsl.w	r3, r1, r4
   1c616:	ea40 0003 	orr.w	r0, r0, r3
   1c61a:	4629      	mov	r1, r5
   1c61c:	bd30      	pop	{r4, r5, pc}
   1c61e:	fa21 f004 	lsr.w	r0, r1, r4
   1c622:	4629      	mov	r1, r5
   1c624:	bd30      	pop	{r4, r5, pc}
   1c626:	f094 0f00 	teq	r4, #0
   1c62a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1c62e:	bf06      	itte	eq
   1c630:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   1c634:	3401      	addeq	r4, #1
   1c636:	3d01      	subne	r5, #1
   1c638:	e74e      	b.n	1c4d8 <__adddf3+0x8c>
   1c63a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c63e:	bf18      	it	ne
   1c640:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1c644:	d029      	beq.n	1c69a <__adddf3+0x24e>
   1c646:	ea94 0f05 	teq	r4, r5
   1c64a:	bf08      	it	eq
   1c64c:	ea90 0f02 	teqeq	r0, r2
   1c650:	d005      	beq.n	1c65e <__adddf3+0x212>
   1c652:	ea54 0c00 	orrs.w	ip, r4, r0
   1c656:	bf04      	itt	eq
   1c658:	4619      	moveq	r1, r3
   1c65a:	4610      	moveq	r0, r2
   1c65c:	bd30      	pop	{r4, r5, pc}
   1c65e:	ea91 0f03 	teq	r1, r3
   1c662:	bf1e      	ittt	ne
   1c664:	2100      	movne	r1, #0
   1c666:	2000      	movne	r0, #0
   1c668:	bd30      	popne	{r4, r5, pc}
   1c66a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   1c66e:	d105      	bne.n	1c67c <__adddf3+0x230>
   1c670:	0040      	lsls	r0, r0, #1
   1c672:	4149      	adcs	r1, r1
   1c674:	bf28      	it	cs
   1c676:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   1c67a:	bd30      	pop	{r4, r5, pc}
   1c67c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   1c680:	bf3c      	itt	cc
   1c682:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1c686:	bd30      	popcc	{r4, r5, pc}
   1c688:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c68c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   1c690:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c694:	f04f 0000 	mov.w	r0, #0
   1c698:	bd30      	pop	{r4, r5, pc}
   1c69a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1c69e:	bf1a      	itte	ne
   1c6a0:	4619      	movne	r1, r3
   1c6a2:	4610      	movne	r0, r2
   1c6a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   1c6a8:	bf1c      	itt	ne
   1c6aa:	460b      	movne	r3, r1
   1c6ac:	4602      	movne	r2, r0
   1c6ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1c6b2:	bf06      	itte	eq
   1c6b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   1c6b8:	ea91 0f03 	teqeq	r1, r3
   1c6bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   1c6c0:	bd30      	pop	{r4, r5, pc}
   1c6c2:	bf00      	nop

0001c6c4 <__aeabi_ui2d>:
   1c6c4:	f090 0f00 	teq	r0, #0
   1c6c8:	bf04      	itt	eq
   1c6ca:	2100      	moveq	r1, #0
   1c6cc:	4770      	bxeq	lr
   1c6ce:	b530      	push	{r4, r5, lr}
   1c6d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6d8:	f04f 0500 	mov.w	r5, #0
   1c6dc:	f04f 0100 	mov.w	r1, #0
   1c6e0:	e750      	b.n	1c584 <__adddf3+0x138>
   1c6e2:	bf00      	nop

0001c6e4 <__aeabi_i2d>:
   1c6e4:	f090 0f00 	teq	r0, #0
   1c6e8:	bf04      	itt	eq
   1c6ea:	2100      	moveq	r1, #0
   1c6ec:	4770      	bxeq	lr
   1c6ee:	b530      	push	{r4, r5, lr}
   1c6f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c6f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c6f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   1c6fc:	bf48      	it	mi
   1c6fe:	4240      	negmi	r0, r0
   1c700:	f04f 0100 	mov.w	r1, #0
   1c704:	e73e      	b.n	1c584 <__adddf3+0x138>
   1c706:	bf00      	nop

0001c708 <__aeabi_f2d>:
   1c708:	0042      	lsls	r2, r0, #1
   1c70a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   1c70e:	ea4f 0131 	mov.w	r1, r1, rrx
   1c712:	ea4f 7002 	mov.w	r0, r2, lsl #28
   1c716:	bf1f      	itttt	ne
   1c718:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   1c71c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   1c720:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   1c724:	4770      	bxne	lr
   1c726:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   1c72a:	bf08      	it	eq
   1c72c:	4770      	bxeq	lr
   1c72e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   1c732:	bf04      	itt	eq
   1c734:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   1c738:	4770      	bxeq	lr
   1c73a:	b530      	push	{r4, r5, lr}
   1c73c:	f44f 7460 	mov.w	r4, #896	; 0x380
   1c740:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1c744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c748:	e71c      	b.n	1c584 <__adddf3+0x138>
   1c74a:	bf00      	nop

0001c74c <__aeabi_ul2d>:
   1c74c:	ea50 0201 	orrs.w	r2, r0, r1
   1c750:	bf08      	it	eq
   1c752:	4770      	bxeq	lr
   1c754:	b530      	push	{r4, r5, lr}
   1c756:	f04f 0500 	mov.w	r5, #0
   1c75a:	e00a      	b.n	1c772 <__aeabi_l2d+0x16>

0001c75c <__aeabi_l2d>:
   1c75c:	ea50 0201 	orrs.w	r2, r0, r1
   1c760:	bf08      	it	eq
   1c762:	4770      	bxeq	lr
   1c764:	b530      	push	{r4, r5, lr}
   1c766:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   1c76a:	d502      	bpl.n	1c772 <__aeabi_l2d+0x16>
   1c76c:	4240      	negs	r0, r0
   1c76e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1c772:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1c776:	f104 0432 	add.w	r4, r4, #50	; 0x32
   1c77a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   1c77e:	f43f aed8 	beq.w	1c532 <__adddf3+0xe6>
   1c782:	f04f 0203 	mov.w	r2, #3
   1c786:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c78a:	bf18      	it	ne
   1c78c:	3203      	addne	r2, #3
   1c78e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1c792:	bf18      	it	ne
   1c794:	3203      	addne	r2, #3
   1c796:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   1c79a:	f1c2 0320 	rsb	r3, r2, #32
   1c79e:	fa00 fc03 	lsl.w	ip, r0, r3
   1c7a2:	fa20 f002 	lsr.w	r0, r0, r2
   1c7a6:	fa01 fe03 	lsl.w	lr, r1, r3
   1c7aa:	ea40 000e 	orr.w	r0, r0, lr
   1c7ae:	fa21 f102 	lsr.w	r1, r1, r2
   1c7b2:	4414      	add	r4, r2
   1c7b4:	e6bd      	b.n	1c532 <__adddf3+0xe6>
   1c7b6:	bf00      	nop

0001c7b8 <__aeabi_dmul>:
   1c7b8:	b570      	push	{r4, r5, r6, lr}
   1c7ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c7be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1c7c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1c7c6:	bf1d      	ittte	ne
   1c7c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1c7cc:	ea94 0f0c 	teqne	r4, ip
   1c7d0:	ea95 0f0c 	teqne	r5, ip
   1c7d4:	f000 f8de 	bleq	1c994 <__aeabi_dmul+0x1dc>
   1c7d8:	442c      	add	r4, r5
   1c7da:	ea81 0603 	eor.w	r6, r1, r3
   1c7de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1c7e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1c7e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1c7ea:	bf18      	it	ne
   1c7ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   1c7f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c7f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   1c7f8:	d038      	beq.n	1c86c <__aeabi_dmul+0xb4>
   1c7fa:	fba0 ce02 	umull	ip, lr, r0, r2
   1c7fe:	f04f 0500 	mov.w	r5, #0
   1c802:	fbe1 e502 	umlal	lr, r5, r1, r2
   1c806:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1c80a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1c80e:	f04f 0600 	mov.w	r6, #0
   1c812:	fbe1 5603 	umlal	r5, r6, r1, r3
   1c816:	f09c 0f00 	teq	ip, #0
   1c81a:	bf18      	it	ne
   1c81c:	f04e 0e01 	orrne.w	lr, lr, #1
   1c820:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   1c824:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1c828:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1c82c:	d204      	bcs.n	1c838 <__aeabi_dmul+0x80>
   1c82e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   1c832:	416d      	adcs	r5, r5
   1c834:	eb46 0606 	adc.w	r6, r6, r6
   1c838:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1c83c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   1c840:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   1c844:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1c848:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1c84c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1c850:	bf88      	it	hi
   1c852:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1c856:	d81e      	bhi.n	1c896 <__aeabi_dmul+0xde>
   1c858:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1c85c:	bf08      	it	eq
   1c85e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   1c862:	f150 0000 	adcs.w	r0, r0, #0
   1c866:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
   1c86c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   1c870:	ea46 0101 	orr.w	r1, r6, r1
   1c874:	ea40 0002 	orr.w	r0, r0, r2
   1c878:	ea81 0103 	eor.w	r1, r1, r3
   1c87c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   1c880:	bfc2      	ittt	gt
   1c882:	ebd4 050c 	rsbsgt	r5, r4, ip
   1c886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1c88a:	bd70      	popgt	{r4, r5, r6, pc}
   1c88c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1c890:	f04f 0e00 	mov.w	lr, #0
   1c894:	3c01      	subs	r4, #1
   1c896:	f300 80ab 	bgt.w	1c9f0 <__aeabi_dmul+0x238>
   1c89a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1c89e:	bfde      	ittt	le
   1c8a0:	2000      	movle	r0, #0
   1c8a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1c8a6:	bd70      	pople	{r4, r5, r6, pc}
   1c8a8:	f1c4 0400 	rsb	r4, r4, #0
   1c8ac:	3c20      	subs	r4, #32
   1c8ae:	da35      	bge.n	1c91c <__aeabi_dmul+0x164>
   1c8b0:	340c      	adds	r4, #12
   1c8b2:	dc1b      	bgt.n	1c8ec <__aeabi_dmul+0x134>
   1c8b4:	f104 0414 	add.w	r4, r4, #20
   1c8b8:	f1c4 0520 	rsb	r5, r4, #32
   1c8bc:	fa00 f305 	lsl.w	r3, r0, r5
   1c8c0:	fa20 f004 	lsr.w	r0, r0, r4
   1c8c4:	fa01 f205 	lsl.w	r2, r1, r5
   1c8c8:	ea40 0002 	orr.w	r0, r0, r2
   1c8cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   1c8d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1c8d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c8d8:	fa21 f604 	lsr.w	r6, r1, r4
   1c8dc:	eb42 0106 	adc.w	r1, r2, r6
   1c8e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c8e4:	bf08      	it	eq
   1c8e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c8ea:	bd70      	pop	{r4, r5, r6, pc}
   1c8ec:	f1c4 040c 	rsb	r4, r4, #12
   1c8f0:	f1c4 0520 	rsb	r5, r4, #32
   1c8f4:	fa00 f304 	lsl.w	r3, r0, r4
   1c8f8:	fa20 f005 	lsr.w	r0, r0, r5
   1c8fc:	fa01 f204 	lsl.w	r2, r1, r4
   1c900:	ea40 0002 	orr.w	r0, r0, r2
   1c904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c908:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1c90c:	f141 0100 	adc.w	r1, r1, #0
   1c910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c914:	bf08      	it	eq
   1c916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c91a:	bd70      	pop	{r4, r5, r6, pc}
   1c91c:	f1c4 0520 	rsb	r5, r4, #32
   1c920:	fa00 f205 	lsl.w	r2, r0, r5
   1c924:	ea4e 0e02 	orr.w	lr, lr, r2
   1c928:	fa20 f304 	lsr.w	r3, r0, r4
   1c92c:	fa01 f205 	lsl.w	r2, r1, r5
   1c930:	ea43 0302 	orr.w	r3, r3, r2
   1c934:	fa21 f004 	lsr.w	r0, r1, r4
   1c938:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c93c:	fa21 f204 	lsr.w	r2, r1, r4
   1c940:	ea20 0002 	bic.w	r0, r0, r2
   1c944:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1c948:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1c94c:	bf08      	it	eq
   1c94e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1c952:	bd70      	pop	{r4, r5, r6, pc}
   1c954:	f094 0f00 	teq	r4, #0
   1c958:	d10f      	bne.n	1c97a <__aeabi_dmul+0x1c2>
   1c95a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1c95e:	0040      	lsls	r0, r0, #1
   1c960:	eb41 0101 	adc.w	r1, r1, r1
   1c964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1c968:	bf08      	it	eq
   1c96a:	3c01      	subeq	r4, #1
   1c96c:	d0f7      	beq.n	1c95e <__aeabi_dmul+0x1a6>
   1c96e:	ea41 0106 	orr.w	r1, r1, r6
   1c972:	f095 0f00 	teq	r5, #0
   1c976:	bf18      	it	ne
   1c978:	4770      	bxne	lr
   1c97a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1c97e:	0052      	lsls	r2, r2, #1
   1c980:	eb43 0303 	adc.w	r3, r3, r3
   1c984:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1c988:	bf08      	it	eq
   1c98a:	3d01      	subeq	r5, #1
   1c98c:	d0f7      	beq.n	1c97e <__aeabi_dmul+0x1c6>
   1c98e:	ea43 0306 	orr.w	r3, r3, r6
   1c992:	4770      	bx	lr
   1c994:	ea94 0f0c 	teq	r4, ip
   1c998:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1c99c:	bf18      	it	ne
   1c99e:	ea95 0f0c 	teqne	r5, ip
   1c9a2:	d00c      	beq.n	1c9be <__aeabi_dmul+0x206>
   1c9a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9a8:	bf18      	it	ne
   1c9aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9ae:	d1d1      	bne.n	1c954 <__aeabi_dmul+0x19c>
   1c9b0:	ea81 0103 	eor.w	r1, r1, r3
   1c9b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9b8:	f04f 0000 	mov.w	r0, #0
   1c9bc:	bd70      	pop	{r4, r5, r6, pc}
   1c9be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1c9c2:	bf06      	itte	eq
   1c9c4:	4610      	moveq	r0, r2
   1c9c6:	4619      	moveq	r1, r3
   1c9c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1c9cc:	d019      	beq.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ce:	ea94 0f0c 	teq	r4, ip
   1c9d2:	d102      	bne.n	1c9da <__aeabi_dmul+0x222>
   1c9d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   1c9d8:	d113      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9da:	ea95 0f0c 	teq	r5, ip
   1c9de:	d105      	bne.n	1c9ec <__aeabi_dmul+0x234>
   1c9e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1c9e4:	bf1c      	itt	ne
   1c9e6:	4610      	movne	r0, r2
   1c9e8:	4619      	movne	r1, r3
   1c9ea:	d10a      	bne.n	1ca02 <__aeabi_dmul+0x24a>
   1c9ec:	ea81 0103 	eor.w	r1, r1, r3
   1c9f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1c9f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1c9f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1c9fc:	f04f 0000 	mov.w	r0, #0
   1ca00:	bd70      	pop	{r4, r5, r6, pc}
   1ca02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1ca06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1ca0a:	bd70      	pop	{r4, r5, r6, pc}

0001ca0c <__aeabi_ddiv>:
   1ca0c:	b570      	push	{r4, r5, r6, lr}
   1ca0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1ca12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1ca16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1ca1a:	bf1d      	ittte	ne
   1ca1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1ca20:	ea94 0f0c 	teqne	r4, ip
   1ca24:	ea95 0f0c 	teqne	r5, ip
   1ca28:	f000 f8a7 	bleq	1cb7a <__aeabi_ddiv+0x16e>
   1ca2c:	eba4 0405 	sub.w	r4, r4, r5
   1ca30:	ea81 0e03 	eor.w	lr, r1, r3
   1ca34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1ca38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1ca3c:	f000 8088 	beq.w	1cb50 <__aeabi_ddiv+0x144>
   1ca40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1ca44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1ca48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1ca4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1ca50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   1ca54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1ca58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1ca5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   1ca60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   1ca64:	429d      	cmp	r5, r3
   1ca66:	bf08      	it	eq
   1ca68:	4296      	cmpeq	r6, r2
   1ca6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1ca6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1ca72:	d202      	bcs.n	1ca7a <__aeabi_ddiv+0x6e>
   1ca74:	085b      	lsrs	r3, r3, #1
   1ca76:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca7a:	1ab6      	subs	r6, r6, r2
   1ca7c:	eb65 0503 	sbc.w	r5, r5, r3
   1ca80:	085b      	lsrs	r3, r3, #1
   1ca82:	ea4f 0232 	mov.w	r2, r2, rrx
   1ca86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1ca8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1ca8e:	ebb6 0e02 	subs.w	lr, r6, r2
   1ca92:	eb75 0e03 	sbcs.w	lr, r5, r3
   1ca96:	bf22      	ittt	cs
   1ca98:	1ab6      	subcs	r6, r6, r2
   1ca9a:	4675      	movcs	r5, lr
   1ca9c:	ea40 000c 	orrcs.w	r0, r0, ip
   1caa0:	085b      	lsrs	r3, r3, #1
   1caa2:	ea4f 0232 	mov.w	r2, r2, rrx
   1caa6:	ebb6 0e02 	subs.w	lr, r6, r2
   1caaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   1caae:	bf22      	ittt	cs
   1cab0:	1ab6      	subcs	r6, r6, r2
   1cab2:	4675      	movcs	r5, lr
   1cab4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   1cab8:	085b      	lsrs	r3, r3, #1
   1caba:	ea4f 0232 	mov.w	r2, r2, rrx
   1cabe:	ebb6 0e02 	subs.w	lr, r6, r2
   1cac2:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cac6:	bf22      	ittt	cs
   1cac8:	1ab6      	subcs	r6, r6, r2
   1caca:	4675      	movcs	r5, lr
   1cacc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   1cad0:	085b      	lsrs	r3, r3, #1
   1cad2:	ea4f 0232 	mov.w	r2, r2, rrx
   1cad6:	ebb6 0e02 	subs.w	lr, r6, r2
   1cada:	eb75 0e03 	sbcs.w	lr, r5, r3
   1cade:	bf22      	ittt	cs
   1cae0:	1ab6      	subcs	r6, r6, r2
   1cae2:	4675      	movcs	r5, lr
   1cae4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1cae8:	ea55 0e06 	orrs.w	lr, r5, r6
   1caec:	d018      	beq.n	1cb20 <__aeabi_ddiv+0x114>
   1caee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1caf2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1caf6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1cafa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1cafe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1cb02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1cb06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1cb0a:	d1c0      	bne.n	1ca8e <__aeabi_ddiv+0x82>
   1cb0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb10:	d10b      	bne.n	1cb2a <__aeabi_ddiv+0x11e>
   1cb12:	ea41 0100 	orr.w	r1, r1, r0
   1cb16:	f04f 0000 	mov.w	r0, #0
   1cb1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1cb1e:	e7b6      	b.n	1ca8e <__aeabi_ddiv+0x82>
   1cb20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1cb24:	bf04      	itt	eq
   1cb26:	4301      	orreq	r1, r0
   1cb28:	2000      	moveq	r0, #0
   1cb2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1cb2e:	bf88      	it	hi
   1cb30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1cb34:	f63f aeaf 	bhi.w	1c896 <__aeabi_dmul+0xde>
   1cb38:	ebb5 0c03 	subs.w	ip, r5, r3
   1cb3c:	bf04      	itt	eq
   1cb3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   1cb42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1cb46:	f150 0000 	adcs.w	r0, r0, #0
   1cb4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   1cb54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1cb58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1cb5c:	bfc2      	ittt	gt
   1cb5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   1cb62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1cb66:	bd70      	popgt	{r4, r5, r6, pc}
   1cb68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cb6c:	f04f 0e00 	mov.w	lr, #0
   1cb70:	3c01      	subs	r4, #1
   1cb72:	e690      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb74:	ea45 0e06 	orr.w	lr, r5, r6
   1cb78:	e68d      	b.n	1c896 <__aeabi_dmul+0xde>
   1cb7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1cb7e:	ea94 0f0c 	teq	r4, ip
   1cb82:	bf08      	it	eq
   1cb84:	ea95 0f0c 	teqeq	r5, ip
   1cb88:	f43f af3b 	beq.w	1ca02 <__aeabi_dmul+0x24a>
   1cb8c:	ea94 0f0c 	teq	r4, ip
   1cb90:	d10a      	bne.n	1cba8 <__aeabi_ddiv+0x19c>
   1cb92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1cb96:	f47f af34 	bne.w	1ca02 <__aeabi_dmul+0x24a>
   1cb9a:	ea95 0f0c 	teq	r5, ip
   1cb9e:	f47f af25 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cba2:	4610      	mov	r0, r2
   1cba4:	4619      	mov	r1, r3
   1cba6:	e72c      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cba8:	ea95 0f0c 	teq	r5, ip
   1cbac:	d106      	bne.n	1cbbc <__aeabi_ddiv+0x1b0>
   1cbae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1cbb2:	f43f aefd 	beq.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbb6:	4610      	mov	r0, r2
   1cbb8:	4619      	mov	r1, r3
   1cbba:	e722      	b.n	1ca02 <__aeabi_dmul+0x24a>
   1cbbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1cbc0:	bf18      	it	ne
   1cbc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1cbc6:	f47f aec5 	bne.w	1c954 <__aeabi_dmul+0x19c>
   1cbca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   1cbce:	f47f af0d 	bne.w	1c9ec <__aeabi_dmul+0x234>
   1cbd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   1cbd6:	f47f aeeb 	bne.w	1c9b0 <__aeabi_dmul+0x1f8>
   1cbda:	e712      	b.n	1ca02 <__aeabi_dmul+0x24a>

0001cbdc <__gedf2>:
   1cbdc:	f04f 3cff 	mov.w	ip, #4294967295
   1cbe0:	e006      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbe2:	bf00      	nop

0001cbe4 <__ledf2>:
   1cbe4:	f04f 0c01 	mov.w	ip, #1
   1cbe8:	e002      	b.n	1cbf0 <__cmpdf2+0x4>
   1cbea:	bf00      	nop

0001cbec <__cmpdf2>:
   1cbec:	f04f 0c01 	mov.w	ip, #1
   1cbf0:	f84d cd04 	str.w	ip, [sp, #-4]!
   1cbf4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cbf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cbfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc00:	bf18      	it	ne
   1cc02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   1cc06:	d01b      	beq.n	1cc40 <__cmpdf2+0x54>
   1cc08:	b001      	add	sp, #4
   1cc0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   1cc0e:	bf0c      	ite	eq
   1cc10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   1cc14:	ea91 0f03 	teqne	r1, r3
   1cc18:	bf02      	ittt	eq
   1cc1a:	ea90 0f02 	teqeq	r0, r2
   1cc1e:	2000      	moveq	r0, #0
   1cc20:	4770      	bxeq	lr
   1cc22:	f110 0f00 	cmn.w	r0, #0
   1cc26:	ea91 0f03 	teq	r1, r3
   1cc2a:	bf58      	it	pl
   1cc2c:	4299      	cmppl	r1, r3
   1cc2e:	bf08      	it	eq
   1cc30:	4290      	cmpeq	r0, r2
   1cc32:	bf2c      	ite	cs
   1cc34:	17d8      	asrcs	r0, r3, #31
   1cc36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1cc3a:	f040 0001 	orr.w	r0, r0, #1
   1cc3e:	4770      	bx	lr
   1cc40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1cc44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc48:	d102      	bne.n	1cc50 <__cmpdf2+0x64>
   1cc4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1cc4e:	d107      	bne.n	1cc60 <__cmpdf2+0x74>
   1cc50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1cc58:	d1d6      	bne.n	1cc08 <__cmpdf2+0x1c>
   1cc5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1cc5e:	d0d3      	beq.n	1cc08 <__cmpdf2+0x1c>
   1cc60:	f85d 0b04 	ldr.w	r0, [sp], #4
   1cc64:	4770      	bx	lr
   1cc66:	bf00      	nop

0001cc68 <__aeabi_cdrcmple>:
   1cc68:	4684      	mov	ip, r0
   1cc6a:	4610      	mov	r0, r2
   1cc6c:	4662      	mov	r2, ip
   1cc6e:	468c      	mov	ip, r1
   1cc70:	4619      	mov	r1, r3
   1cc72:	4663      	mov	r3, ip
   1cc74:	e000      	b.n	1cc78 <__aeabi_cdcmpeq>
   1cc76:	bf00      	nop

0001cc78 <__aeabi_cdcmpeq>:
   1cc78:	b501      	push	{r0, lr}
   1cc7a:	f7ff ffb7 	bl	1cbec <__cmpdf2>
   1cc7e:	2800      	cmp	r0, #0
   1cc80:	bf48      	it	mi
   1cc82:	f110 0f00 	cmnmi.w	r0, #0
   1cc86:	bd01      	pop	{r0, pc}

0001cc88 <__aeabi_dcmpeq>:
   1cc88:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cc8c:	f7ff fff4 	bl	1cc78 <__aeabi_cdcmpeq>
   1cc90:	bf0c      	ite	eq
   1cc92:	2001      	moveq	r0, #1
   1cc94:	2000      	movne	r0, #0
   1cc96:	f85d fb08 	ldr.w	pc, [sp], #8
   1cc9a:	bf00      	nop

0001cc9c <__aeabi_dcmplt>:
   1cc9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   1cca0:	f7ff ffea 	bl	1cc78 <__aeabi_cdcmpeq>
   1cca4:	bf34      	ite	cc
   1cca6:	2001      	movcc	r0, #1
   1cca8:	2000      	movcs	r0, #0
   1ccaa:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccae:	bf00      	nop

0001ccb0 <__aeabi_dcmple>:
   1ccb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccb4:	f7ff ffe0 	bl	1cc78 <__aeabi_cdcmpeq>
   1ccb8:	bf94      	ite	ls
   1ccba:	2001      	movls	r0, #1
   1ccbc:	2000      	movhi	r0, #0
   1ccbe:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccc2:	bf00      	nop

0001ccc4 <__aeabi_dcmpge>:
   1ccc4:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccc8:	f7ff ffce 	bl	1cc68 <__aeabi_cdrcmple>
   1cccc:	bf94      	ite	ls
   1ccce:	2001      	movls	r0, #1
   1ccd0:	2000      	movhi	r0, #0
   1ccd2:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccd6:	bf00      	nop

0001ccd8 <__aeabi_dcmpgt>:
   1ccd8:	f84d ed08 	str.w	lr, [sp, #-8]!
   1ccdc:	f7ff ffc4 	bl	1cc68 <__aeabi_cdrcmple>
   1cce0:	bf34      	ite	cc
   1cce2:	2001      	movcc	r0, #1
   1cce4:	2000      	movcs	r0, #0
   1cce6:	f85d fb08 	ldr.w	pc, [sp], #8
   1ccea:	bf00      	nop

0001ccec <__aeabi_d2iz>:
   1ccec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1ccf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1ccf4:	d215      	bcs.n	1cd22 <__aeabi_d2iz+0x36>
   1ccf6:	d511      	bpl.n	1cd1c <__aeabi_d2iz+0x30>
   1ccf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1ccfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd00:	d912      	bls.n	1cd28 <__aeabi_d2iz+0x3c>
   1cd02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   1cd12:	fa23 f002 	lsr.w	r0, r3, r2
   1cd16:	bf18      	it	ne
   1cd18:	4240      	negne	r0, r0
   1cd1a:	4770      	bx	lr
   1cd1c:	f04f 0000 	mov.w	r0, #0
   1cd20:	4770      	bx	lr
   1cd22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd26:	d105      	bne.n	1cd34 <__aeabi_d2iz+0x48>
   1cd28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1cd2c:	bf08      	it	eq
   1cd2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1cd32:	4770      	bx	lr
   1cd34:	f04f 0000 	mov.w	r0, #0
   1cd38:	4770      	bx	lr
   1cd3a:	bf00      	nop

0001cd3c <__aeabi_d2uiz>:
   1cd3c:	004a      	lsls	r2, r1, #1
   1cd3e:	d211      	bcs.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   1cd44:	d211      	bcs.n	1cd6a <__aeabi_d2uiz+0x2e>
   1cd46:	d50d      	bpl.n	1cd64 <__aeabi_d2uiz+0x28>
   1cd48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1cd4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   1cd50:	d40e      	bmi.n	1cd70 <__aeabi_d2uiz+0x34>
   1cd52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cd56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1cd5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1cd5e:	fa23 f002 	lsr.w	r0, r3, r2
   1cd62:	4770      	bx	lr
   1cd64:	f04f 0000 	mov.w	r0, #0
   1cd68:	4770      	bx	lr
   1cd6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   1cd6e:	d102      	bne.n	1cd76 <__aeabi_d2uiz+0x3a>
   1cd70:	f04f 30ff 	mov.w	r0, #4294967295
   1cd74:	4770      	bx	lr
   1cd76:	f04f 0000 	mov.w	r0, #0
   1cd7a:	4770      	bx	lr

0001cd7c <__aeabi_d2f>:
   1cd7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   1cd80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   1cd84:	bf24      	itt	cs
   1cd86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   1cd8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   1cd8e:	d90d      	bls.n	1cdac <__aeabi_d2f+0x30>
   1cd90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   1cd94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   1cd98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   1cd9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1cda0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   1cda4:	bf08      	it	eq
   1cda6:	f020 0001 	biceq.w	r0, r0, #1
   1cdaa:	4770      	bx	lr
   1cdac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   1cdb0:	d121      	bne.n	1cdf6 <__aeabi_d2f+0x7a>
   1cdb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   1cdb6:	bfbc      	itt	lt
   1cdb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   1cdbc:	4770      	bxlt	lr
   1cdbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1cdc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   1cdc6:	f1c2 0218 	rsb	r2, r2, #24
   1cdca:	f1c2 0c20 	rsb	ip, r2, #32
   1cdce:	fa10 f30c 	lsls.w	r3, r0, ip
   1cdd2:	fa20 f002 	lsr.w	r0, r0, r2
   1cdd6:	bf18      	it	ne
   1cdd8:	f040 0001 	orrne.w	r0, r0, #1
   1cddc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   1cde0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   1cde4:	fa03 fc0c 	lsl.w	ip, r3, ip
   1cde8:	ea40 000c 	orr.w	r0, r0, ip
   1cdec:	fa23 f302 	lsr.w	r3, r3, r2
   1cdf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   1cdf4:	e7cc      	b.n	1cd90 <__aeabi_d2f+0x14>
   1cdf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   1cdfa:	d107      	bne.n	1ce0c <__aeabi_d2f+0x90>
   1cdfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   1ce00:	bf1e      	ittt	ne
   1ce02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   1ce06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   1ce0a:	4770      	bxne	lr
   1ce0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   1ce10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1ce14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   1ce18:	4770      	bx	lr
   1ce1a:	bf00      	nop

0001ce1c <__aeabi_ldivmod>:
   1ce1c:	b97b      	cbnz	r3, 1ce3e <__aeabi_ldivmod+0x22>
   1ce1e:	b972      	cbnz	r2, 1ce3e <__aeabi_ldivmod+0x22>
   1ce20:	2900      	cmp	r1, #0
   1ce22:	bfbe      	ittt	lt
   1ce24:	2000      	movlt	r0, #0
   1ce26:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1ce2a:	e006      	blt.n	1ce3a <__aeabi_ldivmod+0x1e>
   1ce2c:	bf08      	it	eq
   1ce2e:	2800      	cmpeq	r0, #0
   1ce30:	bf1c      	itt	ne
   1ce32:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1ce36:	f04f 30ff 	movne.w	r0, #4294967295
   1ce3a:	f000 b9ed 	b.w	1d218 <__aeabi_idiv0>
   1ce3e:	f1ad 0c08 	sub.w	ip, sp, #8
   1ce42:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1ce46:	2900      	cmp	r1, #0
   1ce48:	db09      	blt.n	1ce5e <__aeabi_ldivmod+0x42>
   1ce4a:	2b00      	cmp	r3, #0
   1ce4c:	db1a      	blt.n	1ce84 <__aeabi_ldivmod+0x68>
   1ce4e:	f000 f883 	bl	1cf58 <__udivmoddi4>
   1ce52:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce5a:	b004      	add	sp, #16
   1ce5c:	4770      	bx	lr
   1ce5e:	4240      	negs	r0, r0
   1ce60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce64:	2b00      	cmp	r3, #0
   1ce66:	db1b      	blt.n	1cea0 <__aeabi_ldivmod+0x84>
   1ce68:	f000 f876 	bl	1cf58 <__udivmoddi4>
   1ce6c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce74:	b004      	add	sp, #16
   1ce76:	4240      	negs	r0, r0
   1ce78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce7c:	4252      	negs	r2, r2
   1ce7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce82:	4770      	bx	lr
   1ce84:	4252      	negs	r2, r2
   1ce86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ce8a:	f000 f865 	bl	1cf58 <__udivmoddi4>
   1ce8e:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ce92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ce96:	b004      	add	sp, #16
   1ce98:	4240      	negs	r0, r0
   1ce9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1ce9e:	4770      	bx	lr
   1cea0:	4252      	negs	r2, r2
   1cea2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1cea6:	f000 f857 	bl	1cf58 <__udivmoddi4>
   1ceaa:	f8dd e004 	ldr.w	lr, [sp, #4]
   1ceae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ceb2:	b004      	add	sp, #16
   1ceb4:	4252      	negs	r2, r2
   1ceb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1ceba:	4770      	bx	lr

0001cebc <__aeabi_uldivmod>:
   1cebc:	b953      	cbnz	r3, 1ced4 <__aeabi_uldivmod+0x18>
   1cebe:	b94a      	cbnz	r2, 1ced4 <__aeabi_uldivmod+0x18>
   1cec0:	2900      	cmp	r1, #0
   1cec2:	bf08      	it	eq
   1cec4:	2800      	cmpeq	r0, #0
   1cec6:	bf1c      	itt	ne
   1cec8:	f04f 31ff 	movne.w	r1, #4294967295
   1cecc:	f04f 30ff 	movne.w	r0, #4294967295
   1ced0:	f000 b9a2 	b.w	1d218 <__aeabi_idiv0>
   1ced4:	f1ad 0c08 	sub.w	ip, sp, #8
   1ced8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cedc:	f000 f83c 	bl	1cf58 <__udivmoddi4>
   1cee0:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cee8:	b004      	add	sp, #16
   1ceea:	4770      	bx	lr

0001ceec <__aeabi_d2lz>:
   1ceec:	b538      	push	{r3, r4, r5, lr}
   1ceee:	2200      	movs	r2, #0
   1cef0:	2300      	movs	r3, #0
   1cef2:	4604      	mov	r4, r0
   1cef4:	460d      	mov	r5, r1
   1cef6:	f7ff fed1 	bl	1cc9c <__aeabi_dcmplt>
   1cefa:	b928      	cbnz	r0, 1cf08 <__aeabi_d2lz+0x1c>
   1cefc:	4620      	mov	r0, r4
   1cefe:	4629      	mov	r1, r5
   1cf00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1cf04:	f000 b80a 	b.w	1cf1c <__aeabi_d2ulz>
   1cf08:	4620      	mov	r0, r4
   1cf0a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   1cf0e:	f000 f805 	bl	1cf1c <__aeabi_d2ulz>
   1cf12:	4240      	negs	r0, r0
   1cf14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1cf18:	bd38      	pop	{r3, r4, r5, pc}
   1cf1a:	bf00      	nop

0001cf1c <__aeabi_d2ulz>:
   1cf1c:	b5d0      	push	{r4, r6, r7, lr}
   1cf1e:	2200      	movs	r2, #0
   1cf20:	4b0b      	ldr	r3, [pc, #44]	; (1cf50 <__aeabi_d2ulz+0x34>)
   1cf22:	4606      	mov	r6, r0
   1cf24:	460f      	mov	r7, r1
   1cf26:	f7ff fc47 	bl	1c7b8 <__aeabi_dmul>
   1cf2a:	f7ff ff07 	bl	1cd3c <__aeabi_d2uiz>
   1cf2e:	4604      	mov	r4, r0
   1cf30:	f7ff fbc8 	bl	1c6c4 <__aeabi_ui2d>
   1cf34:	2200      	movs	r2, #0
   1cf36:	4b07      	ldr	r3, [pc, #28]	; (1cf54 <__aeabi_d2ulz+0x38>)
   1cf38:	f7ff fc3e 	bl	1c7b8 <__aeabi_dmul>
   1cf3c:	4602      	mov	r2, r0
   1cf3e:	460b      	mov	r3, r1
   1cf40:	4630      	mov	r0, r6
   1cf42:	4639      	mov	r1, r7
   1cf44:	f7ff fa80 	bl	1c448 <__aeabi_dsub>
   1cf48:	f7ff fef8 	bl	1cd3c <__aeabi_d2uiz>
   1cf4c:	4621      	mov	r1, r4
   1cf4e:	bdd0      	pop	{r4, r6, r7, pc}
   1cf50:	3df00000 	.word	0x3df00000
   1cf54:	41f00000 	.word	0x41f00000

0001cf58 <__udivmoddi4>:
   1cf58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf5c:	9d08      	ldr	r5, [sp, #32]
   1cf5e:	4604      	mov	r4, r0
   1cf60:	4688      	mov	r8, r1
   1cf62:	2b00      	cmp	r3, #0
   1cf64:	d17d      	bne.n	1d062 <__udivmoddi4+0x10a>
   1cf66:	428a      	cmp	r2, r1
   1cf68:	4617      	mov	r7, r2
   1cf6a:	d93f      	bls.n	1cfec <__udivmoddi4+0x94>
   1cf6c:	fab2 f282 	clz	r2, r2
   1cf70:	b142      	cbz	r2, 1cf84 <__udivmoddi4+0x2c>
   1cf72:	f1c2 0020 	rsb	r0, r2, #32
   1cf76:	4091      	lsls	r1, r2
   1cf78:	4097      	lsls	r7, r2
   1cf7a:	fa24 f000 	lsr.w	r0, r4, r0
   1cf7e:	4094      	lsls	r4, r2
   1cf80:	ea40 0801 	orr.w	r8, r0, r1
   1cf84:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   1cf88:	0c23      	lsrs	r3, r4, #16
   1cf8a:	fa1f fe87 	uxth.w	lr, r7
   1cf8e:	fbb8 f6fc 	udiv	r6, r8, ip
   1cf92:	fb0c 8116 	mls	r1, ip, r6, r8
   1cf96:	fb06 f00e 	mul.w	r0, r6, lr
   1cf9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1cf9e:	4298      	cmp	r0, r3
   1cfa0:	d905      	bls.n	1cfae <__udivmoddi4+0x56>
   1cfa2:	18fb      	adds	r3, r7, r3
   1cfa4:	d202      	bcs.n	1cfac <__udivmoddi4+0x54>
   1cfa6:	4298      	cmp	r0, r3
   1cfa8:	f200 8124 	bhi.w	1d1f4 <__udivmoddi4+0x29c>
   1cfac:	3e01      	subs	r6, #1
   1cfae:	1a19      	subs	r1, r3, r0
   1cfb0:	b2a3      	uxth	r3, r4
   1cfb2:	fbb1 f0fc 	udiv	r0, r1, ip
   1cfb6:	fb0c 1110 	mls	r1, ip, r0, r1
   1cfba:	fb00 fe0e 	mul.w	lr, r0, lr
   1cfbe:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1cfc2:	45a6      	cmp	lr, r4
   1cfc4:	d905      	bls.n	1cfd2 <__udivmoddi4+0x7a>
   1cfc6:	193c      	adds	r4, r7, r4
   1cfc8:	d202      	bcs.n	1cfd0 <__udivmoddi4+0x78>
   1cfca:	45a6      	cmp	lr, r4
   1cfcc:	f200 810f 	bhi.w	1d1ee <__udivmoddi4+0x296>
   1cfd0:	3801      	subs	r0, #1
   1cfd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1cfd6:	eba4 040e 	sub.w	r4, r4, lr
   1cfda:	2600      	movs	r6, #0
   1cfdc:	b11d      	cbz	r5, 1cfe6 <__udivmoddi4+0x8e>
   1cfde:	40d4      	lsrs	r4, r2
   1cfe0:	2300      	movs	r3, #0
   1cfe2:	e9c5 4300 	strd	r4, r3, [r5]
   1cfe6:	4631      	mov	r1, r6
   1cfe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1cfec:	b902      	cbnz	r2, 1cff0 <__udivmoddi4+0x98>
   1cfee:	deff      	udf	#255	; 0xff
   1cff0:	fab2 f282 	clz	r2, r2
   1cff4:	2a00      	cmp	r2, #0
   1cff6:	d150      	bne.n	1d09a <__udivmoddi4+0x142>
   1cff8:	1bcb      	subs	r3, r1, r7
   1cffa:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1cffe:	fa1f f887 	uxth.w	r8, r7
   1d002:	2601      	movs	r6, #1
   1d004:	0c21      	lsrs	r1, r4, #16
   1d006:	fbb3 fcfe 	udiv	ip, r3, lr
   1d00a:	fb0e 301c 	mls	r0, lr, ip, r3
   1d00e:	460b      	mov	r3, r1
   1d010:	fb08 f90c 	mul.w	r9, r8, ip
   1d014:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
   1d018:	4589      	cmp	r9, r1
   1d01a:	d90a      	bls.n	1d032 <__udivmoddi4+0xda>
   1d01c:	1879      	adds	r1, r7, r1
   1d01e:	bf2c      	ite	cs
   1d020:	2301      	movcs	r3, #1
   1d022:	2300      	movcc	r3, #0
   1d024:	4589      	cmp	r9, r1
   1d026:	d902      	bls.n	1d02e <__udivmoddi4+0xd6>
   1d028:	2b00      	cmp	r3, #0
   1d02a:	f000 80d9 	beq.w	1d1e0 <__udivmoddi4+0x288>
   1d02e:	f10c 3cff 	add.w	ip, ip, #4294967295
   1d032:	eba1 0109 	sub.w	r1, r1, r9
   1d036:	b2a3      	uxth	r3, r4
   1d038:	fbb1 f0fe 	udiv	r0, r1, lr
   1d03c:	fb0e 1110 	mls	r1, lr, r0, r1
   1d040:	fb08 f800 	mul.w	r8, r8, r0
   1d044:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   1d048:	45a0      	cmp	r8, r4
   1d04a:	d905      	bls.n	1d058 <__udivmoddi4+0x100>
   1d04c:	193c      	adds	r4, r7, r4
   1d04e:	d202      	bcs.n	1d056 <__udivmoddi4+0xfe>
   1d050:	45a0      	cmp	r8, r4
   1d052:	f200 80c9 	bhi.w	1d1e8 <__udivmoddi4+0x290>
   1d056:	3801      	subs	r0, #1
   1d058:	eba4 0408 	sub.w	r4, r4, r8
   1d05c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d060:	e7bc      	b.n	1cfdc <__udivmoddi4+0x84>
   1d062:	428b      	cmp	r3, r1
   1d064:	d909      	bls.n	1d07a <__udivmoddi4+0x122>
   1d066:	2d00      	cmp	r5, #0
   1d068:	f000 80b1 	beq.w	1d1ce <__udivmoddi4+0x276>
   1d06c:	2600      	movs	r6, #0
   1d06e:	e9c5 0100 	strd	r0, r1, [r5]
   1d072:	4630      	mov	r0, r6
   1d074:	4631      	mov	r1, r6
   1d076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d07a:	fab3 f683 	clz	r6, r3
   1d07e:	2e00      	cmp	r6, #0
   1d080:	d146      	bne.n	1d110 <__udivmoddi4+0x1b8>
   1d082:	428b      	cmp	r3, r1
   1d084:	f0c0 80a6 	bcc.w	1d1d4 <__udivmoddi4+0x27c>
   1d088:	4282      	cmp	r2, r0
   1d08a:	f240 80a3 	bls.w	1d1d4 <__udivmoddi4+0x27c>
   1d08e:	4630      	mov	r0, r6
   1d090:	2d00      	cmp	r5, #0
   1d092:	d0a8      	beq.n	1cfe6 <__udivmoddi4+0x8e>
   1d094:	e9c5 4800 	strd	r4, r8, [r5]
   1d098:	e7a5      	b.n	1cfe6 <__udivmoddi4+0x8e>
   1d09a:	4097      	lsls	r7, r2
   1d09c:	f1c2 0320 	rsb	r3, r2, #32
   1d0a0:	fa01 f002 	lsl.w	r0, r1, r2
   1d0a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   1d0a8:	40d9      	lsrs	r1, r3
   1d0aa:	fa24 f303 	lsr.w	r3, r4, r3
   1d0ae:	fa1f f887 	uxth.w	r8, r7
   1d0b2:	4094      	lsls	r4, r2
   1d0b4:	4303      	orrs	r3, r0
   1d0b6:	fbb1 f0fe 	udiv	r0, r1, lr
   1d0ba:	0c1e      	lsrs	r6, r3, #16
   1d0bc:	fb0e 1110 	mls	r1, lr, r0, r1
   1d0c0:	fb00 fc08 	mul.w	ip, r0, r8
   1d0c4:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   1d0c8:	458c      	cmp	ip, r1
   1d0ca:	d909      	bls.n	1d0e0 <__udivmoddi4+0x188>
   1d0cc:	1879      	adds	r1, r7, r1
   1d0ce:	bf2c      	ite	cs
   1d0d0:	2601      	movcs	r6, #1
   1d0d2:	2600      	movcc	r6, #0
   1d0d4:	458c      	cmp	ip, r1
   1d0d6:	d902      	bls.n	1d0de <__udivmoddi4+0x186>
   1d0d8:	2e00      	cmp	r6, #0
   1d0da:	f000 8093 	beq.w	1d204 <__udivmoddi4+0x2ac>
   1d0de:	3801      	subs	r0, #1
   1d0e0:	eba1 010c 	sub.w	r1, r1, ip
   1d0e4:	b29b      	uxth	r3, r3
   1d0e6:	fbb1 f6fe 	udiv	r6, r1, lr
   1d0ea:	fb0e 1116 	mls	r1, lr, r6, r1
   1d0ee:	fb06 fc08 	mul.w	ip, r6, r8
   1d0f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1d0f6:	458c      	cmp	ip, r1
   1d0f8:	d905      	bls.n	1d106 <__udivmoddi4+0x1ae>
   1d0fa:	1879      	adds	r1, r7, r1
   1d0fc:	d202      	bcs.n	1d104 <__udivmoddi4+0x1ac>
   1d0fe:	458c      	cmp	ip, r1
   1d100:	f200 8087 	bhi.w	1d212 <__udivmoddi4+0x2ba>
   1d104:	3e01      	subs	r6, #1
   1d106:	eba1 030c 	sub.w	r3, r1, ip
   1d10a:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   1d10e:	e779      	b.n	1d004 <__udivmoddi4+0xac>
   1d110:	f1c6 0720 	rsb	r7, r6, #32
   1d114:	fa03 f406 	lsl.w	r4, r3, r6
   1d118:	fa02 fc06 	lsl.w	ip, r2, r6
   1d11c:	fa01 fe06 	lsl.w	lr, r1, r6
   1d120:	40fa      	lsrs	r2, r7
   1d122:	fa20 f807 	lsr.w	r8, r0, r7
   1d126:	40f9      	lsrs	r1, r7
   1d128:	fa00 f306 	lsl.w	r3, r0, r6
   1d12c:	4322      	orrs	r2, r4
   1d12e:	ea48 040e 	orr.w	r4, r8, lr
   1d132:	ea4f 4812 	mov.w	r8, r2, lsr #16
   1d136:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   1d13a:	fa1f f982 	uxth.w	r9, r2
   1d13e:	fbb1 faf8 	udiv	sl, r1, r8
   1d142:	fb08 111a 	mls	r1, r8, sl, r1
   1d146:	fb0a f009 	mul.w	r0, sl, r9
   1d14a:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
   1d14e:	4570      	cmp	r0, lr
   1d150:	d90a      	bls.n	1d168 <__udivmoddi4+0x210>
   1d152:	eb12 0e0e 	adds.w	lr, r2, lr
   1d156:	bf2c      	ite	cs
   1d158:	2101      	movcs	r1, #1
   1d15a:	2100      	movcc	r1, #0
   1d15c:	4570      	cmp	r0, lr
   1d15e:	d901      	bls.n	1d164 <__udivmoddi4+0x20c>
   1d160:	2900      	cmp	r1, #0
   1d162:	d052      	beq.n	1d20a <__udivmoddi4+0x2b2>
   1d164:	f10a 3aff 	add.w	sl, sl, #4294967295
   1d168:	ebae 0e00 	sub.w	lr, lr, r0
   1d16c:	b2a4      	uxth	r4, r4
   1d16e:	fbbe f0f8 	udiv	r0, lr, r8
   1d172:	fb08 ee10 	mls	lr, r8, r0, lr
   1d176:	fb00 f909 	mul.w	r9, r0, r9
   1d17a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
   1d17e:	45f1      	cmp	r9, lr
   1d180:	d905      	bls.n	1d18e <__udivmoddi4+0x236>
   1d182:	eb12 0e0e 	adds.w	lr, r2, lr
   1d186:	d201      	bcs.n	1d18c <__udivmoddi4+0x234>
   1d188:	45f1      	cmp	r9, lr
   1d18a:	d838      	bhi.n	1d1fe <__udivmoddi4+0x2a6>
   1d18c:	3801      	subs	r0, #1
   1d18e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
   1d192:	ebae 0e09 	sub.w	lr, lr, r9
   1d196:	fba0 890c 	umull	r8, r9, r0, ip
   1d19a:	45ce      	cmp	lr, r9
   1d19c:	4641      	mov	r1, r8
   1d19e:	464c      	mov	r4, r9
   1d1a0:	d302      	bcc.n	1d1a8 <__udivmoddi4+0x250>
   1d1a2:	d106      	bne.n	1d1b2 <__udivmoddi4+0x25a>
   1d1a4:	4543      	cmp	r3, r8
   1d1a6:	d204      	bcs.n	1d1b2 <__udivmoddi4+0x25a>
   1d1a8:	3801      	subs	r0, #1
   1d1aa:	ebb8 010c 	subs.w	r1, r8, ip
   1d1ae:	eb69 0402 	sbc.w	r4, r9, r2
   1d1b2:	b315      	cbz	r5, 1d1fa <__udivmoddi4+0x2a2>
   1d1b4:	1a5a      	subs	r2, r3, r1
   1d1b6:	eb6e 0e04 	sbc.w	lr, lr, r4
   1d1ba:	40f2      	lsrs	r2, r6
   1d1bc:	fa0e f707 	lsl.w	r7, lr, r7
   1d1c0:	fa2e f306 	lsr.w	r3, lr, r6
   1d1c4:	2600      	movs	r6, #0
   1d1c6:	4317      	orrs	r7, r2
   1d1c8:	e9c5 7300 	strd	r7, r3, [r5]
   1d1cc:	e70b      	b.n	1cfe6 <__udivmoddi4+0x8e>
   1d1ce:	462e      	mov	r6, r5
   1d1d0:	4628      	mov	r0, r5
   1d1d2:	e708      	b.n	1cfe6 <__udivmoddi4+0x8e>
   1d1d4:	1a84      	subs	r4, r0, r2
   1d1d6:	eb61 0103 	sbc.w	r1, r1, r3
   1d1da:	2001      	movs	r0, #1
   1d1dc:	4688      	mov	r8, r1
   1d1de:	e757      	b.n	1d090 <__udivmoddi4+0x138>
   1d1e0:	f1ac 0c02 	sub.w	ip, ip, #2
   1d1e4:	4439      	add	r1, r7
   1d1e6:	e724      	b.n	1d032 <__udivmoddi4+0xda>
   1d1e8:	3802      	subs	r0, #2
   1d1ea:	443c      	add	r4, r7
   1d1ec:	e734      	b.n	1d058 <__udivmoddi4+0x100>
   1d1ee:	3802      	subs	r0, #2
   1d1f0:	443c      	add	r4, r7
   1d1f2:	e6ee      	b.n	1cfd2 <__udivmoddi4+0x7a>
   1d1f4:	3e02      	subs	r6, #2
   1d1f6:	443b      	add	r3, r7
   1d1f8:	e6d9      	b.n	1cfae <__udivmoddi4+0x56>
   1d1fa:	462e      	mov	r6, r5
   1d1fc:	e6f3      	b.n	1cfe6 <__udivmoddi4+0x8e>
   1d1fe:	3802      	subs	r0, #2
   1d200:	4496      	add	lr, r2
   1d202:	e7c4      	b.n	1d18e <__udivmoddi4+0x236>
   1d204:	3802      	subs	r0, #2
   1d206:	4439      	add	r1, r7
   1d208:	e76a      	b.n	1d0e0 <__udivmoddi4+0x188>
   1d20a:	f1aa 0a02 	sub.w	sl, sl, #2
   1d20e:	4496      	add	lr, r2
   1d210:	e7aa      	b.n	1d168 <__udivmoddi4+0x210>
   1d212:	3e02      	subs	r6, #2
   1d214:	4439      	add	r1, r7
   1d216:	e776      	b.n	1d106 <__udivmoddi4+0x1ae>

0001d218 <__aeabi_idiv0>:
   1d218:	4770      	bx	lr
   1d21a:	bf00      	nop

0001d21c <__aeabi_dcmpun>:
   1d21c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   1d220:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d224:	d102      	bne.n	1d22c <__aeabi_dcmpun+0x10>
   1d226:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   1d22a:	d10a      	bne.n	1d242 <__aeabi_dcmpun+0x26>
   1d22c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   1d230:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1d234:	d102      	bne.n	1d23c <__aeabi_dcmpun+0x20>
   1d236:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   1d23a:	d102      	bne.n	1d242 <__aeabi_dcmpun+0x26>
   1d23c:	f04f 0000 	mov.w	r0, #0
   1d240:	4770      	bx	lr
   1d242:	f04f 0001 	mov.w	r0, #1
   1d246:	4770      	bx	lr

0001d248 <strcmp>:
   1d248:	f810 2b01 	ldrb.w	r2, [r0], #1
   1d24c:	f811 3b01 	ldrb.w	r3, [r1], #1
   1d250:	2a01      	cmp	r2, #1
   1d252:	bf28      	it	cs
   1d254:	429a      	cmpcs	r2, r3
   1d256:	d0f7      	beq.n	1d248 <strcmp>
   1d258:	1ad0      	subs	r0, r2, r3
   1d25a:	4770      	bx	lr

0001d25c <strlen>:
   1d25c:	4603      	mov	r3, r0
   1d25e:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d262:	2a00      	cmp	r2, #0
   1d264:	d1fb      	bne.n	1d25e <strlen+0x2>
   1d266:	1a18      	subs	r0, r3, r0
   1d268:	3801      	subs	r0, #1
   1d26a:	4770      	bx	lr
   1d26c:	0000      	movs	r0, r0
	...

0001d270 <motion_work_q_handler>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
}

/**@brief Workqueue handler that runs the callback provided by application.*/
static void motion_work_q_handler(struct k_work *work)
{
   1d270:	b570      	push	{r4, r5, r6, lr}
   1d272:	b096      	sub	sp, #88	; 0x58
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   1d274:	f024 fc30 	bl	41ad8 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1d278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d27c:	460a      	mov	r2, r1
   1d27e:	fba0 0103 	umull	r0, r1, r0, r3
   1d282:	fb03 1102 	mla	r1, r3, r2, r1
		err = sensor_sample_fetch_chan(accel_dev,
   1d286:	4c4e      	ldr	r4, [pc, #312]	; (1d3c0 <motion_work_q_handler+0x150>)
   1d288:	0bc3      	lsrs	r3, r0, #15
   1d28a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1d28e:	0bca      	lsrs	r2, r1, #15
	motion_data_t motion_data;

	motion_data.ts = k_uptime_get();
   1d290:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
		err = sensor_sample_fetch_chan(accel_dev,
   1d294:	6820      	ldr	r0, [r4, #0]
						  enum sensor_channel type)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, type);
   1d296:	6883      	ldr	r3, [r0, #8]
   1d298:	2103      	movs	r1, #3
   1d29a:	68db      	ldr	r3, [r3, #12]
   1d29c:	4798      	blx	r3
	if (err) {
   1d29e:	4601      	mov	r1, r0
   1d2a0:	b158      	cbz	r0, 1d2ba <motion_work_q_handler+0x4a>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   1d2a2:	4848      	ldr	r0, [pc, #288]	; (1d3c4 <motion_work_q_handler+0x154>)
   1d2a4:	4b48      	ldr	r3, [pc, #288]	; (1d3c8 <motion_work_q_handler+0x158>)
		LOG_ERR("sensor_sample_fetch failed");
   1d2a6:	4949      	ldr	r1, [pc, #292]	; (1d3cc <motion_work_q_handler+0x15c>)
   1d2a8:	1ac0      	subs	r0, r0, r3
   1d2aa:	08c0      	lsrs	r0, r0, #3
   1d2ac:	0180      	lsls	r0, r0, #6
		LOG_ERR("sensor_channel_get failed");
   1d2ae:	f040 0001 	orr.w	r0, r0, #1
   1d2b2:	f020 f825 	bl	3d300 <log_string_sync>
		if (get_orientation(&motion_data.orientation,
					&motion_data.acceleration) == 0) {
			handler(motion_data);
		}
	}
}
   1d2b6:	b016      	add	sp, #88	; 0x58
   1d2b8:	bd70      	pop	{r4, r5, r6, pc}
	err = sensor_channel_get(accel_dev,
   1d2ba:	6820      	ldr	r0, [r4, #0]
   1d2bc:	aa06      	add	r2, sp, #24
   1d2be:	f01f fce3 	bl	3cc88 <sensor_channel_get>
	if (err) {
   1d2c2:	b130      	cbz	r0, 1d2d2 <motion_work_q_handler+0x62>
   1d2c4:	483f      	ldr	r0, [pc, #252]	; (1d3c4 <motion_work_q_handler+0x154>)
   1d2c6:	4b40      	ldr	r3, [pc, #256]	; (1d3c8 <motion_work_q_handler+0x158>)
		LOG_ERR("sensor_channel_get failed");
   1d2c8:	4941      	ldr	r1, [pc, #260]	; (1d3d0 <motion_work_q_handler+0x160>)
   1d2ca:	1ac0      	subs	r0, r0, r3
   1d2cc:	08c0      	lsrs	r0, r0, #3
   1d2ce:	0180      	lsls	r0, r0, #6
   1d2d0:	e7ed      	b.n	1d2ae <motion_work_q_handler+0x3e>
	err = sensor_channel_get(accel_dev,
   1d2d2:	2101      	movs	r1, #1
   1d2d4:	6820      	ldr	r0, [r4, #0]
   1d2d6:	aa08      	add	r2, sp, #32
   1d2d8:	f01f fcd6 	bl	3cc88 <sensor_channel_get>
	if (err) {
   1d2dc:	2800      	cmp	r0, #0
   1d2de:	d1f1      	bne.n	1d2c4 <motion_work_q_handler+0x54>
	err = sensor_channel_get(accel_dev,
   1d2e0:	2102      	movs	r1, #2
   1d2e2:	6820      	ldr	r0, [r4, #0]
   1d2e4:	aa0a      	add	r2, sp, #40	; 0x28
   1d2e6:	f01f fccf 	bl	3cc88 <sensor_channel_get>
	if (err) {
   1d2ea:	2800      	cmp	r0, #0
   1d2ec:	d1ea      	bne.n	1d2c4 <motion_work_q_handler+0x54>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d2ee:	9807      	ldr	r0, [sp, #28]
   1d2f0:	f7ff f9f8 	bl	1c6e4 <__aeabi_i2d>
   1d2f4:	a330      	add	r3, pc, #192	; (adr r3, 1d3b8 <motion_work_q_handler+0x148>)
   1d2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d2fa:	f7ff fb87 	bl	1ca0c <__aeabi_ddiv>
   1d2fe:	4604      	mov	r4, r0
   1d300:	9806      	ldr	r0, [sp, #24]
   1d302:	460d      	mov	r5, r1
   1d304:	f7ff f9ee 	bl	1c6e4 <__aeabi_i2d>
   1d308:	4602      	mov	r2, r0
   1d30a:	460b      	mov	r3, r1
   1d30c:	4620      	mov	r0, r4
   1d30e:	4629      	mov	r1, r5
   1d310:	f7ff f89c 	bl	1c44c <__adddf3>
	sensor_data->x = sensor_value_to_double(&accel_data[0]);
   1d314:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   1d318:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d31a:	f7ff f9e3 	bl	1c6e4 <__aeabi_i2d>
   1d31e:	a326      	add	r3, pc, #152	; (adr r3, 1d3b8 <motion_work_q_handler+0x148>)
   1d320:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d324:	f7ff fb72 	bl	1ca0c <__aeabi_ddiv>
   1d328:	4604      	mov	r4, r0
   1d32a:	9808      	ldr	r0, [sp, #32]
   1d32c:	460d      	mov	r5, r1
   1d32e:	f7ff f9d9 	bl	1c6e4 <__aeabi_i2d>
   1d332:	4602      	mov	r2, r0
   1d334:	460b      	mov	r3, r1
   1d336:	4620      	mov	r0, r4
   1d338:	4629      	mov	r1, r5
   1d33a:	f7ff f887 	bl	1c44c <__adddf3>
	sensor_data->y = sensor_value_to_double(&accel_data[1]);
   1d33e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1d342:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1d344:	f7ff f9ce 	bl	1c6e4 <__aeabi_i2d>
   1d348:	a31b      	add	r3, pc, #108	; (adr r3, 1d3b8 <motion_work_q_handler+0x148>)
   1d34a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d34e:	f7ff fb5d 	bl	1ca0c <__aeabi_ddiv>
   1d352:	4604      	mov	r4, r0
   1d354:	980a      	ldr	r0, [sp, #40]	; 0x28
   1d356:	460d      	mov	r5, r1
   1d358:	f7ff f9c4 	bl	1c6e4 <__aeabi_i2d>
   1d35c:	4602      	mov	r2, r0
   1d35e:	460b      	mov	r3, r1
   1d360:	4620      	mov	r0, r4
   1d362:	4629      	mov	r1, r5
   1d364:	f7ff f872 	bl	1c44c <__adddf3>
	if (acceleration_data->z >= FLIP_ACCELERATION_THRESHOLD) {
   1d368:	2200      	movs	r2, #0
   1d36a:	4b1a      	ldr	r3, [pc, #104]	; (1d3d4 <motion_work_q_handler+0x164>)
   1d36c:	4604      	mov	r4, r0
   1d36e:	460d      	mov	r5, r1
   1d370:	f7ff fca8 	bl	1ccc4 <__aeabi_dcmpge>
   1d374:	b190      	cbz	r0, 1d39c <motion_work_q_handler+0x12c>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d376:	2301      	movs	r3, #1
			handler(motion_data);
   1d378:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
   1d37c:	466c      	mov	r4, sp
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d37e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			handler(motion_data);
   1d382:	4b15      	ldr	r3, [pc, #84]	; (1d3d8 <motion_work_q_handler+0x168>)
   1d384:	ad10      	add	r5, sp, #64	; 0x40
   1d386:	681e      	ldr	r6, [r3, #0]
   1d388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d38a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d38c:	e895 0003 	ldmia.w	r5, {r0, r1}
   1d390:	e884 0003 	stmia.w	r4, {r0, r1}
   1d394:	ab0c      	add	r3, sp, #48	; 0x30
   1d396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1d398:	47b0      	blx	r6
}
   1d39a:	e78c      	b.n	1d2b6 <motion_work_q_handler+0x46>
	} else if (acceleration_data->z <= -FLIP_ACCELERATION_THRESHOLD) {
   1d39c:	2200      	movs	r2, #0
   1d39e:	4620      	mov	r0, r4
   1d3a0:	4629      	mov	r1, r5
   1d3a2:	4b0e      	ldr	r3, [pc, #56]	; (1d3dc <motion_work_q_handler+0x16c>)
   1d3a4:	f7ff fc84 	bl	1ccb0 <__aeabi_dcmple>
   1d3a8:	b108      	cbz	r0, 1d3ae <motion_work_q_handler+0x13e>
		*orientation = IS_ENABLED(CONFIG_ACCEL_INVERTED) ?
   1d3aa:	2302      	movs	r3, #2
   1d3ac:	e7e4      	b.n	1d378 <motion_work_q_handler+0x108>
		*orientation = MOTION_ORIENTATION_ON_SIDE;
   1d3ae:	2303      	movs	r3, #3
   1d3b0:	e7e2      	b.n	1d378 <motion_work_q_handler+0x108>
   1d3b2:	bf00      	nop
   1d3b4:	f3af 8000 	nop.w
   1d3b8:	00000000 	.word	0x00000000
   1d3bc:	412e8480 	.word	0x412e8480
   1d3c0:	20018c50 	.word	0x20018c50
   1d3c4:	00043464 	.word	0x00043464
   1d3c8:	0004339c 	.word	0x0004339c
   1d3cc:	00044f58 	.word	0x00044f58
   1d3d0:	00044f73 	.word	0x00044f73
   1d3d4:	40140000 	.word	0x40140000
   1d3d8:	20018c54 	.word	0x20018c54
   1d3dc:	c0140000 	.word	0xc0140000

0001d3e0 <env_sensors_poll_fn>:
{
	return initialized ? submit_poll_work(0) : -ENXIO;
}

static void env_sensors_poll_fn(struct k_work *work)
{
   1d3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3e4:	b08b      	sub	sp, #44	; 0x2c
	int num_sensors = ARRAY_SIZE(env_sensors);
	struct sensor_value data[num_sensors];

	int err;

	if (data_send_interval_s == 0) {
   1d3e6:	4b5e      	ldr	r3, [pc, #376]	; (1d560 <env_sensors_poll_fn+0x180>)
{
   1d3e8:	af00      	add	r7, sp, #0
	if (data_send_interval_s == 0) {
   1d3ea:	681a      	ldr	r2, [r3, #0]
{
   1d3ec:	46eb      	mov	fp, sp
	if (data_send_interval_s == 0) {
   1d3ee:	607b      	str	r3, [r7, #4]
   1d3f0:	2a00      	cmp	r2, #0
   1d3f2:	d046      	beq.n	1d482 <env_sensors_poll_fn+0xa2>
   1d3f4:	4b5b      	ldr	r3, [pc, #364]	; (1d564 <env_sensors_poll_fn+0x184>)
   1d3f6:	4c5c      	ldr	r4, [pc, #368]	; (1d568 <env_sensors_poll_fn+0x188>)
   1d3f8:	4d5c      	ldr	r5, [pc, #368]	; (1d56c <env_sensors_poll_fn+0x18c>)
   1d3fa:	1ae4      	subs	r4, r4, r3
   1d3fc:	2303      	movs	r3, #3
   1d3fe:	08e4      	lsrs	r4, r4, #3
	for (int i = 0; i < num_sensors; i++) {
		if (!(IS_ENABLED(CONFIG_BME680))) {
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
				env_sensors[i]->channel);
			if (err) {
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d400:	01a4      	lsls	r4, r4, #6
   1d402:	f107 0610 	add.w	r6, r7, #16
   1d406:	60fb      	str	r3, [r7, #12]
   1d408:	f044 0401 	orr.w	r4, r4, #1
			err = sensor_sample_fetch_chan(env_sensors[i]->dev,
   1d40c:	f855 3b04 	ldr.w	r3, [r5], #4
   1d410:	6a18      	ldr	r0, [r3, #32]
   1d412:	8b19      	ldrh	r1, [r3, #24]
	return api->sample_fetch(dev, type);
   1d414:	6883      	ldr	r3, [r0, #8]
   1d416:	68db      	ldr	r3, [r3, #12]
   1d418:	4798      	blx	r3
			if (err) {
   1d41a:	4680      	mov	r8, r0
   1d41c:	b150      	cbz	r0, 1d434 <env_sensors_poll_fn+0x54>
				LOG_ERR("Failed to fetch data from %s, error: %d",
   1d41e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d422:	69d8      	ldr	r0, [r3, #28]
   1d424:	f01f ff7f 	bl	3d326 <log_strdup>
   1d428:	4643      	mov	r3, r8
   1d42a:	4602      	mov	r2, r0
   1d42c:	4950      	ldr	r1, [pc, #320]	; (1d570 <env_sensors_poll_fn+0x190>)
   1d42e:	4620      	mov	r0, r4
   1d430:	f01f ff66 	bl	3d300 <log_string_sync>
					log_strdup(env_sensors[i]->dev_name), err);
			}
		}
		err = sensor_channel_get(env_sensors[i]->dev,
   1d434:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d438:	6a18      	ldr	r0, [r3, #32]
   1d43a:	8b19      	ldrh	r1, [r3, #24]
	return api->channel_get(dev, chan, val);
   1d43c:	6883      	ldr	r3, [r0, #8]
   1d43e:	4632      	mov	r2, r6
   1d440:	691b      	ldr	r3, [r3, #16]
   1d442:	4798      	blx	r3
			env_sensors[i]->channel, &data[i]);
		if (err) {
   1d444:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d448:	4681      	mov	r9, r0
   1d44a:	b1f0      	cbz	r0, 1d48a <env_sensors_poll_fn+0xaa>
			LOG_ERR("Failed to fetch data from %s, error: %d",
   1d44c:	69d8      	ldr	r0, [r3, #28]
   1d44e:	f01f ff6a 	bl	3d326 <log_strdup>
   1d452:	464b      	mov	r3, r9
   1d454:	4602      	mov	r2, r0
   1d456:	4946      	ldr	r1, [pc, #280]	; (1d570 <env_sensors_poll_fn+0x190>)
   1d458:	4620      	mov	r0, r4
   1d45a:	f01f ff51 	bl	3d300 <log_string_sync>
	for (int i = 0; i < num_sensors; i++) {
   1d45e:	68fb      	ldr	r3, [r7, #12]
   1d460:	3608      	adds	r6, #8
   1d462:	3b01      	subs	r3, #1
   1d464:	60fb      	str	r3, [r7, #12]
   1d466:	d1d1      	bne.n	1d40c <env_sensors_poll_fn+0x2c>
			env_sensors[i]->sensor.ts = k_uptime_get();
			k_spin_unlock(&(env_sensors[i]->lock), key);
		}
	}

	if (data_ready_cb) {
   1d468:	4b42      	ldr	r3, [pc, #264]	; (1d574 <env_sensors_poll_fn+0x194>)
   1d46a:	681b      	ldr	r3, [r3, #0]
   1d46c:	b103      	cbz	r3, 1d470 <env_sensors_poll_fn+0x90>
		data_ready_cb();
   1d46e:	4798      	blx	r3
	}

	submit_poll_work(backoff_enabled ?
   1d470:	4b41      	ldr	r3, [pc, #260]	; (1d578 <env_sensors_poll_fn+0x198>)
   1d472:	781b      	ldrb	r3, [r3, #0]
   1d474:	2b00      	cmp	r3, #0
   1d476:	d16a      	bne.n	1d54e <env_sensors_poll_fn+0x16e>
   1d478:	687b      	ldr	r3, [r7, #4]
   1d47a:	6818      	ldr	r0, [r3, #0]
   1d47c:	f004 fff4 	bl	22468 <submit_poll_work>
   1d480:	46dd      	mov	sp, fp
		CONFIG_ENVIRONMENT_DATA_BACKOFF_TIME : data_send_interval_s);
}
   1d482:	372c      	adds	r7, #44	; 0x2c
   1d484:	46bd      	mov	sp, r7
   1d486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			k_spinlock_key_t key = k_spin_lock(&(env_sensors[i]->lock));
   1d48a:	f103 0824 	add.w	r8, r3, #36	; 0x24
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   1d48e:	f04f 0320 	mov.w	r3, #32
   1d492:	f3ef 8211 	mrs	r2, BASEPRI
   1d496:	f383 8811 	msr	BASEPRI, r3
   1d49a:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1d49e:	4640      	mov	r0, r8
   1d4a0:	60ba      	str	r2, [r7, #8]
   1d4a2:	f01c f949 	bl	39738 <z_spin_lock_valid>
   1d4a6:	b968      	cbnz	r0, 1d4c4 <env_sensors_poll_fn+0xe4>
   1d4a8:	237c      	movs	r3, #124	; 0x7c
   1d4aa:	4a34      	ldr	r2, [pc, #208]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d4ac:	4934      	ldr	r1, [pc, #208]	; (1d580 <env_sensors_poll_fn+0x1a0>)
   1d4ae:	4835      	ldr	r0, [pc, #212]	; (1d584 <env_sensors_poll_fn+0x1a4>)
   1d4b0:	f01f fc61 	bl	3cd76 <printk>
   1d4b4:	4641      	mov	r1, r8
   1d4b6:	4834      	ldr	r0, [pc, #208]	; (1d588 <env_sensors_poll_fn+0x1a8>)
   1d4b8:	f01f fc5d 	bl	3cd76 <printk>
   1d4bc:	217c      	movs	r1, #124	; 0x7c
   1d4be:	482f      	ldr	r0, [pc, #188]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d4c0:	f01f ff0d 	bl	3d2de <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   1d4c4:	4640      	mov	r0, r8
   1d4c6:	f01c f955 	bl	39774 <z_spin_lock_set_owner>
	return (double)val->val1 + (double)val->val2 / 1000000;
   1d4ca:	6870      	ldr	r0, [r6, #4]
   1d4cc:	f7ff f90a 	bl	1c6e4 <__aeabi_i2d>
   1d4d0:	a321      	add	r3, pc, #132	; (adr r3, 1d558 <env_sensors_poll_fn+0x178>)
   1d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d4d6:	f7ff fa99 	bl	1ca0c <__aeabi_ddiv>
   1d4da:	4680      	mov	r8, r0
   1d4dc:	6830      	ldr	r0, [r6, #0]
   1d4de:	4689      	mov	r9, r1
   1d4e0:	f7ff f900 	bl	1c6e4 <__aeabi_i2d>
   1d4e4:	4602      	mov	r2, r0
   1d4e6:	460b      	mov	r3, r1
   1d4e8:	4640      	mov	r0, r8
   1d4ea:	4649      	mov	r1, r9
   1d4ec:	f7fe ffae 	bl	1c44c <__adddf3>
			env_sensors[i]->sensor.value = sensor_value_to_double(&data[i]);
   1d4f0:	f855 ac04 	ldr.w	sl, [r5, #-4]
   1d4f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
   1d4f8:	f024 faee 	bl	41ad8 <z_impl_k_uptime_ticks>
   1d4fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d500:	460a      	mov	r2, r1
   1d502:	fba0 0103 	umull	r0, r1, r0, r3
   1d506:	fb03 1102 	mla	r1, r3, r2, r1
   1d50a:	0bc3      	lsrs	r3, r0, #15
   1d50c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   1d510:	0bca      	lsrs	r2, r1, #15
			env_sensors[i]->sensor.ts = k_uptime_get();
   1d512:	e9ca 3204 	strd	r3, r2, [sl, #16]
			k_spin_unlock(&(env_sensors[i]->lock), key);
   1d516:	f855 3c04 	ldr.w	r3, [r5, #-4]
   1d51a:	f103 0824 	add.w	r8, r3, #36	; 0x24
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1d51e:	4640      	mov	r0, r8
   1d520:	f01c f918 	bl	39754 <z_spin_unlock_valid>
   1d524:	b968      	cbnz	r0, 1d542 <env_sensors_poll_fn+0x162>
   1d526:	23a7      	movs	r3, #167	; 0xa7
   1d528:	4a14      	ldr	r2, [pc, #80]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d52a:	4918      	ldr	r1, [pc, #96]	; (1d58c <env_sensors_poll_fn+0x1ac>)
   1d52c:	4815      	ldr	r0, [pc, #84]	; (1d584 <env_sensors_poll_fn+0x1a4>)
   1d52e:	f01f fc22 	bl	3cd76 <printk>
   1d532:	4641      	mov	r1, r8
   1d534:	4816      	ldr	r0, [pc, #88]	; (1d590 <env_sensors_poll_fn+0x1b0>)
   1d536:	f01f fc1e 	bl	3cd76 <printk>
   1d53a:	21a7      	movs	r1, #167	; 0xa7
   1d53c:	480f      	ldr	r0, [pc, #60]	; (1d57c <env_sensors_poll_fn+0x19c>)
   1d53e:	f01f fece 	bl	3d2de <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1d542:	68bb      	ldr	r3, [r7, #8]
   1d544:	f383 8811 	msr	BASEPRI, r3
   1d548:	f3bf 8f6f 	isb	sy
   1d54c:	e787      	b.n	1d45e <env_sensors_poll_fn+0x7e>
	submit_poll_work(backoff_enabled ?
   1d54e:	2014      	movs	r0, #20
   1d550:	e794      	b.n	1d47c <env_sensors_poll_fn+0x9c>
   1d552:	bf00      	nop
   1d554:	f3af 8000 	nop.w
   1d558:	00000000 	.word	0x00000000
   1d55c:	412e8480 	.word	0x412e8480
   1d560:	200154f0 	.word	0x200154f0
   1d564:	0004339c 	.word	0x0004339c
   1d568:	00043414 	.word	0x00043414
   1d56c:	00043750 	.word	0x00043750
   1d570:	00045510 	.word	0x00045510
   1d574:	20018c78 	.word	0x20018c78
   1d578:	2001ebd3 	.word	0x2001ebd3
   1d57c:	00045538 	.word	0x00045538
   1d580:	0004555e 	.word	0x0004555e
   1d584:	00044dbf 	.word	0x00044dbf
   1d588:	00045573 	.word	0x00045573
   1d58c:	0004558b 	.word	0x0004558b
   1d590:	000455a2 	.word	0x000455a2
   1d594:	00000000 	.word	0x00000000

0001d598 <sntp_query>:

	return 0;
}

int sntp_query(struct sntp_ctx *ctx, uint32_t timeout, struct sntp_time *time)
{
   1d598:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   1d59c:	4604      	mov	r4, r0
   1d59e:	b09a      	sub	sp, #104	; 0x68
   1d5a0:	460f      	mov	r7, r1
   1d5a2:	4616      	mov	r6, r2
	struct sntp_pkt tx_pkt = { 0 };
   1d5a4:	2100      	movs	r1, #0
   1d5a6:	2230      	movs	r2, #48	; 0x30
   1d5a8:	a802      	add	r0, sp, #8
   1d5aa:	f024 fb98 	bl	41cde <memset>
	int ret = 0;

	if (!ctx || !time) {
   1d5ae:	2c00      	cmp	r4, #0
   1d5b0:	f000 8087 	beq.w	1d6c2 <sntp_query+0x12a>
   1d5b4:	2e00      	cmp	r6, #0
   1d5b6:	f000 8084 	beq.w	1d6c2 <sntp_query+0x12a>
	}

	/* prepare request pkt */
	SNTP_SET_LI(tx_pkt.lvm, 0);
	SNTP_SET_VN(tx_pkt.lvm, SNTP_VERSION_NUMBER);
	SNTP_SET_MODE(tx_pkt.lvm, SNTP_MODE_CLIENT);
   1d5ba:	231b      	movs	r3, #27
   1d5bc:	f88d 3008 	strb.w	r3, [sp, #8]
   1d5c0:	f024 fa8a 	bl	41ad8 <z_impl_k_uptime_ticks>
   1d5c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1d5c8:	2500      	movs	r5, #0
   1d5ca:	fba0 bc03 	umull	fp, ip, r0, r3
   1d5ce:	fb03 cc01 	mla	ip, r3, r1, ip
   1d5d2:	ea4f 30db 	mov.w	r0, fp, lsr #15
	return time / MSEC_PER_SEC;
   1d5d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d5da:	2300      	movs	r3, #0
   1d5dc:	4629      	mov	r1, r5
   1d5de:	ea40 404c 	orr.w	r0, r0, ip, lsl #17
   1d5e2:	f7ff fc6b 	bl	1cebc <__aeabi_uldivmod>
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d5e6:	4a3c      	ldr	r2, [pc, #240]	; (1d6d8 <sntp_query+0x140>)
   1d5e8:	4402      	add	r2, r0
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d5ea:	0a13      	lsrs	r3, r2, #8
   1d5ec:	0211      	lsls	r1, r2, #8
   1d5ee:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1d5f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1d5f6:	430b      	orrs	r3, r1
   1d5f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d5fc:	f043 0383 	orr.w	r3, r3, #131	; 0x83

	ret = send(ctx->sock.fd, (uint8_t *)&tx_pkt, sizeof(tx_pkt), 0);
   1d600:	68e0      	ldr	r0, [r4, #12]
	ctx->expected_orig_ts = get_uptime_in_sec() + OFFSET_1970_JAN_1;
   1d602:	6122      	str	r2, [r4, #16]
	tx_pkt.tx_tm_s = htonl(ctx->expected_orig_ts);
   1d604:	930c      	str	r3, [sp, #48]	; 0x30
	if (z_syscall_trap()) {
		return (ssize_t) arch_syscall_invoke6(*(uintptr_t *)&sock, *(uintptr_t *)&buf, *(uintptr_t *)&len, *(uintptr_t *)&flags, *(uintptr_t *)&dest_addr, *(uintptr_t *)&addrlen, K_SYSCALL_ZSOCK_SENDTO);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   1d606:	2230      	movs	r2, #48	; 0x30
   1d608:	462b      	mov	r3, r5
   1d60a:	e9cd 5500 	strd	r5, r5, [sp]
   1d60e:	a902      	add	r1, sp, #8
   1d610:	f020 fa0e 	bl	3da30 <z_impl_zsock_sendto>
	if (ret < 0) {
   1d614:	2800      	cmp	r0, #0
   1d616:	db0f      	blt.n	1d638 <sntp_query+0xa0>
	struct sntp_pkt buf = { 0 };
   1d618:	4629      	mov	r1, r5
   1d61a:	2230      	movs	r2, #48	; 0x30
   1d61c:	a80e      	add	r0, sp, #56	; 0x38
   1d61e:	f024 fb5e 	bl	41cde <memset>
	status = poll(sntp->sock.fds, sntp->sock.nfds, timeout);
   1d622:	68a1      	ldr	r1, [r4, #8]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&fds, *(uintptr_t *)&nfds, *(uintptr_t *)&timeout, K_SYSCALL_ZSOCK_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_poll(fds, nfds, timeout);
   1d624:	463a      	mov	r2, r7
   1d626:	4620      	mov	r0, r4
   1d628:	f007 faba 	bl	24ba0 <z_impl_zsock_poll>
	if (status < 0) {
   1d62c:	42a8      	cmp	r0, r5
   1d62e:	da06      	bge.n	1d63e <sntp_query+0xa6>
		return -errno;
   1d630:	f020 fd53 	bl	3e0da <__errno>
   1d634:	6800      	ldr	r0, [r0, #0]
   1d636:	4240      	negs	r0, r0
		NET_ERR("Failed to send over UDP socket %d", ret);
		return ret;
	}

	return sntp_recv_response(ctx, timeout, time);
}
   1d638:	b01a      	add	sp, #104	; 0x68
   1d63a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
	if (status == 0) {
   1d63e:	d037      	beq.n	1d6b0 <sntp_query+0x118>
	rcvd = recv(sntp->sock.fd, (uint8_t *)&buf, sizeof(buf), 0);
   1d640:	68e0      	ldr	r0, [r4, #12]
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   1d642:	2230      	movs	r2, #48	; 0x30
   1d644:	462b      	mov	r3, r5
   1d646:	e9cd 5500 	strd	r5, r5, [sp]
   1d64a:	a90e      	add	r1, sp, #56	; 0x38
   1d64c:	f020 fa23 	bl	3da96 <z_impl_zsock_recvfrom>
	if (rcvd < 0) {
   1d650:	2800      	cmp	r0, #0
   1d652:	dbed      	blt.n	1d630 <sntp_query+0x98>
	if (rcvd != sizeof(struct sntp_pkt)) {
   1d654:	2830      	cmp	r0, #48	; 0x30
   1d656:	d12e      	bne.n	1d6b6 <sntp_query+0x11e>
	if (ntohl(pkt->orig_tm_s) != orig_ts) {
   1d658:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1d65a:	6922      	ldr	r2, [r4, #16]
   1d65c:	ba1b      	rev	r3, r3
   1d65e:	429a      	cmp	r2, r3
   1d660:	d002      	beq.n	1d668 <sntp_query+0xd0>
		return -EINVAL;
   1d662:	f06f 0015 	mvn.w	r0, #21
   1d666:	e7e7      	b.n	1d638 <sntp_query+0xa0>
	if (SNTP_GET_MODE(pkt->lvm) != SNTP_MODE_SERVER) {
   1d668:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1d66c:	f003 0307 	and.w	r3, r3, #7
   1d670:	2b04      	cmp	r3, #4
   1d672:	d1f6      	bne.n	1d662 <sntp_query+0xca>
	if (pkt->stratum == SNTP_STRATUM_KOD) {
   1d674:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   1d678:	b303      	cbz	r3, 1d6bc <sntp_query+0x124>
	if (ntohl(pkt->tx_tm_s) == 0 && ntohl(pkt->tx_tm_f) == 0) {
   1d67a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1d67c:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d67e:	ba1b      	rev	r3, r3
   1d680:	ba12      	rev	r2, r2
   1d682:	ea53 0102 	orrs.w	r1, r3, r2
   1d686:	d0ec      	beq.n	1d662 <sntp_query+0xca>
	if (ts & 0x80000000) {
   1d688:	2b00      	cmp	r3, #0
	time->fraction = ntohl(pkt->tx_tm_f);
   1d68a:	60b2      	str	r2, [r6, #8]
	if (ts & 0x80000000) {
   1d68c:	da0c      	bge.n	1d6a8 <sntp_query+0x110>
		if (ts >= OFFSET_1970_JAN_1) {
   1d68e:	4a13      	ldr	r2, [pc, #76]	; (1d6dc <sntp_query+0x144>)
   1d690:	4293      	cmp	r3, r2
   1d692:	d9e6      	bls.n	1d662 <sntp_query+0xca>
			time->seconds = ts - OFFSET_1970_JAN_1;
   1d694:	a10c      	add	r1, pc, #48	; (adr r1, 1d6c8 <sntp_query+0x130>)
   1d696:	e9d1 0100 	ldrd	r0, r1, [r1]
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d69a:	18c0      	adds	r0, r0, r3
   1d69c:	f141 0100 	adc.w	r1, r1, #0
   1d6a0:	e9c6 0100 	strd	r0, r1, [r6]
	return 0;
   1d6a4:	2000      	movs	r0, #0
   1d6a6:	e7c7      	b.n	1d638 <sntp_query+0xa0>
		time->seconds = ts + 0x100000000ULL - OFFSET_1970_JAN_1;
   1d6a8:	a109      	add	r1, pc, #36	; (adr r1, 1d6d0 <sntp_query+0x138>)
   1d6aa:	e9d1 0100 	ldrd	r0, r1, [r1]
   1d6ae:	e7f4      	b.n	1d69a <sntp_query+0x102>
		return -ETIMEDOUT;
   1d6b0:	f06f 0073 	mvn.w	r0, #115	; 0x73
   1d6b4:	e7c0      	b.n	1d638 <sntp_query+0xa0>
		return -EMSGSIZE;
   1d6b6:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1d6ba:	e7bd      	b.n	1d638 <sntp_query+0xa0>
		return -EBUSY;
   1d6bc:	f06f 000f 	mvn.w	r0, #15
	return sntp_recv_response(ctx, timeout, time);
   1d6c0:	e7ba      	b.n	1d638 <sntp_query+0xa0>
		return -EFAULT;
   1d6c2:	f06f 000d 	mvn.w	r0, #13
   1d6c6:	e7b7      	b.n	1d638 <sntp_query+0xa0>
   1d6c8:	7c558180 	.word	0x7c558180
   1d6cc:	ffffffff 	.word	0xffffffff
   1d6d0:	7c558180 	.word	0x7c558180
   1d6d4:	00000000 	.word	0x00000000
   1d6d8:	83aa7e80 	.word	0x83aa7e80
   1d6dc:	83aa7e7f 	.word	0x83aa7e7f

0001d6e0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
   1d6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d6e4:	4605      	mov	r5, r0
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6e6:	460c      	mov	r4, r1
{
   1d6e8:	b093      	sub	sp, #76	; 0x4c
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6ea:	b909      	cbnz	r1, 1d6f0 <parse_value+0x10>
    if (head != NULL)
    {
        cJSON_Delete(head);
    }

    return false;
   1d6ec:	2000      	movs	r0, #0
   1d6ee:	e025      	b.n	1d73c <parse_value+0x5c>
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d6f0:	6808      	ldr	r0, [r1, #0]
   1d6f2:	2800      	cmp	r0, #0
   1d6f4:	d0fa      	beq.n	1d6ec <parse_value+0xc>
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1d6f6:	688b      	ldr	r3, [r1, #8]
   1d6f8:	6862      	ldr	r2, [r4, #4]
   1d6fa:	1d19      	adds	r1, r3, #4
   1d6fc:	4291      	cmp	r1, r2
   1d6fe:	d80c      	bhi.n	1d71a <parse_value+0x3a>
   1d700:	2204      	movs	r2, #4
   1d702:	4991      	ldr	r1, [pc, #580]	; (1d948 <parse_value+0x268>)
   1d704:	4418      	add	r0, r3
   1d706:	f024 fcd3 	bl	420b0 <strncmp>
   1d70a:	b930      	cbnz	r0, 1d71a <parse_value+0x3a>
        item->type = cJSON_NULL;
   1d70c:	2304      	movs	r3, #4
   1d70e:	60eb      	str	r3, [r5, #12]
        input_buffer->offset += 4;
   1d710:	68a3      	ldr	r3, [r4, #8]
   1d712:	3304      	adds	r3, #4
    return true;
   1d714:	2001      	movs	r0, #1
    input_buffer->offset++;
   1d716:	60a3      	str	r3, [r4, #8]
    return true;
   1d718:	e010      	b.n	1d73c <parse_value+0x5c>
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1d71a:	68a3      	ldr	r3, [r4, #8]
   1d71c:	6862      	ldr	r2, [r4, #4]
   1d71e:	1d59      	adds	r1, r3, #5
   1d720:	4291      	cmp	r1, r2
   1d722:	d80e      	bhi.n	1d742 <parse_value+0x62>
   1d724:	6820      	ldr	r0, [r4, #0]
   1d726:	2205      	movs	r2, #5
   1d728:	4988      	ldr	r1, [pc, #544]	; (1d94c <parse_value+0x26c>)
   1d72a:	4418      	add	r0, r3
   1d72c:	f024 fcc0 	bl	420b0 <strncmp>
   1d730:	b938      	cbnz	r0, 1d742 <parse_value+0x62>
        item->type = cJSON_False;
   1d732:	2001      	movs	r0, #1
        input_buffer->offset += 5;
   1d734:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_False;
   1d736:	60e8      	str	r0, [r5, #12]
        input_buffer->offset += 5;
   1d738:	3205      	adds	r2, #5
        input_buffer->offset += 4;
   1d73a:	60a2      	str	r2, [r4, #8]
}
   1d73c:	b013      	add	sp, #76	; 0x4c
   1d73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1d742:	68a3      	ldr	r3, [r4, #8]
   1d744:	6862      	ldr	r2, [r4, #4]
   1d746:	1d19      	adds	r1, r3, #4
   1d748:	4291      	cmp	r1, r2
   1d74a:	d80d      	bhi.n	1d768 <parse_value+0x88>
   1d74c:	6820      	ldr	r0, [r4, #0]
   1d74e:	2204      	movs	r2, #4
   1d750:	497f      	ldr	r1, [pc, #508]	; (1d950 <parse_value+0x270>)
   1d752:	4418      	add	r0, r3
   1d754:	f024 fcac 	bl	420b0 <strncmp>
   1d758:	b930      	cbnz	r0, 1d768 <parse_value+0x88>
        item->type = cJSON_True;
   1d75a:	2302      	movs	r3, #2
        item->valueint = 1;
   1d75c:	2001      	movs	r0, #1
        input_buffer->offset += 4;
   1d75e:	68a2      	ldr	r2, [r4, #8]
        item->type = cJSON_True;
   1d760:	60eb      	str	r3, [r5, #12]
        item->valueint = 1;
   1d762:	6168      	str	r0, [r5, #20]
        input_buffer->offset += 4;
   1d764:	3204      	adds	r2, #4
   1d766:	e7e8      	b.n	1d73a <parse_value+0x5a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1d768:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   1d76c:	4283      	cmp	r3, r0
   1d76e:	d2bd      	bcs.n	1d6ec <parse_value+0xc>
   1d770:	6821      	ldr	r1, [r4, #0]
   1d772:	5cca      	ldrb	r2, [r1, r3]
   1d774:	18ce      	adds	r6, r1, r3
   1d776:	2a22      	cmp	r2, #34	; 0x22
   1d778:	d104      	bne.n	1d784 <parse_value+0xa4>
        return parse_string(item, input_buffer);
   1d77a:	4621      	mov	r1, r4
   1d77c:	4628      	mov	r0, r5
   1d77e:	f00a fee9 	bl	28554 <parse_string>
   1d782:	e7db      	b.n	1d73c <parse_value+0x5c>
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1d784:	2a2d      	cmp	r2, #45	; 0x2d
   1d786:	d003      	beq.n	1d790 <parse_value+0xb0>
   1d788:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
   1d78c:	2f09      	cmp	r7, #9
   1d78e:	d85e      	bhi.n	1d84e <parse_value+0x16e>
    unsigned char *after_end = NULL;
   1d790:	2200      	movs	r2, #0
   1d792:	9201      	str	r2, [sp, #4]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
   1d794:	2900      	cmp	r1, #0
   1d796:	d0a9      	beq.n	1d6ec <parse_value+0xc>
                number_c_string[i] = decimal_point;
   1d798:	272e      	movs	r7, #46	; 0x2e
   1d79a:	1ac3      	subs	r3, r0, r3
   1d79c:	f10d 0808 	add.w	r8, sp, #8
        switch (buffer_at_offset(input_buffer)[i])
   1d7a0:	f816 1b01 	ldrb.w	r1, [r6], #1
   1d7a4:	2939      	cmp	r1, #57	; 0x39
   1d7a6:	d80f      	bhi.n	1d7c8 <parse_value+0xe8>
   1d7a8:	292a      	cmp	r1, #42	; 0x2a
   1d7aa:	d918      	bls.n	1d7de <parse_value+0xfe>
   1d7ac:	f1a1 002b 	sub.w	r0, r1, #43	; 0x2b
   1d7b0:	280e      	cmp	r0, #14
   1d7b2:	d814      	bhi.n	1d7de <parse_value+0xfe>
   1d7b4:	e8df f000 	tbb	[pc, r0]
   1d7b8:	380c130c 	.word	0x380c130c
   1d7bc:	0c0c0c13 	.word	0x0c0c0c13
   1d7c0:	0c0c0c0c 	.word	0x0c0c0c0c
   1d7c4:	0c0c      	.short	0x0c0c
   1d7c6:	0c          	.byte	0x0c
   1d7c7:	00          	.byte	0x00
   1d7c8:	f001 00df 	and.w	r0, r1, #223	; 0xdf
   1d7cc:	2845      	cmp	r0, #69	; 0x45
   1d7ce:	d106      	bne.n	1d7de <parse_value+0xfe>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
   1d7d0:	f808 1002 	strb.w	r1, [r8, r2]
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   1d7d4:	3201      	adds	r2, #1
   1d7d6:	2a3f      	cmp	r2, #63	; 0x3f
   1d7d8:	d001      	beq.n	1d7de <parse_value+0xfe>
   1d7da:	429a      	cmp	r2, r3
   1d7dc:	d1e0      	bne.n	1d7a0 <parse_value+0xc0>
    number_c_string[i] = '\0';
   1d7de:	ab12      	add	r3, sp, #72	; 0x48
   1d7e0:	441a      	add	r2, r3
   1d7e2:	2300      	movs	r3, #0
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7e4:	4640      	mov	r0, r8
   1d7e6:	a901      	add	r1, sp, #4
    number_c_string[i] = '\0';
   1d7e8:	f802 3c40 	strb.w	r3, [r2, #-64]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7ec:	f01d fefe 	bl	3b5ec <strtod>
    if (number_c_string == after_end)
   1d7f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
    number = strtod((const char*)number_c_string, (char**)&after_end);
   1d7f4:	ec57 6b10 	vmov	r6, r7, d0
    if (number_c_string == after_end)
   1d7f8:	45c1      	cmp	r9, r8
   1d7fa:	f43f af77 	beq.w	1d6ec <parse_value+0xc>
    if (number >= INT_MAX)
   1d7fe:	a350      	add	r3, pc, #320	; (adr r3, 1d940 <parse_value+0x260>)
   1d800:	e9d3 2300 	ldrd	r2, r3, [r3]
    item->valuedouble = number;
   1d804:	ed85 0b06 	vstr	d0, [r5, #24]
    if (number >= INT_MAX)
   1d808:	ee10 0a10 	vmov	r0, s0
   1d80c:	4639      	mov	r1, r7
   1d80e:	f7ff fa59 	bl	1ccc4 <__aeabi_dcmpge>
   1d812:	b160      	cbz	r0, 1d82e <parse_value+0x14e>
        item->valueint = INT_MAX;
   1d814:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        item->valueint = INT_MIN;
   1d818:	616b      	str	r3, [r5, #20]
    item->type = cJSON_Number;
   1d81a:	2308      	movs	r3, #8
   1d81c:	60eb      	str	r3, [r5, #12]
    input_buffer->offset += (size_t)(after_end - number_c_string);
   1d81e:	68a3      	ldr	r3, [r4, #8]
   1d820:	eba9 0808 	sub.w	r8, r9, r8
   1d824:	4443      	add	r3, r8
   1d826:	e775      	b.n	1d714 <parse_value+0x34>
                number_c_string[i] = decimal_point;
   1d828:	f808 7002 	strb.w	r7, [r8, r2]
                break;
   1d82c:	e7d2      	b.n	1d7d4 <parse_value+0xf4>
    else if (number <= (double)INT_MIN)
   1d82e:	2200      	movs	r2, #0
   1d830:	4630      	mov	r0, r6
   1d832:	4639      	mov	r1, r7
   1d834:	4b47      	ldr	r3, [pc, #284]	; (1d954 <parse_value+0x274>)
   1d836:	f7ff fa3b 	bl	1ccb0 <__aeabi_dcmple>
   1d83a:	b110      	cbz	r0, 1d842 <parse_value+0x162>
        item->valueint = INT_MIN;
   1d83c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1d840:	e7ea      	b.n	1d818 <parse_value+0x138>
        item->valueint = (int)number;
   1d842:	4630      	mov	r0, r6
   1d844:	4639      	mov	r1, r7
   1d846:	f7ff fa51 	bl	1ccec <__aeabi_d2iz>
   1d84a:	6168      	str	r0, [r5, #20]
   1d84c:	e7e5      	b.n	1d81a <parse_value+0x13a>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1d84e:	2a5b      	cmp	r2, #91	; 0x5b
   1d850:	d150      	bne.n	1d8f4 <parse_value+0x214>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d852:	68e2      	ldr	r2, [r4, #12]
   1d854:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d858:	f4bf af48 	bcs.w	1d6ec <parse_value+0xc>
    input_buffer->depth++;
   1d85c:	3201      	adds	r2, #1
   1d85e:	60e2      	str	r2, [r4, #12]
    if (buffer_at_offset(input_buffer)[0] != '[')
   1d860:	5cca      	ldrb	r2, [r1, r3]
   1d862:	2a5b      	cmp	r2, #91	; 0x5b
   1d864:	f47f af42 	bne.w	1d6ec <parse_value+0xc>
    input_buffer->offset++;
   1d868:	3301      	adds	r3, #1
   1d86a:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d86c:	4620      	mov	r0, r4
   1d86e:	f021 fd10 	bl	3f292 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   1d872:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d876:	4293      	cmp	r3, r2
   1d878:	d25d      	bcs.n	1d936 <parse_value+0x256>
   1d87a:	6822      	ldr	r2, [r4, #0]
   1d87c:	5cd2      	ldrb	r2, [r2, r3]
   1d87e:	2a5d      	cmp	r2, #93	; 0x5d
   1d880:	d109      	bne.n	1d896 <parse_value+0x1b6>
    cJSON *head = NULL; /* head of the linked list */
   1d882:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d884:	68e3      	ldr	r3, [r4, #12]
   1d886:	3b01      	subs	r3, #1
   1d888:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Array;
   1d88a:	2320      	movs	r3, #32
    item->child = head;
   1d88c:	e9c5 7302 	strd	r7, r3, [r5, #8]
    input_buffer->offset++;
   1d890:	68a3      	ldr	r3, [r4, #8]
   1d892:	3301      	adds	r3, #1
   1d894:	e73e      	b.n	1d714 <parse_value+0x34>
    cJSON *current_item = NULL;
   1d896:	2600      	movs	r6, #0
    cJSON *head = NULL; /* head of the linked list */
   1d898:	4637      	mov	r7, r6
    input_buffer->offset--;
   1d89a:	3b01      	subs	r3, #1
   1d89c:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d89e:	6920      	ldr	r0, [r4, #16]
   1d8a0:	f021 fd31 	bl	3f306 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d8a4:	46b0      	mov	r8, r6
   1d8a6:	4606      	mov	r6, r0
   1d8a8:	2800      	cmp	r0, #0
   1d8aa:	f000 809a 	beq.w	1d9e2 <parse_value+0x302>
        if (head == NULL)
   1d8ae:	b1ff      	cbz	r7, 1d8f0 <parse_value+0x210>
            current_item->next = new_item;
   1d8b0:	f8c8 0000 	str.w	r0, [r8]
            new_item->prev = current_item;
   1d8b4:	f8c0 8004 	str.w	r8, [r0, #4]
        input_buffer->offset++;
   1d8b8:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d8ba:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d8bc:	3301      	adds	r3, #1
   1d8be:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d8c0:	f021 fce7 	bl	3f292 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d8c4:	4621      	mov	r1, r4
   1d8c6:	4630      	mov	r0, r6
   1d8c8:	f7ff ff0a 	bl	1d6e0 <parse_value>
   1d8cc:	2800      	cmp	r0, #0
   1d8ce:	f000 808b 	beq.w	1d9e8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d8d2:	4620      	mov	r0, r4
   1d8d4:	f021 fcdd 	bl	3f292 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d8d8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d8dc:	4293      	cmp	r3, r2
   1d8de:	f080 8083 	bcs.w	1d9e8 <parse_value+0x308>
   1d8e2:	6822      	ldr	r2, [r4, #0]
   1d8e4:	5cd3      	ldrb	r3, [r2, r3]
   1d8e6:	2b2c      	cmp	r3, #44	; 0x2c
   1d8e8:	d0d9      	beq.n	1d89e <parse_value+0x1be>
    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1d8ea:	2b5d      	cmp	r3, #93	; 0x5d
   1d8ec:	d17c      	bne.n	1d9e8 <parse_value+0x308>
   1d8ee:	e7c9      	b.n	1d884 <parse_value+0x1a4>
   1d8f0:	4607      	mov	r7, r0
   1d8f2:	e7e1      	b.n	1d8b8 <parse_value+0x1d8>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1d8f4:	2a7b      	cmp	r2, #123	; 0x7b
   1d8f6:	f47f aef9 	bne.w	1d6ec <parse_value+0xc>
    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   1d8fa:	68e2      	ldr	r2, [r4, #12]
   1d8fc:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   1d900:	f4bf aef4 	bcs.w	1d6ec <parse_value+0xc>
    input_buffer->depth++;
   1d904:	3201      	adds	r2, #1
   1d906:	60e2      	str	r2, [r4, #12]
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   1d908:	5cca      	ldrb	r2, [r1, r3]
   1d90a:	2a7b      	cmp	r2, #123	; 0x7b
   1d90c:	f47f aeee 	bne.w	1d6ec <parse_value+0xc>
    input_buffer->offset++;
   1d910:	3301      	adds	r3, #1
   1d912:	60a3      	str	r3, [r4, #8]
    buffer_skip_whitespace(input_buffer);
   1d914:	4620      	mov	r0, r4
   1d916:	f021 fcbc 	bl	3f292 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   1d91a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d91e:	4293      	cmp	r3, r2
   1d920:	d209      	bcs.n	1d936 <parse_value+0x256>
   1d922:	6822      	ldr	r2, [r4, #0]
   1d924:	5cd2      	ldrb	r2, [r2, r3]
   1d926:	2a7d      	cmp	r2, #125	; 0x7d
   1d928:	d116      	bne.n	1d958 <parse_value+0x278>
    cJSON *head = NULL; /* linked list head */
   1d92a:	2700      	movs	r7, #0
    input_buffer->depth--;
   1d92c:	68e3      	ldr	r3, [r4, #12]
   1d92e:	3b01      	subs	r3, #1
   1d930:	60e3      	str	r3, [r4, #12]
    item->type = cJSON_Object;
   1d932:	2340      	movs	r3, #64	; 0x40
   1d934:	e7aa      	b.n	1d88c <parse_value+0x1ac>
        input_buffer->offset--;
   1d936:	3b01      	subs	r3, #1
   1d938:	60a3      	str	r3, [r4, #8]
    if (head != NULL)
   1d93a:	e6d7      	b.n	1d6ec <parse_value+0xc>
   1d93c:	f3af 8000 	nop.w
   1d940:	ffc00000 	.word	0xffc00000
   1d944:	41dfffff 	.word	0x41dfffff
   1d948:	00046be6 	.word	0x00046be6
   1d94c:	00046bfd 	.word	0x00046bfd
   1d950:	00046c03 	.word	0x00046c03
   1d954:	c1e00000 	.word	0xc1e00000
    cJSON *current_item = NULL;
   1d958:	2600      	movs	r6, #0
    cJSON *head = NULL; /* linked list head */
   1d95a:	4637      	mov	r7, r6
        current_item->valuestring = NULL;
   1d95c:	46b0      	mov	r8, r6
    input_buffer->offset--;
   1d95e:	3b01      	subs	r3, #1
   1d960:	60a3      	str	r3, [r4, #8]
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   1d962:	6920      	ldr	r0, [r4, #16]
   1d964:	f021 fccf 	bl	3f306 <cJSON_New_Item.isra.0>
        if (new_item == NULL)
   1d968:	46b1      	mov	r9, r6
   1d96a:	4606      	mov	r6, r0
   1d96c:	2800      	cmp	r0, #0
   1d96e:	d038      	beq.n	1d9e2 <parse_value+0x302>
        if (head == NULL)
   1d970:	b3af      	cbz	r7, 1d9de <parse_value+0x2fe>
            current_item->next = new_item;
   1d972:	f8c9 0000 	str.w	r0, [r9]
            new_item->prev = current_item;
   1d976:	f8c0 9004 	str.w	r9, [r0, #4]
        input_buffer->offset++;
   1d97a:	68a3      	ldr	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d97c:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d97e:	3301      	adds	r3, #1
   1d980:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d982:	f021 fc86 	bl	3f292 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
   1d986:	4621      	mov	r1, r4
   1d988:	4630      	mov	r0, r6
   1d98a:	f00a fde3 	bl	28554 <parse_string>
   1d98e:	b358      	cbz	r0, 1d9e8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d990:	4620      	mov	r0, r4
   1d992:	f021 fc7e 	bl	3f292 <buffer_skip_whitespace>
        current_item->string = current_item->valuestring;
   1d996:	6933      	ldr	r3, [r6, #16]
        current_item->valuestring = NULL;
   1d998:	f8c6 8010 	str.w	r8, [r6, #16]
        current_item->string = current_item->valuestring;
   1d99c:	6233      	str	r3, [r6, #32]
        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   1d99e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9a2:	4293      	cmp	r3, r2
   1d9a4:	d220      	bcs.n	1d9e8 <parse_value+0x308>
   1d9a6:	6822      	ldr	r2, [r4, #0]
   1d9a8:	5cd2      	ldrb	r2, [r2, r3]
   1d9aa:	2a3a      	cmp	r2, #58	; 0x3a
   1d9ac:	d11c      	bne.n	1d9e8 <parse_value+0x308>
        input_buffer->offset++;
   1d9ae:	3301      	adds	r3, #1
        buffer_skip_whitespace(input_buffer);
   1d9b0:	4620      	mov	r0, r4
        input_buffer->offset++;
   1d9b2:	60a3      	str	r3, [r4, #8]
        buffer_skip_whitespace(input_buffer);
   1d9b4:	f021 fc6d 	bl	3f292 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
   1d9b8:	4621      	mov	r1, r4
   1d9ba:	4630      	mov	r0, r6
   1d9bc:	f7ff fe90 	bl	1d6e0 <parse_value>
   1d9c0:	b190      	cbz	r0, 1d9e8 <parse_value+0x308>
        buffer_skip_whitespace(input_buffer);
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	f021 fc65 	bl	3f292 <buffer_skip_whitespace>
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   1d9c8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   1d9cc:	4293      	cmp	r3, r2
   1d9ce:	d20b      	bcs.n	1d9e8 <parse_value+0x308>
   1d9d0:	6822      	ldr	r2, [r4, #0]
   1d9d2:	5cd3      	ldrb	r3, [r2, r3]
   1d9d4:	2b2c      	cmp	r3, #44	; 0x2c
   1d9d6:	d0c4      	beq.n	1d962 <parse_value+0x282>
    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1d9d8:	2b7d      	cmp	r3, #125	; 0x7d
   1d9da:	d105      	bne.n	1d9e8 <parse_value+0x308>
   1d9dc:	e7a6      	b.n	1d92c <parse_value+0x24c>
   1d9de:	4607      	mov	r7, r0
   1d9e0:	e7cb      	b.n	1d97a <parse_value+0x29a>
    if (head != NULL)
   1d9e2:	2f00      	cmp	r7, #0
   1d9e4:	f43f ae82 	beq.w	1d6ec <parse_value+0xc>
        cJSON_Delete(head);
   1d9e8:	4638      	mov	r0, r7
   1d9ea:	f00b f9eb 	bl	28dc4 <cJSON_Delete>
   1d9ee:	e67d      	b.n	1d6ec <parse_value+0xc>

0001d9f0 <cJSON_CreateNumber>:
    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9f0:	4b17      	ldr	r3, [pc, #92]	; (1da50 <cJSON_CreateNumber+0x60>)
{
   1d9f2:	b5d0      	push	{r4, r6, r7, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9f4:	6818      	ldr	r0, [r3, #0]
{
   1d9f6:	ec57 6b10 	vmov	r6, r7, d0
    cJSON *item = cJSON_New_Item(&global_hooks);
   1d9fa:	f021 fc84 	bl	3f306 <cJSON_New_Item.isra.0>
    if(item)
   1d9fe:	4604      	mov	r4, r0
   1da00:	b170      	cbz	r0, 1da20 <cJSON_CreateNumber+0x30>
    {
        item->type = cJSON_Number;
   1da02:	2308      	movs	r3, #8
        item->valuedouble = num;
   1da04:	e9c0 6706 	strd	r6, r7, [r0, #24]
        item->type = cJSON_Number;
   1da08:	60c3      	str	r3, [r0, #12]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
   1da0a:	4639      	mov	r1, r7
   1da0c:	a30e      	add	r3, pc, #56	; (adr r3, 1da48 <cJSON_CreateNumber+0x58>)
   1da0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da12:	4630      	mov	r0, r6
   1da14:	f7ff f956 	bl	1ccc4 <__aeabi_dcmpge>
   1da18:	b120      	cbz	r0, 1da24 <cJSON_CreateNumber+0x34>
        {
            item->valueint = INT_MAX;
   1da1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
        }
        else if (num <= (double)INT_MIN)
        {
            item->valueint = INT_MIN;
   1da1e:	6163      	str	r3, [r4, #20]
            item->valueint = (int)num;
        }
    }

    return item;
}
   1da20:	4620      	mov	r0, r4
   1da22:	bdd0      	pop	{r4, r6, r7, pc}
        else if (num <= (double)INT_MIN)
   1da24:	2200      	movs	r2, #0
   1da26:	4630      	mov	r0, r6
   1da28:	4639      	mov	r1, r7
   1da2a:	4b0a      	ldr	r3, [pc, #40]	; (1da54 <cJSON_CreateNumber+0x64>)
   1da2c:	f7ff f940 	bl	1ccb0 <__aeabi_dcmple>
   1da30:	b110      	cbz	r0, 1da38 <cJSON_CreateNumber+0x48>
            item->valueint = INT_MIN;
   1da32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1da36:	e7f2      	b.n	1da1e <cJSON_CreateNumber+0x2e>
            item->valueint = (int)num;
   1da38:	4630      	mov	r0, r6
   1da3a:	4639      	mov	r1, r7
   1da3c:	f7ff f956 	bl	1ccec <__aeabi_d2iz>
   1da40:	6160      	str	r0, [r4, #20]
    return item;
   1da42:	e7ed      	b.n	1da20 <cJSON_CreateNumber+0x30>
   1da44:	f3af 8000 	nop.w
   1da48:	ffc00000 	.word	0xffc00000
   1da4c:	41dfffff 	.word	0x41dfffff
   1da50:	200155ac 	.word	0x200155ac
   1da54:	c1e00000 	.word	0xc1e00000

0001da58 <at_handler>:

	return err;
}

static void at_handler(void *context, const char *response)
{
   1da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da5c:	ed2d 8b02 	vpush	{d8}
	int err;
	bool notify = false;
	enum lte_lc_notif_type notif_type;
	struct lte_lc_evt evt;

	if (response == NULL) {
   1da60:	460e      	mov	r6, r1
{
   1da62:	b08c      	sub	sp, #48	; 0x30
	if (response == NULL) {
   1da64:	b971      	cbnz	r1, 1da84 <at_handler+0x2c>
   1da66:	48b5      	ldr	r0, [pc, #724]	; (1dd3c <at_handler+0x2e4>)
   1da68:	4bb5      	ldr	r3, [pc, #724]	; (1dd40 <at_handler+0x2e8>)
		LOG_ERR("Response buffer is NULL-pointer");
   1da6a:	49b6      	ldr	r1, [pc, #728]	; (1dd44 <at_handler+0x2ec>)
   1da6c:	1ac0      	subs	r0, r0, r3
   1da6e:	08c0      	lsrs	r0, r0, #3
   1da70:	0180      	lsls	r0, r0, #6
   1da72:	f040 0001 	orr.w	r0, r0, #1
   1da76:	f01f fc43 	bl	3d300 <log_string_sync>
	}

	if (evt_handler && notify) {
		evt_handler(&evt);
	}
}
   1da7a:	b00c      	add	sp, #48	; 0x30
   1da7c:	ecbd 8b02 	vpop	{d8}
   1da80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1da84:	2700      	movs	r7, #0
   1da86:	4cb0      	ldr	r4, [pc, #704]	; (1dd48 <at_handler+0x2f0>)
		if (strncmp(at_notifs[i], notif,
   1da88:	f854 5b04 	ldr.w	r5, [r4], #4
   1da8c:	4628      	mov	r0, r5
   1da8e:	f7ff fbe5 	bl	1d25c <strlen>
   1da92:	4631      	mov	r1, r6
   1da94:	4602      	mov	r2, r0
   1da96:	4628      	mov	r0, r5
   1da98:	f024 fb0a 	bl	420b0 <strncmp>
   1da9c:	4605      	mov	r5, r0
   1da9e:	bb60      	cbnz	r0, 1dafa <at_handler+0xa2>
	switch (notif_type) {
   1daa0:	2f01      	cmp	r7, #1
			*type = i;
   1daa2:	b2fb      	uxtb	r3, r7
	switch (notif_type) {
   1daa4:	f000 810d 	beq.w	1dcc2 <at_handler+0x26a>
   1daa8:	2b02      	cmp	r3, #2
   1daaa:	f000 8191 	beq.w	1ddd0 <at_handler+0x378>
	size_t len = sizeof(str_buf) - 1;
   1daae:	f04f 0809 	mov.w	r8, #9
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1dab2:	210a      	movs	r1, #10
   1dab4:	a807      	add	r0, sp, #28
	size_t len = sizeof(str_buf) - 1;
   1dab6:	f8cd 8008 	str.w	r8, [sp, #8]
	err = at_params_list_init(&resp_list, AT_CEREG_PARAMS_COUNT_MAX);
   1daba:	f021 ffba 	bl	3fa32 <at_params_list_init>
	if (err) {
   1dabe:	4604      	mov	r4, r0
   1dac0:	b1f8      	cbz	r0, 1db02 <at_handler+0xaa>
   1dac2:	489e      	ldr	r0, [pc, #632]	; (1dd3c <at_handler+0x2e4>)
   1dac4:	4b9e      	ldr	r3, [pc, #632]	; (1dd40 <at_handler+0x2e8>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dac6:	4622      	mov	r2, r4
   1dac8:	1ac0      	subs	r0, r0, r3
   1daca:	08c0      	lsrs	r0, r0, #3
   1dacc:	0180      	lsls	r0, r0, #6
   1dace:	499f      	ldr	r1, [pc, #636]	; (1dd4c <at_handler+0x2f4>)
   1dad0:	f040 0001 	orr.w	r0, r0, #1
   1dad4:	f01f fc14 	bl	3d300 <log_string_sync>
   1dad8:	4b99      	ldr	r3, [pc, #612]	; (1dd40 <at_handler+0x2e8>)
   1dada:	4d98      	ldr	r5, [pc, #608]	; (1dd3c <at_handler+0x2e4>)
			LOG_ERR("Failed to parse notification (error %d): %s",
   1dadc:	4630      	mov	r0, r6
   1dade:	1aed      	subs	r5, r5, r3
   1dae0:	f01f fc21 	bl	3d326 <log_strdup>
   1dae4:	08ed      	lsrs	r5, r5, #3
   1dae6:	01ad      	lsls	r5, r5, #6
   1dae8:	f045 0501 	orr.w	r5, r5, #1
   1daec:	4603      	mov	r3, r0
   1daee:	4622      	mov	r2, r4
   1daf0:	4628      	mov	r0, r5
   1daf2:	4997      	ldr	r1, [pc, #604]	; (1dd50 <at_handler+0x2f8>)
   1daf4:	f01f fc04 	bl	3d300 <log_string_sync>
			return;
   1daf8:	e7bf      	b.n	1da7a <at_handler+0x22>
	for (size_t i = 0; i < ARRAY_SIZE(at_notifs); i++) {
   1dafa:	3701      	adds	r7, #1
   1dafc:	2f03      	cmp	r7, #3
   1dafe:	d1c3      	bne.n	1da88 <at_handler+0x30>
   1db00:	e7bb      	b.n	1da7a <at_handler+0x22>
	err = at_parser_params_from_str(notification,
   1db02:	4601      	mov	r1, r0
   1db04:	aa07      	add	r2, sp, #28
   1db06:	4630      	mov	r0, r6
   1db08:	f021 ff90 	bl	3fa2c <at_parser_params_from_str>
	if (err) {
   1db0c:	4604      	mov	r4, r0
   1db0e:	2800      	cmp	r0, #0
   1db10:	d05e      	beq.n	1dbd0 <at_handler+0x178>
		LOG_ERR("Could not parse AT+CEREG response, error: %d", err);
   1db12:	4622      	mov	r2, r4
   1db14:	4889      	ldr	r0, [pc, #548]	; (1dd3c <at_handler+0x2e4>)
   1db16:	4b8a      	ldr	r3, [pc, #552]	; (1dd40 <at_handler+0x2e8>)
   1db18:	498e      	ldr	r1, [pc, #568]	; (1dd54 <at_handler+0x2fc>)
   1db1a:	1ac0      	subs	r0, r0, r3
   1db1c:	08c0      	lsrs	r0, r0, #3
   1db1e:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get registration status, error: %d", err);
   1db20:	f040 0001 	orr.w	r0, r0, #1
   1db24:	f01f fbec 	bl	3d300 <log_string_sync>
	at_params_list_free(&resp_list);
   1db28:	a807      	add	r0, sp, #28
   1db2a:	f021 ff95 	bl	3fa58 <at_params_list_free>
		if (err) {
   1db2e:	2c00      	cmp	r4, #0
   1db30:	d1d2      	bne.n	1dad8 <at_handler+0x80>
		if ((reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1db32:	f005 07fb 	and.w	r7, r5, #251	; 0xfb
   1db36:	2f01      	cmp	r7, #1
   1db38:	d102      	bne.n	1db40 <at_handler+0xe8>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1db3a:	4887      	ldr	r0, [pc, #540]	; (1dd58 <at_handler+0x300>)
   1db3c:	f01b fbba 	bl	392b4 <z_impl_k_sem_give>
		if (!evt_handler) {
   1db40:	4c86      	ldr	r4, [pc, #536]	; (1dd5c <at_handler+0x304>)
   1db42:	6823      	ldr	r3, [r4, #0]
   1db44:	2b00      	cmp	r3, #0
   1db46:	d098      	beq.n	1da7a <at_handler+0x22>
		if (reg_status != prev_reg_status) {
   1db48:	4a85      	ldr	r2, [pc, #532]	; (1dd60 <at_handler+0x308>)
   1db4a:	7811      	ldrb	r1, [r2, #0]
   1db4c:	42a9      	cmp	r1, r5
   1db4e:	d007      	beq.n	1db60 <at_handler+0x108>
			prev_reg_status = reg_status;
   1db50:	7015      	strb	r5, [r2, #0]
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1db52:	2200      	movs	r2, #0
			evt.nw_reg_status = reg_status;
   1db54:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
			evt.type = LTE_LC_EVT_NW_REG_STATUS;
   1db58:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
			evt_handler(&evt);
   1db5c:	a809      	add	r0, sp, #36	; 0x24
   1db5e:	4798      	blx	r3
		if (memcmp(&cell, &prev_cell, sizeof(struct lte_lc_cell))) {
   1db60:	4e80      	ldr	r6, [pc, #512]	; (1dd64 <at_handler+0x30c>)
   1db62:	ad03      	add	r5, sp, #12
   1db64:	2208      	movs	r2, #8
   1db66:	4631      	mov	r1, r6
   1db68:	4628      	mov	r0, r5
   1db6a:	f024 f88a 	bl	41c82 <memcmp>
   1db6e:	b160      	cbz	r0, 1db8a <at_handler+0x132>
			evt.type = LTE_LC_EVT_CELL_UPDATE;
   1db70:	e895 0003 	ldmia.w	r5, {r0, r1}
   1db74:	2304      	movs	r3, #4
   1db76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			memcpy(&prev_cell, &cell, sizeof(struct lte_lc_cell));
   1db7a:	ab0c      	add	r3, sp, #48	; 0x30
   1db7c:	e903 0003 	stmdb	r3, {r0, r1}
   1db80:	e886 0003 	stmia.w	r6, {r0, r1}
			evt_handler(&evt);
   1db84:	6823      	ldr	r3, [r4, #0]
   1db86:	a809      	add	r0, sp, #36	; 0x24
   1db88:	4798      	blx	r3
		if ((reg_status != LTE_LC_NW_REG_REGISTERED_HOME) &&
   1db8a:	2f01      	cmp	r7, #1
   1db8c:	f47f af75 	bne.w	1da7a <at_handler+0x22>
		if (memcmp(&psm_cfg, &prev_psm_cfg,
   1db90:	4e75      	ldr	r6, [pc, #468]	; (1dd68 <at_handler+0x310>)
   1db92:	ad05      	add	r5, sp, #20
   1db94:	2208      	movs	r2, #8
   1db96:	4631      	mov	r1, r6
   1db98:	4628      	mov	r0, r5
   1db9a:	f024 f872 	bl	41c82 <memcmp>
   1db9e:	b158      	cbz	r0, 1dbb8 <at_handler+0x160>
			evt.type = LTE_LC_EVT_PSM_UPDATE;
   1dba0:	e895 0003 	ldmia.w	r5, {r0, r1}
   1dba4:	ab0c      	add	r3, sp, #48	; 0x30
   1dba6:	e886 0003 	stmia.w	r6, {r0, r1}
   1dbaa:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
			memcpy(&evt.psm_cfg, &psm_cfg,
   1dbae:	e903 0003 	stmdb	r3, {r0, r1}
			evt_handler(&evt);
   1dbb2:	6823      	ldr	r3, [r4, #0]
   1dbb4:	a809      	add	r0, sp, #36	; 0x24
   1dbb6:	4798      	blx	r3
	bool notify = false;
   1dbb8:	2300      	movs	r3, #0
	if (evt_handler && notify) {
   1dbba:	4a68      	ldr	r2, [pc, #416]	; (1dd5c <at_handler+0x304>)
   1dbbc:	6812      	ldr	r2, [r2, #0]
   1dbbe:	2a00      	cmp	r2, #0
   1dbc0:	f43f af5b 	beq.w	1da7a <at_handler+0x22>
   1dbc4:	2b00      	cmp	r3, #0
   1dbc6:	f43f af58 	beq.w	1da7a <at_handler+0x22>
		evt_handler(&evt);
   1dbca:	a809      	add	r0, sp, #36	; 0x24
   1dbcc:	4790      	blx	r2
   1dbce:	e754      	b.n	1da7a <at_handler+0x22>
	err = at_params_int_get(&resp_list,
   1dbd0:	2101      	movs	r1, #1
   1dbd2:	aa01      	add	r2, sp, #4
   1dbd4:	a807      	add	r0, sp, #28
   1dbd6:	f021 ffef 	bl	3fbb8 <at_params_int_get>
	if (err) {
   1dbda:	4604      	mov	r4, r0
   1dbdc:	b138      	cbz	r0, 1dbee <at_handler+0x196>
   1dbde:	4857      	ldr	r0, [pc, #348]	; (1dd3c <at_handler+0x2e4>)
   1dbe0:	4b57      	ldr	r3, [pc, #348]	; (1dd40 <at_handler+0x2e8>)
		LOG_ERR("Could not get registration status, error: %d", err);
   1dbe2:	4622      	mov	r2, r4
   1dbe4:	1ac0      	subs	r0, r0, r3
   1dbe6:	08c0      	lsrs	r0, r0, #3
   1dbe8:	4960      	ldr	r1, [pc, #384]	; (1dd6c <at_handler+0x314>)
   1dbea:	0180      	lsls	r0, r0, #6
   1dbec:	e798      	b.n	1db20 <at_handler+0xc8>
	*reg_status = status;
   1dbee:	f89d 5004 	ldrb.w	r5, [sp, #4]
	if ((*reg_status != LTE_LC_NW_REG_UICC_FAIL) &&
   1dbf2:	2d5a      	cmp	r5, #90	; 0x5a
   1dbf4:	d05b      	beq.n	1dcae <at_handler+0x256>
	    (at_params_valid_count_get(&resp_list) > AT_CEREG_CELL_ID_INDEX)) {
   1dbf6:	a807      	add	r0, sp, #28
   1dbf8:	f022 f81c 	bl	3fc34 <at_params_valid_count_get>
	if ((*reg_status != LTE_LC_NW_REG_UICC_FAIL) &&
   1dbfc:	2803      	cmp	r0, #3
   1dbfe:	d956      	bls.n	1dcae <at_handler+0x256>
		err = at_params_string_get(&resp_list,
   1dc00:	2102      	movs	r1, #2
   1dc02:	ab02      	add	r3, sp, #8
   1dc04:	aa09      	add	r2, sp, #36	; 0x24
   1dc06:	a807      	add	r0, sp, #28
   1dc08:	f021 ffed 	bl	3fbe6 <at_params_string_get>
		if (err) {
   1dc0c:	4607      	mov	r7, r0
   1dc0e:	b160      	cbz	r0, 1dc2a <at_handler+0x1d2>
			LOG_ERR("Could not get tracking area code, error: %d", err);
   1dc10:	463a      	mov	r2, r7
   1dc12:	4b4a      	ldr	r3, [pc, #296]	; (1dd3c <at_handler+0x2e4>)
   1dc14:	484a      	ldr	r0, [pc, #296]	; (1dd40 <at_handler+0x2e8>)
   1dc16:	4956      	ldr	r1, [pc, #344]	; (1dd70 <at_handler+0x318>)
   1dc18:	1a1b      	subs	r3, r3, r0
   1dc1a:	08db      	lsrs	r3, r3, #3
   1dc1c:	019b      	lsls	r3, r3, #6
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dc1e:	f043 0001 	orr.w	r0, r3, #1
   1dc22:	f01f fb6d 	bl	3d300 <log_string_sync>
			goto clean_exit;
   1dc26:	463c      	mov	r4, r7
   1dc28:	e77e      	b.n	1db28 <at_handler+0xd0>
		str_buf[len] = '\0';
   1dc2a:	9b02      	ldr	r3, [sp, #8]
   1dc2c:	aa0c      	add	r2, sp, #48	; 0x30
   1dc2e:	4413      	add	r3, r2
		cell->tac = strtoul(str_buf, NULL, 16);
   1dc30:	4621      	mov	r1, r4
   1dc32:	2210      	movs	r2, #16
   1dc34:	a809      	add	r0, sp, #36	; 0x24
		str_buf[len] = '\0';
   1dc36:	f803 4c0c 	strb.w	r4, [r3, #-12]
		cell->tac = strtoul(str_buf, NULL, 16);
   1dc3a:	f01d fddf 	bl	3b7fc <strtoul>
		err = at_params_string_get(&resp_list,
   1dc3e:	2103      	movs	r1, #3
		cell->tac = strtoul(str_buf, NULL, 16);
   1dc40:	9004      	str	r0, [sp, #16]
		err = at_params_string_get(&resp_list,
   1dc42:	ab02      	add	r3, sp, #8
   1dc44:	aa09      	add	r2, sp, #36	; 0x24
   1dc46:	a807      	add	r0, sp, #28
		len = sizeof(str_buf) - 1;
   1dc48:	f8cd 8008 	str.w	r8, [sp, #8]
		err = at_params_string_get(&resp_list,
   1dc4c:	f021 ffcb 	bl	3fbe6 <at_params_string_get>
		if (err) {
   1dc50:	4607      	mov	r7, r0
   1dc52:	b138      	cbz	r0, 1dc64 <at_handler+0x20c>
   1dc54:	4b39      	ldr	r3, [pc, #228]	; (1dd3c <at_handler+0x2e4>)
   1dc56:	483a      	ldr	r0, [pc, #232]	; (1dd40 <at_handler+0x2e8>)
			LOG_ERR("Could not get cell ID, error: %d", err);
   1dc58:	463a      	mov	r2, r7
   1dc5a:	1a1b      	subs	r3, r3, r0
   1dc5c:	08db      	lsrs	r3, r3, #3
   1dc5e:	4945      	ldr	r1, [pc, #276]	; (1dd74 <at_handler+0x31c>)
   1dc60:	019b      	lsls	r3, r3, #6
   1dc62:	e7dc      	b.n	1dc1e <at_handler+0x1c6>
		str_buf[len] = '\0';
   1dc64:	2100      	movs	r1, #0
   1dc66:	9b02      	ldr	r3, [sp, #8]
   1dc68:	aa0c      	add	r2, sp, #48	; 0x30
   1dc6a:	4413      	add	r3, r2
		cell->id = strtoul(str_buf, NULL, 16);
   1dc6c:	a809      	add	r0, sp, #36	; 0x24
   1dc6e:	2210      	movs	r2, #16
		str_buf[len] = '\0';
   1dc70:	f803 1c0c 	strb.w	r1, [r3, #-12]
		cell->id = strtoul(str_buf, NULL, 16);
   1dc74:	f01d fdc2 	bl	3b7fc <strtoul>
   1dc78:	9003      	str	r0, [sp, #12]
	if (((*reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   1dc7a:	f005 07fb 	and.w	r7, r5, #251	; 0xfb
   1dc7e:	2f01      	cmp	r7, #1
   1dc80:	d11a      	bne.n	1dcb8 <at_handler+0x260>
	     (at_params_valid_count_get(&resp_list) > AT_CEREG_TAU_INDEX)) {
   1dc82:	a807      	add	r0, sp, #28
   1dc84:	f021 ffd6 	bl	3fc34 <at_params_valid_count_get>
	    (*reg_status == LTE_LC_NW_REG_REGISTERED_ROAMING)) &&
   1dc88:	2808      	cmp	r0, #8
   1dc8a:	d915      	bls.n	1dcb8 <at_handler+0x260>
		err = parse_psm_cfg(&resp_list, true, psm_cfg);
   1dc8c:	4639      	mov	r1, r7
   1dc8e:	aa05      	add	r2, sp, #20
   1dc90:	a807      	add	r0, sp, #28
   1dc92:	f00d fd4b 	bl	2b72c <parse_psm_cfg>
		if (err) {
   1dc96:	4604      	mov	r4, r0
   1dc98:	2800      	cmp	r0, #0
   1dc9a:	f43f af45 	beq.w	1db28 <at_handler+0xd0>
   1dc9e:	4827      	ldr	r0, [pc, #156]	; (1dd3c <at_handler+0x2e4>)
   1dca0:	4b27      	ldr	r3, [pc, #156]	; (1dd40 <at_handler+0x2e8>)
			LOG_ERR("Failed to parse PSM configuration, error: %d",
   1dca2:	4622      	mov	r2, r4
   1dca4:	1ac0      	subs	r0, r0, r3
   1dca6:	08c0      	lsrs	r0, r0, #3
   1dca8:	4933      	ldr	r1, [pc, #204]	; (1dd78 <at_handler+0x320>)
   1dcaa:	0180      	lsls	r0, r0, #6
   1dcac:	e738      	b.n	1db20 <at_handler+0xc8>
		cell->tac = UINT32_MAX;
   1dcae:	f04f 33ff 	mov.w	r3, #4294967295
		cell->id = UINT32_MAX;
   1dcb2:	e9cd 3303 	strd	r3, r3, [sp, #12]
   1dcb6:	e7e0      	b.n	1dc7a <at_handler+0x222>
		psm_cfg->tau = -1;
   1dcb8:	f04f 33ff 	mov.w	r3, #4294967295
		psm_cfg->active_time = -1;
   1dcbc:	e9cd 3305 	strd	r3, r3, [sp, #20]
   1dcc0:	e732      	b.n	1db28 <at_handler+0xd0>
static int parse_rrc_mode(const char *at_response,
			  enum lte_lc_rrc_mode *mode,
			  size_t mode_index)
{
	int err, temp_mode;
	struct at_param_list resp_list = {0};
   1dcc2:	e9cd 0007 	strd	r0, r0, [sp, #28]

	err = at_params_list_init(&resp_list, AT_CSCON_PARAMS_COUNT_MAX);
   1dcc6:	2104      	movs	r1, #4
   1dcc8:	a807      	add	r0, sp, #28
   1dcca:	f021 feb2 	bl	3fa32 <at_params_list_init>
	if (err) {
   1dcce:	4604      	mov	r4, r0
   1dcd0:	b1b0      	cbz	r0, 1dd00 <at_handler+0x2a8>
   1dcd2:	481a      	ldr	r0, [pc, #104]	; (1dd3c <at_handler+0x2e4>)
   1dcd4:	4b1a      	ldr	r3, [pc, #104]	; (1dd40 <at_handler+0x2e8>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1dcd6:	4622      	mov	r2, r4
   1dcd8:	1ac0      	subs	r0, r0, r3
   1dcda:	08c0      	lsrs	r0, r0, #3
   1dcdc:	0180      	lsls	r0, r0, #6
   1dcde:	491b      	ldr	r1, [pc, #108]	; (1dd4c <at_handler+0x2f4>)
   1dce0:	f040 0001 	orr.w	r0, r0, #1
   1dce4:	f01f fb0c 	bl	3d300 <log_string_sync>
			LOG_ERR("Can't parse signalling mode, error: %d", err);
   1dce8:	4622      	mov	r2, r4
   1dcea:	4814      	ldr	r0, [pc, #80]	; (1dd3c <at_handler+0x2e4>)
   1dcec:	4b14      	ldr	r3, [pc, #80]	; (1dd40 <at_handler+0x2e8>)
   1dcee:	4923      	ldr	r1, [pc, #140]	; (1dd7c <at_handler+0x324>)
   1dcf0:	1ac0      	subs	r0, r0, r3
   1dcf2:	08c0      	lsrs	r0, r0, #3
   1dcf4:	0180      	lsls	r0, r0, #6
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1dcf6:	f040 0001 	orr.w	r0, r0, #1
   1dcfa:	f01f fb01 	bl	3d300 <log_string_sync>
			return;
   1dcfe:	e6bc      	b.n	1da7a <at_handler+0x22>
		return err;
	}

	/* Parse CSCON response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1dd00:	4601      	mov	r1, r0
   1dd02:	aa07      	add	r2, sp, #28
   1dd04:	4630      	mov	r0, r6
   1dd06:	f021 fe91 	bl	3fa2c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1dd0a:	4604      	mov	r4, r0
   1dd0c:	2800      	cmp	r0, #0
   1dd0e:	d039      	beq.n	1dd84 <at_handler+0x32c>
		LOG_ERR("Could not parse +CSCON response, error: %d", err);
   1dd10:	4622      	mov	r2, r4
   1dd12:	480a      	ldr	r0, [pc, #40]	; (1dd3c <at_handler+0x2e4>)
   1dd14:	4b0a      	ldr	r3, [pc, #40]	; (1dd40 <at_handler+0x2e8>)
   1dd16:	491a      	ldr	r1, [pc, #104]	; (1dd80 <at_handler+0x328>)
   1dd18:	1ac0      	subs	r0, r0, r3
   1dd1a:	08c0      	lsrs	r0, r0, #3
   1dd1c:	0180      	lsls	r0, r0, #6
	}

	/* Get the RRC mode from the response */
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
	if (err) {
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1dd1e:	f040 0001 	orr.w	r0, r0, #1
   1dd22:	f01f faed 	bl	3d300 <log_string_sync>
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
		err = -EINVAL;
	}

clean_exit:
	at_params_list_free(&resp_list);
   1dd26:	a807      	add	r0, sp, #28
   1dd28:	f021 fe96 	bl	3fa58 <at_params_list_free>
		if (err) {
   1dd2c:	2c00      	cmp	r4, #0
   1dd2e:	d1db      	bne.n	1dce8 <at_handler+0x290>
		evt.type = LTE_LC_EVT_RRC_UPDATE;
   1dd30:	2303      	movs	r3, #3
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1dd32:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		notify = true;
   1dd36:	2301      	movs	r3, #1
		break;
   1dd38:	e73f      	b.n	1dbba <at_handler+0x162>
   1dd3a:	bf00      	nop
   1dd3c:	0004343c 	.word	0x0004343c
   1dd40:	0004339c 	.word	0x0004339c
   1dd44:	00047653 	.word	0x00047653
   1dd48:	00043a90 	.word	0x00043a90
   1dd4c:	00047673 	.word	0x00047673
   1dd50:	00047770 	.word	0x00047770
   1dd54:	0004769c 	.word	0x0004769c
   1dd58:	200191a4 	.word	0x200191a4
   1dd5c:	200191a0 	.word	0x200191a0
   1dd60:	20020730 	.word	0x20020730
   1dd64:	200191bc 	.word	0x200191bc
   1dd68:	200191c4 	.word	0x200191c4
   1dd6c:	000476c9 	.word	0x000476c9
   1dd70:	000476f6 	.word	0x000476f6
   1dd74:	00047722 	.word	0x00047722
   1dd78:	00047743 	.word	0x00047743
   1dd7c:	0004780c 	.word	0x0004780c
   1dd80:	0004779c 	.word	0x0004779c
	err = at_params_int_get(&resp_list, mode_index, &temp_mode);
   1dd84:	4639      	mov	r1, r7
   1dd86:	aa05      	add	r2, sp, #20
   1dd88:	a807      	add	r0, sp, #28
   1dd8a:	f021 ff15 	bl	3fbb8 <at_params_int_get>
	if (err) {
   1dd8e:	4604      	mov	r4, r0
   1dd90:	b138      	cbz	r0, 1dda2 <at_handler+0x34a>
   1dd92:	487d      	ldr	r0, [pc, #500]	; (1df88 <at_handler+0x530>)
   1dd94:	4b7d      	ldr	r3, [pc, #500]	; (1df8c <at_handler+0x534>)
		LOG_ERR("Could not get signalling mode, error: %d", err);
   1dd96:	4622      	mov	r2, r4
   1dd98:	1ac0      	subs	r0, r0, r3
   1dd9a:	08c0      	lsrs	r0, r0, #3
   1dd9c:	497c      	ldr	r1, [pc, #496]	; (1df90 <at_handler+0x538>)
   1dd9e:	0180      	lsls	r0, r0, #6
   1dda0:	e7bd      	b.n	1dd1e <at_handler+0x2c6>
	if (temp_mode == 0) {
   1dda2:	9a05      	ldr	r2, [sp, #20]
   1dda4:	b912      	cbnz	r2, 1ddac <at_handler+0x354>
		*mode = LTE_LC_RRC_MODE_IDLE;
   1dda6:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
   1ddaa:	e7bc      	b.n	1dd26 <at_handler+0x2ce>
	} else if (temp_mode == 1) {
   1ddac:	2a01      	cmp	r2, #1
   1ddae:	d102      	bne.n	1ddb6 <at_handler+0x35e>
		*mode = LTE_LC_RRC_MODE_CONNECTED;
   1ddb0:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
   1ddb4:	e7b7      	b.n	1dd26 <at_handler+0x2ce>
   1ddb6:	4b75      	ldr	r3, [pc, #468]	; (1df8c <at_handler+0x534>)
   1ddb8:	4873      	ldr	r0, [pc, #460]	; (1df88 <at_handler+0x530>)
		LOG_ERR("Invalid signalling mode: %d", temp_mode);
   1ddba:	4976      	ldr	r1, [pc, #472]	; (1df94 <at_handler+0x53c>)
   1ddbc:	1ac0      	subs	r0, r0, r3
   1ddbe:	08c0      	lsrs	r0, r0, #3
   1ddc0:	0180      	lsls	r0, r0, #6
   1ddc2:	f040 0001 	orr.w	r0, r0, #1
   1ddc6:	f01f fa9b 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   1ddca:	f06f 0415 	mvn.w	r4, #21
   1ddce:	e7aa      	b.n	1dd26 <at_handler+0x2ce>
{
	int err;
	uint8_t idx;
	struct at_param_list resp_list = {0};
	char tmp_buf[5];
	size_t len = sizeof(tmp_buf) - 1;
   1ddd0:	2304      	movs	r3, #4
	switch (sys_mode_current) {
   1ddd2:	4d71      	ldr	r5, [pc, #452]	; (1df98 <at_handler+0x540>)
	size_t len = sizeof(tmp_buf) - 1;
   1ddd4:	9303      	str	r3, [sp, #12]
   1ddd6:	782b      	ldrb	r3, [r5, #0]
	struct at_param_list resp_list = {0};
   1ddd8:	e9cd 0007 	strd	r0, r0, [sp, #28]
	switch (sys_mode_current) {
   1dddc:	3b01      	subs	r3, #1
   1ddde:	2b04      	cmp	r3, #4
   1dde0:	d804      	bhi.n	1ddec <at_handler+0x394>
   1dde2:	e8df f003 	tbb	[pc, r3]
   1dde6:	2b17      	.short	0x2b17
   1dde8:	1703      	.short	0x1703
   1ddea:	2b          	.byte	0x2b
   1ddeb:	00          	.byte	0x00
   1ddec:	4b67      	ldr	r3, [pc, #412]	; (1df8c <at_handler+0x534>)
   1ddee:	4866      	ldr	r0, [pc, #408]	; (1df88 <at_handler+0x530>)
		LOG_ERR("No LTE connection available in this system mode");
   1ddf0:	496a      	ldr	r1, [pc, #424]	; (1df9c <at_handler+0x544>)
   1ddf2:	1ac0      	subs	r0, r0, r3
   1ddf4:	08c0      	lsrs	r0, r0, #3
   1ddf6:	0180      	lsls	r0, r0, #6
   1ddf8:	f040 0001 	orr.w	r0, r0, #1
   1ddfc:	f01f fa80 	bl	3d300 <log_string_sync>
		return -ENOTCONN;
   1de00:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1de04:	4860      	ldr	r0, [pc, #384]	; (1df88 <at_handler+0x530>)
   1de06:	4b61      	ldr	r3, [pc, #388]	; (1df8c <at_handler+0x534>)
			LOG_ERR("Can't parse eDRX, error: %d", err);
   1de08:	4622      	mov	r2, r4
   1de0a:	1ac0      	subs	r0, r0, r3
   1de0c:	08c0      	lsrs	r0, r0, #3
   1de0e:	4964      	ldr	r1, [pc, #400]	; (1dfa0 <at_handler+0x548>)
   1de10:	0180      	lsls	r0, r0, #6
   1de12:	e770      	b.n	1dcf6 <at_handler+0x29e>
	switch (sys_mode_current) {
   1de14:	ed9f 8a63 	vldr	s16, [pc, #396]	; 1dfa4 <at_handler+0x54c>
	err = get_ptw_multiplier(&ptw_multiplier);
	if (err) {
		return err;
	}

	err = at_params_list_init(&resp_list, AT_CEDRXP_PARAMS_COUNT_MAX);
   1de18:	2105      	movs	r1, #5
   1de1a:	a807      	add	r0, sp, #28
   1de1c:	f021 fe09 	bl	3fa32 <at_params_list_init>
	if (err) {
   1de20:	4604      	mov	r4, r0
   1de22:	b170      	cbz	r0, 1de42 <at_handler+0x3ea>
   1de24:	4b59      	ldr	r3, [pc, #356]	; (1df8c <at_handler+0x534>)
   1de26:	4858      	ldr	r0, [pc, #352]	; (1df88 <at_handler+0x530>)
		LOG_ERR("Could not init AT params list, error: %d", err);
   1de28:	4622      	mov	r2, r4
   1de2a:	1ac0      	subs	r0, r0, r3
   1de2c:	08c0      	lsrs	r0, r0, #3
   1de2e:	0180      	lsls	r0, r0, #6
   1de30:	495d      	ldr	r1, [pc, #372]	; (1dfa8 <at_handler+0x550>)
   1de32:	f040 0001 	orr.w	r0, r0, #1
   1de36:	f01f fa63 	bl	3d300 <log_string_sync>
		return err;
   1de3a:	e7e3      	b.n	1de04 <at_handler+0x3ac>
		*ptw_multiplier = 2.56;
   1de3c:	ed9f 8a5b 	vldr	s16, [pc, #364]	; 1dfac <at_handler+0x554>
   1de40:	e7ea      	b.n	1de18 <at_handler+0x3c0>
	}

	/* Parse CEDRXP response and populate AT parameter list */
	err = at_parser_params_from_str(at_response,
   1de42:	4601      	mov	r1, r0
   1de44:	aa07      	add	r2, sp, #28
   1de46:	4630      	mov	r0, r6
   1de48:	f021 fdf0 	bl	3fa2c <at_parser_params_from_str>
					NULL,
					&resp_list);
	if (err) {
   1de4c:	4604      	mov	r4, r0
   1de4e:	b188      	cbz	r0, 1de74 <at_handler+0x41c>
		LOG_ERR("Could not parse +CEDRXP response, error: %d", err);
   1de50:	4622      	mov	r2, r4
   1de52:	484d      	ldr	r0, [pc, #308]	; (1df88 <at_handler+0x530>)
   1de54:	4b4d      	ldr	r3, [pc, #308]	; (1df8c <at_handler+0x534>)
   1de56:	4956      	ldr	r1, [pc, #344]	; (1dfb0 <at_handler+0x558>)
   1de58:	1ac0      	subs	r0, r0, r3
   1de5a:	08c0      	lsrs	r0, r0, #3
   1de5c:	0180      	lsls	r0, r0, #6
	}

	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
				   tmp_buf, &len);
	if (err) {
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1de5e:	f040 0001 	orr.w	r0, r0, #1
   1de62:	f01f fa4d 	bl	3d300 <log_string_sync>
		(int)(100 * (cfg->edrx - (int)cfg->edrx)),
		(int)cfg->ptw,
		(int)(100 * (cfg->ptw - (int)cfg->ptw)));

clean_exit:
	at_params_list_free(&resp_list);
   1de66:	a807      	add	r0, sp, #28
   1de68:	f021 fdf6 	bl	3fa58 <at_params_list_free>
		if (err) {
   1de6c:	2c00      	cmp	r4, #0
   1de6e:	d1c9      	bne.n	1de04 <at_handler+0x3ac>
		evt.type = LTE_LC_EVT_EDRX_UPDATE;
   1de70:	2302      	movs	r3, #2
   1de72:	e75e      	b.n	1dd32 <at_handler+0x2da>
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_EDRX_INDEX,
   1de74:	2103      	movs	r1, #3
   1de76:	ab03      	add	r3, sp, #12
   1de78:	aa05      	add	r2, sp, #20
   1de7a:	a807      	add	r0, sp, #28
   1de7c:	f021 feb3 	bl	3fbe6 <at_params_string_get>
	if (err) {
   1de80:	4604      	mov	r4, r0
   1de82:	b138      	cbz	r0, 1de94 <at_handler+0x43c>
   1de84:	4840      	ldr	r0, [pc, #256]	; (1df88 <at_handler+0x530>)
   1de86:	4b41      	ldr	r3, [pc, #260]	; (1df8c <at_handler+0x534>)
		LOG_ERR("Failed to get eDRX configuration, error: %d", err);
   1de88:	4622      	mov	r2, r4
   1de8a:	1ac0      	subs	r0, r0, r3
   1de8c:	08c0      	lsrs	r0, r0, #3
   1de8e:	4949      	ldr	r1, [pc, #292]	; (1dfb4 <at_handler+0x55c>)
   1de90:	0180      	lsls	r0, r0, #6
   1de92:	e7e4      	b.n	1de5e <at_handler+0x406>
	tmp_buf[len] = '\0';
   1de94:	9b03      	ldr	r3, [sp, #12]
   1de96:	aa0c      	add	r2, sp, #48	; 0x30
   1de98:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1de9a:	4601      	mov	r1, r0
	tmp_buf[len] = '\0';
   1de9c:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1dea0:	2202      	movs	r2, #2
   1dea2:	a805      	add	r0, sp, #20
   1dea4:	f01d fcaa 	bl	3b7fc <strtoul>
	if ((edrx_value == NULL) || (idx > ARRAY_SIZE(edrx_lookup_ltem) - 1)) {
   1dea8:	b2c0      	uxtb	r0, r0
   1deaa:	280f      	cmp	r0, #15
   1deac:	d840      	bhi.n	1df30 <at_handler+0x4d8>
	switch (sys_mode_current) {
   1deae:	782b      	ldrb	r3, [r5, #0]
   1deb0:	3b01      	subs	r3, #1
   1deb2:	2b04      	cmp	r3, #4
   1deb4:	d826      	bhi.n	1df04 <at_handler+0x4ac>
   1deb6:	e8df f003 	tbb	[pc, r3]
   1deba:	2303      	.short	0x2303
   1debc:	0325      	.short	0x0325
   1debe:	23          	.byte	0x23
   1debf:	00          	.byte	0x00
		multiplier = edrx_lookup_ltem[idx];
   1dec0:	4b3d      	ldr	r3, [pc, #244]	; (1dfb8 <at_handler+0x560>)
		multiplier = edrx_lookup_nbiot[idx];
   1dec2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1dec6:	2800      	cmp	r0, #0
   1dec8:	d030      	beq.n	1df2c <at_handler+0x4d4>
   1deca:	f7fe fc0b 	bl	1c6e4 <__aeabi_i2d>
   1dece:	a32c      	add	r3, pc, #176	; (adr r3, 1df80 <at_handler+0x528>)
   1ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ded4:	f7fe fc70 	bl	1c7b8 <__aeabi_dmul>
   1ded8:	f7fe ff50 	bl	1cd7c <__aeabi_d2f>
	len = sizeof(tmp_buf) - 1;
   1dedc:	2104      	movs	r1, #4
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1dede:	900a      	str	r0, [sp, #40]	; 0x28
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1dee0:	ab03      	add	r3, sp, #12
   1dee2:	aa05      	add	r2, sp, #20
   1dee4:	a807      	add	r0, sp, #28
	len = sizeof(tmp_buf) - 1;
   1dee6:	9103      	str	r1, [sp, #12]
	err = at_params_string_get(&resp_list, AT_CEDRXP_NW_PTW_INDEX,
   1dee8:	f021 fe7d 	bl	3fbe6 <at_params_string_get>
	if (err) {
   1deec:	4604      	mov	r4, r0
   1deee:	b310      	cbz	r0, 1df36 <at_handler+0x4de>
   1def0:	4825      	ldr	r0, [pc, #148]	; (1df88 <at_handler+0x530>)
   1def2:	4b26      	ldr	r3, [pc, #152]	; (1df8c <at_handler+0x534>)
		LOG_ERR("Failed to get PTW configuration, error: %d", err);
   1def4:	4622      	mov	r2, r4
   1def6:	1ac0      	subs	r0, r0, r3
   1def8:	08c0      	lsrs	r0, r0, #3
   1defa:	4930      	ldr	r1, [pc, #192]	; (1dfbc <at_handler+0x564>)
   1defc:	0180      	lsls	r0, r0, #6
   1defe:	e7ae      	b.n	1de5e <at_handler+0x406>
		multiplier = edrx_lookup_nbiot[idx];
   1df00:	4b2f      	ldr	r3, [pc, #188]	; (1dfc0 <at_handler+0x568>)
   1df02:	e7de      	b.n	1dec2 <at_handler+0x46a>
   1df04:	4b21      	ldr	r3, [pc, #132]	; (1df8c <at_handler+0x534>)
   1df06:	4820      	ldr	r0, [pc, #128]	; (1df88 <at_handler+0x530>)
		LOG_ERR("No LTE connection available in this system mode");
   1df08:	4924      	ldr	r1, [pc, #144]	; (1df9c <at_handler+0x544>)
   1df0a:	1ac0      	subs	r0, r0, r3
   1df0c:	08c0      	lsrs	r0, r0, #3
   1df0e:	0180      	lsls	r0, r0, #6
   1df10:	f040 0001 	orr.w	r0, r0, #1
   1df14:	f01f f9f4 	bl	3d300 <log_string_sync>
		return -ENOTCONN;
   1df18:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   1df1c:	481a      	ldr	r0, [pc, #104]	; (1df88 <at_handler+0x530>)
   1df1e:	4b1b      	ldr	r3, [pc, #108]	; (1df8c <at_handler+0x534>)
		LOG_ERR("Failed to get eDRX value, error; %d", err);
   1df20:	4622      	mov	r2, r4
   1df22:	1ac0      	subs	r0, r0, r3
   1df24:	08c0      	lsrs	r0, r0, #3
   1df26:	4927      	ldr	r1, [pc, #156]	; (1dfc4 <at_handler+0x56c>)
   1df28:	0180      	lsls	r0, r0, #6
   1df2a:	e798      	b.n	1de5e <at_handler+0x406>
	*edrx_value = multiplier == 0 ? 5.12 : multiplier * 10.24;
   1df2c:	4826      	ldr	r0, [pc, #152]	; (1dfc8 <at_handler+0x570>)
   1df2e:	e7d5      	b.n	1dedc <at_handler+0x484>
		return -EINVAL;
   1df30:	f06f 0415 	mvn.w	r4, #21
   1df34:	e7f2      	b.n	1df1c <at_handler+0x4c4>
	tmp_buf[len] = '\0';
   1df36:	9b03      	ldr	r3, [sp, #12]
   1df38:	aa0c      	add	r2, sp, #48	; 0x30
   1df3a:	4413      	add	r3, r2
	idx = strtoul(tmp_buf, NULL, 2);
   1df3c:	4601      	mov	r1, r0
   1df3e:	2202      	movs	r2, #2
	tmp_buf[len] = '\0';
   1df40:	f803 0c1c 	strb.w	r0, [r3, #-28]
	idx = strtoul(tmp_buf, NULL, 2);
   1df44:	a805      	add	r0, sp, #20
   1df46:	f01d fc59 	bl	3b7fc <strtoul>
	if (idx > 15) {
   1df4a:	b2c2      	uxtb	r2, r0
   1df4c:	2a0f      	cmp	r2, #15
   1df4e:	d90c      	bls.n	1df6a <at_handler+0x512>
   1df50:	4b0e      	ldr	r3, [pc, #56]	; (1df8c <at_handler+0x534>)
   1df52:	480d      	ldr	r0, [pc, #52]	; (1df88 <at_handler+0x530>)
		LOG_ERR("Invalid PTW lookup index: %d", idx);
   1df54:	491d      	ldr	r1, [pc, #116]	; (1dfcc <at_handler+0x574>)
   1df56:	1ac0      	subs	r0, r0, r3
   1df58:	08c0      	lsrs	r0, r0, #3
   1df5a:	0180      	lsls	r0, r0, #6
   1df5c:	f040 0001 	orr.w	r0, r0, #1
   1df60:	f01f f9ce 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   1df64:	f06f 0415 	mvn.w	r4, #21
		goto clean_exit;
   1df68:	e77d      	b.n	1de66 <at_handler+0x40e>
	idx += 1;
   1df6a:	3001      	adds	r0, #1
	cfg->ptw = idx * ptw_multiplier;
   1df6c:	b2c0      	uxtb	r0, r0
   1df6e:	ee07 0a90 	vmov	s15, r0
   1df72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1df76:	ee67 7a88 	vmul.f32	s15, s15, s16
   1df7a:	edcd 7a0b 	vstr	s15, [sp, #44]	; 0x2c
clean_exit:
   1df7e:	e772      	b.n	1de66 <at_handler+0x40e>
   1df80:	47ae147b 	.word	0x47ae147b
   1df84:	40247ae1 	.word	0x40247ae1
   1df88:	0004343c 	.word	0x0004343c
   1df8c:	0004339c 	.word	0x0004339c
   1df90:	000477c7 	.word	0x000477c7
   1df94:	000477f0 	.word	0x000477f0
   1df98:	20020731 	.word	0x20020731
   1df9c:	00047833 	.word	0x00047833
   1dfa0:	00047927 	.word	0x00047927
   1dfa4:	3fa3d70a 	.word	0x3fa3d70a
   1dfa8:	00047673 	.word	0x00047673
   1dfac:	4023d70a 	.word	0x4023d70a
   1dfb0:	00047863 	.word	0x00047863
   1dfb4:	0004788f 	.word	0x0004788f
   1dfb8:	00044194 	.word	0x00044194
   1dfbc:	000478df 	.word	0x000478df
   1dfc0:	000441b4 	.word	0x000441b4
   1dfc4:	000478bb 	.word	0x000478bb
   1dfc8:	40a3d70a 	.word	0x40a3d70a
   1dfcc:	0004790a 	.word	0x0004790a

0001dfd0 <nrf_cloud_encode_state>:

	return 0;
}

int nrf_cloud_encode_state(uint32_t reported_state, struct nrf_cloud_data *output)
{
   1dfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfd4:	4604      	mov	r4, r0
	int ret;

	__ASSERT_NO_MSG(output != NULL);
   1dfd6:	468b      	mov	fp, r1
{
   1dfd8:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(output != NULL);
   1dfda:	b959      	cbnz	r1, 1dff4 <nrf_cloud_encode_state+0x24>
   1dfdc:	4970      	ldr	r1, [pc, #448]	; (1e1a0 <nrf_cloud_encode_state+0x1d0>)
   1dfde:	4871      	ldr	r0, [pc, #452]	; (1e1a4 <nrf_cloud_encode_state+0x1d4>)
   1dfe0:	f240 1359 	movw	r3, #345	; 0x159
   1dfe4:	4a70      	ldr	r2, [pc, #448]	; (1e1a8 <nrf_cloud_encode_state+0x1d8>)
   1dfe6:	f01e fec6 	bl	3cd76 <printk>
   1dfea:	f240 1159 	movw	r1, #345	; 0x159
   1dfee:	486e      	ldr	r0, [pc, #440]	; (1e1a8 <nrf_cloud_encode_state+0x1d8>)
   1dff0:	f01f f975 	bl	3d2de <assert_post_action>

	cJSON *root_obj = cJSON_CreateObject();
   1dff4:	f00a ffba 	bl	28f6c <cJSON_CreateObject>
   1dff8:	4680      	mov	r8, r0
	cJSON *state_obj = cJSON_CreateObject();
   1dffa:	f00a ffb7 	bl	28f6c <cJSON_CreateObject>
   1dffe:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   1e000:	f00a ffb4 	bl	28f6c <cJSON_CreateObject>
   1e004:	4607      	mov	r7, r0
	cJSON *pairing_obj = cJSON_CreateObject();
   1e006:	f00a ffb1 	bl	28f6c <cJSON_CreateObject>
   1e00a:	4606      	mov	r6, r0
	cJSON *connection_obj = cJSON_CreateObject();
   1e00c:	f00a ffae 	bl	28f6c <cJSON_CreateObject>
   1e010:	4681      	mov	r9, r0

	if ((root_obj == NULL) || (state_obj == NULL) ||
   1e012:	f1b8 0f00 	cmp.w	r8, #0
   1e016:	d005      	beq.n	1e024 <nrf_cloud_encode_state+0x54>
   1e018:	f1ba 0f00 	cmp.w	sl, #0
   1e01c:	d002      	beq.n	1e024 <nrf_cloud_encode_state+0x54>
   1e01e:	b10f      	cbz	r7, 1e024 <nrf_cloud_encode_state+0x54>
	    (reported_obj == NULL) || (pairing_obj == NULL) ||
   1e020:	b106      	cbz	r6, 1e024 <nrf_cloud_encode_state+0x54>
   1e022:	b988      	cbnz	r0, 1e048 <nrf_cloud_encode_state+0x78>

		/* Report pairing topics. */
		cJSON *topics_obj = cJSON_CreateObject();

		if (topics_obj == NULL) {
			cJSON_Delete(root_obj);
   1e024:	4640      	mov	r0, r8
	ret += json_add_obj(reported_obj, "connection", connection_obj);
	ret += json_add_obj(state_obj, "reported", reported_obj);
	ret += json_add_obj(root_obj, "state", state_obj);

	if (ret != 0) {
		cJSON_Delete(root_obj);
   1e026:	f00a fecd 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1e02a:	4650      	mov	r0, sl
   1e02c:	f00a feca 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1e030:	4638      	mov	r0, r7
   1e032:	f00a fec7 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   1e036:	4630      	mov	r0, r6
   1e038:	f00a fec4 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(connection_obj);
   1e03c:	4648      	mov	r0, r9
   1e03e:	f00a fec1 	bl	28dc4 <cJSON_Delete>

	buffer = cJSON_PrintUnformatted(root_obj);
	cJSON_Delete(root_obj);

	if (buffer == NULL) {
		return -ENOMEM;
   1e042:	f06f 040b 	mvn.w	r4, #11
   1e046:	e014      	b.n	1e072 <nrf_cloud_encode_state+0xa2>
	switch (reported_state) {
   1e048:	2c06      	cmp	r4, #6
   1e04a:	d016      	beq.n	1e07a <nrf_cloud_encode_state+0xaa>
   1e04c:	2c07      	cmp	r4, #7
   1e04e:	d05a      	beq.n	1e106 <nrf_cloud_encode_state+0x136>
		cJSON_Delete(root_obj);
   1e050:	4640      	mov	r0, r8
   1e052:	f00a feb7 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   1e056:	4650      	mov	r0, sl
   1e058:	f00a feb4 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   1e05c:	4638      	mov	r0, r7
   1e05e:	f00a feb1 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(pairing_obj);
   1e062:	4630      	mov	r0, r6
   1e064:	f00a feae 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(connection_obj);
   1e068:	4648      	mov	r0, r9
   1e06a:	f00a feab 	bl	28dc4 <cJSON_Delete>
		return -ENOTSUP;
   1e06e:	f06f 0485 	mvn.w	r4, #133	; 0x85

	output->ptr = buffer;
	output->len = strlen(buffer);

	return 0;
}
   1e072:	4620      	mov	r0, r4
   1e074:	b009      	add	sp, #36	; 0x24
   1e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   1e07a:	4a4c      	ldr	r2, [pc, #304]	; (1e1ac <nrf_cloud_encode_state+0x1dc>)
   1e07c:	494c      	ldr	r1, [pc, #304]	; (1e1b0 <nrf_cloud_encode_state+0x1e0>)
   1e07e:	4630      	mov	r0, r6
   1e080:	f021 feda 	bl	3fe38 <json_add_str>
		ret += json_add_null(pairing_obj, "topics");
   1e084:	494b      	ldr	r1, [pc, #300]	; (1e1b4 <nrf_cloud_encode_state+0x1e4>)
		ret += json_add_str(pairing_obj, "state", DUA_PIN_STR);
   1e086:	4604      	mov	r4, r0
		ret += json_add_null(pairing_obj, "topics");
   1e088:	4630      	mov	r0, r6
   1e08a:	f021 feeb 	bl	3fe64 <json_add_null>
		ret += json_add_null(pairing_obj, "config");
   1e08e:	494a      	ldr	r1, [pc, #296]	; (1e1b8 <nrf_cloud_encode_state+0x1e8>)
		ret += json_add_null(pairing_obj, "topics");
   1e090:	4404      	add	r4, r0
		ret += json_add_null(pairing_obj, "config");
   1e092:	4630      	mov	r0, r6
   1e094:	f021 fee6 	bl	3fe64 <json_add_null>
		ret += json_add_null(reported_obj, "stage");
   1e098:	4948      	ldr	r1, [pc, #288]	; (1e1bc <nrf_cloud_encode_state+0x1ec>)
		ret += json_add_null(pairing_obj, "config");
   1e09a:	4404      	add	r4, r0
		ret += json_add_null(reported_obj, "stage");
   1e09c:	4638      	mov	r0, r7
   1e09e:	f021 fee1 	bl	3fe64 <json_add_null>
		ret += json_add_null(reported_obj,
   1e0a2:	4947      	ldr	r1, [pc, #284]	; (1e1c0 <nrf_cloud_encode_state+0x1f0>)
		ret += json_add_null(reported_obj, "stage");
   1e0a4:	1825      	adds	r5, r4, r0
		ret += json_add_null(reported_obj,
   1e0a6:	4638      	mov	r0, r7
   1e0a8:	f021 fedc 	bl	3fe64 <json_add_null>
		ret += json_add_null(connection_obj, "keepalive");
   1e0ac:	4945      	ldr	r1, [pc, #276]	; (1e1c4 <nrf_cloud_encode_state+0x1f4>)
		ret += json_add_null(reported_obj,
   1e0ae:	4405      	add	r5, r0
		ret += json_add_null(connection_obj, "keepalive");
   1e0b0:	4648      	mov	r0, r9
   1e0b2:	f021 fed7 	bl	3fe64 <json_add_null>
   1e0b6:	182c      	adds	r4, r5, r0
	cJSON_AddItemToObject(parent, str, item);
   1e0b8:	4632      	mov	r2, r6
   1e0ba:	4638      	mov	r0, r7
   1e0bc:	4942      	ldr	r1, [pc, #264]	; (1e1c8 <nrf_cloud_encode_state+0x1f8>)
   1e0be:	f021 f990 	bl	3f3e2 <cJSON_AddItemToObject>
   1e0c2:	464a      	mov	r2, r9
   1e0c4:	4638      	mov	r0, r7
   1e0c6:	4941      	ldr	r1, [pc, #260]	; (1e1cc <nrf_cloud_encode_state+0x1fc>)
   1e0c8:	f021 f98b 	bl	3f3e2 <cJSON_AddItemToObject>
   1e0cc:	463a      	mov	r2, r7
   1e0ce:	4650      	mov	r0, sl
   1e0d0:	493f      	ldr	r1, [pc, #252]	; (1e1d0 <nrf_cloud_encode_state+0x200>)
   1e0d2:	f021 f986 	bl	3f3e2 <cJSON_AddItemToObject>
   1e0d6:	4640      	mov	r0, r8
   1e0d8:	4652      	mov	r2, sl
   1e0da:	4935      	ldr	r1, [pc, #212]	; (1e1b0 <nrf_cloud_encode_state+0x1e0>)
   1e0dc:	f021 f981 	bl	3f3e2 <cJSON_AddItemToObject>
		cJSON_Delete(root_obj);
   1e0e0:	4640      	mov	r0, r8
	if (ret != 0) {
   1e0e2:	2c00      	cmp	r4, #0
   1e0e4:	d19f      	bne.n	1e026 <nrf_cloud_encode_state+0x56>
	buffer = cJSON_PrintUnformatted(root_obj);
   1e0e6:	f021 f95f 	bl	3f3a8 <cJSON_PrintUnformatted>
   1e0ea:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   1e0ec:	4640      	mov	r0, r8
   1e0ee:	f00a fe69 	bl	28dc4 <cJSON_Delete>
	if (buffer == NULL) {
   1e0f2:	2d00      	cmp	r5, #0
   1e0f4:	d0a5      	beq.n	1e042 <nrf_cloud_encode_state+0x72>
	output->len = strlen(buffer);
   1e0f6:	4628      	mov	r0, r5
	output->ptr = buffer;
   1e0f8:	f8cb 5004 	str.w	r5, [fp, #4]
	output->len = strlen(buffer);
   1e0fc:	f7ff f8ae 	bl	1d25c <strlen>
   1e100:	f8cb 0000 	str.w	r0, [fp]
	return 0;
   1e104:	e7b5      	b.n	1e072 <nrf_cloud_encode_state+0xa2>
		nct_dc_endpoint_get(&tx_endp, &rx_endp, &m_endp);
   1e106:	aa06      	add	r2, sp, #24
   1e108:	a902      	add	r1, sp, #8
   1e10a:	a804      	add	r0, sp, #16
   1e10c:	f010 fbae 	bl	2e86c <nct_dc_endpoint_get>
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   1e110:	9a07      	ldr	r2, [sp, #28]
   1e112:	492b      	ldr	r1, [pc, #172]	; (1e1c0 <nrf_cloud_encode_state+0x1f0>)
   1e114:	4638      	mov	r0, r7
   1e116:	f021 fe8f 	bl	3fe38 <json_add_str>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1e11a:	4a2e      	ldr	r2, [pc, #184]	; (1e1d4 <nrf_cloud_encode_state+0x204>)
   1e11c:	4924      	ldr	r1, [pc, #144]	; (1e1b0 <nrf_cloud_encode_state+0x1e0>)
		ret += json_add_str(reported_obj, "nrfcloud_mqtt_topic_prefix",
   1e11e:	4605      	mov	r5, r0
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1e120:	4630      	mov	r0, r6
   1e122:	f021 fe89 	bl	3fe38 <json_add_str>
		ret += json_add_null(pairing_obj, "config");
   1e126:	4924      	ldr	r1, [pc, #144]	; (1e1b8 <nrf_cloud_encode_state+0x1e8>)
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1e128:	9001      	str	r0, [sp, #4]
		ret += json_add_null(pairing_obj, "config");
   1e12a:	4630      	mov	r0, r6
   1e12c:	f021 fe9a 	bl	3fe64 <json_add_null>
		ret += json_add_null(reported_obj, "pairingStatus");
   1e130:	4929      	ldr	r1, [pc, #164]	; (1e1d8 <nrf_cloud_encode_state+0x208>)
		ret += json_add_null(pairing_obj, "config");
   1e132:	9000      	str	r0, [sp, #0]
		ret += json_add_null(reported_obj, "pairingStatus");
   1e134:	4638      	mov	r0, r7
   1e136:	f021 fe95 	bl	3fe64 <json_add_null>
		if (cJSON_AddNumberToObject(connection_obj, "keepalive",
   1e13a:	ed9f 0b17 	vldr	d0, [pc, #92]	; 1e198 <nrf_cloud_encode_state+0x1c8>
		ret += json_add_null(reported_obj, "pairingStatus");
   1e13e:	4604      	mov	r4, r0
		if (cJSON_AddNumberToObject(connection_obj, "keepalive",
   1e140:	4920      	ldr	r1, [pc, #128]	; (1e1c4 <nrf_cloud_encode_state+0x1f4>)
   1e142:	4648      	mov	r0, r9
   1e144:	f021 f983 	bl	3f44e <cJSON_AddNumberToObject>
   1e148:	b310      	cbz	r0, 1e190 <nrf_cloud_encode_state+0x1c0>
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1e14a:	9a01      	ldr	r2, [sp, #4]
		ret += json_add_null(pairing_obj, "config");
   1e14c:	9b00      	ldr	r3, [sp, #0]
		ret += json_add_str(pairing_obj, "state", PAIRED_STR);
   1e14e:	442a      	add	r2, r5
		ret += json_add_null(pairing_obj, "config");
   1e150:	4413      	add	r3, r2
		ret += json_add_null(reported_obj, "pairingStatus");
   1e152:	441c      	add	r4, r3
		cJSON *topics_obj = cJSON_CreateObject();
   1e154:	f00a ff0a 	bl	28f6c <cJSON_CreateObject>
		if (topics_obj == NULL) {
   1e158:	4605      	mov	r5, r0
   1e15a:	2800      	cmp	r0, #0
   1e15c:	f43f af62 	beq.w	1e024 <nrf_cloud_encode_state+0x54>
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   1e160:	9a05      	ldr	r2, [sp, #20]
   1e162:	491e      	ldr	r1, [pc, #120]	; (1e1dc <nrf_cloud_encode_state+0x20c>)
   1e164:	f021 fe68 	bl	3fe38 <json_add_str>
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   1e168:	9a03      	ldr	r2, [sp, #12]
   1e16a:	491d      	ldr	r1, [pc, #116]	; (1e1e0 <nrf_cloud_encode_state+0x210>)
		ret += json_add_str(topics_obj, "d2c", tx_endp.ptr);
   1e16c:	9000      	str	r0, [sp, #0]
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   1e16e:	4628      	mov	r0, r5
   1e170:	f021 fe62 	bl	3fe38 <json_add_str>
   1e174:	9b00      	ldr	r3, [sp, #0]
	cJSON_AddItemToObject(parent, str, item);
   1e176:	462a      	mov	r2, r5
		ret += json_add_str(topics_obj, "c2d", rx_endp.ptr);
   1e178:	4418      	add	r0, r3
   1e17a:	4404      	add	r4, r0
	cJSON_AddItemToObject(parent, str, item);
   1e17c:	490d      	ldr	r1, [pc, #52]	; (1e1b4 <nrf_cloud_encode_state+0x1e4>)
   1e17e:	4630      	mov	r0, r6
   1e180:	f021 f92f 	bl	3f3e2 <cJSON_AddItemToObject>
		if (ret != 0) {
   1e184:	2c00      	cmp	r4, #0
   1e186:	d097      	beq.n	1e0b8 <nrf_cloud_encode_state+0xe8>
			cJSON_Delete(topics_obj);
   1e188:	4628      	mov	r0, r5
   1e18a:	f00a fe1b 	bl	28dc4 <cJSON_Delete>
		break;
   1e18e:	e793      	b.n	1e0b8 <nrf_cloud_encode_state+0xe8>
			ret = -ENOMEM;
   1e190:	f06f 040b 	mvn.w	r4, #11
   1e194:	e7de      	b.n	1e154 <nrf_cloud_encode_state+0x184>
   1e196:	bf00      	nop
   1e198:	00000000 	.word	0x00000000
   1e19c:	405e0000 	.word	0x405e0000
   1e1a0:	000450d5 	.word	0x000450d5
   1e1a4:	00044dbf 	.word	0x00044dbf
   1e1a8:	000488b8 	.word	0x000488b8
   1e1ac:	00048a64 	.word	0x00048a64
   1e1b0:	0004b32e 	.word	0x0004b32e
   1e1b4:	00048acc 	.word	0x00048acc
   1e1b8:	0004b725 	.word	0x0004b725
   1e1bc:	00048ad3 	.word	0x00048ad3
   1e1c0:	000489b8 	.word	0x000489b8
   1e1c4:	00048ad9 	.word	0x00048ad9
   1e1c8:	000489d3 	.word	0x000489d3
   1e1cc:	0004a1de 	.word	0x0004a1de
   1e1d0:	00045164 	.word	0x00045164
   1e1d4:	00048ae3 	.word	0x00048ae3
   1e1d8:	00048aea 	.word	0x00048aea
   1e1dc:	00048af8 	.word	0x00048af8
   1e1e0:	00048afc 	.word	0x00048afc
   1e1e4:	00000000 	.word	0x00000000

0001e1e8 <double_to_sensor_value>:
 * @param val Sensor value to convert.
 * @param sense_val Pointer to sensor_value to store the converted data.
 */
static void double_to_sensor_value(double val,
				struct sensor_value *sense_val)
{
   1e1e8:	b5d0      	push	{r4, r6, r7, lr}
   1e1ea:	4614      	mov	r4, r2
   1e1ec:	460f      	mov	r7, r1
   1e1ee:	4606      	mov	r6, r0
	sense_val->val1 = (int)val;
   1e1f0:	f7fe fd7c 	bl	1ccec <__aeabi_d2iz>
   1e1f4:	6020      	str	r0, [r4, #0]
	sense_val->val2 = (val - (int)val) * 1000000;
   1e1f6:	f7fe fa75 	bl	1c6e4 <__aeabi_i2d>
   1e1fa:	4602      	mov	r2, r0
   1e1fc:	460b      	mov	r3, r1
   1e1fe:	4630      	mov	r0, r6
   1e200:	4639      	mov	r1, r7
   1e202:	f7fe f921 	bl	1c448 <__aeabi_dsub>
   1e206:	a304      	add	r3, pc, #16	; (adr r3, 1e218 <double_to_sensor_value+0x30>)
   1e208:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e20c:	f7fe fad4 	bl	1c7b8 <__aeabi_dmul>
   1e210:	f7fe fd6c 	bl	1ccec <__aeabi_d2iz>
   1e214:	6060      	str	r0, [r4, #4]
}
   1e216:	bdd0      	pop	{r4, r6, r7, pc}
   1e218:	00000000 	.word	0x00000000
   1e21c:	412e8480 	.word	0x412e8480

0001e220 <sensor_sim_sample_fetch>:
 *
 * @param chan Channel to generate data for.
 */
static int sensor_sim_generate_data(enum sensor_channel chan)
{
	switch (chan) {
   1e220:	290e      	cmp	r1, #14
	return 0;
}

static int sensor_sim_sample_fetch(const struct device *dev,
				enum sensor_channel chan)
{
   1e222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e224:	460c      	mov	r4, r1
	switch (chan) {
   1e226:	d056      	beq.n	1e2d6 <sensor_sim_sample_fetch+0xb6>
   1e228:	d806      	bhi.n	1e238 <sensor_sim_sample_fetch+0x18>
   1e22a:	2903      	cmp	r1, #3
   1e22c:	d919      	bls.n	1e262 <sensor_sim_sample_fetch+0x42>
   1e22e:	290d      	cmp	r1, #13
   1e230:	d03c      	beq.n	1e2ac <sensor_sim_sample_fetch+0x8c>
   1e232:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return sensor_sim_generate_data(chan);
}
   1e236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	switch (chan) {
   1e238:	2910      	cmp	r1, #16
   1e23a:	d1fa      	bne.n	1e232 <sensor_sim_sample_fetch+0x12>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e23c:	f01d f92a 	bl	3b494 <rand>
   1e240:	f7fe fa50 	bl	1c6e4 <__aeabi_i2d>
   1e244:	a32e      	add	r3, pc, #184	; (adr r3, 1e300 <sensor_sim_sample_fetch+0xe0>)
   1e246:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e24a:	f7fe fbdf 	bl	1ca0c <__aeabi_ddiv>
   1e24e:	2200      	movs	r2, #0
   1e250:	4b2d      	ldr	r3, [pc, #180]	; (1e308 <sensor_sim_sample_fetch+0xe8>)
   1e252:	f7fe f8f9 	bl	1c448 <__aeabi_dsub>
	humidity_sample = CONFIG_SENSOR_SIM_BASE_HUMIDITY +
   1e256:	4b2d      	ldr	r3, [pc, #180]	; (1e30c <sensor_sim_sample_fetch+0xec>)
   1e258:	2200      	movs	r2, #0
   1e25a:	f7fe f8f7 	bl	1c44c <__adddf3>
   1e25e:	4b2c      	ldr	r3, [pc, #176]	; (1e310 <sensor_sim_sample_fetch+0xf0>)
   1e260:	e036      	b.n	1e2d0 <sensor_sim_sample_fetch+0xb0>
		switch (chan) {
   1e262:	4d2c      	ldr	r5, [pc, #176]	; (1e314 <sensor_sim_sample_fetch+0xf4>)
   1e264:	6828      	ldr	r0, [r5, #0]
   1e266:	f7fe fa3d 	bl	1c6e4 <__aeabi_i2d>
   1e26a:	4b2b      	ldr	r3, [pc, #172]	; (1e318 <sensor_sim_sample_fetch+0xf8>)
   1e26c:	2200      	movs	r2, #0
   1e26e:	4606      	mov	r6, r0
   1e270:	460f      	mov	r7, r1
   1e272:	f7fe faa1 	bl	1c7b8 <__aeabi_dmul>
   1e276:	2c02      	cmp	r4, #2
   1e278:	4b28      	ldr	r3, [pc, #160]	; (1e31c <sensor_sim_sample_fetch+0xfc>)
   1e27a:	d014      	beq.n	1e2a6 <sensor_sim_sample_fetch+0x86>
   1e27c:	2c03      	cmp	r4, #3
   1e27e:	d00e      	beq.n	1e29e <sensor_sim_sample_fetch+0x7e>
   1e280:	2c01      	cmp	r4, #1
   1e282:	d009      	beq.n	1e298 <sensor_sim_sample_fetch+0x78>
			accel_samples[0] = static_val_coeff * max_variation;
   1e284:	e9c3 0100 	strd	r0, r1, [r3]
		static_val_coeff *= -1.0;
   1e288:	4630      	mov	r0, r6
   1e28a:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
   1e28e:	f7fe fd2d 	bl	1ccec <__aeabi_d2iz>
   1e292:	6028      	str	r0, [r5, #0]
	return 0;
   1e294:	2000      	movs	r0, #0
	return sensor_sim_generate_data(chan);
   1e296:	e7ce      	b.n	1e236 <sensor_sim_sample_fetch+0x16>
			accel_samples[1] = static_val_coeff * max_variation;
   1e298:	e9c3 0102 	strd	r0, r1, [r3, #8]
			break;
   1e29c:	e7f4      	b.n	1e288 <sensor_sim_sample_fetch+0x68>
			accel_samples[0] = static_val_coeff * max_variation;
   1e29e:	e9c3 0100 	strd	r0, r1, [r3]
			accel_samples[1] = static_val_coeff * max_variation;
   1e2a2:	e9c3 0102 	strd	r0, r1, [r3, #8]
			accel_samples[2] = static_val_coeff * max_variation;
   1e2a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
			break;
   1e2aa:	e7ed      	b.n	1e288 <sensor_sim_sample_fetch+0x68>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2ac:	f01d f8f2 	bl	3b494 <rand>
   1e2b0:	f7fe fa18 	bl	1c6e4 <__aeabi_i2d>
   1e2b4:	a312      	add	r3, pc, #72	; (adr r3, 1e300 <sensor_sim_sample_fetch+0xe0>)
   1e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2ba:	f7fe fba7 	bl	1ca0c <__aeabi_ddiv>
   1e2be:	2200      	movs	r2, #0
   1e2c0:	4b11      	ldr	r3, [pc, #68]	; (1e308 <sensor_sim_sample_fetch+0xe8>)
   1e2c2:	f7fe f8c1 	bl	1c448 <__aeabi_dsub>
	temp_sample = CONFIG_SENSOR_SIM_BASE_TEMPERATURE +
   1e2c6:	4b16      	ldr	r3, [pc, #88]	; (1e320 <sensor_sim_sample_fetch+0x100>)
   1e2c8:	2200      	movs	r2, #0
   1e2ca:	f7fe f8bf 	bl	1c44c <__adddf3>
   1e2ce:	4b15      	ldr	r3, [pc, #84]	; (1e324 <sensor_sim_sample_fetch+0x104>)
	pressure_sample = CONFIG_SENSOR_SIM_BASE_PRESSURE +
   1e2d0:	e9c3 0100 	strd	r0, r1, [r3]
   1e2d4:	e7de      	b.n	1e294 <sensor_sim_sample_fetch+0x74>
	return (double)rand() / ((double)RAND_MAX / 2.0) - 1.0;
   1e2d6:	f01d f8dd 	bl	3b494 <rand>
   1e2da:	f7fe fa03 	bl	1c6e4 <__aeabi_i2d>
   1e2de:	a308      	add	r3, pc, #32	; (adr r3, 1e300 <sensor_sim_sample_fetch+0xe0>)
   1e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e2e4:	f7fe fb92 	bl	1ca0c <__aeabi_ddiv>
   1e2e8:	2200      	movs	r2, #0
   1e2ea:	4b07      	ldr	r3, [pc, #28]	; (1e308 <sensor_sim_sample_fetch+0xe8>)
   1e2ec:	f7fe f8ac 	bl	1c448 <__aeabi_dsub>
	pressure_sample = CONFIG_SENSOR_SIM_BASE_PRESSURE +
   1e2f0:	4b0d      	ldr	r3, [pc, #52]	; (1e328 <sensor_sim_sample_fetch+0x108>)
   1e2f2:	2200      	movs	r2, #0
   1e2f4:	f7fe f8aa 	bl	1c44c <__adddf3>
   1e2f8:	4b0c      	ldr	r3, [pc, #48]	; (1e32c <sensor_sim_sample_fetch+0x10c>)
   1e2fa:	e7e9      	b.n	1e2d0 <sensor_sim_sample_fetch+0xb0>
   1e2fc:	f3af 8000 	nop.w
   1e300:	ffc00000 	.word	0xffc00000
   1e304:	41cfffff 	.word	0x41cfffff
   1e308:	3ff00000 	.word	0x3ff00000
   1e30c:	404a0000 	.word	0x404a0000
   1e310:	20018610 	.word	0x20018610
   1e314:	20015628 	.word	0x20015628
   1e318:	40340000 	.word	0x40340000
   1e31c:	200185f8 	.word	0x200185f8
   1e320:	40350000 	.word	0x40350000
   1e324:	20018928 	.word	0x20018928
   1e328:	40588000 	.word	0x40588000
   1e32c:	20018618 	.word	0x20018618

0001e330 <_strtod_l>:
   1e330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e334:	461f      	mov	r7, r3
   1e336:	b0a3      	sub	sp, #140	; 0x8c
   1e338:	2300      	movs	r3, #0
   1e33a:	4604      	mov	r4, r0
   1e33c:	4688      	mov	r8, r1
   1e33e:	9219      	str	r2, [sp, #100]	; 0x64
   1e340:	931e      	str	r3, [sp, #120]	; 0x78
   1e342:	f04f 0a00 	mov.w	sl, #0
   1e346:	4ba3      	ldr	r3, [pc, #652]	; (1e5d4 <_strtod_l+0x2a4>)
   1e348:	f04f 0b00 	mov.w	fp, #0
   1e34c:	681b      	ldr	r3, [r3, #0]
   1e34e:	4618      	mov	r0, r3
   1e350:	9307      	str	r3, [sp, #28]
   1e352:	f7fe ff83 	bl	1d25c <strlen>
   1e356:	4605      	mov	r5, r0
   1e358:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1e35c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e35e:	781a      	ldrb	r2, [r3, #0]
   1e360:	2a2b      	cmp	r2, #43	; 0x2b
   1e362:	d04c      	beq.n	1e3fe <_strtod_l+0xce>
   1e364:	d839      	bhi.n	1e3da <_strtod_l+0xaa>
   1e366:	2a0d      	cmp	r2, #13
   1e368:	d832      	bhi.n	1e3d0 <_strtod_l+0xa0>
   1e36a:	2a08      	cmp	r2, #8
   1e36c:	d832      	bhi.n	1e3d4 <_strtod_l+0xa4>
   1e36e:	2a00      	cmp	r2, #0
   1e370:	d03c      	beq.n	1e3ec <_strtod_l+0xbc>
   1e372:	2300      	movs	r3, #0
   1e374:	930e      	str	r3, [sp, #56]	; 0x38
   1e376:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   1e378:	7833      	ldrb	r3, [r6, #0]
   1e37a:	2b30      	cmp	r3, #48	; 0x30
   1e37c:	f040 80b5 	bne.w	1e4ea <_strtod_l+0x1ba>
   1e380:	7873      	ldrb	r3, [r6, #1]
   1e382:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1e386:	2b58      	cmp	r3, #88	; 0x58
   1e388:	d16c      	bne.n	1e464 <_strtod_l+0x134>
   1e38a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e38c:	a91d      	add	r1, sp, #116	; 0x74
   1e38e:	9702      	str	r7, [sp, #8]
   1e390:	4620      	mov	r0, r4
   1e392:	9301      	str	r3, [sp, #4]
   1e394:	ab1e      	add	r3, sp, #120	; 0x78
   1e396:	4a90      	ldr	r2, [pc, #576]	; (1e5d8 <_strtod_l+0x2a8>)
   1e398:	9300      	str	r3, [sp, #0]
   1e39a:	ab1f      	add	r3, sp, #124	; 0x7c
   1e39c:	f01d fcc8 	bl	3bd30 <__gethex>
   1e3a0:	f010 0707 	ands.w	r7, r0, #7
   1e3a4:	4605      	mov	r5, r0
   1e3a6:	d005      	beq.n	1e3b4 <_strtod_l+0x84>
   1e3a8:	2f06      	cmp	r7, #6
   1e3aa:	d12a      	bne.n	1e402 <_strtod_l+0xd2>
   1e3ac:	3601      	adds	r6, #1
   1e3ae:	2300      	movs	r3, #0
   1e3b0:	961d      	str	r6, [sp, #116]	; 0x74
   1e3b2:	930e      	str	r3, [sp, #56]	; 0x38
   1e3b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1e3b6:	2b00      	cmp	r3, #0
   1e3b8:	f040 859a 	bne.w	1eef0 <_strtod_l+0xbc0>
   1e3bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e3be:	b1db      	cbz	r3, 1e3f8 <_strtod_l+0xc8>
   1e3c0:	4652      	mov	r2, sl
   1e3c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   1e3c6:	ec43 2b10 	vmov	d0, r2, r3
   1e3ca:	b023      	add	sp, #140	; 0x8c
   1e3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e3d0:	2a20      	cmp	r2, #32
   1e3d2:	d1ce      	bne.n	1e372 <_strtod_l+0x42>
   1e3d4:	3301      	adds	r3, #1
   1e3d6:	931d      	str	r3, [sp, #116]	; 0x74
   1e3d8:	e7c0      	b.n	1e35c <_strtod_l+0x2c>
   1e3da:	2a2d      	cmp	r2, #45	; 0x2d
   1e3dc:	d1c9      	bne.n	1e372 <_strtod_l+0x42>
   1e3de:	2201      	movs	r2, #1
   1e3e0:	920e      	str	r2, [sp, #56]	; 0x38
   1e3e2:	1c5a      	adds	r2, r3, #1
   1e3e4:	921d      	str	r2, [sp, #116]	; 0x74
   1e3e6:	785b      	ldrb	r3, [r3, #1]
   1e3e8:	2b00      	cmp	r3, #0
   1e3ea:	d1c4      	bne.n	1e376 <_strtod_l+0x46>
   1e3ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1e3ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1e3f2:	2b00      	cmp	r3, #0
   1e3f4:	f040 857a 	bne.w	1eeec <_strtod_l+0xbbc>
   1e3f8:	4652      	mov	r2, sl
   1e3fa:	465b      	mov	r3, fp
   1e3fc:	e7e3      	b.n	1e3c6 <_strtod_l+0x96>
   1e3fe:	2200      	movs	r2, #0
   1e400:	e7ee      	b.n	1e3e0 <_strtod_l+0xb0>
   1e402:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1e404:	b13a      	cbz	r2, 1e416 <_strtod_l+0xe6>
   1e406:	2135      	movs	r1, #53	; 0x35
   1e408:	a820      	add	r0, sp, #128	; 0x80
   1e40a:	f024 fc63 	bl	42cd4 <__copybits>
   1e40e:	991e      	ldr	r1, [sp, #120]	; 0x78
   1e410:	4620      	mov	r0, r4
   1e412:	f024 f95c 	bl	426ce <_Bfree>
   1e416:	3f01      	subs	r7, #1
   1e418:	2f05      	cmp	r7, #5
   1e41a:	d807      	bhi.n	1e42c <_strtod_l+0xfc>
   1e41c:	e8df f007 	tbb	[pc, r7]
   1e420:	1d180b0e 	.word	0x1d180b0e
   1e424:	030e      	.short	0x030e
   1e426:	f04f 0b00 	mov.w	fp, #0
   1e42a:	46da      	mov	sl, fp
   1e42c:	0728      	lsls	r0, r5, #28
   1e42e:	d5c1      	bpl.n	1e3b4 <_strtod_l+0x84>
   1e430:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   1e434:	e7be      	b.n	1e3b4 <_strtod_l+0x84>
   1e436:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   1e43a:	e7f7      	b.n	1e42c <_strtod_l+0xfc>
   1e43c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   1e440:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1e442:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   1e446:	f202 4233 	addw	r2, r2, #1075	; 0x433
   1e44a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   1e44e:	e7ed      	b.n	1e42c <_strtod_l+0xfc>
   1e450:	f8df b188 	ldr.w	fp, [pc, #392]	; 1e5dc <_strtod_l+0x2ac>
   1e454:	f04f 0a00 	mov.w	sl, #0
   1e458:	e7e8      	b.n	1e42c <_strtod_l+0xfc>
   1e45a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   1e45e:	f04f 3aff 	mov.w	sl, #4294967295
   1e462:	e7e3      	b.n	1e42c <_strtod_l+0xfc>
   1e464:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e466:	1c5a      	adds	r2, r3, #1
   1e468:	921d      	str	r2, [sp, #116]	; 0x74
   1e46a:	785b      	ldrb	r3, [r3, #1]
   1e46c:	2b30      	cmp	r3, #48	; 0x30
   1e46e:	d0f9      	beq.n	1e464 <_strtod_l+0x134>
   1e470:	2b00      	cmp	r3, #0
   1e472:	d09f      	beq.n	1e3b4 <_strtod_l+0x84>
   1e474:	2301      	movs	r3, #1
   1e476:	f04f 0900 	mov.w	r9, #0
   1e47a:	9304      	str	r3, [sp, #16]
   1e47c:	220a      	movs	r2, #10
   1e47e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e480:	464f      	mov	r7, r9
   1e482:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   1e486:	930a      	str	r3, [sp, #40]	; 0x28
   1e488:	981d      	ldr	r0, [sp, #116]	; 0x74
   1e48a:	7806      	ldrb	r6, [r0, #0]
   1e48c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   1e490:	b2d9      	uxtb	r1, r3
   1e492:	2909      	cmp	r1, #9
   1e494:	d92b      	bls.n	1e4ee <_strtod_l+0x1be>
   1e496:	462a      	mov	r2, r5
   1e498:	9907      	ldr	r1, [sp, #28]
   1e49a:	f023 fe09 	bl	420b0 <strncmp>
   1e49e:	2800      	cmp	r0, #0
   1e4a0:	d034      	beq.n	1e50c <_strtod_l+0x1dc>
   1e4a2:	2000      	movs	r0, #0
   1e4a4:	4633      	mov	r3, r6
   1e4a6:	463d      	mov	r5, r7
   1e4a8:	4602      	mov	r2, r0
   1e4aa:	9007      	str	r0, [sp, #28]
   1e4ac:	2b65      	cmp	r3, #101	; 0x65
   1e4ae:	d001      	beq.n	1e4b4 <_strtod_l+0x184>
   1e4b0:	2b45      	cmp	r3, #69	; 0x45
   1e4b2:	d118      	bne.n	1e4e6 <_strtod_l+0x1b6>
   1e4b4:	b91d      	cbnz	r5, 1e4be <_strtod_l+0x18e>
   1e4b6:	9b04      	ldr	r3, [sp, #16]
   1e4b8:	4303      	orrs	r3, r0
   1e4ba:	d097      	beq.n	1e3ec <_strtod_l+0xbc>
   1e4bc:	2500      	movs	r5, #0
   1e4be:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   1e4c2:	f108 0301 	add.w	r3, r8, #1
   1e4c6:	931d      	str	r3, [sp, #116]	; 0x74
   1e4c8:	f898 3001 	ldrb.w	r3, [r8, #1]
   1e4cc:	2b2b      	cmp	r3, #43	; 0x2b
   1e4ce:	d075      	beq.n	1e5bc <_strtod_l+0x28c>
   1e4d0:	2b2d      	cmp	r3, #45	; 0x2d
   1e4d2:	d07b      	beq.n	1e5cc <_strtod_l+0x29c>
   1e4d4:	f04f 0c00 	mov.w	ip, #0
   1e4d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1e4dc:	2909      	cmp	r1, #9
   1e4de:	f240 8083 	bls.w	1e5e8 <_strtod_l+0x2b8>
   1e4e2:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   1e4e6:	2600      	movs	r6, #0
   1e4e8:	e09e      	b.n	1e628 <_strtod_l+0x2f8>
   1e4ea:	2300      	movs	r3, #0
   1e4ec:	e7c3      	b.n	1e476 <_strtod_l+0x146>
   1e4ee:	2f08      	cmp	r7, #8
   1e4f0:	f100 0001 	add.w	r0, r0, #1
   1e4f4:	f107 0701 	add.w	r7, r7, #1
   1e4f8:	bfd4      	ite	le
   1e4fa:	9909      	ldrle	r1, [sp, #36]	; 0x24
   1e4fc:	fb02 3909 	mlagt	r9, r2, r9, r3
   1e500:	901d      	str	r0, [sp, #116]	; 0x74
   1e502:	bfdc      	itt	le
   1e504:	fb02 3301 	mlale	r3, r2, r1, r3
   1e508:	9309      	strle	r3, [sp, #36]	; 0x24
   1e50a:	e7bd      	b.n	1e488 <_strtod_l+0x158>
   1e50c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e50e:	195a      	adds	r2, r3, r5
   1e510:	921d      	str	r2, [sp, #116]	; 0x74
   1e512:	5d5b      	ldrb	r3, [r3, r5]
   1e514:	2f00      	cmp	r7, #0
   1e516:	d036      	beq.n	1e586 <_strtod_l+0x256>
   1e518:	463d      	mov	r5, r7
   1e51a:	9007      	str	r0, [sp, #28]
   1e51c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1e520:	2a09      	cmp	r2, #9
   1e522:	d912      	bls.n	1e54a <_strtod_l+0x21a>
   1e524:	2201      	movs	r2, #1
   1e526:	e7c1      	b.n	1e4ac <_strtod_l+0x17c>
   1e528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e52a:	3001      	adds	r0, #1
   1e52c:	1c5a      	adds	r2, r3, #1
   1e52e:	921d      	str	r2, [sp, #116]	; 0x74
   1e530:	785b      	ldrb	r3, [r3, #1]
   1e532:	2b30      	cmp	r3, #48	; 0x30
   1e534:	d0f8      	beq.n	1e528 <_strtod_l+0x1f8>
   1e536:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   1e53a:	2a08      	cmp	r2, #8
   1e53c:	f200 84dd 	bhi.w	1eefa <_strtod_l+0xbca>
   1e540:	9007      	str	r0, [sp, #28]
   1e542:	2000      	movs	r0, #0
   1e544:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1e546:	4605      	mov	r5, r0
   1e548:	920a      	str	r2, [sp, #40]	; 0x28
   1e54a:	3b30      	subs	r3, #48	; 0x30
   1e54c:	f100 0201 	add.w	r2, r0, #1
   1e550:	d013      	beq.n	1e57a <_strtod_l+0x24a>
   1e552:	9907      	ldr	r1, [sp, #28]
   1e554:	eb00 0e05 	add.w	lr, r0, r5
   1e558:	4411      	add	r1, r2
   1e55a:	462a      	mov	r2, r5
   1e55c:	9107      	str	r1, [sp, #28]
   1e55e:	210a      	movs	r1, #10
   1e560:	4572      	cmp	r2, lr
   1e562:	d112      	bne.n	1e58a <_strtod_l+0x25a>
   1e564:	182a      	adds	r2, r5, r0
   1e566:	3501      	adds	r5, #1
   1e568:	2a08      	cmp	r2, #8
   1e56a:	4405      	add	r5, r0
   1e56c:	dc1c      	bgt.n	1e5a8 <_strtod_l+0x278>
   1e56e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e570:	220a      	movs	r2, #10
   1e572:	fb02 3301 	mla	r3, r2, r1, r3
   1e576:	9309      	str	r3, [sp, #36]	; 0x24
   1e578:	2200      	movs	r2, #0
   1e57a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e57c:	4610      	mov	r0, r2
   1e57e:	1c59      	adds	r1, r3, #1
   1e580:	911d      	str	r1, [sp, #116]	; 0x74
   1e582:	785b      	ldrb	r3, [r3, #1]
   1e584:	e7ca      	b.n	1e51c <_strtod_l+0x1ec>
   1e586:	4638      	mov	r0, r7
   1e588:	e7d3      	b.n	1e532 <_strtod_l+0x202>
   1e58a:	2a08      	cmp	r2, #8
   1e58c:	dc04      	bgt.n	1e598 <_strtod_l+0x268>
   1e58e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1e590:	434e      	muls	r6, r1
   1e592:	9609      	str	r6, [sp, #36]	; 0x24
   1e594:	3201      	adds	r2, #1
   1e596:	e7e3      	b.n	1e560 <_strtod_l+0x230>
   1e598:	f102 0c01 	add.w	ip, r2, #1
   1e59c:	f1bc 0f10 	cmp.w	ip, #16
   1e5a0:	bfd8      	it	le
   1e5a2:	fb01 f909 	mulle.w	r9, r1, r9
   1e5a6:	e7f5      	b.n	1e594 <_strtod_l+0x264>
   1e5a8:	2d10      	cmp	r5, #16
   1e5aa:	bfdc      	itt	le
   1e5ac:	220a      	movle	r2, #10
   1e5ae:	fb02 3909 	mlale	r9, r2, r9, r3
   1e5b2:	e7e1      	b.n	1e578 <_strtod_l+0x248>
   1e5b4:	2300      	movs	r3, #0
   1e5b6:	2201      	movs	r2, #1
   1e5b8:	9307      	str	r3, [sp, #28]
   1e5ba:	e77c      	b.n	1e4b6 <_strtod_l+0x186>
   1e5bc:	f04f 0c00 	mov.w	ip, #0
   1e5c0:	f108 0302 	add.w	r3, r8, #2
   1e5c4:	931d      	str	r3, [sp, #116]	; 0x74
   1e5c6:	f898 3002 	ldrb.w	r3, [r8, #2]
   1e5ca:	e785      	b.n	1e4d8 <_strtod_l+0x1a8>
   1e5cc:	f04f 0c01 	mov.w	ip, #1
   1e5d0:	e7f6      	b.n	1e5c0 <_strtod_l+0x290>
   1e5d2:	bf00      	nop
   1e5d4:	0004417c 	.word	0x0004417c
   1e5d8:	000440f4 	.word	0x000440f4
   1e5dc:	7ff00000 	.word	0x7ff00000
   1e5e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e5e2:	1c59      	adds	r1, r3, #1
   1e5e4:	911d      	str	r1, [sp, #116]	; 0x74
   1e5e6:	785b      	ldrb	r3, [r3, #1]
   1e5e8:	2b30      	cmp	r3, #48	; 0x30
   1e5ea:	d0f9      	beq.n	1e5e0 <_strtod_l+0x2b0>
   1e5ec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   1e5f0:	2908      	cmp	r1, #8
   1e5f2:	f63f af78 	bhi.w	1e4e6 <_strtod_l+0x1b6>
   1e5f6:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   1e5fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e5fc:	9308      	str	r3, [sp, #32]
   1e5fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e600:	1c59      	adds	r1, r3, #1
   1e602:	911d      	str	r1, [sp, #116]	; 0x74
   1e604:	785b      	ldrb	r3, [r3, #1]
   1e606:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   1e60a:	2e09      	cmp	r6, #9
   1e60c:	d937      	bls.n	1e67e <_strtod_l+0x34e>
   1e60e:	9e08      	ldr	r6, [sp, #32]
   1e610:	1b89      	subs	r1, r1, r6
   1e612:	f644 661f 	movw	r6, #19999	; 0x4e1f
   1e616:	2908      	cmp	r1, #8
   1e618:	dc02      	bgt.n	1e620 <_strtod_l+0x2f0>
   1e61a:	4576      	cmp	r6, lr
   1e61c:	bfa8      	it	ge
   1e61e:	4676      	movge	r6, lr
   1e620:	f1bc 0f00 	cmp.w	ip, #0
   1e624:	d000      	beq.n	1e628 <_strtod_l+0x2f8>
   1e626:	4276      	negs	r6, r6
   1e628:	2d00      	cmp	r5, #0
   1e62a:	d14f      	bne.n	1e6cc <_strtod_l+0x39c>
   1e62c:	9904      	ldr	r1, [sp, #16]
   1e62e:	4301      	orrs	r1, r0
   1e630:	f47f aec0 	bne.w	1e3b4 <_strtod_l+0x84>
   1e634:	2a00      	cmp	r2, #0
   1e636:	f47f aed9 	bne.w	1e3ec <_strtod_l+0xbc>
   1e63a:	2b69      	cmp	r3, #105	; 0x69
   1e63c:	d027      	beq.n	1e68e <_strtod_l+0x35e>
   1e63e:	dc24      	bgt.n	1e68a <_strtod_l+0x35a>
   1e640:	2b49      	cmp	r3, #73	; 0x49
   1e642:	d024      	beq.n	1e68e <_strtod_l+0x35e>
   1e644:	2b4e      	cmp	r3, #78	; 0x4e
   1e646:	f47f aed1 	bne.w	1e3ec <_strtod_l+0xbc>
   1e64a:	499f      	ldr	r1, [pc, #636]	; (1e8c8 <_strtod_l+0x598>)
   1e64c:	a81d      	add	r0, sp, #116	; 0x74
   1e64e:	f023 ff07 	bl	42460 <__match>
   1e652:	2800      	cmp	r0, #0
   1e654:	f43f aeca 	beq.w	1e3ec <_strtod_l+0xbc>
   1e658:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e65a:	781b      	ldrb	r3, [r3, #0]
   1e65c:	2b28      	cmp	r3, #40	; 0x28
   1e65e:	d12d      	bne.n	1e6bc <_strtod_l+0x38c>
   1e660:	aa20      	add	r2, sp, #128	; 0x80
   1e662:	499a      	ldr	r1, [pc, #616]	; (1e8cc <_strtod_l+0x59c>)
   1e664:	a81d      	add	r0, sp, #116	; 0x74
   1e666:	f023 ff0f 	bl	42488 <__hexnan>
   1e66a:	2805      	cmp	r0, #5
   1e66c:	d126      	bne.n	1e6bc <_strtod_l+0x38c>
   1e66e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1e670:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   1e674:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   1e678:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   1e67c:	e69a      	b.n	1e3b4 <_strtod_l+0x84>
   1e67e:	210a      	movs	r1, #10
   1e680:	fb01 3e0e 	mla	lr, r1, lr, r3
   1e684:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   1e688:	e7b9      	b.n	1e5fe <_strtod_l+0x2ce>
   1e68a:	2b6e      	cmp	r3, #110	; 0x6e
   1e68c:	e7db      	b.n	1e646 <_strtod_l+0x316>
   1e68e:	4990      	ldr	r1, [pc, #576]	; (1e8d0 <_strtod_l+0x5a0>)
   1e690:	a81d      	add	r0, sp, #116	; 0x74
   1e692:	f023 fee5 	bl	42460 <__match>
   1e696:	2800      	cmp	r0, #0
   1e698:	f43f aea8 	beq.w	1e3ec <_strtod_l+0xbc>
   1e69c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e69e:	a81d      	add	r0, sp, #116	; 0x74
   1e6a0:	498c      	ldr	r1, [pc, #560]	; (1e8d4 <_strtod_l+0x5a4>)
   1e6a2:	3b01      	subs	r3, #1
   1e6a4:	931d      	str	r3, [sp, #116]	; 0x74
   1e6a6:	f023 fedb 	bl	42460 <__match>
   1e6aa:	b910      	cbnz	r0, 1e6b2 <_strtod_l+0x382>
   1e6ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1e6ae:	3301      	adds	r3, #1
   1e6b0:	931d      	str	r3, [sp, #116]	; 0x74
   1e6b2:	f8df b230 	ldr.w	fp, [pc, #560]	; 1e8e4 <_strtod_l+0x5b4>
   1e6b6:	f04f 0a00 	mov.w	sl, #0
   1e6ba:	e67b      	b.n	1e3b4 <_strtod_l+0x84>
   1e6bc:	4886      	ldr	r0, [pc, #536]	; (1e8d8 <_strtod_l+0x5a8>)
   1e6be:	f001 fa23 	bl	1fb08 <nan>
   1e6c2:	ed8d 0b04 	vstr	d0, [sp, #16]
   1e6c6:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   1e6ca:	e673      	b.n	1e3b4 <_strtod_l+0x84>
   1e6cc:	9b07      	ldr	r3, [sp, #28]
   1e6ce:	2f00      	cmp	r7, #0
   1e6d0:	bf08      	it	eq
   1e6d2:	462f      	moveq	r7, r5
   1e6d4:	2d10      	cmp	r5, #16
   1e6d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e6d8:	eba6 0303 	sub.w	r3, r6, r3
   1e6dc:	46a8      	mov	r8, r5
   1e6de:	bfa8      	it	ge
   1e6e0:	f04f 0810 	movge.w	r8, #16
   1e6e4:	9308      	str	r3, [sp, #32]
   1e6e6:	f7fd ffed 	bl	1c6c4 <__aeabi_ui2d>
   1e6ea:	2d09      	cmp	r5, #9
   1e6ec:	4682      	mov	sl, r0
   1e6ee:	468b      	mov	fp, r1
   1e6f0:	dd13      	ble.n	1e71a <_strtod_l+0x3ea>
   1e6f2:	4b7a      	ldr	r3, [pc, #488]	; (1e8dc <_strtod_l+0x5ac>)
   1e6f4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   1e6f8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   1e6fc:	f7fe f85c 	bl	1c7b8 <__aeabi_dmul>
   1e700:	4682      	mov	sl, r0
   1e702:	468b      	mov	fp, r1
   1e704:	4648      	mov	r0, r9
   1e706:	f7fd ffdd 	bl	1c6c4 <__aeabi_ui2d>
   1e70a:	4602      	mov	r2, r0
   1e70c:	460b      	mov	r3, r1
   1e70e:	4650      	mov	r0, sl
   1e710:	4659      	mov	r1, fp
   1e712:	f7fd fe9b 	bl	1c44c <__adddf3>
   1e716:	4682      	mov	sl, r0
   1e718:	468b      	mov	fp, r1
   1e71a:	2d0f      	cmp	r5, #15
   1e71c:	dc38      	bgt.n	1e790 <_strtod_l+0x460>
   1e71e:	9b08      	ldr	r3, [sp, #32]
   1e720:	2b00      	cmp	r3, #0
   1e722:	f43f ae47 	beq.w	1e3b4 <_strtod_l+0x84>
   1e726:	dd24      	ble.n	1e772 <_strtod_l+0x442>
   1e728:	2b16      	cmp	r3, #22
   1e72a:	dc0b      	bgt.n	1e744 <_strtod_l+0x414>
   1e72c:	4d6b      	ldr	r5, [pc, #428]	; (1e8dc <_strtod_l+0x5ac>)
   1e72e:	4652      	mov	r2, sl
   1e730:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   1e734:	465b      	mov	r3, fp
   1e736:	e9d5 0100 	ldrd	r0, r1, [r5]
   1e73a:	f7fe f83d 	bl	1c7b8 <__aeabi_dmul>
   1e73e:	4682      	mov	sl, r0
   1e740:	468b      	mov	fp, r1
   1e742:	e637      	b.n	1e3b4 <_strtod_l+0x84>
   1e744:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   1e748:	9a08      	ldr	r2, [sp, #32]
   1e74a:	4293      	cmp	r3, r2
   1e74c:	db20      	blt.n	1e790 <_strtod_l+0x460>
   1e74e:	f1c5 050f 	rsb	r5, r5, #15
   1e752:	4c62      	ldr	r4, [pc, #392]	; (1e8dc <_strtod_l+0x5ac>)
   1e754:	4652      	mov	r2, sl
   1e756:	465b      	mov	r3, fp
   1e758:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   1e75c:	e9d1 0100 	ldrd	r0, r1, [r1]
   1e760:	f7fe f82a 	bl	1c7b8 <__aeabi_dmul>
   1e764:	9b08      	ldr	r3, [sp, #32]
   1e766:	1b5d      	subs	r5, r3, r5
   1e768:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   1e76c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e770:	e7e3      	b.n	1e73a <_strtod_l+0x40a>
   1e772:	9b08      	ldr	r3, [sp, #32]
   1e774:	3316      	adds	r3, #22
   1e776:	db0b      	blt.n	1e790 <_strtod_l+0x460>
   1e778:	9b07      	ldr	r3, [sp, #28]
   1e77a:	4650      	mov	r0, sl
   1e77c:	4a57      	ldr	r2, [pc, #348]	; (1e8dc <_strtod_l+0x5ac>)
   1e77e:	4659      	mov	r1, fp
   1e780:	1b9e      	subs	r6, r3, r6
   1e782:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   1e786:	e9d6 2300 	ldrd	r2, r3, [r6]
   1e78a:	f7fe f93f 	bl	1ca0c <__aeabi_ddiv>
   1e78e:	e7d6      	b.n	1e73e <_strtod_l+0x40e>
   1e790:	eba5 0808 	sub.w	r8, r5, r8
   1e794:	9b08      	ldr	r3, [sp, #32]
   1e796:	4498      	add	r8, r3
   1e798:	f1b8 0f00 	cmp.w	r8, #0
   1e79c:	dd71      	ble.n	1e882 <_strtod_l+0x552>
   1e79e:	f018 030f 	ands.w	r3, r8, #15
   1e7a2:	d00a      	beq.n	1e7ba <_strtod_l+0x48a>
   1e7a4:	494d      	ldr	r1, [pc, #308]	; (1e8dc <_strtod_l+0x5ac>)
   1e7a6:	4652      	mov	r2, sl
   1e7a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   1e7ac:	465b      	mov	r3, fp
   1e7ae:	e9d1 0100 	ldrd	r0, r1, [r1]
   1e7b2:	f7fe f801 	bl	1c7b8 <__aeabi_dmul>
   1e7b6:	4682      	mov	sl, r0
   1e7b8:	468b      	mov	fp, r1
   1e7ba:	f038 080f 	bics.w	r8, r8, #15
   1e7be:	d04d      	beq.n	1e85c <_strtod_l+0x52c>
   1e7c0:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   1e7c4:	dd22      	ble.n	1e80c <_strtod_l+0x4dc>
   1e7c6:	2500      	movs	r5, #0
   1e7c8:	462e      	mov	r6, r5
   1e7ca:	9509      	str	r5, [sp, #36]	; 0x24
   1e7cc:	9507      	str	r5, [sp, #28]
   1e7ce:	2322      	movs	r3, #34	; 0x22
   1e7d0:	f8df b110 	ldr.w	fp, [pc, #272]	; 1e8e4 <_strtod_l+0x5b4>
   1e7d4:	f04f 0a00 	mov.w	sl, #0
   1e7d8:	6023      	str	r3, [r4, #0]
   1e7da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e7dc:	2b00      	cmp	r3, #0
   1e7de:	f43f ade9 	beq.w	1e3b4 <_strtod_l+0x84>
   1e7e2:	991e      	ldr	r1, [sp, #120]	; 0x78
   1e7e4:	4620      	mov	r0, r4
   1e7e6:	f023 ff72 	bl	426ce <_Bfree>
   1e7ea:	9907      	ldr	r1, [sp, #28]
   1e7ec:	4620      	mov	r0, r4
   1e7ee:	f023 ff6e 	bl	426ce <_Bfree>
   1e7f2:	4631      	mov	r1, r6
   1e7f4:	4620      	mov	r0, r4
   1e7f6:	f023 ff6a 	bl	426ce <_Bfree>
   1e7fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e7fc:	4620      	mov	r0, r4
   1e7fe:	f023 ff66 	bl	426ce <_Bfree>
   1e802:	4629      	mov	r1, r5
   1e804:	4620      	mov	r0, r4
   1e806:	f023 ff62 	bl	426ce <_Bfree>
   1e80a:	e5d3      	b.n	1e3b4 <_strtod_l+0x84>
   1e80c:	2300      	movs	r3, #0
   1e80e:	ea4f 1828 	mov.w	r8, r8, asr #4
   1e812:	4650      	mov	r0, sl
   1e814:	4659      	mov	r1, fp
   1e816:	4699      	mov	r9, r3
   1e818:	f1b8 0f01 	cmp.w	r8, #1
   1e81c:	dc21      	bgt.n	1e862 <_strtod_l+0x532>
   1e81e:	b10b      	cbz	r3, 1e824 <_strtod_l+0x4f4>
   1e820:	4682      	mov	sl, r0
   1e822:	468b      	mov	fp, r1
   1e824:	4b2e      	ldr	r3, [pc, #184]	; (1e8e0 <_strtod_l+0x5b0>)
   1e826:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   1e82a:	4652      	mov	r2, sl
   1e82c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   1e830:	465b      	mov	r3, fp
   1e832:	e9d9 0100 	ldrd	r0, r1, [r9]
   1e836:	f7fd ffbf 	bl	1c7b8 <__aeabi_dmul>
   1e83a:	4b2a      	ldr	r3, [pc, #168]	; (1e8e4 <_strtod_l+0x5b4>)
   1e83c:	460a      	mov	r2, r1
   1e83e:	4682      	mov	sl, r0
   1e840:	400b      	ands	r3, r1
   1e842:	4929      	ldr	r1, [pc, #164]	; (1e8e8 <_strtod_l+0x5b8>)
   1e844:	428b      	cmp	r3, r1
   1e846:	d8be      	bhi.n	1e7c6 <_strtod_l+0x496>
   1e848:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   1e84c:	428b      	cmp	r3, r1
   1e84e:	bf86      	itte	hi
   1e850:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 1e8ec <_strtod_l+0x5bc>
   1e854:	f04f 3aff 	movhi.w	sl, #4294967295
   1e858:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   1e85c:	2300      	movs	r3, #0
   1e85e:	9304      	str	r3, [sp, #16]
   1e860:	e082      	b.n	1e968 <_strtod_l+0x638>
   1e862:	f018 0f01 	tst.w	r8, #1
   1e866:	d007      	beq.n	1e878 <_strtod_l+0x548>
   1e868:	4b1d      	ldr	r3, [pc, #116]	; (1e8e0 <_strtod_l+0x5b0>)
   1e86a:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e872:	f7fd ffa1 	bl	1c7b8 <__aeabi_dmul>
   1e876:	2301      	movs	r3, #1
   1e878:	f109 0901 	add.w	r9, r9, #1
   1e87c:	ea4f 0868 	mov.w	r8, r8, asr #1
   1e880:	e7ca      	b.n	1e818 <_strtod_l+0x4e8>
   1e882:	d0eb      	beq.n	1e85c <_strtod_l+0x52c>
   1e884:	f1c8 0800 	rsb	r8, r8, #0
   1e888:	f018 020f 	ands.w	r2, r8, #15
   1e88c:	d00a      	beq.n	1e8a4 <_strtod_l+0x574>
   1e88e:	4b13      	ldr	r3, [pc, #76]	; (1e8dc <_strtod_l+0x5ac>)
   1e890:	4650      	mov	r0, sl
   1e892:	4659      	mov	r1, fp
   1e894:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1e898:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e89c:	f7fe f8b6 	bl	1ca0c <__aeabi_ddiv>
   1e8a0:	4682      	mov	sl, r0
   1e8a2:	468b      	mov	fp, r1
   1e8a4:	ea5f 1828 	movs.w	r8, r8, asr #4
   1e8a8:	d0d8      	beq.n	1e85c <_strtod_l+0x52c>
   1e8aa:	f1b8 0f1f 	cmp.w	r8, #31
   1e8ae:	dd1f      	ble.n	1e8f0 <_strtod_l+0x5c0>
   1e8b0:	2500      	movs	r5, #0
   1e8b2:	462e      	mov	r6, r5
   1e8b4:	9509      	str	r5, [sp, #36]	; 0x24
   1e8b6:	9507      	str	r5, [sp, #28]
   1e8b8:	2322      	movs	r3, #34	; 0x22
   1e8ba:	f04f 0a00 	mov.w	sl, #0
   1e8be:	f04f 0b00 	mov.w	fp, #0
   1e8c2:	6023      	str	r3, [r4, #0]
   1e8c4:	e789      	b.n	1e7da <_strtod_l+0x4aa>
   1e8c6:	bf00      	nop
   1e8c8:	0004c3b9 	.word	0x0004c3b9
   1e8cc:	00044108 	.word	0x00044108
   1e8d0:	00045b48 	.word	0x00045b48
   1e8d4:	0004c3e1 	.word	0x0004c3e1
   1e8d8:	00045c29 	.word	0x00045c29
   1e8dc:	000435e8 	.word	0x000435e8
   1e8e0:	000435c0 	.word	0x000435c0
   1e8e4:	7ff00000 	.word	0x7ff00000
   1e8e8:	7ca00000 	.word	0x7ca00000
   1e8ec:	7fefffff 	.word	0x7fefffff
   1e8f0:	f018 0310 	ands.w	r3, r8, #16
   1e8f4:	4650      	mov	r0, sl
   1e8f6:	4659      	mov	r1, fp
   1e8f8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 1ecb0 <_strtod_l+0x980>
   1e8fc:	bf18      	it	ne
   1e8fe:	236a      	movne	r3, #106	; 0x6a
   1e900:	9304      	str	r3, [sp, #16]
   1e902:	2300      	movs	r3, #0
   1e904:	f018 0f01 	tst.w	r8, #1
   1e908:	d004      	beq.n	1e914 <_strtod_l+0x5e4>
   1e90a:	e9d9 2300 	ldrd	r2, r3, [r9]
   1e90e:	f7fd ff53 	bl	1c7b8 <__aeabi_dmul>
   1e912:	2301      	movs	r3, #1
   1e914:	ea5f 0868 	movs.w	r8, r8, asr #1
   1e918:	f109 0908 	add.w	r9, r9, #8
   1e91c:	d1f2      	bne.n	1e904 <_strtod_l+0x5d4>
   1e91e:	b10b      	cbz	r3, 1e924 <_strtod_l+0x5f4>
   1e920:	4682      	mov	sl, r0
   1e922:	468b      	mov	fp, r1
   1e924:	9b04      	ldr	r3, [sp, #16]
   1e926:	b1bb      	cbz	r3, 1e958 <_strtod_l+0x628>
   1e928:	f3cb 530a 	ubfx	r3, fp, #20, #11
   1e92c:	4659      	mov	r1, fp
   1e92e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   1e932:	2b00      	cmp	r3, #0
   1e934:	dd10      	ble.n	1e958 <_strtod_l+0x628>
   1e936:	2b1f      	cmp	r3, #31
   1e938:	f340 8127 	ble.w	1eb8a <_strtod_l+0x85a>
   1e93c:	2b34      	cmp	r3, #52	; 0x34
   1e93e:	f04f 0a00 	mov.w	sl, #0
   1e942:	bfdb      	ittet	le
   1e944:	3b20      	suble	r3, #32
   1e946:	f04f 32ff 	movle.w	r2, #4294967295
   1e94a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   1e94e:	fa02 f303 	lslle.w	r3, r2, r3
   1e952:	bfd8      	it	le
   1e954:	ea03 0b01 	andle.w	fp, r3, r1
   1e958:	2200      	movs	r2, #0
   1e95a:	2300      	movs	r3, #0
   1e95c:	4650      	mov	r0, sl
   1e95e:	4659      	mov	r1, fp
   1e960:	f7fe f992 	bl	1cc88 <__aeabi_dcmpeq>
   1e964:	2800      	cmp	r0, #0
   1e966:	d1a3      	bne.n	1e8b0 <_strtod_l+0x580>
   1e968:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e96a:	463a      	mov	r2, r7
   1e96c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1e96e:	4620      	mov	r0, r4
   1e970:	9300      	str	r3, [sp, #0]
   1e972:	462b      	mov	r3, r5
   1e974:	f023 ff01 	bl	4277a <__s2b>
   1e978:	9009      	str	r0, [sp, #36]	; 0x24
   1e97a:	2800      	cmp	r0, #0
   1e97c:	f43f af23 	beq.w	1e7c6 <_strtod_l+0x496>
   1e980:	9b07      	ldr	r3, [sp, #28]
   1e982:	2500      	movs	r5, #0
   1e984:	1b9e      	subs	r6, r3, r6
   1e986:	9b08      	ldr	r3, [sp, #32]
   1e988:	2b00      	cmp	r3, #0
   1e98a:	bfb4      	ite	lt
   1e98c:	4633      	movlt	r3, r6
   1e98e:	2300      	movge	r3, #0
   1e990:	462e      	mov	r6, r5
   1e992:	9310      	str	r3, [sp, #64]	; 0x40
   1e994:	9b08      	ldr	r3, [sp, #32]
   1e996:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1e99a:	9318      	str	r3, [sp, #96]	; 0x60
   1e99c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e99e:	4620      	mov	r0, r4
   1e9a0:	6859      	ldr	r1, [r3, #4]
   1e9a2:	f023 fe60 	bl	42666 <_Balloc>
   1e9a6:	9007      	str	r0, [sp, #28]
   1e9a8:	2800      	cmp	r0, #0
   1e9aa:	f43f af10 	beq.w	1e7ce <_strtod_l+0x49e>
   1e9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e9b0:	300c      	adds	r0, #12
   1e9b2:	691a      	ldr	r2, [r3, #16]
   1e9b4:	f103 010c 	add.w	r1, r3, #12
   1e9b8:	3202      	adds	r2, #2
   1e9ba:	0092      	lsls	r2, r2, #2
   1e9bc:	f023 f96f 	bl	41c9e <memcpy>
   1e9c0:	aa20      	add	r2, sp, #128	; 0x80
   1e9c2:	a91f      	add	r1, sp, #124	; 0x7c
   1e9c4:	4620      	mov	r0, r4
   1e9c6:	ec4b ab10 	vmov	d0, sl, fp
   1e9ca:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   1e9ce:	f024 f8fe 	bl	42bce <__d2b>
   1e9d2:	901e      	str	r0, [sp, #120]	; 0x78
   1e9d4:	2800      	cmp	r0, #0
   1e9d6:	f43f aefa 	beq.w	1e7ce <_strtod_l+0x49e>
   1e9da:	2101      	movs	r1, #1
   1e9dc:	4620      	mov	r0, r4
   1e9de:	f023 ff5a 	bl	42896 <__i2b>
   1e9e2:	4606      	mov	r6, r0
   1e9e4:	2800      	cmp	r0, #0
   1e9e6:	f43f aef2 	beq.w	1e7ce <_strtod_l+0x49e>
   1e9ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1e9ec:	9904      	ldr	r1, [sp, #16]
   1e9ee:	2b00      	cmp	r3, #0
   1e9f0:	eba3 0801 	sub.w	r8, r3, r1
   1e9f4:	bfa9      	itett	ge
   1e9f6:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   1e9f8:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   1e9fa:	eb03 0902 	addge.w	r9, r3, r2
   1e9fe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   1ea00:	bfb8      	it	lt
   1ea02:	1ad7      	sublt	r7, r2, r3
   1ea04:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1ea06:	4ba5      	ldr	r3, [pc, #660]	; (1ec9c <_strtod_l+0x96c>)
   1ea08:	4490      	add	r8, r2
   1ea0a:	bfb8      	it	lt
   1ea0c:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   1ea10:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   1ea14:	f108 38ff 	add.w	r8, r8, #4294967295
   1ea18:	4598      	cmp	r8, r3
   1ea1a:	f280 80ca 	bge.w	1ebb2 <_strtod_l+0x882>
   1ea1e:	eba3 0308 	sub.w	r3, r3, r8
   1ea22:	2101      	movs	r1, #1
   1ea24:	2b1f      	cmp	r3, #31
   1ea26:	eba2 0203 	sub.w	r2, r2, r3
   1ea2a:	f300 80b5 	bgt.w	1eb98 <_strtod_l+0x868>
   1ea2e:	fa01 f303 	lsl.w	r3, r1, r3
   1ea32:	9311      	str	r3, [sp, #68]	; 0x44
   1ea34:	2300      	movs	r3, #0
   1ea36:	930c      	str	r3, [sp, #48]	; 0x30
   1ea38:	eb09 0802 	add.w	r8, r9, r2
   1ea3c:	9b04      	ldr	r3, [sp, #16]
   1ea3e:	4417      	add	r7, r2
   1ea40:	45c1      	cmp	r9, r8
   1ea42:	441f      	add	r7, r3
   1ea44:	464b      	mov	r3, r9
   1ea46:	bfa8      	it	ge
   1ea48:	4643      	movge	r3, r8
   1ea4a:	42bb      	cmp	r3, r7
   1ea4c:	bfa8      	it	ge
   1ea4e:	463b      	movge	r3, r7
   1ea50:	2b00      	cmp	r3, #0
   1ea52:	bfc2      	ittt	gt
   1ea54:	eba8 0803 	subgt.w	r8, r8, r3
   1ea58:	1aff      	subgt	r7, r7, r3
   1ea5a:	eba9 0903 	subgt.w	r9, r9, r3
   1ea5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1ea60:	2b00      	cmp	r3, #0
   1ea62:	dd17      	ble.n	1ea94 <_strtod_l+0x764>
   1ea64:	4631      	mov	r1, r6
   1ea66:	461a      	mov	r2, r3
   1ea68:	4620      	mov	r0, r4
   1ea6a:	f01d fbf7 	bl	3c25c <__pow5mult>
   1ea6e:	4606      	mov	r6, r0
   1ea70:	2800      	cmp	r0, #0
   1ea72:	f43f aeac 	beq.w	1e7ce <_strtod_l+0x49e>
   1ea76:	4601      	mov	r1, r0
   1ea78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1ea7a:	4620      	mov	r0, r4
   1ea7c:	f023 ff14 	bl	428a8 <__multiply>
   1ea80:	900f      	str	r0, [sp, #60]	; 0x3c
   1ea82:	2800      	cmp	r0, #0
   1ea84:	f43f aea3 	beq.w	1e7ce <_strtod_l+0x49e>
   1ea88:	991e      	ldr	r1, [sp, #120]	; 0x78
   1ea8a:	4620      	mov	r0, r4
   1ea8c:	f023 fe1f 	bl	426ce <_Bfree>
   1ea90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ea92:	931e      	str	r3, [sp, #120]	; 0x78
   1ea94:	f1b8 0f00 	cmp.w	r8, #0
   1ea98:	f300 8090 	bgt.w	1ebbc <_strtod_l+0x88c>
   1ea9c:	9b08      	ldr	r3, [sp, #32]
   1ea9e:	2b00      	cmp	r3, #0
   1eaa0:	dd08      	ble.n	1eab4 <_strtod_l+0x784>
   1eaa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1eaa4:	4620      	mov	r0, r4
   1eaa6:	9907      	ldr	r1, [sp, #28]
   1eaa8:	f01d fbd8 	bl	3c25c <__pow5mult>
   1eaac:	9007      	str	r0, [sp, #28]
   1eaae:	2800      	cmp	r0, #0
   1eab0:	f43f ae8d 	beq.w	1e7ce <_strtod_l+0x49e>
   1eab4:	2f00      	cmp	r7, #0
   1eab6:	dd08      	ble.n	1eaca <_strtod_l+0x79a>
   1eab8:	463a      	mov	r2, r7
   1eaba:	9907      	ldr	r1, [sp, #28]
   1eabc:	4620      	mov	r0, r4
   1eabe:	f023 ff8e 	bl	429de <__lshift>
   1eac2:	9007      	str	r0, [sp, #28]
   1eac4:	2800      	cmp	r0, #0
   1eac6:	f43f ae82 	beq.w	1e7ce <_strtod_l+0x49e>
   1eaca:	f1b9 0f00 	cmp.w	r9, #0
   1eace:	dd08      	ble.n	1eae2 <_strtod_l+0x7b2>
   1ead0:	4631      	mov	r1, r6
   1ead2:	464a      	mov	r2, r9
   1ead4:	4620      	mov	r0, r4
   1ead6:	f023 ff82 	bl	429de <__lshift>
   1eada:	4606      	mov	r6, r0
   1eadc:	2800      	cmp	r0, #0
   1eade:	f43f ae76 	beq.w	1e7ce <_strtod_l+0x49e>
   1eae2:	9a07      	ldr	r2, [sp, #28]
   1eae4:	4620      	mov	r0, r4
   1eae6:	991e      	ldr	r1, [sp, #120]	; 0x78
   1eae8:	f023 fff4 	bl	42ad4 <__mdiff>
   1eaec:	4605      	mov	r5, r0
   1eaee:	2800      	cmp	r0, #0
   1eaf0:	f43f ae6d 	beq.w	1e7ce <_strtod_l+0x49e>
   1eaf4:	68c3      	ldr	r3, [r0, #12]
   1eaf6:	4631      	mov	r1, r6
   1eaf8:	930f      	str	r3, [sp, #60]	; 0x3c
   1eafa:	2300      	movs	r3, #0
   1eafc:	60c3      	str	r3, [r0, #12]
   1eafe:	f023 ffcd 	bl	42a9c <__mcmp>
   1eb02:	2800      	cmp	r0, #0
   1eb04:	da64      	bge.n	1ebd0 <_strtod_l+0x8a0>
   1eb06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1eb08:	ea53 030a 	orrs.w	r3, r3, sl
   1eb0c:	f040 8086 	bne.w	1ec1c <_strtod_l+0x8ec>
   1eb10:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1eb14:	2b00      	cmp	r3, #0
   1eb16:	f040 8081 	bne.w	1ec1c <_strtod_l+0x8ec>
   1eb1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1eb1e:	0d1b      	lsrs	r3, r3, #20
   1eb20:	051b      	lsls	r3, r3, #20
   1eb22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   1eb26:	d979      	bls.n	1ec1c <_strtod_l+0x8ec>
   1eb28:	696b      	ldr	r3, [r5, #20]
   1eb2a:	b913      	cbnz	r3, 1eb32 <_strtod_l+0x802>
   1eb2c:	692b      	ldr	r3, [r5, #16]
   1eb2e:	2b01      	cmp	r3, #1
   1eb30:	dd74      	ble.n	1ec1c <_strtod_l+0x8ec>
   1eb32:	4629      	mov	r1, r5
   1eb34:	2201      	movs	r2, #1
   1eb36:	4620      	mov	r0, r4
   1eb38:	f023 ff51 	bl	429de <__lshift>
   1eb3c:	4631      	mov	r1, r6
   1eb3e:	4605      	mov	r5, r0
   1eb40:	f023 ffac 	bl	42a9c <__mcmp>
   1eb44:	2800      	cmp	r0, #0
   1eb46:	dd69      	ble.n	1ec1c <_strtod_l+0x8ec>
   1eb48:	9904      	ldr	r1, [sp, #16]
   1eb4a:	465b      	mov	r3, fp
   1eb4c:	4a54      	ldr	r2, [pc, #336]	; (1eca0 <_strtod_l+0x970>)
   1eb4e:	2900      	cmp	r1, #0
   1eb50:	f000 8084 	beq.w	1ec5c <_strtod_l+0x92c>
   1eb54:	ea02 010b 	and.w	r1, r2, fp
   1eb58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   1eb5c:	dc7e      	bgt.n	1ec5c <_strtod_l+0x92c>
   1eb5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   1eb62:	f77f aea9 	ble.w	1e8b8 <_strtod_l+0x588>
   1eb66:	2300      	movs	r3, #0
   1eb68:	4a4e      	ldr	r2, [pc, #312]	; (1eca4 <_strtod_l+0x974>)
   1eb6a:	4650      	mov	r0, sl
   1eb6c:	4659      	mov	r1, fp
   1eb6e:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   1eb72:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   1eb76:	f7fd fe1f 	bl	1c7b8 <__aeabi_dmul>
   1eb7a:	460b      	mov	r3, r1
   1eb7c:	4682      	mov	sl, r0
   1eb7e:	468b      	mov	fp, r1
   1eb80:	4303      	orrs	r3, r0
   1eb82:	bf04      	itt	eq
   1eb84:	2322      	moveq	r3, #34	; 0x22
   1eb86:	6023      	streq	r3, [r4, #0]
   1eb88:	e62b      	b.n	1e7e2 <_strtod_l+0x4b2>
   1eb8a:	f04f 32ff 	mov.w	r2, #4294967295
   1eb8e:	fa02 f303 	lsl.w	r3, r2, r3
   1eb92:	ea03 0a0a 	and.w	sl, r3, sl
   1eb96:	e6df      	b.n	1e958 <_strtod_l+0x628>
   1eb98:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   1eb9c:	9111      	str	r1, [sp, #68]	; 0x44
   1eb9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   1eba2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   1eba6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   1ebaa:	fa01 f308 	lsl.w	r3, r1, r8
   1ebae:	930c      	str	r3, [sp, #48]	; 0x30
   1ebb0:	e742      	b.n	1ea38 <_strtod_l+0x708>
   1ebb2:	2300      	movs	r3, #0
   1ebb4:	930c      	str	r3, [sp, #48]	; 0x30
   1ebb6:	2301      	movs	r3, #1
   1ebb8:	9311      	str	r3, [sp, #68]	; 0x44
   1ebba:	e73d      	b.n	1ea38 <_strtod_l+0x708>
   1ebbc:	4642      	mov	r2, r8
   1ebbe:	991e      	ldr	r1, [sp, #120]	; 0x78
   1ebc0:	4620      	mov	r0, r4
   1ebc2:	f023 ff0c 	bl	429de <__lshift>
   1ebc6:	901e      	str	r0, [sp, #120]	; 0x78
   1ebc8:	2800      	cmp	r0, #0
   1ebca:	f47f af67 	bne.w	1ea9c <_strtod_l+0x76c>
   1ebce:	e5fe      	b.n	1e7ce <_strtod_l+0x49e>
   1ebd0:	465f      	mov	r7, fp
   1ebd2:	d16f      	bne.n	1ecb4 <_strtod_l+0x984>
   1ebd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ebd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ebda:	b342      	cbz	r2, 1ec2e <_strtod_l+0x8fe>
   1ebdc:	4a32      	ldr	r2, [pc, #200]	; (1eca8 <_strtod_l+0x978>)
   1ebde:	4293      	cmp	r3, r2
   1ebe0:	d128      	bne.n	1ec34 <_strtod_l+0x904>
   1ebe2:	9b04      	ldr	r3, [sp, #16]
   1ebe4:	4650      	mov	r0, sl
   1ebe6:	b1eb      	cbz	r3, 1ec24 <_strtod_l+0x8f4>
   1ebe8:	4a2d      	ldr	r2, [pc, #180]	; (1eca0 <_strtod_l+0x970>)
   1ebea:	f04f 31ff 	mov.w	r1, #4294967295
   1ebee:	403a      	ands	r2, r7
   1ebf0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   1ebf4:	d819      	bhi.n	1ec2a <_strtod_l+0x8fa>
   1ebf6:	0d12      	lsrs	r2, r2, #20
   1ebf8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   1ebfc:	fa01 f303 	lsl.w	r3, r1, r3
   1ec00:	4298      	cmp	r0, r3
   1ec02:	d117      	bne.n	1ec34 <_strtod_l+0x904>
   1ec04:	4b29      	ldr	r3, [pc, #164]	; (1ecac <_strtod_l+0x97c>)
   1ec06:	429f      	cmp	r7, r3
   1ec08:	d102      	bne.n	1ec10 <_strtod_l+0x8e0>
   1ec0a:	3001      	adds	r0, #1
   1ec0c:	f43f addf 	beq.w	1e7ce <_strtod_l+0x49e>
   1ec10:	4b23      	ldr	r3, [pc, #140]	; (1eca0 <_strtod_l+0x970>)
   1ec12:	f04f 0a00 	mov.w	sl, #0
   1ec16:	403b      	ands	r3, r7
   1ec18:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   1ec1c:	9b04      	ldr	r3, [sp, #16]
   1ec1e:	2b00      	cmp	r3, #0
   1ec20:	d1a1      	bne.n	1eb66 <_strtod_l+0x836>
   1ec22:	e5de      	b.n	1e7e2 <_strtod_l+0x4b2>
   1ec24:	f04f 33ff 	mov.w	r3, #4294967295
   1ec28:	e7ea      	b.n	1ec00 <_strtod_l+0x8d0>
   1ec2a:	460b      	mov	r3, r1
   1ec2c:	e7e8      	b.n	1ec00 <_strtod_l+0x8d0>
   1ec2e:	ea53 030a 	orrs.w	r3, r3, sl
   1ec32:	d089      	beq.n	1eb48 <_strtod_l+0x818>
   1ec34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ec36:	b1db      	cbz	r3, 1ec70 <_strtod_l+0x940>
   1ec38:	423b      	tst	r3, r7
   1ec3a:	d0ef      	beq.n	1ec1c <_strtod_l+0x8ec>
   1ec3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ec3e:	4650      	mov	r0, sl
   1ec40:	9a04      	ldr	r2, [sp, #16]
   1ec42:	4659      	mov	r1, fp
   1ec44:	b1c3      	cbz	r3, 1ec78 <_strtod_l+0x948>
   1ec46:	f023 fa7c 	bl	42142 <sulp>
   1ec4a:	4602      	mov	r2, r0
   1ec4c:	460b      	mov	r3, r1
   1ec4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ec52:	f7fd fbfb 	bl	1c44c <__adddf3>
   1ec56:	4682      	mov	sl, r0
   1ec58:	468b      	mov	fp, r1
   1ec5a:	e7df      	b.n	1ec1c <_strtod_l+0x8ec>
   1ec5c:	4013      	ands	r3, r2
   1ec5e:	f04f 3aff 	mov.w	sl, #4294967295
   1ec62:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   1ec66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   1ec6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   1ec6e:	e7d5      	b.n	1ec1c <_strtod_l+0x8ec>
   1ec70:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ec72:	ea13 0f0a 	tst.w	r3, sl
   1ec76:	e7e0      	b.n	1ec3a <_strtod_l+0x90a>
   1ec78:	f023 fa63 	bl	42142 <sulp>
   1ec7c:	4602      	mov	r2, r0
   1ec7e:	460b      	mov	r3, r1
   1ec80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1ec84:	f7fd fbe0 	bl	1c448 <__aeabi_dsub>
   1ec88:	2200      	movs	r2, #0
   1ec8a:	2300      	movs	r3, #0
   1ec8c:	4682      	mov	sl, r0
   1ec8e:	468b      	mov	fp, r1
   1ec90:	f7fd fffa 	bl	1cc88 <__aeabi_dcmpeq>
   1ec94:	2800      	cmp	r0, #0
   1ec96:	d0c1      	beq.n	1ec1c <_strtod_l+0x8ec>
   1ec98:	e60e      	b.n	1e8b8 <_strtod_l+0x588>
   1ec9a:	bf00      	nop
   1ec9c:	fffffc02 	.word	0xfffffc02
   1eca0:	7ff00000 	.word	0x7ff00000
   1eca4:	39500000 	.word	0x39500000
   1eca8:	000fffff 	.word	0x000fffff
   1ecac:	7fefffff 	.word	0x7fefffff
   1ecb0:	00043598 	.word	0x00043598
   1ecb4:	4631      	mov	r1, r6
   1ecb6:	4628      	mov	r0, r5
   1ecb8:	f023 ffd9 	bl	42c6e <__ratio>
   1ecbc:	2200      	movs	r2, #0
   1ecbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ecc2:	ee10 0a10 	vmov	r0, s0
   1ecc6:	ec59 8b10 	vmov	r8, r9, d0
   1ecca:	4649      	mov	r1, r9
   1eccc:	f7fd fff0 	bl	1ccb0 <__aeabi_dcmple>
   1ecd0:	2800      	cmp	r0, #0
   1ecd2:	d07c      	beq.n	1edce <_strtod_l+0xa9e>
   1ecd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ecd6:	2b00      	cmp	r3, #0
   1ecd8:	d04c      	beq.n	1ed74 <_strtod_l+0xa44>
   1ecda:	2200      	movs	r2, #0
   1ecdc:	4b94      	ldr	r3, [pc, #592]	; (1ef30 <_strtod_l+0xc00>)
   1ecde:	f04f 0800 	mov.w	r8, #0
   1ece2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 1ef30 <_strtod_l+0xc00>
   1ece6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1ecea:	4b92      	ldr	r3, [pc, #584]	; (1ef34 <_strtod_l+0xc04>)
   1ecec:	403b      	ands	r3, r7
   1ecee:	9311      	str	r3, [sp, #68]	; 0x44
   1ecf0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ecf2:	4b91      	ldr	r3, [pc, #580]	; (1ef38 <_strtod_l+0xc08>)
   1ecf4:	429a      	cmp	r2, r3
   1ecf6:	f040 80b2 	bne.w	1ee5e <_strtod_l+0xb2e>
   1ecfa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   1ecfe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1ed02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1ed06:	ec4b ab10 	vmov	d0, sl, fp
   1ed0a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   1ed0e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1ed12:	f01d faf1 	bl	3c2f8 <__ulp>
   1ed16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1ed1a:	ec53 2b10 	vmov	r2, r3, d0
   1ed1e:	f7fd fd4b 	bl	1c7b8 <__aeabi_dmul>
   1ed22:	4652      	mov	r2, sl
   1ed24:	465b      	mov	r3, fp
   1ed26:	f7fd fb91 	bl	1c44c <__adddf3>
   1ed2a:	460b      	mov	r3, r1
   1ed2c:	4981      	ldr	r1, [pc, #516]	; (1ef34 <_strtod_l+0xc04>)
   1ed2e:	4682      	mov	sl, r0
   1ed30:	4a82      	ldr	r2, [pc, #520]	; (1ef3c <_strtod_l+0xc0c>)
   1ed32:	4019      	ands	r1, r3
   1ed34:	4291      	cmp	r1, r2
   1ed36:	d95e      	bls.n	1edf6 <_strtod_l+0xac6>
   1ed38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ed3a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   1ed3e:	4293      	cmp	r3, r2
   1ed40:	d103      	bne.n	1ed4a <_strtod_l+0xa1a>
   1ed42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ed44:	3301      	adds	r3, #1
   1ed46:	f43f ad42 	beq.w	1e7ce <_strtod_l+0x49e>
   1ed4a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 1ef48 <_strtod_l+0xc18>
   1ed4e:	f04f 3aff 	mov.w	sl, #4294967295
   1ed52:	991e      	ldr	r1, [sp, #120]	; 0x78
   1ed54:	4620      	mov	r0, r4
   1ed56:	f023 fcba 	bl	426ce <_Bfree>
   1ed5a:	9907      	ldr	r1, [sp, #28]
   1ed5c:	4620      	mov	r0, r4
   1ed5e:	f023 fcb6 	bl	426ce <_Bfree>
   1ed62:	4631      	mov	r1, r6
   1ed64:	4620      	mov	r0, r4
   1ed66:	f023 fcb2 	bl	426ce <_Bfree>
   1ed6a:	4629      	mov	r1, r5
   1ed6c:	4620      	mov	r0, r4
   1ed6e:	f023 fcae 	bl	426ce <_Bfree>
   1ed72:	e613      	b.n	1e99c <_strtod_l+0x66c>
   1ed74:	f1ba 0f00 	cmp.w	sl, #0
   1ed78:	d11b      	bne.n	1edb2 <_strtod_l+0xa82>
   1ed7a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ed7e:	b9f3      	cbnz	r3, 1edbe <_strtod_l+0xa8e>
   1ed80:	2200      	movs	r2, #0
   1ed82:	4b6b      	ldr	r3, [pc, #428]	; (1ef30 <_strtod_l+0xc00>)
   1ed84:	4640      	mov	r0, r8
   1ed86:	4649      	mov	r1, r9
   1ed88:	f7fd ff88 	bl	1cc9c <__aeabi_dcmplt>
   1ed8c:	b9d0      	cbnz	r0, 1edc4 <_strtod_l+0xa94>
   1ed8e:	4640      	mov	r0, r8
   1ed90:	4649      	mov	r1, r9
   1ed92:	2200      	movs	r2, #0
   1ed94:	4b6a      	ldr	r3, [pc, #424]	; (1ef40 <_strtod_l+0xc10>)
   1ed96:	f7fd fd0f 	bl	1c7b8 <__aeabi_dmul>
   1ed9a:	4680      	mov	r8, r0
   1ed9c:	4689      	mov	r9, r1
   1ed9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1eda2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   1eda6:	931b      	str	r3, [sp, #108]	; 0x6c
   1eda8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   1edac:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1edb0:	e79b      	b.n	1ecea <_strtod_l+0x9ba>
   1edb2:	f1ba 0f01 	cmp.w	sl, #1
   1edb6:	d102      	bne.n	1edbe <_strtod_l+0xa8e>
   1edb8:	2f00      	cmp	r7, #0
   1edba:	f43f ad7d 	beq.w	1e8b8 <_strtod_l+0x588>
   1edbe:	2200      	movs	r2, #0
   1edc0:	4b60      	ldr	r3, [pc, #384]	; (1ef44 <_strtod_l+0xc14>)
   1edc2:	e78c      	b.n	1ecde <_strtod_l+0x9ae>
   1edc4:	f04f 0800 	mov.w	r8, #0
   1edc8:	f8df 9174 	ldr.w	r9, [pc, #372]	; 1ef40 <_strtod_l+0xc10>
   1edcc:	e7e7      	b.n	1ed9e <_strtod_l+0xa6e>
   1edce:	4b5c      	ldr	r3, [pc, #368]	; (1ef40 <_strtod_l+0xc10>)
   1edd0:	4640      	mov	r0, r8
   1edd2:	4649      	mov	r1, r9
   1edd4:	2200      	movs	r2, #0
   1edd6:	f7fd fcef 	bl	1c7b8 <__aeabi_dmul>
   1edda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1eddc:	4680      	mov	r8, r0
   1edde:	4689      	mov	r9, r1
   1ede0:	b933      	cbnz	r3, 1edf0 <_strtod_l+0xac0>
   1ede2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ede6:	9012      	str	r0, [sp, #72]	; 0x48
   1ede8:	9313      	str	r3, [sp, #76]	; 0x4c
   1edea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   1edee:	e7dd      	b.n	1edac <_strtod_l+0xa7c>
   1edf0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   1edf4:	e7f9      	b.n	1edea <_strtod_l+0xaba>
   1edf6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   1edfa:	9b04      	ldr	r3, [sp, #16]
   1edfc:	2b00      	cmp	r3, #0
   1edfe:	d1a8      	bne.n	1ed52 <_strtod_l+0xa22>
   1ee00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   1ee04:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1ee06:	0d1b      	lsrs	r3, r3, #20
   1ee08:	051b      	lsls	r3, r3, #20
   1ee0a:	429a      	cmp	r2, r3
   1ee0c:	d1a1      	bne.n	1ed52 <_strtod_l+0xa22>
   1ee0e:	4640      	mov	r0, r8
   1ee10:	4649      	mov	r1, r9
   1ee12:	f7fe f86b 	bl	1ceec <__aeabi_d2lz>
   1ee16:	f7fd fca1 	bl	1c75c <__aeabi_l2d>
   1ee1a:	4602      	mov	r2, r0
   1ee1c:	460b      	mov	r3, r1
   1ee1e:	4640      	mov	r0, r8
   1ee20:	4649      	mov	r1, r9
   1ee22:	f7fd fb11 	bl	1c448 <__aeabi_dsub>
   1ee26:	f3cb 0313 	ubfx	r3, fp, #0, #20
   1ee2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ee2c:	4680      	mov	r8, r0
   1ee2e:	ea43 030a 	orr.w	r3, r3, sl
   1ee32:	4689      	mov	r9, r1
   1ee34:	4313      	orrs	r3, r2
   1ee36:	d053      	beq.n	1eee0 <_strtod_l+0xbb0>
   1ee38:	a335      	add	r3, pc, #212	; (adr r3, 1ef10 <_strtod_l+0xbe0>)
   1ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee3e:	f7fd ff2d 	bl	1cc9c <__aeabi_dcmplt>
   1ee42:	2800      	cmp	r0, #0
   1ee44:	f47f accd 	bne.w	1e7e2 <_strtod_l+0x4b2>
   1ee48:	4640      	mov	r0, r8
   1ee4a:	4649      	mov	r1, r9
   1ee4c:	a332      	add	r3, pc, #200	; (adr r3, 1ef18 <_strtod_l+0xbe8>)
   1ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee52:	f7fd ff41 	bl	1ccd8 <__aeabi_dcmpgt>
   1ee56:	2800      	cmp	r0, #0
   1ee58:	f43f af7b 	beq.w	1ed52 <_strtod_l+0xa22>
   1ee5c:	e4c1      	b.n	1e7e2 <_strtod_l+0x4b2>
   1ee5e:	9b04      	ldr	r3, [sp, #16]
   1ee60:	b333      	cbz	r3, 1eeb0 <_strtod_l+0xb80>
   1ee62:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1ee64:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   1ee68:	d822      	bhi.n	1eeb0 <_strtod_l+0xb80>
   1ee6a:	4640      	mov	r0, r8
   1ee6c:	4649      	mov	r1, r9
   1ee6e:	a32c      	add	r3, pc, #176	; (adr r3, 1ef20 <_strtod_l+0xbf0>)
   1ee70:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ee74:	f7fd ff1c 	bl	1ccb0 <__aeabi_dcmple>
   1ee78:	b1a0      	cbz	r0, 1eea4 <_strtod_l+0xb74>
   1ee7a:	4649      	mov	r1, r9
   1ee7c:	4640      	mov	r0, r8
   1ee7e:	f7fd ff5d 	bl	1cd3c <__aeabi_d2uiz>
   1ee82:	2801      	cmp	r0, #1
   1ee84:	bf38      	it	cc
   1ee86:	2001      	movcc	r0, #1
   1ee88:	f7fd fc1c 	bl	1c6c4 <__aeabi_ui2d>
   1ee8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ee8e:	4680      	mov	r8, r0
   1ee90:	4689      	mov	r9, r1
   1ee92:	bb13      	cbnz	r3, 1eeda <_strtod_l+0xbaa>
   1ee94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ee98:	9014      	str	r0, [sp, #80]	; 0x50
   1ee9a:	9315      	str	r3, [sp, #84]	; 0x54
   1ee9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1eea0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   1eea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1eea6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1eea8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   1eeac:	1a9b      	subs	r3, r3, r2
   1eeae:	930d      	str	r3, [sp, #52]	; 0x34
   1eeb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1eeb4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1eeb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   1eebc:	f01d fa1c 	bl	3c2f8 <__ulp>
   1eec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1eec4:	ec53 2b10 	vmov	r2, r3, d0
   1eec8:	f7fd fc76 	bl	1c7b8 <__aeabi_dmul>
   1eecc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1eed0:	f7fd fabc 	bl	1c44c <__adddf3>
   1eed4:	4682      	mov	sl, r0
   1eed6:	468b      	mov	fp, r1
   1eed8:	e78f      	b.n	1edfa <_strtod_l+0xaca>
   1eeda:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   1eede:	e7dd      	b.n	1ee9c <_strtod_l+0xb6c>
   1eee0:	a311      	add	r3, pc, #68	; (adr r3, 1ef28 <_strtod_l+0xbf8>)
   1eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1eee6:	f7fd fed9 	bl	1cc9c <__aeabi_dcmplt>
   1eeea:	e7b4      	b.n	1ee56 <_strtod_l+0xb26>
   1eeec:	2300      	movs	r3, #0
   1eeee:	930e      	str	r3, [sp, #56]	; 0x38
   1eef0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1eef2:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1eef4:	6013      	str	r3, [r2, #0]
   1eef6:	f7ff ba61 	b.w	1e3bc <_strtod_l+0x8c>
   1eefa:	2b65      	cmp	r3, #101	; 0x65
   1eefc:	f43f ab5a 	beq.w	1e5b4 <_strtod_l+0x284>
   1ef00:	2b45      	cmp	r3, #69	; 0x45
   1ef02:	f43f ab57 	beq.w	1e5b4 <_strtod_l+0x284>
   1ef06:	2201      	movs	r2, #1
   1ef08:	f7ff bb90 	b.w	1e62c <_strtod_l+0x2fc>
   1ef0c:	f3af 8000 	nop.w
   1ef10:	94a03595 	.word	0x94a03595
   1ef14:	3fdfffff 	.word	0x3fdfffff
   1ef18:	35afe535 	.word	0x35afe535
   1ef1c:	3fe00000 	.word	0x3fe00000
   1ef20:	ffc00000 	.word	0xffc00000
   1ef24:	41dfffff 	.word	0x41dfffff
   1ef28:	94a03595 	.word	0x94a03595
   1ef2c:	3fcfffff 	.word	0x3fcfffff
   1ef30:	3ff00000 	.word	0x3ff00000
   1ef34:	7ff00000 	.word	0x7ff00000
   1ef38:	7fe00000 	.word	0x7fe00000
   1ef3c:	7c9fffff 	.word	0x7c9fffff
   1ef40:	3fe00000 	.word	0x3fe00000
   1ef44:	bff00000 	.word	0xbff00000
   1ef48:	7fefffff 	.word	0x7fefffff
   1ef4c:	00000000 	.word	0x00000000

0001ef50 <_dtoa_r>:
   1ef50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef54:	6a45      	ldr	r5, [r0, #36]	; 0x24
   1ef56:	4604      	mov	r4, r0
   1ef58:	ed2d 8b02 	vpush	{d8}
   1ef5c:	b095      	sub	sp, #84	; 0x54
   1ef5e:	ec57 6b10 	vmov	r6, r7, d0
   1ef62:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
   1ef66:	9105      	str	r1, [sp, #20]
   1ef68:	9209      	str	r2, [sp, #36]	; 0x24
   1ef6a:	930f      	str	r3, [sp, #60]	; 0x3c
   1ef6c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   1ef70:	b93d      	cbnz	r5, 1ef82 <_dtoa_r+0x32>
   1ef72:	2010      	movs	r0, #16
   1ef74:	f01b fd24 	bl	3a9c0 <malloc>
   1ef78:	6260      	str	r0, [r4, #36]	; 0x24
   1ef7a:	6005      	str	r5, [r0, #0]
   1ef7c:	60c5      	str	r5, [r0, #12]
   1ef7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1ef82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ef84:	6819      	ldr	r1, [r3, #0]
   1ef86:	b151      	cbz	r1, 1ef9e <_dtoa_r+0x4e>
   1ef88:	685a      	ldr	r2, [r3, #4]
   1ef8a:	2301      	movs	r3, #1
   1ef8c:	4620      	mov	r0, r4
   1ef8e:	4093      	lsls	r3, r2
   1ef90:	604a      	str	r2, [r1, #4]
   1ef92:	608b      	str	r3, [r1, #8]
   1ef94:	f023 fb9b 	bl	426ce <_Bfree>
   1ef98:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ef9a:	2200      	movs	r2, #0
   1ef9c:	601a      	str	r2, [r3, #0]
   1ef9e:	1e3b      	subs	r3, r7, #0
   1efa0:	bfb7      	itett	lt
   1efa2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
   1efa6:	2300      	movge	r3, #0
   1efa8:	2201      	movlt	r2, #1
   1efaa:	9303      	strlt	r3, [sp, #12]
   1efac:	bfa8      	it	ge
   1efae:	f8c8 3000 	strge.w	r3, [r8]
   1efb2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1efb6:	4bb6      	ldr	r3, [pc, #728]	; (1f290 <_dtoa_r+0x340>)
   1efb8:	bfb8      	it	lt
   1efba:	f8c8 2000 	strlt.w	r2, [r8]
   1efbe:	ea33 0309 	bics.w	r3, r3, r9
   1efc2:	d11b      	bne.n	1effc <_dtoa_r+0xac>
   1efc4:	f242 730f 	movw	r3, #9999	; 0x270f
   1efc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1efca:	6013      	str	r3, [r2, #0]
   1efcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
   1efd0:	4333      	orrs	r3, r6
   1efd2:	f000 8572 	beq.w	1faba <_dtoa_r+0xb6a>
   1efd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1efd8:	b963      	cbnz	r3, 1eff4 <_dtoa_r+0xa4>
   1efda:	4bae      	ldr	r3, [pc, #696]	; (1f294 <_dtoa_r+0x344>)
   1efdc:	e025      	b.n	1f02a <_dtoa_r+0xda>
   1efde:	4bae      	ldr	r3, [pc, #696]	; (1f298 <_dtoa_r+0x348>)
   1efe0:	9300      	str	r3, [sp, #0]
   1efe2:	3308      	adds	r3, #8
   1efe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1efe6:	6013      	str	r3, [r2, #0]
   1efe8:	9800      	ldr	r0, [sp, #0]
   1efea:	b015      	add	sp, #84	; 0x54
   1efec:	ecbd 8b02 	vpop	{d8}
   1eff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eff4:	4ba7      	ldr	r3, [pc, #668]	; (1f294 <_dtoa_r+0x344>)
   1eff6:	9300      	str	r3, [sp, #0]
   1eff8:	3303      	adds	r3, #3
   1effa:	e7f3      	b.n	1efe4 <_dtoa_r+0x94>
   1effc:	ed9d 7b02 	vldr	d7, [sp, #8]
   1f000:	2200      	movs	r2, #0
   1f002:	2300      	movs	r3, #0
   1f004:	ec51 0b17 	vmov	r0, r1, d7
   1f008:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
   1f00c:	f7fd fe3c 	bl	1cc88 <__aeabi_dcmpeq>
   1f010:	4680      	mov	r8, r0
   1f012:	b160      	cbz	r0, 1f02e <_dtoa_r+0xde>
   1f014:	2301      	movs	r3, #1
   1f016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f018:	6013      	str	r3, [r2, #0]
   1f01a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f01c:	2b00      	cmp	r3, #0
   1f01e:	f000 8549 	beq.w	1fab4 <_dtoa_r+0xb64>
   1f022:	4b9e      	ldr	r3, [pc, #632]	; (1f29c <_dtoa_r+0x34c>)
   1f024:	9a21      	ldr	r2, [sp, #132]	; 0x84
   1f026:	6013      	str	r3, [r2, #0]
   1f028:	3b01      	subs	r3, #1
   1f02a:	9300      	str	r3, [sp, #0]
   1f02c:	e7dc      	b.n	1efe8 <_dtoa_r+0x98>
   1f02e:	f3c9 550a 	ubfx	r5, r9, #20, #11
   1f032:	aa12      	add	r2, sp, #72	; 0x48
   1f034:	a913      	add	r1, sp, #76	; 0x4c
   1f036:	4620      	mov	r0, r4
   1f038:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   1f03c:	f023 fdc7 	bl	42bce <__d2b>
   1f040:	4682      	mov	sl, r0
   1f042:	2d00      	cmp	r5, #0
   1f044:	d07c      	beq.n	1f140 <_dtoa_r+0x1f0>
   1f046:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f048:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   1f04c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
   1f050:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f054:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
   1f058:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
   1f05c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
   1f060:	2200      	movs	r2, #0
   1f062:	4b8f      	ldr	r3, [pc, #572]	; (1f2a0 <_dtoa_r+0x350>)
   1f064:	4630      	mov	r0, r6
   1f066:	4639      	mov	r1, r7
   1f068:	f7fd f9ee 	bl	1c448 <__aeabi_dsub>
   1f06c:	a382      	add	r3, pc, #520	; (adr r3, 1f278 <_dtoa_r+0x328>)
   1f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f072:	f7fd fba1 	bl	1c7b8 <__aeabi_dmul>
   1f076:	a382      	add	r3, pc, #520	; (adr r3, 1f280 <_dtoa_r+0x330>)
   1f078:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f07c:	f7fd f9e6 	bl	1c44c <__adddf3>
   1f080:	4606      	mov	r6, r0
   1f082:	460f      	mov	r7, r1
   1f084:	4628      	mov	r0, r5
   1f086:	f7fd fb2d 	bl	1c6e4 <__aeabi_i2d>
   1f08a:	a37f      	add	r3, pc, #508	; (adr r3, 1f288 <_dtoa_r+0x338>)
   1f08c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f090:	f7fd fb92 	bl	1c7b8 <__aeabi_dmul>
   1f094:	4602      	mov	r2, r0
   1f096:	460b      	mov	r3, r1
   1f098:	4630      	mov	r0, r6
   1f09a:	4639      	mov	r1, r7
   1f09c:	f7fd f9d6 	bl	1c44c <__adddf3>
   1f0a0:	4606      	mov	r6, r0
   1f0a2:	460f      	mov	r7, r1
   1f0a4:	f7fd fe22 	bl	1ccec <__aeabi_d2iz>
   1f0a8:	2200      	movs	r2, #0
   1f0aa:	4681      	mov	r9, r0
   1f0ac:	2300      	movs	r3, #0
   1f0ae:	4630      	mov	r0, r6
   1f0b0:	4639      	mov	r1, r7
   1f0b2:	f7fd fdf3 	bl	1cc9c <__aeabi_dcmplt>
   1f0b6:	b148      	cbz	r0, 1f0cc <_dtoa_r+0x17c>
   1f0b8:	4648      	mov	r0, r9
   1f0ba:	f7fd fb13 	bl	1c6e4 <__aeabi_i2d>
   1f0be:	4632      	mov	r2, r6
   1f0c0:	463b      	mov	r3, r7
   1f0c2:	f7fd fde1 	bl	1cc88 <__aeabi_dcmpeq>
   1f0c6:	b908      	cbnz	r0, 1f0cc <_dtoa_r+0x17c>
   1f0c8:	f109 39ff 	add.w	r9, r9, #4294967295
   1f0cc:	f1b9 0f16 	cmp.w	r9, #22
   1f0d0:	d855      	bhi.n	1f17e <_dtoa_r+0x22e>
   1f0d2:	4b74      	ldr	r3, [pc, #464]	; (1f2a4 <_dtoa_r+0x354>)
   1f0d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1f0d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f0e0:	f7fd fddc 	bl	1cc9c <__aeabi_dcmplt>
   1f0e4:	2800      	cmp	r0, #0
   1f0e6:	d04c      	beq.n	1f182 <_dtoa_r+0x232>
   1f0e8:	f109 39ff 	add.w	r9, r9, #4294967295
   1f0ec:	2300      	movs	r3, #0
   1f0ee:	930e      	str	r3, [sp, #56]	; 0x38
   1f0f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f0f2:	1b5d      	subs	r5, r3, r5
   1f0f4:	1e6b      	subs	r3, r5, #1
   1f0f6:	9304      	str	r3, [sp, #16]
   1f0f8:	bf45      	ittet	mi
   1f0fa:	2300      	movmi	r3, #0
   1f0fc:	f1c5 0801 	rsbmi	r8, r5, #1
   1f100:	f04f 0800 	movpl.w	r8, #0
   1f104:	9304      	strmi	r3, [sp, #16]
   1f106:	f1b9 0f00 	cmp.w	r9, #0
   1f10a:	db3c      	blt.n	1f186 <_dtoa_r+0x236>
   1f10c:	9b04      	ldr	r3, [sp, #16]
   1f10e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   1f112:	444b      	add	r3, r9
   1f114:	9304      	str	r3, [sp, #16]
   1f116:	2300      	movs	r3, #0
   1f118:	9306      	str	r3, [sp, #24]
   1f11a:	9b05      	ldr	r3, [sp, #20]
   1f11c:	2b09      	cmp	r3, #9
   1f11e:	f200 8099 	bhi.w	1f254 <_dtoa_r+0x304>
   1f122:	2b05      	cmp	r3, #5
   1f124:	bfc5      	ittet	gt
   1f126:	3b04      	subgt	r3, #4
   1f128:	2500      	movgt	r5, #0
   1f12a:	2501      	movle	r5, #1
   1f12c:	9305      	strgt	r3, [sp, #20]
   1f12e:	9b05      	ldr	r3, [sp, #20]
   1f130:	3b02      	subs	r3, #2
   1f132:	2b03      	cmp	r3, #3
   1f134:	f200 809a 	bhi.w	1f26c <_dtoa_r+0x31c>
   1f138:	e8df f003 	tbb	[pc, r3]
   1f13c:	8a7c7e2d 	.word	0x8a7c7e2d
   1f140:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
   1f144:	441d      	add	r5, r3
   1f146:	f205 4332 	addw	r3, r5, #1074	; 0x432
   1f14a:	2b20      	cmp	r3, #32
   1f14c:	bfc6      	itte	gt
   1f14e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
   1f152:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
   1f156:	f1c3 0320 	rsble	r3, r3, #32
   1f15a:	f105 35ff 	add.w	r5, r5, #4294967295
   1f15e:	bfc5      	ittet	gt
   1f160:	fa09 f303 	lslgt.w	r3, r9, r3
   1f164:	fa26 f000 	lsrgt.w	r0, r6, r0
   1f168:	fa06 f003 	lslle.w	r0, r6, r3
   1f16c:	4318      	orrgt	r0, r3
   1f16e:	f7fd faa9 	bl	1c6c4 <__aeabi_ui2d>
   1f172:	2301      	movs	r3, #1
   1f174:	4606      	mov	r6, r0
   1f176:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
   1f17a:	9310      	str	r3, [sp, #64]	; 0x40
   1f17c:	e770      	b.n	1f060 <_dtoa_r+0x110>
   1f17e:	2301      	movs	r3, #1
   1f180:	e7b5      	b.n	1f0ee <_dtoa_r+0x19e>
   1f182:	900e      	str	r0, [sp, #56]	; 0x38
   1f184:	e7b4      	b.n	1f0f0 <_dtoa_r+0x1a0>
   1f186:	f1c9 0300 	rsb	r3, r9, #0
   1f18a:	eba8 0809 	sub.w	r8, r8, r9
   1f18e:	9306      	str	r3, [sp, #24]
   1f190:	2300      	movs	r3, #0
   1f192:	930d      	str	r3, [sp, #52]	; 0x34
   1f194:	e7c1      	b.n	1f11a <_dtoa_r+0x1ca>
   1f196:	2300      	movs	r3, #0
   1f198:	9308      	str	r3, [sp, #32]
   1f19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f19c:	2b00      	cmp	r3, #0
   1f19e:	f300 8085 	bgt.w	1f2ac <_dtoa_r+0x35c>
   1f1a2:	f04f 0b01 	mov.w	fp, #1
   1f1a6:	465b      	mov	r3, fp
   1f1a8:	f8cd b004 	str.w	fp, [sp, #4]
   1f1ac:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
   1f1b0:	2200      	movs	r2, #0
   1f1b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1f1b4:	6072      	str	r2, [r6, #4]
   1f1b6:	2204      	movs	r2, #4
   1f1b8:	f102 0014 	add.w	r0, r2, #20
   1f1bc:	6871      	ldr	r1, [r6, #4]
   1f1be:	4298      	cmp	r0, r3
   1f1c0:	d97a      	bls.n	1f2b8 <_dtoa_r+0x368>
   1f1c2:	4620      	mov	r0, r4
   1f1c4:	f023 fa4f 	bl	42666 <_Balloc>
   1f1c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f1ca:	6030      	str	r0, [r6, #0]
   1f1cc:	681b      	ldr	r3, [r3, #0]
   1f1ce:	9300      	str	r3, [sp, #0]
   1f1d0:	9b01      	ldr	r3, [sp, #4]
   1f1d2:	2b0e      	cmp	r3, #14
   1f1d4:	f200 80f5 	bhi.w	1f3c2 <_dtoa_r+0x472>
   1f1d8:	2d00      	cmp	r5, #0
   1f1da:	f000 80f2 	beq.w	1f3c2 <_dtoa_r+0x472>
   1f1de:	f1b9 0f00 	cmp.w	r9, #0
   1f1e2:	dd7d      	ble.n	1f2e0 <_dtoa_r+0x390>
   1f1e4:	f009 030f 	and.w	r3, r9, #15
   1f1e8:	4a2e      	ldr	r2, [pc, #184]	; (1f2a4 <_dtoa_r+0x354>)
   1f1ea:	f419 7f80 	tst.w	r9, #256	; 0x100
   1f1ee:	ea4f 1729 	mov.w	r7, r9, asr #4
   1f1f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1f1f6:	ed93 7b00 	vldr	d7, [r3]
   1f1fa:	eeb0 8a47 	vmov.f32	s16, s14
   1f1fe:	eef0 8a67 	vmov.f32	s17, s15
   1f202:	d05d      	beq.n	1f2c0 <_dtoa_r+0x370>
   1f204:	4b28      	ldr	r3, [pc, #160]	; (1f2a8 <_dtoa_r+0x358>)
   1f206:	f007 070f 	and.w	r7, r7, #15
   1f20a:	2503      	movs	r5, #3
   1f20c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   1f210:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f214:	f7fd fbfa 	bl	1ca0c <__aeabi_ddiv>
   1f218:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f21c:	4e22      	ldr	r6, [pc, #136]	; (1f2a8 <_dtoa_r+0x358>)
   1f21e:	2f00      	cmp	r7, #0
   1f220:	d150      	bne.n	1f2c4 <_dtoa_r+0x374>
   1f222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1f226:	ec53 2b18 	vmov	r2, r3, d8
   1f22a:	f7fd fbef 	bl	1ca0c <__aeabi_ddiv>
   1f22e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f232:	e06f      	b.n	1f314 <_dtoa_r+0x3c4>
   1f234:	2301      	movs	r3, #1
   1f236:	e7af      	b.n	1f198 <_dtoa_r+0x248>
   1f238:	2300      	movs	r3, #0
   1f23a:	9308      	str	r3, [sp, #32]
   1f23c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f23e:	eb09 0b03 	add.w	fp, r9, r3
   1f242:	f10b 0301 	add.w	r3, fp, #1
   1f246:	2b01      	cmp	r3, #1
   1f248:	9301      	str	r3, [sp, #4]
   1f24a:	bfb8      	it	lt
   1f24c:	2301      	movlt	r3, #1
   1f24e:	e7af      	b.n	1f1b0 <_dtoa_r+0x260>
   1f250:	2301      	movs	r3, #1
   1f252:	e7f2      	b.n	1f23a <_dtoa_r+0x2ea>
   1f254:	2501      	movs	r5, #1
   1f256:	2300      	movs	r3, #0
   1f258:	9508      	str	r5, [sp, #32]
   1f25a:	9305      	str	r3, [sp, #20]
   1f25c:	f04f 3bff 	mov.w	fp, #4294967295
   1f260:	2200      	movs	r2, #0
   1f262:	2312      	movs	r3, #18
   1f264:	f8cd b004 	str.w	fp, [sp, #4]
   1f268:	9209      	str	r2, [sp, #36]	; 0x24
   1f26a:	e7a1      	b.n	1f1b0 <_dtoa_r+0x260>
   1f26c:	2301      	movs	r3, #1
   1f26e:	9308      	str	r3, [sp, #32]
   1f270:	e7f4      	b.n	1f25c <_dtoa_r+0x30c>
   1f272:	bf00      	nop
   1f274:	f3af 8000 	nop.w
   1f278:	636f4361 	.word	0x636f4361
   1f27c:	3fd287a7 	.word	0x3fd287a7
   1f280:	8b60c8b3 	.word	0x8b60c8b3
   1f284:	3fc68a28 	.word	0x3fc68a28
   1f288:	509f79fb 	.word	0x509f79fb
   1f28c:	3fd34413 	.word	0x3fd34413
   1f290:	7ff00000 	.word	0x7ff00000
   1f294:	0004c3e7 	.word	0x0004c3e7
   1f298:	0004c3de 	.word	0x0004c3de
   1f29c:	0004bcc8 	.word	0x0004bcc8
   1f2a0:	3ff80000 	.word	0x3ff80000
   1f2a4:	000435e8 	.word	0x000435e8
   1f2a8:	000435c0 	.word	0x000435c0
   1f2ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   1f2b0:	465b      	mov	r3, fp
   1f2b2:	f8cd b004 	str.w	fp, [sp, #4]
   1f2b6:	e77b      	b.n	1f1b0 <_dtoa_r+0x260>
   1f2b8:	3101      	adds	r1, #1
   1f2ba:	0052      	lsls	r2, r2, #1
   1f2bc:	6071      	str	r1, [r6, #4]
   1f2be:	e77b      	b.n	1f1b8 <_dtoa_r+0x268>
   1f2c0:	2502      	movs	r5, #2
   1f2c2:	e7ab      	b.n	1f21c <_dtoa_r+0x2cc>
   1f2c4:	07f9      	lsls	r1, r7, #31
   1f2c6:	d508      	bpl.n	1f2da <_dtoa_r+0x38a>
   1f2c8:	3501      	adds	r5, #1
   1f2ca:	ec51 0b18 	vmov	r0, r1, d8
   1f2ce:	e9d6 2300 	ldrd	r2, r3, [r6]
   1f2d2:	f7fd fa71 	bl	1c7b8 <__aeabi_dmul>
   1f2d6:	ec41 0b18 	vmov	d8, r0, r1
   1f2da:	107f      	asrs	r7, r7, #1
   1f2dc:	3608      	adds	r6, #8
   1f2de:	e79e      	b.n	1f21e <_dtoa_r+0x2ce>
   1f2e0:	f000 80ab 	beq.w	1f43a <_dtoa_r+0x4ea>
   1f2e4:	f1c9 0600 	rsb	r6, r9, #0
   1f2e8:	4baa      	ldr	r3, [pc, #680]	; (1f594 <_dtoa_r+0x644>)
   1f2ea:	4fab      	ldr	r7, [pc, #684]	; (1f598 <_dtoa_r+0x648>)
   1f2ec:	2502      	movs	r5, #2
   1f2ee:	f006 020f 	and.w	r2, r6, #15
   1f2f2:	1136      	asrs	r6, r6, #4
   1f2f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f2f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1f2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   1f300:	f7fd fa5a 	bl	1c7b8 <__aeabi_dmul>
   1f304:	2300      	movs	r3, #0
   1f306:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f30a:	2e00      	cmp	r6, #0
   1f30c:	f040 808a 	bne.w	1f424 <_dtoa_r+0x4d4>
   1f310:	2b00      	cmp	r3, #0
   1f312:	d18c      	bne.n	1f22e <_dtoa_r+0x2de>
   1f314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f316:	2b00      	cmp	r3, #0
   1f318:	f000 8091 	beq.w	1f43e <_dtoa_r+0x4ee>
   1f31c:	2200      	movs	r2, #0
   1f31e:	4b9f      	ldr	r3, [pc, #636]	; (1f59c <_dtoa_r+0x64c>)
   1f320:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f324:	4630      	mov	r0, r6
   1f326:	4639      	mov	r1, r7
   1f328:	f7fd fcb8 	bl	1cc9c <__aeabi_dcmplt>
   1f32c:	2800      	cmp	r0, #0
   1f32e:	f000 8086 	beq.w	1f43e <_dtoa_r+0x4ee>
   1f332:	9b01      	ldr	r3, [sp, #4]
   1f334:	2b00      	cmp	r3, #0
   1f336:	f000 8082 	beq.w	1f43e <_dtoa_r+0x4ee>
   1f33a:	f1bb 0f00 	cmp.w	fp, #0
   1f33e:	dd3c      	ble.n	1f3ba <_dtoa_r+0x46a>
   1f340:	f109 33ff 	add.w	r3, r9, #4294967295
   1f344:	3501      	adds	r5, #1
   1f346:	2200      	movs	r2, #0
   1f348:	4630      	mov	r0, r6
   1f34a:	9307      	str	r3, [sp, #28]
   1f34c:	4639      	mov	r1, r7
   1f34e:	4b94      	ldr	r3, [pc, #592]	; (1f5a0 <_dtoa_r+0x650>)
   1f350:	f7fd fa32 	bl	1c7b8 <__aeabi_dmul>
   1f354:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   1f358:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f35c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f360:	4628      	mov	r0, r5
   1f362:	f7fd f9bf 	bl	1c6e4 <__aeabi_i2d>
   1f366:	4632      	mov	r2, r6
   1f368:	463b      	mov	r3, r7
   1f36a:	f7fd fa25 	bl	1c7b8 <__aeabi_dmul>
   1f36e:	4b8d      	ldr	r3, [pc, #564]	; (1f5a4 <_dtoa_r+0x654>)
   1f370:	2200      	movs	r2, #0
   1f372:	f7fd f86b 	bl	1c44c <__adddf3>
   1f376:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1f37a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1f37e:	9303      	str	r3, [sp, #12]
   1f380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f382:	2b00      	cmp	r3, #0
   1f384:	d160      	bne.n	1f448 <_dtoa_r+0x4f8>
   1f386:	2200      	movs	r2, #0
   1f388:	4b87      	ldr	r3, [pc, #540]	; (1f5a8 <_dtoa_r+0x658>)
   1f38a:	4630      	mov	r0, r6
   1f38c:	4639      	mov	r1, r7
   1f38e:	f7fd f85b 	bl	1c448 <__aeabi_dsub>
   1f392:	4606      	mov	r6, r0
   1f394:	460f      	mov	r7, r1
   1f396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f39a:	f7fd fc9d 	bl	1ccd8 <__aeabi_dcmpgt>
   1f39e:	2800      	cmp	r0, #0
   1f3a0:	f040 8297 	bne.w	1f8d2 <_dtoa_r+0x982>
   1f3a4:	4630      	mov	r0, r6
   1f3a6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1f3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1f3ae:	4639      	mov	r1, r7
   1f3b0:	f7fd fc74 	bl	1cc9c <__aeabi_dcmplt>
   1f3b4:	2800      	cmp	r0, #0
   1f3b6:	f040 8289 	bne.w	1f8cc <_dtoa_r+0x97c>
   1f3ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1f3be:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f3c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1f3c4:	2b00      	cmp	r3, #0
   1f3c6:	f2c0 815b 	blt.w	1f680 <_dtoa_r+0x730>
   1f3ca:	f1b9 0f0e 	cmp.w	r9, #14
   1f3ce:	f300 8157 	bgt.w	1f680 <_dtoa_r+0x730>
   1f3d2:	4b70      	ldr	r3, [pc, #448]	; (1f594 <_dtoa_r+0x644>)
   1f3d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   1f3d8:	ed93 7b00 	vldr	d7, [r3]
   1f3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f3de:	2b00      	cmp	r3, #0
   1f3e0:	eeb0 8a47 	vmov.f32	s16, s14
   1f3e4:	eef0 8a67 	vmov.f32	s17, s15
   1f3e8:	f280 80e2 	bge.w	1f5b0 <_dtoa_r+0x660>
   1f3ec:	9b01      	ldr	r3, [sp, #4]
   1f3ee:	2b00      	cmp	r3, #0
   1f3f0:	f300 80de 	bgt.w	1f5b0 <_dtoa_r+0x660>
   1f3f4:	f040 826a 	bne.w	1f8cc <_dtoa_r+0x97c>
   1f3f8:	2200      	movs	r2, #0
   1f3fa:	4b6b      	ldr	r3, [pc, #428]	; (1f5a8 <_dtoa_r+0x658>)
   1f3fc:	ec51 0b17 	vmov	r0, r1, d7
   1f400:	f7fd f9da 	bl	1c7b8 <__aeabi_dmul>
   1f404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1f408:	f7fd fc5c 	bl	1ccc4 <__aeabi_dcmpge>
   1f40c:	9e01      	ldr	r6, [sp, #4]
   1f40e:	4637      	mov	r7, r6
   1f410:	2800      	cmp	r0, #0
   1f412:	f040 8240 	bne.w	1f896 <_dtoa_r+0x946>
   1f416:	9d00      	ldr	r5, [sp, #0]
   1f418:	2331      	movs	r3, #49	; 0x31
   1f41a:	f109 0901 	add.w	r9, r9, #1
   1f41e:	f805 3b01 	strb.w	r3, [r5], #1
   1f422:	e23c      	b.n	1f89e <_dtoa_r+0x94e>
   1f424:	07f2      	lsls	r2, r6, #31
   1f426:	d505      	bpl.n	1f434 <_dtoa_r+0x4e4>
   1f428:	3501      	adds	r5, #1
   1f42a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1f42e:	f7fd f9c3 	bl	1c7b8 <__aeabi_dmul>
   1f432:	2301      	movs	r3, #1
   1f434:	1076      	asrs	r6, r6, #1
   1f436:	3708      	adds	r7, #8
   1f438:	e767      	b.n	1f30a <_dtoa_r+0x3ba>
   1f43a:	2502      	movs	r5, #2
   1f43c:	e76a      	b.n	1f314 <_dtoa_r+0x3c4>
   1f43e:	9b01      	ldr	r3, [sp, #4]
   1f440:	f8cd 901c 	str.w	r9, [sp, #28]
   1f444:	930c      	str	r3, [sp, #48]	; 0x30
   1f446:	e789      	b.n	1f35c <_dtoa_r+0x40c>
   1f448:	9900      	ldr	r1, [sp, #0]
   1f44a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1f44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1f44e:	4401      	add	r1, r0
   1f450:	4b50      	ldr	r3, [pc, #320]	; (1f594 <_dtoa_r+0x644>)
   1f452:	ed9d 7b02 	vldr	d7, [sp, #8]
   1f456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1f45a:	9102      	str	r1, [sp, #8]
   1f45c:	9908      	ldr	r1, [sp, #32]
   1f45e:	eeb0 8a47 	vmov.f32	s16, s14
   1f462:	eef0 8a67 	vmov.f32	s17, s15
   1f466:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1f46a:	2900      	cmp	r1, #0
   1f46c:	d045      	beq.n	1f4fa <_dtoa_r+0x5aa>
   1f46e:	2000      	movs	r0, #0
   1f470:	494e      	ldr	r1, [pc, #312]	; (1f5ac <_dtoa_r+0x65c>)
   1f472:	f7fd facb 	bl	1ca0c <__aeabi_ddiv>
   1f476:	ec53 2b18 	vmov	r2, r3, d8
   1f47a:	f7fc ffe5 	bl	1c448 <__aeabi_dsub>
   1f47e:	9d00      	ldr	r5, [sp, #0]
   1f480:	ec41 0b18 	vmov	d8, r0, r1
   1f484:	4639      	mov	r1, r7
   1f486:	4630      	mov	r0, r6
   1f488:	f7fd fc30 	bl	1ccec <__aeabi_d2iz>
   1f48c:	900c      	str	r0, [sp, #48]	; 0x30
   1f48e:	f7fd f929 	bl	1c6e4 <__aeabi_i2d>
   1f492:	4602      	mov	r2, r0
   1f494:	460b      	mov	r3, r1
   1f496:	4630      	mov	r0, r6
   1f498:	4639      	mov	r1, r7
   1f49a:	f7fc ffd5 	bl	1c448 <__aeabi_dsub>
   1f49e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1f4a0:	4606      	mov	r6, r0
   1f4a2:	460f      	mov	r7, r1
   1f4a4:	3330      	adds	r3, #48	; 0x30
   1f4a6:	f805 3b01 	strb.w	r3, [r5], #1
   1f4aa:	ec53 2b18 	vmov	r2, r3, d8
   1f4ae:	f7fd fbf5 	bl	1cc9c <__aeabi_dcmplt>
   1f4b2:	2800      	cmp	r0, #0
   1f4b4:	d164      	bne.n	1f580 <_dtoa_r+0x630>
   1f4b6:	4632      	mov	r2, r6
   1f4b8:	463b      	mov	r3, r7
   1f4ba:	2000      	movs	r0, #0
   1f4bc:	4937      	ldr	r1, [pc, #220]	; (1f59c <_dtoa_r+0x64c>)
   1f4be:	f7fc ffc3 	bl	1c448 <__aeabi_dsub>
   1f4c2:	ec53 2b18 	vmov	r2, r3, d8
   1f4c6:	f7fd fbe9 	bl	1cc9c <__aeabi_dcmplt>
   1f4ca:	2800      	cmp	r0, #0
   1f4cc:	f040 80b8 	bne.w	1f640 <_dtoa_r+0x6f0>
   1f4d0:	9b02      	ldr	r3, [sp, #8]
   1f4d2:	429d      	cmp	r5, r3
   1f4d4:	f43f af71 	beq.w	1f3ba <_dtoa_r+0x46a>
   1f4d8:	2200      	movs	r2, #0
   1f4da:	4b31      	ldr	r3, [pc, #196]	; (1f5a0 <_dtoa_r+0x650>)
   1f4dc:	ec51 0b18 	vmov	r0, r1, d8
   1f4e0:	f7fd f96a 	bl	1c7b8 <__aeabi_dmul>
   1f4e4:	2200      	movs	r2, #0
   1f4e6:	4b2e      	ldr	r3, [pc, #184]	; (1f5a0 <_dtoa_r+0x650>)
   1f4e8:	ec41 0b18 	vmov	d8, r0, r1
   1f4ec:	4630      	mov	r0, r6
   1f4ee:	4639      	mov	r1, r7
   1f4f0:	f7fd f962 	bl	1c7b8 <__aeabi_dmul>
   1f4f4:	4606      	mov	r6, r0
   1f4f6:	460f      	mov	r7, r1
   1f4f8:	e7c4      	b.n	1f484 <_dtoa_r+0x534>
   1f4fa:	ec51 0b17 	vmov	r0, r1, d7
   1f4fe:	f7fd f95b 	bl	1c7b8 <__aeabi_dmul>
   1f502:	9b02      	ldr	r3, [sp, #8]
   1f504:	9d00      	ldr	r5, [sp, #0]
   1f506:	930c      	str	r3, [sp, #48]	; 0x30
   1f508:	ec41 0b18 	vmov	d8, r0, r1
   1f50c:	4639      	mov	r1, r7
   1f50e:	4630      	mov	r0, r6
   1f510:	f7fd fbec 	bl	1ccec <__aeabi_d2iz>
   1f514:	9011      	str	r0, [sp, #68]	; 0x44
   1f516:	f7fd f8e5 	bl	1c6e4 <__aeabi_i2d>
   1f51a:	4602      	mov	r2, r0
   1f51c:	460b      	mov	r3, r1
   1f51e:	4630      	mov	r0, r6
   1f520:	4639      	mov	r1, r7
   1f522:	f7fc ff91 	bl	1c448 <__aeabi_dsub>
   1f526:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1f528:	4606      	mov	r6, r0
   1f52a:	460f      	mov	r7, r1
   1f52c:	3330      	adds	r3, #48	; 0x30
   1f52e:	2200      	movs	r2, #0
   1f530:	f805 3b01 	strb.w	r3, [r5], #1
   1f534:	9b02      	ldr	r3, [sp, #8]
   1f536:	429d      	cmp	r5, r3
   1f538:	d125      	bne.n	1f586 <_dtoa_r+0x636>
   1f53a:	4b1c      	ldr	r3, [pc, #112]	; (1f5ac <_dtoa_r+0x65c>)
   1f53c:	ec51 0b18 	vmov	r0, r1, d8
   1f540:	f7fc ff84 	bl	1c44c <__adddf3>
   1f544:	4602      	mov	r2, r0
   1f546:	460b      	mov	r3, r1
   1f548:	4630      	mov	r0, r6
   1f54a:	4639      	mov	r1, r7
   1f54c:	f7fd fbc4 	bl	1ccd8 <__aeabi_dcmpgt>
   1f550:	2800      	cmp	r0, #0
   1f552:	d175      	bne.n	1f640 <_dtoa_r+0x6f0>
   1f554:	2000      	movs	r0, #0
   1f556:	4915      	ldr	r1, [pc, #84]	; (1f5ac <_dtoa_r+0x65c>)
   1f558:	ec53 2b18 	vmov	r2, r3, d8
   1f55c:	f7fc ff74 	bl	1c448 <__aeabi_dsub>
   1f560:	4602      	mov	r2, r0
   1f562:	460b      	mov	r3, r1
   1f564:	4630      	mov	r0, r6
   1f566:	4639      	mov	r1, r7
   1f568:	f7fd fb98 	bl	1cc9c <__aeabi_dcmplt>
   1f56c:	2800      	cmp	r0, #0
   1f56e:	f43f af24 	beq.w	1f3ba <_dtoa_r+0x46a>
   1f572:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1f574:	1e6b      	subs	r3, r5, #1
   1f576:	930c      	str	r3, [sp, #48]	; 0x30
   1f578:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   1f57c:	2b30      	cmp	r3, #48	; 0x30
   1f57e:	d0f8      	beq.n	1f572 <_dtoa_r+0x622>
   1f580:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1f584:	e04a      	b.n	1f61c <_dtoa_r+0x6cc>
   1f586:	4b06      	ldr	r3, [pc, #24]	; (1f5a0 <_dtoa_r+0x650>)
   1f588:	f7fd f916 	bl	1c7b8 <__aeabi_dmul>
   1f58c:	4606      	mov	r6, r0
   1f58e:	460f      	mov	r7, r1
   1f590:	e7bc      	b.n	1f50c <_dtoa_r+0x5bc>
   1f592:	bf00      	nop
   1f594:	000435e8 	.word	0x000435e8
   1f598:	000435c0 	.word	0x000435c0
   1f59c:	3ff00000 	.word	0x3ff00000
   1f5a0:	40240000 	.word	0x40240000
   1f5a4:	401c0000 	.word	0x401c0000
   1f5a8:	40140000 	.word	0x40140000
   1f5ac:	3fe00000 	.word	0x3fe00000
   1f5b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   1f5b4:	9d00      	ldr	r5, [sp, #0]
   1f5b6:	4630      	mov	r0, r6
   1f5b8:	4639      	mov	r1, r7
   1f5ba:	ec53 2b18 	vmov	r2, r3, d8
   1f5be:	f7fd fa25 	bl	1ca0c <__aeabi_ddiv>
   1f5c2:	f7fd fb93 	bl	1ccec <__aeabi_d2iz>
   1f5c6:	4680      	mov	r8, r0
   1f5c8:	f7fd f88c 	bl	1c6e4 <__aeabi_i2d>
   1f5cc:	ec53 2b18 	vmov	r2, r3, d8
   1f5d0:	f7fd f8f2 	bl	1c7b8 <__aeabi_dmul>
   1f5d4:	4602      	mov	r2, r0
   1f5d6:	4630      	mov	r0, r6
   1f5d8:	f108 0630 	add.w	r6, r8, #48	; 0x30
   1f5dc:	460b      	mov	r3, r1
   1f5de:	4639      	mov	r1, r7
   1f5e0:	f7fc ff32 	bl	1c448 <__aeabi_dsub>
   1f5e4:	f805 6b01 	strb.w	r6, [r5], #1
   1f5e8:	9e00      	ldr	r6, [sp, #0]
   1f5ea:	4602      	mov	r2, r0
   1f5ec:	9f01      	ldr	r7, [sp, #4]
   1f5ee:	460b      	mov	r3, r1
   1f5f0:	1bae      	subs	r6, r5, r6
   1f5f2:	42b7      	cmp	r7, r6
   1f5f4:	d137      	bne.n	1f666 <_dtoa_r+0x716>
   1f5f6:	f7fc ff29 	bl	1c44c <__adddf3>
   1f5fa:	4606      	mov	r6, r0
   1f5fc:	460f      	mov	r7, r1
   1f5fe:	ec53 2b18 	vmov	r2, r3, d8
   1f602:	f7fd fb69 	bl	1ccd8 <__aeabi_dcmpgt>
   1f606:	b9c8      	cbnz	r0, 1f63c <_dtoa_r+0x6ec>
   1f608:	4630      	mov	r0, r6
   1f60a:	4639      	mov	r1, r7
   1f60c:	ec53 2b18 	vmov	r2, r3, d8
   1f610:	f7fd fb3a 	bl	1cc88 <__aeabi_dcmpeq>
   1f614:	b110      	cbz	r0, 1f61c <_dtoa_r+0x6cc>
   1f616:	f018 0f01 	tst.w	r8, #1
   1f61a:	d10f      	bne.n	1f63c <_dtoa_r+0x6ec>
   1f61c:	4620      	mov	r0, r4
   1f61e:	4651      	mov	r1, sl
   1f620:	f023 f855 	bl	426ce <_Bfree>
   1f624:	2300      	movs	r3, #0
   1f626:	f109 0001 	add.w	r0, r9, #1
   1f62a:	702b      	strb	r3, [r5, #0]
   1f62c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1f62e:	6018      	str	r0, [r3, #0]
   1f630:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1f632:	2b00      	cmp	r3, #0
   1f634:	f43f acd8 	beq.w	1efe8 <_dtoa_r+0x98>
   1f638:	601d      	str	r5, [r3, #0]
   1f63a:	e4d5      	b.n	1efe8 <_dtoa_r+0x98>
   1f63c:	f8cd 901c 	str.w	r9, [sp, #28]
   1f640:	462b      	mov	r3, r5
   1f642:	461d      	mov	r5, r3
   1f644:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1f648:	2a39      	cmp	r2, #57	; 0x39
   1f64a:	d108      	bne.n	1f65e <_dtoa_r+0x70e>
   1f64c:	9a00      	ldr	r2, [sp, #0]
   1f64e:	429a      	cmp	r2, r3
   1f650:	d1f7      	bne.n	1f642 <_dtoa_r+0x6f2>
   1f652:	9a07      	ldr	r2, [sp, #28]
   1f654:	9900      	ldr	r1, [sp, #0]
   1f656:	3201      	adds	r2, #1
   1f658:	9207      	str	r2, [sp, #28]
   1f65a:	2230      	movs	r2, #48	; 0x30
   1f65c:	700a      	strb	r2, [r1, #0]
   1f65e:	781a      	ldrb	r2, [r3, #0]
   1f660:	3201      	adds	r2, #1
   1f662:	701a      	strb	r2, [r3, #0]
   1f664:	e78c      	b.n	1f580 <_dtoa_r+0x630>
   1f666:	2200      	movs	r2, #0
   1f668:	4b9c      	ldr	r3, [pc, #624]	; (1f8dc <_dtoa_r+0x98c>)
   1f66a:	f7fd f8a5 	bl	1c7b8 <__aeabi_dmul>
   1f66e:	2200      	movs	r2, #0
   1f670:	2300      	movs	r3, #0
   1f672:	4606      	mov	r6, r0
   1f674:	460f      	mov	r7, r1
   1f676:	f7fd fb07 	bl	1cc88 <__aeabi_dcmpeq>
   1f67a:	2800      	cmp	r0, #0
   1f67c:	d09b      	beq.n	1f5b6 <_dtoa_r+0x666>
   1f67e:	e7cd      	b.n	1f61c <_dtoa_r+0x6cc>
   1f680:	9a08      	ldr	r2, [sp, #32]
   1f682:	2a00      	cmp	r2, #0
   1f684:	f000 80c4 	beq.w	1f810 <_dtoa_r+0x8c0>
   1f688:	9a05      	ldr	r2, [sp, #20]
   1f68a:	2a01      	cmp	r2, #1
   1f68c:	f300 80a9 	bgt.w	1f7e2 <_dtoa_r+0x892>
   1f690:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1f692:	2a00      	cmp	r2, #0
   1f694:	f000 80a1 	beq.w	1f7da <_dtoa_r+0x88a>
   1f698:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1f69c:	9e06      	ldr	r6, [sp, #24]
   1f69e:	4645      	mov	r5, r8
   1f6a0:	9a04      	ldr	r2, [sp, #16]
   1f6a2:	2101      	movs	r1, #1
   1f6a4:	4620      	mov	r0, r4
   1f6a6:	4498      	add	r8, r3
   1f6a8:	441a      	add	r2, r3
   1f6aa:	9204      	str	r2, [sp, #16]
   1f6ac:	f023 f8f3 	bl	42896 <__i2b>
   1f6b0:	4607      	mov	r7, r0
   1f6b2:	2d00      	cmp	r5, #0
   1f6b4:	dd0b      	ble.n	1f6ce <_dtoa_r+0x77e>
   1f6b6:	9b04      	ldr	r3, [sp, #16]
   1f6b8:	2b00      	cmp	r3, #0
   1f6ba:	dd08      	ble.n	1f6ce <_dtoa_r+0x77e>
   1f6bc:	42ab      	cmp	r3, r5
   1f6be:	9a04      	ldr	r2, [sp, #16]
   1f6c0:	bfa8      	it	ge
   1f6c2:	462b      	movge	r3, r5
   1f6c4:	eba8 0803 	sub.w	r8, r8, r3
   1f6c8:	1aed      	subs	r5, r5, r3
   1f6ca:	1ad3      	subs	r3, r2, r3
   1f6cc:	9304      	str	r3, [sp, #16]
   1f6ce:	9b06      	ldr	r3, [sp, #24]
   1f6d0:	b1fb      	cbz	r3, 1f712 <_dtoa_r+0x7c2>
   1f6d2:	9b08      	ldr	r3, [sp, #32]
   1f6d4:	2b00      	cmp	r3, #0
   1f6d6:	f000 809f 	beq.w	1f818 <_dtoa_r+0x8c8>
   1f6da:	2e00      	cmp	r6, #0
   1f6dc:	dd11      	ble.n	1f702 <_dtoa_r+0x7b2>
   1f6de:	4639      	mov	r1, r7
   1f6e0:	4632      	mov	r2, r6
   1f6e2:	4620      	mov	r0, r4
   1f6e4:	f01c fdba 	bl	3c25c <__pow5mult>
   1f6e8:	4652      	mov	r2, sl
   1f6ea:	4601      	mov	r1, r0
   1f6ec:	4607      	mov	r7, r0
   1f6ee:	4620      	mov	r0, r4
   1f6f0:	f023 f8da 	bl	428a8 <__multiply>
   1f6f4:	4651      	mov	r1, sl
   1f6f6:	9007      	str	r0, [sp, #28]
   1f6f8:	4620      	mov	r0, r4
   1f6fa:	f022 ffe8 	bl	426ce <_Bfree>
   1f6fe:	9b07      	ldr	r3, [sp, #28]
   1f700:	469a      	mov	sl, r3
   1f702:	9b06      	ldr	r3, [sp, #24]
   1f704:	1b9a      	subs	r2, r3, r6
   1f706:	d004      	beq.n	1f712 <_dtoa_r+0x7c2>
   1f708:	4651      	mov	r1, sl
   1f70a:	4620      	mov	r0, r4
   1f70c:	f01c fda6 	bl	3c25c <__pow5mult>
   1f710:	4682      	mov	sl, r0
   1f712:	2101      	movs	r1, #1
   1f714:	4620      	mov	r0, r4
   1f716:	f023 f8be 	bl	42896 <__i2b>
   1f71a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f71c:	4606      	mov	r6, r0
   1f71e:	2b00      	cmp	r3, #0
   1f720:	dd7c      	ble.n	1f81c <_dtoa_r+0x8cc>
   1f722:	461a      	mov	r2, r3
   1f724:	4601      	mov	r1, r0
   1f726:	4620      	mov	r0, r4
   1f728:	f01c fd98 	bl	3c25c <__pow5mult>
   1f72c:	9b05      	ldr	r3, [sp, #20]
   1f72e:	4606      	mov	r6, r0
   1f730:	2b01      	cmp	r3, #1
   1f732:	dd76      	ble.n	1f822 <_dtoa_r+0x8d2>
   1f734:	2300      	movs	r3, #0
   1f736:	9306      	str	r3, [sp, #24]
   1f738:	6933      	ldr	r3, [r6, #16]
   1f73a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1f73e:	6918      	ldr	r0, [r3, #16]
   1f740:	f023 f859 	bl	427f6 <__hi0bits>
   1f744:	f1c0 0020 	rsb	r0, r0, #32
   1f748:	9b04      	ldr	r3, [sp, #16]
   1f74a:	4418      	add	r0, r3
   1f74c:	f010 001f 	ands.w	r0, r0, #31
   1f750:	f000 8086 	beq.w	1f860 <_dtoa_r+0x910>
   1f754:	f1c0 0320 	rsb	r3, r0, #32
   1f758:	2b04      	cmp	r3, #4
   1f75a:	dd7f      	ble.n	1f85c <_dtoa_r+0x90c>
   1f75c:	f1c0 001c 	rsb	r0, r0, #28
   1f760:	9b04      	ldr	r3, [sp, #16]
   1f762:	4480      	add	r8, r0
   1f764:	4405      	add	r5, r0
   1f766:	4403      	add	r3, r0
   1f768:	9304      	str	r3, [sp, #16]
   1f76a:	f1b8 0f00 	cmp.w	r8, #0
   1f76e:	dd05      	ble.n	1f77c <_dtoa_r+0x82c>
   1f770:	4651      	mov	r1, sl
   1f772:	4642      	mov	r2, r8
   1f774:	4620      	mov	r0, r4
   1f776:	f023 f932 	bl	429de <__lshift>
   1f77a:	4682      	mov	sl, r0
   1f77c:	9b04      	ldr	r3, [sp, #16]
   1f77e:	2b00      	cmp	r3, #0
   1f780:	dd05      	ble.n	1f78e <_dtoa_r+0x83e>
   1f782:	4631      	mov	r1, r6
   1f784:	461a      	mov	r2, r3
   1f786:	4620      	mov	r0, r4
   1f788:	f023 f929 	bl	429de <__lshift>
   1f78c:	4606      	mov	r6, r0
   1f78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f790:	2b00      	cmp	r3, #0
   1f792:	d067      	beq.n	1f864 <_dtoa_r+0x914>
   1f794:	4631      	mov	r1, r6
   1f796:	4650      	mov	r0, sl
   1f798:	f023 f980 	bl	42a9c <__mcmp>
   1f79c:	2800      	cmp	r0, #0
   1f79e:	da61      	bge.n	1f864 <_dtoa_r+0x914>
   1f7a0:	2300      	movs	r3, #0
   1f7a2:	4651      	mov	r1, sl
   1f7a4:	220a      	movs	r2, #10
   1f7a6:	4620      	mov	r0, r4
   1f7a8:	f022 ffa8 	bl	426fc <__multadd>
   1f7ac:	9b08      	ldr	r3, [sp, #32]
   1f7ae:	f109 39ff 	add.w	r9, r9, #4294967295
   1f7b2:	4682      	mov	sl, r0
   1f7b4:	2b00      	cmp	r3, #0
   1f7b6:	f000 8187 	beq.w	1fac8 <_dtoa_r+0xb78>
   1f7ba:	4639      	mov	r1, r7
   1f7bc:	2300      	movs	r3, #0
   1f7be:	220a      	movs	r2, #10
   1f7c0:	4620      	mov	r0, r4
   1f7c2:	f022 ff9b 	bl	426fc <__multadd>
   1f7c6:	f1bb 0f00 	cmp.w	fp, #0
   1f7ca:	4607      	mov	r7, r0
   1f7cc:	f300 808e 	bgt.w	1f8ec <_dtoa_r+0x99c>
   1f7d0:	9b05      	ldr	r3, [sp, #20]
   1f7d2:	2b02      	cmp	r3, #2
   1f7d4:	f340 808a 	ble.w	1f8ec <_dtoa_r+0x99c>
   1f7d8:	e04c      	b.n	1f874 <_dtoa_r+0x924>
   1f7da:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f7dc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   1f7e0:	e75c      	b.n	1f69c <_dtoa_r+0x74c>
   1f7e2:	9b01      	ldr	r3, [sp, #4]
   1f7e4:	1e5e      	subs	r6, r3, #1
   1f7e6:	9b06      	ldr	r3, [sp, #24]
   1f7e8:	42b3      	cmp	r3, r6
   1f7ea:	bfb7      	itett	lt
   1f7ec:	9b06      	ldrlt	r3, [sp, #24]
   1f7ee:	1b9e      	subge	r6, r3, r6
   1f7f0:	9606      	strlt	r6, [sp, #24]
   1f7f2:	1af2      	sublt	r2, r6, r3
   1f7f4:	bfbf      	itttt	lt
   1f7f6:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
   1f7f8:	2600      	movlt	r6, #0
   1f7fa:	189b      	addlt	r3, r3, r2
   1f7fc:	930d      	strlt	r3, [sp, #52]	; 0x34
   1f7fe:	9b01      	ldr	r3, [sp, #4]
   1f800:	2b00      	cmp	r3, #0
   1f802:	bfb5      	itete	lt
   1f804:	eba8 0503 	sublt.w	r5, r8, r3
   1f808:	4645      	movge	r5, r8
   1f80a:	2300      	movlt	r3, #0
   1f80c:	9b01      	ldrge	r3, [sp, #4]
   1f80e:	e747      	b.n	1f6a0 <_dtoa_r+0x750>
   1f810:	9e06      	ldr	r6, [sp, #24]
   1f812:	4645      	mov	r5, r8
   1f814:	9f08      	ldr	r7, [sp, #32]
   1f816:	e74c      	b.n	1f6b2 <_dtoa_r+0x762>
   1f818:	9a06      	ldr	r2, [sp, #24]
   1f81a:	e775      	b.n	1f708 <_dtoa_r+0x7b8>
   1f81c:	9b05      	ldr	r3, [sp, #20]
   1f81e:	2b01      	cmp	r3, #1
   1f820:	dc18      	bgt.n	1f854 <_dtoa_r+0x904>
   1f822:	9b02      	ldr	r3, [sp, #8]
   1f824:	b9b3      	cbnz	r3, 1f854 <_dtoa_r+0x904>
   1f826:	9b03      	ldr	r3, [sp, #12]
   1f828:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1f82c:	b9a3      	cbnz	r3, 1f858 <_dtoa_r+0x908>
   1f82e:	9b03      	ldr	r3, [sp, #12]
   1f830:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f834:	0d1b      	lsrs	r3, r3, #20
   1f836:	051b      	lsls	r3, r3, #20
   1f838:	b12b      	cbz	r3, 1f846 <_dtoa_r+0x8f6>
   1f83a:	9b04      	ldr	r3, [sp, #16]
   1f83c:	f108 0801 	add.w	r8, r8, #1
   1f840:	3301      	adds	r3, #1
   1f842:	9304      	str	r3, [sp, #16]
   1f844:	2301      	movs	r3, #1
   1f846:	9306      	str	r3, [sp, #24]
   1f848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f84a:	2b00      	cmp	r3, #0
   1f84c:	f47f af74 	bne.w	1f738 <_dtoa_r+0x7e8>
   1f850:	2001      	movs	r0, #1
   1f852:	e779      	b.n	1f748 <_dtoa_r+0x7f8>
   1f854:	2300      	movs	r3, #0
   1f856:	e7f6      	b.n	1f846 <_dtoa_r+0x8f6>
   1f858:	9b02      	ldr	r3, [sp, #8]
   1f85a:	e7f4      	b.n	1f846 <_dtoa_r+0x8f6>
   1f85c:	d085      	beq.n	1f76a <_dtoa_r+0x81a>
   1f85e:	4618      	mov	r0, r3
   1f860:	301c      	adds	r0, #28
   1f862:	e77d      	b.n	1f760 <_dtoa_r+0x810>
   1f864:	9b01      	ldr	r3, [sp, #4]
   1f866:	2b00      	cmp	r3, #0
   1f868:	dc3a      	bgt.n	1f8e0 <_dtoa_r+0x990>
   1f86a:	9b05      	ldr	r3, [sp, #20]
   1f86c:	2b02      	cmp	r3, #2
   1f86e:	dd37      	ble.n	1f8e0 <_dtoa_r+0x990>
   1f870:	f8dd b004 	ldr.w	fp, [sp, #4]
   1f874:	f1bb 0f00 	cmp.w	fp, #0
   1f878:	d10d      	bne.n	1f896 <_dtoa_r+0x946>
   1f87a:	4631      	mov	r1, r6
   1f87c:	465b      	mov	r3, fp
   1f87e:	2205      	movs	r2, #5
   1f880:	4620      	mov	r0, r4
   1f882:	f022 ff3b 	bl	426fc <__multadd>
   1f886:	4601      	mov	r1, r0
   1f888:	4606      	mov	r6, r0
   1f88a:	4650      	mov	r0, sl
   1f88c:	f023 f906 	bl	42a9c <__mcmp>
   1f890:	2800      	cmp	r0, #0
   1f892:	f73f adc0 	bgt.w	1f416 <_dtoa_r+0x4c6>
   1f896:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f898:	9d00      	ldr	r5, [sp, #0]
   1f89a:	ea6f 0903 	mvn.w	r9, r3
   1f89e:	f04f 0800 	mov.w	r8, #0
   1f8a2:	4631      	mov	r1, r6
   1f8a4:	4620      	mov	r0, r4
   1f8a6:	f022 ff12 	bl	426ce <_Bfree>
   1f8aa:	2f00      	cmp	r7, #0
   1f8ac:	f43f aeb6 	beq.w	1f61c <_dtoa_r+0x6cc>
   1f8b0:	f1b8 0f00 	cmp.w	r8, #0
   1f8b4:	d005      	beq.n	1f8c2 <_dtoa_r+0x972>
   1f8b6:	45b8      	cmp	r8, r7
   1f8b8:	d003      	beq.n	1f8c2 <_dtoa_r+0x972>
   1f8ba:	4641      	mov	r1, r8
   1f8bc:	4620      	mov	r0, r4
   1f8be:	f022 ff06 	bl	426ce <_Bfree>
   1f8c2:	4639      	mov	r1, r7
   1f8c4:	4620      	mov	r0, r4
   1f8c6:	f022 ff02 	bl	426ce <_Bfree>
   1f8ca:	e6a7      	b.n	1f61c <_dtoa_r+0x6cc>
   1f8cc:	2600      	movs	r6, #0
   1f8ce:	4637      	mov	r7, r6
   1f8d0:	e7e1      	b.n	1f896 <_dtoa_r+0x946>
   1f8d2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1f8d4:	f8dd 901c 	ldr.w	r9, [sp, #28]
   1f8d8:	4637      	mov	r7, r6
   1f8da:	e59c      	b.n	1f416 <_dtoa_r+0x4c6>
   1f8dc:	40240000 	.word	0x40240000
   1f8e0:	9b08      	ldr	r3, [sp, #32]
   1f8e2:	f8dd b004 	ldr.w	fp, [sp, #4]
   1f8e6:	2b00      	cmp	r3, #0
   1f8e8:	f000 80f5 	beq.w	1fad6 <_dtoa_r+0xb86>
   1f8ec:	2d00      	cmp	r5, #0
   1f8ee:	dd05      	ble.n	1f8fc <_dtoa_r+0x9ac>
   1f8f0:	4639      	mov	r1, r7
   1f8f2:	462a      	mov	r2, r5
   1f8f4:	4620      	mov	r0, r4
   1f8f6:	f023 f872 	bl	429de <__lshift>
   1f8fa:	4607      	mov	r7, r0
   1f8fc:	9b06      	ldr	r3, [sp, #24]
   1f8fe:	2b00      	cmp	r3, #0
   1f900:	d055      	beq.n	1f9ae <_dtoa_r+0xa5e>
   1f902:	6879      	ldr	r1, [r7, #4]
   1f904:	4620      	mov	r0, r4
   1f906:	f022 feae 	bl	42666 <_Balloc>
   1f90a:	693a      	ldr	r2, [r7, #16]
   1f90c:	4605      	mov	r5, r0
   1f90e:	f107 010c 	add.w	r1, r7, #12
   1f912:	3202      	adds	r2, #2
   1f914:	300c      	adds	r0, #12
   1f916:	0092      	lsls	r2, r2, #2
   1f918:	f022 f9c1 	bl	41c9e <memcpy>
   1f91c:	2201      	movs	r2, #1
   1f91e:	4629      	mov	r1, r5
   1f920:	4620      	mov	r0, r4
   1f922:	f023 f85c 	bl	429de <__lshift>
   1f926:	9b00      	ldr	r3, [sp, #0]
   1f928:	46b8      	mov	r8, r7
   1f92a:	4607      	mov	r7, r0
   1f92c:	3301      	adds	r3, #1
   1f92e:	9301      	str	r3, [sp, #4]
   1f930:	9b00      	ldr	r3, [sp, #0]
   1f932:	445b      	add	r3, fp
   1f934:	9307      	str	r3, [sp, #28]
   1f936:	9b02      	ldr	r3, [sp, #8]
   1f938:	f003 0301 	and.w	r3, r3, #1
   1f93c:	9306      	str	r3, [sp, #24]
   1f93e:	9b01      	ldr	r3, [sp, #4]
   1f940:	4631      	mov	r1, r6
   1f942:	4650      	mov	r0, sl
   1f944:	f103 3bff 	add.w	fp, r3, #4294967295
   1f948:	f022 fc4e 	bl	421e8 <quorem>
   1f94c:	4603      	mov	r3, r0
   1f94e:	4641      	mov	r1, r8
   1f950:	9002      	str	r0, [sp, #8]
   1f952:	4650      	mov	r0, sl
   1f954:	3330      	adds	r3, #48	; 0x30
   1f956:	9308      	str	r3, [sp, #32]
   1f958:	f023 f8a0 	bl	42a9c <__mcmp>
   1f95c:	463a      	mov	r2, r7
   1f95e:	9004      	str	r0, [sp, #16]
   1f960:	4631      	mov	r1, r6
   1f962:	4620      	mov	r0, r4
   1f964:	f023 f8b6 	bl	42ad4 <__mdiff>
   1f968:	68c2      	ldr	r2, [r0, #12]
   1f96a:	4605      	mov	r5, r0
   1f96c:	9b08      	ldr	r3, [sp, #32]
   1f96e:	bb02      	cbnz	r2, 1f9b2 <_dtoa_r+0xa62>
   1f970:	4601      	mov	r1, r0
   1f972:	4650      	mov	r0, sl
   1f974:	f023 f892 	bl	42a9c <__mcmp>
   1f978:	9b08      	ldr	r3, [sp, #32]
   1f97a:	4602      	mov	r2, r0
   1f97c:	4629      	mov	r1, r5
   1f97e:	4620      	mov	r0, r4
   1f980:	e9cd 3208 	strd	r3, r2, [sp, #32]
   1f984:	f022 fea3 	bl	426ce <_Bfree>
   1f988:	9b05      	ldr	r3, [sp, #20]
   1f98a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f98c:	9d01      	ldr	r5, [sp, #4]
   1f98e:	ea43 0102 	orr.w	r1, r3, r2
   1f992:	9b06      	ldr	r3, [sp, #24]
   1f994:	430b      	orrs	r3, r1
   1f996:	9b08      	ldr	r3, [sp, #32]
   1f998:	d10d      	bne.n	1f9b6 <_dtoa_r+0xa66>
   1f99a:	2b39      	cmp	r3, #57	; 0x39
   1f99c:	d027      	beq.n	1f9ee <_dtoa_r+0xa9e>
   1f99e:	9a04      	ldr	r2, [sp, #16]
   1f9a0:	2a00      	cmp	r2, #0
   1f9a2:	dd01      	ble.n	1f9a8 <_dtoa_r+0xa58>
   1f9a4:	9b02      	ldr	r3, [sp, #8]
   1f9a6:	3331      	adds	r3, #49	; 0x31
   1f9a8:	f88b 3000 	strb.w	r3, [fp]
   1f9ac:	e779      	b.n	1f8a2 <_dtoa_r+0x952>
   1f9ae:	4638      	mov	r0, r7
   1f9b0:	e7b9      	b.n	1f926 <_dtoa_r+0x9d6>
   1f9b2:	2201      	movs	r2, #1
   1f9b4:	e7e2      	b.n	1f97c <_dtoa_r+0xa2c>
   1f9b6:	9904      	ldr	r1, [sp, #16]
   1f9b8:	2900      	cmp	r1, #0
   1f9ba:	db04      	blt.n	1f9c6 <_dtoa_r+0xa76>
   1f9bc:	9805      	ldr	r0, [sp, #20]
   1f9be:	4301      	orrs	r1, r0
   1f9c0:	9806      	ldr	r0, [sp, #24]
   1f9c2:	4301      	orrs	r1, r0
   1f9c4:	d120      	bne.n	1fa08 <_dtoa_r+0xab8>
   1f9c6:	2a00      	cmp	r2, #0
   1f9c8:	ddee      	ble.n	1f9a8 <_dtoa_r+0xa58>
   1f9ca:	4651      	mov	r1, sl
   1f9cc:	2201      	movs	r2, #1
   1f9ce:	4620      	mov	r0, r4
   1f9d0:	9301      	str	r3, [sp, #4]
   1f9d2:	f023 f804 	bl	429de <__lshift>
   1f9d6:	4631      	mov	r1, r6
   1f9d8:	4682      	mov	sl, r0
   1f9da:	f023 f85f 	bl	42a9c <__mcmp>
   1f9de:	2800      	cmp	r0, #0
   1f9e0:	9b01      	ldr	r3, [sp, #4]
   1f9e2:	dc02      	bgt.n	1f9ea <_dtoa_r+0xa9a>
   1f9e4:	d1e0      	bne.n	1f9a8 <_dtoa_r+0xa58>
   1f9e6:	07da      	lsls	r2, r3, #31
   1f9e8:	d5de      	bpl.n	1f9a8 <_dtoa_r+0xa58>
   1f9ea:	2b39      	cmp	r3, #57	; 0x39
   1f9ec:	d1da      	bne.n	1f9a4 <_dtoa_r+0xa54>
   1f9ee:	2339      	movs	r3, #57	; 0x39
   1f9f0:	f88b 3000 	strb.w	r3, [fp]
   1f9f4:	462b      	mov	r3, r5
   1f9f6:	461d      	mov	r5, r3
   1f9f8:	3b01      	subs	r3, #1
   1f9fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   1f9fe:	2a39      	cmp	r2, #57	; 0x39
   1fa00:	d050      	beq.n	1faa4 <_dtoa_r+0xb54>
   1fa02:	3201      	adds	r2, #1
   1fa04:	701a      	strb	r2, [r3, #0]
   1fa06:	e74c      	b.n	1f8a2 <_dtoa_r+0x952>
   1fa08:	2a00      	cmp	r2, #0
   1fa0a:	dd03      	ble.n	1fa14 <_dtoa_r+0xac4>
   1fa0c:	2b39      	cmp	r3, #57	; 0x39
   1fa0e:	d0ee      	beq.n	1f9ee <_dtoa_r+0xa9e>
   1fa10:	3301      	adds	r3, #1
   1fa12:	e7c9      	b.n	1f9a8 <_dtoa_r+0xa58>
   1fa14:	9a01      	ldr	r2, [sp, #4]
   1fa16:	9907      	ldr	r1, [sp, #28]
   1fa18:	f802 3c01 	strb.w	r3, [r2, #-1]
   1fa1c:	428a      	cmp	r2, r1
   1fa1e:	d02a      	beq.n	1fa76 <_dtoa_r+0xb26>
   1fa20:	4651      	mov	r1, sl
   1fa22:	2300      	movs	r3, #0
   1fa24:	220a      	movs	r2, #10
   1fa26:	4620      	mov	r0, r4
   1fa28:	f022 fe68 	bl	426fc <__multadd>
   1fa2c:	45b8      	cmp	r8, r7
   1fa2e:	4682      	mov	sl, r0
   1fa30:	f04f 0300 	mov.w	r3, #0
   1fa34:	f04f 020a 	mov.w	r2, #10
   1fa38:	4641      	mov	r1, r8
   1fa3a:	4620      	mov	r0, r4
   1fa3c:	d107      	bne.n	1fa4e <_dtoa_r+0xafe>
   1fa3e:	f022 fe5d 	bl	426fc <__multadd>
   1fa42:	4680      	mov	r8, r0
   1fa44:	4607      	mov	r7, r0
   1fa46:	9b01      	ldr	r3, [sp, #4]
   1fa48:	3301      	adds	r3, #1
   1fa4a:	9301      	str	r3, [sp, #4]
   1fa4c:	e777      	b.n	1f93e <_dtoa_r+0x9ee>
   1fa4e:	f022 fe55 	bl	426fc <__multadd>
   1fa52:	4639      	mov	r1, r7
   1fa54:	4680      	mov	r8, r0
   1fa56:	2300      	movs	r3, #0
   1fa58:	220a      	movs	r2, #10
   1fa5a:	4620      	mov	r0, r4
   1fa5c:	f022 fe4e 	bl	426fc <__multadd>
   1fa60:	4607      	mov	r7, r0
   1fa62:	e7f0      	b.n	1fa46 <_dtoa_r+0xaf6>
   1fa64:	f1bb 0f00 	cmp.w	fp, #0
   1fa68:	9a00      	ldr	r2, [sp, #0]
   1fa6a:	f04f 0800 	mov.w	r8, #0
   1fa6e:	bfcc      	ite	gt
   1fa70:	465d      	movgt	r5, fp
   1fa72:	2501      	movle	r5, #1
   1fa74:	4415      	add	r5, r2
   1fa76:	4651      	mov	r1, sl
   1fa78:	2201      	movs	r2, #1
   1fa7a:	4620      	mov	r0, r4
   1fa7c:	9301      	str	r3, [sp, #4]
   1fa7e:	f022 ffae 	bl	429de <__lshift>
   1fa82:	4631      	mov	r1, r6
   1fa84:	4682      	mov	sl, r0
   1fa86:	f023 f809 	bl	42a9c <__mcmp>
   1fa8a:	2800      	cmp	r0, #0
   1fa8c:	dcb2      	bgt.n	1f9f4 <_dtoa_r+0xaa4>
   1fa8e:	d102      	bne.n	1fa96 <_dtoa_r+0xb46>
   1fa90:	9b01      	ldr	r3, [sp, #4]
   1fa92:	07db      	lsls	r3, r3, #31
   1fa94:	d4ae      	bmi.n	1f9f4 <_dtoa_r+0xaa4>
   1fa96:	462b      	mov	r3, r5
   1fa98:	461d      	mov	r5, r3
   1fa9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1fa9e:	2a30      	cmp	r2, #48	; 0x30
   1faa0:	d0fa      	beq.n	1fa98 <_dtoa_r+0xb48>
   1faa2:	e6fe      	b.n	1f8a2 <_dtoa_r+0x952>
   1faa4:	9a00      	ldr	r2, [sp, #0]
   1faa6:	429a      	cmp	r2, r3
   1faa8:	d1a5      	bne.n	1f9f6 <_dtoa_r+0xaa6>
   1faaa:	2331      	movs	r3, #49	; 0x31
   1faac:	f109 0901 	add.w	r9, r9, #1
   1fab0:	7013      	strb	r3, [r2, #0]
   1fab2:	e6f6      	b.n	1f8a2 <_dtoa_r+0x952>
   1fab4:	4b12      	ldr	r3, [pc, #72]	; (1fb00 <_dtoa_r+0xbb0>)
   1fab6:	f7ff bab8 	b.w	1f02a <_dtoa_r+0xda>
   1faba:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1fabc:	2b00      	cmp	r3, #0
   1fabe:	f47f aa8e 	bne.w	1efde <_dtoa_r+0x8e>
   1fac2:	4b10      	ldr	r3, [pc, #64]	; (1fb04 <_dtoa_r+0xbb4>)
   1fac4:	f7ff bab1 	b.w	1f02a <_dtoa_r+0xda>
   1fac8:	f1bb 0f00 	cmp.w	fp, #0
   1facc:	dc03      	bgt.n	1fad6 <_dtoa_r+0xb86>
   1face:	9b05      	ldr	r3, [sp, #20]
   1fad0:	2b02      	cmp	r3, #2
   1fad2:	f73f aecf 	bgt.w	1f874 <_dtoa_r+0x924>
   1fad6:	9d00      	ldr	r5, [sp, #0]
   1fad8:	4631      	mov	r1, r6
   1fada:	4650      	mov	r0, sl
   1fadc:	f022 fb84 	bl	421e8 <quorem>
   1fae0:	9a00      	ldr	r2, [sp, #0]
   1fae2:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1fae6:	f805 3b01 	strb.w	r3, [r5], #1
   1faea:	1aaa      	subs	r2, r5, r2
   1faec:	4593      	cmp	fp, r2
   1faee:	ddb9      	ble.n	1fa64 <_dtoa_r+0xb14>
   1faf0:	4651      	mov	r1, sl
   1faf2:	2300      	movs	r3, #0
   1faf4:	220a      	movs	r2, #10
   1faf6:	4620      	mov	r0, r4
   1faf8:	f022 fe00 	bl	426fc <__multadd>
   1fafc:	4682      	mov	sl, r0
   1fafe:	e7eb      	b.n	1fad8 <_dtoa_r+0xb88>
   1fb00:	0004bcc7 	.word	0x0004bcc7
   1fb04:	0004c3de 	.word	0x0004c3de

0001fb08 <nan>:
   1fb08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1fb10 <nan+0x8>
   1fb0c:	4770      	bx	lr
   1fb0e:	bf00      	nop
   1fb10:	00000000 	.word	0x00000000
   1fb14:	7ff80000 	.word	0x7ff80000

0001fb18 <date_time_event_handler>:
}
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */

static void date_time_event_handler(const struct date_time_evt *evt)
{
	switch (evt->type) {
   1fb18:	7803      	ldrb	r3, [r0, #0]
   1fb1a:	2b03      	cmp	r3, #3
   1fb1c:	d822      	bhi.n	1fb64 <date_time_event_handler+0x4c>
   1fb1e:	e8df f003 	tbb	[pc, r3]
   1fb22:	0c02      	.short	0x0c02
   1fb24:	1a13      	.short	0x1a13
   1fb26:	4810      	ldr	r0, [pc, #64]	; (1fb68 <date_time_event_handler+0x50>)
   1fb28:	4b10      	ldr	r3, [pc, #64]	; (1fb6c <date_time_event_handler+0x54>)
	case DATE_TIME_OBTAINED_MODEM:
		LOG_INF("DATE_TIME_OBTAINED_MODEM");
   1fb2a:	4911      	ldr	r1, [pc, #68]	; (1fb70 <date_time_event_handler+0x58>)
   1fb2c:	1ac0      	subs	r0, r0, r3
   1fb2e:	08c0      	lsrs	r0, r0, #3
   1fb30:	0180      	lsls	r0, r0, #6
		break;
	case DATE_TIME_OBTAINED_EXT:
		LOG_INF("DATE_TIME_OBTAINED_EXT");
		break;
	case DATE_TIME_NOT_OBTAINED:
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   1fb32:	f040 0003 	orr.w	r0, r0, #3
   1fb36:	f01d bbe3 	b.w	3d300 <log_string_sync>
   1fb3a:	480b      	ldr	r0, [pc, #44]	; (1fb68 <date_time_event_handler+0x50>)
   1fb3c:	4b0b      	ldr	r3, [pc, #44]	; (1fb6c <date_time_event_handler+0x54>)
		LOG_INF("DATE_TIME_OBTAINED_NTP");
   1fb3e:	490d      	ldr	r1, [pc, #52]	; (1fb74 <date_time_event_handler+0x5c>)
   1fb40:	1ac0      	subs	r0, r0, r3
   1fb42:	08c0      	lsrs	r0, r0, #3
   1fb44:	0180      	lsls	r0, r0, #6
   1fb46:	e7f4      	b.n	1fb32 <date_time_event_handler+0x1a>
   1fb48:	4807      	ldr	r0, [pc, #28]	; (1fb68 <date_time_event_handler+0x50>)
   1fb4a:	4b08      	ldr	r3, [pc, #32]	; (1fb6c <date_time_event_handler+0x54>)
		LOG_INF("DATE_TIME_OBTAINED_EXT");
   1fb4c:	490a      	ldr	r1, [pc, #40]	; (1fb78 <date_time_event_handler+0x60>)
   1fb4e:	1ac0      	subs	r0, r0, r3
   1fb50:	08c0      	lsrs	r0, r0, #3
   1fb52:	0180      	lsls	r0, r0, #6
   1fb54:	e7ed      	b.n	1fb32 <date_time_event_handler+0x1a>
   1fb56:	4804      	ldr	r0, [pc, #16]	; (1fb68 <date_time_event_handler+0x50>)
   1fb58:	4b04      	ldr	r3, [pc, #16]	; (1fb6c <date_time_event_handler+0x54>)
		LOG_INF("DATE_TIME_NOT_OBTAINED");
   1fb5a:	4908      	ldr	r1, [pc, #32]	; (1fb7c <date_time_event_handler+0x64>)
   1fb5c:	1ac0      	subs	r0, r0, r3
   1fb5e:	08c0      	lsrs	r0, r0, #3
   1fb60:	0180      	lsls	r0, r0, #6
   1fb62:	e7e6      	b.n	1fb32 <date_time_event_handler+0x1a>
		break;
	default:
		break;
	}
}
   1fb64:	4770      	bx	lr
   1fb66:	bf00      	nop
   1fb68:	000433ac 	.word	0x000433ac
   1fb6c:	0004339c 	.word	0x0004339c
   1fb70:	00044219 	.word	0x00044219
   1fb74:	00044232 	.word	0x00044232
   1fb78:	00044249 	.word	0x00044249
   1fb7c:	00044260 	.word	0x00044260

0001fb80 <shutdown_modem>:
{
   1fb80:	b538      	push	{r3, r4, r5, lr}
   1fb82:	4b0e      	ldr	r3, [pc, #56]	; (1fbbc <shutdown_modem+0x3c>)
   1fb84:	4c0e      	ldr	r4, [pc, #56]	; (1fbc0 <shutdown_modem+0x40>)
	LOG_ERR("LTE link disconnect");
   1fb86:	490f      	ldr	r1, [pc, #60]	; (1fbc4 <shutdown_modem+0x44>)
   1fb88:	1ae4      	subs	r4, r4, r3
   1fb8a:	08e4      	lsrs	r4, r4, #3
   1fb8c:	01a4      	lsls	r4, r4, #6
   1fb8e:	f044 0501 	orr.w	r5, r4, #1
   1fb92:	4628      	mov	r0, r5
   1fb94:	f01d fbb4 	bl	3d300 <log_string_sync>
	int err = lte_lc_power_off();
   1fb98:	f00b fe92 	bl	2b8c0 <lte_lc_power_off>
	if (err) {
   1fb9c:	4602      	mov	r2, r0
   1fb9e:	b118      	cbz	r0, 1fba8 <shutdown_modem+0x28>
		LOG_ERR("lte_lc_power_off failed: %d", err);
   1fba0:	4628      	mov	r0, r5
   1fba2:	4909      	ldr	r1, [pc, #36]	; (1fbc8 <shutdown_modem+0x48>)
   1fba4:	f01d fbac 	bl	3d300 <log_string_sync>
	LOG_ERR("Shutdown modem");
   1fba8:	f044 0001 	orr.w	r0, r4, #1
   1fbac:	4907      	ldr	r1, [pc, #28]	; (1fbcc <shutdown_modem+0x4c>)
   1fbae:	f01d fba7 	bl	3d300 <log_string_sync>
}
   1fbb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	nrf_modem_lib_shutdown();
   1fbb6:	f01f bc9b 	b.w	3f4f0 <nrf_modem_lib_shutdown>
   1fbba:	bf00      	nop
   1fbbc:	0004339c 	.word	0x0004339c
   1fbc0:	000433ac 	.word	0x000433ac
   1fbc4:	00044277 	.word	0x00044277
   1fbc8:	0004428b 	.word	0x0004428b
   1fbcc:	000442a7 	.word	0x000442a7

0001fbd0 <cycle_cloud_connection>:
   1fbd0:	4b1b      	ldr	r3, [pc, #108]	; (1fc40 <cycle_cloud_connection+0x70>)
{
   1fbd2:	b570      	push	{r4, r5, r6, lr}
   1fbd4:	4c1b      	ldr	r4, [pc, #108]	; (1fc44 <cycle_cloud_connection+0x74>)
	LOG_INF("Disconnecting from cloud...");
   1fbd6:	491c      	ldr	r1, [pc, #112]	; (1fc48 <cycle_cloud_connection+0x78>)
   1fbd8:	1ae4      	subs	r4, r4, r3
   1fbda:	08e4      	lsrs	r4, r4, #3
   1fbdc:	01a4      	lsls	r4, r4, #6
   1fbde:	f044 0003 	orr.w	r0, r4, #3
   1fbe2:	f01d fb8d 	bl	3d300 <log_string_sync>
	if (cloud_disconnect(cloud_backend) != 0) {
   1fbe6:	4b19      	ldr	r3, [pc, #100]	; (1fc4c <cycle_cloud_connection+0x7c>)
   1fbe8:	6818      	ldr	r0, [r3, #0]
 *
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_disconnect(const struct cloud_backend *const backend)
{
	if (backend == NULL || backend->api == NULL ||
   1fbea:	b9e8      	cbnz	r0, 1fc28 <cycle_cloud_connection+0x58>
		LOG_INF("Disconnect failed. Device will reboot in %d seconds",
   1fbec:	4918      	ldr	r1, [pc, #96]	; (1fc50 <cycle_cloud_connection+0x80>)
   1fbee:	2205      	movs	r2, #5
   1fbf0:	f044 0003 	orr.w	r0, r4, #3
   1fbf4:	f01d fb84 	bl	3d300 <log_string_sync>
		reboot_wait_ms = 5 * MSEC_PER_SEC;
   1fbf8:	f241 3188 	movw	r1, #5000	; 0x1388
   1fbfc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1fc00:	f240 34e7 	movw	r4, #999	; 0x3e7
   1fc04:	2500      	movs	r5, #0
   1fc06:	fbc0 4501 	smlal	r4, r5, r0, r1
   1fc0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fc0e:	2300      	movs	r3, #0
   1fc10:	4620      	mov	r0, r4
   1fc12:	4629      	mov	r1, r5
   1fc14:	f7fd f952 	bl	1cebc <__aeabi_uldivmod>
}
   1fc18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fc1c:	4602      	mov	r2, r0
   1fc1e:	460b      	mov	r3, r1
	k_delayed_work_submit_to_queue(&application_work_q, &cloud_reboot_work,
   1fc20:	480c      	ldr	r0, [pc, #48]	; (1fc54 <cycle_cloud_connection+0x84>)
   1fc22:	490d      	ldr	r1, [pc, #52]	; (1fc58 <cycle_cloud_connection+0x88>)
   1fc24:	f019 be12 	b.w	3984c <k_delayed_work_submit_to_queue>
   1fc28:	6803      	ldr	r3, [r0, #0]
   1fc2a:	2b00      	cmp	r3, #0
   1fc2c:	d0de      	beq.n	1fbec <cycle_cloud_connection+0x1c>
	    backend->api->disconnect == NULL) {
   1fc2e:	68db      	ldr	r3, [r3, #12]
	if (backend == NULL || backend->api == NULL ||
   1fc30:	2b00      	cmp	r3, #0
   1fc32:	d0db      	beq.n	1fbec <cycle_cloud_connection+0x1c>
		return -ENOTSUP;
	}

	return backend->api->disconnect(backend);
   1fc34:	4798      	blx	r3
	if (cloud_disconnect(cloud_backend) != 0) {
   1fc36:	2800      	cmp	r0, #0
   1fc38:	d1d8      	bne.n	1fbec <cycle_cloud_connection+0x1c>
	int32_t reboot_wait_ms = REBOOT_AFTER_DISCONNECT_WAIT_MS;
   1fc3a:	f643 2198 	movw	r1, #15000	; 0x3a98
   1fc3e:	e7dd      	b.n	1fbfc <cycle_cloud_connection+0x2c>
   1fc40:	0004339c 	.word	0x0004339c
   1fc44:	000433ac 	.word	0x000433ac
   1fc48:	000442b6 	.word	0x000442b6
   1fc4c:	20018bfc 	.word	0x20018bfc
   1fc50:	000442d2 	.word	0x000442d2
   1fc54:	20015c08 	.word	0x20015c08
   1fc58:	20015d28 	.word	0x20015d28

0001fc5c <data_send_enabled>:
{
   1fc5c:	b508      	push	{r3, lr}
	return (atomic_get(&cloud_association) ==
   1fc5e:	4803      	ldr	r0, [pc, #12]	; (1fc6c <data_send_enabled+0x10>)
   1fc60:	f01c fff2 	bl	3cc48 <atomic_get>
}
   1fc64:	1f03      	subs	r3, r0, #4
   1fc66:	4258      	negs	r0, r3
   1fc68:	4158      	adcs	r0, r3
   1fc6a:	bd08      	pop	{r3, pc}
   1fc6c:	20018bf8 	.word	0x20018bf8

0001fc70 <set_gps_enable>:
{
   1fc70:	b570      	push	{r4, r5, r6, lr}
   1fc72:	4604      	mov	r4, r0
	bool changing = (enable != gps_control_is_enabled());
   1fc74:	f002 fa50 	bl	22118 <gps_control_is_enabled>
   1fc78:	4605      	mov	r5, r0
	if (!data_send_enabled() ||
   1fc7a:	f7ff ffef 	bl	1fc5c <data_send_enabled>
   1fc7e:	2800      	cmp	r0, #0
   1fc80:	d039      	beq.n	1fcf6 <set_gps_enable+0x86>
	    ((cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS) !=
   1fc82:	2000      	movs	r0, #0
   1fc84:	f002 f8e6 	bl	21e54 <cloud_get_channel_enable_state>
	if (!data_send_enabled() ||
   1fc88:	3001      	adds	r0, #1
   1fc8a:	d001      	beq.n	1fc90 <set_gps_enable+0x20>
	    CLOUD_CMD_STATE_UNDEFINED) && !changing)) {
   1fc8c:	42a5      	cmp	r5, r4
   1fc8e:	d032      	beq.n	1fcf6 <set_gps_enable+0x86>
	cloud_set_channel_enable_state(CLOUD_CHANNEL_GPS,
   1fc90:	2000      	movs	r0, #0
   1fc92:	b261      	sxtb	r1, r4
   1fc94:	f002 f980 	bl	21f98 <cloud_set_channel_enable_state>
	if (changing) {
   1fc98:	42a5      	cmp	r5, r4
   1fc9a:	d00a      	beq.n	1fcb2 <set_gps_enable+0x42>
		if (enable) {
   1fc9c:	4816      	ldr	r0, [pc, #88]	; (1fcf8 <set_gps_enable+0x88>)
   1fc9e:	4b17      	ldr	r3, [pc, #92]	; (1fcfc <set_gps_enable+0x8c>)
   1fca0:	1a1b      	subs	r3, r3, r0
   1fca2:	08db      	lsrs	r3, r3, #3
   1fca4:	0198      	lsls	r0, r3, #6
   1fca6:	b134      	cbz	r4, 1fcb6 <set_gps_enable+0x46>
			LOG_INF("Starting GPS");
   1fca8:	4915      	ldr	r1, [pc, #84]	; (1fd00 <set_gps_enable+0x90>)
   1fcaa:	f040 0003 	orr.w	r0, r0, #3
   1fcae:	f01d fb27 	bl	3d300 <log_string_sync>
	int32_t delay_ms = 0;
   1fcb2:	2100      	movs	r1, #0
   1fcb4:	e009      	b.n	1fcca <set_gps_enable+0x5a>
			LOG_INF("Stopping GPS");
   1fcb6:	4913      	ldr	r1, [pc, #76]	; (1fd04 <set_gps_enable+0x94>)
   1fcb8:	f040 0003 	orr.w	r0, r0, #3
   1fcbc:	f01d fb20 	bl	3d300 <log_string_sync>
			gps_control_stop(0);
   1fcc0:	4620      	mov	r0, r4
   1fcc2:	f002 fb39 	bl	22338 <gps_control_stop>
			delay_ms = 5 * MSEC_PER_SEC;
   1fcc6:	f241 3188 	movw	r1, #5000	; 0x1388
   1fcca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1fcce:	f240 34e7 	movw	r4, #999	; 0x3e7
   1fcd2:	2500      	movs	r5, #0
   1fcd4:	fbc0 4501 	smlal	r4, r5, r0, r1
   1fcd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fcdc:	2300      	movs	r3, #0
   1fcde:	4620      	mov	r0, r4
   1fce0:	4629      	mov	r1, r5
   1fce2:	f7fd f8eb 	bl	1cebc <__aeabi_uldivmod>
}
   1fce6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1fcea:	4602      	mov	r2, r0
   1fcec:	460b      	mov	r3, r1
	k_delayed_work_submit_to_queue(&application_work_q,
   1fcee:	4806      	ldr	r0, [pc, #24]	; (1fd08 <set_gps_enable+0x98>)
   1fcf0:	4906      	ldr	r1, [pc, #24]	; (1fd0c <set_gps_enable+0x9c>)
   1fcf2:	f019 bdab 	b.w	3984c <k_delayed_work_submit_to_queue>
}
   1fcf6:	bd70      	pop	{r4, r5, r6, pc}
   1fcf8:	0004339c 	.word	0x0004339c
   1fcfc:	000433ac 	.word	0x000433ac
   1fd00:	00044306 	.word	0x00044306
   1fd04:	0004b44b 	.word	0x0004b44b
   1fd08:	20015c08 	.word	0x20015c08
   1fd0c:	20015d88 	.word	0x20015d88

0001fd10 <sensor_data_send>:
{
   1fd10:	b530      	push	{r4, r5, lr}
   1fd12:	b087      	sub	sp, #28
   1fd14:	4604      	mov	r4, r0
	struct cloud_msg msg = {
   1fd16:	2218      	movs	r2, #24
   1fd18:	2100      	movs	r1, #0
   1fd1a:	4668      	mov	r0, sp
   1fd1c:	f021 ffdf 	bl	41cde <memset>
	if (!data_send_enabled() || gps_control_is_active()) {
   1fd20:	f7ff ff9c 	bl	1fc5c <data_send_enabled>
   1fd24:	b198      	cbz	r0, 1fd4e <sensor_data_send+0x3e>
   1fd26:	f002 fa01 	bl	2212c <gps_control_is_active>
   1fd2a:	b980      	cbnz	r0, 1fd4e <sensor_data_send+0x3e>
	err = cloud_encode_data(data, CLOUD_CMD_GROUP_DATA, &msg);
   1fd2c:	466a      	mov	r2, sp
   1fd2e:	2106      	movs	r1, #6
   1fd30:	4620      	mov	r0, r4
   1fd32:	f001 fcf3 	bl	2171c <cloud_encode_data>
	if (err) {
   1fd36:	b160      	cbz	r0, 1fd52 <sensor_data_send+0x42>
   1fd38:	4a12      	ldr	r2, [pc, #72]	; (1fd84 <sensor_data_send+0x74>)
   1fd3a:	4b13      	ldr	r3, [pc, #76]	; (1fd88 <sensor_data_send+0x78>)
		LOG_ERR("Unable to encode cloud data: %d", err);
   1fd3c:	4913      	ldr	r1, [pc, #76]	; (1fd8c <sensor_data_send+0x7c>)
   1fd3e:	1a9b      	subs	r3, r3, r2
   1fd40:	08db      	lsrs	r3, r3, #3
   1fd42:	019b      	lsls	r3, r3, #6
   1fd44:	4602      	mov	r2, r0
   1fd46:	f043 0001 	orr.w	r0, r3, #1
   1fd4a:	f01d fad9 	bl	3d300 <log_string_sync>
}
   1fd4e:	b007      	add	sp, #28
   1fd50:	bd30      	pop	{r4, r5, pc}
		err = cloud_send(cloud_backend, &msg);
   1fd52:	4b0f      	ldr	r3, [pc, #60]	; (1fd90 <sensor_data_send+0x80>)
   1fd54:	4669      	mov	r1, sp
   1fd56:	6818      	ldr	r0, [r3, #0]
   1fd58:	f01c ff65 	bl	3cc26 <cloud_send>
   1fd5c:	4605      	mov	r5, r0
 *
 * @return 0 if the operation was successful, otherwise a (negative) error code.
 */
static inline void cloud_release_data(struct cloud_msg *data)
{
	k_free(data->buf);
   1fd5e:	9800      	ldr	r0, [sp, #0]
   1fd60:	f021 ff5a 	bl	41c18 <k_free>
		if (err) {
   1fd64:	2d00      	cmp	r5, #0
   1fd66:	d0f2      	beq.n	1fd4e <sensor_data_send+0x3e>
   1fd68:	4806      	ldr	r0, [pc, #24]	; (1fd84 <sensor_data_send+0x74>)
   1fd6a:	4c07      	ldr	r4, [pc, #28]	; (1fd88 <sensor_data_send+0x78>)
			LOG_ERR("%s failed, data was not sent: %d", __func__,
   1fd6c:	462b      	mov	r3, r5
   1fd6e:	1a24      	subs	r4, r4, r0
   1fd70:	08e4      	lsrs	r4, r4, #3
   1fd72:	01a4      	lsls	r4, r4, #6
   1fd74:	4a07      	ldr	r2, [pc, #28]	; (1fd94 <sensor_data_send+0x84>)
   1fd76:	4908      	ldr	r1, [pc, #32]	; (1fd98 <sensor_data_send+0x88>)
   1fd78:	f044 0001 	orr.w	r0, r4, #1
   1fd7c:	f01d fac0 	bl	3d300 <log_string_sync>
   1fd80:	e7e5      	b.n	1fd4e <sensor_data_send+0x3e>
   1fd82:	bf00      	nop
   1fd84:	0004339c 	.word	0x0004339c
   1fd88:	000433ac 	.word	0x000433ac
   1fd8c:	00044313 	.word	0x00044313
   1fd90:	20018bfc 	.word	0x20018bfc
   1fd94:	00044f47 	.word	0x00044f47
   1fd98:	00044333 	.word	0x00044333

0001fd9c <modem_rsrp_data_send>:
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1fd9c:	2100      	movs	r1, #0
{
   1fd9e:	b530      	push	{r4, r5, lr}
   1fda0:	b0a1      	sub	sp, #132	; 0x84
	char buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   1fda2:	227c      	movs	r2, #124	; 0x7c
   1fda4:	a801      	add	r0, sp, #4
   1fda6:	9100      	str	r1, [sp, #0]
   1fda8:	f021 ff99 	bl	41cde <memset>
	if (!data_send_enabled()) {
   1fdac:	f7ff ff56 	bl	1fc5c <data_send_enabled>
   1fdb0:	b308      	cbz	r0, 1fdf6 <modem_rsrp_data_send+0x5a>
	rsrp_current = rsrp.value - rsrp.offset;
   1fdb2:	4b12      	ldr	r3, [pc, #72]	; (1fdfc <modem_rsrp_data_send+0x60>)
	if (rsrp_current == rsrp_prev) {
   1fdb4:	4d12      	ldr	r5, [pc, #72]	; (1fe00 <modem_rsrp_data_send+0x64>)
	rsrp_current = rsrp.value - rsrp.offset;
   1fdb6:	881c      	ldrh	r4, [r3, #0]
   1fdb8:	885b      	ldrh	r3, [r3, #2]
	if (rsrp_current == rsrp_prev) {
   1fdba:	682a      	ldr	r2, [r5, #0]
	rsrp_current = rsrp.value - rsrp.offset;
   1fdbc:	1ae4      	subs	r4, r4, r3
	if (rsrp_current == rsrp_prev) {
   1fdbe:	42a2      	cmp	r2, r4
   1fdc0:	d019      	beq.n	1fdf6 <modem_rsrp_data_send+0x5a>
	len = snprintf(buf, CONFIG_MODEM_INFO_BUFFER_SIZE,
   1fdc2:	2180      	movs	r1, #128	; 0x80
   1fdc4:	4623      	mov	r3, r4
   1fdc6:	4a0f      	ldr	r2, [pc, #60]	; (1fe04 <modem_rsrp_data_send+0x68>)
   1fdc8:	4668      	mov	r0, sp
   1fdca:	f01b fbaf 	bl	3b52c <sniprintf>
	signal_strength_cloud_data.data.buf = buf;
   1fdce:	4b0e      	ldr	r3, [pc, #56]	; (1fe08 <modem_rsrp_data_send+0x6c>)
	signal_strength_cloud_data.tag += 1;
   1fdd0:	68da      	ldr	r2, [r3, #12]
	signal_strength_cloud_data.data.len = len;
   1fdd2:	6098      	str	r0, [r3, #8]
	if (signal_strength_cloud_data.tag == 0) {
   1fdd4:	3201      	adds	r2, #1
		signal_strength_cloud_data.tag = 0x1;
   1fdd6:	bf08      	it	eq
   1fdd8:	2201      	moveq	r2, #1
	sensor_data_send(&signal_strength_cloud_data);
   1fdda:	480b      	ldr	r0, [pc, #44]	; (1fe08 <modem_rsrp_data_send+0x6c>)
		signal_strength_cloud_data.tag = 0x1;
   1fddc:	60da      	str	r2, [r3, #12]
	signal_strength_cloud_data.data.buf = buf;
   1fdde:	f8c3 d004 	str.w	sp, [r3, #4]
	sensor_data_send(&signal_strength_cloud_data);
   1fde2:	f7ff ff95 	bl	1fd10 <sensor_data_send>
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   1fde6:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
   1fdea:	2300      	movs	r3, #0
   1fdec:	4907      	ldr	r1, [pc, #28]	; (1fe0c <modem_rsrp_data_send+0x70>)
   1fdee:	4808      	ldr	r0, [pc, #32]	; (1fe10 <modem_rsrp_data_send+0x74>)
	rsrp_prev = rsrp_current;
   1fdf0:	602c      	str	r4, [r5, #0]
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   1fdf2:	f019 fd2b 	bl	3984c <k_delayed_work_submit_to_queue>
}
   1fdf6:	b021      	add	sp, #132	; 0x84
   1fdf8:	bd30      	pop	{r4, r5, pc}
   1fdfa:	bf00      	nop
   1fdfc:	2001580c 	.word	0x2001580c
   1fe00:	20018c28 	.word	0x20018c28
   1fe04:	00048e4c 	.word	0x00048e4c
   1fe08:	20016768 	.word	0x20016768
   1fe0c:	20016708 	.word	0x20016708
   1fe10:	20015c08 	.word	0x20015c08

0001fe14 <send_gps_data_work_fn>:
	sensor_data_send(&gps_cloud_data);
   1fe14:	4801      	ldr	r0, [pc, #4]	; (1fe1c <send_gps_data_work_fn+0x8>)
   1fe16:	f7ff bf7b 	b.w	1fd10 <sensor_data_send>
   1fe1a:	bf00      	nop
   1fe1c:	20014500 	.word	0x20014500

0001fe20 <send_agps_request>:
{
   1fe20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe24:	4b1d      	ldr	r3, [pc, #116]	; (1fe9c <send_agps_request+0x7c>)
   1fe26:	4c1e      	ldr	r4, [pc, #120]	; (1fea0 <send_agps_request+0x80>)
	if ((last_request_timestamp != 0) &&
   1fe28:	4d1e      	ldr	r5, [pc, #120]	; (1fea4 <send_agps_request+0x84>)
   1fe2a:	1ae4      	subs	r4, r4, r3
   1fe2c:	08e4      	lsrs	r4, r4, #3
   1fe2e:	e9d5 2300 	ldrd	r2, r3, [r5]
   1fe32:	4313      	orrs	r3, r2
   1fe34:	46a8      	mov	r8, r5
   1fe36:	ea4f 1484 	mov.w	r4, r4, lsl #6
   1fe3a:	d014      	beq.n	1fe66 <send_agps_request+0x46>
	    (k_uptime_get() - last_request_timestamp) < AGPS_UPDATE_PERIOD) {
   1fe3c:	f01c ff07 	bl	3cc4e <k_uptime_get>
   1fe40:	e9d5 3200 	ldrd	r3, r2, [r5]
   1fe44:	1ac6      	subs	r6, r0, r3
	if ((last_request_timestamp != 0) &&
   1fe46:	f04f 0300 	mov.w	r3, #0
	    (k_uptime_get() - last_request_timestamp) < AGPS_UPDATE_PERIOD) {
   1fe4a:	eb61 0702 	sbc.w	r7, r1, r2
	if ((last_request_timestamp != 0) &&
   1fe4e:	4a16      	ldr	r2, [pc, #88]	; (1fea8 <send_agps_request+0x88>)
   1fe50:	4296      	cmp	r6, r2
   1fe52:	eb77 0303 	sbcs.w	r3, r7, r3
   1fe56:	da06      	bge.n	1fe66 <send_agps_request+0x46>
		LOG_WRN("A-GPS request was sent less than 1 hour ago");
   1fe58:	4914      	ldr	r1, [pc, #80]	; (1feac <send_agps_request+0x8c>)
   1fe5a:	f044 0002 	orr.w	r0, r4, #2
}
   1fe5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	LOG_INF("A-GPS request sent");
   1fe62:	f01d ba4d 	b.w	3d300 <log_string_sync>
	LOG_INF("Sending A-GPS request");
   1fe66:	f044 0503 	orr.w	r5, r4, #3
   1fe6a:	4628      	mov	r0, r5
   1fe6c:	4910      	ldr	r1, [pc, #64]	; (1feb0 <send_agps_request+0x90>)
   1fe6e:	f01d fa47 	bl	3d300 <log_string_sync>
	err = gps_agps_request(agps_request, GPS_SOCKET_NOT_PROVIDED);
   1fe72:	4a10      	ldr	r2, [pc, #64]	; (1feb4 <send_agps_request+0x94>)
   1fe74:	2300      	movs	r3, #0
   1fe76:	ca07      	ldmia	r2, {r0, r1, r2}
   1fe78:	f006 fa7e 	bl	26378 <gps_agps_request>
	if (err) {
   1fe7c:	4602      	mov	r2, r0
   1fe7e:	b130      	cbz	r0, 1fe8e <send_agps_request+0x6e>
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   1fe80:	f044 0001 	orr.w	r0, r4, #1
   1fe84:	490c      	ldr	r1, [pc, #48]	; (1feb8 <send_agps_request+0x98>)
}
   1fe86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		LOG_ERR("Failed to request A-GPS data, error: %d", err);
   1fe8a:	f01d ba39 	b.w	3d300 <log_string_sync>
	last_request_timestamp = k_uptime_get();
   1fe8e:	f01c fede 	bl	3cc4e <k_uptime_get>
   1fe92:	e9c8 0100 	strd	r0, r1, [r8]
	LOG_INF("A-GPS request sent");
   1fe96:	4628      	mov	r0, r5
   1fe98:	4908      	ldr	r1, [pc, #32]	; (1febc <send_agps_request+0x9c>)
   1fe9a:	e7e0      	b.n	1fe5e <send_agps_request+0x3e>
   1fe9c:	0004339c 	.word	0x0004339c
   1fea0:	000433ac 	.word	0x000433ac
   1fea4:	20015de8 	.word	0x20015de8
   1fea8:	0036ee80 	.word	0x0036ee80
   1feac:	00044354 	.word	0x00044354
   1feb0:	00044380 	.word	0x00044380
   1feb4:	20018be8 	.word	0x20018be8
   1feb8:	00044396 	.word	0x00044396
   1febc:	000443be 	.word	0x000443be

0001fec0 <no_sim_go_offline>:
{
   1fec0:	b510      	push	{r4, lr}
	lte_lc_offline();
   1fec2:	f00b fcef 	bl	2b8a4 <lte_lc_offline>
	return z_impl_k_sleep(timeout);
   1fec6:	2100      	movs	r1, #0
   1fec8:	f640 40cd 	movw	r0, #3277	; 0xccd
   1fecc:	f019 f9b4 	bl	39238 <z_impl_k_sleep>
   1fed0:	4c0a      	ldr	r4, [pc, #40]	; (1fefc <no_sim_go_offline+0x3c>)
   1fed2:	4b0b      	ldr	r3, [pc, #44]	; (1ff00 <no_sim_go_offline+0x40>)
	LOG_INF("No SIM card detected.");
   1fed4:	490b      	ldr	r1, [pc, #44]	; (1ff04 <no_sim_go_offline+0x44>)
   1fed6:	1ae4      	subs	r4, r4, r3
   1fed8:	08e4      	lsrs	r4, r4, #3
   1feda:	01a4      	lsls	r4, r4, #6
   1fedc:	f044 0403 	orr.w	r4, r4, #3
   1fee0:	4620      	mov	r0, r4
   1fee2:	f01d fa0d 	bl	3d300 <log_string_sync>
	LOG_INF("Insert SIM and reset device to run the asset tracker.");
   1fee6:	4620      	mov	r0, r4
   1fee8:	4907      	ldr	r1, [pc, #28]	; (1ff08 <no_sim_go_offline+0x48>)
   1feea:	f01d fa09 	bl	3d300 <log_string_sync>
}
   1feee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ui_led_set_pattern(UI_LED_ERROR_LTE_LC);
   1fef2:	f44f 7040 	mov.w	r0, #768	; 0x300
   1fef6:	f001 ba9b 	b.w	21430 <ui_led_set_pattern>
   1fefa:	bf00      	nop
   1fefc:	000433ac 	.word	0x000433ac
   1ff00:	0004339c 	.word	0x0004339c
   1ff04:	000443d1 	.word	0x000443d1
   1ff08:	000443e7 	.word	0x000443e7

0001ff0c <long_press_handler>:
{
   1ff0c:	b508      	push	{r3, lr}
	if (!data_send_enabled()) {
   1ff0e:	f7ff fea5 	bl	1fc5c <data_send_enabled>
   1ff12:	b958      	cbnz	r0, 1ff2c <long_press_handler+0x20>
   1ff14:	4b0a      	ldr	r3, [pc, #40]	; (1ff40 <long_press_handler+0x34>)
   1ff16:	480b      	ldr	r0, [pc, #44]	; (1ff44 <long_press_handler+0x38>)
		LOG_INF("Link not ready, long press disregarded");
   1ff18:	490b      	ldr	r1, [pc, #44]	; (1ff48 <long_press_handler+0x3c>)
   1ff1a:	1ac0      	subs	r0, r0, r3
   1ff1c:	08c0      	lsrs	r0, r0, #3
   1ff1e:	0180      	lsls	r0, r0, #6
   1ff20:	f040 0003 	orr.w	r0, r0, #3
}
   1ff24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_INF("Link not ready, long press disregarded");
   1ff28:	f01d b9ea 	b.w	3d300 <log_string_sync>
	set_gps_enable(!gps_control_is_enabled());
   1ff2c:	f002 f8f4 	bl	22118 <gps_control_is_enabled>
}
   1ff30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_gps_enable(!gps_control_is_enabled());
   1ff34:	f080 0001 	eor.w	r0, r0, #1
   1ff38:	b2c0      	uxtb	r0, r0
   1ff3a:	f7ff be99 	b.w	1fc70 <set_gps_enable>
   1ff3e:	bf00      	nop
   1ff40:	0004339c 	.word	0x0004339c
   1ff44:	000433ac 	.word	0x000433ac
   1ff48:	0004441d 	.word	0x0004441d

0001ff4c <ui_evt_handler>:
{
   1ff4c:	b507      	push	{r0, r1, r2, lr}
   1ff4e:	ab02      	add	r3, sp, #8
   1ff50:	e903 0003 	stmdb	r3, {r0, r1}
   1ff54:	9b01      	ldr	r3, [sp, #4]
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   1ff56:	2b03      	cmp	r3, #3
   1ff58:	d107      	bne.n	1ff6a <ui_evt_handler+0x1e>
	    data_send_enabled()) {
   1ff5a:	f7ff fe7f 	bl	1fc5c <data_send_enabled>
	if (IS_ENABLED(CONFIG_ACCEL_USE_SIM) && (evt.button == FLIP_INPUT) &&
   1ff5e:	b1c8      	cbz	r0, 1ff94 <ui_evt_handler+0x48>
}
   1ff60:	b003      	add	sp, #12
   1ff62:	f85d eb04 	ldr.w	lr, [sp], #4
		motion_simulate_trigger();
   1ff66:	f01c be92 	b.w	3cc8e <motion_simulate_trigger>
	if (IS_ENABLED(CONFIG_GPS_CONTROL_ON_LONG_PRESS) &&
   1ff6a:	2b01      	cmp	r3, #1
   1ff6c:	d112      	bne.n	1ff94 <ui_evt_handler+0x48>
		if (evt.type == UI_EVT_BUTTON_ACTIVE) {
   1ff6e:	f89d 3000 	ldrb.w	r3, [sp]
   1ff72:	b94b      	cbnz	r3, 1ff88 <ui_evt_handler+0x3c>
			k_delayed_work_submit_to_queue(&application_work_q,
   1ff74:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1ff78:	2300      	movs	r3, #0
   1ff7a:	4908      	ldr	r1, [pc, #32]	; (1ff9c <ui_evt_handler+0x50>)
   1ff7c:	4808      	ldr	r0, [pc, #32]	; (1ffa0 <ui_evt_handler+0x54>)
}
   1ff7e:	b003      	add	sp, #12
   1ff80:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_submit_to_queue(&application_work_q,
   1ff84:	f019 bc62 	b.w	3984c <k_delayed_work_submit_to_queue>
			k_delayed_work_cancel(&long_press_button_work);
   1ff88:	4804      	ldr	r0, [pc, #16]	; (1ff9c <ui_evt_handler+0x50>)
}
   1ff8a:	b003      	add	sp, #12
   1ff8c:	f85d eb04 	ldr.w	lr, [sp], #4
			k_delayed_work_cancel(&long_press_button_work);
   1ff90:	f019 bce6 	b.w	39960 <k_delayed_work_cancel>
}
   1ff94:	b003      	add	sp, #12
   1ff96:	f85d fb04 	ldr.w	pc, [sp], #4
   1ff9a:	bf00      	nop
   1ff9c:	20015df0 	.word	0x20015df0
   1ffa0:	20015c08 	.word	0x20015c08

0001ffa4 <modem_rsrp_handler>:
	if (rsrp_value > 97) {
   1ffa4:	2861      	cmp	r0, #97	; 0x61
{
   1ffa6:	b510      	push	{r4, lr}
	if (rsrp_value > 97) {
   1ffa8:	d814      	bhi.n	1ffd4 <modem_rsrp_handler+0x30>
	rsrp.value = rsrp_value;
   1ffaa:	4b0b      	ldr	r3, [pc, #44]	; (1ffd8 <modem_rsrp_handler+0x34>)
   1ffac:	8018      	strh	r0, [r3, #0]
 *
 * @return Remaining time (in milliseconds).
 */
static inline int32_t k_delayed_work_remaining_get(struct k_delayed_work *work)
{
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   1ffae:	480b      	ldr	r0, [pc, #44]	; (1ffdc <modem_rsrp_handler+0x38>)
   1ffb0:	f019 fee8 	bl	39d84 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ffb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ffb8:	fba0 0103 	umull	r0, r1, r0, r3
   1ffbc:	0bc3      	lsrs	r3, r0, #15
	if (CONFIG_HOLD_TIME_RSRP == 0 ||
   1ffbe:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   1ffc2:	d107      	bne.n	1ffd4 <modem_rsrp_handler+0x30>
}
   1ffc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q, &rsrp_work,
   1ffc8:	2200      	movs	r2, #0
   1ffca:	2300      	movs	r3, #0
   1ffcc:	4904      	ldr	r1, [pc, #16]	; (1ffe0 <modem_rsrp_handler+0x3c>)
   1ffce:	4805      	ldr	r0, [pc, #20]	; (1ffe4 <modem_rsrp_handler+0x40>)
   1ffd0:	f019 bc3c 	b.w	3984c <k_delayed_work_submit_to_queue>
}
   1ffd4:	bd10      	pop	{r4, pc}
   1ffd6:	bf00      	nop
   1ffd8:	2001580c 	.word	0x2001580c
   1ffdc:	20016718 	.word	0x20016718
   1ffe0:	20016708 	.word	0x20016708
   1ffe4:	20015c08 	.word	0x20015c08

0001ffe8 <k_work_submit_to_queue.constprop.0>:
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
   1ffe8:	4601      	mov	r1, r0
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ffea:	f100 0308 	add.w	r3, r0, #8
   1ffee:	e8d3 2fef 	ldaex	r2, [r3]
   1fff2:	f042 0001 	orr.w	r0, r2, #1
   1fff6:	e8c3 0fec 	stlex	ip, r0, [r3]
   1fffa:	f1bc 0f00 	cmp.w	ip, #0
   1fffe:	d1f6      	bne.n	1ffee <k_work_submit_to_queue.constprop.0+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   20000:	07d3      	lsls	r3, r2, #31
   20002:	d402      	bmi.n	2000a <k_work_submit_to_queue.constprop.0+0x22>
		k_queue_append(&work_q->queue, work);
   20004:	4801      	ldr	r0, [pc, #4]	; (2000c <k_work_submit_to_queue.constprop.0+0x24>)
   20006:	f021 bc98 	b.w	4193a <k_queue_append>
}
   2000a:	4770      	bx	lr
   2000c:	20015c08 	.word	0x20015c08

00020010 <lte_handler>:
{
   20010:	b510      	push	{r4, lr}
   20012:	7803      	ldrb	r3, [r0, #0]
   20014:	4604      	mov	r4, r0
   20016:	b094      	sub	sp, #80	; 0x50
   20018:	2b04      	cmp	r3, #4
   2001a:	d80a      	bhi.n	20032 <lte_handler+0x22>
   2001c:	e8df f003 	tbb	[pc, r3]
   20020:	4c2a1d03 	.word	0x4c2a1d03
   20024:	59          	.byte	0x59
   20025:	00          	.byte	0x00
		if (evt->nw_reg_status == LTE_LC_NW_REG_UICC_FAIL) {
   20026:	7903      	ldrb	r3, [r0, #4]
   20028:	2b5a      	cmp	r3, #90	; 0x5a
   2002a:	d104      	bne.n	20036 <lte_handler+0x26>
			k_work_submit_to_queue(&application_work_q,
   2002c:	482d      	ldr	r0, [pc, #180]	; (200e4 <lte_handler+0xd4>)
   2002e:	f7ff ffdb 	bl	1ffe8 <k_work_submit_to_queue.constprop.0>
}
   20032:	b014      	add	sp, #80	; 0x50
   20034:	bd10      	pop	{r4, pc}
		} else if ((evt->nw_reg_status == LTE_LC_NW_REG_REGISTERED_HOME) ||
   20036:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
   2003a:	2a01      	cmp	r2, #1
   2003c:	d1f9      	bne.n	20032 <lte_handler+0x22>
   2003e:	4a2a      	ldr	r2, [pc, #168]	; (200e8 <lte_handler+0xd8>)
   20040:	482a      	ldr	r0, [pc, #168]	; (200ec <lte_handler+0xdc>)
			LOG_INF("Network registration status: %s",
   20042:	492b      	ldr	r1, [pc, #172]	; (200f0 <lte_handler+0xe0>)
   20044:	1a80      	subs	r0, r0, r2
   20046:	4a2b      	ldr	r2, [pc, #172]	; (200f4 <lte_handler+0xe4>)
   20048:	08c0      	lsrs	r0, r0, #3
   2004a:	2b01      	cmp	r3, #1
   2004c:	bf08      	it	eq
   2004e:	460a      	moveq	r2, r1
   20050:	4929      	ldr	r1, [pc, #164]	; (200f8 <lte_handler+0xe8>)
   20052:	0180      	lsls	r0, r0, #6
		LOG_INF("RRC mode: %s",
   20054:	f040 0003 	orr.w	r0, r0, #3
   20058:	e02b      	b.n	200b2 <lte_handler+0xa2>
   2005a:	4b23      	ldr	r3, [pc, #140]	; (200e8 <lte_handler+0xd8>)
   2005c:	4823      	ldr	r0, [pc, #140]	; (200ec <lte_handler+0xdc>)
		LOG_INF("PSM parameter update: TAU: %d, Active time: %d",
   2005e:	4927      	ldr	r1, [pc, #156]	; (200fc <lte_handler+0xec>)
   20060:	1ac0      	subs	r0, r0, r3
   20062:	08c0      	lsrs	r0, r0, #3
   20064:	0180      	lsls	r0, r0, #6
   20066:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   2006a:	f040 0003 	orr.w	r0, r0, #3
   2006e:	f01d f947 	bl	3d300 <log_string_sync>
}
   20072:	e7de      	b.n	20032 <lte_handler+0x22>
		len = snprintf(log_buf, sizeof(log_buf),
   20074:	6880      	ldr	r0, [r0, #8]
   20076:	f7fc fb47 	bl	1c708 <__aeabi_f2d>
   2007a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2007e:	6860      	ldr	r0, [r4, #4]
   20080:	f7fc fb42 	bl	1c708 <__aeabi_f2d>
   20084:	4a1e      	ldr	r2, [pc, #120]	; (20100 <lte_handler+0xf0>)
   20086:	e9cd 0100 	strd	r0, r1, [sp]
   2008a:	213c      	movs	r1, #60	; 0x3c
   2008c:	a805      	add	r0, sp, #20
   2008e:	f01b fa4d 	bl	3b52c <sniprintf>
		if ((len > 0) && (len < sizeof(log_buf))) {
   20092:	3801      	subs	r0, #1
   20094:	283a      	cmp	r0, #58	; 0x3a
   20096:	d8cc      	bhi.n	20032 <lte_handler+0x22>
   20098:	4b13      	ldr	r3, [pc, #76]	; (200e8 <lte_handler+0xd8>)
   2009a:	4c14      	ldr	r4, [pc, #80]	; (200ec <lte_handler+0xdc>)
			LOG_INF("%s", log_strdup(log_buf));
   2009c:	a805      	add	r0, sp, #20
   2009e:	1ae4      	subs	r4, r4, r3
   200a0:	f01d f941 	bl	3d326 <log_strdup>
   200a4:	08e4      	lsrs	r4, r4, #3
   200a6:	01a4      	lsls	r4, r4, #6
   200a8:	f044 0403 	orr.w	r4, r4, #3
   200ac:	4602      	mov	r2, r0
   200ae:	4620      	mov	r0, r4
   200b0:	4914      	ldr	r1, [pc, #80]	; (20104 <lte_handler+0xf4>)
		LOG_INF("RRC mode: %s",
   200b2:	f01d f925 	bl	3d300 <log_string_sync>
   200b6:	e7bc      	b.n	20032 <lte_handler+0x22>
   200b8:	4b0b      	ldr	r3, [pc, #44]	; (200e8 <lte_handler+0xd8>)
   200ba:	480c      	ldr	r0, [pc, #48]	; (200ec <lte_handler+0xdc>)
   200bc:	7921      	ldrb	r1, [r4, #4]
   200be:	1ac0      	subs	r0, r0, r3
   200c0:	4a11      	ldr	r2, [pc, #68]	; (20108 <lte_handler+0xf8>)
   200c2:	4b12      	ldr	r3, [pc, #72]	; (2010c <lte_handler+0xfc>)
   200c4:	08c0      	lsrs	r0, r0, #3
   200c6:	2901      	cmp	r1, #1
   200c8:	bf18      	it	ne
   200ca:	461a      	movne	r2, r3
   200cc:	0180      	lsls	r0, r0, #6
   200ce:	4910      	ldr	r1, [pc, #64]	; (20110 <lte_handler+0x100>)
   200d0:	e7c0      	b.n	20054 <lte_handler+0x44>
   200d2:	4b05      	ldr	r3, [pc, #20]	; (200e8 <lte_handler+0xd8>)
   200d4:	4805      	ldr	r0, [pc, #20]	; (200ec <lte_handler+0xdc>)
		LOG_INF("LTE cell changed: Cell ID: %d, Tracking area: %d",
   200d6:	490f      	ldr	r1, [pc, #60]	; (20114 <lte_handler+0x104>)
   200d8:	1ac0      	subs	r0, r0, r3
   200da:	08c0      	lsrs	r0, r0, #3
   200dc:	0180      	lsls	r0, r0, #6
   200de:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   200e2:	e7c2      	b.n	2006a <lte_handler+0x5a>
   200e4:	20018c1c 	.word	0x20018c1c
   200e8:	0004339c 	.word	0x0004339c
   200ec:	000433ac 	.word	0x000433ac
   200f0:	00044444 	.word	0x00044444
   200f4:	0004445d 	.word	0x0004445d
   200f8:	00044480 	.word	0x00044480
   200fc:	000444a0 	.word	0x000444a0
   20100:	000444cf 	.word	0x000444cf
   20104:	0004b3c7 	.word	0x0004b3c7
   20108:	00044471 	.word	0x00044471
   2010c:	0004447b 	.word	0x0004447b
   20110:	000444fe 	.word	0x000444fe
   20114:	0004450b 	.word	0x0004450b

00020118 <motion_handler>:
{
   20118:	b084      	sub	sp, #16
   2011a:	b430      	push	{r4, r5}
   2011c:	ac02      	add	r4, sp, #8
   2011e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (motion_data.orientation != last_motion_data.orientation) {
   20122:	4c0b      	ldr	r4, [pc, #44]	; (20150 <motion_handler+0x38>)
   20124:	f89d 2008 	ldrb.w	r2, [sp, #8]
   20128:	7823      	ldrb	r3, [r4, #0]
   2012a:	429a      	cmp	r2, r3
   2012c:	d00d      	beq.n	2014a <motion_handler+0x32>
		last_motion_data = motion_data;
   2012e:	ad02      	add	r5, sp, #8
   20130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20138:	e895 0003 	ldmia.w	r5, {r0, r1}
   2013c:	e884 0003 	stmia.w	r4, {r0, r1}
}
   20140:	bc30      	pop	{r4, r5}
		k_work_submit_to_queue(&application_work_q,
   20142:	4804      	ldr	r0, [pc, #16]	; (20154 <motion_handler+0x3c>)
}
   20144:	b004      	add	sp, #16
		k_work_submit_to_queue(&application_work_q,
   20146:	f7ff bf4f 	b.w	1ffe8 <k_work_submit_to_queue.constprop.0>
}
   2014a:	bc30      	pop	{r4, r5}
   2014c:	b004      	add	sp, #16
   2014e:	4770      	bx	lr
   20150:	20015dc0 	.word	0x20015dc0
   20154:	20018c10 	.word	0x20018c10

00020158 <gps_handler>:
{
   20158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2015c:	460c      	mov	r4, r1
   2015e:	b08a      	sub	sp, #40	; 0x28
	gps_last_active_time = k_uptime_get();
   20160:	f01c fd75 	bl	3cc4e <k_uptime_get>
	switch (evt->type) {
   20164:	7823      	ldrb	r3, [r4, #0]
   20166:	2b0a      	cmp	r3, #10
   20168:	d821      	bhi.n	201ae <gps_handler+0x56>
   2016a:	e8df f013 	tbh	[pc, r3, lsl #1]
   2016e:	000b      	.short	0x000b
   20170:	00340023 	.word	0x00340023
   20174:	004a0020 	.word	0x004a0020
   20178:	00700020 	.word	0x00700020
   2017c:	00c900be 	.word	0x00c900be
   20180:	00e900d0 	.word	0x00e900d0
   20184:	4b74      	ldr	r3, [pc, #464]	; (20358 <gps_handler+0x200>)
   20186:	4875      	ldr	r0, [pc, #468]	; (2035c <gps_handler+0x204>)
		LOG_INF("GPS_EVT_SEARCH_STARTED");
   20188:	4975      	ldr	r1, [pc, #468]	; (20360 <gps_handler+0x208>)
   2018a:	1ac0      	subs	r0, r0, r3
   2018c:	08c0      	lsrs	r0, r0, #3
   2018e:	0180      	lsls	r0, r0, #6
   20190:	f040 0003 	orr.w	r0, r0, #3
   20194:	f01d f8b4 	bl	3d300 <log_string_sync>
		gps_control_set_active(true);
   20198:	2001      	movs	r0, #1
   2019a:	f001 ffd1 	bl	22140 <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   2019e:	2008      	movs	r0, #8
   201a0:	f001 f946 	bl	21430 <ui_led_set_pattern>
		gps_last_search_start_time = k_uptime_get();
   201a4:	f01c fd53 	bl	3cc4e <k_uptime_get>
   201a8:	4b6e      	ldr	r3, [pc, #440]	; (20364 <gps_handler+0x20c>)
   201aa:	e9c3 0100 	strd	r0, r1, [r3]
}
   201ae:	b00a      	add	sp, #40	; 0x28
   201b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201b4:	4b68      	ldr	r3, [pc, #416]	; (20358 <gps_handler+0x200>)
   201b6:	4869      	ldr	r0, [pc, #420]	; (2035c <gps_handler+0x204>)
		LOG_INF("GPS_EVT_SEARCH_STOPPED");
   201b8:	496b      	ldr	r1, [pc, #428]	; (20368 <gps_handler+0x210>)
   201ba:	1ac0      	subs	r0, r0, r3
   201bc:	08c0      	lsrs	r0, r0, #3
   201be:	0180      	lsls	r0, r0, #6
   201c0:	f040 0003 	orr.w	r0, r0, #3
   201c4:	f01d f89c 	bl	3d300 <log_string_sync>
		gps_control_set_active(false);
   201c8:	2000      	movs	r0, #0
   201ca:	f001 ffb9 	bl	22140 <gps_control_set_active>
		ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   201ce:	2008      	movs	r0, #8
   201d0:	f001 f92e 	bl	21430 <ui_led_set_pattern>
		break;
   201d4:	e7eb      	b.n	201ae <gps_handler+0x56>
   201d6:	4b60      	ldr	r3, [pc, #384]	; (20358 <gps_handler+0x200>)
   201d8:	4c60      	ldr	r4, [pc, #384]	; (2035c <gps_handler+0x204>)
		LOG_INF("GPS_EVT_SEARCH_TIMEOUT");
   201da:	4964      	ldr	r1, [pc, #400]	; (2036c <gps_handler+0x214>)
   201dc:	1ae4      	subs	r4, r4, r3
   201de:	08e4      	lsrs	r4, r4, #3
   201e0:	01a4      	lsls	r4, r4, #6
   201e2:	f044 0403 	orr.w	r4, r4, #3
   201e6:	4620      	mov	r0, r4
   201e8:	f01d f88a 	bl	3d300 <log_string_sync>
		gps_control_set_active(false);
   201ec:	2000      	movs	r0, #0
   201ee:	f001 ffa7 	bl	22140 <gps_control_set_active>
		LOG_INF("GPS will be attempted again in %d seconds",
   201f2:	f002 f8bf 	bl	22374 <gps_control_get_gps_reporting_interval>
   201f6:	495e      	ldr	r1, [pc, #376]	; (20370 <gps_handler+0x218>)
   201f8:	4602      	mov	r2, r0
   201fa:	4620      	mov	r0, r4
   201fc:	f01d f880 	bl	3d300 <log_string_sync>
   20200:	e7d5      	b.n	201ae <gps_handler+0x56>
   20202:	4b55      	ldr	r3, [pc, #340]	; (20358 <gps_handler+0x200>)
   20204:	4855      	ldr	r0, [pc, #340]	; (2035c <gps_handler+0x204>)
		LOG_INF("GPS_EVT_PVT_FIX");
   20206:	495b      	ldr	r1, [pc, #364]	; (20374 <gps_handler+0x21c>)
   20208:	1ac0      	subs	r0, r0, r3
   2020a:	08c0      	lsrs	r0, r0, #3
   2020c:	0180      	lsls	r0, r0, #6
   2020e:	f040 0003 	orr.w	r0, r0, #3
   20212:	f01d f875 	bl	3d300 <log_string_sync>
	struct tm gps_time = {
   20216:	2300      	movs	r3, #0
   20218:	e9cd 3307 	strd	r3, r3, [sp, #28]
   2021c:	9309      	str	r3, [sp, #36]	; 0x24
		.tm_sec = gps_data->datetime.seconds,
   2021e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
	date_time_set(&gps_time);
   20222:	a801      	add	r0, sp, #4
		.tm_sec = gps_data->datetime.seconds,
   20224:	9301      	str	r3, [sp, #4]
		.tm_min = gps_data->datetime.minute,
   20226:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
   2022a:	9302      	str	r3, [sp, #8]
		.tm_hour = gps_data->datetime.hour,
   2022c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   20230:	9303      	str	r3, [sp, #12]
		.tm_mday = gps_data->datetime.day,
   20232:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   20236:	9304      	str	r3, [sp, #16]
		.tm_mon = gps_data->datetime.month - 1,
   20238:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
   2023c:	3b01      	subs	r3, #1
	struct tm gps_time = {
   2023e:	9305      	str	r3, [sp, #20]
		.tm_year = gps_data->datetime.year - 1900,
   20240:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
   20242:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
	struct tm gps_time = {
   20246:	9306      	str	r3, [sp, #24]
	date_time_set(&gps_time);
   20248:	f00c fc74 	bl	2cb34 <date_time_set>
}
   2024c:	e7af      	b.n	201ae <gps_handler+0x56>
   2024e:	4b42      	ldr	r3, [pc, #264]	; (20358 <gps_handler+0x200>)
   20250:	4d42      	ldr	r5, [pc, #264]	; (2035c <gps_handler+0x204>)
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   20252:	4e49      	ldr	r6, [pc, #292]	; (20378 <gps_handler+0x220>)
   20254:	1aed      	subs	r5, r5, r3
   20256:	08ed      	lsrs	r5, r5, #3
		LOG_INF("Position fix with NMEA data");
   20258:	01ad      	lsls	r5, r5, #6
   2025a:	f045 0003 	orr.w	r0, r5, #3
   2025e:	4947      	ldr	r1, [pc, #284]	; (2037c <gps_handler+0x224>)
   20260:	f01d f84e 	bl	3d300 <log_string_sync>
		memcpy(gps_data.buf, evt->nmea.buf, evt->nmea.len);
   20264:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
   20268:	f104 0108 	add.w	r1, r4, #8
   2026c:	2354      	movs	r3, #84	; 0x54
   2026e:	4630      	mov	r0, r6
   20270:	f021 fd22 	bl	41cb8 <__memcpy_chk>
		gps_data.len = evt->nmea.len;
   20274:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
		gps_cloud_data.data.buf = gps_data.buf;
   20278:	4c41      	ldr	r4, [pc, #260]	; (20380 <gps_handler+0x228>)
		gps_data.len = evt->nmea.len;
   2027a:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
		gps_cloud_data.data.len = gps_data.len;
   2027e:	e9c4 6301 	strd	r6, r3, [r4, #4]
		gps_cloud_data.ts = k_uptime_get();
   20282:	f01c fce4 	bl	3cc4e <k_uptime_get>
		gps_cloud_data.tag += 1;
   20286:	68e3      	ldr	r3, [r4, #12]
		gps_cloud_data.ts = k_uptime_get();
   20288:	e9c4 0104 	strd	r0, r1, [r4, #16]
		if (gps_cloud_data.tag == 0) {
   2028c:	3301      	adds	r3, #1
			gps_cloud_data.tag = 0x1;
   2028e:	bf08      	it	eq
   20290:	2301      	moveq	r3, #1
   20292:	60e3      	str	r3, [r4, #12]
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   20294:	f01c fcdb 	bl	3cc4e <k_uptime_get>
   20298:	4b32      	ldr	r3, [pc, #200]	; (20364 <gps_handler+0x20c>)
   2029a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2029e:	e9d3 4600 	ldrd	r4, r6, [r3]
   202a2:	1b00      	subs	r0, r0, r4
   202a4:	eb61 0106 	sbc.w	r1, r1, r6
   202a8:	2300      	movs	r3, #0
   202aa:	f7fc fdb7 	bl	1ce1c <__aeabi_ldivmod>
   202ae:	4607      	mov	r7, r0
		ui_led_set_pattern(UI_LED_GPS_FIX);
   202b0:	2008      	movs	r0, #8
		int64_t gps_time_from_start_to_fix_seconds = (k_uptime_get() -
   202b2:	4688      	mov	r8, r1
		ui_led_set_pattern(UI_LED_GPS_FIX);
   202b4:	f001 f8bc 	bl	21430 <ui_led_set_pattern>
		gps_control_set_active(false);
   202b8:	2000      	movs	r0, #0
   202ba:	f001 ff41 	bl	22140 <gps_control_set_active>
		LOG_INF("GPS will be started in %lld seconds",
   202be:	f002 f859 	bl	22374 <gps_control_get_gps_reporting_interval>
   202c2:	17c1      	asrs	r1, r0, #31
   202c4:	f510 72b4 	adds.w	r2, r0, #360	; 0x168
   202c8:	f141 0300 	adc.w	r3, r1, #0
   202cc:	f045 0603 	orr.w	r6, r5, #3
   202d0:	1bd2      	subs	r2, r2, r7
   202d2:	4630      	mov	r0, r6
   202d4:	492b      	ldr	r1, [pc, #172]	; (20384 <gps_handler+0x22c>)
   202d6:	eb63 0308 	sbc.w	r3, r3, r8
   202da:	f01d f811 	bl	3d300 <log_string_sync>
		k_work_submit_to_queue(&application_work_q,
   202de:	482a      	ldr	r0, [pc, #168]	; (20388 <gps_handler+0x230>)
   202e0:	f7ff fe82 	bl	1ffe8 <k_work_submit_to_queue.constprop.0>
		env_sensors_poll();
   202e4:	f002 f8e2 	bl	224ac <env_sensors_poll>
		break;
   202e8:	e761      	b.n	201ae <gps_handler+0x56>
   202ea:	481c      	ldr	r0, [pc, #112]	; (2035c <gps_handler+0x204>)
   202ec:	4b1a      	ldr	r3, [pc, #104]	; (20358 <gps_handler+0x200>)
		LOG_INF("GPS_EVT_OPERATION_BLOCKED");
   202ee:	4927      	ldr	r1, [pc, #156]	; (2038c <gps_handler+0x234>)
   202f0:	1ac0      	subs	r0, r0, r3
   202f2:	08c0      	lsrs	r0, r0, #3
   202f4:	0180      	lsls	r0, r0, #6
		LOG_INF("GPS_EVT_OPERATION_UNBLOCKED");
   202f6:	f040 0003 	orr.w	r0, r0, #3
   202fa:	f01d f801 	bl	3d300 <log_string_sync>
   202fe:	e766      	b.n	201ce <gps_handler+0x76>
   20300:	4816      	ldr	r0, [pc, #88]	; (2035c <gps_handler+0x204>)
   20302:	4b15      	ldr	r3, [pc, #84]	; (20358 <gps_handler+0x200>)
   20304:	4922      	ldr	r1, [pc, #136]	; (20390 <gps_handler+0x238>)
   20306:	1ac0      	subs	r0, r0, r3
   20308:	08c0      	lsrs	r0, r0, #3
   2030a:	0180      	lsls	r0, r0, #6
   2030c:	e7f3      	b.n	202f6 <gps_handler+0x19e>
   2030e:	4b12      	ldr	r3, [pc, #72]	; (20358 <gps_handler+0x200>)
   20310:	4812      	ldr	r0, [pc, #72]	; (2035c <gps_handler+0x204>)
		LOG_INF("GPS_EVT_AGPS_DATA_NEEDED");
   20312:	4920      	ldr	r1, [pc, #128]	; (20394 <gps_handler+0x23c>)
   20314:	1ac0      	subs	r0, r0, r3
   20316:	08c0      	lsrs	r0, r0, #3
   20318:	0180      	lsls	r0, r0, #6
   2031a:	f040 0003 	orr.w	r0, r0, #3
   2031e:	f01c ffef 	bl	3d300 <log_string_sync>
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   20322:	f854 0f08 	ldr.w	r0, [r4, #8]!
   20326:	4b1c      	ldr	r3, [pc, #112]	; (20398 <gps_handler+0x240>)
   20328:	6861      	ldr	r1, [r4, #4]
		k_delayed_work_submit_to_queue(&application_work_q,
   2032a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   2032e:	c303      	stmia	r3!, {r0, r1}
   20330:	68a0      	ldr	r0, [r4, #8]
		k_delayed_work_submit_to_queue(&application_work_q,
   20332:	491a      	ldr	r1, [pc, #104]	; (2039c <gps_handler+0x244>)
		memcpy(&agps_request, &evt->agps_request, sizeof(agps_request));
   20334:	6018      	str	r0, [r3, #0]
		k_delayed_work_submit_to_queue(&application_work_q,
   20336:	2300      	movs	r3, #0
   20338:	4819      	ldr	r0, [pc, #100]	; (203a0 <gps_handler+0x248>)
   2033a:	f019 fa87 	bl	3984c <k_delayed_work_submit_to_queue>
		break;
   2033e:	e736      	b.n	201ae <gps_handler+0x56>
   20340:	4b05      	ldr	r3, [pc, #20]	; (20358 <gps_handler+0x200>)
   20342:	4806      	ldr	r0, [pc, #24]	; (2035c <gps_handler+0x204>)
		LOG_INF("GPS_EVT_ERROR\n");
   20344:	4917      	ldr	r1, [pc, #92]	; (203a4 <gps_handler+0x24c>)
   20346:	1ac0      	subs	r0, r0, r3
   20348:	08c0      	lsrs	r0, r0, #3
   2034a:	0180      	lsls	r0, r0, #6
   2034c:	f040 0003 	orr.w	r0, r0, #3
   20350:	f01c ffd6 	bl	3d300 <log_string_sync>
   20354:	e72b      	b.n	201ae <gps_handler+0x56>
   20356:	bf00      	nop
   20358:	0004339c 	.word	0x0004339c
   2035c:	000433ac 	.word	0x000433ac
   20360:	0004453c 	.word	0x0004453c
   20364:	20015db8 	.word	0x20015db8
   20368:	00044553 	.word	0x00044553
   2036c:	0004456a 	.word	0x0004456a
   20370:	00044581 	.word	0x00044581
   20374:	000445ab 	.word	0x000445ab
   20378:	2001e0ee 	.word	0x2001e0ee
   2037c:	000445bb 	.word	0x000445bb
   20380:	20014500 	.word	0x20014500
   20384:	000445d7 	.word	0x000445d7
   20388:	20018c2c 	.word	0x20018c2c
   2038c:	000445fb 	.word	0x000445fb
   20390:	00044615 	.word	0x00044615
   20394:	00044631 	.word	0x00044631
   20398:	20018be8 	.word	0x20018be8
   2039c:	20016738 	.word	0x20016738
   203a0:	20015c08 	.word	0x20015c08
   203a4:	0004464a 	.word	0x0004464a

000203a8 <cloud_cmd_handler>:
{
   203a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if ((cmd->channel == CLOUD_CHANNEL_GPS) &&
   203aa:	8803      	ldrh	r3, [r0, #0]
   203ac:	2b08      	cmp	r3, #8
   203ae:	d10c      	bne.n	203ca <cloud_cmd_handler+0x22>
	    (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   203b0:	7883      	ldrb	r3, [r0, #2]
   203b2:	2b01      	cmp	r3, #1
   203b4:	d166      	bne.n	20484 <cloud_cmd_handler+0xdc>
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   203b6:	f990 0010 	ldrsb.w	r0, [r0, #16]
   203ba:	1e43      	subs	r3, r0, #1
   203bc:	4258      	negs	r0, r3
   203be:	4158      	adcs	r0, r3
}
   203c0:	b003      	add	sp, #12
   203c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		set_gps_enable(cmd->data.sv.state == CLOUD_CMD_STATE_TRUE);
   203c6:	f7ff bc53 	b.w	1fc70 <set_gps_enable>
	} else if ((cmd->channel == CLOUD_CHANNEL_MODEM) &&
   203ca:	f241 420a 	movw	r2, #5130	; 0x140a
   203ce:	4293      	cmp	r3, r2
   203d0:	d144      	bne.n	2045c <cloud_cmd_handler+0xb4>
		   (cmd->group == CLOUD_CMD_GROUP_COMMAND) &&
   203d2:	7883      	ldrb	r3, [r0, #2]
   203d4:	2b07      	cmp	r3, #7
   203d6:	d155      	bne.n	20484 <cloud_cmd_handler+0xdc>
		cloud_cmd_handle_modem_at_cmd(cmd->data.data_string);
   203d8:	6884      	ldr	r4, [r0, #8]
	if (!at_cmd) {
   203da:	2c00      	cmp	r4, #0
   203dc:	f000 8091 	beq.w	20502 <cloud_cmd_handler+0x15a>
	return z_impl_k_sem_take(sem, timeout);
   203e0:	f44f 7224 	mov.w	r2, #656	; 0x290
   203e4:	2300      	movs	r3, #0
   203e6:	4848      	ldr	r0, [pc, #288]	; (20508 <cloud_cmd_handler+0x160>)
   203e8:	f018 ffa8 	bl	3933c <z_impl_k_sem_take>
	if (k_sem_take(&modem_at_cmd_sem, K_MSEC(20)) != 0) {
   203ec:	4605      	mov	r5, r0
   203ee:	b178      	cbz	r0, 20410 <cloud_cmd_handler+0x68>
   203f0:	4b46      	ldr	r3, [pc, #280]	; (2050c <cloud_cmd_handler+0x164>)
   203f2:	4847      	ldr	r0, [pc, #284]	; (20510 <cloud_cmd_handler+0x168>)
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   203f4:	4a47      	ldr	r2, [pc, #284]	; (20514 <cloud_cmd_handler+0x16c>)
   203f6:	1ac0      	subs	r0, r0, r3
   203f8:	f240 3372 	movw	r3, #882	; 0x372
   203fc:	08c0      	lsrs	r0, r0, #3
   203fe:	4946      	ldr	r1, [pc, #280]	; (20518 <cloud_cmd_handler+0x170>)
   20400:	0180      	lsls	r0, r0, #6
   20402:	f040 0001 	orr.w	r0, r0, #1
}
   20406:	b003      	add	sp, #12
   20408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		LOG_ERR("[%s:%d] Modem AT cmd in progress.", __func__,
   2040c:	f01c bf78 	b.w	3d300 <log_string_sync>
	if (strnlen(at_cmd, max_cmd_len) == max_cmd_len) {
   20410:	f640 218d 	movw	r1, #2701	; 0xa8d
   20414:	4620      	mov	r0, r4
   20416:	f021 fe70 	bl	420fa <strnlen>
   2041a:	f640 228d 	movw	r2, #2701	; 0xa8d
   2041e:	4290      	cmp	r0, r2
   20420:	d117      	bne.n	20452 <cloud_cmd_handler+0xaa>
		LOG_ERR("[%s:%d] AT cmd is too long, max length is %zu",
   20422:	f640 238c 	movw	r3, #2700	; 0xa8c
   20426:	4839      	ldr	r0, [pc, #228]	; (2050c <cloud_cmd_handler+0x164>)
   20428:	4c39      	ldr	r4, [pc, #228]	; (20510 <cloud_cmd_handler+0x168>)
   2042a:	9300      	str	r3, [sp, #0]
   2042c:	1a24      	subs	r4, r4, r0
   2042e:	08e4      	lsrs	r4, r4, #3
   20430:	01a4      	lsls	r4, r4, #6
   20432:	f240 337b 	movw	r3, #891	; 0x37b
   20436:	4a37      	ldr	r2, [pc, #220]	; (20514 <cloud_cmd_handler+0x16c>)
   20438:	4938      	ldr	r1, [pc, #224]	; (2051c <cloud_cmd_handler+0x174>)
   2043a:	f044 0001 	orr.w	r0, r4, #1
   2043e:	f01c ff5f 	bl	3d300 <log_string_sync>
		modem_at_cmd_buff[0] = '\0';
   20442:	4b37      	ldr	r3, [pc, #220]	; (20520 <cloud_cmd_handler+0x178>)
   20444:	701d      	strb	r5, [r3, #0]
	k_work_submit_to_queue(&application_work_q, &send_modem_at_cmd_work);
   20446:	4837      	ldr	r0, [pc, #220]	; (20524 <cloud_cmd_handler+0x17c>)
}
   20448:	b003      	add	sp, #12
   2044a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_work_submit_to_queue(&application_work_q,
   2044e:	f7ff bdcb 	b.w	1ffe8 <k_work_submit_to_queue.constprop.0>
		strcpy(modem_at_cmd_buff, at_cmd);
   20452:	4621      	mov	r1, r4
   20454:	4832      	ldr	r0, [pc, #200]	; (20520 <cloud_cmd_handler+0x178>)
   20456:	f021 fe0f 	bl	42078 <__strcpy_chk>
   2045a:	e7f4      	b.n	20446 <cloud_cmd_handler+0x9e>
	} else if ((cmd->channel == CLOUD_CHANNEL_RGB_LED) &&
   2045c:	f5b3 6fa1 	cmp.w	r3, #1288	; 0x508
   20460:	d110      	bne.n	20484 <cloud_cmd_handler+0xdc>
		   (cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   20462:	7883      	ldrb	r3, [r0, #2]
   20464:	2b05      	cmp	r3, #5
   20466:	d10d      	bne.n	20484 <cloud_cmd_handler+0xdc>
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   20468:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2046c:	f7fc fc66 	bl	1cd3c <__aeabi_d2uiz>
   20470:	b2c2      	uxtb	r2, r0
   20472:	f3c0 2107 	ubfx	r1, r0, #8, #8
   20476:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
   2047a:	b003      	add	sp, #12
   2047c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		ui_led_set_color(((uint32_t)cmd->data.sv.value >> 16) & 0xFF,
   20480:	f01c bc07 	b.w	3cc92 <ui_led_set_color>
	} else if ((cmd->group == CLOUD_CMD_GROUP_CFG_SET) &&
   20484:	6803      	ldr	r3, [r0, #0]
   20486:	4a28      	ldr	r2, [pc, #160]	; (20528 <cloud_cmd_handler+0x180>)
   20488:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
   2048c:	4293      	cmp	r3, r2
   2048e:	d11b      	bne.n	204c8 <cloud_cmd_handler+0x120>
		if (cmd->channel == CLOUD_CHANNEL_LIGHT_SENSOR) {
   20490:	7842      	ldrb	r2, [r0, #1]
   20492:	2a0e      	cmp	r2, #14
   20494:	d035      	beq.n	20502 <cloud_cmd_handler+0x15a>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   20496:	2a07      	cmp	r2, #7
   20498:	d108      	bne.n	204ac <cloud_cmd_handler+0x104>
			env_sensors_set_send_interval(
   2049a:	e9d0 0102 	ldrd	r0, r1, [r0, #8]
   2049e:	f7fc fc4d 	bl	1cd3c <__aeabi_d2uiz>
}
   204a2:	b003      	add	sp, #12
   204a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_set_send_interval(
   204a8:	f002 b97c 	b.w	227a4 <env_sensors_set_send_interval>
		} else if (cmd->channel == CLOUD_CHANNEL_GPS) {
   204ac:	b34a      	cbz	r2, 20502 <cloud_cmd_handler+0x15a>
   204ae:	4b17      	ldr	r3, [pc, #92]	; (2050c <cloud_cmd_handler+0x164>)
   204b0:	4817      	ldr	r0, [pc, #92]	; (20510 <cloud_cmd_handler+0x168>)
			LOG_ERR("Interval command not valid for channel %d",
   204b2:	491e      	ldr	r1, [pc, #120]	; (2052c <cloud_cmd_handler+0x184>)
   204b4:	1ac0      	subs	r0, r0, r3
   204b6:	08c0      	lsrs	r0, r0, #3
   204b8:	0180      	lsls	r0, r0, #6
   204ba:	f040 0001 	orr.w	r0, r0, #1
}
   204be:	b003      	add	sp, #12
   204c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERR("Interval command not valid for channel %d",
   204c4:	f01c bf1c 	b.w	3d300 <log_string_sync>
	} else if ((cmd->group == CLOUD_CMD_GROUP_GET) &&
   204c8:	2b04      	cmp	r3, #4
   204ca:	d11a      	bne.n	20502 <cloud_cmd_handler+0x15a>
		if (cmd->channel == CLOUD_CHANNEL_FLIP) {
   204cc:	7843      	ldrb	r3, [r0, #1]
   204ce:	2b01      	cmp	r3, #1
   204d0:	d101      	bne.n	204d6 <cloud_cmd_handler+0x12e>
			k_work_submit_to_queue(&application_work_q,
   204d2:	4817      	ldr	r0, [pc, #92]	; (20530 <cloud_cmd_handler+0x188>)
   204d4:	e7b8      	b.n	20448 <cloud_cmd_handler+0xa0>
		} else if (cmd->channel == CLOUD_CHANNEL_DEVICE_INFO) {
   204d6:	2b0d      	cmp	r3, #13
   204d8:	d101      	bne.n	204de <cloud_cmd_handler+0x136>
			k_work_submit_to_queue(&application_work_q,
   204da:	4816      	ldr	r0, [pc, #88]	; (20534 <cloud_cmd_handler+0x18c>)
   204dc:	e7b4      	b.n	20448 <cloud_cmd_handler+0xa0>
		} else if (cmd->channel == CLOUD_CHANNEL_LTE_LINK_RSRP) {
   204de:	2b0c      	cmp	r3, #12
   204e0:	d108      	bne.n	204f4 <cloud_cmd_handler+0x14c>
			k_delayed_work_submit_to_queue(&application_work_q,
   204e2:	2200      	movs	r2, #0
   204e4:	2300      	movs	r3, #0
   204e6:	4914      	ldr	r1, [pc, #80]	; (20538 <cloud_cmd_handler+0x190>)
   204e8:	4814      	ldr	r0, [pc, #80]	; (2053c <cloud_cmd_handler+0x194>)
}
   204ea:	b003      	add	sp, #12
   204ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			k_delayed_work_submit_to_queue(&application_work_q,
   204f0:	f019 b9ac 	b.w	3984c <k_delayed_work_submit_to_queue>
		} else if (cmd->channel == CLOUD_CHANNEL_ENVIRONMENT) {
   204f4:	2b07      	cmp	r3, #7
   204f6:	d104      	bne.n	20502 <cloud_cmd_handler+0x15a>
}
   204f8:	b003      	add	sp, #12
   204fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			env_sensors_poll();
   204fe:	f001 bfd5 	b.w	224ac <env_sensors_poll>
}
   20502:	b003      	add	sp, #12
   20504:	bd30      	pop	{r4, r5, pc}
   20506:	bf00      	nop
   20508:	20015bb8 	.word	0x20015bb8
   2050c:	0004339c 	.word	0x0004339c
   20510:	000433ac 	.word	0x000433ac
   20514:	00044f16 	.word	0x00044f16
   20518:	00044659 	.word	0x00044659
   2051c:	0004467b 	.word	0x0004467b
   20520:	2001e142 	.word	0x2001e142
   20524:	20018c38 	.word	0x20018c38
   20528:	00040008 	.word	0x00040008
   2052c:	000446a9 	.word	0x000446a9
   20530:	20018c10 	.word	0x20018c10
   20534:	20018c04 	.word	0x20018c04
   20538:	20016708 	.word	0x20016708
   2053c:	20015c08 	.word	0x20015c08

00020540 <send_modem_at_cmd_work_fn>:
{
   20540:	b530      	push	{r4, r5, lr}
   20542:	b091      	sub	sp, #68	; 0x44
	struct cloud_channel_data modem_data = {
   20544:	2218      	movs	r2, #24
   20546:	2100      	movs	r1, #0
   20548:	a804      	add	r0, sp, #16
   2054a:	f021 fbc8 	bl	41cde <memset>
   2054e:	2314      	movs	r3, #20
	struct cloud_msg msg = {
   20550:	2218      	movs	r2, #24
   20552:	2100      	movs	r1, #0
   20554:	a80a      	add	r0, sp, #40	; 0x28
	struct cloud_channel_data modem_data = {
   20556:	f88d 3010 	strb.w	r3, [sp, #16]
	struct cloud_msg msg = {
   2055a:	f021 fbc0 	bl	41cde <memset>
	size_t len = strlen(modem_at_cmd_buff);
   2055e:	4831      	ldr	r0, [pc, #196]	; (20624 <send_modem_at_cmd_work_fn+0xe4>)
   20560:	f7fc fe7c 	bl	1d25c <strlen>
	if (len == 0) {
   20564:	4d2f      	ldr	r5, [pc, #188]	; (20624 <send_modem_at_cmd_work_fn+0xe4>)
   20566:	bb68      	cbnz	r0, 205c4 <send_modem_at_cmd_work_fn+0x84>
		state = AT_CMD_ERROR;
   20568:	2301      	movs	r3, #1
		err = -ENOBUFS;
   2056a:	f06f 0468 	mvn.w	r4, #104	; 0x68
		state = AT_CMD_ERROR;
   2056e:	f88d 300f 	strb.w	r3, [sp, #15]
	len = strlen(modem_at_cmd_buff);
   20572:	482c      	ldr	r0, [pc, #176]	; (20624 <send_modem_at_cmd_work_fn+0xe4>)
   20574:	f7fc fe72 	bl	1d25c <strlen>
	if (err) {
   20578:	b374      	cbz	r4, 205d8 <send_modem_at_cmd_work_fn+0x98>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   2057a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   2057e:	f640 218d 	movw	r1, #2701	; 0xa8d
   20582:	9300      	str	r3, [sp, #0]
   20584:	4a28      	ldr	r2, [pc, #160]	; (20628 <send_modem_at_cmd_work_fn+0xe8>)
   20586:	4623      	mov	r3, r4
   20588:	4826      	ldr	r0, [pc, #152]	; (20624 <send_modem_at_cmd_work_fn+0xe4>)
   2058a:	f01a ffcf 	bl	3b52c <sniprintf>
	modem_data.data.len = len;
   2058e:	e9cd 5005 	strd	r5, r0, [sp, #20]
	err = cloud_encode_data(&modem_data, CLOUD_CMD_GROUP_COMMAND, &msg);
   20592:	210a      	movs	r1, #10
   20594:	aa0a      	add	r2, sp, #40	; 0x28
   20596:	a804      	add	r0, sp, #16
   20598:	f001 f8c0 	bl	2171c <cloud_encode_data>
	if (err) {
   2059c:	b360      	cbz	r0, 205f8 <send_modem_at_cmd_work_fn+0xb8>
   2059e:	4b23      	ldr	r3, [pc, #140]	; (2062c <send_modem_at_cmd_work_fn+0xec>)
   205a0:	4c23      	ldr	r4, [pc, #140]	; (20630 <send_modem_at_cmd_work_fn+0xf0>)
		LOG_ERR("[%s:%d] cloud_encode_data failed with error %d",
   205a2:	4a24      	ldr	r2, [pc, #144]	; (20634 <send_modem_at_cmd_work_fn+0xf4>)
   205a4:	1ae4      	subs	r4, r4, r3
   205a6:	f240 2373 	movw	r3, #627	; 0x273
   205aa:	08e4      	lsrs	r4, r4, #3
   205ac:	4922      	ldr	r1, [pc, #136]	; (20638 <send_modem_at_cmd_work_fn+0xf8>)
   205ae:	01a4      	lsls	r4, r4, #6
   205b0:	9000      	str	r0, [sp, #0]
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   205b2:	f044 0001 	orr.w	r0, r4, #1
   205b6:	f01c fea3 	bl	3d300 <log_string_sync>
	z_impl_k_sem_give(sem);
   205ba:	4820      	ldr	r0, [pc, #128]	; (2063c <send_modem_at_cmd_work_fn+0xfc>)
   205bc:	f018 fe7a 	bl	392b4 <z_impl_k_sem_give>
}
   205c0:	b011      	add	sp, #68	; 0x44
   205c2:	bd30      	pop	{r4, r5, pc}
		err = at_cmd_write(modem_at_cmd_buff, modem_at_cmd_buff,
   205c4:	f640 228d 	movw	r2, #2701	; 0xa8d
   205c8:	4629      	mov	r1, r5
   205ca:	4628      	mov	r0, r5
   205cc:	f10d 030f 	add.w	r3, sp, #15
   205d0:	f00a f9e8 	bl	2a9a4 <at_cmd_write>
   205d4:	4604      	mov	r4, r0
   205d6:	e7cc      	b.n	20572 <send_modem_at_cmd_work_fn+0x32>
	} else if (len == 0) {
   205d8:	b928      	cbnz	r0, 205e6 <send_modem_at_cmd_work_fn+0xa6>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   205da:	4919      	ldr	r1, [pc, #100]	; (20640 <send_modem_at_cmd_work_fn+0x100>)
   205dc:	4811      	ldr	r0, [pc, #68]	; (20624 <send_modem_at_cmd_work_fn+0xe4>)
   205de:	f021 fd43 	bl	42068 <strcpy>
   205e2:	2004      	movs	r0, #4
   205e4:	e7d3      	b.n	2058e <send_modem_at_cmd_work_fn+0x4e>
	} else if (len > MODEM_AT_CMD_MAX_RESPONSE_LEN) {
   205e6:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   205ea:	d9d0      	bls.n	2058e <send_modem_at_cmd_work_fn+0x4e>
		len = snprintf(modem_at_cmd_buff, sizeof(modem_at_cmd_buff),
   205ec:	4915      	ldr	r1, [pc, #84]	; (20644 <send_modem_at_cmd_work_fn+0x104>)
   205ee:	480d      	ldr	r0, [pc, #52]	; (20624 <send_modem_at_cmd_work_fn+0xe4>)
   205f0:	f021 fd3a 	bl	42068 <strcpy>
   205f4:	2032      	movs	r0, #50	; 0x32
   205f6:	e7ca      	b.n	2058e <send_modem_at_cmd_work_fn+0x4e>
		err = cloud_send(cloud_backend, &msg);
   205f8:	4b13      	ldr	r3, [pc, #76]	; (20648 <send_modem_at_cmd_work_fn+0x108>)
   205fa:	a90a      	add	r1, sp, #40	; 0x28
   205fc:	6818      	ldr	r0, [r3, #0]
   205fe:	f01c fb12 	bl	3cc26 <cloud_send>
   20602:	4605      	mov	r5, r0
   20604:	980a      	ldr	r0, [sp, #40]	; 0x28
   20606:	f021 fb07 	bl	41c18 <k_free>
		if (err) {
   2060a:	2d00      	cmp	r5, #0
   2060c:	d0d5      	beq.n	205ba <send_modem_at_cmd_work_fn+0x7a>
   2060e:	4c08      	ldr	r4, [pc, #32]	; (20630 <send_modem_at_cmd_work_fn+0xf0>)
   20610:	4806      	ldr	r0, [pc, #24]	; (2062c <send_modem_at_cmd_work_fn+0xec>)
			LOG_ERR("[%s:%d] cloud_send failed with error %d",
   20612:	f240 2379 	movw	r3, #633	; 0x279
   20616:	1a24      	subs	r4, r4, r0
   20618:	08e4      	lsrs	r4, r4, #3
   2061a:	4a06      	ldr	r2, [pc, #24]	; (20634 <send_modem_at_cmd_work_fn+0xf4>)
   2061c:	490b      	ldr	r1, [pc, #44]	; (2064c <send_modem_at_cmd_work_fn+0x10c>)
   2061e:	01a4      	lsls	r4, r4, #6
   20620:	9500      	str	r5, [sp, #0]
   20622:	e7c6      	b.n	205b2 <send_modem_at_cmd_work_fn+0x72>
   20624:	2001e142 	.word	0x2001e142
   20628:	000446d3 	.word	0x000446d3
   2062c:	0004339c 	.word	0x0004339c
   20630:	000433ac 	.word	0x000433ac
   20634:	00044efc 	.word	0x00044efc
   20638:	00044726 	.word	0x00044726
   2063c:	20015bb8 	.word	0x20015bb8
   20640:	000446ee 	.word	0x000446ee
   20644:	000446f3 	.word	0x000446f3
   20648:	20018bfc 	.word	0x20018bfc
   2064c:	00044755 	.word	0x00044755

00020650 <error_handler>:
{
   20650:	b510      	push	{r4, lr}
   20652:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   20654:	2100      	movs	r1, #0
   20656:	4806      	ldr	r0, [pc, #24]	; (20670 <error_handler+0x20>)
   20658:	f01c faee 	bl	3cc38 <atomic_set>
	if (err_type == ERROR_CLOUD) {
   2065c:	b90c      	cbnz	r4, 20662 <error_handler+0x12>
		shutdown_modem();
   2065e:	f7ff fa8f 	bl	1fb80 <shutdown_modem>
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   20662:	f003 ff81 	bl	24568 <z_impl_log_panic>
}
   20666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sys_reboot(0);
   2066a:	2000      	movs	r0, #0
   2066c:	f005 ba1c 	b.w	25aa8 <sys_reboot>
   20670:	20018bf8 	.word	0x20018bf8

00020674 <k_sys_fatal_error_handler>:
{
   20674:	b510      	push	{r4, lr}
   20676:	4604      	mov	r4, r0
   20678:	f003 ff76 	bl	24568 <z_impl_log_panic>
   2067c:	4806      	ldr	r0, [pc, #24]	; (20698 <k_sys_fatal_error_handler+0x24>)
   2067e:	4b07      	ldr	r3, [pc, #28]	; (2069c <k_sys_fatal_error_handler+0x28>)
	LOG_ERR("Running main.c error handler");
   20680:	4907      	ldr	r1, [pc, #28]	; (206a0 <k_sys_fatal_error_handler+0x2c>)
   20682:	1a1b      	subs	r3, r3, r0
   20684:	08db      	lsrs	r3, r3, #3
   20686:	019b      	lsls	r3, r3, #6
   20688:	f043 0001 	orr.w	r0, r3, #1
   2068c:	f01c fe38 	bl	3d300 <log_string_sync>
	error_handler(ERROR_SYSTEM_FAULT, reason);
   20690:	4621      	mov	r1, r4
   20692:	2004      	movs	r0, #4
   20694:	f7ff ffdc 	bl	20650 <error_handler>
	CODE_UNREACHABLE;
   20698:	0004339c 	.word	0x0004339c
   2069c:	000433ac 	.word	0x000433ac
   206a0:	0004477d 	.word	0x0004477d

000206a4 <env_data_send>:
	struct cloud_msg msg = {
   206a4:	2218      	movs	r2, #24
{
   206a6:	b510      	push	{r4, lr}
   206a8:	b08c      	sub	sp, #48	; 0x30
	struct cloud_msg msg = {
   206aa:	2100      	movs	r1, #0
   206ac:	eb0d 0002 	add.w	r0, sp, r2
   206b0:	f021 fb15 	bl	41cde <memset>
	if (!data_send_enabled()) {
   206b4:	f7ff fad2 	bl	1fc5c <data_send_enabled>
   206b8:	b128      	cbz	r0, 206c6 <env_data_send+0x22>
	if (gps_control_is_active()) {
   206ba:	f001 fd37 	bl	2212c <gps_control_is_active>
   206be:	b120      	cbz	r0, 206ca <env_data_send+0x26>
		env_sensors_set_backoff_enable(true);
   206c0:	2001      	movs	r0, #1
   206c2:	f002 f89d 	bl	22800 <env_sensors_set_backoff_enable>
}
   206c6:	b00c      	add	sp, #48	; 0x30
   206c8:	bd10      	pop	{r4, pc}
	env_sensors_set_backoff_enable(false);
   206ca:	f002 f899 	bl	22800 <env_sensors_set_backoff_enable>
	if (env_sensors_get_temperature(&env_data) == 0) {
   206ce:	4668      	mov	r0, sp
   206d0:	f001 ff5a 	bl	22588 <env_sensors_get_temperature>
   206d4:	b338      	cbz	r0, 20726 <env_data_send+0x82>
	if (env_sensors_get_humidity(&env_data) == 0) {
   206d6:	4668      	mov	r0, sp
   206d8:	f001 ffb0 	bl	2263c <env_sensors_get_humidity>
   206dc:	2800      	cmp	r0, #0
   206de:	d049      	beq.n	20774 <env_data_send+0xd0>
	if (env_sensors_get_pressure(&env_data) == 0) {
   206e0:	4668      	mov	r0, sp
   206e2:	f002 f805 	bl	226f0 <env_sensors_get_pressure>
   206e6:	2800      	cmp	r0, #0
   206e8:	d05d      	beq.n	207a6 <env_data_send+0x102>
	if (env_sensors_get_air_quality(&env_data) == 0) {
   206ea:	4668      	mov	r0, sp
   206ec:	f01c fb17 	bl	3cd1e <env_sensors_get_air_quality>
   206f0:	2800      	cmp	r0, #0
   206f2:	d1e8      	bne.n	206c6 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_QUAL,
   206f4:	ed9d 0b02 	vldr	d0, [sp, #8]
   206f8:	200b      	movs	r0, #11
   206fa:	f001 fc63 	bl	21fc4 <cloud_is_send_allowed>
   206fe:	2800      	cmp	r0, #0
   20700:	d0e1      	beq.n	206c6 <env_data_send+0x22>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20702:	4668      	mov	r0, sp
   20704:	a906      	add	r1, sp, #24
   20706:	f001 f8a5 	bl	21854 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   2070a:	2800      	cmp	r0, #0
   2070c:	d1db      	bne.n	206c6 <env_data_send+0x22>
			err = cloud_send(cloud_backend, &msg);
   2070e:	4b32      	ldr	r3, [pc, #200]	; (207d8 <env_data_send+0x134>)
   20710:	a906      	add	r1, sp, #24
   20712:	6818      	ldr	r0, [r3, #0]
   20714:	f01c fa87 	bl	3cc26 <cloud_send>
   20718:	4604      	mov	r4, r0
   2071a:	9806      	ldr	r0, [sp, #24]
   2071c:	f021 fa7c 	bl	41c18 <k_free>
			if (err) {
   20720:	2c00      	cmp	r4, #0
   20722:	d0d0      	beq.n	206c6 <env_data_send+0x22>
   20724:	e017      	b.n	20756 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   20726:	ed9d 0b02 	vldr	d0, [sp, #8]
   2072a:	2008      	movs	r0, #8
   2072c:	f001 fc4a 	bl	21fc4 <cloud_is_send_allowed>
   20730:	2800      	cmp	r0, #0
   20732:	d0d0      	beq.n	206d6 <env_data_send+0x32>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20734:	4668      	mov	r0, sp
   20736:	a906      	add	r1, sp, #24
   20738:	f001 f88c 	bl	21854 <cloud_encode_env_sensors_data>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_TEMP, env_data.value) &&
   2073c:	2800      	cmp	r0, #0
   2073e:	d1ca      	bne.n	206d6 <env_data_send+0x32>
			err = cloud_send(cloud_backend, &msg);
   20740:	4b25      	ldr	r3, [pc, #148]	; (207d8 <env_data_send+0x134>)
   20742:	a906      	add	r1, sp, #24
   20744:	6818      	ldr	r0, [r3, #0]
   20746:	f01c fa6e 	bl	3cc26 <cloud_send>
   2074a:	4604      	mov	r4, r0
   2074c:	9806      	ldr	r0, [sp, #24]
   2074e:	f021 fa63 	bl	41c18 <k_free>
			if (err) {
   20752:	2c00      	cmp	r4, #0
   20754:	d0bf      	beq.n	206d6 <env_data_send+0x32>
   20756:	4b21      	ldr	r3, [pc, #132]	; (207dc <env_data_send+0x138>)
   20758:	4821      	ldr	r0, [pc, #132]	; (207e0 <env_data_send+0x13c>)
	LOG_ERR("sensor_data_send failed: %d", err);
   2075a:	4622      	mov	r2, r4
   2075c:	1ac0      	subs	r0, r0, r3
   2075e:	08c0      	lsrs	r0, r0, #3
   20760:	0180      	lsls	r0, r0, #6
   20762:	4920      	ldr	r1, [pc, #128]	; (207e4 <env_data_send+0x140>)
   20764:	f040 0001 	orr.w	r0, r0, #1
   20768:	f01c fdca 	bl	3d300 <log_string_sync>
	cloud_error_handler(err);
   2076c:	4620      	mov	r0, r4
   2076e:	f01c fa81 	bl	3cc74 <cloud_error_handler>
   20772:	e7a8      	b.n	206c6 <env_data_send+0x22>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_HUMID,
   20774:	ed9d 0b02 	vldr	d0, [sp, #8]
   20778:	2009      	movs	r0, #9
   2077a:	f001 fc23 	bl	21fc4 <cloud_is_send_allowed>
   2077e:	2800      	cmp	r0, #0
   20780:	d0ae      	beq.n	206e0 <env_data_send+0x3c>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   20782:	4668      	mov	r0, sp
   20784:	a906      	add	r1, sp, #24
   20786:	f001 f865 	bl	21854 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   2078a:	2800      	cmp	r0, #0
   2078c:	d1a8      	bne.n	206e0 <env_data_send+0x3c>
			err = cloud_send(cloud_backend, &msg);
   2078e:	4b12      	ldr	r3, [pc, #72]	; (207d8 <env_data_send+0x134>)
   20790:	a906      	add	r1, sp, #24
   20792:	6818      	ldr	r0, [r3, #0]
   20794:	f01c fa47 	bl	3cc26 <cloud_send>
   20798:	4604      	mov	r4, r0
   2079a:	9806      	ldr	r0, [sp, #24]
   2079c:	f021 fa3c 	bl	41c18 <k_free>
			if (err) {
   207a0:	2c00      	cmp	r4, #0
   207a2:	d09d      	beq.n	206e0 <env_data_send+0x3c>
   207a4:	e7d7      	b.n	20756 <env_data_send+0xb2>
		if (cloud_is_send_allowed(CLOUD_CHANNEL_AIR_PRESS,
   207a6:	ed9d 0b02 	vldr	d0, [sp, #8]
   207aa:	200a      	movs	r0, #10
   207ac:	f001 fc0a 	bl	21fc4 <cloud_is_send_allowed>
   207b0:	2800      	cmp	r0, #0
   207b2:	d09a      	beq.n	206ea <env_data_send+0x46>
		    cloud_encode_env_sensors_data(&env_data, &msg) == 0) {
   207b4:	4668      	mov	r0, sp
   207b6:	a906      	add	r1, sp, #24
   207b8:	f001 f84c 	bl	21854 <cloud_encode_env_sensors_data>
					  env_data.value) &&
   207bc:	2800      	cmp	r0, #0
   207be:	d194      	bne.n	206ea <env_data_send+0x46>
			err = cloud_send(cloud_backend, &msg);
   207c0:	4b05      	ldr	r3, [pc, #20]	; (207d8 <env_data_send+0x134>)
   207c2:	a906      	add	r1, sp, #24
   207c4:	6818      	ldr	r0, [r3, #0]
   207c6:	f01c fa2e 	bl	3cc26 <cloud_send>
   207ca:	4604      	mov	r4, r0
   207cc:	9806      	ldr	r0, [sp, #24]
   207ce:	f021 fa23 	bl	41c18 <k_free>
			if (err) {
   207d2:	2c00      	cmp	r4, #0
   207d4:	d089      	beq.n	206ea <env_data_send+0x46>
   207d6:	e7be      	b.n	20756 <env_data_send+0xb2>
   207d8:	20018bfc 	.word	0x20018bfc
   207dc:	0004339c 	.word	0x0004339c
   207e0:	000433ac 	.word	0x000433ac
   207e4:	0004479a 	.word	0x0004479a

000207e8 <motion_data_send>:
{
   207e8:	b510      	push	{r4, lr}
   207ea:	b086      	sub	sp, #24
	if (!flip_mode_enabled || !data_send_enabled() ||
   207ec:	f7ff fa36 	bl	1fc5c <data_send_enabled>
   207f0:	b320      	cbz	r0, 2083c <motion_data_send+0x54>
	    gps_control_is_active()) {
   207f2:	f001 fc9b 	bl	2212c <gps_control_is_active>
	if (!flip_mode_enabled || !data_send_enabled() ||
   207f6:	4601      	mov	r1, r0
   207f8:	bb00      	cbnz	r0, 2083c <motion_data_send+0x54>
	struct cloud_msg msg = {
   207fa:	2218      	movs	r2, #24
   207fc:	4668      	mov	r0, sp
   207fe:	f021 fa6e 	bl	41cde <memset>
	if (cloud_encode_motion_data(&last_motion_data, &msg) == 0) {
   20802:	4669      	mov	r1, sp
   20804:	480e      	ldr	r0, [pc, #56]	; (20840 <motion_data_send+0x58>)
   20806:	f001 f87f 	bl	21908 <cloud_encode_motion_data>
   2080a:	b9b8      	cbnz	r0, 2083c <motion_data_send+0x54>
		err = cloud_send(cloud_backend, &msg);
   2080c:	4b0d      	ldr	r3, [pc, #52]	; (20844 <motion_data_send+0x5c>)
   2080e:	4669      	mov	r1, sp
   20810:	6818      	ldr	r0, [r3, #0]
   20812:	f01c fa08 	bl	3cc26 <cloud_send>
   20816:	4604      	mov	r4, r0
   20818:	9800      	ldr	r0, [sp, #0]
   2081a:	f021 f9fd 	bl	41c18 <k_free>
		if (err) {
   2081e:	b16c      	cbz	r4, 2083c <motion_data_send+0x54>
   20820:	4809      	ldr	r0, [pc, #36]	; (20848 <motion_data_send+0x60>)
   20822:	4b0a      	ldr	r3, [pc, #40]	; (2084c <motion_data_send+0x64>)
			LOG_ERR("Transmisison of motion data failed: %d", err);
   20824:	4622      	mov	r2, r4
   20826:	1a1b      	subs	r3, r3, r0
   20828:	08db      	lsrs	r3, r3, #3
   2082a:	019b      	lsls	r3, r3, #6
   2082c:	f043 0001 	orr.w	r0, r3, #1
   20830:	4907      	ldr	r1, [pc, #28]	; (20850 <motion_data_send+0x68>)
   20832:	f01c fd65 	bl	3d300 <log_string_sync>
			cloud_error_handler(err);
   20836:	4620      	mov	r0, r4
   20838:	f01c fa1c 	bl	3cc74 <cloud_error_handler>
}
   2083c:	b006      	add	sp, #24
   2083e:	bd10      	pop	{r4, pc}
   20840:	20015dc0 	.word	0x20015dc0
   20844:	20018bfc 	.word	0x20018bfc
   20848:	0004339c 	.word	0x0004339c
   2084c:	000433ac 	.word	0x000433ac
   20850:	000447b6 	.word	0x000447b6

00020854 <device_status_send>:
{
   20854:	b570      	push	{r4, r5, r6, lr}
   20856:	b092      	sub	sp, #72	; 0x48
	if (!data_send_enabled() || gps_control_is_active()) {
   20858:	f7ff fa00 	bl	1fc5c <data_send_enabled>
   2085c:	2800      	cmp	r0, #0
   2085e:	d03e      	beq.n	208de <device_status_send+0x8a>
   20860:	f001 fc64 	bl	2212c <gps_control_is_active>
   20864:	4606      	mov	r6, r0
   20866:	2800      	cmp	r0, #0
   20868:	d139      	bne.n	208de <device_status_send+0x8a>
	ret = modem_info_params_get(&modem_param);
   2086a:	482c      	ldr	r0, [pc, #176]	; (2091c <device_status_send+0xc8>)
   2086c:	f00b fe2e 	bl	2c4cc <modem_info_params_get>
	if (ret < 0) {
   20870:	1e02      	subs	r2, r0, #0
   20872:	da36      	bge.n	208e2 <device_status_send+0x8e>
   20874:	482a      	ldr	r0, [pc, #168]	; (20920 <device_status_send+0xcc>)
   20876:	4b2b      	ldr	r3, [pc, #172]	; (20924 <device_status_send+0xd0>)
		LOG_ERR("Unable to obtain modem parameters: %d", ret);
   20878:	492b      	ldr	r1, [pc, #172]	; (20928 <device_status_send+0xd4>)
   2087a:	1a1b      	subs	r3, r3, r0
   2087c:	08db      	lsrs	r3, r3, #3
   2087e:	019b      	lsls	r3, r3, #6
   20880:	f043 0001 	orr.w	r0, r3, #1
   20884:	f01c fd3c 	bl	3d300 <log_string_sync>
	const char *const ui[] = {
   20888:	4d28      	ldr	r5, [pc, #160]	; (2092c <device_status_send+0xd8>)
   2088a:	ac06      	add	r4, sp, #24
   2088c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2088e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20890:	e895 0003 	ldmia.w	r5, {r0, r1}
	const char *const fota[] = {
   20894:	4b26      	ldr	r3, [pc, #152]	; (20930 <device_status_send+0xdc>)
	const char *const ui[] = {
   20896:	e884 0003 	stmia.w	r4, {r0, r1}
	const char *const fota[] = {
   2089a:	9304      	str	r3, [sp, #16]
	struct cloud_msg msg = {
   2089c:	ac0c      	add	r4, sp, #48	; 0x30
	const char *const fota[] = {
   2089e:	4b25      	ldr	r3, [pc, #148]	; (20934 <device_status_send+0xe0>)
	struct cloud_msg msg = {
   208a0:	2218      	movs	r2, #24
   208a2:	2100      	movs	r1, #0
   208a4:	4620      	mov	r0, r4
	const char *const fota[] = {
   208a6:	9305      	str	r3, [sp, #20]
	struct cloud_msg msg = {
   208a8:	f021 fa19 	bl	41cde <memset>
   208ac:	2301      	movs	r3, #1
   208ae:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
	ret = cloud_encode_device_status_data(modem_ptr,
   208b2:	2302      	movs	r3, #2
   208b4:	2206      	movs	r2, #6
   208b6:	e9cd 3300 	strd	r3, r3, [sp]
   208ba:	4630      	mov	r0, r6
   208bc:	9402      	str	r4, [sp, #8]
   208be:	ab04      	add	r3, sp, #16
   208c0:	a906      	add	r1, sp, #24
   208c2:	f001 f86d 	bl	219a0 <cloud_encode_device_status_data>
	if (ret) {
   208c6:	b170      	cbz	r0, 208e6 <device_status_send+0x92>
   208c8:	4a15      	ldr	r2, [pc, #84]	; (20920 <device_status_send+0xcc>)
   208ca:	4b16      	ldr	r3, [pc, #88]	; (20924 <device_status_send+0xd0>)
		LOG_ERR("Unable to encode cloud data: %d", ret);
   208cc:	491a      	ldr	r1, [pc, #104]	; (20938 <device_status_send+0xe4>)
   208ce:	1a9b      	subs	r3, r3, r2
   208d0:	08db      	lsrs	r3, r3, #3
   208d2:	019b      	lsls	r3, r3, #6
   208d4:	4602      	mov	r2, r0
   208d6:	f043 0001 	orr.w	r0, r3, #1
   208da:	f01c fd11 	bl	3d300 <log_string_sync>
}
   208de:	b012      	add	sp, #72	; 0x48
   208e0:	bd70      	pop	{r4, r5, r6, pc}
		modem_ptr = &modem_param;
   208e2:	4e0e      	ldr	r6, [pc, #56]	; (2091c <device_status_send+0xc8>)
   208e4:	e7d0      	b.n	20888 <device_status_send+0x34>
		ret = cloud_send(cloud_backend, &msg);
   208e6:	4b15      	ldr	r3, [pc, #84]	; (2093c <device_status_send+0xe8>)
   208e8:	4621      	mov	r1, r4
   208ea:	6818      	ldr	r0, [r3, #0]
   208ec:	f01c f99b 	bl	3cc26 <cloud_send>
   208f0:	4604      	mov	r4, r0
   208f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   208f4:	f021 f990 	bl	41c18 <k_free>
		if (ret) {
   208f8:	2c00      	cmp	r4, #0
   208fa:	d0f0      	beq.n	208de <device_status_send+0x8a>
   208fc:	4808      	ldr	r0, [pc, #32]	; (20920 <device_status_send+0xcc>)
   208fe:	4b09      	ldr	r3, [pc, #36]	; (20924 <device_status_send+0xd0>)
			LOG_ERR("sensor_data_send failed: %d", ret);
   20900:	4622      	mov	r2, r4
   20902:	1a1b      	subs	r3, r3, r0
   20904:	08db      	lsrs	r3, r3, #3
   20906:	019b      	lsls	r3, r3, #6
   20908:	f043 0001 	orr.w	r0, r3, #1
   2090c:	490c      	ldr	r1, [pc, #48]	; (20940 <device_status_send+0xec>)
   2090e:	f01c fcf7 	bl	3d300 <log_string_sync>
			cloud_error_handler(ret);
   20912:	4620      	mov	r0, r4
   20914:	f01c f9ae 	bl	3cc74 <cloud_error_handler>
   20918:	e7e1      	b.n	208de <device_status_send+0x8a>
   2091a:	bf00      	nop
   2091c:	20015e20 	.word	0x20015e20
   20920:	0004339c 	.word	0x0004339c
   20924:	000433ac 	.word	0x000433ac
   20928:	000447dd 	.word	0x000447dd
   2092c:	00043520 	.word	0x00043520
   20930:	00044207 	.word	0x00044207
   20934:	0004422c 	.word	0x0004422c
   20938:	00044313 	.word	0x00044313
   2093c:	20018bfc 	.word	0x20018bfc
   20940:	0004479a 	.word	0x0004479a

00020944 <device_config_send>:
{
   20944:	b570      	push	{r4, r5, r6, lr}
   20946:	b086      	sub	sp, #24
	struct cloud_msg msg = {
   20948:	2218      	movs	r2, #24
   2094a:	2100      	movs	r1, #0
   2094c:	4668      	mov	r0, sp
   2094e:	f021 f9c6 	bl	41cde <memset>
   20952:	2301      	movs	r3, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   20954:	2000      	movs	r0, #0
	struct cloud_msg msg = {
   20956:	f8ad 300c 	strh.w	r3, [sp, #12]
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   2095a:	f001 fa7b 	bl	21e54 <cloud_get_channel_enable_state>
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   2095e:	1c43      	adds	r3, r0, #1
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   20960:	4605      	mov	r5, r0
	if (gps_cfg_state == CLOUD_CMD_STATE_UNDEFINED) {
   20962:	d00a      	beq.n	2097a <device_config_send+0x36>
	if (gps_control_is_active() && gps_cfg_state == CLOUD_CMD_STATE_FALSE) {
   20964:	f001 fbe2 	bl	2212c <gps_control_is_active>
   20968:	b148      	cbz	r0, 2097e <device_config_send+0x3a>
   2096a:	b945      	cbnz	r5, 2097e <device_config_send+0x3a>
		k_delayed_work_submit_to_queue(&application_work_q,
   2096c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   20970:	2300      	movs	r3, #0
   20972:	491e      	ldr	r1, [pc, #120]	; (209ec <device_config_send+0xa8>)
   20974:	481e      	ldr	r0, [pc, #120]	; (209f0 <device_config_send+0xac>)
   20976:	f018 ff69 	bl	3984c <k_delayed_work_submit_to_queue>
}
   2097a:	b006      	add	sp, #24
   2097c:	bd70      	pop	{r4, r5, r6, pc}
	ret = cloud_encode_config_data(&msg);
   2097e:	4668      	mov	r0, sp
   20980:	f001 fa80 	bl	21e84 <cloud_encode_config_data>
	if (ret) {
   20984:	b180      	cbz	r0, 209a8 <device_config_send+0x64>
   20986:	4a1b      	ldr	r2, [pc, #108]	; (209f4 <device_config_send+0xb0>)
   20988:	4b1b      	ldr	r3, [pc, #108]	; (209f8 <device_config_send+0xb4>)
		LOG_ERR("Unable to encode cloud data: %d", ret);
   2098a:	491c      	ldr	r1, [pc, #112]	; (209fc <device_config_send+0xb8>)
   2098c:	1a9b      	subs	r3, r3, r2
   2098e:	08db      	lsrs	r3, r3, #3
   20990:	019b      	lsls	r3, r3, #6
   20992:	4602      	mov	r2, r0
   20994:	f043 0001 	orr.w	r0, r3, #1
   20998:	f01c fcb2 	bl	3d300 <log_string_sync>
	if (gps_cfg_state == CLOUD_CMD_STATE_TRUE) {
   2099c:	2d01      	cmp	r5, #1
   2099e:	d1ec      	bne.n	2097a <device_config_send+0x36>
		gps_control_start(0);
   209a0:	2000      	movs	r0, #0
   209a2:	f001 fcab 	bl	222fc <gps_control_start>
   209a6:	e7e8      	b.n	2097a <device_config_send+0x36>
	} else if (msg.len && msg.buf) {
   209a8:	9b01      	ldr	r3, [sp, #4]
   209aa:	2b00      	cmp	r3, #0
   209ac:	d0f6      	beq.n	2099c <device_config_send+0x58>
   209ae:	9b00      	ldr	r3, [sp, #0]
   209b0:	2b00      	cmp	r3, #0
   209b2:	d0f3      	beq.n	2099c <device_config_send+0x58>
		ret = cloud_send(cloud_backend, &msg);
   209b4:	4b12      	ldr	r3, [pc, #72]	; (20a00 <device_config_send+0xbc>)
   209b6:	4669      	mov	r1, sp
   209b8:	6818      	ldr	r0, [r3, #0]
   209ba:	f01c f934 	bl	3cc26 <cloud_send>
   209be:	4606      	mov	r6, r0
   209c0:	9800      	ldr	r0, [sp, #0]
   209c2:	f021 f929 	bl	41c18 <k_free>
		if (ret) {
   209c6:	2e00      	cmp	r6, #0
   209c8:	d0e8      	beq.n	2099c <device_config_send+0x58>
   209ca:	480a      	ldr	r0, [pc, #40]	; (209f4 <device_config_send+0xb0>)
   209cc:	4c0a      	ldr	r4, [pc, #40]	; (209f8 <device_config_send+0xb4>)
			LOG_ERR("%s failed: %d", __func__, ret);
   209ce:	4633      	mov	r3, r6
   209d0:	1a24      	subs	r4, r4, r0
   209d2:	08e4      	lsrs	r4, r4, #3
   209d4:	01a4      	lsls	r4, r4, #6
   209d6:	f044 0001 	orr.w	r0, r4, #1
   209da:	4a0a      	ldr	r2, [pc, #40]	; (20a04 <device_config_send+0xc0>)
   209dc:	490a      	ldr	r1, [pc, #40]	; (20a08 <device_config_send+0xc4>)
   209de:	f01c fc8f 	bl	3d300 <log_string_sync>
			cloud_error_handler(ret);
   209e2:	4630      	mov	r0, r6
   209e4:	f01c f946 	bl	3cc74 <cloud_error_handler>
   209e8:	e7d8      	b.n	2099c <device_config_send+0x58>
   209ea:	bf00      	nop
   209ec:	20015d88 	.word	0x20015d88
   209f0:	20015c08 	.word	0x20015c08
   209f4:	0004339c 	.word	0x0004339c
   209f8:	000433ac 	.word	0x000433ac
   209fc:	00044313 	.word	0x00044313
   20a00:	20018bfc 	.word	0x20018bfc
   20a04:	00044f34 	.word	0x00044f34
   20a08:	00044803 	.word	0x00044803

00020a0c <cloud_connect_error_handler>:
{
   20a0c:	b538      	push	{r3, r4, r5, lr}
	if (err == CLOUD_CONNECT_RES_SUCCESS) {
   20a0e:	4605      	mov	r5, r0
   20a10:	2800      	cmp	r0, #0
   20a12:	d058      	beq.n	20ac6 <cloud_connect_error_handler+0xba>
   20a14:	4b2c      	ldr	r3, [pc, #176]	; (20ac8 <cloud_connect_error_handler+0xbc>)
   20a16:	4c2d      	ldr	r4, [pc, #180]	; (20acc <cloud_connect_error_handler+0xc0>)
	LOG_ERR("Failed to connect to cloud, error %d", err);
   20a18:	4602      	mov	r2, r0
   20a1a:	1ae4      	subs	r4, r4, r3
   20a1c:	08e4      	lsrs	r4, r4, #3
   20a1e:	01a4      	lsls	r4, r4, #6
   20a20:	492b      	ldr	r1, [pc, #172]	; (20ad0 <cloud_connect_error_handler+0xc4>)
   20a22:	f044 0001 	orr.w	r0, r4, #1
   20a26:	350b      	adds	r5, #11
   20a28:	f01c fc6a 	bl	3d300 <log_string_sync>
	switch (err) {
   20a2c:	2d0a      	cmp	r5, #10
   20a2e:	d848      	bhi.n	20ac2 <cloud_connect_error_handler+0xb6>
   20a30:	e8df f005 	tbb	[pc, r5]
   20a34:	3f414345 	.word	0x3f414345
   20a38:	1d2c473d 	.word	0x1d2c473d
   20a3c:	4717      	.short	0x4717
   20a3e:	06          	.byte	0x06
   20a3f:	00          	.byte	0x00
		LOG_ERR("Cloud back-end has not been initialized");
   20a40:	4924      	ldr	r1, [pc, #144]	; (20ad4 <cloud_connect_error_handler+0xc8>)
   20a42:	f044 0001 	orr.w	r0, r4, #1
   20a46:	f01c fc5b 	bl	3d300 <log_string_sync>
	ui_led_set_pattern(UI_LED_ERROR_CLOUD);
   20a4a:	f44f 6010 	mov.w	r0, #2304	; 0x900
   20a4e:	f000 fcef 	bl	21430 <ui_led_set_pattern>
	shutdown_modem();
   20a52:	f7ff f895 	bl	1fb80 <shutdown_modem>
	return z_impl_k_current_get();
   20a56:	f018 fc27 	bl	392a8 <z_impl_k_current_get>
}
   20a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_suspend(thread);
   20a5e:	f017 beeb 	b.w	38838 <z_impl_k_thread_suspend>
		LOG_ERR("Network error, check cloud configuration");
   20a62:	491d      	ldr	r1, [pc, #116]	; (20ad8 <cloud_connect_error_handler+0xcc>)
		LOG_ERR("Unhandled connect error");
   20a64:	f044 0001 	orr.w	r0, r4, #1
   20a68:	f01c fc4a 	bl	3d300 <log_string_sync>
	if (reboot) {
   20a6c:	e00e      	b.n	20a8c <cloud_connect_error_handler+0x80>
		if (cloud_backend && cloud_backend->config &&
   20a6e:	4b1b      	ldr	r3, [pc, #108]	; (20adc <cloud_connect_error_handler+0xd0>)
   20a70:	681b      	ldr	r3, [r3, #0]
   20a72:	b1d3      	cbz	r3, 20aaa <cloud_connect_error_handler+0x9e>
   20a74:	685b      	ldr	r3, [r3, #4]
   20a76:	b1c3      	cbz	r3, 20aaa <cloud_connect_error_handler+0x9e>
		    cloud_backend->config->name) {
   20a78:	681a      	ldr	r2, [r3, #0]
	char *backend_name = "invalid";
   20a7a:	4b19      	ldr	r3, [pc, #100]	; (20ae0 <cloud_connect_error_handler+0xd4>)
   20a7c:	2a00      	cmp	r2, #0
   20a7e:	bf08      	it	eq
   20a80:	461a      	moveq	r2, r3
		LOG_ERR("An error occurred specific to the cloud back-end: %s",
   20a82:	4918      	ldr	r1, [pc, #96]	; (20ae4 <cloud_connect_error_handler+0xd8>)
   20a84:	f044 0001 	orr.w	r0, r4, #1
   20a88:	f01c fc3a 	bl	3d300 <log_string_sync>
		LOG_ERR("Device will reboot in %d seconds",
   20a8c:	f044 0001 	orr.w	r0, r4, #1
   20a90:	f44f 7296 	mov.w	r2, #300	; 0x12c
   20a94:	4914      	ldr	r1, [pc, #80]	; (20ae8 <cloud_connect_error_handler+0xdc>)
   20a96:	f01c fc33 	bl	3d300 <log_string_sync>
		k_delayed_work_submit_to_queue(
   20a9a:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   20a9e:	2300      	movs	r3, #0
   20aa0:	4912      	ldr	r1, [pc, #72]	; (20aec <cloud_connect_error_handler+0xe0>)
   20aa2:	4813      	ldr	r0, [pc, #76]	; (20af0 <cloud_connect_error_handler+0xe4>)
   20aa4:	f018 fed2 	bl	3984c <k_delayed_work_submit_to_queue>
   20aa8:	e7cf      	b.n	20a4a <cloud_connect_error_handler+0x3e>
	char *backend_name = "invalid";
   20aaa:	4a0d      	ldr	r2, [pc, #52]	; (20ae0 <cloud_connect_error_handler+0xd4>)
   20aac:	e7e9      	b.n	20a82 <cloud_connect_error_handler+0x76>
		LOG_ERR("Ensure device has a valid private key");
   20aae:	4911      	ldr	r1, [pc, #68]	; (20af4 <cloud_connect_error_handler+0xe8>)
   20ab0:	e7d8      	b.n	20a64 <cloud_connect_error_handler+0x58>
		LOG_ERR("Ensure device has a valid CA and client certificate");
   20ab2:	4911      	ldr	r1, [pc, #68]	; (20af8 <cloud_connect_error_handler+0xec>)
   20ab4:	e7d6      	b.n	20a64 <cloud_connect_error_handler+0x58>
		LOG_ERR("A certificate/authorization error has occurred");
   20ab6:	4911      	ldr	r1, [pc, #68]	; (20afc <cloud_connect_error_handler+0xf0>)
   20ab8:	e7d4      	b.n	20a64 <cloud_connect_error_handler+0x58>
		LOG_ERR("Connect timeout. SIM card may be out of data");
   20aba:	4911      	ldr	r1, [pc, #68]	; (20b00 <cloud_connect_error_handler+0xf4>)
   20abc:	e7d2      	b.n	20a64 <cloud_connect_error_handler+0x58>
		LOG_ERR("Connection already exists.");
   20abe:	4911      	ldr	r1, [pc, #68]	; (20b04 <cloud_connect_error_handler+0xf8>)
   20ac0:	e7d0      	b.n	20a64 <cloud_connect_error_handler+0x58>
		LOG_ERR("Unhandled connect error");
   20ac2:	4911      	ldr	r1, [pc, #68]	; (20b08 <cloud_connect_error_handler+0xfc>)
   20ac4:	e7ce      	b.n	20a64 <cloud_connect_error_handler+0x58>
}
   20ac6:	bd38      	pop	{r3, r4, r5, pc}
   20ac8:	0004339c 	.word	0x0004339c
   20acc:	000433ac 	.word	0x000433ac
   20ad0:	00044819 	.word	0x00044819
   20ad4:	0004483e 	.word	0x0004483e
   20ad8:	00044866 	.word	0x00044866
   20adc:	20018bfc 	.word	0x20018bfc
   20ae0:	00044811 	.word	0x00044811
   20ae4:	0004488f 	.word	0x0004488f
   20ae8:	000442e5 	.word	0x000442e5
   20aec:	20015d28 	.word	0x20015d28
   20af0:	20015c08 	.word	0x20015c08
   20af4:	000448c4 	.word	0x000448c4
   20af8:	000448ea 	.word	0x000448ea
   20afc:	0004491e 	.word	0x0004491e
   20b00:	0004494d 	.word	0x0004494d
   20b04:	0004497a 	.word	0x0004497a
   20b08:	00044995 	.word	0x00044995

00020b0c <cloud_connect_work_fn>:
{
   20b0c:	b570      	push	{r4, r5, r6, lr}
   20b0e:	4b21      	ldr	r3, [pc, #132]	; (20b94 <cloud_connect_work_fn+0x88>)
   20b10:	4c21      	ldr	r4, [pc, #132]	; (20b98 <cloud_connect_work_fn+0x8c>)
	LOG_INF("Connecting to cloud, attempt %d of %d",
   20b12:	4822      	ldr	r0, [pc, #136]	; (20b9c <cloud_connect_work_fn+0x90>)
   20b14:	1ae4      	subs	r4, r4, r3
   20b16:	f01c f897 	bl	3cc48 <atomic_get>
   20b1a:	08e4      	lsrs	r4, r4, #3
   20b1c:	01a4      	lsls	r4, r4, #6
   20b1e:	f044 0403 	orr.w	r4, r4, #3
   20b22:	4602      	mov	r2, r0
   20b24:	2308      	movs	r3, #8
   20b26:	4620      	mov	r0, r4
   20b28:	491d      	ldr	r1, [pc, #116]	; (20ba0 <cloud_connect_work_fn+0x94>)
   20b2a:	f01c fbe9 	bl	3d300 <log_string_sync>
	k_delayed_work_submit_to_queue(&application_work_q,
   20b2e:	2300      	movs	r3, #0
   20b30:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   20b34:	491b      	ldr	r1, [pc, #108]	; (20ba4 <cloud_connect_work_fn+0x98>)
   20b36:	481c      	ldr	r0, [pc, #112]	; (20ba8 <cloud_connect_work_fn+0x9c>)
   20b38:	f018 fe88 	bl	3984c <k_delayed_work_submit_to_queue>
	ui_led_set_pattern(UI_CLOUD_CONNECTING);
   20b3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
   20b40:	f000 fc76 	bl	21430 <ui_led_set_pattern>
	ret = cloud_connect(cloud_backend);
   20b44:	4b19      	ldr	r3, [pc, #100]	; (20bac <cloud_connect_work_fn+0xa0>)
   20b46:	6818      	ldr	r0, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   20b48:	b170      	cbz	r0, 20b68 <cloud_connect_work_fn+0x5c>
   20b4a:	6803      	ldr	r3, [r0, #0]
   20b4c:	b163      	cbz	r3, 20b68 <cloud_connect_work_fn+0x5c>
	    backend->api->connect == NULL) {
   20b4e:	689b      	ldr	r3, [r3, #8]
	if (backend == NULL || backend->api == NULL ||
   20b50:	b153      	cbz	r3, 20b68 <cloud_connect_work_fn+0x5c>
	return backend->api->connect(backend);
   20b52:	4798      	blx	r3
	if (ret != CLOUD_CONNECT_RES_SUCCESS) {
   20b54:	4605      	mov	r5, r0
   20b56:	b150      	cbz	r0, 20b6e <cloud_connect_work_fn+0x62>
		k_delayed_work_cancel(&cloud_reboot_work);
   20b58:	4812      	ldr	r0, [pc, #72]	; (20ba4 <cloud_connect_work_fn+0x98>)
   20b5a:	f018 ff01 	bl	39960 <k_delayed_work_cancel>
		cloud_connect_error_handler(ret);
   20b5e:	b268      	sxtb	r0, r5
}
   20b60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cloud_connect_error_handler(ret);
   20b64:	f7ff bf52 	b.w	20a0c <cloud_connect_error_handler>
		return CLOUD_CONNECT_RES_ERR_INVALID_PARAM;
   20b68:	f06f 0501 	mvn.w	r5, #1
   20b6c:	e7f4      	b.n	20b58 <cloud_connect_work_fn+0x4c>
		LOG_INF("Cloud connection request sent.");
   20b6e:	4620      	mov	r0, r4
   20b70:	490f      	ldr	r1, [pc, #60]	; (20bb0 <cloud_connect_work_fn+0xa4>)
   20b72:	f01c fbc5 	bl	3d300 <log_string_sync>
		LOG_INF("Connection response timeout is set to %d seconds.",
   20b76:	4620      	mov	r0, r4
   20b78:	221e      	movs	r2, #30
   20b7a:	490e      	ldr	r1, [pc, #56]	; (20bb4 <cloud_connect_work_fn+0xa8>)
   20b7c:	f01c fbc0 	bl	3d300 <log_string_sync>
}
   20b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   20b84:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   20b88:	2300      	movs	r3, #0
   20b8a:	4906      	ldr	r1, [pc, #24]	; (20ba4 <cloud_connect_work_fn+0x98>)
   20b8c:	4806      	ldr	r0, [pc, #24]	; (20ba8 <cloud_connect_work_fn+0x9c>)
   20b8e:	f018 be5d 	b.w	3984c <k_delayed_work_submit_to_queue>
   20b92:	bf00      	nop
   20b94:	0004339c 	.word	0x0004339c
   20b98:	000433ac 	.word	0x000433ac
   20b9c:	20018c00 	.word	0x20018c00
   20ba0:	000449ad 	.word	0x000449ad
   20ba4:	20015d28 	.word	0x20015d28
   20ba8:	20015c08 	.word	0x20015c08
   20bac:	20018bfc 	.word	0x20018bfc
   20bb0:	00048667 	.word	0x00048667
   20bb4:	000449d3 	.word	0x000449d3

00020bb8 <connect_to_cloud>:
{
   20bb8:	b570      	push	{r4, r5, r6, lr}
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   20bba:	2100      	movs	r1, #0
{
   20bbc:	4604      	mov	r4, r0
	atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_INIT);
   20bbe:	4827      	ldr	r0, [pc, #156]	; (20c5c <connect_to_cloud+0xa4>)
   20bc0:	f01c f83a 	bl	3cc38 <atomic_set>
	if (atomic_get(&carrier_requested_disconnect)) {
   20bc4:	4826      	ldr	r0, [pc, #152]	; (20c60 <connect_to_cloud+0xa8>)
   20bc6:	f01c f83f 	bl	3cc48 <atomic_get>
   20bca:	2800      	cmp	r0, #0
   20bcc:	d144      	bne.n	20c58 <connect_to_cloud+0xa0>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20bce:	4825      	ldr	r0, [pc, #148]	; (20c64 <connect_to_cloud+0xac>)
   20bd0:	e8d0 3fef 	ldaex	r3, [r0]
   20bd4:	3301      	adds	r3, #1
   20bd6:	e8c0 3fe2 	stlex	r2, r3, [r0]
   20bda:	2a00      	cmp	r2, #0
   20bdc:	d1f8      	bne.n	20bd0 <connect_to_cloud+0x18>
	if (atomic_get(&cloud_connect_attempts) >
   20bde:	f01c f833 	bl	3cc48 <atomic_get>
   20be2:	2808      	cmp	r0, #8
   20be4:	dd0d      	ble.n	20c02 <connect_to_cloud+0x4a>
   20be6:	4820      	ldr	r0, [pc, #128]	; (20c68 <connect_to_cloud+0xb0>)
   20be8:	4b20      	ldr	r3, [pc, #128]	; (20c6c <connect_to_cloud+0xb4>)
		LOG_ERR("The max cloud connection attempt count exceeded.");
   20bea:	4921      	ldr	r1, [pc, #132]	; (20c70 <connect_to_cloud+0xb8>)
   20bec:	1a1b      	subs	r3, r3, r0
   20bee:	08db      	lsrs	r3, r3, #3
   20bf0:	019b      	lsls	r3, r3, #6
   20bf2:	f043 0001 	orr.w	r0, r3, #1
   20bf6:	f01c fb83 	bl	3d300 <log_string_sync>
		cloud_error_handler(-ETIMEDOUT);
   20bfa:	f06f 0073 	mvn.w	r0, #115	; 0x73
   20bfe:	f01c f839 	bl	3cc74 <cloud_error_handler>
	if (!initial_connect) {
   20c02:	4b1c      	ldr	r3, [pc, #112]	; (20c74 <connect_to_cloud+0xbc>)
   20c04:	781a      	ldrb	r2, [r3, #0]
   20c06:	bb22      	cbnz	r2, 20c52 <connect_to_cloud+0x9a>
   20c08:	4817      	ldr	r0, [pc, #92]	; (20c68 <connect_to_cloud+0xb0>)
   20c0a:	4b18      	ldr	r3, [pc, #96]	; (20c6c <connect_to_cloud+0xb4>)
		LOG_INF("Attempting reconnect in %d seconds...",
   20c0c:	4622      	mov	r2, r4
   20c0e:	1a1b      	subs	r3, r3, r0
   20c10:	08db      	lsrs	r3, r3, #3
   20c12:	019b      	lsls	r3, r3, #6
   20c14:	f043 0003 	orr.w	r0, r3, #3
   20c18:	4917      	ldr	r1, [pc, #92]	; (20c78 <connect_to_cloud+0xc0>)
   20c1a:	f01c fb71 	bl	3d300 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   20c1e:	4817      	ldr	r0, [pc, #92]	; (20c7c <connect_to_cloud+0xc4>)
   20c20:	f018 fe9e 	bl	39960 <k_delayed_work_cancel>
				       K_SECONDS(connect_delay_s));
   20c24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
			return (t * to_hz + off) / from_hz;
   20c28:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   20c2c:	4344      	muls	r4, r0
   20c2e:	2100      	movs	r1, #0
   20c30:	f240 30e7 	movw	r0, #999	; 0x3e7
   20c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20c38:	2300      	movs	r3, #0
   20c3a:	fbe5 0104 	umlal	r0, r1, r5, r4
   20c3e:	f7fc f93d 	bl	1cebc <__aeabi_uldivmod>
}
   20c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20c46:	4602      	mov	r2, r0
   20c48:	460b      	mov	r3, r1
	k_delayed_work_submit_to_queue(&application_work_q,
   20c4a:	480d      	ldr	r0, [pc, #52]	; (20c80 <connect_to_cloud+0xc8>)
   20c4c:	490d      	ldr	r1, [pc, #52]	; (20c84 <connect_to_cloud+0xcc>)
   20c4e:	f018 bdfd 	b.w	3984c <k_delayed_work_submit_to_queue>
		initial_connect = false;
   20c52:	2200      	movs	r2, #0
   20c54:	701a      	strb	r2, [r3, #0]
   20c56:	e7e5      	b.n	20c24 <connect_to_cloud+0x6c>
}
   20c58:	bd70      	pop	{r4, r5, r6, pc}
   20c5a:	bf00      	nop
   20c5c:	20018bf8 	.word	0x20018bf8
   20c60:	20018bf4 	.word	0x20018bf4
   20c64:	20018c00 	.word	0x20018c00
   20c68:	0004339c 	.word	0x0004339c
   20c6c:	000433ac 	.word	0x000433ac
   20c70:	00044a05 	.word	0x00044a05
   20c74:	20015810 	.word	0x20015810
   20c78:	00044a36 	.word	0x00044a36
   20c7c:	20015d28 	.word	0x20015d28
   20c80:	20015c08 	.word	0x20015c08
   20c84:	20015cf8 	.word	0x20015cf8

00020c88 <sensors_start>:
{
   20c88:	b510      	push	{r4, lr}
	if (!started) {
   20c8a:	4c2d      	ldr	r4, [pc, #180]	; (20d40 <sensors_start+0xb8>)
   20c8c:	7823      	ldrb	r3, [r4, #0]
   20c8e:	2b00      	cmp	r3, #0
   20c90:	d149      	bne.n	20d26 <sensors_start+0x9e>
	err = motion_init_and_start(&application_work_q, motion_handler);
   20c92:	492c      	ldr	r1, [pc, #176]	; (20d44 <sensors_start+0xbc>)
   20c94:	482c      	ldr	r0, [pc, #176]	; (20d48 <sensors_start+0xc0>)
   20c96:	f000 fb2f 	bl	212f8 <motion_init_and_start>
	if (err) {
   20c9a:	b150      	cbz	r0, 20cb2 <sensors_start+0x2a>
   20c9c:	4a2b      	ldr	r2, [pc, #172]	; (20d4c <sensors_start+0xc4>)
   20c9e:	4b2c      	ldr	r3, [pc, #176]	; (20d50 <sensors_start+0xc8>)
		LOG_ERR("motion module init failed, error: %d", err);
   20ca0:	492c      	ldr	r1, [pc, #176]	; (20d54 <sensors_start+0xcc>)
   20ca2:	1a9b      	subs	r3, r3, r2
   20ca4:	08db      	lsrs	r3, r3, #3
   20ca6:	019b      	lsls	r3, r3, #6
   20ca8:	4602      	mov	r2, r0
   20caa:	f043 0001 	orr.w	r0, r3, #1
   20cae:	f01c fb27 	bl	3d300 <log_string_sync>
	err = env_sensors_init_and_start(&application_work_q, env_data_send);
   20cb2:	4929      	ldr	r1, [pc, #164]	; (20d58 <sensors_start+0xd0>)
   20cb4:	4824      	ldr	r0, [pc, #144]	; (20d48 <sensors_start+0xc0>)
   20cb6:	f001 fc05 	bl	224c4 <env_sensors_init_and_start>
	if (err) {
   20cba:	b150      	cbz	r0, 20cd2 <sensors_start+0x4a>
   20cbc:	4a23      	ldr	r2, [pc, #140]	; (20d4c <sensors_start+0xc4>)
   20cbe:	4b24      	ldr	r3, [pc, #144]	; (20d50 <sensors_start+0xc8>)
		LOG_ERR("Environmental sensors init failed, error: %d", err);
   20cc0:	4926      	ldr	r1, [pc, #152]	; (20d5c <sensors_start+0xd4>)
   20cc2:	1a9b      	subs	r3, r3, r2
   20cc4:	08db      	lsrs	r3, r3, #3
   20cc6:	019b      	lsls	r3, r3, #6
   20cc8:	4602      	mov	r2, r0
   20cca:	f043 0001 	orr.w	r0, r3, #1
   20cce:	f01c fb17 	bl	3d300 <log_string_sync>
	err = modem_info_init();
   20cd2:	f00b fb65 	bl	2c3a0 <modem_info_init>
	if (err) {
   20cd6:	b338      	cbz	r0, 20d28 <sensors_start+0xa0>
   20cd8:	4a1c      	ldr	r2, [pc, #112]	; (20d4c <sensors_start+0xc4>)
   20cda:	4b1d      	ldr	r3, [pc, #116]	; (20d50 <sensors_start+0xc8>)
		LOG_ERR("Modem info could not be established: %d", err);
   20cdc:	4920      	ldr	r1, [pc, #128]	; (20d60 <sensors_start+0xd8>)
   20cde:	1a9b      	subs	r3, r3, r2
   20ce0:	08db      	lsrs	r3, r3, #3
   20ce2:	019b      	lsls	r3, r3, #6
   20ce4:	4602      	mov	r2, r0
   20ce6:	f043 0001 	orr.w	r0, r3, #1
   20cea:	f01c fb09 	bl	3d300 <log_string_sync>
	k_work_submit_to_queue(&application_work_q, &device_status_work);
   20cee:	481d      	ldr	r0, [pc, #116]	; (20d64 <sensors_start+0xdc>)
   20cf0:	f7ff f97a 	bl	1ffe8 <k_work_submit_to_queue.constprop.0>
	err = gps_control_init(&application_work_q, gps_handler);
   20cf4:	491c      	ldr	r1, [pc, #112]	; (20d68 <sensors_start+0xe0>)
   20cf6:	4814      	ldr	r0, [pc, #80]	; (20d48 <sensors_start+0xc0>)
   20cf8:	f001 fb42 	bl	22380 <gps_control_init>
	if (err) {
   20cfc:	b148      	cbz	r0, 20d12 <sensors_start+0x8a>
   20cfe:	4814      	ldr	r0, [pc, #80]	; (20d50 <sensors_start+0xc8>)
   20d00:	4b12      	ldr	r3, [pc, #72]	; (20d4c <sensors_start+0xc4>)
		LOG_ERR("GPS could not be initialized");
   20d02:	491a      	ldr	r1, [pc, #104]	; (20d6c <sensors_start+0xe4>)
   20d04:	1ac0      	subs	r0, r0, r3
   20d06:	08c0      	lsrs	r0, r0, #3
   20d08:	0180      	lsls	r0, r0, #6
   20d0a:	f040 0001 	orr.w	r0, r0, #1
   20d0e:	f01c faf7 	bl	3d300 <log_string_sync>
		switch (cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS)) {
   20d12:	2000      	movs	r0, #0
   20d14:	f001 f89e 	bl	21e54 <cloud_get_channel_enable_state>
		set_gps_enable(start_gps);
   20d18:	1e43      	subs	r3, r0, #1
   20d1a:	4258      	negs	r0, r3
   20d1c:	4158      	adcs	r0, r3
   20d1e:	f7fe ffa7 	bl	1fc70 <set_gps_enable>
		started = true;
   20d22:	2301      	movs	r3, #1
   20d24:	7023      	strb	r3, [r4, #0]
}
   20d26:	bd10      	pop	{r4, pc}
	modem_info_params_init(&modem_param);
   20d28:	4811      	ldr	r0, [pc, #68]	; (20d70 <sensors_start+0xe8>)
   20d2a:	f00b fb7d 	bl	2c428 <modem_info_params_init>
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   20d2e:	220c      	movs	r2, #12
   20d30:	4b10      	ldr	r3, [pc, #64]	; (20d74 <sensors_start+0xec>)
	modem_info_rsrp_register(modem_rsrp_handler);
   20d32:	4811      	ldr	r0, [pc, #68]	; (20d78 <sensors_start+0xf0>)
	signal_strength_cloud_data.type = CLOUD_CHANNEL_LTE_LINK_RSRP;
   20d34:	701a      	strb	r2, [r3, #0]
	signal_strength_cloud_data.tag = 0x1;
   20d36:	2201      	movs	r2, #1
   20d38:	60da      	str	r2, [r3, #12]
	modem_info_rsrp_register(modem_rsrp_handler);
   20d3a:	f00b fb03 	bl	2c344 <modem_info_rsrp_register>
   20d3e:	e7d6      	b.n	20cee <sensors_start+0x66>
   20d40:	2001ebcf 	.word	0x2001ebcf
   20d44:	00020119 	.word	0x00020119
   20d48:	20015c08 	.word	0x20015c08
   20d4c:	0004339c 	.word	0x0004339c
   20d50:	000433ac 	.word	0x000433ac
   20d54:	00044a5c 	.word	0x00044a5c
   20d58:	000206a5 	.word	0x000206a5
   20d5c:	00044a81 	.word	0x00044a81
   20d60:	00044aae 	.word	0x00044aae
   20d64:	20018c04 	.word	0x20018c04
   20d68:	00020159 	.word	0x00020159
   20d6c:	00044ad6 	.word	0x00044ad6
   20d70:	20015e20 	.word	0x20015e20
   20d74:	20016768 	.word	0x20016768
   20d78:	0001ffa5 	.word	0x0001ffa5

00020d7c <on_pairing_done>:
{
   20d7c:	b510      	push	{r4, lr}
	if (atomic_get(&cloud_association) ==
   20d7e:	4814      	ldr	r0, [pc, #80]	; (20dd0 <on_pairing_done+0x54>)
   20d80:	f01b ff62 	bl	3cc48 <atomic_get>
   20d84:	2801      	cmp	r0, #1
   20d86:	d11d      	bne.n	20dc4 <on_pairing_done+0x48>
		k_delayed_work_cancel(&cycle_cloud_connection_work);
   20d88:	4812      	ldr	r0, [pc, #72]	; (20dd4 <on_pairing_done+0x58>)
   20d8a:	f018 fde9 	bl	39960 <k_delayed_work_cancel>
   20d8e:	4c12      	ldr	r4, [pc, #72]	; (20dd8 <on_pairing_done+0x5c>)
   20d90:	4b12      	ldr	r3, [pc, #72]	; (20ddc <on_pairing_done+0x60>)
		LOG_INF("Device associated with cloud.");
   20d92:	4913      	ldr	r1, [pc, #76]	; (20de0 <on_pairing_done+0x64>)
   20d94:	1ae4      	subs	r4, r4, r3
   20d96:	08e4      	lsrs	r4, r4, #3
   20d98:	01a4      	lsls	r4, r4, #6
   20d9a:	f044 0403 	orr.w	r4, r4, #3
   20d9e:	4620      	mov	r0, r4
   20da0:	f01c faae 	bl	3d300 <log_string_sync>
		LOG_INF("Reconnecting for cloud policy to take effect.");
   20da4:	4620      	mov	r0, r4
   20da6:	490f      	ldr	r1, [pc, #60]	; (20de4 <on_pairing_done+0x68>)
   20da8:	f01c faaa 	bl	3d300 <log_string_sync>
		atomic_set(&cloud_association,
   20dac:	2103      	movs	r1, #3
   20dae:	4808      	ldr	r0, [pc, #32]	; (20dd0 <on_pairing_done+0x54>)
   20db0:	f01b ff42 	bl	3cc38 <atomic_set>
}
   20db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   20db8:	2200      	movs	r2, #0
   20dba:	2300      	movs	r3, #0
   20dbc:	4905      	ldr	r1, [pc, #20]	; (20dd4 <on_pairing_done+0x58>)
   20dbe:	480a      	ldr	r0, [pc, #40]	; (20de8 <on_pairing_done+0x6c>)
   20dc0:	f018 bd44 	b.w	3984c <k_delayed_work_submit_to_queue>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   20dc4:	2102      	movs	r1, #2
}
   20dc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_PAIRED);
   20dca:	4801      	ldr	r0, [pc, #4]	; (20dd0 <on_pairing_done+0x54>)
   20dcc:	f01b bf34 	b.w	3cc38 <atomic_set>
   20dd0:	20018bf8 	.word	0x20018bf8
   20dd4:	20015d58 	.word	0x20015d58
   20dd8:	000433ac 	.word	0x000433ac
   20ddc:	0004339c 	.word	0x0004339c
   20de0:	00044af3 	.word	0x00044af3
   20de4:	00044b11 	.word	0x00044b11
   20de8:	20015c08 	.word	0x20015c08

00020dec <cloud_event_handler>:
{
   20dec:	b570      	push	{r4, r5, r6, lr}
   20dee:	4b81      	ldr	r3, [pc, #516]	; (20ff4 <cloud_event_handler+0x208>)
   20df0:	4c81      	ldr	r4, [pc, #516]	; (20ff8 <cloud_event_handler+0x20c>)
	switch (evt->type) {
   20df2:	780a      	ldrb	r2, [r1, #0]
   20df4:	1ae4      	subs	r4, r4, r3
   20df6:	08e4      	lsrs	r4, r4, #3
{
   20df8:	460d      	mov	r5, r1
   20dfa:	01a4      	lsls	r4, r4, #6
   20dfc:	2a0e      	cmp	r2, #14
   20dfe:	f200 80f6 	bhi.w	20fee <cloud_event_handler+0x202>
   20e02:	e8df f012 	tbh	[pc, r2, lsl #1]
   20e06:	000f      	.short	0x000f
   20e08:	000f000f 	.word	0x000f000f
   20e0c:	00970086 	.word	0x00970086
   20e10:	00a0009e 	.word	0x00a0009e
   20e14:	00df00bb 	.word	0x00df00bb
   20e18:	00e800f4 	.word	0x00e800f4
   20e1c:	00f400f4 	.word	0x00f400f4
   20e20:	00e600f4 	.word	0x00e600f4
	if (evt->type == CLOUD_EVT_CONNECTING) {
   20e24:	b9a2      	cbnz	r2, 20e50 <cloud_event_handler+0x64>
		LOG_INF("CLOUD_EVT_CONNECTING");
   20e26:	4975      	ldr	r1, [pc, #468]	; (20ffc <cloud_event_handler+0x210>)
   20e28:	f044 0003 	orr.w	r0, r4, #3
   20e2c:	f01c fa68 	bl	3d300 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTING);
   20e30:	f44f 6000 	mov.w	r0, #2048	; 0x800
   20e34:	f000 fafc 	bl	21430 <ui_led_set_pattern>
		k_delayed_work_cancel(&cloud_reboot_work);
   20e38:	4871      	ldr	r0, [pc, #452]	; (21000 <cloud_event_handler+0x214>)
   20e3a:	f018 fd91 	bl	39960 <k_delayed_work_cancel>
		if (evt->data.err != CLOUD_CONNECT_RES_SUCCESS) {
   20e3e:	6868      	ldr	r0, [r5, #4]
   20e40:	2800      	cmp	r0, #0
   20e42:	f000 80d6 	beq.w	20ff2 <cloud_event_handler+0x206>
}
   20e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			cloud_connect_error_handler(evt->data.err);
   20e4a:	b240      	sxtb	r0, r0
   20e4c:	f7ff bdde 	b.w	20a0c <cloud_connect_error_handler>
	} else if (evt->type == CLOUD_EVT_CONNECTED) {
   20e50:	2a01      	cmp	r2, #1
   20e52:	d112      	bne.n	20e7a <cloud_event_handler+0x8e>
		LOG_INF("CLOUD_EVT_CONNECTED");
   20e54:	496b      	ldr	r1, [pc, #428]	; (21004 <cloud_event_handler+0x218>)
   20e56:	f044 0003 	orr.w	r0, r4, #3
   20e5a:	f01c fa51 	bl	3d300 <log_string_sync>
		k_delayed_work_cancel(&cloud_reboot_work);
   20e5e:	4868      	ldr	r0, [pc, #416]	; (21000 <cloud_event_handler+0x214>)
   20e60:	f018 fd7e 	bl	39960 <k_delayed_work_cancel>
	return z_impl_k_sem_take(sem, timeout);
   20e64:	2200      	movs	r2, #0
   20e66:	2300      	movs	r3, #0
   20e68:	4867      	ldr	r0, [pc, #412]	; (21008 <cloud_event_handler+0x21c>)
   20e6a:	f018 fa67 	bl	3933c <z_impl_k_sem_take>
}
   20e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set(&cloud_connect_attempts, 0);
   20e72:	2100      	movs	r1, #0
   20e74:	4865      	ldr	r0, [pc, #404]	; (2100c <cloud_event_handler+0x220>)
   20e76:	f01b bedf 	b.w	3cc38 <atomic_set>
		LOG_INF("CLOUD_EVT_DISCONNECTED: %d", evt->data.err);
   20e7a:	f044 0603 	orr.w	r6, r4, #3
   20e7e:	684a      	ldr	r2, [r1, #4]
   20e80:	4630      	mov	r0, r6
   20e82:	4963      	ldr	r1, [pc, #396]	; (21010 <cloud_event_handler+0x224>)
   20e84:	f01c fa3c 	bl	3d300 <log_string_sync>
		ui_led_set_pattern(UI_LTE_CONNECTED);
   20e88:	2004      	movs	r0, #4
   20e8a:	f000 fad1 	bl	21430 <ui_led_set_pattern>
		switch (evt->data.err) {
   20e8e:	686b      	ldr	r3, [r5, #4]
   20e90:	2b01      	cmp	r3, #1
   20e92:	d023      	beq.n	20edc <cloud_event_handler+0xf0>
   20e94:	2b02      	cmp	r3, #2
   20e96:	d003      	beq.n	20ea0 <cloud_event_handler+0xb4>
   20e98:	b13b      	cbz	r3, 20eaa <cloud_event_handler+0xbe>
		int32_t connect_wait_s = CONFIG_CLOUD_CONNECT_RETRY_DELAY;
   20e9a:	f44f 74f0 	mov.w	r4, #480	; 0x1e0
   20e9e:	e00a      	b.n	20eb6 <cloud_event_handler+0xca>
			LOG_INF("Cloud connection closed.");
   20ea0:	4630      	mov	r0, r6
   20ea2:	495c      	ldr	r1, [pc, #368]	; (21014 <cloud_event_handler+0x228>)
				LOG_INF("or if the device has been removed from nRF Cloud.");
   20ea4:	f01c fa2c 	bl	3d300 <log_string_sync>
   20ea8:	e7f7      	b.n	20e9a <cloud_event_handler+0xae>
			if (atomic_get(&cloud_association) ==
   20eaa:	485b      	ldr	r0, [pc, #364]	; (21018 <cloud_event_handler+0x22c>)
   20eac:	f01b fecc 	bl	3cc48 <atomic_get>
   20eb0:	2803      	cmp	r0, #3
   20eb2:	d108      	bne.n	20ec6 <cloud_event_handler+0xda>
				connect_wait_s = 10;
   20eb4:	240a      	movs	r4, #10
	z_impl_k_sem_give(sem);
   20eb6:	4854      	ldr	r0, [pc, #336]	; (21008 <cloud_event_handler+0x21c>)
   20eb8:	f018 f9fc 	bl	392b4 <z_impl_k_sem_give>
		connect_to_cloud(connect_wait_s);
   20ebc:	4620      	mov	r0, r4
}
   20ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		connect_to_cloud(connect_wait_s);
   20ec2:	f7ff be79 	b.w	20bb8 <connect_to_cloud>
			    atomic_get(&cloud_association) ==
   20ec6:	4854      	ldr	r0, [pc, #336]	; (21018 <cloud_event_handler+0x22c>)
   20ec8:	f01b febe 	bl	3cc48 <atomic_get>
			    CLOUD_ASSOCIATION_STATE_RECONNECT ||
   20ecc:	2801      	cmp	r0, #1
   20ece:	d0f1      	beq.n	20eb4 <cloud_event_handler+0xc8>
			    (atomic_get(&carrier_requested_disconnect))) {
   20ed0:	4852      	ldr	r0, [pc, #328]	; (2101c <cloud_event_handler+0x230>)
   20ed2:	f01b feb9 	bl	3cc48 <atomic_get>
			    CLOUD_ASSOCIATION_STATE_REQUESTED ||
   20ed6:	2800      	cmp	r0, #0
   20ed8:	d1ec      	bne.n	20eb4 <cloud_event_handler+0xc8>
   20eda:	e7de      	b.n	20e9a <cloud_event_handler+0xae>
			LOG_INF("Disconnected by the cloud.");
   20edc:	4630      	mov	r0, r6
   20ede:	4950      	ldr	r1, [pc, #320]	; (21020 <cloud_event_handler+0x234>)
   20ee0:	f01c fa0e 	bl	3d300 <log_string_sync>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   20ee4:	4849      	ldr	r0, [pc, #292]	; (2100c <cloud_event_handler+0x220>)
   20ee6:	f01b feaf 	bl	3cc48 <atomic_get>
   20eea:	2801      	cmp	r0, #1
   20eec:	d108      	bne.n	20f00 <cloud_event_handler+0x114>
			    (atomic_get(&cloud_association) ==
   20eee:	484a      	ldr	r0, [pc, #296]	; (21018 <cloud_event_handler+0x22c>)
   20ef0:	f01b feaa 	bl	3cc48 <atomic_get>
			if ((atomic_get(&cloud_connect_attempts) == 1) &&
   20ef4:	b920      	cbnz	r0, 20f00 <cloud_event_handler+0x114>
				LOG_INF("This can occur during initial nRF Cloud provisioning.");
   20ef6:	4630      	mov	r0, r6
   20ef8:	494a      	ldr	r1, [pc, #296]	; (21024 <cloud_event_handler+0x238>)
   20efa:	f01c fa01 	bl	3d300 <log_string_sync>
   20efe:	e7d9      	b.n	20eb4 <cloud_event_handler+0xc8>
				LOG_INF("This can occur if the device has the wrong nRF Cloud certificates");
   20f00:	f044 0403 	orr.w	r4, r4, #3
   20f04:	4620      	mov	r0, r4
   20f06:	4948      	ldr	r1, [pc, #288]	; (21028 <cloud_event_handler+0x23c>)
   20f08:	f01c f9fa 	bl	3d300 <log_string_sync>
				LOG_INF("or if the device has been removed from nRF Cloud.");
   20f0c:	4620      	mov	r0, r4
   20f0e:	4947      	ldr	r1, [pc, #284]	; (2102c <cloud_event_handler+0x240>)
   20f10:	e7c8      	b.n	20ea4 <cloud_event_handler+0xb8>
		LOG_INF("CLOUD_EVT_READY");
   20f12:	4947      	ldr	r1, [pc, #284]	; (21030 <cloud_event_handler+0x244>)
   20f14:	f044 0003 	orr.w	r0, r4, #3
   20f18:	f01c f9f2 	bl	3d300 <log_string_sync>
		ui_led_set_pattern(UI_CLOUD_CONNECTED);
   20f1c:	2008      	movs	r0, #8
   20f1e:	f000 fa87 	bl	21430 <ui_led_set_pattern>
		atomic_set(&cloud_association, CLOUD_ASSOCIATION_STATE_READY);
   20f22:	2104      	movs	r1, #4
   20f24:	483c      	ldr	r0, [pc, #240]	; (21018 <cloud_event_handler+0x22c>)
   20f26:	f01b fe87 	bl	3cc38 <atomic_set>
}
   20f2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_work_submit_to_queue(&application_work_q, &sensors_start_work);
   20f2e:	4841      	ldr	r0, [pc, #260]	; (21034 <cloud_event_handler+0x248>)
   20f30:	f7ff b85a 	b.w	1ffe8 <k_work_submit_to_queue.constprop.0>
		LOG_INF("CLOUD_EVT_ERROR");
   20f34:	4940      	ldr	r1, [pc, #256]	; (21038 <cloud_event_handler+0x24c>)
		LOG_INF("CLOUD_EVT_DATA_SENT");
   20f36:	f044 0003 	orr.w	r0, r4, #3
}
   20f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_INF("CLOUD_EVT_DATA_SENT");
   20f3e:	f01c b9df 	b.w	3d300 <log_string_sync>
   20f42:	493e      	ldr	r1, [pc, #248]	; (2103c <cloud_event_handler+0x250>)
   20f44:	e7f7      	b.n	20f36 <cloud_event_handler+0x14a>
		LOG_INF("CLOUD_EVT_DATA_RECEIVED");
   20f46:	f044 0603 	orr.w	r6, r4, #3
   20f4a:	4630      	mov	r0, r6
   20f4c:	493c      	ldr	r1, [pc, #240]	; (21040 <cloud_event_handler+0x254>)
   20f4e:	f01c f9d7 	bl	3d300 <log_string_sync>
		err = cloud_decode_command(evt->data.msg.buf);
   20f52:	6868      	ldr	r0, [r5, #4]
   20f54:	f000 fdf4 	bl	21b40 <cloud_decode_command>
		if (err == 0) {
   20f58:	2800      	cmp	r0, #0
   20f5a:	d04a      	beq.n	20ff2 <cloud_event_handler+0x206>
		err = gps_process_agps_data(evt->data.msg.buf,
   20f5c:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   20f60:	f005 fa28 	bl	263b4 <gps_process_agps_data>
		if (err) {
   20f64:	4602      	mov	r2, r0
   20f66:	b130      	cbz	r0, 20f76 <cloud_event_handler+0x18a>
			LOG_WRN("Data was not valid A-GPS data, err: %d", err);
   20f68:	4936      	ldr	r1, [pc, #216]	; (21044 <cloud_event_handler+0x258>)
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   20f6a:	f044 0002 	orr.w	r0, r4, #2
}
   20f6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   20f72:	f01c b9c5 	b.w	3d300 <log_string_sync>
		LOG_INF("A-GPS data processed");
   20f76:	4630      	mov	r0, r6
   20f78:	4933      	ldr	r1, [pc, #204]	; (21048 <cloud_event_handler+0x25c>)
   20f7a:	e7de      	b.n	20f3a <cloud_event_handler+0x14e>
		LOG_INF("CLOUD_EVT_PAIR_REQUEST");
   20f7c:	f044 0403 	orr.w	r4, r4, #3
   20f80:	4620      	mov	r0, r4
   20f82:	4932      	ldr	r1, [pc, #200]	; (2104c <cloud_event_handler+0x260>)
   20f84:	f01c f9bc 	bl	3d300 <log_string_sync>
	if (atomic_get(&cloud_association) !=
   20f88:	4823      	ldr	r0, [pc, #140]	; (21018 <cloud_event_handler+0x22c>)
   20f8a:	f01b fe5d 	bl	3cc48 <atomic_get>
   20f8e:	2801      	cmp	r0, #1
   20f90:	d02f      	beq.n	20ff2 <cloud_event_handler+0x206>
		atomic_set(&cloud_association,
   20f92:	2101      	movs	r1, #1
   20f94:	4820      	ldr	r0, [pc, #128]	; (21018 <cloud_event_handler+0x22c>)
   20f96:	f01b fe4f 	bl	3cc38 <atomic_set>
		ui_led_set_pattern(UI_CLOUD_PAIRING);
   20f9a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
   20f9e:	f000 fa47 	bl	21430 <ui_led_set_pattern>
		LOG_INF("Add device to cloud account.");
   20fa2:	4620      	mov	r0, r4
   20fa4:	492a      	ldr	r1, [pc, #168]	; (21050 <cloud_event_handler+0x264>)
   20fa6:	f01c f9ab 	bl	3d300 <log_string_sync>
		LOG_INF("Waiting for cloud association...");
   20faa:	4620      	mov	r0, r4
   20fac:	4929      	ldr	r1, [pc, #164]	; (21054 <cloud_event_handler+0x268>)
   20fae:	f01c f9a7 	bl	3d300 <log_string_sync>
}
   20fb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		k_delayed_work_submit_to_queue(&application_work_q,
   20fb6:	f44f 0216 	mov.w	r2, #9830400	; 0x960000
   20fba:	2300      	movs	r3, #0
   20fbc:	4926      	ldr	r1, [pc, #152]	; (21058 <cloud_event_handler+0x26c>)
   20fbe:	4827      	ldr	r0, [pc, #156]	; (2105c <cloud_event_handler+0x270>)
   20fc0:	f018 bc44 	b.w	3984c <k_delayed_work_submit_to_queue>
		LOG_INF("CLOUD_EVT_PAIR_DONE");
   20fc4:	4926      	ldr	r1, [pc, #152]	; (21060 <cloud_event_handler+0x274>)
   20fc6:	f044 0003 	orr.w	r0, r4, #3
   20fca:	f01c f999 	bl	3d300 <log_string_sync>
		on_pairing_done();
   20fce:	f7ff fed5 	bl	20d7c <on_pairing_done>
		LOG_INF("CLOUD_EVT_FOTA_ERROR");
   20fd2:	4924      	ldr	r1, [pc, #144]	; (21064 <cloud_event_handler+0x278>)
   20fd4:	e7af      	b.n	20f36 <cloud_event_handler+0x14a>
		LOG_INF("CLOUD_EVT_FOTA_DONE");
   20fd6:	f044 0003 	orr.w	r0, r4, #3
   20fda:	4923      	ldr	r1, [pc, #140]	; (21068 <cloud_event_handler+0x27c>)
   20fdc:	f01c f990 	bl	3d300 <log_string_sync>
		lte_lc_power_off();
   20fe0:	f00a fc6e 	bl	2b8c0 <lte_lc_power_off>
}
   20fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		sys_reboot(SYS_REBOOT_COLD);
   20fe8:	2001      	movs	r0, #1
   20fea:	f004 bd5d 	b.w	25aa8 <sys_reboot>
		LOG_WRN("Unknown cloud event type: %d", evt->type);
   20fee:	491f      	ldr	r1, [pc, #124]	; (2106c <cloud_event_handler+0x280>)
   20ff0:	e7bb      	b.n	20f6a <cloud_event_handler+0x17e>
}
   20ff2:	bd70      	pop	{r4, r5, r6, pc}
   20ff4:	0004339c 	.word	0x0004339c
   20ff8:	000433ac 	.word	0x000433ac
   20ffc:	00044b3f 	.word	0x00044b3f
   21000:	20015d28 	.word	0x20015d28
   21004:	00044b54 	.word	0x00044b54
   21008:	20015b58 	.word	0x20015b58
   2100c:	20018c00 	.word	0x20018c00
   21010:	00044b68 	.word	0x00044b68
   21014:	00044b83 	.word	0x00044b83
   21018:	20018bf8 	.word	0x20018bf8
   2101c:	20018bf4 	.word	0x20018bf4
   21020:	00044b9c 	.word	0x00044b9c
   21024:	00044bb7 	.word	0x00044bb7
   21028:	00044bed 	.word	0x00044bed
   2102c:	00044c2f 	.word	0x00044c2f
   21030:	0004854b 	.word	0x0004854b
   21034:	20018c44 	.word	0x20018c44
   21038:	00044c61 	.word	0x00044c61
   2103c:	00044c71 	.word	0x00044c71
   21040:	00044c85 	.word	0x00044c85
   21044:	00044c9d 	.word	0x00044c9d
   21048:	00044cc4 	.word	0x00044cc4
   2104c:	00044cd9 	.word	0x00044cd9
   21050:	00044cf0 	.word	0x00044cf0
   21054:	00044d0d 	.word	0x00044d0d
   21058:	20015d58 	.word	0x20015d58
   2105c:	20015c08 	.word	0x20015c08
   21060:	00044d2e 	.word	0x00044d2e
   21064:	00044d42 	.word	0x00044d42
   21068:	00048606 	.word	0x00048606
   2106c:	00044d57 	.word	0x00044d57

00021070 <main>:

void main(void)
{
   21070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21074:	4b68      	ldr	r3, [pc, #416]	; (21218 <main+0x1a8>)
   21076:	4c69      	ldr	r4, [pc, #420]	; (2121c <main+0x1ac>)
	LOG_INF("Asset tracker started");
   21078:	4969      	ldr	r1, [pc, #420]	; (21220 <main+0x1b0>)
   2107a:	1ae4      	subs	r4, r4, r3
   2107c:	08e4      	lsrs	r4, r4, #3
   2107e:	01a4      	lsls	r4, r4, #6
   21080:	f044 0003 	orr.w	r0, r4, #3
   21084:	f01c f93c 	bl	3d300 <log_string_sync>
	k_work_q_start(&application_work_q, application_stack_area,
   21088:	f04f 33ff 	mov.w	r3, #4294967295
   2108c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   21090:	4964      	ldr	r1, [pc, #400]	; (21224 <main+0x1b4>)
   21092:	4865      	ldr	r0, [pc, #404]	; (21228 <main+0x1b8>)
   21094:	f018 fbb2 	bl	397fc <k_work_q_start>
		       K_THREAD_STACK_SIZEOF(application_stack_area),
		       CONFIG_APPLICATION_WORKQUEUE_PRIORITY);
	if (IS_ENABLED(CONFIG_WATCHDOG)) {
		watchdog_init_and_start(&application_work_q);
   21098:	4863      	ldr	r0, [pc, #396]	; (21228 <main+0x1b8>)
   2109a:	f001 fbf7 	bl	2288c <watchdog_init_and_start>
	}

#if defined(CONFIG_USE_UI_MODULE)
	ui_init(ui_evt_handler);
   2109e:	4863      	ldr	r0, [pc, #396]	; (2122c <main+0x1bc>)
   210a0:	f000 f9cc 	bl	2143c <ui_init>
	cloud_backend = cloud_get_binding("NRF_CLOUD");
   210a4:	4862      	ldr	r0, [pc, #392]	; (21230 <main+0x1c0>)
   210a6:	f00b fe67 	bl	2cd78 <cloud_get_binding>
   210aa:	4d62      	ldr	r5, [pc, #392]	; (21234 <main+0x1c4>)
   210ac:	6028      	str	r0, [r5, #0]
	__ASSERT(cloud_backend != NULL, "nRF Cloud backend not found");
   210ae:	b970      	cbnz	r0, 210ce <main+0x5e>
   210b0:	4961      	ldr	r1, [pc, #388]	; (21238 <main+0x1c8>)
   210b2:	f240 634d 	movw	r3, #1613	; 0x64d
   210b6:	4a61      	ldr	r2, [pc, #388]	; (2123c <main+0x1cc>)
   210b8:	4861      	ldr	r0, [pc, #388]	; (21240 <main+0x1d0>)
   210ba:	f01b fe5c 	bl	3cd76 <printk>
   210be:	4861      	ldr	r0, [pc, #388]	; (21244 <main+0x1d4>)
   210c0:	f01b fe59 	bl	3cd76 <printk>
   210c4:	f240 614d 	movw	r1, #1613	; 0x64d
   210c8:	485c      	ldr	r0, [pc, #368]	; (2123c <main+0x1cc>)
   210ca:	f01c f908 	bl	3d2de <assert_post_action>
	ret = cloud_init(cloud_backend, cloud_event_handler);
   210ce:	6828      	ldr	r0, [r5, #0]
	if (backend == NULL || backend->api == NULL ||
   210d0:	2800      	cmp	r0, #0
   210d2:	f000 808e 	beq.w	211f2 <main+0x182>
   210d6:	6803      	ldr	r3, [r0, #0]
   210d8:	2b00      	cmp	r3, #0
   210da:	f000 808a 	beq.w	211f2 <main+0x182>
	    backend->api->init == NULL) {
   210de:	681b      	ldr	r3, [r3, #0]
	if (backend == NULL || backend->api == NULL ||
   210e0:	2b00      	cmp	r3, #0
   210e2:	f000 8086 	beq.w	211f2 <main+0x182>
	return backend->api->init(backend, handler);
   210e6:	4958      	ldr	r1, [pc, #352]	; (21248 <main+0x1d8>)
   210e8:	4798      	blx	r3
	if (ret) {
   210ea:	4605      	mov	r5, r0
   210ec:	b140      	cbz	r0, 21100 <main+0x90>
		LOG_ERR("Cloud backend could not be initialized, error: %d",
   210ee:	f044 0001 	orr.w	r0, r4, #1
   210f2:	462a      	mov	r2, r5
   210f4:	4955      	ldr	r1, [pc, #340]	; (2124c <main+0x1dc>)
   210f6:	f01c f903 	bl	3d300 <log_string_sync>
		cloud_error_handler(ret);
   210fa:	4628      	mov	r0, r5
   210fc:	f01b fdba 	bl	3cc74 <cloud_error_handler>
	ret = cloud_decode_init(cloud_cmd_handler);
   21100:	4853      	ldr	r0, [pc, #332]	; (21250 <main+0x1e0>)
   21102:	f000 fe89 	bl	21e18 <cloud_decode_init>
	if (ret) {
   21106:	4605      	mov	r5, r0
   21108:	b140      	cbz	r0, 2111c <main+0xac>
		LOG_ERR("Cloud command decoder could not be initialized, error: %d",
   2110a:	4602      	mov	r2, r0
   2110c:	4951      	ldr	r1, [pc, #324]	; (21254 <main+0x1e4>)
   2110e:	f044 0001 	orr.w	r0, r4, #1
   21112:	f01c f8f5 	bl	3d300 <log_string_sync>
		cloud_error_handler(ret);
   21116:	4628      	mov	r0, r5
   21118:	f01b fdac 	bl	3cc74 <cloud_error_handler>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2111c:	2500      	movs	r5, #0
   2111e:	4b4e      	ldr	r3, [pc, #312]	; (21258 <main+0x1e8>)
   21120:	4a4e      	ldr	r2, [pc, #312]	; (2125c <main+0x1ec>)
   21122:	601d      	str	r5, [r3, #0]
   21124:	e9c3 2501 	strd	r2, r5, [r3, #4]
   21128:	4b4d      	ldr	r3, [pc, #308]	; (21260 <main+0x1f0>)
   2112a:	4a4e      	ldr	r2, [pc, #312]	; (21264 <main+0x1f4>)
   2112c:	601d      	str	r5, [r3, #0]
   2112e:	e9c3 2501 	strd	r2, r5, [r3, #4]
   21132:	4b4d      	ldr	r3, [pc, #308]	; (21268 <main+0x1f8>)
   21134:	4a4d      	ldr	r2, [pc, #308]	; (2126c <main+0x1fc>)
	k_delayed_work_init(&send_agps_request_work, send_agps_request);
   21136:	494e      	ldr	r1, [pc, #312]	; (21270 <main+0x200>)
   21138:	484e      	ldr	r0, [pc, #312]	; (21274 <main+0x204>)
   2113a:	e9c3 2501 	strd	r2, r5, [r3, #4]
   2113e:	601d      	str	r5, [r3, #0]
   21140:	f01b fd68 	bl	3cc14 <k_delayed_work_init>
	k_delayed_work_init(&long_press_button_work, long_press_handler);
   21144:	494c      	ldr	r1, [pc, #304]	; (21278 <main+0x208>)
   21146:	484d      	ldr	r0, [pc, #308]	; (2127c <main+0x20c>)
   21148:	f01b fd64 	bl	3cc14 <k_delayed_work_init>
	k_delayed_work_init(&cloud_reboot_work, cloud_reboot_handler);
   2114c:	494c      	ldr	r1, [pc, #304]	; (21280 <main+0x210>)
   2114e:	484d      	ldr	r0, [pc, #308]	; (21284 <main+0x214>)
   21150:	f01b fd60 	bl	3cc14 <k_delayed_work_init>
	k_delayed_work_init(&cycle_cloud_connection_work,
   21154:	494c      	ldr	r1, [pc, #304]	; (21288 <main+0x218>)
   21156:	484d      	ldr	r0, [pc, #308]	; (2128c <main+0x21c>)
   21158:	f01b fd5c 	bl	3cc14 <k_delayed_work_init>
	k_delayed_work_init(&device_config_work, device_config_send);
   2115c:	494c      	ldr	r1, [pc, #304]	; (21290 <main+0x220>)
   2115e:	484d      	ldr	r0, [pc, #308]	; (21294 <main+0x224>)
   21160:	f01b fd58 	bl	3cc14 <k_delayed_work_init>
	k_delayed_work_init(&cloud_connect_work, cloud_connect_work_fn);
   21164:	494c      	ldr	r1, [pc, #304]	; (21298 <main+0x228>)
   21166:	484d      	ldr	r0, [pc, #308]	; (2129c <main+0x22c>)
   21168:	f01b fd54 	bl	3cc14 <k_delayed_work_init>
   2116c:	4b4c      	ldr	r3, [pc, #304]	; (212a0 <main+0x230>)
   2116e:	4a4d      	ldr	r2, [pc, #308]	; (212a4 <main+0x234>)
   21170:	601d      	str	r5, [r3, #0]
   21172:	e9c3 2501 	strd	r2, r5, [r3, #4]
   21176:	4b4c      	ldr	r3, [pc, #304]	; (212a8 <main+0x238>)
   21178:	4a4c      	ldr	r2, [pc, #304]	; (212ac <main+0x23c>)
   2117a:	601d      	str	r5, [r3, #0]
   2117c:	e9c3 2501 	strd	r2, r5, [r3, #4]
   21180:	4b4b      	ldr	r3, [pc, #300]	; (212b0 <main+0x240>)
   21182:	4a4c      	ldr	r2, [pc, #304]	; (212b4 <main+0x244>)
	k_delayed_work_init(&rsrp_work, modem_rsrp_data_send);
   21184:	494c      	ldr	r1, [pc, #304]	; (212b8 <main+0x248>)
   21186:	484d      	ldr	r0, [pc, #308]	; (212bc <main+0x24c>)
   21188:	e9c3 2501 	strd	r2, r5, [r3, #4]
   2118c:	601d      	str	r5, [r3, #0]
   2118e:	f01b fd41 	bl	3cc14 <k_delayed_work_init>

	cloud_api_init();

	work_init();
#if defined(CONFIG_LTE_LINK_CONTROL)
	lte_lc_register_handler(lte_handler);
   21192:	484b      	ldr	r0, [pc, #300]	; (212c0 <main+0x250>)
   21194:	f00a fb5a 	bl	2b84c <lte_lc_register_handler>
	LOG_INF("Connecting to LTE network.");
   21198:	4f4a      	ldr	r7, [pc, #296]	; (212c4 <main+0x254>)
	LOG_INF("This may take several minutes.");
   2119a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 212dc <main+0x26c>
		LOG_ERR("LTE link could not be established.");
   2119e:	4e4a      	ldr	r6, [pc, #296]	; (212c8 <main+0x258>)
	ui_led_set_pattern(UI_LTE_CONNECTING);
   211a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
	LOG_INF("Connecting to LTE network.");
   211a4:	f044 0903 	orr.w	r9, r4, #3
	ui_led_set_pattern(UI_LTE_CONNECTING);
   211a8:	f000 f942 	bl	21430 <ui_led_set_pattern>
	LOG_INF("Connecting to LTE network.");
   211ac:	4639      	mov	r1, r7
   211ae:	4648      	mov	r0, r9
   211b0:	f01c f8a6 	bl	3d300 <log_string_sync>
	LOG_INF("This may take several minutes.");
   211b4:	4641      	mov	r1, r8
   211b6:	4648      	mov	r0, r9
   211b8:	f01c f8a2 	bl	3d300 <log_string_sync>
	int err = lte_lc_init_and_connect();
   211bc:	f01e fd66 	bl	3fc8c <lte_lc_init_and_connect>
	if (err) {
   211c0:	4605      	mov	r5, r0
   211c2:	b1c8      	cbz	r0, 211f8 <main+0x188>
		LOG_ERR("LTE link could not be established.");
   211c4:	4631      	mov	r1, r6
   211c6:	f044 0001 	orr.w	r0, r4, #1
#endif /* defined(CONFIG_LTE_LINK_CONTROL) */
	while (modem_configure() != 0) {
		LOG_WRN("Failed to establish LTE connection.");
   211ca:	f044 0502 	orr.w	r5, r4, #2
		LOG_ERR("LTE link could not be established.");
   211ce:	f01c f897 	bl	3d300 <log_string_sync>
		LOG_WRN("Failed to establish LTE connection.");
   211d2:	4628      	mov	r0, r5
   211d4:	493d      	ldr	r1, [pc, #244]	; (212cc <main+0x25c>)
   211d6:	f01c f893 	bl	3d300 <log_string_sync>
		LOG_WRN("Will retry in %d seconds.",
   211da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   211de:	4628      	mov	r0, r5
   211e0:	493b      	ldr	r1, [pc, #236]	; (212d0 <main+0x260>)
   211e2:	f01c f88d 	bl	3d300 <log_string_sync>
	return z_impl_k_sleep(timeout);
   211e6:	2100      	movs	r1, #0
   211e8:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
   211ec:	f018 f824 	bl	39238 <z_impl_k_sleep>
   211f0:	e7d6      	b.n	211a0 <main+0x130>
		return -ENOTSUP;
   211f2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   211f6:	e77a      	b.n	210ee <main+0x7e>
	LOG_INF("Connected to LTE network.");
   211f8:	4648      	mov	r0, r9
   211fa:	4936      	ldr	r1, [pc, #216]	; (212d4 <main+0x264>)
   211fc:	f01c f880 	bl	3d300 <log_string_sync>
	ui_led_set_pattern(UI_LTE_CONNECTED);
   21200:	2004      	movs	r0, #4
   21202:	f000 f915 	bl	21430 <ui_led_set_pattern>
#if defined(CONFIG_LWM2M_CARRIER)
	LOG_INF("Waiting for LWM2M carrier to complete initialization...");
	k_sem_take(&cloud_ready_to_connect, K_FOREVER);
#endif

	date_time_update_async(date_time_event_handler);
   21206:	4834      	ldr	r0, [pc, #208]	; (212d8 <main+0x268>)
   21208:	f00b fda8 	bl	2cd5c <date_time_update_async>
	connect_to_cloud(0);
   2120c:	4628      	mov	r0, r5
}
   2120e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	connect_to_cloud(0);
   21212:	f7ff bcd1 	b.w	20bb8 <connect_to_cloud>
   21216:	bf00      	nop
   21218:	0004339c 	.word	0x0004339c
   2121c:	000433ac 	.word	0x000433ac
   21220:	00044d74 	.word	0x00044d74
   21224:	20020e68 	.word	0x20020e68
   21228:	20015c08 	.word	0x20015c08
   2122c:	0001ff4d 	.word	0x0001ff4d
   21230:	00044d8a 	.word	0x00044d8a
   21234:	20018bfc 	.word	0x20018bfc
   21238:	00044da2 	.word	0x00044da2
   2123c:	00044d94 	.word	0x00044d94
   21240:	00044dbf 	.word	0x00044dbf
   21244:	00044ddc 	.word	0x00044ddc
   21248:	00020ded 	.word	0x00020ded
   2124c:	00044dfa 	.word	0x00044dfa
   21250:	000203a9 	.word	0x000203a9
   21254:	00044e2c 	.word	0x00044e2c
   21258:	20018c44 	.word	0x20018c44
   2125c:	0003cc85 	.word	0x0003cc85
   21260:	20018c2c 	.word	0x20018c2c
   21264:	0001fe15 	.word	0x0001fe15
   21268:	20018c38 	.word	0x20018c38
   2126c:	00020541 	.word	0x00020541
   21270:	0001fe21 	.word	0x0001fe21
   21274:	20016738 	.word	0x20016738
   21278:	0001ff0d 	.word	0x0001ff0d
   2127c:	20015df0 	.word	0x20015df0
   21280:	0003cc6b 	.word	0x0003cc6b
   21284:	20015d28 	.word	0x20015d28
   21288:	0001fbd1 	.word	0x0001fbd1
   2128c:	20015d58 	.word	0x20015d58
   21290:	00020945 	.word	0x00020945
   21294:	20015d88 	.word	0x20015d88
   21298:	00020b0d 	.word	0x00020b0d
   2129c:	20015cf8 	.word	0x20015cf8
   212a0:	20018c04 	.word	0x20018c04
   212a4:	00020855 	.word	0x00020855
   212a8:	20018c10 	.word	0x20018c10
   212ac:	000207e9 	.word	0x000207e9
   212b0:	20018c1c 	.word	0x20018c1c
   212b4:	0001fec1 	.word	0x0001fec1
   212b8:	0001fd9d 	.word	0x0001fd9d
   212bc:	20016708 	.word	0x20016708
   212c0:	00020011 	.word	0x00020011
   212c4:	00044e66 	.word	0x00044e66
   212c8:	00044e81 	.word	0x00044e81
   212cc:	00044ea4 	.word	0x00044ea4
   212d0:	00044ec8 	.word	0x00044ec8
   212d4:	00044ee2 	.word	0x00044ee2
   212d8:	0001fb19 	.word	0x0001fb19
   212dc:	00045434 	.word	0x00045434

000212e0 <sensor_trigger_handler.isra.0>:
	k_delayed_work_submit_to_queue(motion_work_q, &motion_work, K_NO_WAIT);
   212e0:	4803      	ldr	r0, [pc, #12]	; (212f0 <sensor_trigger_handler.isra.0+0x10>)
   212e2:	2200      	movs	r2, #0
   212e4:	2300      	movs	r3, #0
   212e6:	4903      	ldr	r1, [pc, #12]	; (212f4 <sensor_trigger_handler.isra.0+0x14>)
   212e8:	6800      	ldr	r0, [r0, #0]
   212ea:	f018 baaf 	b.w	3984c <k_delayed_work_submit_to_queue>
   212ee:	bf00      	nop
   212f0:	20018c58 	.word	0x20018c58
   212f4:	20016780 	.word	0x20016780

000212f8 <motion_init_and_start>:
}

/**@brief Initialize motion module. */
int motion_init_and_start(struct k_work_q *work_q,
			  motion_handler_t motion_handler)
{
   212f8:	b510      	push	{r4, lr}
	if ((work_q == NULL) || (motion_handler == NULL)) {
   212fa:	b340      	cbz	r0, 2134e <motion_init_and_start+0x56>
   212fc:	b339      	cbz	r1, 2134e <motion_init_and_start+0x56>
		return -EINVAL;
	}

	int err;

	motion_work_q = work_q;
   212fe:	4b15      	ldr	r3, [pc, #84]	; (21354 <motion_init_and_start+0x5c>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   21300:	2230      	movs	r2, #48	; 0x30
   21302:	6018      	str	r0, [r3, #0]
	handler = motion_handler;
   21304:	4b14      	ldr	r3, [pc, #80]	; (21358 <motion_init_and_start+0x60>)
   21306:	6019      	str	r1, [r3, #0]
   21308:	4b14      	ldr	r3, [pc, #80]	; (2135c <motion_init_and_start+0x64>)
   2130a:	2100      	movs	r1, #0
   2130c:	4618      	mov	r0, r3
   2130e:	f020 fce6 	bl	41cde <memset>
   21312:	4a13      	ldr	r2, [pc, #76]	; (21360 <motion_init_and_start+0x68>)
   21314:	6042      	str	r2, [r0, #4]
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   21316:	4813      	ldr	r0, [pc, #76]	; (21364 <motion_init_and_start+0x6c>)
   21318:	f015 fea4 	bl	37064 <z_impl_device_get_binding>
	accel_dev = device_get_binding(CONFIG_ACCEL_DEV_NAME);
   2131c:	4b12      	ldr	r3, [pc, #72]	; (21368 <motion_init_and_start+0x70>)
   2131e:	6018      	str	r0, [r3, #0]
	if (accel_dev == NULL) {
   21320:	b118      	cbz	r0, 2132a <motion_init_and_start+0x32>

	if (err) {
		return err;
	}

	sensor_trigger_handler(NULL, NULL);
   21322:	f7ff ffdd 	bl	212e0 <sensor_trigger_handler.isra.0>
	return 0;
   21326:	2000      	movs	r0, #0
}
   21328:	bd10      	pop	{r4, pc}
   2132a:	4b10      	ldr	r3, [pc, #64]	; (2136c <motion_init_and_start+0x74>)
   2132c:	4c10      	ldr	r4, [pc, #64]	; (21370 <motion_init_and_start+0x78>)
		LOG_ERR("Could not get %s device",
   2132e:	480d      	ldr	r0, [pc, #52]	; (21364 <motion_init_and_start+0x6c>)
   21330:	1ae4      	subs	r4, r4, r3
   21332:	f01b fff8 	bl	3d326 <log_strdup>
   21336:	08e4      	lsrs	r4, r4, #3
   21338:	01a4      	lsls	r4, r4, #6
   2133a:	f044 0401 	orr.w	r4, r4, #1
   2133e:	4602      	mov	r2, r0
   21340:	490c      	ldr	r1, [pc, #48]	; (21374 <motion_init_and_start+0x7c>)
   21342:	4620      	mov	r0, r4
   21344:	f01b ffdc 	bl	3d300 <log_string_sync>
		return -ENODEV;
   21348:	f06f 0012 	mvn.w	r0, #18
   2134c:	e7ec      	b.n	21328 <motion_init_and_start+0x30>
		return -EINVAL;
   2134e:	f06f 0015 	mvn.w	r0, #21
   21352:	e7e9      	b.n	21328 <motion_init_and_start+0x30>
   21354:	20018c58 	.word	0x20018c58
   21358:	20018c54 	.word	0x20018c54
   2135c:	20016780 	.word	0x20016780
   21360:	0001d271 	.word	0x0001d271
   21364:	00044f8d 	.word	0x00044f8d
   21368:	20018c50 	.word	0x20018c50
   2136c:	0004339c 	.word	0x0004339c
   21370:	00043464 	.word	0x00043464
   21374:	00044f98 	.word	0x00044f98

00021378 <button_handler>:
}
#endif /* CONFIG_UI_LED_USE_PWM */

/**@brief Callback for button events from the DK buttons and LEDs library. */
static void button_handler(uint32_t button_states, uint32_t has_changed)
{
   21378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2137a:	4605      	mov	r5, r0
   2137c:	460c      	mov	r4, r1
				break;
			}
		}

		/* Button number has been stored, remove from bitmask. */
		has_changed &= ~(1UL << (btn_num - 1));
   2137e:	2601      	movs	r6, #1
		evt.button = btn_num;
		evt.type = (button_states & BIT(btn_num - 1))
				? UI_EVT_BUTTON_ACTIVE
				: UI_EVT_BUTTON_INACTIVE;

		callback(evt);
   21380:	4f11      	ldr	r7, [pc, #68]	; (213c8 <button_handler+0x50>)
	while (has_changed) {
   21382:	b90c      	cbnz	r4, 21388 <button_handler+0x10>
	}
}
   21384:	b003      	add	sp, #12
   21386:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21388:	2300      	movs	r3, #0
			if (has_changed & BIT(i)) {
   2138a:	1c59      	adds	r1, r3, #1
   2138c:	fa24 f303 	lsr.w	r3, r4, r3
   21390:	f013 0001 	ands.w	r0, r3, #1
   21394:	b2ca      	uxtb	r2, r1
   21396:	d103      	bne.n	213a0 <button_handler+0x28>
		for (uint8_t i = 0; i < 32; i++) {
   21398:	2920      	cmp	r1, #32
   2139a:	460b      	mov	r3, r1
   2139c:	d1f5      	bne.n	2138a <button_handler+0x12>
		btn_num = 0;
   2139e:	4602      	mov	r2, r0
		has_changed &= ~(1UL << (btn_num - 1));
   213a0:	1e53      	subs	r3, r2, #1
   213a2:	fa06 f103 	lsl.w	r1, r6, r3
				? UI_EVT_BUTTON_ACTIVE
   213a6:	fa25 f303 	lsr.w	r3, r5, r3
				: UI_EVT_BUTTON_INACTIVE;
   213aa:	43db      	mvns	r3, r3
   213ac:	f003 0301 	and.w	r3, r3, #1
		evt.button = btn_num;
   213b0:	9201      	str	r2, [sp, #4]
				: UI_EVT_BUTTON_INACTIVE;
   213b2:	f88d 3000 	strb.w	r3, [sp]
		callback(evt);
   213b6:	aa02      	add	r2, sp, #8
		has_changed &= ~(1UL << (btn_num - 1));
   213b8:	ea24 0401 	bic.w	r4, r4, r1
		callback(evt);
   213bc:	683b      	ldr	r3, [r7, #0]
   213be:	e912 0003 	ldmdb	r2, {r0, r1}
   213c2:	4798      	blx	r3
   213c4:	e7dd      	b.n	21382 <button_handler+0xa>
   213c6:	bf00      	nop
   213c8:	20018c5c 	.word	0x20018c5c

000213cc <leds_update>:
{
   213cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	led_on = !led_on;
   213d0:	4d12      	ldr	r5, [pc, #72]	; (2141c <leds_update+0x50>)
{
   213d2:	4606      	mov	r6, r0
	led_on = !led_on;
   213d4:	782a      	ldrb	r2, [r5, #0]
	led_on_mask = UI_LED_GET_ON(current_led_state);
   213d6:	4812      	ldr	r0, [pc, #72]	; (21420 <leds_update+0x54>)
	led_on = !led_on;
   213d8:	f082 0201 	eor.w	r2, r2, #1
   213dc:	f990 1001 	ldrsb.w	r1, [r0, #1]
   213e0:	f990 4000 	ldrsb.w	r4, [r0]
   213e4:	702a      	strb	r2, [r5, #0]
	if (led_on) {
   213e6:	b19a      	cbz	r2, 21410 <leds_update+0x44>
		led_on_mask |= UI_LED_GET_BLINK(current_led_state);
   213e8:	430c      	orrs	r4, r1
	if (led_on_mask != current_led_on_mask) {
   213ea:	4f0e      	ldr	r7, [pc, #56]	; (21424 <leds_update+0x58>)
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   213ec:	b2e4      	uxtb	r4, r4
	if (led_on_mask != current_led_on_mask) {
   213ee:	783b      	ldrb	r3, [r7, #0]
   213f0:	42a3      	cmp	r3, r4
   213f2:	d003      	beq.n	213fc <leds_update+0x30>
		dk_set_leds(led_on_mask);
   213f4:	4620      	mov	r0, r4
   213f6:	f01e faf7 	bl	3f9e8 <dk_set_leds>
		current_led_on_mask = led_on_mask;
   213fa:	703c      	strb	r4, [r7, #0]
	if (work) {
   213fc:	b15e      	cbz	r6, 21416 <leds_update+0x4a>
}
   213fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   21402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   21406:	2300      	movs	r3, #0
   21408:	4907      	ldr	r1, [pc, #28]	; (21428 <leds_update+0x5c>)
   2140a:	4808      	ldr	r0, [pc, #32]	; (2142c <leds_update+0x60>)
   2140c:	f018 ba1e 	b.w	3984c <k_delayed_work_submit_to_queue>
		led_on_mask &= ~UI_LED_GET_BLINK(current_led_state);
   21410:	ea24 0401 	bic.w	r4, r4, r1
   21414:	e7e9      	b.n	213ea <leds_update+0x1e>
}
   21416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2141a:	bf00      	nop
   2141c:	2001ebd1 	.word	0x2001ebd1
   21420:	2001e0e0 	.word	0x2001e0e0
   21424:	2001ebd0 	.word	0x2001ebd0
   21428:	200167b0 	.word	0x200167b0
   2142c:	20018af0 	.word	0x20018af0

00021430 <ui_led_set_pattern>:

void ui_led_set_pattern(enum ui_led_pattern state)
{
	current_led_state = state;
   21430:	4b01      	ldr	r3, [pc, #4]	; (21438 <ui_led_set_pattern+0x8>)
   21432:	8018      	strh	r0, [r3, #0]
#ifdef CONFIG_UI_LED_USE_PWM
	ui_led_set_effect(state);
#else
	current_led_state = state;
#endif /* CONFIG_UI_LED_USE_PWM */
}
   21434:	4770      	bx	lr
   21436:	bf00      	nop
   21438:	2001e0e0 	.word	0x2001e0e0

0002143c <ui_init>:
	}
#endif
}

int ui_init(ui_callback_t cb)
{
   2143c:	b570      	push	{r4, r5, r6, lr}
   2143e:	4605      	mov	r5, r0
	if (err) {
		LOG_ERR("Error when initializing PWM controlled LEDs");
		return err;
	}
#else
	err = dk_leds_init();
   21440:	f008 ff8a 	bl	2a358 <dk_leds_init>
	if (err) {
   21444:	4604      	mov	r4, r0
   21446:	b160      	cbz	r0, 21462 <ui_init+0x26>
		LOG_ERR("Could not initialize leds, err code: %d\n", err);
   21448:	4622      	mov	r2, r4
   2144a:	481c      	ldr	r0, [pc, #112]	; (214bc <ui_init+0x80>)
   2144c:	4b1c      	ldr	r3, [pc, #112]	; (214c0 <ui_init+0x84>)
   2144e:	491d      	ldr	r1, [pc, #116]	; (214c4 <ui_init+0x88>)
   21450:	1ac0      	subs	r0, r0, r3
   21452:	08c0      	lsrs	r0, r0, #3
   21454:	0180      	lsls	r0, r0, #6
	if (cb) {
		callback  = cb;

		err = dk_buttons_init(button_handler);
		if (err) {
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   21456:	f040 0001 	orr.w	r0, r0, #1
   2145a:	f01b ff51 	bl	3d300 <log_string_sync>
		return err;
	}
#endif /* CONFIG_UI_NMOS */

	return err;
}
   2145e:	4620      	mov	r0, r4
   21460:	bd70      	pop	{r4, r5, r6, pc}
	err = dk_set_leds_state(0x00, DK_ALL_LEDS_MSK);
   21462:	210f      	movs	r1, #15
   21464:	f01e fab6 	bl	3f9d4 <dk_set_leds_state>
	if (err) {
   21468:	4604      	mov	r4, r0
   2146a:	b138      	cbz	r0, 2147c <ui_init+0x40>
   2146c:	4813      	ldr	r0, [pc, #76]	; (214bc <ui_init+0x80>)
   2146e:	4b14      	ldr	r3, [pc, #80]	; (214c0 <ui_init+0x84>)
		LOG_ERR("Could not set leds state, err code: %d\n", err);
   21470:	4622      	mov	r2, r4
   21472:	1ac0      	subs	r0, r0, r3
   21474:	08c0      	lsrs	r0, r0, #3
   21476:	4914      	ldr	r1, [pc, #80]	; (214c8 <ui_init+0x8c>)
   21478:	0180      	lsls	r0, r0, #6
   2147a:	e7ec      	b.n	21456 <ui_init+0x1a>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   2147c:	4e13      	ldr	r6, [pc, #76]	; (214cc <ui_init+0x90>)
   2147e:	4601      	mov	r1, r0
   21480:	2230      	movs	r2, #48	; 0x30
   21482:	4630      	mov	r0, r6
   21484:	f020 fc2b 	bl	41cde <memset>
   21488:	4b11      	ldr	r3, [pc, #68]	; (214d0 <ui_init+0x94>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2148a:	2200      	movs	r2, #0
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   2148c:	6073      	str	r3, [r6, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2148e:	4631      	mov	r1, r6
   21490:	2300      	movs	r3, #0
   21492:	4810      	ldr	r0, [pc, #64]	; (214d4 <ui_init+0x98>)
   21494:	f018 f9da 	bl	3984c <k_delayed_work_submit_to_queue>
	if (cb) {
   21498:	2d00      	cmp	r5, #0
   2149a:	d0e0      	beq.n	2145e <ui_init+0x22>
		callback  = cb;
   2149c:	4b0e      	ldr	r3, [pc, #56]	; (214d8 <ui_init+0x9c>)
		err = dk_buttons_init(button_handler);
   2149e:	480f      	ldr	r0, [pc, #60]	; (214dc <ui_init+0xa0>)
		callback  = cb;
   214a0:	601d      	str	r5, [r3, #0]
		err = dk_buttons_init(button_handler);
   214a2:	f008 ffa9 	bl	2a3f8 <dk_buttons_init>
		if (err) {
   214a6:	4604      	mov	r4, r0
   214a8:	2800      	cmp	r0, #0
   214aa:	d0d8      	beq.n	2145e <ui_init+0x22>
   214ac:	4803      	ldr	r0, [pc, #12]	; (214bc <ui_init+0x80>)
   214ae:	4b04      	ldr	r3, [pc, #16]	; (214c0 <ui_init+0x84>)
			LOG_ERR("Could not initialize buttons, err code: %d\n",
   214b0:	4622      	mov	r2, r4
   214b2:	1ac0      	subs	r0, r0, r3
   214b4:	08c0      	lsrs	r0, r0, #3
   214b6:	490a      	ldr	r1, [pc, #40]	; (214e0 <ui_init+0xa4>)
   214b8:	0180      	lsls	r0, r0, #6
   214ba:	e7cc      	b.n	21456 <ui_init+0x1a>
   214bc:	000434ec 	.word	0x000434ec
   214c0:	0004339c 	.word	0x0004339c
   214c4:	00044fb7 	.word	0x00044fb7
   214c8:	00044fe0 	.word	0x00044fe0
   214cc:	200167b0 	.word	0x200167b0
   214d0:	000213cd 	.word	0x000213cd
   214d4:	20018af0 	.word	0x20018af0
   214d8:	20018c5c 	.word	0x20018c5c
   214dc:	00021379 	.word	0x00021379
   214e0:	00045008 	.word	0x00045008

000214e4 <cloud_set_chan_cfg_item>:
}

static int cloud_set_chan_cfg_item(const enum cloud_channel channel,
			  const enum sensor_chan_cfg_item_type type,
			  const double value)
{
   214e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   214e6:	4616      	mov	r6, r2
   214e8:	461f      	mov	r7, r3
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
		if (sensor_cfg[i].chan == channel) {
   214ea:	2230      	movs	r2, #48	; 0x30
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   214ec:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   214ee:	4c0a      	ldr	r4, [pc, #40]	; (21518 <cloud_set_chan_cfg_item+0x34>)
   214f0:	fb02 f503 	mul.w	r5, r2, r3
   214f4:	5d2d      	ldrb	r5, [r5, r4]
   214f6:	4285      	cmp	r5, r0
   214f8:	d108      	bne.n	2150c <cloud_set_chan_cfg_item+0x28>
	cfg->value[type] = value;
   214fa:	2206      	movs	r2, #6
	return 0;
   214fc:	2000      	movs	r0, #0
	cfg->value[type] = value;
   214fe:	fb02 1103 	mla	r1, r2, r3, r1
   21502:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   21506:	e9c1 6702 	strd	r6, r7, [r1, #8]
						      value);
		}
	}

	return -ENOTSUP;
}
   2150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   2150c:	3301      	adds	r3, #1
   2150e:	2b0a      	cmp	r3, #10
   21510:	d1ee      	bne.n	214f0 <cloud_set_chan_cfg_item+0xc>
	return -ENOTSUP;
   21512:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21516:	e7f8      	b.n	2150a <cloud_set_chan_cfg_item+0x26>
   21518:	20014518 	.word	0x20014518

0002151c <cloud_cmd_handle_sensor_set_chan_cfg>:

	return false;
}

static int cloud_cmd_handle_sensor_set_chan_cfg(struct cloud_command const *const cmd)
{
   2151c:	b570      	push	{r4, r5, r6, lr}
	int err = -ENOTSUP;

	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   2151e:	7803      	ldrb	r3, [r0, #0]
{
   21520:	4604      	mov	r4, r0
	if ((cmd == NULL) || (cmd->group != CLOUD_CMD_GROUP_CFG_SET)) {
   21522:	2b08      	cmp	r3, #8
   21524:	d143      	bne.n	215ae <cloud_cmd_handle_sensor_set_chan_cfg+0x92>
		return -EINVAL;
	}

	switch (cmd->type) {
   21526:	7883      	ldrb	r3, [r0, #2]
   21528:	2b02      	cmp	r3, #2
   2152a:	d00f      	beq.n	2154c <cloud_cmd_handle_sensor_set_chan_cfg+0x30>
   2152c:	2b03      	cmp	r3, #3
   2152e:	d028      	beq.n	21582 <cloud_cmd_handle_sensor_set_chan_cfg+0x66>
   21530:	2b01      	cmp	r3, #1
   21532:	d13f      	bne.n	215b4 <cloud_cmd_handle_sensor_set_chan_cfg+0x98>
	case CLOUD_CMD_ENABLE:
		err = cloud_set_chan_cfg_item(
   21534:	f990 0010 	ldrsb.w	r0, [r0, #16]
   21538:	f7fb f8d4 	bl	1c6e4 <__aeabi_i2d>
   2153c:	460b      	mov	r3, r1
   2153e:	2100      	movs	r1, #0
   21540:	4602      	mov	r2, r0
   21542:	7860      	ldrb	r0, [r4, #1]
	default:
		break;
	}

	return err;
}
   21544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			err = cloud_set_chan_cfg_item(
   21548:	f7ff bfcc 	b.w	214e4 <cloud_set_chan_cfg_item>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   2154c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   21550:	7865      	ldrb	r5, [r4, #1]
   21552:	1c42      	adds	r2, r0, #1
   21554:	d10e      	bne.n	21574 <cloud_cmd_handle_sensor_set_chan_cfg+0x58>
			err = cloud_set_chan_cfg_item(
   21556:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   2155a:	2103      	movs	r1, #3
   2155c:	4628      	mov	r0, r5
   2155e:	f7ff ffc1 	bl	214e4 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   21562:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   21564:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   21566:	2104      	movs	r1, #4
   21568:	4b14      	ldr	r3, [pc, #80]	; (215bc <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
			cloud_set_chan_cfg_item(
   2156a:	7860      	ldrb	r0, [r4, #1]
   2156c:	f7ff ffba 	bl	214e4 <cloud_set_chan_cfg_item>
}
   21570:	4628      	mov	r0, r5
   21572:	bd70      	pop	{r4, r5, r6, pc}
			err = cloud_set_chan_cfg_item(
   21574:	f7fb f8b6 	bl	1c6e4 <__aeabi_i2d>
   21578:	460b      	mov	r3, r1
   2157a:	4602      	mov	r2, r0
   2157c:	2104      	movs	r1, #4
			err = cloud_set_chan_cfg_item(
   2157e:	4628      	mov	r0, r5
   21580:	e7e0      	b.n	21544 <cloud_cmd_handle_sensor_set_chan_cfg+0x28>
		if (cmd->data.sv.state == CLOUD_CMD_STATE_UNDEFINED) {
   21582:	f990 0010 	ldrsb.w	r0, [r0, #16]
   21586:	7865      	ldrb	r5, [r4, #1]
   21588:	1c43      	adds	r3, r0, #1
   2158a:	d10a      	bne.n	215a2 <cloud_cmd_handle_sensor_set_chan_cfg+0x86>
			err = cloud_set_chan_cfg_item(
   2158c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   21590:	2101      	movs	r1, #1
   21592:	4628      	mov	r0, r5
   21594:	f7ff ffa6 	bl	214e4 <cloud_set_chan_cfg_item>
			cloud_set_chan_cfg_item(
   21598:	2200      	movs	r2, #0
			err = cloud_set_chan_cfg_item(
   2159a:	4605      	mov	r5, r0
			cloud_set_chan_cfg_item(
   2159c:	2102      	movs	r1, #2
   2159e:	4b07      	ldr	r3, [pc, #28]	; (215bc <cloud_cmd_handle_sensor_set_chan_cfg+0xa0>)
   215a0:	e7e3      	b.n	2156a <cloud_cmd_handle_sensor_set_chan_cfg+0x4e>
			err = cloud_set_chan_cfg_item(
   215a2:	f7fb f89f 	bl	1c6e4 <__aeabi_i2d>
   215a6:	460b      	mov	r3, r1
   215a8:	4602      	mov	r2, r0
   215aa:	2102      	movs	r1, #2
   215ac:	e7e7      	b.n	2157e <cloud_cmd_handle_sensor_set_chan_cfg+0x62>
		return -EINVAL;
   215ae:	f06f 0515 	mvn.w	r5, #21
   215b2:	e7dd      	b.n	21570 <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
	switch (cmd->type) {
   215b4:	f06f 0585 	mvn.w	r5, #133	; 0x85
   215b8:	e7da      	b.n	21570 <cloud_cmd_handle_sensor_set_chan_cfg+0x54>
   215ba:	bf00      	nop
   215bc:	3ff00000 	.word	0x3ff00000

000215c0 <cloud_cmd_parse_type>:
{
   215c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   215c4:	460f      	mov	r7, r1
   215c6:	4614      	mov	r4, r2
	if ((type_cmd == NULL) || (parsed_cmd == NULL)) {
   215c8:	4606      	mov	r6, r0
   215ca:	b918      	cbnz	r0, 215d4 <cloud_cmd_parse_type+0x14>
		return -EINVAL;
   215cc:	f06f 0015 	mvn.w	r0, #21
}
   215d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (type_obj != NULL) {
   215d4:	7903      	ldrb	r3, [r0, #4]
   215d6:	2900      	cmp	r1, #0
   215d8:	f000 8081 	beq.w	216de <cloud_cmd_parse_type+0x11e>
		if (type_cmd->type != CLOUD_CMD_DATA_STRING) {
   215dc:	2b07      	cmp	r3, #7
   215de:	d079      	beq.n	216d4 <cloud_cmd_parse_type+0x114>
			decoded_obj = json_object_decode(type_obj,
   215e0:	4a4a      	ldr	r2, [pc, #296]	; (2170c <cloud_cmd_parse_type+0x14c>)
   215e2:	4638      	mov	r0, r7
   215e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   215e8:	f01b fb65 	bl	3ccb6 <json_object_decode>
			if (!decoded_obj) {
   215ec:	4605      	mov	r5, r0
   215ee:	2800      	cmp	r0, #0
   215f0:	f000 8085 	beq.w	216fe <cloud_cmd_parse_type+0x13e>
		switch (type_cmd->type) {
   215f4:	7933      	ldrb	r3, [r6, #4]
   215f6:	3b01      	subs	r3, #1
   215f8:	2b06      	cmp	r3, #6
   215fa:	f200 8083 	bhi.w	21704 <cloud_cmd_parse_type+0x144>
   215fe:	e8df f003 	tbb	[pc, r3]
   21602:	2e04      	.short	0x2e04
   21604:	4e3e2e2e 	.word	0x4e3e2e2e
   21608:	69          	.byte	0x69
   21609:	00          	.byte	0x00
			if (cJSON_IsNull(decoded_obj)) {
   2160a:	f01d ff42 	bl	3f492 <cJSON_IsNull>
   2160e:	b1b8      	cbz	r0, 21640 <cloud_cmd_parse_type+0x80>
				parsed_cmd->data.sv.state =
   21610:	2300      	movs	r3, #0
   21612:	7423      	strb	r3, [r4, #16]
	if ((type_cmd->type == CLOUD_CMD_INTERVAL) &&
   21614:	7935      	ldrb	r5, [r6, #4]
   21616:	2d04      	cmp	r5, #4
   21618:	d10f      	bne.n	2163a <cloud_cmd_parse_type+0x7a>
   2161a:	f994 3010 	ldrsb.w	r3, [r4, #16]
   2161e:	3301      	adds	r3, #1
   21620:	d10b      	bne.n	2163a <cloud_cmd_parse_type+0x7a>
		if (parsed_cmd->data.sv.value == DISABLE_SEND_INTERVAL_VAL) {
   21622:	e9d4 8902 	ldrd	r8, r9, [r4, #8]
   21626:	2200      	movs	r2, #0
   21628:	2300      	movs	r3, #0
   2162a:	4640      	mov	r0, r8
   2162c:	4649      	mov	r1, r9
   2162e:	f7fb fb2b 	bl	1cc88 <__aeabi_dcmpeq>
   21632:	2800      	cmp	r0, #0
   21634:	d056      	beq.n	216e4 <cloud_cmd_parse_type+0x124>
			parsed_cmd->data.sv.state = CLOUD_CMD_STATE_FALSE;
   21636:	2300      	movs	r3, #0
   21638:	7423      	strb	r3, [r4, #16]
	return 0;
   2163a:	2000      	movs	r0, #0
	parsed_cmd->type = type_cmd->type;
   2163c:	70a5      	strb	r5, [r4, #2]
	return 0;
   2163e:	e7c7      	b.n	215d0 <cloud_cmd_parse_type+0x10>
			} else if (cJSON_IsBool(decoded_obj)) {
   21640:	4628      	mov	r0, r5
   21642:	f01d ff1f 	bl	3f484 <cJSON_IsBool>
   21646:	b910      	cbnz	r0, 2164e <cloud_cmd_parse_type+0x8e>
				return -ESRCH;
   21648:	f06f 0002 	mvn.w	r0, #2
   2164c:	e7c0      	b.n	215d0 <cloud_cmd_parse_type+0x10>
					cJSON_IsTrue(decoded_obj) ?
   2164e:	4628      	mov	r0, r5
   21650:	f01d ff12 	bl	3f478 <cJSON_IsTrue>
						CLOUD_CMD_STATE_TRUE :
   21654:	3800      	subs	r0, #0
   21656:	bf18      	it	ne
   21658:	2001      	movne	r0, #1
   2165a:	7420      	strb	r0, [r4, #16]
   2165c:	e7da      	b.n	21614 <cloud_cmd_parse_type+0x54>
			if (cJSON_IsNull(decoded_obj)) {
   2165e:	f01d ff18 	bl	3f492 <cJSON_IsNull>
   21662:	2800      	cmp	r0, #0
   21664:	d1d4      	bne.n	21610 <cloud_cmd_parse_type+0x50>
			} else if (cJSON_IsNumber(decoded_obj)) {
   21666:	4628      	mov	r0, r5
   21668:	f01d ff19 	bl	3f49e <cJSON_IsNumber>
   2166c:	2800      	cmp	r0, #0
   2166e:	d0eb      	beq.n	21648 <cloud_cmd_parse_type+0x88>
				parsed_cmd->data.sv.state =
   21670:	23ff      	movs	r3, #255	; 0xff
   21672:	7423      	strb	r3, [r4, #16]
				parsed_cmd->data.sv.value =
   21674:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   21678:	e9c4 2302 	strd	r2, r3, [r4, #8]
   2167c:	e7ca      	b.n	21614 <cloud_cmd_parse_type+0x54>
			if (cJSON_GetStringValue(decoded_obj) == NULL) {
   2167e:	f01d ff1c 	bl	3f4ba <cJSON_GetStringValue>
   21682:	2800      	cmp	r0, #0
   21684:	d0e0      	beq.n	21648 <cloud_cmd_parse_type+0x88>
				cJSON_GetStringValue(decoded_obj), NULL, 16);
   21686:	4628      	mov	r0, r5
   21688:	f01d ff17 	bl	3f4ba <cJSON_GetStringValue>
			parsed_cmd->data.sv.value = (double)strtol(
   2168c:	2210      	movs	r2, #16
   2168e:	2100      	movs	r1, #0
   21690:	f01a f830 	bl	3b6f4 <strtol>
   21694:	f7fb f826 	bl	1c6e4 <__aeabi_i2d>
   21698:	e9c4 0102 	strd	r0, r1, [r4, #8]
			break;
   2169c:	e7ba      	b.n	21614 <cloud_cmd_parse_type+0x54>
	if ((data_obj == NULL) || (params == NULL)) {
   2169e:	f114 0f08 	cmn.w	r4, #8
   216a2:	d093      	beq.n	215cc <cloud_cmd_parse_type+0xc>
	if (!cJSON_IsObject(data_obj)) {
   216a4:	f01d ff17 	bl	3f4d6 <cJSON_IsObject>
   216a8:	2800      	cmp	r0, #0
   216aa:	d0cd      	beq.n	21648 <cloud_cmd_parse_type+0x88>
	blob = json_object_decode(data_obj, MODEM_PARAM_BLOB_KEY_STR);
   216ac:	4918      	ldr	r1, [pc, #96]	; (21710 <cloud_cmd_parse_type+0x150>)
   216ae:	4628      	mov	r0, r5
   216b0:	f01b fb01 	bl	3ccb6 <json_object_decode>
	params->blob = cJSON_GetStringValue(blob);
   216b4:	f01d ff01 	bl	3f4ba <cJSON_GetStringValue>
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   216b8:	4916      	ldr	r1, [pc, #88]	; (21714 <cloud_cmd_parse_type+0x154>)
	params->blob = cJSON_GetStringValue(blob);
   216ba:	60a0      	str	r0, [r4, #8]
	checksum = json_object_decode(data_obj, MODEM_PARAM_CHECKSUM_KEY_STR);
   216bc:	4628      	mov	r0, r5
   216be:	f01b fafa 	bl	3ccb6 <json_object_decode>
	params->checksum = cJSON_GetStringValue(checksum);
   216c2:	f01d fefa 	bl	3f4ba <cJSON_GetStringValue>
			-ESRCH : 0);
   216c6:	68a3      	ldr	r3, [r4, #8]
	params->checksum = cJSON_GetStringValue(checksum);
   216c8:	60e0      	str	r0, [r4, #12]
			-ESRCH : 0);
   216ca:	2b00      	cmp	r3, #0
   216cc:	d0bc      	beq.n	21648 <cloud_cmd_parse_type+0x88>
			if (parsed_cmd->data.data_string == NULL) {
   216ce:	2800      	cmp	r0, #0
   216d0:	d1a0      	bne.n	21614 <cloud_cmd_parse_type+0x54>
   216d2:	e7b9      	b.n	21648 <cloud_cmd_parse_type+0x88>
				cJSON_GetStringValue(type_obj);
   216d4:	4638      	mov	r0, r7
   216d6:	f01d fef0 	bl	3f4ba <cJSON_GetStringValue>
			parsed_cmd->data.data_string =
   216da:	60a0      	str	r0, [r4, #8]
   216dc:	e7f7      	b.n	216ce <cloud_cmd_parse_type+0x10e>
	} else if (type_cmd->type != CLOUD_CMD_EMPTY) {
   216de:	2b00      	cmp	r3, #0
   216e0:	d098      	beq.n	21614 <cloud_cmd_parse_type+0x54>
   216e2:	e773      	b.n	215cc <cloud_cmd_parse_type+0xc>
		} else if (parsed_cmd->data.sv.value <
   216e4:	2600      	movs	r6, #0
   216e6:	4f0c      	ldr	r7, [pc, #48]	; (21718 <cloud_cmd_parse_type+0x158>)
   216e8:	4632      	mov	r2, r6
   216ea:	463b      	mov	r3, r7
   216ec:	4640      	mov	r0, r8
   216ee:	4649      	mov	r1, r9
   216f0:	f7fb fad4 	bl	1cc9c <__aeabi_dcmplt>
   216f4:	2800      	cmp	r0, #0
   216f6:	d0a0      	beq.n	2163a <cloud_cmd_parse_type+0x7a>
			parsed_cmd->data.sv.value = MIN_INTERVAL_VAL_SECONDS;
   216f8:	e9c4 6702 	strd	r6, r7, [r4, #8]
   216fc:	e79d      	b.n	2163a <cloud_cmd_parse_type+0x7a>
				return -ENOENT; /* Command not found */
   216fe:	f06f 0001 	mvn.w	r0, #1
   21702:	e765      	b.n	215d0 <cloud_cmd_parse_type+0x10>
		switch (type_cmd->type) {
   21704:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21708:	e762      	b.n	215d0 <cloud_cmd_parse_type+0x10>
   2170a:	bf00      	nop
   2170c:	00043730 	.word	0x00043730
   21710:	00045037 	.word	0x00045037
   21714:	0004503c 	.word	0x0004503c
   21718:	40140000 	.word	0x40140000

0002171c <cloud_encode_data>:
{
   2171c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   21720:	4617      	mov	r7, r2
	int64_t data_ts = channel->ts;
   21722:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   21726:	e9cd 2300 	strd	r2, r3, [sp]
	if (channel == NULL || channel->data.buf == NULL ||
   2172a:	6843      	ldr	r3, [r0, #4]
{
   2172c:	4606      	mov	r6, r0
   2172e:	4688      	mov	r8, r1
	if (channel == NULL || channel->data.buf == NULL ||
   21730:	2b00      	cmp	r3, #0
   21732:	d077      	beq.n	21824 <cloud_encode_data+0x108>
   21734:	6883      	ldr	r3, [r0, #8]
   21736:	2b00      	cmp	r3, #0
   21738:	d074      	beq.n	21824 <cloud_encode_data+0x108>
	    channel->data.len == 0 || output == NULL ||
   2173a:	2f00      	cmp	r7, #0
   2173c:	d072      	beq.n	21824 <cloud_encode_data+0x108>
   2173e:	290a      	cmp	r1, #10
   21740:	d870      	bhi.n	21824 <cloud_encode_data+0x108>
	cJSON *root_obj = cJSON_CreateObject();
   21742:	f007 fc13 	bl	28f6c <cJSON_CreateObject>
	if (root_obj == NULL) {
   21746:	4605      	mov	r5, r0
   21748:	b938      	cbnz	r0, 2175a <cloud_encode_data+0x3e>
		cJSON_Delete(root_obj);
   2174a:	f007 fb3b 	bl	28dc4 <cJSON_Delete>
		return -ENOMEM;
   2174e:	f06f 040b 	mvn.w	r4, #11
}
   21752:	4620      	mov	r0, r4
   21754:	b003      	add	sp, #12
   21756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	ret = date_time_uptime_to_unix_time_ms(&data_ts);
   2175a:	4668      	mov	r0, sp
   2175c:	f00b faa2 	bl	2cca4 <date_time_uptime_to_unix_time_ms>
	if (ret) {
   21760:	4602      	mov	r2, r0
   21762:	b188      	cbz	r0, 21788 <cloud_encode_data+0x6c>
   21764:	4b31      	ldr	r3, [pc, #196]	; (2182c <cloud_encode_data+0x110>)
   21766:	4c32      	ldr	r4, [pc, #200]	; (21830 <cloud_encode_data+0x114>)
		LOG_WRN("date_time_uptime_to_unix_time_ms, error: %d", ret);
   21768:	4932      	ldr	r1, [pc, #200]	; (21834 <cloud_encode_data+0x118>)
   2176a:	1ae4      	subs	r4, r4, r3
   2176c:	08e4      	lsrs	r4, r4, #3
   2176e:	01a4      	lsls	r4, r4, #6
   21770:	f044 0402 	orr.w	r4, r4, #2
   21774:	4620      	mov	r0, r4
   21776:	f01b fdc3 	bl	3d300 <log_string_sync>
		LOG_WRN("Clearing timestamp");
   2177a:	4620      	mov	r0, r4
   2177c:	492e      	ldr	r1, [pc, #184]	; (21838 <cloud_encode_data+0x11c>)
   2177e:	f01b fdbf 	bl	3d300 <log_string_sync>
		date_time_timestamp_clear(&data_ts);
   21782:	4668      	mov	r0, sp
   21784:	f01e fb10 	bl	3fda8 <date_time_timestamp_clear>
			   channel_type_str[channel->type]);
   21788:	7832      	ldrb	r2, [r6, #0]
	json_str = cJSON_CreateString(item);
   2178a:	4b2c      	ldr	r3, [pc, #176]	; (2183c <cloud_encode_data+0x120>)
   2178c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   21790:	f007 fbc8 	bl	28f24 <cJSON_CreateString>
	if (json_str == NULL) {
   21794:	4602      	mov	r2, r0
   21796:	b348      	cbz	r0, 217ec <cloud_encode_data+0xd0>
	cJSON_AddItemToObject(parent, str, item);
   21798:	4628      	mov	r0, r5
   2179a:	4929      	ldr	r1, [pc, #164]	; (21840 <cloud_encode_data+0x124>)
   2179c:	f01d fe21 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   217a0:	f04f 0900 	mov.w	r9, #0
	json_str = cJSON_CreateString(item);
   217a4:	6870      	ldr	r0, [r6, #4]
   217a6:	f007 fbbd 	bl	28f24 <cJSON_CreateString>
	if (json_str == NULL) {
   217aa:	4602      	mov	r2, r0
   217ac:	b308      	cbz	r0, 217f2 <cloud_encode_data+0xd6>
	cJSON_AddItemToObject(parent, str, item);
   217ae:	4628      	mov	r0, r5
   217b0:	4924      	ldr	r1, [pc, #144]	; (21844 <cloud_encode_data+0x128>)
   217b2:	f01d fe16 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   217b6:	2400      	movs	r4, #0
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   217b8:	4b23      	ldr	r3, [pc, #140]	; (21848 <cloud_encode_data+0x12c>)
	ret += json_add_str(root_obj, CMD_DATA_TYPE_KEY_STR, channel->data.buf);
   217ba:	444c      	add	r4, r9
	json_str = cJSON_CreateString(item);
   217bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   217c0:	f007 fbb0 	bl	28f24 <cJSON_CreateString>
	if (json_str == NULL) {
   217c4:	4602      	mov	r2, r0
   217c6:	b1b8      	cbz	r0, 217f8 <cloud_encode_data+0xdc>
	cJSON_AddItemToObject(parent, str, item);
   217c8:	4628      	mov	r0, r5
   217ca:	4920      	ldr	r1, [pc, #128]	; (2184c <cloud_encode_data+0x130>)
   217cc:	f01d fe09 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   217d0:	2300      	movs	r3, #0
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   217d2:	e9dd 0100 	ldrd	r0, r1, [sp]
	ret += json_add_str(root_obj, CMD_GROUP_KEY_STR, cmd_group_str[group]);
   217d6:	441c      	add	r4, r3
	ret += json_add_number(root_obj, DATA_TS, data_ts);
   217d8:	f7fa ffc0 	bl	1c75c <__aeabi_l2d>
	json_num = cJSON_CreateNumber(item);
   217dc:	ec41 0b10 	vmov	d0, r0, r1
   217e0:	f7fc f906 	bl	1d9f0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   217e4:	4602      	mov	r2, r0
   217e6:	b950      	cbnz	r0, 217fe <cloud_encode_data+0xe2>
		cJSON_Delete(root_obj);
   217e8:	4628      	mov	r0, r5
   217ea:	e7ae      	b.n	2174a <cloud_encode_data+0x2e>
		return -ENOMEM;
   217ec:	f06f 090b 	mvn.w	r9, #11
   217f0:	e7d8      	b.n	217a4 <cloud_encode_data+0x88>
   217f2:	f06f 040b 	mvn.w	r4, #11
   217f6:	e7df      	b.n	217b8 <cloud_encode_data+0x9c>
   217f8:	f06f 030b 	mvn.w	r3, #11
   217fc:	e7e9      	b.n	217d2 <cloud_encode_data+0xb6>
	cJSON_AddItemToObject(parent, str, item);
   217fe:	4628      	mov	r0, r5
   21800:	4913      	ldr	r1, [pc, #76]	; (21850 <cloud_encode_data+0x134>)
   21802:	f01d fdee 	bl	3f3e2 <cJSON_AddItemToObject>
	if (ret != 0) {
   21806:	2c00      	cmp	r4, #0
   21808:	d1ee      	bne.n	217e8 <cloud_encode_data+0xcc>
	buffer = cJSON_PrintUnformatted(root_obj);
   2180a:	4628      	mov	r0, r5
   2180c:	f01d fdcc 	bl	3f3a8 <cJSON_PrintUnformatted>
   21810:	4606      	mov	r6, r0
	cJSON_Delete(root_obj);
   21812:	4628      	mov	r0, r5
   21814:	f007 fad6 	bl	28dc4 <cJSON_Delete>
	output->len = strlen(buffer);
   21818:	4630      	mov	r0, r6
	output->buf = buffer;
   2181a:	603e      	str	r6, [r7, #0]
	output->len = strlen(buffer);
   2181c:	f7fb fd1e 	bl	1d25c <strlen>
   21820:	6078      	str	r0, [r7, #4]
	return 0;
   21822:	e796      	b.n	21752 <cloud_encode_data+0x36>
		return -EINVAL;
   21824:	f06f 0415 	mvn.w	r4, #21
   21828:	e793      	b.n	21752 <cloud_encode_data+0x36>
   2182a:	bf00      	nop
   2182c:	0004339c 	.word	0x0004339c
   21830:	000433d4 	.word	0x000433d4
   21834:	00045045 	.word	0x00045045
   21838:	00045071 	.word	0x00045071
   2183c:	000436b0 	.word	0x000436b0
   21840:	00045084 	.word	0x00045084
   21844:	000445d2 	.word	0x000445d2
   21848:	00043704 	.word	0x00043704
   2184c:	0004508a 	.word	0x0004508a
   21850:	00045096 	.word	0x00045096

00021854 <cloud_encode_env_sensors_data>:
{
   21854:	b570      	push	{r4, r5, r6, lr}
   21856:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(sensor_data != NULL);
   21858:	4604      	mov	r4, r0
{
   2185a:	b08a      	sub	sp, #40	; 0x28
	__ASSERT_NO_MSG(sensor_data != NULL);
   2185c:	b958      	cbnz	r0, 21876 <cloud_encode_env_sensors_data+0x22>
   2185e:	4925      	ldr	r1, [pc, #148]	; (218f4 <cloud_encode_env_sensors_data+0xa0>)
   21860:	4825      	ldr	r0, [pc, #148]	; (218f8 <cloud_encode_env_sensors_data+0xa4>)
   21862:	f240 1387 	movw	r3, #391	; 0x187
   21866:	4a25      	ldr	r2, [pc, #148]	; (218fc <cloud_encode_env_sensors_data+0xa8>)
   21868:	f01b fa85 	bl	3cd76 <printk>
   2186c:	f240 1187 	movw	r1, #391	; 0x187
   21870:	4822      	ldr	r0, [pc, #136]	; (218fc <cloud_encode_env_sensors_data+0xa8>)
   21872:	f01b fd34 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   21876:	b95d      	cbnz	r5, 21890 <cloud_encode_env_sensors_data+0x3c>
   21878:	4921      	ldr	r1, [pc, #132]	; (21900 <cloud_encode_env_sensors_data+0xac>)
   2187a:	481f      	ldr	r0, [pc, #124]	; (218f8 <cloud_encode_env_sensors_data+0xa4>)
   2187c:	f44f 73c4 	mov.w	r3, #392	; 0x188
   21880:	4a1e      	ldr	r2, [pc, #120]	; (218fc <cloud_encode_env_sensors_data+0xa8>)
   21882:	f01b fa78 	bl	3cd76 <printk>
   21886:	f44f 71c4 	mov.w	r1, #392	; 0x188
   2188a:	481c      	ldr	r0, [pc, #112]	; (218fc <cloud_encode_env_sensors_data+0xa8>)
   2188c:	f01b fd27 	bl	3d2de <assert_post_action>
	struct cloud_channel_data cloud_sensor = { .ts = sensor_data->ts };
   21890:	2210      	movs	r2, #16
   21892:	2100      	movs	r1, #0
   21894:	eb0d 0002 	add.w	r0, sp, r2
   21898:	f020 fa21 	bl	41cde <memset>
   2189c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   218a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
	switch (sensor_data->type) {
   218a4:	7823      	ldrb	r3, [r4, #0]
   218a6:	2b03      	cmp	r3, #3
   218a8:	d820      	bhi.n	218ec <cloud_encode_env_sensors_data+0x98>
   218aa:	e8df f003 	tbb	[pc, r3]
   218ae:	1902      	.short	0x1902
   218b0:	1d1b      	.short	0x1d1b
		cloud_sensor.type = CLOUD_CHANNEL_TEMP;
   218b2:	2308      	movs	r3, #8
	len = snprintf(buf, sizeof(buf), "%.1f",
   218b4:	ae02      	add	r6, sp, #8
   218b6:	2106      	movs	r1, #6
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   218b8:	f88d 3010 	strb.w	r3, [sp, #16]
	len = snprintf(buf, sizeof(buf), "%.1f",
   218bc:	4630      	mov	r0, r6
   218be:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   218c2:	e9cd 2300 	strd	r2, r3, [sp]
   218c6:	4a0f      	ldr	r2, [pc, #60]	; (21904 <cloud_encode_env_sensors_data+0xb0>)
   218c8:	f019 fe30 	bl	3b52c <sniprintf>
	cloud_sensor.data.len = len;
   218cc:	b2c0      	uxtb	r0, r0
   218ce:	9006      	str	r0, [sp, #24]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   218d0:	462a      	mov	r2, r5
   218d2:	2106      	movs	r1, #6
   218d4:	a804      	add	r0, sp, #16
	cloud_sensor.data.buf = buf;
   218d6:	9605      	str	r6, [sp, #20]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   218d8:	f7ff ff20 	bl	2171c <cloud_encode_data>
}
   218dc:	b00a      	add	sp, #40	; 0x28
   218de:	bd70      	pop	{r4, r5, r6, pc}
		cloud_sensor.type = CLOUD_CHANNEL_HUMID;
   218e0:	2309      	movs	r3, #9
   218e2:	e7e7      	b.n	218b4 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_PRESS;
   218e4:	230a      	movs	r3, #10
   218e6:	e7e5      	b.n	218b4 <cloud_encode_env_sensors_data+0x60>
		cloud_sensor.type = CLOUD_CHANNEL_AIR_QUAL;
   218e8:	230b      	movs	r3, #11
   218ea:	e7e3      	b.n	218b4 <cloud_encode_env_sensors_data+0x60>
	switch (sensor_data->type) {
   218ec:	f04f 30ff 	mov.w	r0, #4294967295
   218f0:	e7f4      	b.n	218dc <cloud_encode_env_sensors_data+0x88>
   218f2:	bf00      	nop
   218f4:	000450ba 	.word	0x000450ba
   218f8:	00044dbf 	.word	0x00044dbf
   218fc:	00045099 	.word	0x00045099
   21900:	000450d5 	.word	0x000450d5
   21904:	000450eb 	.word	0x000450eb

00021908 <cloud_encode_motion_data>:
{
   21908:	b530      	push	{r4, r5, lr}
   2190a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(motion_data != NULL);
   2190c:	4604      	mov	r4, r0
{
   2190e:	b087      	sub	sp, #28
	__ASSERT_NO_MSG(motion_data != NULL);
   21910:	b958      	cbnz	r0, 2192a <cloud_encode_motion_data+0x22>
   21912:	491d      	ldr	r1, [pc, #116]	; (21988 <cloud_encode_motion_data+0x80>)
   21914:	481d      	ldr	r0, [pc, #116]	; (2198c <cloud_encode_motion_data+0x84>)
   21916:	f44f 73d7 	mov.w	r3, #430	; 0x1ae
   2191a:	4a1d      	ldr	r2, [pc, #116]	; (21990 <cloud_encode_motion_data+0x88>)
   2191c:	f01b fa2b 	bl	3cd76 <printk>
   21920:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   21924:	481a      	ldr	r0, [pc, #104]	; (21990 <cloud_encode_motion_data+0x88>)
   21926:	f01b fcda 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   2192a:	b95d      	cbnz	r5, 21944 <cloud_encode_motion_data+0x3c>
   2192c:	4919      	ldr	r1, [pc, #100]	; (21994 <cloud_encode_motion_data+0x8c>)
   2192e:	4817      	ldr	r0, [pc, #92]	; (2198c <cloud_encode_motion_data+0x84>)
   21930:	f240 13af 	movw	r3, #431	; 0x1af
   21934:	4a16      	ldr	r2, [pc, #88]	; (21990 <cloud_encode_motion_data+0x88>)
   21936:	f01b fa1e 	bl	3cd76 <printk>
   2193a:	f240 11af 	movw	r1, #431	; 0x1af
   2193e:	4814      	ldr	r0, [pc, #80]	; (21990 <cloud_encode_motion_data+0x88>)
   21940:	f01b fccd 	bl	3d2de <assert_post_action>
	struct cloud_channel_data cloud_sensor = {
   21944:	2210      	movs	r2, #16
   21946:	2100      	movs	r1, #0
   21948:	4668      	mov	r0, sp
   2194a:	f020 f9c8 	bl	41cde <memset>
   2194e:	2301      	movs	r3, #1
   21950:	f88d 3000 	strb.w	r3, [sp]
   21954:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   21958:	e9cd 2304 	strd	r2, r3, [sp, #16]
	switch (motion_data->orientation) {
   2195c:	7823      	ldrb	r3, [r4, #0]
   2195e:	2b01      	cmp	r3, #1
   21960:	d005      	beq.n	2196e <cloud_encode_motion_data+0x66>
   21962:	2b02      	cmp	r3, #2
   21964:	d00d      	beq.n	21982 <cloud_encode_motion_data+0x7a>
   21966:	f04f 30ff 	mov.w	r0, #4294967295
}
   2196a:	b007      	add	sp, #28
   2196c:	bd30      	pop	{r4, r5, pc}
		cloud_sensor.data.buf = "NORMAL";
   2196e:	4b0a      	ldr	r3, [pc, #40]	; (21998 <cloud_encode_motion_data+0x90>)
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   21970:	9301      	str	r3, [sp, #4]
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   21972:	2303      	movs	r3, #3
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   21974:	462a      	mov	r2, r5
   21976:	2106      	movs	r1, #6
   21978:	4668      	mov	r0, sp
	cloud_sensor.data.len = sizeof(cloud_sensor.data.buf) - 1;
   2197a:	9302      	str	r3, [sp, #8]
	return cloud_encode_data(&cloud_sensor, CLOUD_CMD_GROUP_DATA, output);
   2197c:	f7ff fece 	bl	2171c <cloud_encode_data>
   21980:	e7f3      	b.n	2196a <cloud_encode_motion_data+0x62>
		cloud_sensor.data.buf = "UPSIDE_DOWN";
   21982:	4b06      	ldr	r3, [pc, #24]	; (2199c <cloud_encode_motion_data+0x94>)
   21984:	e7f4      	b.n	21970 <cloud_encode_motion_data+0x68>
   21986:	bf00      	nop
   21988:	000450f0 	.word	0x000450f0
   2198c:	00044dbf 	.word	0x00044dbf
   21990:	00045099 	.word	0x00045099
   21994:	000450d5 	.word	0x000450d5
   21998:	0004510b 	.word	0x0004510b
   2199c:	00045112 	.word	0x00045112

000219a0 <cloud_encode_device_status_data>:
{
   219a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219a4:	4680      	mov	r8, r0
   219a6:	4692      	mov	sl, r2
   219a8:	469b      	mov	fp, r3
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   219aa:	4689      	mov	r9, r1
{
   219ac:	b085      	sub	sp, #20
	__ASSERT_NO_MSG((ui != NULL) || !ui_count);
   219ae:	b961      	cbnz	r1, 219ca <cloud_encode_device_status_data+0x2a>
   219b0:	b15a      	cbz	r2, 219ca <cloud_encode_device_status_data+0x2a>
   219b2:	495a      	ldr	r1, [pc, #360]	; (21b1c <cloud_encode_device_status_data+0x17c>)
   219b4:	485a      	ldr	r0, [pc, #360]	; (21b20 <cloud_encode_device_status_data+0x180>)
   219b6:	f44f 7311 	mov.w	r3, #580	; 0x244
   219ba:	4a5a      	ldr	r2, [pc, #360]	; (21b24 <cloud_encode_device_status_data+0x184>)
   219bc:	f01b f9db 	bl	3cd76 <printk>
   219c0:	f44f 7111 	mov.w	r1, #580	; 0x244
   219c4:	4857      	ldr	r0, [pc, #348]	; (21b24 <cloud_encode_device_status_data+0x184>)
   219c6:	f01b fc8a 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG((fota != NULL) || !fota_count);
   219ca:	f1bb 0f00 	cmp.w	fp, #0
   219ce:	d10d      	bne.n	219ec <cloud_encode_device_status_data+0x4c>
   219d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   219d2:	b15b      	cbz	r3, 219ec <cloud_encode_device_status_data+0x4c>
   219d4:	4954      	ldr	r1, [pc, #336]	; (21b28 <cloud_encode_device_status_data+0x188>)
   219d6:	4852      	ldr	r0, [pc, #328]	; (21b20 <cloud_encode_device_status_data+0x180>)
   219d8:	f240 2345 	movw	r3, #581	; 0x245
   219dc:	4a51      	ldr	r2, [pc, #324]	; (21b24 <cloud_encode_device_status_data+0x184>)
   219de:	f01b f9ca 	bl	3cd76 <printk>
   219e2:	f240 2145 	movw	r1, #581	; 0x245
   219e6:	484f      	ldr	r0, [pc, #316]	; (21b24 <cloud_encode_device_status_data+0x184>)
   219e8:	f01b fc79 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(output != NULL);
   219ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
   219ee:	b95b      	cbnz	r3, 21a08 <cloud_encode_device_status_data+0x68>
   219f0:	494e      	ldr	r1, [pc, #312]	; (21b2c <cloud_encode_device_status_data+0x18c>)
   219f2:	484b      	ldr	r0, [pc, #300]	; (21b20 <cloud_encode_device_status_data+0x180>)
   219f4:	f240 2346 	movw	r3, #582	; 0x246
   219f8:	4a4a      	ldr	r2, [pc, #296]	; (21b24 <cloud_encode_device_status_data+0x184>)
   219fa:	f01b f9bc 	bl	3cd76 <printk>
   219fe:	f240 2146 	movw	r1, #582	; 0x246
   21a02:	4848      	ldr	r0, [pc, #288]	; (21b24 <cloud_encode_device_status_data+0x184>)
   21a04:	f01b fc6b 	bl	3d2de <assert_post_action>
	cJSON *root_obj = cJSON_CreateObject();
   21a08:	f007 fab0 	bl	28f6c <cJSON_CreateObject>
   21a0c:	4606      	mov	r6, r0
	cJSON *state_obj = cJSON_CreateObject();
   21a0e:	f007 faad 	bl	28f6c <cJSON_CreateObject>
   21a12:	4607      	mov	r7, r0
	cJSON *reported_obj = cJSON_CreateObject();
   21a14:	f007 faaa 	bl	28f6c <cJSON_CreateObject>
   21a18:	4605      	mov	r5, r0
	cJSON *device_obj = cJSON_CreateObject();
   21a1a:	f007 faa7 	bl	28f6c <cJSON_CreateObject>
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   21a1e:	4b44      	ldr	r3, [pc, #272]	; (21b30 <cloud_encode_device_status_data+0x190>)
	cJSON *device_obj = cJSON_CreateObject();
   21a20:	4604      	mov	r4, r0
	char dev_str[] = CLOUD_CHANNEL_STR_DEVICE_INFO;
   21a22:	889a      	ldrh	r2, [r3, #4]
   21a24:	6818      	ldr	r0, [r3, #0]
   21a26:	799b      	ldrb	r3, [r3, #6]
   21a28:	9002      	str	r0, [sp, #8]
   21a2a:	f8ad 200c 	strh.w	r2, [sp, #12]
   21a2e:	f88d 300e 	strb.w	r3, [sp, #14]
	if (root_obj == NULL || state_obj == NULL ||
   21a32:	b116      	cbz	r6, 21a3a <cloud_encode_device_status_data+0x9a>
   21a34:	b10f      	cbz	r7, 21a3a <cloud_encode_device_status_data+0x9a>
   21a36:	b105      	cbz	r5, 21a3a <cloud_encode_device_status_data+0x9a>
	    reported_obj == NULL || device_obj == NULL) {
   21a38:	b984      	cbnz	r4, 21a5c <cloud_encode_device_status_data+0xbc>
		cJSON_Delete(root_obj);
   21a3a:	4630      	mov	r0, r6
   21a3c:	f007 f9c2 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   21a40:	4638      	mov	r0, r7
   21a42:	f007 f9bf 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   21a46:	4628      	mov	r0, r5
   21a48:	f007 f9bc 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(device_obj);
   21a4c:	4620      	mov	r0, r4
   21a4e:	f007 f9b9 	bl	28dc4 <cJSON_Delete>
		return -ENOMEM;
   21a52:	f06f 000b 	mvn.w	r0, #11
}
   21a56:	b005      	add	sp, #20
   21a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	cJSON *dummy_obj = cJSON_CreateNull();
   21a5c:	f007 fa46 	bl	28eec <cJSON_CreateNull>
	if (dummy_obj == NULL) {
   21a60:	4602      	mov	r2, r0
   21a62:	b118      	cbz	r0, 21a6c <cloud_encode_device_status_data+0xcc>
	cJSON_AddItemToObject(parent, str, item);
   21a64:	4628      	mov	r0, r5
   21a66:	a902      	add	r1, sp, #8
   21a68:	f01d fcbb 	bl	3f3e2 <cJSON_AddItemToObject>
		dev_str[i] = tolower(dev_str[i]);
   21a6c:	4831      	ldr	r0, [pc, #196]	; (21b34 <cloud_encode_device_status_data+0x194>)
   21a6e:	aa02      	add	r2, sp, #8
	for (int i = 0; dev_str[i]; ++i) {
   21a70:	f812 3b01 	ldrb.w	r3, [r2], #1
   21a74:	bb8b      	cbnz	r3, 21ada <cloud_encode_device_status_data+0x13a>
	if (modem_param) {
   21a76:	f1b8 0f00 	cmp.w	r8, #0
   21a7a:	d137      	bne.n	21aec <cloud_encode_device_status_data+0x14c>
	size_t item_cnt = 0;
   21a7c:	f04f 0800 	mov.w	r8, #0
	if (service_info_json_object_encode(ui, ui_count,
   21a80:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   21a84:	465a      	mov	r2, fp
   21a86:	9300      	str	r3, [sp, #0]
   21a88:	4651      	mov	r1, sl
   21a8a:	4648      	mov	r0, r9
   21a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21a8e:	9401      	str	r4, [sp, #4]
   21a90:	f000 fae6 	bl	22060 <service_info_json_object_encode>
   21a94:	b110      	cbz	r0, 21a9c <cloud_encode_device_status_data+0xfc>
	if (item_cnt != 0) {
   21a96:	f1b8 0f00 	cmp.w	r8, #0
   21a9a:	d02f      	beq.n	21afc <cloud_encode_device_status_data+0x15c>
	cJSON_AddItemToObject(parent, str, item);
   21a9c:	4622      	mov	r2, r4
   21a9e:	4628      	mov	r0, r5
   21aa0:	a902      	add	r1, sp, #8
   21aa2:	f01d fc9e 	bl	3f3e2 <cJSON_AddItemToObject>
   21aa6:	462a      	mov	r2, r5
   21aa8:	4638      	mov	r0, r7
   21aaa:	4923      	ldr	r1, [pc, #140]	; (21b38 <cloud_encode_device_status_data+0x198>)
   21aac:	f01d fc99 	bl	3f3e2 <cJSON_AddItemToObject>
   21ab0:	463a      	mov	r2, r7
   21ab2:	4922      	ldr	r1, [pc, #136]	; (21b3c <cloud_encode_device_status_data+0x19c>)
   21ab4:	4630      	mov	r0, r6
   21ab6:	f01d fc94 	bl	3f3e2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   21aba:	4630      	mov	r0, r6
   21abc:	f01d fc74 	bl	3f3a8 <cJSON_PrintUnformatted>
   21ac0:	4604      	mov	r4, r0
	cJSON_Delete(root_obj);
   21ac2:	4630      	mov	r0, r6
   21ac4:	f007 f97e 	bl	28dc4 <cJSON_Delete>
	output->buf = buffer;
   21ac8:	9b10      	ldr	r3, [sp, #64]	; 0x40
	output->len = strlen(buffer);
   21aca:	4620      	mov	r0, r4
	output->buf = buffer;
   21acc:	601c      	str	r4, [r3, #0]
	output->len = strlen(buffer);
   21ace:	f7fb fbc5 	bl	1d25c <strlen>
   21ad2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   21ad4:	6058      	str	r0, [r3, #4]
	return 0;
   21ad6:	2000      	movs	r0, #0
   21ad8:	e7bd      	b.n	21a56 <cloud_encode_device_status_data+0xb6>
		dev_str[i] = tolower(dev_str[i]);
   21ada:	5cc1      	ldrb	r1, [r0, r3]
   21adc:	f001 0103 	and.w	r1, r1, #3
   21ae0:	2901      	cmp	r1, #1
   21ae2:	bf08      	it	eq
   21ae4:	3320      	addeq	r3, #32
   21ae6:	f802 3c01 	strb.w	r3, [r2, #-1]
	for (int i = 0; dev_str[i]; ++i) {
   21aea:	e7c1      	b.n	21a70 <cloud_encode_device_status_data+0xd0>
		val = modem_info_json_object_encode((struct modem_param_info *)
   21aec:	4640      	mov	r0, r8
   21aee:	4621      	mov	r1, r4
   21af0:	f00a fe78 	bl	2c7e4 <modem_info_json_object_encode>
		if (val > 0) {
   21af4:	f1b0 0800 	subs.w	r8, r0, #0
   21af8:	dcc2      	bgt.n	21a80 <cloud_encode_device_status_data+0xe0>
   21afa:	e7bf      	b.n	21a7c <cloud_encode_device_status_data+0xdc>
		cJSON_Delete(root_obj);
   21afc:	4630      	mov	r0, r6
   21afe:	f007 f961 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   21b02:	4638      	mov	r0, r7
   21b04:	f007 f95e 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   21b08:	4628      	mov	r0, r5
   21b0a:	f007 f95b 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(device_obj);
   21b0e:	4620      	mov	r0, r4
   21b10:	f007 f958 	bl	28dc4 <cJSON_Delete>
		return -EAGAIN;
   21b14:	f06f 000a 	mvn.w	r0, #10
   21b18:	e79d      	b.n	21a56 <cloud_encode_device_status_data+0xb6>
   21b1a:	bf00      	nop
   21b1c:	0004511e 	.word	0x0004511e
   21b20:	00044dbf 	.word	0x00044dbf
   21b24:	00045099 	.word	0x00045099
   21b28:	0004513f 	.word	0x0004513f
   21b2c:	000450d5 	.word	0x000450d5
   21b30:	0004516d 	.word	0x0004516d
   21b34:	0004c29f 	.word	0x0004c29f
   21b38:	00045164 	.word	0x00045164
   21b3c:	0004b32e 	.word	0x0004b32e

00021b40 <cloud_decode_command>:
{
   21b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b44:	b091      	sub	sp, #68	; 0x44
	if (input == NULL) {
   21b46:	2800      	cmp	r0, #0
   21b48:	f000 813e 	beq.w	21dc8 <cloud_decode_command+0x288>
	root_obj = cJSON_Parse(input);
   21b4c:	f01d fc28 	bl	3f3a0 <cJSON_Parse>
	if (root_obj == NULL) {
   21b50:	4604      	mov	r4, r0
   21b52:	2800      	cmp	r0, #0
   21b54:	f000 813b 	beq.w	21dce <cloud_decode_command+0x28e>
   21b58:	4e9e      	ldr	r6, [pc, #632]	; (21dd4 <cloud_decode_command+0x294>)
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   21b5a:	2500      	movs	r5, #0
   21b5c:	4637      	mov	r7, r6
			(json_value_string_compare(group_obj,
   21b5e:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 21e10 <cloud_decode_command+0x2d0>
		group_obj = json_object_decode(root_obj, cmd_groups[i]->key);
   21b62:	f856 3b04 	ldr.w	r3, [r6], #4
   21b66:	4620      	mov	r0, r4
   21b68:	6819      	ldr	r1, [r3, #0]
   21b6a:	f01b f8a4 	bl	3ccb6 <json_object_decode>
		if ((group_obj != NULL) &&
   21b6e:	b1f8      	cbz	r0, 21bb0 <cloud_decode_command+0x70>
					cmd_group_str[cmd_groups[i]->group]))) {
   21b70:	f856 3c04 	ldr.w	r3, [r6, #-4]
   21b74:	791b      	ldrb	r3, [r3, #4]
			(json_value_string_compare(group_obj,
   21b76:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   21b7a:	f01b f88d 	bl	3cc98 <json_value_string_compare>
		if ((group_obj != NULL) &&
   21b7e:	b1b8      	cbz	r0, 21bb0 <cloud_decode_command+0x70>
			group = cmd_groups[i];
   21b80:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
	if (group == NULL) {
   21b84:	b9c6      	cbnz	r6, 21bb8 <cloud_decode_command+0x78>
	state_obj = cJSON_GetObjectItem(root_obj, "state");
   21b86:	4994      	ldr	r1, [pc, #592]	; (21dd8 <cloud_decode_command+0x298>)
   21b88:	4620      	mov	r0, r4
   21b8a:	f01d fc1e 	bl	3f3ca <cJSON_GetObjectItem>
	config_obj = cJSON_DetachItemFromObject(
   21b8e:	4993      	ldr	r1, [pc, #588]	; (21ddc <cloud_decode_command+0x29c>)
   21b90:	2800      	cmp	r0, #0
   21b92:	bf08      	it	eq
   21b94:	4620      	moveq	r0, r4
   21b96:	f01d fc3b 	bl	3f410 <cJSON_DetachItemFromObject>
	if (config_obj == NULL) {
   21b9a:	4606      	mov	r6, r0
   21b9c:	2800      	cmp	r0, #0
   21b9e:	f040 8097 	bne.w	21cd0 <cloud_decode_command+0x190>
	cJSON_Delete(root_obj);
   21ba2:	4620      	mov	r0, r4
   21ba4:	f007 f90e 	bl	28dc4 <cJSON_Delete>
	return 0;
   21ba8:	2000      	movs	r0, #0
}
   21baa:	b011      	add	sp, #68	; 0x44
   21bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < ARRAY_SIZE(cmd_groups); ++i) {
   21bb0:	3501      	adds	r5, #1
   21bb2:	2d04      	cmp	r5, #4
   21bb4:	d1d5      	bne.n	21b62 <cloud_decode_command+0x22>
   21bb6:	e7e6      	b.n	21b86 <cloud_decode_command+0x46>
	for (size_t j = 0; j < group->num_children; ++j) {
   21bb8:	f04f 0800 	mov.w	r8, #0
	cmd_parsed.group = group->group;
   21bbc:	4f88      	ldr	r7, [pc, #544]	; (21de0 <cloud_decode_command+0x2a0>)
   21bbe:	7933      	ldrb	r3, [r6, #4]
   21bc0:	703b      	strb	r3, [r7, #0]
	for (size_t j = 0; j < group->num_children; ++j) {
   21bc2:	68f3      	ldr	r3, [r6, #12]
   21bc4:	4598      	cmp	r8, r3
   21bc6:	d2de      	bcs.n	21b86 <cloud_decode_command+0x46>
			json_object_decode(root_obj, group->children[j].key);
   21bc8:	68b3      	ldr	r3, [r6, #8]
   21bca:	ea4f 1508 	mov.w	r5, r8, lsl #4
   21bce:	4620      	mov	r0, r4
   21bd0:	5959      	ldr	r1, [r3, r5]
   21bd2:	f01b f870 	bl	3ccb6 <json_object_decode>
		if ((channel_obj != NULL) &&
   21bd6:	2800      	cmp	r0, #0
   21bd8:	d04e      	beq.n	21c78 <cloud_decode_command+0x138>
			    channel_type_str[group->children[j].channel]))) {
   21bda:	68b3      	ldr	r3, [r6, #8]
		    (json_value_string_compare(
   21bdc:	4a81      	ldr	r2, [pc, #516]	; (21de4 <cloud_decode_command+0x2a4>)
			    channel_type_str[group->children[j].channel]))) {
   21bde:	442b      	add	r3, r5
   21be0:	791b      	ldrb	r3, [r3, #4]
		    (json_value_string_compare(
   21be2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   21be6:	f01b f857 	bl	3cc98 <json_value_string_compare>
		if ((channel_obj != NULL) &&
   21bea:	2800      	cmp	r0, #0
   21bec:	d044      	beq.n	21c78 <cloud_decode_command+0x138>
			chan = &group->children[j];
   21bee:	68b3      	ldr	r3, [r6, #8]
	if (chan == NULL) {
   21bf0:	195d      	adds	r5, r3, r5
   21bf2:	d0c8      	beq.n	21b86 <cloud_decode_command+0x46>
	for (size_t k = 0; k < chan->num_children; ++k) {
   21bf4:	f04f 0800 	mov.w	r8, #0
	cmd_parsed.channel = chan->channel;
   21bf8:	792b      	ldrb	r3, [r5, #4]
   21bfa:	4a7b      	ldr	r2, [pc, #492]	; (21de8 <cloud_decode_command+0x2a8>)
   21bfc:	707b      	strb	r3, [r7, #1]
   21bfe:	4b7b      	ldr	r3, [pc, #492]	; (21dec <cloud_decode_command+0x2ac>)
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   21c00:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 21de0 <cloud_decode_command+0x2a0>
   21c04:	1a9b      	subs	r3, r3, r2
   21c06:	08db      	lsrs	r3, r3, #3
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   21c08:	019b      	lsls	r3, r3, #6
   21c0a:	9305      	str	r3, [sp, #20]
   21c0c:	f043 0303 	orr.w	r3, r3, #3
   21c10:	9306      	str	r3, [sp, #24]
	for (size_t k = 0; k < chan->num_children; ++k) {
   21c12:	68eb      	ldr	r3, [r5, #12]
   21c14:	4598      	cmp	r8, r3
   21c16:	d2b6      	bcs.n	21b86 <cloud_decode_command+0x46>
		type = &chan->children[k];
   21c18:	68aa      	ldr	r2, [r5, #8]
   21c1a:	ea4f 1308 	mov.w	r3, r8, lsl #4
		type_obj = json_object_decode(root_obj, type->key);
   21c1e:	58d1      	ldr	r1, [r2, r3]
   21c20:	4620      	mov	r0, r4
		type = &chan->children[k];
   21c22:	eb02 1b08 	add.w	fp, r2, r8, lsl #4
		type_obj = json_object_decode(root_obj, type->key);
   21c26:	f01b f846 	bl	3ccb6 <json_object_decode>
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   21c2a:	464a      	mov	r2, r9
		type_obj = json_object_decode(root_obj, type->key);
   21c2c:	4601      	mov	r1, r0
		ret = cloud_cmd_parse_type(type, type_obj, &cmd_parsed);
   21c2e:	4658      	mov	r0, fp
   21c30:	f7ff fcc6 	bl	215c0 <cloud_cmd_parse_type>
		if (ret != 0) {
   21c34:	b318      	cbz	r0, 21c7e <cloud_decode_command+0x13e>
			if (ret != -ENOENT) {
   21c36:	1c81      	adds	r1, r0, #2
   21c38:	9008      	str	r0, [sp, #32]
   21c3a:	d01a      	beq.n	21c72 <cloud_decode_command+0x132>
				LOG_ERR("[%s:%d] Unhandled cmd format for %s, %s, error %d",
   21c3c:	7932      	ldrb	r2, [r6, #4]
   21c3e:	9b05      	ldr	r3, [sp, #20]
   21c40:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   21c44:	f043 0b01 	orr.w	fp, r3, #1
   21c48:	f01b fb6d 	bl	3d326 <log_strdup>
   21c4c:	7929      	ldrb	r1, [r5, #4]
   21c4e:	4b65      	ldr	r3, [pc, #404]	; (21de4 <cloud_decode_command+0x2a4>)
   21c50:	9007      	str	r0, [sp, #28]
   21c52:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   21c56:	f01b fb66 	bl	3d326 <log_strdup>
   21c5a:	9b08      	ldr	r3, [sp, #32]
   21c5c:	9a07      	ldr	r2, [sp, #28]
   21c5e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   21c62:	9200      	str	r2, [sp, #0]
   21c64:	f44f 7358 	mov.w	r3, #864	; 0x360
   21c68:	4658      	mov	r0, fp
   21c6a:	4a61      	ldr	r2, [pc, #388]	; (21df0 <cloud_decode_command+0x2b0>)
   21c6c:	4961      	ldr	r1, [pc, #388]	; (21df4 <cloud_decode_command+0x2b4>)
   21c6e:	f01b fb47 	bl	3d300 <log_string_sync>
	for (size_t k = 0; k < chan->num_children; ++k) {
   21c72:	f108 0801 	add.w	r8, r8, #1
   21c76:	e7cc      	b.n	21c12 <cloud_decode_command+0xd2>
	for (size_t j = 0; j < group->num_children; ++j) {
   21c78:	f108 0801 	add.w	r8, r8, #1
   21c7c:	e7a1      	b.n	21bc2 <cloud_decode_command+0x82>
		LOG_INF("[%s:%d] Found cmd %s, %s, %s\n", __func__, __LINE__,
   21c7e:	783b      	ldrb	r3, [r7, #0]
   21c80:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
   21c84:	f01b fb4f 	bl	3d326 <log_strdup>
   21c88:	787b      	ldrb	r3, [r7, #1]
   21c8a:	4a56      	ldr	r2, [pc, #344]	; (21de4 <cloud_decode_command+0x2a4>)
   21c8c:	4683      	mov	fp, r0
   21c8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   21c92:	f01b fb48 	bl	3d326 <log_strdup>
   21c96:	78b9      	ldrb	r1, [r7, #2]
   21c98:	4a57      	ldr	r2, [pc, #348]	; (21df8 <cloud_decode_command+0x2b8>)
   21c9a:	9007      	str	r0, [sp, #28]
   21c9c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   21ca0:	f01b fb41 	bl	3d326 <log_strdup>
   21ca4:	9b07      	ldr	r3, [sp, #28]
   21ca6:	4a52      	ldr	r2, [pc, #328]	; (21df0 <cloud_decode_command+0x2b0>)
   21ca8:	e9cd b300 	strd	fp, r3, [sp]
   21cac:	4953      	ldr	r1, [pc, #332]	; (21dfc <cloud_decode_command+0x2bc>)
   21cae:	f44f 735a 	mov.w	r3, #872	; 0x368
   21cb2:	9002      	str	r0, [sp, #8]
   21cb4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   21cb8:	f01b fb22 	bl	3d300 <log_string_sync>
		(void)cloud_cmd_handle_sensor_set_chan_cfg(&cmd_parsed);
   21cbc:	4648      	mov	r0, r9
   21cbe:	f7ff fc2d 	bl	2151c <cloud_cmd_handle_sensor_set_chan_cfg>
		if (cloud_command_cb) {
   21cc2:	4b4f      	ldr	r3, [pc, #316]	; (21e00 <cloud_decode_command+0x2c0>)
   21cc4:	681b      	ldr	r3, [r3, #0]
   21cc6:	2b00      	cmp	r3, #0
   21cc8:	d0d3      	beq.n	21c72 <cloud_decode_command+0x132>
			cloud_command_cb(&cmd_parsed);
   21cca:	4648      	mov	r0, r9
   21ccc:	4798      	blx	r3
   21cce:	e7d0      	b.n	21c72 <cloud_decode_command+0x132>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   21cd0:	2700      	movs	r7, #0
   21cd2:	4b46      	ldr	r3, [pc, #280]	; (21dec <cloud_decode_command+0x2ac>)
   21cd4:	4a44      	ldr	r2, [pc, #272]	; (21de8 <cloud_decode_command+0x2a8>)
   21cd6:	f8df 913c 	ldr.w	r9, [pc, #316]	; 21e14 <cloud_decode_command+0x2d4>
   21cda:	1a9b      	subs	r3, r3, r2
   21cdc:	08db      	lsrs	r3, r3, #3
		cJSON *channel_obj = json_object_decode(
   21cde:	f8df a104 	ldr.w	sl, [pc, #260]	; 21de4 <cloud_decode_command+0x2a4>
   21ce2:	9307      	str	r3, [sp, #28]
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   21ce4:	f8d9 300c 	ldr.w	r3, [r9, #12]
   21ce8:	429f      	cmp	r7, r3
   21cea:	d303      	bcc.n	21cf4 <cloud_decode_command+0x1b4>
	cJSON_Delete(config_obj);
   21cec:	4630      	mov	r0, r6
   21cee:	f007 f869 	bl	28dc4 <cJSON_Delete>
	return 0;
   21cf2:	e756      	b.n	21ba2 <cloud_decode_command+0x62>
		struct cloud_command found_config_item = {
   21cf4:	2218      	movs	r2, #24
   21cf6:	2100      	movs	r1, #0
   21cf8:	a80a      	add	r0, sp, #40	; 0x28
   21cfa:	f01f fff0 	bl	41cde <memset>
   21cfe:	2308      	movs	r3, #8
   21d00:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
			channel_type_str[group->children[ch].channel]);
   21d04:	f8d9 3008 	ldr.w	r3, [r9, #8]
		cJSON *channel_obj = json_object_decode(
   21d08:	4630      	mov	r0, r6
			channel_type_str[group->children[ch].channel]);
   21d0a:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   21d0e:	791b      	ldrb	r3, [r3, #4]
   21d10:	013d      	lsls	r5, r7, #4
		cJSON *channel_obj = json_object_decode(
   21d12:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
   21d16:	f01a ffce 	bl	3ccb6 <json_object_decode>
		if (channel_obj == NULL) {
   21d1a:	9005      	str	r0, [sp, #20]
   21d1c:	b908      	cbnz	r0, 21d22 <cloud_decode_command+0x1e2>
	for (size_t ch = 0; ch < group->num_children; ++ch) {
   21d1e:	3701      	adds	r7, #1
   21d20:	e7e0      	b.n	21ce4 <cloud_decode_command+0x1a4>
		for (size_t type = 0; type < chan->num_children; ++type) {
   21d22:	f04f 0800 	mov.w	r8, #0
		struct cmd *chan = &group->children[ch];
   21d26:	f8d9 3008 	ldr.w	r3, [r9, #8]
   21d2a:	441d      	add	r5, r3
		found_config_item.channel = chan->channel;
   21d2c:	792b      	ldrb	r3, [r5, #4]
   21d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   21d32:	9b07      	ldr	r3, [sp, #28]
   21d34:	019b      	lsls	r3, r3, #6
   21d36:	9306      	str	r3, [sp, #24]
   21d38:	f043 0303 	orr.w	r3, r3, #3
   21d3c:	9308      	str	r3, [sp, #32]
		for (size_t type = 0; type < chan->num_children; ++type) {
   21d3e:	68eb      	ldr	r3, [r5, #12]
   21d40:	4598      	cmp	r8, r3
   21d42:	d2ec      	bcs.n	21d1e <cloud_decode_command+0x1de>
			int ret = cloud_cmd_parse_type(&chan->children[type],
   21d44:	68a8      	ldr	r0, [r5, #8]
   21d46:	9905      	ldr	r1, [sp, #20]
   21d48:	aa0a      	add	r2, sp, #40	; 0x28
   21d4a:	eb00 1008 	add.w	r0, r0, r8, lsl #4
   21d4e:	f7ff fc37 	bl	215c0 <cloud_cmd_parse_type>
			if (ret != 0) {
   21d52:	b1b8      	cbz	r0, 21d84 <cloud_decode_command+0x244>
				if (ret != -ENOENT) {
   21d54:	1c82      	adds	r2, r0, #2
   21d56:	9009      	str	r0, [sp, #36]	; 0x24
   21d58:	d011      	beq.n	21d7e <cloud_decode_command+0x23e>
					LOG_ERR("[%s:%d] Unhandled cfg format for %s, error %d",
   21d5a:	792a      	ldrb	r2, [r5, #4]
   21d5c:	9b06      	ldr	r3, [sp, #24]
   21d5e:	f85a 0022 	ldr.w	r0, [sl, r2, lsl #2]
   21d62:	f043 0b01 	orr.w	fp, r3, #1
   21d66:	f01b fade 	bl	3d326 <log_strdup>
   21d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21d6c:	4a25      	ldr	r2, [pc, #148]	; (21e04 <cloud_decode_command+0x2c4>)
   21d6e:	e9cd 0300 	strd	r0, r3, [sp]
   21d72:	4925      	ldr	r1, [pc, #148]	; (21e08 <cloud_decode_command+0x2c8>)
   21d74:	f240 33a5 	movw	r3, #933	; 0x3a5
   21d78:	4658      	mov	r0, fp
   21d7a:	f01b fac1 	bl	3d300 <log_string_sync>
		for (size_t type = 0; type < chan->num_children; ++type) {
   21d7e:	f108 0801 	add.w	r8, r8, #1
   21d82:	e7dc      	b.n	21d3e <cloud_decode_command+0x1fe>
			LOG_INF("[%s:%d] Found cfg item %s, %s\n", __func__,
   21d84:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   21d88:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
   21d8c:	f01b facb 	bl	3d326 <log_strdup>
   21d90:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   21d94:	4a18      	ldr	r2, [pc, #96]	; (21df8 <cloud_decode_command+0x2b8>)
   21d96:	4683      	mov	fp, r0
   21d98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   21d9c:	f01b fac3 	bl	3d326 <log_strdup>
   21da0:	f240 33ad 	movw	r3, #941	; 0x3ad
   21da4:	e9cd b000 	strd	fp, r0, [sp]
   21da8:	4a16      	ldr	r2, [pc, #88]	; (21e04 <cloud_decode_command+0x2c4>)
   21daa:	4918      	ldr	r1, [pc, #96]	; (21e0c <cloud_decode_command+0x2cc>)
   21dac:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   21db0:	f01b faa6 	bl	3d300 <log_string_sync>
			(void)cloud_cmd_handle_sensor_set_chan_cfg(
   21db4:	a80a      	add	r0, sp, #40	; 0x28
   21db6:	f7ff fbb1 	bl	2151c <cloud_cmd_handle_sensor_set_chan_cfg>
			if (cloud_command_cb) {
   21dba:	4b11      	ldr	r3, [pc, #68]	; (21e00 <cloud_decode_command+0x2c0>)
   21dbc:	681b      	ldr	r3, [r3, #0]
   21dbe:	2b00      	cmp	r3, #0
   21dc0:	d0dd      	beq.n	21d7e <cloud_decode_command+0x23e>
				cloud_command_cb(&found_config_item);
   21dc2:	a80a      	add	r0, sp, #40	; 0x28
   21dc4:	4798      	blx	r3
   21dc6:	e7da      	b.n	21d7e <cloud_decode_command+0x23e>
		return -EINVAL;
   21dc8:	f06f 0015 	mvn.w	r0, #21
   21dcc:	e6ed      	b.n	21baa <cloud_decode_command+0x6a>
		return -ENOENT;
   21dce:	f06f 0001 	mvn.w	r0, #1
   21dd2:	e6ea      	b.n	21baa <cloud_decode_command+0x6a>
   21dd4:	200154a0 	.word	0x200154a0
   21dd8:	0004b32e 	.word	0x0004b32e
   21ddc:	0004b725 	.word	0x0004b725
   21de0:	200167e0 	.word	0x200167e0
   21de4:	000436b0 	.word	0x000436b0
   21de8:	0004339c 	.word	0x0004339c
   21dec:	000433d4 	.word	0x000433d4
   21df0:	000452ce 	.word	0x000452ce
   21df4:	00045174 	.word	0x00045174
   21df8:	00043730 	.word	0x00043730
   21dfc:	000451a6 	.word	0x000451a6
   21e00:	20018c60 	.word	0x20018c60
   21e04:	000452df 	.word	0x000452df
   21e08:	000451c4 	.word	0x000451c4
   21e0c:	000451f2 	.word	0x000451f2
   21e10:	00043704 	.word	0x00043704
   21e14:	200154b0 	.word	0x200154b0

00021e18 <cloud_decode_init>:
{
   21e18:	b510      	push	{r4, lr}
   21e1a:	4604      	mov	r4, r0
	cJSON_Init();
   21e1c:	f007 f8b8 	bl	28f90 <cJSON_Init>
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21e20:	2200      	movs	r2, #0
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   21e22:	2000      	movs	r0, #0
	cloud_command_cb = cb;
   21e24:	4b08      	ldr	r3, [pc, #32]	; (21e48 <cloud_decode_init+0x30>)
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   21e26:	4909      	ldr	r1, [pc, #36]	; (21e4c <cloud_decode_init+0x34>)
	cloud_command_cb = cb;
   21e28:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21e2a:	4b09      	ldr	r3, [pc, #36]	; (21e50 <cloud_decode_init+0x38>)
   21e2c:	3201      	adds	r2, #1
   21e2e:	2a0a      	cmp	r2, #10
			[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] =
   21e30:	e9c3 0102 	strd	r0, r1, [r3, #8]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] =
   21e34:	e9c3 0106 	strd	r0, r1, [r3, #24]
			[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] =
   21e38:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21e3c:	f103 0330 	add.w	r3, r3, #48	; 0x30
   21e40:	d1f4      	bne.n	21e2c <cloud_decode_init+0x14>
}
   21e42:	2000      	movs	r0, #0
   21e44:	bd10      	pop	{r4, pc}
   21e46:	bf00      	nop
   21e48:	20018c60 	.word	0x20018c60
   21e4c:	bff00000 	.word	0xbff00000
   21e50:	20014518 	.word	0x20014518

00021e54 <cloud_get_channel_enable_state>:
{
   21e54:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21e56:	2300      	movs	r3, #0
		if (sensor_cfg[i].chan == channel) {
   21e58:	2430      	movs	r4, #48	; 0x30
   21e5a:	4a09      	ldr	r2, [pc, #36]	; (21e80 <cloud_get_channel_enable_state+0x2c>)
   21e5c:	fb04 f103 	mul.w	r1, r4, r3
   21e60:	5c8d      	ldrb	r5, [r1, r2]
   21e62:	4285      	cmp	r5, r0
   21e64:	d106      	bne.n	21e74 <cloud_get_channel_enable_state+0x20>
				   [SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE];
   21e66:	440a      	add	r2, r1
   21e68:	e9d2 0102 	ldrd	r0, r1, [r2, #8]
   21e6c:	f7fa ff3e 	bl	1ccec <__aeabi_d2iz>
   21e70:	b240      	sxtb	r0, r0
}
   21e72:	bd38      	pop	{r3, r4, r5, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21e74:	3301      	adds	r3, #1
   21e76:	2b0a      	cmp	r3, #10
   21e78:	d1f0      	bne.n	21e5c <cloud_get_channel_enable_state+0x8>
	return CLOUD_CMD_STATE_UNDEFINED;
   21e7a:	f04f 30ff 	mov.w	r0, #4294967295
   21e7e:	e7f8      	b.n	21e72 <cloud_get_channel_enable_state+0x1e>
   21e80:	20014518 	.word	0x20014518

00021e84 <cloud_encode_config_data>:
{
   21e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT_NO_MSG(output != NULL);
   21e88:	4606      	mov	r6, r0
   21e8a:	b958      	cbnz	r0, 21ea4 <cloud_encode_config_data+0x20>
   21e8c:	493a      	ldr	r1, [pc, #232]	; (21f78 <cloud_encode_config_data+0xf4>)
   21e8e:	483b      	ldr	r0, [pc, #236]	; (21f7c <cloud_encode_config_data+0xf8>)
   21e90:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   21e94:	4a3a      	ldr	r2, [pc, #232]	; (21f80 <cloud_encode_config_data+0xfc>)
   21e96:	f01a ff6e 	bl	3cd76 <printk>
   21e9a:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   21e9e:	4838      	ldr	r0, [pc, #224]	; (21f80 <cloud_encode_config_data+0xfc>)
   21ea0:	f01b fa1d 	bl	3d2de <assert_post_action>
	cJSON *chan_obj = cJSON_CreateObject();
   21ea4:	f007 f862 	bl	28f6c <cJSON_CreateObject>
   21ea8:	4605      	mov	r5, r0
	cJSON *state_obj = cJSON_CreateObject();
   21eaa:	f007 f85f 	bl	28f6c <cJSON_CreateObject>
   21eae:	4682      	mov	sl, r0
	cJSON *reported_obj = cJSON_CreateObject();
   21eb0:	f007 f85c 	bl	28f6c <cJSON_CreateObject>
   21eb4:	4681      	mov	r9, r0
	cJSON *config_obj = cJSON_CreateObject();
   21eb6:	f007 f859 	bl	28f6c <cJSON_CreateObject>
   21eba:	4680      	mov	r8, r0
	cJSON *root_obj = cJSON_CreateObject();
   21ebc:	f007 f856 	bl	28f6c <cJSON_CreateObject>
   21ec0:	4604      	mov	r4, r0
	if (chan_obj == NULL || state_obj == NULL ||
   21ec2:	2d00      	cmp	r5, #0
   21ec4:	d043      	beq.n	21f4e <cloud_encode_config_data+0xca>
   21ec6:	f1ba 0f00 	cmp.w	sl, #0
   21eca:	d040      	beq.n	21f4e <cloud_encode_config_data+0xca>
   21ecc:	f1b9 0f00 	cmp.w	r9, #0
   21ed0:	d03d      	beq.n	21f4e <cloud_encode_config_data+0xca>
	    reported_obj == NULL || config_obj == NULL ||
   21ed2:	f1b8 0f00 	cmp.w	r8, #0
   21ed6:	d03a      	beq.n	21f4e <cloud_encode_config_data+0xca>
   21ed8:	2800      	cmp	r0, #0
   21eda:	d038      	beq.n	21f4e <cloud_encode_config_data+0xca>
		cloud_get_channel_enable_state(CLOUD_CHANNEL_GPS);
   21edc:	2000      	movs	r0, #0
   21ede:	f7ff ffb9 	bl	21e54 <cloud_get_channel_enable_state>
	if (gps_state != CLOUD_CMD_STATE_UNDEFINED) {
   21ee2:	1c42      	adds	r2, r0, #1
   21ee4:	d00a      	beq.n	21efc <cloud_encode_config_data+0x78>
	json_bool = cJSON_CreateBool(value);
   21ee6:	1e43      	subs	r3, r0, #1
   21ee8:	4258      	negs	r0, r3
   21eea:	4158      	adcs	r0, r3
   21eec:	f007 f80a 	bl	28f04 <cJSON_CreateBool>
	if (json_bool == NULL) {
   21ef0:	4602      	mov	r2, r0
   21ef2:	b360      	cbz	r0, 21f4e <cloud_encode_config_data+0xca>
	cJSON_AddItemToObject(parent, str, item);
   21ef4:	4628      	mov	r0, r5
   21ef6:	4923      	ldr	r1, [pc, #140]	; (21f84 <cloud_encode_config_data+0x100>)
   21ef8:	f01d fa73 	bl	3f3e2 <cJSON_AddItemToObject>
	if (cJSON_GetArraySize(chan_obj) == 0) {
   21efc:	4628      	mov	r0, r5
   21efe:	f01d fa56 	bl	3f3ae <cJSON_GetArraySize>
   21f02:	4607      	mov	r7, r0
   21f04:	b328      	cbz	r0, 21f52 <cloud_encode_config_data+0xce>
	cJSON_AddItemToObject(config_obj, channel_type_str[CLOUD_CHANNEL_GPS],
   21f06:	462a      	mov	r2, r5
   21f08:	4640      	mov	r0, r8
   21f0a:	491f      	ldr	r1, [pc, #124]	; (21f88 <cloud_encode_config_data+0x104>)
   21f0c:	f01d fa69 	bl	3f3e2 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(reported_obj, "config", config_obj);
   21f10:	4642      	mov	r2, r8
   21f12:	4648      	mov	r0, r9
   21f14:	491d      	ldr	r1, [pc, #116]	; (21f8c <cloud_encode_config_data+0x108>)
   21f16:	f01d fa64 	bl	3f3e2 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(state_obj, "reported", reported_obj);
   21f1a:	464a      	mov	r2, r9
   21f1c:	4650      	mov	r0, sl
   21f1e:	491c      	ldr	r1, [pc, #112]	; (21f90 <cloud_encode_config_data+0x10c>)
   21f20:	f01d fa5f 	bl	3f3e2 <cJSON_AddItemToObject>
	cJSON_AddItemToObject(root_obj, "state", state_obj);
   21f24:	4652      	mov	r2, sl
   21f26:	491b      	ldr	r1, [pc, #108]	; (21f94 <cloud_encode_config_data+0x110>)
   21f28:	4620      	mov	r0, r4
   21f2a:	f01d fa5a 	bl	3f3e2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(root_obj);
   21f2e:	4620      	mov	r0, r4
   21f30:	f01d fa3a 	bl	3f3a8 <cJSON_PrintUnformatted>
   21f34:	4605      	mov	r5, r0
	cJSON_Delete(root_obj);
   21f36:	4620      	mov	r0, r4
   21f38:	f006 ff44 	bl	28dc4 <cJSON_Delete>
	output->len = strlen(buffer);
   21f3c:	4628      	mov	r0, r5
	output->buf = buffer;
   21f3e:	6035      	str	r5, [r6, #0]
	output->len = strlen(buffer);
   21f40:	f7fb f98c 	bl	1d25c <strlen>
	return 0;
   21f44:	2700      	movs	r7, #0
	output->len = strlen(buffer);
   21f46:	6070      	str	r0, [r6, #4]
}
   21f48:	4638      	mov	r0, r7
   21f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ret = -ENOMEM;
   21f4e:	f06f 070b 	mvn.w	r7, #11
	output->buf = NULL;
   21f52:	2300      	movs	r3, #0
	cJSON_Delete(chan_obj);
   21f54:	4628      	mov	r0, r5
	output->len = 0;
   21f56:	e9c6 3300 	strd	r3, r3, [r6]
	cJSON_Delete(chan_obj);
   21f5a:	f006 ff33 	bl	28dc4 <cJSON_Delete>
	cJSON_Delete(state_obj);
   21f5e:	4650      	mov	r0, sl
   21f60:	f006 ff30 	bl	28dc4 <cJSON_Delete>
	cJSON_Delete(reported_obj);
   21f64:	4648      	mov	r0, r9
   21f66:	f006 ff2d 	bl	28dc4 <cJSON_Delete>
	cJSON_Delete(config_obj);
   21f6a:	4640      	mov	r0, r8
   21f6c:	f006 ff2a 	bl	28dc4 <cJSON_Delete>
	cJSON_Delete(root_obj);
   21f70:	4620      	mov	r0, r4
   21f72:	f006 ff27 	bl	28dc4 <cJSON_Delete>
	return ret;
   21f76:	e7e7      	b.n	21f48 <cloud_encode_config_data+0xc4>
   21f78:	000450d5 	.word	0x000450d5
   21f7c:	00044dbf 	.word	0x00044dbf
   21f80:	00045099 	.word	0x00045099
   21f84:	00045211 	.word	0x00045211
   21f88:	0004b081 	.word	0x0004b081
   21f8c:	0004b725 	.word	0x0004b725
   21f90:	00045164 	.word	0x00045164
   21f94:	0004b32e 	.word	0x0004b32e

00021f98 <cloud_set_channel_enable_state>:
{
   21f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f9a:	4606      	mov	r6, r0
   21f9c:	460f      	mov	r7, r1
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21f9e:	2500      	movs	r5, #0
   21fa0:	4c07      	ldr	r4, [pc, #28]	; (21fc0 <cloud_set_channel_enable_state+0x28>)
		if (sensor_cfg[i].chan == channel) {
   21fa2:	7823      	ldrb	r3, [r4, #0]
   21fa4:	42b3      	cmp	r3, r6
   21fa6:	d104      	bne.n	21fb2 <cloud_set_channel_enable_state+0x1a>
				[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] = state;
   21fa8:	4638      	mov	r0, r7
   21faa:	f7fa fb9b 	bl	1c6e4 <__aeabi_i2d>
   21fae:	e9c4 0102 	strd	r0, r1, [r4, #8]
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21fb2:	3501      	adds	r5, #1
   21fb4:	2d0a      	cmp	r5, #10
   21fb6:	f104 0430 	add.w	r4, r4, #48	; 0x30
   21fba:	d1f2      	bne.n	21fa2 <cloud_set_channel_enable_state+0xa>
}
   21fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21fbe:	bf00      	nop
   21fc0:	20014518 	.word	0x20014518

00021fc4 <cloud_is_send_allowed>:
{
   21fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (sensor_cfg[i].chan == channel) {
   21fc8:	4c23      	ldr	r4, [pc, #140]	; (22058 <cloud_is_send_allowed+0x94>)
{
   21fca:	ec57 6b10 	vmov	r6, r7, d0
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   21fce:	2500      	movs	r5, #0
		if (sensor_cfg[i].chan == channel) {
   21fd0:	2230      	movs	r2, #48	; 0x30
   21fd2:	46a2      	mov	sl, r4
   21fd4:	fb02 f305 	mul.w	r3, r2, r5
   21fd8:	5d19      	ldrb	r1, [r3, r4]
   21fda:	4281      	cmp	r1, r0
   21fdc:	d12a      	bne.n	22034 <cloud_is_send_allowed+0x70>
	    (cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_SEND_ENABLE] ==
   21fde:	441c      	add	r4, r3
	if ((cfg == NULL) ||
   21fe0:	2200      	movs	r2, #0
   21fe2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   21fe6:	2300      	movs	r3, #0
   21fe8:	f7fa fe4e 	bl	1cc88 <__aeabi_dcmpeq>
   21fec:	bb28      	cbnz	r0, 2203a <cloud_is_send_allowed+0x76>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_LOW_ENABLE] ==
   21fee:	e9d4 8906 	ldrd	r8, r9, [r4, #24]
   21ff2:	2200      	movs	r2, #0
   21ff4:	4640      	mov	r0, r8
   21ff6:	4649      	mov	r1, r9
   21ff8:	4b18      	ldr	r3, [pc, #96]	; (2205c <cloud_is_send_allowed+0x98>)
   21ffa:	f7fa fe45 	bl	1cc88 <__aeabi_dcmpeq>
   21ffe:	b130      	cbz	r0, 2200e <cloud_is_send_allowed+0x4a>
		CLOUD_CMD_STATE_TRUE) &&
   22000:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22004:	4630      	mov	r0, r6
   22006:	4639      	mov	r1, r7
   22008:	f7fa fe48 	bl	1cc9c <__aeabi_dcmplt>
   2200c:	b9b8      	cbnz	r0, 2203e <cloud_is_send_allowed+0x7a>
	if (((cfg->value[SENSOR_CHAN_CFG_ITEM_TYPE_THRESH_HIGH_ENABLE] ==
   2200e:	2330      	movs	r3, #48	; 0x30
   22010:	fb03 a505 	mla	r5, r3, r5, sl
   22014:	2200      	movs	r2, #0
   22016:	e9d5 010a 	ldrd	r0, r1, [r5, #40]	; 0x28
   2201a:	4b10      	ldr	r3, [pc, #64]	; (2205c <cloud_is_send_allowed+0x98>)
   2201c:	f7fa fe34 	bl	1cc88 <__aeabi_dcmpeq>
   22020:	b178      	cbz	r0, 22042 <cloud_is_send_allowed+0x7e>
		CLOUD_CMD_STATE_TRUE) &&
   22022:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
   22026:	4630      	mov	r0, r6
   22028:	4639      	mov	r1, r7
   2202a:	f7fa fe55 	bl	1ccd8 <__aeabi_dcmpgt>
   2202e:	b930      	cbnz	r0, 2203e <cloud_is_send_allowed+0x7a>
}
   22030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (int i = 0; i < ARRAY_SIZE(sensor_cfg); ++i) {
   22034:	3501      	adds	r5, #1
   22036:	2d0a      	cmp	r5, #10
   22038:	d1cc      	bne.n	21fd4 <cloud_is_send_allowed+0x10>
		return false;
   2203a:	2000      	movs	r0, #0
   2203c:	e7f8      	b.n	22030 <cloud_is_send_allowed+0x6c>
		return true;
   2203e:	2001      	movs	r0, #1
   22040:	e7f6      	b.n	22030 <cloud_is_send_allowed+0x6c>
			!= CLOUD_CMD_STATE_TRUE) &&
   22042:	2200      	movs	r2, #0
   22044:	4640      	mov	r0, r8
   22046:	4649      	mov	r1, r9
   22048:	4b04      	ldr	r3, [pc, #16]	; (2205c <cloud_is_send_allowed+0x98>)
   2204a:	f7fa fe1d 	bl	1cc88 <__aeabi_dcmpeq>
   2204e:	fab0 f080 	clz	r0, r0
   22052:	0940      	lsrs	r0, r0, #5
   22054:	e7ec      	b.n	22030 <cloud_is_send_allowed+0x6c>
   22056:	bf00      	nop
   22058:	20014518 	.word	0x20014518
   2205c:	3ff00000 	.word	0x3ff00000

00022060 <service_info_json_object_encode>:
}

int service_info_json_object_encode(
	const char * const ui[], const uint32_t ui_count, const char * const fota[],
	const uint32_t fota_count, const uint16_t fota_version, cJSON * const obj_out)
{
   22060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22064:	b086      	sub	sp, #24
   22066:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   2206a:	4604      	mov	r4, r0
   2206c:	468a      	mov	sl, r1
   2206e:	4617      	mov	r7, r2
   22070:	4699      	mov	r9, r3
   22072:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
	int err = 0;
	cJSON *service_info_obj = NULL;
	char fota_name[FOTAS_JSON_NAME_SIZE];

	if ((obj_out == NULL) || ((ui == NULL) && ui_count) ||
   22076:	f1b8 0f00 	cmp.w	r8, #0
   2207a:	d03f      	beq.n	220fc <service_info_json_object_encode+0x9c>
   2207c:	b908      	cbnz	r0, 22082 <service_info_json_object_encode+0x22>
   2207e:	2900      	cmp	r1, #0
   22080:	d13c      	bne.n	220fc <service_info_json_object_encode+0x9c>
   22082:	b917      	cbnz	r7, 2208a <service_info_json_object_encode+0x2a>
	    ((fota == NULL) && fota_count)) {
   22084:	f1b9 0f00 	cmp.w	r9, #0
   22088:	d138      	bne.n	220fc <service_info_json_object_encode+0x9c>
		return -EINVAL;
	}

	service_info_obj = cJSON_CreateObject();
   2208a:	f006 ff6f 	bl	28f6c <cJSON_CreateObject>
	if (service_info_obj == NULL) {
   2208e:	4605      	mov	r5, r0
   22090:	2800      	cmp	r0, #0
   22092:	d036      	beq.n	22102 <service_info_json_object_encode+0xa2>
		return -ENOMEM;
	}

	if (!err) {
		err = add_array_obj(ui, ui_count, UI_JSON_NAME,
   22094:	4603      	mov	r3, r0
   22096:	4651      	mov	r1, sl
   22098:	4620      	mov	r0, r4
   2209a:	4a1b      	ldr	r2, [pc, #108]	; (22108 <service_info_json_object_encode+0xa8>)
   2209c:	f01a fe0f 	bl	3ccbe <add_array_obj>
				    service_info_obj);
	}

	if (!err) {
   220a0:	4604      	mov	r4, r0
   220a2:	bb38      	cbnz	r0, 220f4 <service_info_json_object_encode+0x94>
		snprintf(fota_name, sizeof(fota_name), "%s%hu", FOTAS_JSON_NAME,
   220a4:	210c      	movs	r1, #12
   220a6:	4b19      	ldr	r3, [pc, #100]	; (2210c <service_info_json_object_encode+0xac>)
   220a8:	4a19      	ldr	r2, [pc, #100]	; (22110 <service_info_json_object_encode+0xb0>)
   220aa:	eb0d 0001 	add.w	r0, sp, r1
   220ae:	9600      	str	r6, [sp, #0]
   220b0:	f019 fa3c 	bl	3b52c <sniprintf>
			 fota_version);
		err = add_array_obj(fota, fota_count, fota_name,
   220b4:	462b      	mov	r3, r5
   220b6:	4649      	mov	r1, r9
   220b8:	4638      	mov	r0, r7
   220ba:	aa03      	add	r2, sp, #12
   220bc:	f01a fdff 	bl	3ccbe <add_array_obj>
				    service_info_obj);
		if (fota_version > 1) {
   220c0:	2e01      	cmp	r6, #1
		err = add_array_obj(fota, fota_count, fota_name,
   220c2:	4604      	mov	r4, r0
		if (fota_version > 1) {
   220c4:	d90c      	bls.n	220e0 <service_info_json_object_encode+0x80>
			/* Clear previous fota version in the shadow */
			snprintf(fota_name, sizeof(fota_name), "%s%hu",
   220c6:	210c      	movs	r1, #12
   220c8:	3e01      	subs	r6, #1
   220ca:	eb0d 0001 	add.w	r0, sp, r1
   220ce:	4b0f      	ldr	r3, [pc, #60]	; (2210c <service_info_json_object_encode+0xac>)
   220d0:	4a0f      	ldr	r2, [pc, #60]	; (22110 <service_info_json_object_encode+0xb0>)
   220d2:	9600      	str	r6, [sp, #0]
   220d4:	f019 fa2a 	bl	3b52c <sniprintf>
				 FOTAS_JSON_NAME, fota_version - 1);
			cJSON_AddNullToObject(service_info_obj, fota_name);
   220d8:	4628      	mov	r0, r5
   220da:	a903      	add	r1, sp, #12
   220dc:	f01d f9a2 	bl	3f424 <cJSON_AddNullToObject>
		}
	}

	if (!err) {
   220e0:	b944      	cbnz	r4, 220f4 <service_info_json_object_encode+0x94>
		cJSON_AddItemToObject(obj_out, SERVICE_INFO_JSON_NAME,
   220e2:	462a      	mov	r2, r5
   220e4:	4640      	mov	r0, r8
   220e6:	490b      	ldr	r1, [pc, #44]	; (22114 <service_info_json_object_encode+0xb4>)
   220e8:	f01d f97b 	bl	3f3e2 <cJSON_AddItemToObject>
	} else {
		cJSON_Delete(service_info_obj);
	}

	return err;
}
   220ec:	4620      	mov	r0, r4
   220ee:	b006      	add	sp, #24
   220f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		cJSON_Delete(service_info_obj);
   220f4:	4628      	mov	r0, r5
   220f6:	f006 fe65 	bl	28dc4 <cJSON_Delete>
   220fa:	e7f7      	b.n	220ec <service_info_json_object_encode+0x8c>
		return -EINVAL;
   220fc:	f06f 0415 	mvn.w	r4, #21
   22100:	e7f4      	b.n	220ec <service_info_json_object_encode+0x8c>
		return -ENOMEM;
   22102:	f06f 040b 	mvn.w	r4, #11
   22106:	e7f1      	b.n	220ec <service_info_json_object_encode+0x8c>
   22108:	00045034 	.word	0x00045034
   2210c:	000452f3 	.word	0x000452f3
   22110:	000452fa 	.word	0x000452fa
   22114:	00045300 	.word	0x00045300

00022118 <gps_control_is_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22118:	4b03      	ldr	r3, [pc, #12]	; (22128 <gps_control_is_enabled+0x10>)
   2211a:	e8d3 0faf 	lda	r0, [r3]
}

bool gps_control_is_enabled(void)
{
	return atomic_get(&gps_is_enabled);
}
   2211e:	3800      	subs	r0, #0
   22120:	bf18      	it	ne
   22122:	2001      	movne	r0, #1
   22124:	4770      	bx	lr
   22126:	bf00      	nop
   22128:	20018c70 	.word	0x20018c70

0002212c <gps_control_is_active>:
   2212c:	4b03      	ldr	r3, [pc, #12]	; (2213c <gps_control_is_active+0x10>)
   2212e:	e8d3 0faf 	lda	r0, [r3]

bool gps_control_is_active(void)
{
	return atomic_get(&gps_is_active);
}
   22132:	3800      	subs	r0, #0
   22134:	bf18      	it	ne
   22136:	2001      	movne	r0, #1
   22138:	4770      	bx	lr
   2213a:	bf00      	nop
   2213c:	20018c6c 	.word	0x20018c6c

00022140 <gps_control_set_active>:
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   22140:	4b05      	ldr	r3, [pc, #20]	; (22158 <gps_control_set_active+0x18>)
   22142:	e8d3 2fef 	ldaex	r2, [r3]
   22146:	e8c3 0fe1 	stlex	r1, r0, [r3]
   2214a:	2900      	cmp	r1, #0
   2214c:	d1f9      	bne.n	22142 <gps_control_set_active+0x2>

bool gps_control_set_active(bool active)
{
	return atomic_set(&gps_is_active, active ? 1 : 0);
}
   2214e:	1e10      	subs	r0, r2, #0
   22150:	bf18      	it	ne
   22152:	2001      	movne	r0, #1
   22154:	4770      	bx	lr
   22156:	bf00      	nop
   22158:	20018c6c 	.word	0x20018c6c

0002215c <stop>:
{
   2215c:	b538      	push	{r3, r4, r5, lr}
	if (gps_dev == NULL) {
   2215e:	4b18      	ldr	r3, [pc, #96]	; (221c0 <stop+0x64>)
   22160:	4c18      	ldr	r4, [pc, #96]	; (221c4 <stop+0x68>)
   22162:	6818      	ldr	r0, [r3, #0]
   22164:	4b18      	ldr	r3, [pc, #96]	; (221c8 <stop+0x6c>)
   22166:	1ae4      	subs	r4, r4, r3
   22168:	08e4      	lsrs	r4, r4, #3
   2216a:	01a4      	lsls	r4, r4, #6
   2216c:	b930      	cbnz	r0, 2217c <stop+0x20>
		LOG_ERR("GPS controller is not initialized");
   2216e:	4917      	ldr	r1, [pc, #92]	; (221cc <stop+0x70>)
   22170:	f044 0001 	orr.w	r0, r4, #1
}
   22174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("GPS operation was stopped");
   22178:	f01b b8c2 	b.w	3d300 <log_string_sync>
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->stop == NULL) {
   2217c:	6883      	ldr	r3, [r0, #8]
   2217e:	685b      	ldr	r3, [r3, #4]
   22180:	b153      	cbz	r3, 22198 <stop+0x3c>
		return -ENOTSUP;
	}

	return api->stop(dev);
   22182:	4798      	blx	r3
	if (err) {
   22184:	4605      	mov	r5, r0
   22186:	b150      	cbz	r0, 2219e <stop+0x42>
		LOG_ERR("Failed to disable GPS, error: %d", err);
   22188:	462a      	mov	r2, r5
   2218a:	f044 0001 	orr.w	r0, r4, #1
   2218e:	4910      	ldr	r1, [pc, #64]	; (221d0 <stop+0x74>)
}
   22190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_ERR("Failed to disable GPS, error: %d", err);
   22194:	f01b b8b4 	b.w	3d300 <log_string_sync>
		return -ENOTSUP;
   22198:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2219c:	e7f4      	b.n	22188 <stop+0x2c>
	k_delayed_work_cancel(&start_work);
   2219e:	480d      	ldr	r0, [pc, #52]	; (221d4 <stop+0x78>)
   221a0:	f017 fbde 	bl	39960 <k_delayed_work_cancel>
   221a4:	4b0c      	ldr	r3, [pc, #48]	; (221d8 <stop+0x7c>)
   221a6:	e8d3 2fef 	ldaex	r2, [r3]
   221aa:	e8c3 5fe1 	stlex	r1, r5, [r3]
   221ae:	2900      	cmp	r1, #0
   221b0:	d1f9      	bne.n	221a6 <stop+0x4a>
	gps_control_set_active(false);
   221b2:	4628      	mov	r0, r5
   221b4:	f7ff ffc4 	bl	22140 <gps_control_set_active>
	LOG_INF("GPS operation was stopped");
   221b8:	4908      	ldr	r1, [pc, #32]	; (221dc <stop+0x80>)
   221ba:	f044 0003 	orr.w	r0, r4, #3
   221be:	e7d9      	b.n	22174 <stop+0x18>
   221c0:	20018c68 	.word	0x20018c68
   221c4:	0004342c 	.word	0x0004342c
   221c8:	0004339c 	.word	0x0004339c
   221cc:	0004530c 	.word	0x0004530c
   221d0:	0004532e 	.word	0x0004532e
   221d4:	200167f8 	.word	0x200167f8
   221d8:	20018c70 	.word	0x20018c70
   221dc:	0004534f 	.word	0x0004534f

000221e0 <start>:
{
   221e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct gps_config gps_cfg = {
   221e4:	2210      	movs	r2, #16
   221e6:	2100      	movs	r1, #0
   221e8:	4668      	mov	r0, sp
   221ea:	f01f fd78 	bl	41cde <memset>
   221ee:	2302      	movs	r3, #2
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   221f0:	4d34      	ldr	r5, [pc, #208]	; (222c4 <start+0xe4>)
	struct gps_config gps_cfg = {
   221f2:	f88d 3000 	strb.w	r3, [sp]
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   221f6:	682b      	ldr	r3, [r5, #0]
	struct gps_config gps_cfg = {
   221f8:	f04f 0801 	mov.w	r8, #1
		.interval = CONFIG_GPS_CONTROL_FIX_TRY_TIME +
   221fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
	struct gps_config gps_cfg = {
   22200:	9301      	str	r3, [sp, #4]
   22202:	f44f 73b4 	mov.w	r3, #360	; 0x168
   22206:	4c30      	ldr	r4, [pc, #192]	; (222c8 <start+0xe8>)
	if (gps_dev == NULL) {
   22208:	4f30      	ldr	r7, [pc, #192]	; (222cc <start+0xec>)
	struct gps_config gps_cfg = {
   2220a:	9302      	str	r3, [sp, #8]
   2220c:	4b30      	ldr	r3, [pc, #192]	; (222d0 <start+0xf0>)
	if (gps_dev == NULL) {
   2220e:	683a      	ldr	r2, [r7, #0]
   22210:	1ae4      	subs	r4, r4, r3
   22212:	08e4      	lsrs	r4, r4, #3
	struct gps_config gps_cfg = {
   22214:	f88d 800d 	strb.w	r8, [sp, #13]
	if (gps_dev == NULL) {
   22218:	01a4      	lsls	r4, r4, #6
   2221a:	b93a      	cbnz	r2, 2222c <start+0x4c>
		LOG_ERR("GPS controller is not initialized properly");
   2221c:	492d      	ldr	r1, [pc, #180]	; (222d4 <start+0xf4>)
   2221e:	ea44 0008 	orr.w	r0, r4, r8
   22222:	f01b f86d 	bl	3d300 <log_string_sync>
}
   22226:	b004      	add	sp, #16
   22228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Enabling PSM");
   2222c:	f044 0603 	orr.w	r6, r4, #3
   22230:	4630      	mov	r0, r6
   22232:	4929      	ldr	r1, [pc, #164]	; (222d8 <start+0xf8>)
   22234:	f01b f864 	bl	3d300 <log_string_sync>
	err = lte_lc_psm_req(true);
   22238:	4640      	mov	r0, r8
   2223a:	f009 fb6f 	bl	2b91c <lte_lc_psm_req>
	if (err) {
   2223e:	4602      	mov	r2, r0
   22240:	b198      	cbz	r0, 2226a <start+0x8a>
		LOG_ERR("PSM request failed, error: %d", err);
   22242:	4926      	ldr	r1, [pc, #152]	; (222dc <start+0xfc>)
   22244:	f044 0001 	orr.w	r0, r4, #1
   22248:	f01b f85a 	bl	3d300 <log_string_sync>
	err = gps_start(gps_dev, &gps_cfg);
   2224c:	6838      	ldr	r0, [r7, #0]
	if ((dev == NULL) || (cfg == NULL)) {
   2224e:	b188      	cbz	r0, 22274 <start+0x94>
	if (api->start == NULL) {
   22250:	6883      	ldr	r3, [r0, #8]
   22252:	681b      	ldr	r3, [r3, #0]
   22254:	b18b      	cbz	r3, 2227a <start+0x9a>
	return api->start(dev, cfg);
   22256:	4669      	mov	r1, sp
   22258:	4798      	blx	r3
	if (err) {
   2225a:	4602      	mov	r2, r0
   2225c:	b180      	cbz	r0, 22280 <start+0xa0>
		LOG_ERR("Failed to enable GPS, error: %d", err);
   2225e:	4920      	ldr	r1, [pc, #128]	; (222e0 <start+0x100>)
   22260:	f044 0001 	orr.w	r0, r4, #1
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   22264:	f01b f84c 	bl	3d300 <log_string_sync>
   22268:	e7dd      	b.n	22226 <start+0x46>
		LOG_INF("PSM enabled");
   2226a:	4630      	mov	r0, r6
   2226c:	491d      	ldr	r1, [pc, #116]	; (222e4 <start+0x104>)
   2226e:	f01b f847 	bl	3d300 <log_string_sync>
   22272:	e7eb      	b.n	2224c <start+0x6c>
		return -EINVAL;
   22274:	f06f 0215 	mvn.w	r2, #21
   22278:	e7f1      	b.n	2225e <start+0x7e>
		return -ENOTSUP;
   2227a:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2227e:	e7ee      	b.n	2225e <start+0x7e>
   22280:	2001      	movs	r0, #1
   22282:	4b19      	ldr	r3, [pc, #100]	; (222e8 <start+0x108>)
   22284:	e8d3 2fef 	ldaex	r2, [r3]
   22288:	e8c3 0fe1 	stlex	r1, r0, [r3]
   2228c:	2900      	cmp	r1, #0
   2228e:	d1f9      	bne.n	22284 <start+0xa4>
	gps_control_set_active(true);
   22290:	f7ff ff56 	bl	22140 <gps_control_set_active>
	LOG_INF("GPS started successfully. Searching for satellites ");
   22294:	f044 0403 	orr.w	r4, r4, #3
	ui_led_set_pattern(UI_LED_GPS_SEARCHING);
   22298:	2008      	movs	r0, #8
   2229a:	f7ff f8c9 	bl	21430 <ui_led_set_pattern>
	LOG_INF("GPS started successfully. Searching for satellites ");
   2229e:	4620      	mov	r0, r4
   222a0:	4912      	ldr	r1, [pc, #72]	; (222ec <start+0x10c>)
   222a2:	f01b f82d 	bl	3d300 <log_string_sync>
	LOG_INF("to get position fix. This may take several minutes.");
   222a6:	4620      	mov	r0, r4
   222a8:	4911      	ldr	r1, [pc, #68]	; (222f0 <start+0x110>)
   222aa:	f01b f829 	bl	3d300 <log_string_sync>
	LOG_INF("The device will attempt to get a fix for %d seconds, ",
   222ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
   222b2:	4620      	mov	r0, r4
   222b4:	490f      	ldr	r1, [pc, #60]	; (222f4 <start+0x114>)
   222b6:	f01b f823 	bl	3d300 <log_string_sync>
	LOG_INF("before the GPS is stopped. It's restarted every %d seconds",
   222ba:	4620      	mov	r0, r4
   222bc:	682a      	ldr	r2, [r5, #0]
   222be:	490e      	ldr	r1, [pc, #56]	; (222f8 <start+0x118>)
   222c0:	e7d0      	b.n	22264 <start+0x84>
   222c2:	bf00      	nop
   222c4:	20018c74 	.word	0x20018c74
   222c8:	0004342c 	.word	0x0004342c
   222cc:	20018c68 	.word	0x20018c68
   222d0:	0004339c 	.word	0x0004339c
   222d4:	00045369 	.word	0x00045369
   222d8:	00045394 	.word	0x00045394
   222dc:	000453a1 	.word	0x000453a1
   222e0:	000453cb 	.word	0x000453cb
   222e4:	000453bf 	.word	0x000453bf
   222e8:	20018c70 	.word	0x20018c70
   222ec:	000453eb 	.word	0x000453eb
   222f0:	0004541f 	.word	0x0004541f
   222f4:	00045453 	.word	0x00045453
   222f8:	00045489 	.word	0x00045489

000222fc <gps_control_start>:

void gps_control_start(uint32_t delay_ms)
{
   222fc:	b5d0      	push	{r4, r6, r7, lr}
   222fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22302:	f240 36e7 	movw	r6, #999	; 0x3e7
   22306:	2700      	movs	r7, #0
   22308:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   2230c:	4b08      	ldr	r3, [pc, #32]	; (22330 <gps_control_start+0x34>)
   2230e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22312:	681c      	ldr	r4, [r3, #0]
   22314:	4630      	mov	r0, r6
   22316:	2300      	movs	r3, #0
   22318:	4639      	mov	r1, r7
   2231a:	f7fa fdcf 	bl	1cebc <__aeabi_uldivmod>
   2231e:	4602      	mov	r2, r0
   22320:	460b      	mov	r3, r1
   22322:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   22324:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &start_work,
   22328:	4902      	ldr	r1, [pc, #8]	; (22334 <gps_control_start+0x38>)
   2232a:	f017 ba8f 	b.w	3984c <k_delayed_work_submit_to_queue>
   2232e:	bf00      	nop
   22330:	20018c64 	.word	0x20018c64
   22334:	200167f8 	.word	0x200167f8

00022338 <gps_control_stop>:

void gps_control_stop(uint32_t delay_ms)
{
   22338:	b5d0      	push	{r4, r6, r7, lr}
   2233a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2233e:	f240 36e7 	movw	r6, #999	; 0x3e7
   22342:	2700      	movs	r7, #0
   22344:	fbe1 6700 	umlal	r6, r7, r1, r0
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   22348:	4b08      	ldr	r3, [pc, #32]	; (2236c <gps_control_stop+0x34>)
   2234a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2234e:	681c      	ldr	r4, [r3, #0]
   22350:	4630      	mov	r0, r6
   22352:	2300      	movs	r3, #0
   22354:	4639      	mov	r1, r7
   22356:	f7fa fdb1 	bl	1cebc <__aeabi_uldivmod>
   2235a:	4602      	mov	r2, r0
   2235c:	460b      	mov	r3, r1
   2235e:	4620      	mov	r0, r4
				       K_MSEC(delay_ms));
}
   22360:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	k_delayed_work_submit_to_queue(app_work_q, &stop_work,
   22364:	4902      	ldr	r1, [pc, #8]	; (22370 <gps_control_stop+0x38>)
   22366:	f017 ba71 	b.w	3984c <k_delayed_work_submit_to_queue>
   2236a:	bf00      	nop
   2236c:	20018c64 	.word	0x20018c64
   22370:	20016828 	.word	0x20016828

00022374 <gps_control_get_gps_reporting_interval>:

int gps_control_get_gps_reporting_interval(void)
{
	return gps_reporting_interval_seconds;
}
   22374:	4b01      	ldr	r3, [pc, #4]	; (2237c <gps_control_get_gps_reporting_interval+0x8>)
   22376:	6818      	ldr	r0, [r3, #0]
   22378:	4770      	bx	lr
   2237a:	bf00      	nop
   2237c:	20018c74 	.word	0x20018c74

00022380 <gps_control_init>:

/** @brief Configures and starts the GPS device. */
int gps_control_init(struct k_work_q *work_q, gps_event_handler_t handler)
{
   22380:	b570      	push	{r4, r5, r6, lr}
	int err;
	static bool is_init;

	if (is_init) {
   22382:	4e2b      	ldr	r6, [pc, #172]	; (22430 <gps_control_init+0xb0>)
{
   22384:	460c      	mov	r4, r1
	if (is_init) {
   22386:	7833      	ldrb	r3, [r6, #0]
   22388:	2b00      	cmp	r3, #0
   2238a:	d14a      	bne.n	22422 <gps_control_init+0xa2>
		return -EALREADY;
	}

	if ((work_q == NULL) || (handler == NULL)) {
   2238c:	2800      	cmp	r0, #0
   2238e:	d04b      	beq.n	22428 <gps_control_init+0xa8>
   22390:	2900      	cmp	r1, #0
   22392:	d049      	beq.n	22428 <gps_control_init+0xa8>
		return -EINVAL;
	}

	app_work_q = work_q;
   22394:	4b27      	ldr	r3, [pc, #156]	; (22434 <gps_control_init+0xb4>)
   22396:	6018      	str	r0, [r3, #0]
   22398:	4827      	ldr	r0, [pc, #156]	; (22438 <gps_control_init+0xb8>)
   2239a:	f014 fe63 	bl	37064 <z_impl_device_get_binding>

	gps_dev = device_get_binding(CONFIG_GPS_DEV_NAME);
   2239e:	4a27      	ldr	r2, [pc, #156]	; (2243c <gps_control_init+0xbc>)
   223a0:	4d27      	ldr	r5, [pc, #156]	; (22440 <gps_control_init+0xc0>)
   223a2:	6010      	str	r0, [r2, #0]
	if (gps_dev == NULL) {
   223a4:	4a27      	ldr	r2, [pc, #156]	; (22444 <gps_control_init+0xc4>)
   223a6:	1aad      	subs	r5, r5, r2
   223a8:	08ed      	lsrs	r5, r5, #3
   223aa:	01ad      	lsls	r5, r5, #6
   223ac:	b968      	cbnz	r0, 223ca <gps_control_init+0x4a>
		LOG_ERR("Could not get %s device",
   223ae:	4822      	ldr	r0, [pc, #136]	; (22438 <gps_control_init+0xb8>)
   223b0:	f01a ffb9 	bl	3d326 <log_strdup>
   223b4:	f045 0501 	orr.w	r5, r5, #1
   223b8:	4602      	mov	r2, r0
   223ba:	4923      	ldr	r1, [pc, #140]	; (22448 <gps_control_init+0xc8>)
   223bc:	4628      	mov	r0, r5
   223be:	f01a ff9f 	bl	3d300 <log_string_sync>
			log_strdup(CONFIG_GPS_DEV_NAME));
		return -ENODEV;
   223c2:	f06f 0412 	mvn.w	r4, #18
	LOG_INF("GPS initialized");

	is_init = true;

	return err;
}
   223c6:	4620      	mov	r0, r4
   223c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
	}

	api = (struct gps_driver_api *)dev->api;

	if (api->init == NULL) {
   223ca:	6883      	ldr	r3, [r0, #8]
   223cc:	68db      	ldr	r3, [r3, #12]
   223ce:	b153      	cbz	r3, 223e6 <gps_control_init+0x66>
		return -ENOTSUP;
	}

	return api->init(dev, handler);
   223d0:	4621      	mov	r1, r4
   223d2:	4798      	blx	r3
	if (err) {
   223d4:	4604      	mov	r4, r0
   223d6:	b148      	cbz	r0, 223ec <gps_control_init+0x6c>
		LOG_ERR("Could not initialize GPS, error: %d", err);
   223d8:	4622      	mov	r2, r4
   223da:	491c      	ldr	r1, [pc, #112]	; (2244c <gps_control_init+0xcc>)
   223dc:	f045 0001 	orr.w	r0, r5, #1
   223e0:	f01a ff8e 	bl	3d300 <log_string_sync>
		return err;
   223e4:	e7ef      	b.n	223c6 <gps_control_init+0x46>
		return -ENOTSUP;
   223e6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   223ea:	e7f5      	b.n	223d8 <gps_control_init+0x58>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   223ec:	4b18      	ldr	r3, [pc, #96]	; (22450 <gps_control_init+0xd0>)
   223ee:	4601      	mov	r1, r0
   223f0:	2230      	movs	r2, #48	; 0x30
   223f2:	4618      	mov	r0, r3
   223f4:	f01f fc73 	bl	41cde <memset>
   223f8:	4b16      	ldr	r3, [pc, #88]	; (22454 <gps_control_init+0xd4>)
   223fa:	4a17      	ldr	r2, [pc, #92]	; (22458 <gps_control_init+0xd8>)
   223fc:	4621      	mov	r1, r4
   223fe:	6042      	str	r2, [r0, #4]
   22400:	2230      	movs	r2, #48	; 0x30
   22402:	4618      	mov	r0, r3
   22404:	f01f fc6b 	bl	41cde <memset>
   22408:	4a14      	ldr	r2, [pc, #80]	; (2245c <gps_control_init+0xdc>)
	gps_reporting_interval_seconds =
   2240a:	4b15      	ldr	r3, [pc, #84]	; (22460 <gps_control_init+0xe0>)
   2240c:	6042      	str	r2, [r0, #4]
   2240e:	221e      	movs	r2, #30
	LOG_INF("GPS initialized");
   22410:	4914      	ldr	r1, [pc, #80]	; (22464 <gps_control_init+0xe4>)
   22412:	f045 0003 	orr.w	r0, r5, #3
	gps_reporting_interval_seconds =
   22416:	601a      	str	r2, [r3, #0]
	LOG_INF("GPS initialized");
   22418:	f01a ff72 	bl	3d300 <log_string_sync>
	is_init = true;
   2241c:	2301      	movs	r3, #1
   2241e:	7033      	strb	r3, [r6, #0]
	return err;
   22420:	e7d1      	b.n	223c6 <gps_control_init+0x46>
		return -EALREADY;
   22422:	f06f 0477 	mvn.w	r4, #119	; 0x77
   22426:	e7ce      	b.n	223c6 <gps_control_init+0x46>
		return -EINVAL;
   22428:	f06f 0415 	mvn.w	r4, #21
   2242c:	e7cb      	b.n	223c6 <gps_control_init+0x46>
   2242e:	bf00      	nop
   22430:	2001ebd2 	.word	0x2001ebd2
   22434:	20018c64 	.word	0x20018c64
   22438:	000454c4 	.word	0x000454c4
   2243c:	20018c68 	.word	0x20018c68
   22440:	0004342c 	.word	0x0004342c
   22444:	0004339c 	.word	0x0004339c
   22448:	00044f98 	.word	0x00044f98
   2244c:	000454d0 	.word	0x000454d0
   22450:	200167f8 	.word	0x200167f8
   22454:	20016828 	.word	0x20016828
   22458:	000221e1 	.word	0x000221e1
   2245c:	0002215d 	.word	0x0002215d
   22460:	20018c74 	.word	0x20018c74
   22464:	000454f4 	.word	0x000454f4

00022468 <submit_poll_work>:
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   22468:	4b0e      	ldr	r3, [pc, #56]	; (224a4 <submit_poll_work+0x3c>)
{
   2246a:	b5d0      	push	{r4, r6, r7, lr}
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   2246c:	681c      	ldr	r4, [r3, #0]
					      K_SECONDS((uint32_t)delay_s));
   2246e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22472:	f240 36e7 	movw	r6, #999	; 0x3e7
   22476:	fb03 f100 	mul.w	r1, r3, r0
   2247a:	2700      	movs	r7, #0
   2247c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   22480:	fbe0 6701 	umlal	r6, r7, r0, r1
   22484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22488:	2300      	movs	r3, #0
   2248a:	4630      	mov	r0, r6
   2248c:	4639      	mov	r1, r7
   2248e:	f7fa fd15 	bl	1cebc <__aeabi_uldivmod>
   22492:	4602      	mov	r2, r0
   22494:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   22496:	4620      	mov	r0, r4
}
   22498:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
	return k_delayed_work_submit_to_queue(env_sensors_work_q,
   2249c:	4902      	ldr	r1, [pc, #8]	; (224a8 <submit_poll_work+0x40>)
   2249e:	f017 b9d5 	b.w	3984c <k_delayed_work_submit_to_queue>
   224a2:	bf00      	nop
   224a4:	20018c7c 	.word	0x20018c7c
   224a8:	20016858 	.word	0x20016858

000224ac <env_sensors_poll>:
	return initialized ? submit_poll_work(0) : -ENXIO;
   224ac:	4b04      	ldr	r3, [pc, #16]	; (224c0 <env_sensors_poll+0x14>)
   224ae:	781b      	ldrb	r3, [r3, #0]
   224b0:	b113      	cbz	r3, 224b8 <env_sensors_poll+0xc>
   224b2:	2000      	movs	r0, #0
   224b4:	f7ff bfd8 	b.w	22468 <submit_poll_work>
}
   224b8:	f06f 0005 	mvn.w	r0, #5
   224bc:	4770      	bx	lr
   224be:	bf00      	nop
   224c0:	2001ebd4 	.word	0x2001ebd4

000224c4 <env_sensors_init_and_start>:

/**@brief Initialize environment sensors. */
int env_sensors_init_and_start(struct k_work_q *work_q,
			       const env_sensors_data_ready_cb cb)
{
   224c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224c8:	460d      	mov	r5, r1
	if ((work_q == NULL) || (cb == NULL)) {
   224ca:	4606      	mov	r6, r0
   224cc:	2800      	cmp	r0, #0
   224ce:	d03e      	beq.n	2254e <env_sensors_init_and_start+0x8a>
   224d0:	2900      	cmp	r1, #0
   224d2:	d03c      	beq.n	2254e <env_sensors_init_and_start+0x8a>
   224d4:	2403      	movs	r4, #3
   224d6:	4f21      	ldr	r7, [pc, #132]	; (2255c <env_sensors_init_and_start+0x98>)
	}

	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
		env_sensors[i]->dev =
			device_get_binding(env_sensors[i]->dev_name);
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   224d8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2257c <env_sensors_init_and_start+0xb8>
   224dc:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 22580 <env_sensors_init_and_start+0xbc>
   224e0:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 22584 <env_sensors_init_and_start+0xc0>
			device_get_binding(env_sensors[i]->dev_name);
   224e4:	f8d7 9000 	ldr.w	r9, [r7]
   224e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
   224ec:	f014 fdba 	bl	37064 <z_impl_device_get_binding>
		env_sensors[i]->dev =
   224f0:	f8c9 0020 	str.w	r0, [r9, #32]
		__ASSERT(env_sensors[i]->dev, "Could not get device %s\n",
   224f4:	f857 9b04 	ldr.w	r9, [r7], #4
   224f8:	f8d9 3020 	ldr.w	r3, [r9, #32]
   224fc:	b973      	cbnz	r3, 2251c <env_sensors_init_and_start+0x58>
   224fe:	238f      	movs	r3, #143	; 0x8f
   22500:	4642      	mov	r2, r8
   22502:	4651      	mov	r1, sl
   22504:	4658      	mov	r0, fp
   22506:	f01a fc36 	bl	3cd76 <printk>
   2250a:	f8d9 101c 	ldr.w	r1, [r9, #28]
   2250e:	4814      	ldr	r0, [pc, #80]	; (22560 <env_sensors_init_and_start+0x9c>)
   22510:	f01a fc31 	bl	3cd76 <printk>
   22514:	218f      	movs	r1, #143	; 0x8f
   22516:	4640      	mov	r0, r8
   22518:	f01a fee1 	bl	3d2de <assert_post_action>
	for (int i = 0; i < ARRAY_SIZE(env_sensors); i++) {
   2251c:	3c01      	subs	r4, #1
   2251e:	d1e1      	bne.n	224e4 <env_sensors_init_and_start+0x20>
			env_sensors[i]->dev_name);
	}

	env_sensors_work_q = work_q;
   22520:	4b10      	ldr	r3, [pc, #64]	; (22564 <env_sensors_init_and_start+0xa0>)
   22522:	2230      	movs	r2, #48	; 0x30
   22524:	601e      	str	r6, [r3, #0]

	data_ready_cb = cb;
   22526:	4b10      	ldr	r3, [pc, #64]	; (22568 <env_sensors_init_and_start+0xa4>)
   22528:	4621      	mov	r1, r4
   2252a:	601d      	str	r5, [r3, #0]
   2252c:	4b0f      	ldr	r3, [pc, #60]	; (2256c <env_sensors_init_and_start+0xa8>)
   2252e:	4618      	mov	r0, r3
   22530:	f01f fbd5 	bl	41cde <memset>
   22534:	4a0e      	ldr	r2, [pc, #56]	; (22570 <env_sensors_init_and_start+0xac>)

	k_delayed_work_init(&env_sensors_poller, env_sensors_poll_fn);

	initialized = true;
   22536:	4b0f      	ldr	r3, [pc, #60]	; (22574 <env_sensors_init_and_start+0xb0>)
   22538:	6042      	str	r2, [r0, #4]
   2253a:	2201      	movs	r2, #1
   2253c:	701a      	strb	r2, [r3, #0]

	return (data_send_interval_s > 0) ?
   2253e:	4b0e      	ldr	r3, [pc, #56]	; (22578 <env_sensors_init_and_start+0xb4>)
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   22540:	681b      	ldr	r3, [r3, #0]
   22542:	b143      	cbz	r3, 22556 <env_sensors_init_and_start+0x92>
}
   22544:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   22548:	2005      	movs	r0, #5
   2254a:	f7ff bf8d 	b.w	22468 <submit_poll_work>
		return -EINVAL;
   2254e:	f06f 0015 	mvn.w	r0, #21
}
   22552:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		submit_poll_work(ENV_INIT_DELAY_S) : 0;
   22556:	4620      	mov	r0, r4
   22558:	e7fb      	b.n	22552 <env_sensors_init_and_start+0x8e>
   2255a:	bf00      	nop
   2255c:	00043750 	.word	0x00043750
   22560:	000455ec 	.word	0x000455ec
   22564:	20018c7c 	.word	0x20018c7c
   22568:	20018c78 	.word	0x20018c78
   2256c:	20016858 	.word	0x20016858
   22570:	0001d3e1 	.word	0x0001d3e1
   22574:	2001ebd4 	.word	0x2001ebd4
   22578:	200154f0 	.word	0x200154f0
   2257c:	000455b7 	.word	0x000455b7
   22580:	000455d8 	.word	0x000455d8
   22584:	00044dbf 	.word	0x00044dbf

00022588 <env_sensors_get_temperature>:

int env_sensors_get_temperature(env_sensor_data_t *sensor_data)
{
   22588:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   2258a:	4604      	mov	r4, r0
   2258c:	2800      	cmp	r0, #0
   2258e:	d041      	beq.n	22614 <env_sensors_get_temperature+0x8c>
	__asm__ volatile(
   22590:	f04f 0320 	mov.w	r3, #32
   22594:	f3ef 8611 	mrs	r6, BASEPRI
   22598:	f383 8811 	msr	BASEPRI, r3
   2259c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   225a0:	481e      	ldr	r0, [pc, #120]	; (2261c <env_sensors_get_temperature+0x94>)
   225a2:	f017 f8c9 	bl	39738 <z_spin_lock_valid>
   225a6:	b968      	cbnz	r0, 225c4 <env_sensors_get_temperature+0x3c>
   225a8:	237c      	movs	r3, #124	; 0x7c
   225aa:	4a1d      	ldr	r2, [pc, #116]	; (22620 <env_sensors_get_temperature+0x98>)
   225ac:	491d      	ldr	r1, [pc, #116]	; (22624 <env_sensors_get_temperature+0x9c>)
   225ae:	481e      	ldr	r0, [pc, #120]	; (22628 <env_sensors_get_temperature+0xa0>)
   225b0:	f01a fbe1 	bl	3cd76 <printk>
   225b4:	4919      	ldr	r1, [pc, #100]	; (2261c <env_sensors_get_temperature+0x94>)
   225b6:	481d      	ldr	r0, [pc, #116]	; (2262c <env_sensors_get_temperature+0xa4>)
   225b8:	f01a fbdd 	bl	3cd76 <printk>
   225bc:	217c      	movs	r1, #124	; 0x7c
   225be:	4818      	ldr	r0, [pc, #96]	; (22620 <env_sensors_get_temperature+0x98>)
   225c0:	f01a fe8d 	bl	3d2de <assert_post_action>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   225c4:	4d1a      	ldr	r5, [pc, #104]	; (22630 <env_sensors_get_temperature+0xa8>)
	z_spin_lock_set_owner(l);
   225c6:	4815      	ldr	r0, [pc, #84]	; (2261c <env_sensors_get_temperature+0x94>)
   225c8:	f017 f8d4 	bl	39774 <z_spin_lock_set_owner>
   225cc:	4623      	mov	r3, r4
   225ce:	f105 0418 	add.w	r4, r5, #24
   225d2:	462a      	mov	r2, r5
   225d4:	ca03      	ldmia	r2!, {r0, r1}
   225d6:	42a2      	cmp	r2, r4
   225d8:	6018      	str	r0, [r3, #0]
   225da:	6059      	str	r1, [r3, #4]
   225dc:	4615      	mov	r5, r2
   225de:	f103 0308 	add.w	r3, r3, #8
   225e2:	d1f6      	bne.n	225d2 <env_sensors_get_temperature+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   225e4:	480d      	ldr	r0, [pc, #52]	; (2261c <env_sensors_get_temperature+0x94>)
   225e6:	f017 f8b5 	bl	39754 <z_spin_unlock_valid>
   225ea:	b968      	cbnz	r0, 22608 <env_sensors_get_temperature+0x80>
   225ec:	23a7      	movs	r3, #167	; 0xa7
   225ee:	4a0c      	ldr	r2, [pc, #48]	; (22620 <env_sensors_get_temperature+0x98>)
   225f0:	4910      	ldr	r1, [pc, #64]	; (22634 <env_sensors_get_temperature+0xac>)
   225f2:	480d      	ldr	r0, [pc, #52]	; (22628 <env_sensors_get_temperature+0xa0>)
   225f4:	f01a fbbf 	bl	3cd76 <printk>
   225f8:	4908      	ldr	r1, [pc, #32]	; (2261c <env_sensors_get_temperature+0x94>)
   225fa:	480f      	ldr	r0, [pc, #60]	; (22638 <env_sensors_get_temperature+0xb0>)
   225fc:	f01a fbbb 	bl	3cd76 <printk>
   22600:	21a7      	movs	r1, #167	; 0xa7
   22602:	4807      	ldr	r0, [pc, #28]	; (22620 <env_sensors_get_temperature+0x98>)
   22604:	f01a fe6b 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   22608:	f386 8811 	msr	BASEPRI, r6
   2260c:	f3bf 8f6f 	isb	sy
	}
	k_spinlock_key_t key = k_spin_lock(&temp_sensor.lock);

	memcpy(sensor_data, &(temp_sensor.sensor), sizeof(temp_sensor.sensor));
	k_spin_unlock(&temp_sensor.lock, key);
	return 0;
   22610:	2000      	movs	r0, #0
}
   22612:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   22614:	f04f 30ff 	mov.w	r0, #4294967295
   22618:	e7fb      	b.n	22612 <env_sensors_get_temperature+0x8a>
   2261a:	bf00      	nop
   2261c:	2001476c 	.word	0x2001476c
   22620:	00045538 	.word	0x00045538
   22624:	0004555e 	.word	0x0004555e
   22628:	00044dbf 	.word	0x00044dbf
   2262c:	00045573 	.word	0x00045573
   22630:	20014748 	.word	0x20014748
   22634:	0004558b 	.word	0x0004558b
   22638:	000455a2 	.word	0x000455a2

0002263c <env_sensors_get_humidity>:

int env_sensors_get_humidity(env_sensor_data_t *sensor_data)
{
   2263c:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   2263e:	4604      	mov	r4, r0
   22640:	2800      	cmp	r0, #0
   22642:	d041      	beq.n	226c8 <env_sensors_get_humidity+0x8c>
	__asm__ volatile(
   22644:	f04f 0320 	mov.w	r3, #32
   22648:	f3ef 8611 	mrs	r6, BASEPRI
   2264c:	f383 8811 	msr	BASEPRI, r3
   22650:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22654:	481e      	ldr	r0, [pc, #120]	; (226d0 <env_sensors_get_humidity+0x94>)
   22656:	f017 f86f 	bl	39738 <z_spin_lock_valid>
   2265a:	b968      	cbnz	r0, 22678 <env_sensors_get_humidity+0x3c>
   2265c:	237c      	movs	r3, #124	; 0x7c
   2265e:	4a1d      	ldr	r2, [pc, #116]	; (226d4 <env_sensors_get_humidity+0x98>)
   22660:	491d      	ldr	r1, [pc, #116]	; (226d8 <env_sensors_get_humidity+0x9c>)
   22662:	481e      	ldr	r0, [pc, #120]	; (226dc <env_sensors_get_humidity+0xa0>)
   22664:	f01a fb87 	bl	3cd76 <printk>
   22668:	4919      	ldr	r1, [pc, #100]	; (226d0 <env_sensors_get_humidity+0x94>)
   2266a:	481d      	ldr	r0, [pc, #116]	; (226e0 <env_sensors_get_humidity+0xa4>)
   2266c:	f01a fb83 	bl	3cd76 <printk>
   22670:	217c      	movs	r1, #124	; 0x7c
   22672:	4818      	ldr	r0, [pc, #96]	; (226d4 <env_sensors_get_humidity+0x98>)
   22674:	f01a fe33 	bl	3d2de <assert_post_action>
   22678:	4d1a      	ldr	r5, [pc, #104]	; (226e4 <env_sensors_get_humidity+0xa8>)
	z_spin_lock_set_owner(l);
   2267a:	4815      	ldr	r0, [pc, #84]	; (226d0 <env_sensors_get_humidity+0x94>)
   2267c:	f017 f87a 	bl	39774 <z_spin_lock_set_owner>
   22680:	4623      	mov	r3, r4
   22682:	f105 0418 	add.w	r4, r5, #24
   22686:	462a      	mov	r2, r5
   22688:	ca03      	ldmia	r2!, {r0, r1}
   2268a:	42a2      	cmp	r2, r4
   2268c:	6018      	str	r0, [r3, #0]
   2268e:	6059      	str	r1, [r3, #4]
   22690:	4615      	mov	r5, r2
   22692:	f103 0308 	add.w	r3, r3, #8
   22696:	d1f6      	bne.n	22686 <env_sensors_get_humidity+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22698:	480d      	ldr	r0, [pc, #52]	; (226d0 <env_sensors_get_humidity+0x94>)
   2269a:	f017 f85b 	bl	39754 <z_spin_unlock_valid>
   2269e:	b968      	cbnz	r0, 226bc <env_sensors_get_humidity+0x80>
   226a0:	23a7      	movs	r3, #167	; 0xa7
   226a2:	4a0c      	ldr	r2, [pc, #48]	; (226d4 <env_sensors_get_humidity+0x98>)
   226a4:	4910      	ldr	r1, [pc, #64]	; (226e8 <env_sensors_get_humidity+0xac>)
   226a6:	480d      	ldr	r0, [pc, #52]	; (226dc <env_sensors_get_humidity+0xa0>)
   226a8:	f01a fb65 	bl	3cd76 <printk>
   226ac:	4908      	ldr	r1, [pc, #32]	; (226d0 <env_sensors_get_humidity+0x94>)
   226ae:	480f      	ldr	r0, [pc, #60]	; (226ec <env_sensors_get_humidity+0xb0>)
   226b0:	f01a fb61 	bl	3cd76 <printk>
   226b4:	21a7      	movs	r1, #167	; 0xa7
   226b6:	4807      	ldr	r0, [pc, #28]	; (226d4 <env_sensors_get_humidity+0x98>)
   226b8:	f01a fe11 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   226bc:	f386 8811 	msr	BASEPRI, r6
   226c0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&humid_sensor.lock);

	memcpy(sensor_data, &(humid_sensor.sensor),
		sizeof(humid_sensor.sensor));
	k_spin_unlock(&humid_sensor.lock, key);
	return 0;
   226c4:	2000      	movs	r0, #0
}
   226c6:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   226c8:	f04f 30ff 	mov.w	r0, #4294967295
   226cc:	e7fb      	b.n	226c6 <env_sensors_get_humidity+0x8a>
   226ce:	bf00      	nop
   226d0:	2001471c 	.word	0x2001471c
   226d4:	00045538 	.word	0x00045538
   226d8:	0004555e 	.word	0x0004555e
   226dc:	00044dbf 	.word	0x00044dbf
   226e0:	00045573 	.word	0x00045573
   226e4:	200146f8 	.word	0x200146f8
   226e8:	0004558b 	.word	0x0004558b
   226ec:	000455a2 	.word	0x000455a2

000226f0 <env_sensors_get_pressure>:

int env_sensors_get_pressure(env_sensor_data_t *sensor_data)
{
   226f0:	b570      	push	{r4, r5, r6, lr}
	if (sensor_data == NULL) {
   226f2:	4604      	mov	r4, r0
   226f4:	2800      	cmp	r0, #0
   226f6:	d041      	beq.n	2277c <env_sensors_get_pressure+0x8c>
	__asm__ volatile(
   226f8:	f04f 0320 	mov.w	r3, #32
   226fc:	f3ef 8611 	mrs	r6, BASEPRI
   22700:	f383 8811 	msr	BASEPRI, r3
   22704:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22708:	481e      	ldr	r0, [pc, #120]	; (22784 <env_sensors_get_pressure+0x94>)
   2270a:	f017 f815 	bl	39738 <z_spin_lock_valid>
   2270e:	b968      	cbnz	r0, 2272c <env_sensors_get_pressure+0x3c>
   22710:	237c      	movs	r3, #124	; 0x7c
   22712:	4a1d      	ldr	r2, [pc, #116]	; (22788 <env_sensors_get_pressure+0x98>)
   22714:	491d      	ldr	r1, [pc, #116]	; (2278c <env_sensors_get_pressure+0x9c>)
   22716:	481e      	ldr	r0, [pc, #120]	; (22790 <env_sensors_get_pressure+0xa0>)
   22718:	f01a fb2d 	bl	3cd76 <printk>
   2271c:	4919      	ldr	r1, [pc, #100]	; (22784 <env_sensors_get_pressure+0x94>)
   2271e:	481d      	ldr	r0, [pc, #116]	; (22794 <env_sensors_get_pressure+0xa4>)
   22720:	f01a fb29 	bl	3cd76 <printk>
   22724:	217c      	movs	r1, #124	; 0x7c
   22726:	4818      	ldr	r0, [pc, #96]	; (22788 <env_sensors_get_pressure+0x98>)
   22728:	f01a fdd9 	bl	3d2de <assert_post_action>
   2272c:	4d1a      	ldr	r5, [pc, #104]	; (22798 <env_sensors_get_pressure+0xa8>)
	z_spin_lock_set_owner(l);
   2272e:	4815      	ldr	r0, [pc, #84]	; (22784 <env_sensors_get_pressure+0x94>)
   22730:	f017 f820 	bl	39774 <z_spin_lock_set_owner>
   22734:	4623      	mov	r3, r4
   22736:	f105 0418 	add.w	r4, r5, #24
   2273a:	462a      	mov	r2, r5
   2273c:	ca03      	ldmia	r2!, {r0, r1}
   2273e:	42a2      	cmp	r2, r4
   22740:	6018      	str	r0, [r3, #0]
   22742:	6059      	str	r1, [r3, #4]
   22744:	4615      	mov	r5, r2
   22746:	f103 0308 	add.w	r3, r3, #8
   2274a:	d1f6      	bne.n	2273a <env_sensors_get_pressure+0x4a>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2274c:	480d      	ldr	r0, [pc, #52]	; (22784 <env_sensors_get_pressure+0x94>)
   2274e:	f017 f801 	bl	39754 <z_spin_unlock_valid>
   22752:	b968      	cbnz	r0, 22770 <env_sensors_get_pressure+0x80>
   22754:	23a7      	movs	r3, #167	; 0xa7
   22756:	4a0c      	ldr	r2, [pc, #48]	; (22788 <env_sensors_get_pressure+0x98>)
   22758:	4910      	ldr	r1, [pc, #64]	; (2279c <env_sensors_get_pressure+0xac>)
   2275a:	480d      	ldr	r0, [pc, #52]	; (22790 <env_sensors_get_pressure+0xa0>)
   2275c:	f01a fb0b 	bl	3cd76 <printk>
   22760:	4908      	ldr	r1, [pc, #32]	; (22784 <env_sensors_get_pressure+0x94>)
   22762:	480f      	ldr	r0, [pc, #60]	; (227a0 <env_sensors_get_pressure+0xb0>)
   22764:	f01a fb07 	bl	3cd76 <printk>
   22768:	21a7      	movs	r1, #167	; 0xa7
   2276a:	4807      	ldr	r0, [pc, #28]	; (22788 <env_sensors_get_pressure+0x98>)
   2276c:	f01a fdb7 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   22770:	f386 8811 	msr	BASEPRI, r6
   22774:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&pressure_sensor.lock);

	memcpy(sensor_data, &(pressure_sensor.sensor),
		sizeof(pressure_sensor.sensor));
	k_spin_unlock(&pressure_sensor.lock, key);
	return 0;
   22778:	2000      	movs	r0, #0
}
   2277a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
   2277c:	f04f 30ff 	mov.w	r0, #4294967295
   22780:	e7fb      	b.n	2277a <env_sensors_get_pressure+0x8a>
   22782:	bf00      	nop
   22784:	20014744 	.word	0x20014744
   22788:	00045538 	.word	0x00045538
   2278c:	0004555e 	.word	0x0004555e
   22790:	00044dbf 	.word	0x00044dbf
   22794:	00045573 	.word	0x00045573
   22798:	20014720 	.word	0x20014720
   2279c:	0004558b 	.word	0x0004558b
   227a0:	000455a2 	.word	0x000455a2

000227a4 <env_sensors_set_send_interval>:
{
	return -1;
}

void env_sensors_set_send_interval(const uint32_t interval_s)
{
   227a4:	b508      	push	{r3, lr}
	if (interval_s == data_send_interval_s) {
   227a6:	4b11      	ldr	r3, [pc, #68]	; (227ec <env_sensors_set_send_interval+0x48>)
   227a8:	681a      	ldr	r2, [r3, #0]
   227aa:	4282      	cmp	r2, r0
   227ac:	d01c      	beq.n	227e8 <env_sensors_set_send_interval+0x44>
		return;
	}

	data_send_interval_s = MIN(interval_s, MAX_INTERVAL_S);
   227ae:	4a10      	ldr	r2, [pc, #64]	; (227f0 <env_sensors_set_send_interval+0x4c>)
   227b0:	4290      	cmp	r0, r2
   227b2:	bf94      	ite	ls
   227b4:	6018      	strls	r0, [r3, #0]
   227b6:	601a      	strhi	r2, [r3, #0]

	if (!initialized) {
   227b8:	4b0e      	ldr	r3, [pc, #56]	; (227f4 <env_sensors_set_send_interval+0x50>)
   227ba:	781b      	ldrb	r3, [r3, #0]
   227bc:	b1a3      	cbz	r3, 227e8 <env_sensors_set_send_interval+0x44>
		return;
	}

	if (data_send_interval_s) {
   227be:	b118      	cbz	r0, 227c8 <env_sensors_set_send_interval+0x24>
		/* restart work for new interval to take effect */
		env_sensors_poll();
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
		k_delayed_work_cancel(&env_sensors_poller);
	}
}
   227c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		env_sensors_poll();
   227c4:	f7ff be72 	b.w	224ac <env_sensors_poll>
	return k_ticks_to_ms_floor32(z_timeout_remaining(&work->timeout));
   227c8:	480b      	ldr	r0, [pc, #44]	; (227f8 <env_sensors_set_send_interval+0x54>)
   227ca:	f017 fadb 	bl	39d84 <z_timeout_remaining>
			return (uint32_t)((t * to_hz + off) / from_hz);
   227ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   227d2:	fba0 0103 	umull	r0, r1, r0, r3
   227d6:	0bc3      	lsrs	r3, r0, #15
	} else if (k_delayed_work_remaining_get(&env_sensors_poller) > 0) {
   227d8:	ea53 4341 	orrs.w	r3, r3, r1, lsl #17
   227dc:	d004      	beq.n	227e8 <env_sensors_set_send_interval+0x44>
}
   227de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_delayed_work_cancel(&env_sensors_poller);
   227e2:	4806      	ldr	r0, [pc, #24]	; (227fc <env_sensors_set_send_interval+0x58>)
   227e4:	f017 b8bc 	b.w	39960 <k_delayed_work_cancel>
}
   227e8:	bd08      	pop	{r3, pc}
   227ea:	bf00      	nop
   227ec:	200154f0 	.word	0x200154f0
   227f0:	0020c49b 	.word	0x0020c49b
   227f4:	2001ebd4 	.word	0x2001ebd4
   227f8:	20016868 	.word	0x20016868
   227fc:	20016858 	.word	0x20016858

00022800 <env_sensors_set_backoff_enable>:
	return data_send_interval_s;
}

void env_sensors_set_backoff_enable(const bool enable)
{
	backoff_enabled = enable;
   22800:	4b01      	ldr	r3, [pc, #4]	; (22808 <env_sensors_set_backoff_enable+0x8>)
   22802:	7018      	strb	r0, [r3, #0]
}
   22804:	4770      	bx	lr
   22806:	bf00      	nop
   22808:	2001ebd3 	.word	0x2001ebd3

0002280c <primary_feed_worker>:
static struct wdt_data_storage wdt_data;
static struct k_work_q *second_work_q;

static void primary_feed_worker(struct k_work *work_desc)
{
	k_work_submit_to_queue(second_work_q, &wdt_data.second_workqueue_work);
   2280c:	4b08      	ldr	r3, [pc, #32]	; (22830 <primary_feed_worker+0x24>)
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2280e:	4909      	ldr	r1, [pc, #36]	; (22834 <primary_feed_worker+0x28>)
   22810:	6818      	ldr	r0, [r3, #0]
   22812:	e8d1 3fef 	ldaex	r3, [r1]
   22816:	f043 0201 	orr.w	r2, r3, #1
   2281a:	e8c1 2fec 	stlex	ip, r2, [r1]
   2281e:	f1bc 0f00 	cmp.w	ip, #0
   22822:	d1f6      	bne.n	22812 <primary_feed_worker+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   22824:	07db      	lsls	r3, r3, #31
   22826:	d402      	bmi.n	2282e <primary_feed_worker+0x22>
		k_queue_append(&work_q->queue, work);
   22828:	3908      	subs	r1, #8
   2282a:	f01f b886 	b.w	4193a <k_queue_append>
}
   2282e:	4770      	bx	lr
   22830:	20018c80 	.word	0x20018c80
   22834:	200168c8 	.word	0x200168c8

00022838 <secondary_feed_worker>:
static void secondary_feed_worker(struct k_work *work_desc)
{
   22838:	b510      	push	{r4, lr}
	int err = wdt_feed(wdt_data.wdt_drv, wdt_data.wdt_channel_id);
   2283a:	4c0f      	ldr	r4, [pc, #60]	; (22878 <secondary_feed_worker+0x40>)
   2283c:	e9d4 0100 	ldrd	r0, r1, [r4]
static inline int z_impl_wdt_feed(const struct device *dev, int channel_id)
{
	const struct wdt_driver_api *api =
		(const struct wdt_driver_api *)dev->api;

	return api->feed(dev, channel_id);
   22840:	6883      	ldr	r3, [r0, #8]
   22842:	68db      	ldr	r3, [r3, #12]
   22844:	4798      	blx	r3

	LOG_DBG("Feeding watchdog");

	if (err) {
   22846:	b160      	cbz	r0, 22862 <secondary_feed_worker+0x2a>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
	} else {
		k_delayed_work_submit(&wdt_data.system_workqueue_work,
				      K_MSEC(WDT_FEED_WORKER_DELAY_MS));
	}
}
   22848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2284c:	4a0b      	ldr	r2, [pc, #44]	; (2287c <secondary_feed_worker+0x44>)
   2284e:	4b0c      	ldr	r3, [pc, #48]	; (22880 <secondary_feed_worker+0x48>)
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   22850:	490c      	ldr	r1, [pc, #48]	; (22884 <secondary_feed_worker+0x4c>)
   22852:	1a9b      	subs	r3, r3, r2
   22854:	08db      	lsrs	r3, r3, #3
   22856:	019b      	lsls	r3, r3, #6
   22858:	4602      	mov	r2, r0
   2285a:	f043 0001 	orr.w	r0, r3, #1
   2285e:	f01a bd4f 	b.w	3d300 <log_string_sync>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   22862:	f104 0108 	add.w	r1, r4, #8
   22866:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
}
   2286a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2286e:	2300      	movs	r3, #0
   22870:	4805      	ldr	r0, [pc, #20]	; (22888 <secondary_feed_worker+0x50>)
   22872:	f016 bfeb 	b.w	3984c <k_delayed_work_submit_to_queue>
   22876:	bf00      	nop
   22878:	20016888 	.word	0x20016888
   2287c:	0004339c 	.word	0x0004339c
   22880:	000434f4 	.word	0x000434f4
   22884:	00045613 	.word	0x00045613
   22888:	20018af0 	.word	0x20018af0

0002288c <watchdog_init_and_start>:

	return 0;
}

int watchdog_init_and_start(struct k_work_q *work_q)
{
   2288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (work_q == NULL) {
   2288e:	2800      	cmp	r0, #0
   22890:	d067      	beq.n	22962 <watchdog_init_and_start+0xd6>
		return -EINVAL;
	}
	second_work_q = work_q;
   22892:	4b35      	ldr	r3, [pc, #212]	; (22968 <watchdog_init_and_start+0xdc>)
   22894:	6018      	str	r0, [r3, #0]
   22896:	4835      	ldr	r0, [pc, #212]	; (2296c <watchdog_init_and_start+0xe0>)
   22898:	f014 fbe4 	bl	37064 <z_impl_device_get_binding>
   2289c:	4d34      	ldr	r5, [pc, #208]	; (22970 <watchdog_init_and_start+0xe4>)
   2289e:	4a35      	ldr	r2, [pc, #212]	; (22974 <watchdog_init_and_start+0xe8>)
	data->wdt_drv = device_get_binding(DT_LABEL(DT_NODELABEL(wdt)));
   228a0:	4e35      	ldr	r6, [pc, #212]	; (22978 <watchdog_init_and_start+0xec>)
   228a2:	1aad      	subs	r5, r5, r2
   228a4:	08ed      	lsrs	r5, r5, #3
   228a6:	6030      	str	r0, [r6, #0]
	if (data->wdt_drv == NULL) {
   228a8:	01ad      	lsls	r5, r5, #6
   228aa:	b940      	cbnz	r0, 228be <watchdog_init_and_start+0x32>
		LOG_ERR("Cannot bind watchdog driver");
   228ac:	4933      	ldr	r1, [pc, #204]	; (2297c <watchdog_init_and_start+0xf0>)
   228ae:	f045 0001 	orr.w	r0, r5, #1
   228b2:	f01a fd25 	bl	3d300 <log_string_sync>
		return err;
   228b6:	f06f 0405 	mvn.w	r4, #5
	return watchdog_enable(&wdt_data);
}
   228ba:	4620      	mov	r0, r4
   228bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return api->install_timeout(dev, cfg);
   228be:	6883      	ldr	r3, [r0, #8]
   228c0:	492f      	ldr	r1, [pc, #188]	; (22980 <watchdog_init_and_start+0xf4>)
   228c2:	689b      	ldr	r3, [r3, #8]
   228c4:	4798      	blx	r3
	if (data->wdt_channel_id < 0) {
   228c6:	2800      	cmp	r0, #0
   228c8:	4602      	mov	r2, r0
	data->wdt_channel_id = wdt_install_timeout(
   228ca:	6070      	str	r0, [r6, #4]
	if (data->wdt_channel_id < 0) {
   228cc:	da07      	bge.n	228de <watchdog_init_and_start+0x52>
		LOG_ERR("Cannot install watchdog timer! Error code: %d",
   228ce:	492d      	ldr	r1, [pc, #180]	; (22984 <watchdog_init_and_start+0xf8>)
   228d0:	f045 0001 	orr.w	r0, r5, #1
   228d4:	f01a fd14 	bl	3d300 <log_string_sync>
		return -EFAULT;
   228d8:	f06f 040d 	mvn.w	r4, #13
   228dc:	e7ed      	b.n	228ba <watchdog_init_and_start+0x2e>
	LOG_INF("Watchdog timeout installed. Timeout: %d",
   228de:	f045 0703 	orr.w	r7, r5, #3
   228e2:	4638      	mov	r0, r7
   228e4:	f64e 2260 	movw	r2, #60000	; 0xea60
   228e8:	4927      	ldr	r1, [pc, #156]	; (22988 <watchdog_init_and_start+0xfc>)
   228ea:	f01a fd09 	bl	3d300 <log_string_sync>
	int err = wdt_setup(data->wdt_drv, WDT_OPT_PAUSE_HALTED_BY_DBG);
   228ee:	6830      	ldr	r0, [r6, #0]
	return api->setup(dev, options);
   228f0:	6883      	ldr	r3, [r0, #8]
   228f2:	2102      	movs	r1, #2
   228f4:	681b      	ldr	r3, [r3, #0]
   228f6:	4798      	blx	r3
	if (err) {
   228f8:	4604      	mov	r4, r0
   228fa:	b130      	cbz	r0, 2290a <watchdog_init_and_start+0x7e>
		LOG_ERR("Cannot start watchdog! Error code: %d", err);
   228fc:	4602      	mov	r2, r0
   228fe:	4923      	ldr	r1, [pc, #140]	; (2298c <watchdog_init_and_start+0x100>)
		LOG_ERR("Cannot start watchdog feed worker!"
   22900:	f045 0001 	orr.w	r0, r5, #1
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   22904:	f01a fcfc 	bl	3d300 <log_string_sync>
	if (err) {
   22908:	e7d7      	b.n	228ba <watchdog_init_and_start+0x2e>
		LOG_INF("Watchdog started");
   2290a:	4638      	mov	r0, r7
   2290c:	4920      	ldr	r1, [pc, #128]	; (22990 <watchdog_init_and_start+0x104>)
   2290e:	f01a fcf7 	bl	3d300 <log_string_sync>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   22912:	4621      	mov	r1, r4
   22914:	2230      	movs	r2, #48	; 0x30
   22916:	f106 0008 	add.w	r0, r6, #8
   2291a:	f01f f9e0 	bl	41cde <memset>
	int err = wdt_feed(data->wdt_drv, data->wdt_channel_id);
   2291e:	e9d6 0100 	ldrd	r0, r1, [r6]
   22922:	4b1c      	ldr	r3, [pc, #112]	; (22994 <watchdog_init_and_start+0x108>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22924:	63b4      	str	r4, [r6, #56]	; 0x38
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   22926:	60f3      	str	r3, [r6, #12]
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   22928:	4b1b      	ldr	r3, [pc, #108]	; (22998 <watchdog_init_and_start+0x10c>)
   2292a:	e9c6 340f 	strd	r3, r4, [r6, #60]	; 0x3c
	return api->feed(dev, channel_id);
   2292e:	6883      	ldr	r3, [r0, #8]
   22930:	68db      	ldr	r3, [r3, #12]
   22932:	4798      	blx	r3
	if (err) {
   22934:	4604      	mov	r4, r0
   22936:	b110      	cbz	r0, 2293e <watchdog_init_and_start+0xb2>
		LOG_ERR("Cannot feed watchdog. Error code: %d", err);
   22938:	4602      	mov	r2, r0
   2293a:	4918      	ldr	r1, [pc, #96]	; (2299c <watchdog_init_and_start+0x110>)
   2293c:	e7e0      	b.n	22900 <watchdog_init_and_start+0x74>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2293e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   22942:	2300      	movs	r3, #0
   22944:	4816      	ldr	r0, [pc, #88]	; (229a0 <watchdog_init_and_start+0x114>)
   22946:	f106 0108 	add.w	r1, r6, #8
   2294a:	f016 ff7f 	bl	3984c <k_delayed_work_submit_to_queue>
	if (err) {
   2294e:	4604      	mov	r4, r0
   22950:	b110      	cbz	r0, 22958 <watchdog_init_and_start+0xcc>
		LOG_ERR("Cannot start watchdog feed worker!"
   22952:	4602      	mov	r2, r0
   22954:	4913      	ldr	r1, [pc, #76]	; (229a4 <watchdog_init_and_start+0x118>)
   22956:	e7d3      	b.n	22900 <watchdog_init_and_start+0x74>
		LOG_INF("Watchdog feed enabled. Timeout: %d",
   22958:	f247 5230 	movw	r2, #30000	; 0x7530
   2295c:	4638      	mov	r0, r7
   2295e:	4912      	ldr	r1, [pc, #72]	; (229a8 <watchdog_init_and_start+0x11c>)
   22960:	e7d0      	b.n	22904 <watchdog_init_and_start+0x78>
		return -EINVAL;
   22962:	f06f 0415 	mvn.w	r4, #21
   22966:	e7a8      	b.n	228ba <watchdog_init_and_start+0x2e>
   22968:	20018c80 	.word	0x20018c80
   2296c:	00045638 	.word	0x00045638
   22970:	000434f4 	.word	0x000434f4
   22974:	0004339c 	.word	0x0004339c
   22978:	20016888 	.word	0x20016888
   2297c:	0004563c 	.word	0x0004563c
   22980:	0004375c 	.word	0x0004375c
   22984:	00045658 	.word	0x00045658
   22988:	00045686 	.word	0x00045686
   2298c:	000456ae 	.word	0x000456ae
   22990:	000456d4 	.word	0x000456d4
   22994:	0002280d 	.word	0x0002280d
   22998:	00022839 	.word	0x00022839
   2299c:	00045613 	.word	0x00045613
   229a0:	20018af0 	.word	0x20018af0
   229a4:	000456e5 	.word	0x000456e5
   229a8:	00045717 	.word	0x00045717

000229ac <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
   229ac:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   229ae:	4c0a      	ldr	r4, [pc, #40]	; (229d8 <crc8_ccitt+0x2c>)
   229b0:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
   229b2:	4291      	cmp	r1, r2
   229b4:	d100      	bne.n	229b8 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
   229b6:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
   229b8:	f811 3b01 	ldrb.w	r3, [r1], #1
   229bc:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   229be:	0903      	lsrs	r3, r0, #4
   229c0:	5ce3      	ldrb	r3, [r4, r3]
   229c2:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
   229c6:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
   229c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
   229cc:	5ce0      	ldrb	r0, [r4, r3]
   229ce:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
   229d2:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
   229d4:	e7ed      	b.n	229b2 <crc8_ccitt+0x6>
   229d6:	bf00      	nop
   229d8:	00045743 	.word	0x00045743

000229dc <_check_fd>:
	return -1;
}

static int _check_fd(int fd)
{
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   229dc:	2803      	cmp	r0, #3
{
   229de:	b508      	push	{r3, lr}
	if (fd < 0 || fd >= ARRAY_SIZE(fdtable)) {
   229e0:	d906      	bls.n	229f0 <_check_fd+0x14>
	}

	fd = k_array_index_sanitize(fd, ARRAY_SIZE(fdtable));

	if (!atomic_get(&fdtable[fd].refcount)) {
		errno = EBADF;
   229e2:	f01b fb7a 	bl	3e0da <__errno>
   229e6:	2309      	movs	r3, #9
   229e8:	6003      	str	r3, [r0, #0]
   229ea:	f04f 30ff 	mov.w	r0, #4294967295
		return -1;
	}

	return 0;
}
   229ee:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   229f0:	220c      	movs	r2, #12
   229f2:	4b05      	ldr	r3, [pc, #20]	; (22a08 <_check_fd+0x2c>)
   229f4:	fb02 3000 	mla	r0, r2, r0, r3
   229f8:	3008      	adds	r0, #8
   229fa:	e8d0 3faf 	lda	r3, [r0]
	if (!atomic_get(&fdtable[fd].refcount)) {
   229fe:	2b00      	cmp	r3, #0
   22a00:	d0ef      	beq.n	229e2 <_check_fd+0x6>
	return 0;
   22a02:	2000      	movs	r0, #0
   22a04:	e7f3      	b.n	229ee <_check_fd+0x12>
   22a06:	bf00      	nop
   22a08:	20018c84 	.word	0x20018c84

00022a0c <z_get_fd_obj>:

void *z_get_fd_obj(int fd, const struct fd_op_vtable *vtable, int err)
{
   22a0c:	b570      	push	{r4, r5, r6, lr}
   22a0e:	4604      	mov	r4, r0
   22a10:	460d      	mov	r5, r1
   22a12:	4616      	mov	r6, r2
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   22a14:	f7ff ffe2 	bl	229dc <_check_fd>
   22a18:	2800      	cmp	r0, #0
   22a1a:	db0a      	blt.n	22a32 <z_get_fd_obj+0x26>
		return NULL;
	}

	fd_entry = &fdtable[fd];

	if (vtable != NULL && fd_entry->vtable != vtable) {
   22a1c:	4a08      	ldr	r2, [pc, #32]	; (22a40 <z_get_fd_obj+0x34>)
   22a1e:	b155      	cbz	r5, 22a36 <z_get_fd_obj+0x2a>
   22a20:	230c      	movs	r3, #12
   22a22:	fb03 2304 	mla	r3, r3, r4, r2
   22a26:	685b      	ldr	r3, [r3, #4]
   22a28:	42ab      	cmp	r3, r5
   22a2a:	d004      	beq.n	22a36 <z_get_fd_obj+0x2a>
		errno = err;
   22a2c:	f01b fb55 	bl	3e0da <__errno>
   22a30:	6006      	str	r6, [r0, #0]
		return NULL;
   22a32:	2000      	movs	r0, #0
   22a34:	e002      	b.n	22a3c <z_get_fd_obj+0x30>
		return NULL;
	}

	return fd_entry->obj;
   22a36:	200c      	movs	r0, #12
   22a38:	4344      	muls	r4, r0
   22a3a:	5910      	ldr	r0, [r2, r4]
}
   22a3c:	bd70      	pop	{r4, r5, r6, pc}
   22a3e:	bf00      	nop
   22a40:	20018c84 	.word	0x20018c84

00022a44 <z_get_fd_obj_and_vtable>:

void *z_get_fd_obj_and_vtable(int fd, const struct fd_op_vtable **vtable)
{
   22a44:	b538      	push	{r3, r4, r5, lr}
   22a46:	4605      	mov	r5, r0
   22a48:	460c      	mov	r4, r1
	struct fd_entry *fd_entry;

	if (_check_fd(fd) < 0) {
   22a4a:	f7ff ffc7 	bl	229dc <_check_fd>
   22a4e:	2800      	cmp	r0, #0
		return NULL;
	}

	fd_entry = &fdtable[fd];
	*vtable = fd_entry->vtable;
   22a50:	bfa3      	ittte	ge
   22a52:	230c      	movge	r3, #12
   22a54:	fb03 f005 	mulge.w	r0, r3, r5
   22a58:	4a03      	ldrge	r2, [pc, #12]	; (22a68 <z_get_fd_obj_and_vtable+0x24>)
		return NULL;
   22a5a:	2000      	movlt	r0, #0
	*vtable = fd_entry->vtable;
   22a5c:	bfa1      	itttt	ge
   22a5e:	1813      	addge	r3, r2, r0
   22a60:	685b      	ldrge	r3, [r3, #4]
   22a62:	6023      	strge	r3, [r4, #0]

	return fd_entry->obj;
   22a64:	5810      	ldrge	r0, [r2, r0]
}
   22a66:	bd38      	pop	{r3, r4, r5, pc}
   22a68:	20018c84 	.word	0x20018c84

00022a6c <z_reserve_fd>:

int z_reserve_fd(void)
{
   22a6c:	b510      	push	{r4, lr}
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   22a6e:	2400      	movs	r4, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   22a70:	f04f 33ff 	mov.w	r3, #4294967295
   22a74:	f04f 32ff 	mov.w	r2, #4294967295
   22a78:	4812      	ldr	r0, [pc, #72]	; (22ac4 <z_reserve_fd+0x58>)
   22a7a:	f014 ff29 	bl	378d0 <z_impl_k_mutex_lock>
   22a7e:	4b12      	ldr	r3, [pc, #72]	; (22ac8 <z_reserve_fd+0x5c>)
   22a80:	e8d3 2faf 	lda	r2, [r3]
		if (!atomic_get(&fdtable[fd].refcount)) {
   22a84:	b17a      	cbz	r2, 22aa6 <z_reserve_fd+0x3a>
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
   22a86:	3401      	adds	r4, #1
   22a88:	2c04      	cmp	r4, #4
   22a8a:	f103 030c 	add.w	r3, r3, #12
   22a8e:	d1f7      	bne.n	22a80 <z_reserve_fd+0x14>
	errno = ENFILE;
   22a90:	f01b fb23 	bl	3e0da <__errno>
   22a94:	2317      	movs	r3, #23
	return -1;
   22a96:	f04f 34ff 	mov.w	r4, #4294967295
	errno = ENFILE;
   22a9a:	6003      	str	r3, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   22a9c:	4809      	ldr	r0, [pc, #36]	; (22ac4 <z_reserve_fd+0x58>)
   22a9e:	f015 f811 	bl	37ac4 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
   22aa2:	4620      	mov	r0, r4
   22aa4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22aa6:	e8d3 1fef 	ldaex	r1, [r3]
   22aaa:	3101      	adds	r1, #1
   22aac:	e8c3 1fe0 	stlex	r0, r1, [r3]
   22ab0:	2800      	cmp	r0, #0
   22ab2:	d1f8      	bne.n	22aa6 <z_reserve_fd+0x3a>
		fdtable[fd].obj = NULL;
   22ab4:	230c      	movs	r3, #12
   22ab6:	4363      	muls	r3, r4
   22ab8:	4904      	ldr	r1, [pc, #16]	; (22acc <z_reserve_fd+0x60>)
   22aba:	18c8      	adds	r0, r1, r3
   22abc:	50ca      	str	r2, [r1, r3]
		fdtable[fd].vtable = NULL;
   22abe:	6042      	str	r2, [r0, #4]
   22ac0:	e7ec      	b.n	22a9c <z_reserve_fd+0x30>
   22ac2:	bf00      	nop
   22ac4:	20015a74 	.word	0x20015a74
   22ac8:	20018c8c 	.word	0x20018c8c
   22acc:	20018c84 	.word	0x20018c84

00022ad0 <z_finalize_fd>:
	 * This call is a no-op if obj is invalid or points to something
	 * not a kernel object.
	 */
	z_object_recycle(obj);
#endif
	fdtable[fd].obj = obj;
   22ad0:	230c      	movs	r3, #12
{
   22ad2:	b510      	push	{r4, lr}
	fdtable[fd].obj = obj;
   22ad4:	4358      	muls	r0, r3
   22ad6:	4c02      	ldr	r4, [pc, #8]	; (22ae0 <z_finalize_fd+0x10>)
   22ad8:	1823      	adds	r3, r4, r0
   22ada:	5021      	str	r1, [r4, r0]
	fdtable[fd].vtable = vtable;
   22adc:	605a      	str	r2, [r3, #4]
}
   22ade:	bd10      	pop	{r4, pc}
   22ae0:	20018c84 	.word	0x20018c84

00022ae4 <z_free_fd>:
		old_rc = atomic_get(&fdtable[fd].refcount);
   22ae4:	230c      	movs	r3, #12
   22ae6:	4a0e      	ldr	r2, [pc, #56]	; (22b20 <z_free_fd+0x3c>)

void z_free_fd(int fd)
{
   22ae8:	b530      	push	{r4, r5, lr}
		old_rc = atomic_get(&fdtable[fd].refcount);
   22aea:	fb03 2300 	mla	r3, r3, r0, r2
   22aee:	3308      	adds	r3, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22af0:	e8d3 1faf 	lda	r1, [r3]
		if (!old_rc) {
   22af4:	b191      	cbz	r1, 22b1c <z_free_fd+0x38>
	} while (!atomic_cas(&fdtable[fd].refcount, old_rc, old_rc - 1));
   22af6:	1e4c      	subs	r4, r1, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22af8:	e8d3 5fef 	ldaex	r5, [r3]
   22afc:	428d      	cmp	r5, r1
   22afe:	d104      	bne.n	22b0a <z_free_fd+0x26>
   22b00:	e8c3 4fec 	stlex	ip, r4, [r3]
   22b04:	f1bc 0f00 	cmp.w	ip, #0
   22b08:	d1f6      	bne.n	22af8 <z_free_fd+0x14>
   22b0a:	d1f1      	bne.n	22af0 <z_free_fd+0xc>
	if (old_rc != 1) {
   22b0c:	2901      	cmp	r1, #1
   22b0e:	d105      	bne.n	22b1c <z_free_fd+0x38>
	fdtable[fd].obj = NULL;
   22b10:	230c      	movs	r3, #12
   22b12:	4358      	muls	r0, r3
   22b14:	2300      	movs	r3, #0
   22b16:	1811      	adds	r1, r2, r0
   22b18:	5013      	str	r3, [r2, r0]
	fdtable[fd].vtable = NULL;
   22b1a:	604b      	str	r3, [r1, #4]
	/* Assumes fd was already bounds-checked. */
	(void)z_fd_unref(fd);
}
   22b1c:	bd30      	pop	{r4, r5, pc}
   22b1e:	bf00      	nop
   22b20:	20018c84 	.word	0x20018c84

00022b24 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22b24:	6843      	ldr	r3, [r0, #4]
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   22b26:	b570      	push	{r4, r5, r6, lr}

	return method & SYS_NOTIFY_METHOD_MASK;
   22b28:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   22b2c:	2b02      	cmp	r3, #2
{
   22b2e:	4604      	mov	r4, r0
   22b30:	460e      	mov	r6, r1
	notify->result = res;
   22b32:	6081      	str	r1, [r0, #8]
	switch (method) {
   22b34:	d010      	beq.n	22b58 <sys_notify_finalize+0x34>
   22b36:	2b03      	cmp	r3, #3
   22b38:	d004      	beq.n	22b44 <sys_notify_finalize+0x20>
   22b3a:	2b01      	cmp	r3, #1
   22b3c:	d10f      	bne.n	22b5e <sys_notify_finalize+0x3a>
   22b3e:	2500      	movs	r5, #0
   22b40:	4628      	mov	r0, r5
   22b42:	e001      	b.n	22b48 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   22b44:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   22b46:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22b48:	2300      	movs	r3, #0
   22b4a:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   22b4c:	b110      	cbz	r0, 22b54 <sys_notify_finalize+0x30>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
   22b4e:	4631      	mov	r1, r6
   22b50:	f017 fe54 	bl	3a7fc <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   22b54:	4628      	mov	r0, r5
   22b56:	bd70      	pop	{r4, r5, r6, pc}
	sys_notify_generic_callback rv = 0;
   22b58:	2500      	movs	r5, #0
		sig = notify->method.signal;
   22b5a:	6800      	ldr	r0, [r0, #0]
		break;
   22b5c:	e7f4      	b.n	22b48 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   22b5e:	2345      	movs	r3, #69	; 0x45
   22b60:	4a05      	ldr	r2, [pc, #20]	; (22b78 <sys_notify_finalize+0x54>)
   22b62:	4906      	ldr	r1, [pc, #24]	; (22b7c <sys_notify_finalize+0x58>)
   22b64:	4806      	ldr	r0, [pc, #24]	; (22b80 <sys_notify_finalize+0x5c>)
   22b66:	f01a f906 	bl	3cd76 <printk>
   22b6a:	2145      	movs	r1, #69	; 0x45
   22b6c:	4802      	ldr	r0, [pc, #8]	; (22b78 <sys_notify_finalize+0x54>)
   22b6e:	f01a fbb6 	bl	3d2de <assert_post_action>
	sys_notify_generic_callback rv = 0;
   22b72:	2500      	movs	r5, #0
   22b74:	e7e7      	b.n	22b46 <sys_notify_finalize+0x22>
   22b76:	bf00      	nop
   22b78:	00045753 	.word	0x00045753
   22b7c:	0004bcc7 	.word	0x0004bcc7
   22b80:	00044dbf 	.word	0x00044dbf

00022b84 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   22b84:	680b      	ldr	r3, [r1, #0]
   22b86:	3301      	adds	r3, #1
   22b88:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   22b8a:	4b01      	ldr	r3, [pc, #4]	; (22b90 <char_out+0xc>)
   22b8c:	681b      	ldr	r3, [r3, #0]
   22b8e:	4718      	bx	r3
   22b90:	200154f4 	.word	0x200154f4

00022b94 <__printk_hook_install>:
	_char_out = fn;
   22b94:	4b01      	ldr	r3, [pc, #4]	; (22b9c <__printk_hook_install+0x8>)
   22b96:	6018      	str	r0, [r3, #0]
}
   22b98:	4770      	bx	lr
   22b9a:	bf00      	nop
   22b9c:	200154f4 	.word	0x200154f4

00022ba0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   22ba0:	b507      	push	{r0, r1, r2, lr}
   22ba2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   22ba4:	2100      	movs	r1, #0
{
   22ba6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   22ba8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   22baa:	4803      	ldr	r0, [pc, #12]	; (22bb8 <vprintk+0x18>)
   22bac:	a901      	add	r1, sp, #4
   22bae:	f000 fd77 	bl	236a0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   22bb2:	b003      	add	sp, #12
   22bb4:	f85d fb04 	ldr.w	pc, [sp], #4
   22bb8:	00022b85 	.word	0x00022b85

00022bbc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   22bbc:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   22bbe:	2500      	movs	r5, #0
{
   22bc0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   22bc2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   22bc6:	4604      	mov	r4, r0

	cbvprintf(str_out, &ctx, fmt, ap);
   22bc8:	a901      	add	r1, sp, #4
   22bca:	4805      	ldr	r0, [pc, #20]	; (22be0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   22bcc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   22bce:	f000 fd67 	bl	236a0 <cbvprintf>

	if (ctx.count < ctx.max) {
   22bd2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   22bd6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   22bd8:	bfb8      	it	lt
   22bda:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   22bdc:	b005      	add	sp, #20
   22bde:	bd30      	pop	{r4, r5, pc}
   22be0:	0003cd51 	.word	0x0003cd51

00022be4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   22be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22be8:	ed2d 8b02 	vpush	{d8}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22bec:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   22bf0:	b083      	sub	sp, #12
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   22bf2:	f019 0f08 	tst.w	r9, #8
{
   22bf6:	4604      	mov	r4, r0
   22bf8:	9201      	str	r2, [sp, #4]
	if (processing) {
   22bfa:	d024      	beq.n	22c46 <process_event+0x62>
		if (evt == EVT_COMPLETE) {
   22bfc:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   22bfe:	bf0c      	ite	eq
   22c00:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   22c04:	f049 0920 	orrne.w	r9, r9, #32
   22c08:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   22c0c:	3414      	adds	r4, #20
   22c0e:	4620      	mov	r0, r4
   22c10:	f016 fda0 	bl	39754 <z_spin_unlock_valid>
   22c14:	b968      	cbnz	r0, 22c32 <process_event+0x4e>
   22c16:	23a7      	movs	r3, #167	; 0xa7
   22c18:	4aa2      	ldr	r2, [pc, #648]	; (22ea4 <process_event+0x2c0>)
   22c1a:	49a3      	ldr	r1, [pc, #652]	; (22ea8 <process_event+0x2c4>)
   22c1c:	48a3      	ldr	r0, [pc, #652]	; (22eac <process_event+0x2c8>)
   22c1e:	f01a f8aa 	bl	3cd76 <printk>
   22c22:	4621      	mov	r1, r4
   22c24:	48a2      	ldr	r0, [pc, #648]	; (22eb0 <process_event+0x2cc>)
   22c26:	f01a f8a6 	bl	3cd76 <printk>
   22c2a:	21a7      	movs	r1, #167	; 0xa7
   22c2c:	489d      	ldr	r0, [pc, #628]	; (22ea4 <process_event+0x2c0>)
   22c2e:	f01a fb56 	bl	3d2de <assert_post_action>
   22c32:	9b01      	ldr	r3, [sp, #4]
   22c34:	f383 8811 	msr	BASEPRI, r3
   22c38:	f3bf 8f6f 	isb	sy
}
   22c3c:	b003      	add	sp, #12
   22c3e:	ecbd 8b02 	vpop	{d8}
   22c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   22c46:	4f9b      	ldr	r7, [pc, #620]	; (22eb4 <process_event+0x2d0>)
   22c48:	f8df 8260 	ldr.w	r8, [pc, #608]	; 22eac <process_event+0x2c8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22c4c:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   22c50:	2902      	cmp	r1, #2
   22c52:	d106      	bne.n	22c62 <process_event+0x7e>
			evt = process_recheck(mgr);
   22c54:	4620      	mov	r0, r4
   22c56:	f01a f8a8 	bl	3cdaa <process_recheck>
		if (evt == EVT_NOP) {
   22c5a:	2800      	cmp	r0, #0
   22c5c:	d0d6      	beq.n	22c0c <process_event+0x28>
		if (evt == EVT_COMPLETE) {
   22c5e:	2801      	cmp	r0, #1
   22c60:	d16a      	bne.n	22d38 <process_event+0x154>
			res = mgr->last_res;
   22c62:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22c66:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   22c68:	f1bb 0f00 	cmp.w	fp, #0
   22c6c:	da1c      	bge.n	22ca8 <process_event+0xc4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   22c6e:	2600      	movs	r6, #0
		*clients = mgr->clients;
   22c70:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22c72:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   22c76:	e9c4 6600 	strd	r6, r6, [r4]
   22c7a:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   22c7e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   22c80:	9600      	str	r6, [sp, #0]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22c82:	8ba3      	ldrh	r3, [r4, #28]
   22c84:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   22c88:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   22c8a:	ee08 2a10 	vmov	s16, r2
				   && !sys_slist_is_empty(&mgr->monitors);
   22c8e:	d003      	beq.n	22c98 <process_event+0xb4>
		if (do_monitors
   22c90:	68a2      	ldr	r2, [r4, #8]
   22c92:	2a00      	cmp	r2, #0
   22c94:	f040 811e 	bne.w	22ed4 <process_event+0x2f0>
		    || !sys_slist_is_empty(&clients)
   22c98:	b91d      	cbnz	r5, 22ca2 <process_event+0xbe>
		    || (transit != NULL)) {
   22c9a:	9a00      	ldr	r2, [sp, #0]
   22c9c:	2a00      	cmp	r2, #0
   22c9e:	f000 8164 	beq.w	22f6a <process_event+0x386>
   22ca2:	f04f 0900 	mov.w	r9, #0
   22ca6:	e117      	b.n	22ed8 <process_event+0x2f4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22ca8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   22cac:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   22cae:	2901      	cmp	r1, #1
   22cb0:	d823      	bhi.n	22cfa <process_event+0x116>
	list->head = NULL;
   22cb2:	2100      	movs	r1, #0
   22cb4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   22cb8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   22cba:	6825      	ldr	r5, [r4, #0]
   22cbc:	b29b      	uxth	r3, r3
	list->tail = NULL;
   22cbe:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   22cc2:	d10c      	bne.n	22cde <process_event+0xfa>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   22cc4:	428d      	cmp	r5, r1
   22cc6:	462a      	mov	r2, r5
   22cc8:	bf38      	it	cc
   22cca:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   22ccc:	b12a      	cbz	r2, 22cda <process_event+0xf6>
				mgr->refs += 1U;
   22cce:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22cd0:	6812      	ldr	r2, [r2, #0]
   22cd2:	3101      	adds	r1, #1
   22cd4:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   22cd6:	2a00      	cmp	r2, #0
   22cd8:	d1f8      	bne.n	22ccc <process_event+0xe8>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22cda:	f043 0302 	orr.w	r3, r3, #2
		if (process_recheck(mgr) != EVT_NOP) {
   22cde:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   22ce0:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   22ce2:	f01a f862 	bl	3cdaa <process_recheck>
   22ce6:	2800      	cmp	r0, #0
   22ce8:	f000 80d7 	beq.w	22e9a <process_event+0x2b6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   22cec:	8ba3      	ldrh	r3, [r4, #28]
   22cee:	f043 0320 	orr.w	r3, r3, #32
   22cf2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   22cf4:	2300      	movs	r3, #0
   22cf6:	9300      	str	r3, [sp, #0]
   22cf8:	e7c3      	b.n	22c82 <process_event+0x9e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   22cfa:	2a04      	cmp	r2, #4
   22cfc:	d10f      	bne.n	22d1e <process_event+0x13a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22cfe:	f023 0307 	bic.w	r3, r3, #7
   22d02:	b29a      	uxth	r2, r3
		if (process_recheck(mgr) != EVT_NOP) {
   22d04:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
   22d06:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   22d08:	f01a f84f 	bl	3cdaa <process_recheck>
   22d0c:	2800      	cmp	r0, #0
   22d0e:	f000 80c6 	beq.w	22e9e <process_event+0x2ba>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   22d12:	f042 0220 	orr.w	r2, r2, #32
   22d16:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   22d18:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   22d1a:	9500      	str	r5, [sp, #0]
   22d1c:	e7b1      	b.n	22c82 <process_event+0x9e>
		__ASSERT_NO_MSG(false);
   22d1e:	4640      	mov	r0, r8
   22d20:	f240 1319 	movw	r3, #281	; 0x119
   22d24:	463a      	mov	r2, r7
   22d26:	4964      	ldr	r1, [pc, #400]	; (22eb8 <process_event+0x2d4>)
   22d28:	f01a f825 	bl	3cd76 <printk>
   22d2c:	f240 1119 	movw	r1, #281	; 0x119
   22d30:	4638      	mov	r0, r7
   22d32:	f01a fad4 	bl	3d2de <assert_post_action>
   22d36:	e7ef      	b.n	22d18 <process_event+0x134>
		} else if (evt == EVT_START) {
   22d38:	2803      	cmp	r0, #3
   22d3a:	d135      	bne.n	22da8 <process_event+0x1c4>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   22d3c:	f1b9 0f00 	cmp.w	r9, #0
   22d40:	d00b      	beq.n	22d5a <process_event+0x176>
   22d42:	4640      	mov	r0, r8
   22d44:	495d      	ldr	r1, [pc, #372]	; (22ebc <process_event+0x2d8>)
   22d46:	f44f 73aa 	mov.w	r3, #340	; 0x154
   22d4a:	463a      	mov	r2, r7
   22d4c:	f01a f813 	bl	3cd76 <printk>
   22d50:	f44f 71aa 	mov.w	r1, #340	; 0x154
   22d54:	4638      	mov	r0, r7
   22d56:	f01a fac2 	bl	3d2de <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   22d5a:	6823      	ldr	r3, [r4, #0]
   22d5c:	b95b      	cbnz	r3, 22d76 <process_event+0x192>
   22d5e:	4640      	mov	r0, r8
   22d60:	4957      	ldr	r1, [pc, #348]	; (22ec0 <process_event+0x2dc>)
   22d62:	f240 1355 	movw	r3, #341	; 0x155
   22d66:	463a      	mov	r2, r7
   22d68:	f01a f805 	bl	3cd76 <printk>
   22d6c:	f240 1155 	movw	r1, #341	; 0x155
   22d70:	4638      	mov	r0, r7
   22d72:	f01a fab4 	bl	3d2de <assert_post_action>
			transit = mgr->transitions->start;
   22d76:	6923      	ldr	r3, [r4, #16]
   22d78:	681b      	ldr	r3, [r3, #0]
   22d7a:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   22d7c:	b95b      	cbnz	r3, 22d96 <process_event+0x1b2>
   22d7e:	4640      	mov	r0, r8
   22d80:	4950      	ldr	r1, [pc, #320]	; (22ec4 <process_event+0x2e0>)
   22d82:	f44f 73ac 	mov.w	r3, #344	; 0x158
   22d86:	463a      	mov	r2, r7
   22d88:	f019 fff5 	bl	3cd76 <printk>
   22d8c:	f44f 71ac 	mov.w	r1, #344	; 0x158
   22d90:	4638      	mov	r0, r7
   22d92:	f01a faa4 	bl	3d2de <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22d96:	8ba3      	ldrh	r3, [r4, #28]
   22d98:	f023 0307 	bic.w	r3, r3, #7
   22d9c:	f043 0306 	orr.w	r3, r3, #6
}
   22da0:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
   22da2:	83a3      	strh	r3, [r4, #28]
		res = 0;
   22da4:	46ab      	mov	fp, r5
}
   22da6:	e76c      	b.n	22c82 <process_event+0x9e>
		} else if (evt == EVT_STOP) {
   22da8:	2804      	cmp	r0, #4
   22daa:	d132      	bne.n	22e12 <process_event+0x22e>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   22dac:	f1b9 0f02 	cmp.w	r9, #2
   22db0:	d00b      	beq.n	22dca <process_event+0x1e6>
   22db2:	4640      	mov	r0, r8
   22db4:	4944      	ldr	r1, [pc, #272]	; (22ec8 <process_event+0x2e4>)
   22db6:	f240 135b 	movw	r3, #347	; 0x15b
   22dba:	463a      	mov	r2, r7
   22dbc:	f019 ffdb 	bl	3cd76 <printk>
   22dc0:	f240 115b 	movw	r1, #347	; 0x15b
   22dc4:	4638      	mov	r0, r7
   22dc6:	f01a fa8a 	bl	3d2de <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   22dca:	8be3      	ldrh	r3, [r4, #30]
   22dcc:	b15b      	cbz	r3, 22de6 <process_event+0x202>
   22dce:	4640      	mov	r0, r8
   22dd0:	493e      	ldr	r1, [pc, #248]	; (22ecc <process_event+0x2e8>)
   22dd2:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   22dd6:	463a      	mov	r2, r7
   22dd8:	f019 ffcd 	bl	3cd76 <printk>
   22ddc:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   22de0:	4638      	mov	r0, r7
   22de2:	f01a fa7c 	bl	3d2de <assert_post_action>
			transit = mgr->transitions->stop;
   22de6:	6923      	ldr	r3, [r4, #16]
   22de8:	685b      	ldr	r3, [r3, #4]
   22dea:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   22dec:	b95b      	cbnz	r3, 22e06 <process_event+0x222>
   22dee:	4640      	mov	r0, r8
   22df0:	4934      	ldr	r1, [pc, #208]	; (22ec4 <process_event+0x2e0>)
   22df2:	f240 135f 	movw	r3, #351	; 0x15f
   22df6:	463a      	mov	r2, r7
   22df8:	f019 ffbd 	bl	3cd76 <printk>
   22dfc:	f240 115f 	movw	r1, #351	; 0x15f
   22e00:	4638      	mov	r0, r7
   22e02:	f01a fa6c 	bl	3d2de <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22e06:	8ba3      	ldrh	r3, [r4, #28]
   22e08:	f023 0307 	bic.w	r3, r3, #7
   22e0c:	f043 0304 	orr.w	r3, r3, #4
   22e10:	e7c6      	b.n	22da0 <process_event+0x1bc>
		} else if (evt == EVT_RESET) {
   22e12:	2805      	cmp	r0, #5
   22e14:	d132      	bne.n	22e7c <process_event+0x298>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   22e16:	f1b9 0f01 	cmp.w	r9, #1
   22e1a:	d00b      	beq.n	22e34 <process_event+0x250>
   22e1c:	4640      	mov	r0, r8
   22e1e:	492c      	ldr	r1, [pc, #176]	; (22ed0 <process_event+0x2ec>)
   22e20:	f44f 73b1 	mov.w	r3, #354	; 0x162
   22e24:	463a      	mov	r2, r7
   22e26:	f019 ffa6 	bl	3cd76 <printk>
   22e2a:	f44f 71b1 	mov.w	r1, #354	; 0x162
   22e2e:	4638      	mov	r0, r7
   22e30:	f01a fa55 	bl	3d2de <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   22e34:	6823      	ldr	r3, [r4, #0]
   22e36:	b95b      	cbnz	r3, 22e50 <process_event+0x26c>
   22e38:	4640      	mov	r0, r8
   22e3a:	4921      	ldr	r1, [pc, #132]	; (22ec0 <process_event+0x2dc>)
   22e3c:	f240 1363 	movw	r3, #355	; 0x163
   22e40:	463a      	mov	r2, r7
   22e42:	f019 ff98 	bl	3cd76 <printk>
   22e46:	f240 1163 	movw	r1, #355	; 0x163
   22e4a:	4638      	mov	r0, r7
   22e4c:	f01a fa47 	bl	3d2de <assert_post_action>
			transit = mgr->transitions->reset;
   22e50:	6923      	ldr	r3, [r4, #16]
   22e52:	689b      	ldr	r3, [r3, #8]
   22e54:	9300      	str	r3, [sp, #0]
			__ASSERT_NO_MSG(transit != NULL);
   22e56:	b95b      	cbnz	r3, 22e70 <process_event+0x28c>
   22e58:	4640      	mov	r0, r8
   22e5a:	491a      	ldr	r1, [pc, #104]	; (22ec4 <process_event+0x2e0>)
   22e5c:	f44f 73b3 	mov.w	r3, #358	; 0x166
   22e60:	463a      	mov	r2, r7
   22e62:	f019 ff88 	bl	3cd76 <printk>
   22e66:	f44f 71b3 	mov.w	r1, #358	; 0x166
   22e6a:	4638      	mov	r0, r7
   22e6c:	f01a fa37 	bl	3d2de <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   22e70:	8ba3      	ldrh	r3, [r4, #28]
   22e72:	f023 0307 	bic.w	r3, r3, #7
   22e76:	f043 0305 	orr.w	r3, r3, #5
   22e7a:	e791      	b.n	22da0 <process_event+0x1bc>
			__ASSERT_NO_MSG(false);
   22e7c:	2500      	movs	r5, #0
   22e7e:	f240 1369 	movw	r3, #361	; 0x169
   22e82:	463a      	mov	r2, r7
   22e84:	4640      	mov	r0, r8
   22e86:	490c      	ldr	r1, [pc, #48]	; (22eb8 <process_event+0x2d4>)
   22e88:	f019 ff75 	bl	3cd76 <printk>
   22e8c:	f240 1169 	movw	r1, #361	; 0x169
   22e90:	4638      	mov	r0, r7
   22e92:	f01a fa24 	bl	3d2de <assert_post_action>
		onoff_transition_fn transit = NULL;
   22e96:	9500      	str	r5, [sp, #0]
   22e98:	e784      	b.n	22da4 <process_event+0x1c0>
   22e9a:	9000      	str	r0, [sp, #0]
   22e9c:	e6f1      	b.n	22c82 <process_event+0x9e>
   22e9e:	4605      	mov	r5, r0
   22ea0:	e73b      	b.n	22d1a <process_event+0x136>
   22ea2:	bf00      	nop
   22ea4:	00045538 	.word	0x00045538
   22ea8:	0004558b 	.word	0x0004558b
   22eac:	00044dbf 	.word	0x00044dbf
   22eb0:	000455a2 	.word	0x000455a2
   22eb4:	00045776 	.word	0x00045776
   22eb8:	0004bcc7 	.word	0x0004bcc7
   22ebc:	00045798 	.word	0x00045798
   22ec0:	000457a4 	.word	0x000457a4
   22ec4:	000457c7 	.word	0x000457c7
   22ec8:	000457de 	.word	0x000457de
   22ecc:	000457f4 	.word	0x000457f4
   22ed0:	00045803 	.word	0x00045803
				   && !sys_slist_is_empty(&mgr->monitors);
   22ed4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   22ed8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   22edc:	f104 0a14 	add.w	sl, r4, #20
   22ee0:	4650      	mov	r0, sl
			mgr->flags = flags;
   22ee2:	83a3      	strh	r3, [r4, #28]
   22ee4:	f016 fc36 	bl	39754 <z_spin_unlock_valid>
   22ee8:	b968      	cbnz	r0, 22f06 <process_event+0x322>
   22eea:	23a7      	movs	r3, #167	; 0xa7
   22eec:	4640      	mov	r0, r8
   22eee:	4a3a      	ldr	r2, [pc, #232]	; (22fd8 <process_event+0x3f4>)
   22ef0:	493a      	ldr	r1, [pc, #232]	; (22fdc <process_event+0x3f8>)
   22ef2:	f019 ff40 	bl	3cd76 <printk>
   22ef6:	4651      	mov	r1, sl
   22ef8:	4839      	ldr	r0, [pc, #228]	; (22fe0 <process_event+0x3fc>)
   22efa:	f019 ff3c 	bl	3cd76 <printk>
   22efe:	21a7      	movs	r1, #167	; 0xa7
   22f00:	4835      	ldr	r0, [pc, #212]	; (22fd8 <process_event+0x3f4>)
   22f02:	f01a f9ec 	bl	3d2de <assert_post_action>
   22f06:	9b01      	ldr	r3, [sp, #4]
   22f08:	f383 8811 	msr	BASEPRI, r3
   22f0c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   22f10:	f1b9 0f00 	cmp.w	r9, #0
   22f14:	d138      	bne.n	22f88 <process_event+0x3a4>
	while (!sys_slist_is_empty(list)) {
   22f16:	2d00      	cmp	r5, #0
   22f18:	d14c      	bne.n	22fb4 <process_event+0x3d0>
			if (transit != NULL) {
   22f1a:	9b00      	ldr	r3, [sp, #0]
   22f1c:	b113      	cbz	r3, 22f24 <process_event+0x340>
				transit(mgr, transition_complete);
   22f1e:	4620      	mov	r0, r4
   22f20:	4930      	ldr	r1, [pc, #192]	; (22fe4 <process_event+0x400>)
   22f22:	4798      	blx	r3
	__asm__ volatile(
   22f24:	f04f 0320 	mov.w	r3, #32
   22f28:	f3ef 8b11 	mrs	fp, BASEPRI
   22f2c:	f383 8811 	msr	BASEPRI, r3
   22f30:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f34:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   22f36:	f8cd b004 	str.w	fp, [sp, #4]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f3a:	f016 fbfd 	bl	39738 <z_spin_lock_valid>
   22f3e:	b968      	cbnz	r0, 22f5c <process_event+0x378>
   22f40:	237c      	movs	r3, #124	; 0x7c
   22f42:	4640      	mov	r0, r8
   22f44:	4a24      	ldr	r2, [pc, #144]	; (22fd8 <process_event+0x3f4>)
   22f46:	4928      	ldr	r1, [pc, #160]	; (22fe8 <process_event+0x404>)
   22f48:	f019 ff15 	bl	3cd76 <printk>
   22f4c:	4651      	mov	r1, sl
   22f4e:	4827      	ldr	r0, [pc, #156]	; (22fec <process_event+0x408>)
   22f50:	f019 ff11 	bl	3cd76 <printk>
   22f54:	217c      	movs	r1, #124	; 0x7c
   22f56:	4820      	ldr	r0, [pc, #128]	; (22fd8 <process_event+0x3f4>)
   22f58:	f01a f9c1 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   22f5c:	4650      	mov	r0, sl
   22f5e:	f016 fc09 	bl	39774 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   22f62:	8ba3      	ldrh	r3, [r4, #28]
   22f64:	f023 0308 	bic.w	r3, r3, #8
   22f68:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   22f6a:	8ba3      	ldrh	r3, [r4, #28]
   22f6c:	06da      	lsls	r2, r3, #27
   22f6e:	d52a      	bpl.n	22fc6 <process_event+0x3e2>
			evt = EVT_COMPLETE;
   22f70:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   22f72:	f023 0310 	bic.w	r3, r3, #16
   22f76:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   22f78:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   22f7c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   22f80:	2900      	cmp	r1, #0
   22f82:	f47f ae65 	bne.w	22c50 <process_event+0x6c>
out:
   22f86:	e641      	b.n	22c0c <process_event+0x28>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   22f88:	68a1      	ldr	r1, [r4, #8]
   22f8a:	2900      	cmp	r1, #0
   22f8c:	d0c3      	beq.n	22f16 <process_event+0x332>
	return node->next;
   22f8e:	680b      	ldr	r3, [r1, #0]
   22f90:	2b00      	cmp	r3, #0
   22f92:	bf38      	it	cc
   22f94:	2300      	movcc	r3, #0
   22f96:	4699      	mov	r9, r3
		mon->callback(mgr, mon, state, res);
   22f98:	684b      	ldr	r3, [r1, #4]
   22f9a:	ee18 2a10 	vmov	r2, s16
   22f9e:	461e      	mov	r6, r3
   22fa0:	4620      	mov	r0, r4
   22fa2:	465b      	mov	r3, fp
   22fa4:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   22fa6:	f1b9 0f00 	cmp.w	r9, #0
   22faa:	d0b4      	beq.n	22f16 <process_event+0x332>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   22fac:	4649      	mov	r1, r9
   22fae:	f8d9 3000 	ldr.w	r3, [r9]
   22fb2:	e7ed      	b.n	22f90 <process_event+0x3ac>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22fb4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   22fb6:	465b      	mov	r3, fp
   22fb8:	ee18 2a10 	vmov	r2, s16
   22fbc:	4620      	mov	r0, r4
   22fbe:	682d      	ldr	r5, [r5, #0]
   22fc0:	f019 ff0f 	bl	3cde2 <notify_one>
   22fc4:	e7a7      	b.n	22f16 <process_event+0x332>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   22fc6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   22fca:	bf1e      	ittt	ne
   22fcc:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
   22fd0:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   22fd2:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   22fd4:	e7d0      	b.n	22f78 <process_event+0x394>
   22fd6:	bf00      	nop
   22fd8:	00045538 	.word	0x00045538
   22fdc:	0004558b 	.word	0x0004558b
   22fe0:	000455a2 	.word	0x000455a2
   22fe4:	00022ff1 	.word	0x00022ff1
   22fe8:	0004555e 	.word	0x0004555e
   22fec:	00045573 	.word	0x00045573

00022ff0 <transition_complete>:
{
   22ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ff2:	4604      	mov	r4, r0
   22ff4:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   22ff6:	f100 0614 	add.w	r6, r0, #20
   22ffa:	f04f 0320 	mov.w	r3, #32
   22ffe:	f3ef 8711 	mrs	r7, BASEPRI
   23002:	f383 8811 	msr	BASEPRI, r3
   23006:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2300a:	4630      	mov	r0, r6
   2300c:	f016 fb94 	bl	39738 <z_spin_lock_valid>
   23010:	b968      	cbnz	r0, 2302e <transition_complete+0x3e>
   23012:	237c      	movs	r3, #124	; 0x7c
   23014:	4a0b      	ldr	r2, [pc, #44]	; (23044 <transition_complete+0x54>)
   23016:	490c      	ldr	r1, [pc, #48]	; (23048 <transition_complete+0x58>)
   23018:	480c      	ldr	r0, [pc, #48]	; (2304c <transition_complete+0x5c>)
   2301a:	f019 feac 	bl	3cd76 <printk>
   2301e:	4631      	mov	r1, r6
   23020:	480b      	ldr	r0, [pc, #44]	; (23050 <transition_complete+0x60>)
   23022:	f019 fea8 	bl	3cd76 <printk>
   23026:	217c      	movs	r1, #124	; 0x7c
   23028:	4806      	ldr	r0, [pc, #24]	; (23044 <transition_complete+0x54>)
   2302a:	f01a f958 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   2302e:	4630      	mov	r0, r6
   23030:	f016 fba0 	bl	39774 <z_spin_lock_set_owner>
	process_event(mgr, EVT_COMPLETE, key);
   23034:	463a      	mov	r2, r7
   23036:	4620      	mov	r0, r4
	mgr->last_res = res;
   23038:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   2303a:	2101      	movs	r1, #1
}
   2303c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   23040:	f7ff bdd0 	b.w	22be4 <process_event>
   23044:	00045538 	.word	0x00045538
   23048:	0004555e 	.word	0x0004555e
   2304c:	00044dbf 	.word	0x00044dbf
   23050:	00045573 	.word	0x00045573

00023054 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   23054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23058:	4604      	mov	r4, r0
   2305a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   2305c:	f019 fed7 	bl	3ce0e <validate_args>

	if (rv < 0) {
   23060:	1e05      	subs	r5, r0, #0
   23062:	db5e      	blt.n	23122 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   23064:	f104 0914 	add.w	r9, r4, #20
   23068:	f04f 0320 	mov.w	r3, #32
   2306c:	f3ef 8a11 	mrs	sl, BASEPRI
   23070:	f383 8811 	msr	BASEPRI, r3
   23074:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23078:	4648      	mov	r0, r9
   2307a:	f016 fb5d 	bl	39738 <z_spin_lock_valid>
   2307e:	b968      	cbnz	r0, 2309c <onoff_request+0x48>
   23080:	237c      	movs	r3, #124	; 0x7c
   23082:	4a38      	ldr	r2, [pc, #224]	; (23164 <onoff_request+0x110>)
   23084:	4938      	ldr	r1, [pc, #224]	; (23168 <onoff_request+0x114>)
   23086:	4839      	ldr	r0, [pc, #228]	; (2316c <onoff_request+0x118>)
   23088:	f019 fe75 	bl	3cd76 <printk>
   2308c:	4649      	mov	r1, r9
   2308e:	4838      	ldr	r0, [pc, #224]	; (23170 <onoff_request+0x11c>)
   23090:	f019 fe71 	bl	3cd76 <printk>
   23094:	217c      	movs	r1, #124	; 0x7c
   23096:	4833      	ldr	r0, [pc, #204]	; (23164 <onoff_request+0x110>)
   23098:	f01a f921 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   2309c:	4648      	mov	r0, r9
   2309e:	f016 fb69 	bl	39774 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   230a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   230a6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   230a8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   230aa:	428b      	cmp	r3, r1
   230ac:	f002 0607 	and.w	r6, r2, #7
   230b0:	d050      	beq.n	23154 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   230b2:	2e02      	cmp	r6, #2
   230b4:	d124      	bne.n	23100 <onoff_request+0xac>
	rv = state;
   230b6:	4635      	mov	r5, r6
		/* Increment reference count, notify in exit */
		notify = true;
   230b8:	f04f 0801 	mov.w	r8, #1
		mgr->refs += 1U;
   230bc:	3301      	adds	r3, #1
   230be:	83e3      	strh	r3, [r4, #30]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   230c0:	4648      	mov	r0, r9
   230c2:	f016 fb47 	bl	39754 <z_spin_unlock_valid>
   230c6:	b968      	cbnz	r0, 230e4 <onoff_request+0x90>
   230c8:	23a7      	movs	r3, #167	; 0xa7
   230ca:	4a26      	ldr	r2, [pc, #152]	; (23164 <onoff_request+0x110>)
   230cc:	4929      	ldr	r1, [pc, #164]	; (23174 <onoff_request+0x120>)
   230ce:	4827      	ldr	r0, [pc, #156]	; (2316c <onoff_request+0x118>)
   230d0:	f019 fe51 	bl	3cd76 <printk>
   230d4:	4649      	mov	r1, r9
   230d6:	4828      	ldr	r0, [pc, #160]	; (23178 <onoff_request+0x124>)
   230d8:	f019 fe4d 	bl	3cd76 <printk>
   230dc:	21a7      	movs	r1, #167	; 0xa7
   230de:	4821      	ldr	r0, [pc, #132]	; (23164 <onoff_request+0x110>)
   230e0:	f01a f8fd 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   230e4:	f38a 8811 	msr	BASEPRI, sl
   230e8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   230ec:	f1b8 0f00 	cmp.w	r8, #0
   230f0:	d017      	beq.n	23122 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   230f2:	2300      	movs	r3, #0
   230f4:	4632      	mov	r2, r6
   230f6:	4639      	mov	r1, r7
   230f8:	4620      	mov	r0, r4
   230fa:	f019 fe72 	bl	3cde2 <notify_one>
   230fe:	e010      	b.n	23122 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   23100:	0793      	lsls	r3, r2, #30
   23102:	d001      	beq.n	23108 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   23104:	2e06      	cmp	r6, #6
   23106:	d10f      	bne.n	23128 <onoff_request+0xd4>
	parent->next = child;
   23108:	2300      	movs	r3, #0
   2310a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   2310c:	6863      	ldr	r3, [r4, #4]
   2310e:	b9f3      	cbnz	r3, 2314e <onoff_request+0xfa>
	list->head = node;
   23110:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   23114:	4635      	mov	r5, r6
   23116:	b9fe      	cbnz	r6, 23158 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   23118:	4652      	mov	r2, sl
   2311a:	2102      	movs	r1, #2
   2311c:	4620      	mov	r0, r4
   2311e:	f7ff fd61 	bl	22be4 <process_event>
		}
	}

	return rv;
}
   23122:	4628      	mov	r0, r5
   23124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   23128:	2e05      	cmp	r6, #5
   2312a:	d018      	beq.n	2315e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   2312c:	2e01      	cmp	r6, #1
   2312e:	d00b      	beq.n	23148 <onoff_request+0xf4>
   23130:	4912      	ldr	r1, [pc, #72]	; (2317c <onoff_request+0x128>)
   23132:	480e      	ldr	r0, [pc, #56]	; (2316c <onoff_request+0x118>)
   23134:	f240 13c5 	movw	r3, #453	; 0x1c5
   23138:	4a11      	ldr	r2, [pc, #68]	; (23180 <onoff_request+0x12c>)
   2313a:	f019 fe1c 	bl	3cd76 <printk>
   2313e:	f240 11c5 	movw	r1, #453	; 0x1c5
   23142:	480f      	ldr	r0, [pc, #60]	; (23180 <onoff_request+0x12c>)
   23144:	f01a f8cb 	bl	3d2de <assert_post_action>
		rv = -EIO;
   23148:	f06f 0504 	mvn.w	r5, #4
   2314c:	e004      	b.n	23158 <onoff_request+0x104>
	parent->next = child;
   2314e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   23150:	6067      	str	r7, [r4, #4]
}
   23152:	e7df      	b.n	23114 <onoff_request+0xc0>
		rv = -EAGAIN;
   23154:	f06f 050a 	mvn.w	r5, #10
   23158:	f04f 0800 	mov.w	r8, #0
   2315c:	e7b0      	b.n	230c0 <onoff_request+0x6c>
		rv = -ENOTSUP;
   2315e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   23162:	e7f9      	b.n	23158 <onoff_request+0x104>
   23164:	00045538 	.word	0x00045538
   23168:	0004555e 	.word	0x0004555e
   2316c:	00044dbf 	.word	0x00044dbf
   23170:	00045573 	.word	0x00045573
   23174:	0004558b 	.word	0x0004558b
   23178:	000455a2 	.word	0x000455a2
   2317c:	00045803 	.word	0x00045803
   23180:	00045776 	.word	0x00045776

00023184 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   23184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
   23188:	f240 746c 	movw	r4, #1900	; 0x76c
   2318c:	2500      	movs	r5, #0
	unsigned int m = tm->tm_mon + 1;
   2318e:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   23190:	68c2      	ldr	r2, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   23192:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   23196:	1e53      	subs	r3, r2, #1
   23198:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2319a:	6943      	ldr	r3, [r0, #20]
{
   2319c:	4680      	mov	r8, r0
	int64_t y = 1900 + (int64_t)tm->tm_year;
   2319e:	18e4      	adds	r4, r4, r3
   231a0:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   231a4:	f1b9 0f02 	cmp.w	r9, #2
   231a8:	bf8c      	ite	hi
   231aa:	2300      	movhi	r3, #0
   231ac:	2301      	movls	r3, #1
   231ae:	1ae4      	subs	r4, r4, r3
   231b0:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   231b4:	2c00      	cmp	r4, #0
   231b6:	f175 0300 	sbcs.w	r3, r5, #0
   231ba:	da54      	bge.n	23266 <timeutil_timegm64+0xe2>
   231bc:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   231c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   231c4:	2300      	movs	r3, #0
   231c6:	1820      	adds	r0, r4, r0
   231c8:	f145 31ff 	adc.w	r1, r5, #4294967295
   231cc:	f7f9 fe26 	bl	1ce1c <__aeabi_ldivmod>
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   231d0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
	unsigned int yoe = y - era * 400;
   231d4:	4a27      	ldr	r2, [pc, #156]	; (23274 <timeutil_timegm64+0xf0>)
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   231d6:	4603      	mov	r3, r0
	unsigned int yoe = y - era * 400;
   231d8:	fb02 4200 	mla	r2, r2, r0, r4
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   231dc:	e9d8 0400 	ldrd	r0, r4, [r8]
   231e0:	f8d8 8008 	ldr.w	r8, [r8, #8]
   231e4:	17e5      	asrs	r5, r4, #31
   231e6:	fbcc 4508 	smlal	r4, r5, ip, r8
   231ea:	fba4 ab0c 	umull	sl, fp, r4, ip
   231ee:	fb0c bb05 	mla	fp, ip, r5, fp
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   231f2:	f1b9 0f02 	cmp.w	r9, #2
   231f6:	bf8c      	ite	hi
   231f8:	f06f 0e02 	mvnhi.w	lr, #2
   231fc:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   23200:	eb1a 0a00 	adds.w	sl, sl, r0
   23204:	eb4b 7be0 	adc.w	fp, fp, r0, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23208:	f240 106d 	movw	r0, #365	; 0x16d
   2320c:	0894      	lsrs	r4, r2, #2
   2320e:	fb00 4002 	mla	r0, r0, r2, r4
   23212:	9c01      	ldr	r4, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   23214:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23216:	4420      	add	r0, r4
   23218:	2464      	movs	r4, #100	; 0x64
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   2321a:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   2321e:	fbb2 f4f4 	udiv	r4, r2, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   23222:	2205      	movs	r2, #5
   23224:	fb0e fe09 	mul.w	lr, lr, r9
   23228:	f10e 0e02 	add.w	lr, lr, #2
   2322c:	fbbe fef2 	udiv	lr, lr, r2
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23230:	1b04      	subs	r4, r0, r4
	return era * 146097 + (time_t)doe - 719468;
   23232:	4811      	ldr	r0, [pc, #68]	; (23278 <timeutil_timegm64+0xf4>)
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   23234:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   23236:	fba3 2300 	umull	r2, r3, r3, r0
   2323a:	fb00 3301 	mla	r3, r0, r1, r3
   2323e:	490f      	ldr	r1, [pc, #60]	; (2327c <timeutil_timegm64+0xf8>)
   23240:	1856      	adds	r6, r2, r1
	time += 86400LL * ndays;
   23242:	490f      	ldr	r1, [pc, #60]	; (23280 <timeutil_timegm64+0xfc>)
	return era * 146097 + (time_t)doe - 719468;
   23244:	f143 37ff 	adc.w	r7, r3, #4294967295
   23248:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   2324c:	fba6 2301 	umull	r2, r3, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   23250:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   23254:	fb01 3307 	mla	r3, r1, r7, r3

	return time;
}
   23258:	eb12 000a 	adds.w	r0, r2, sl
   2325c:	eb43 010b 	adc.w	r1, r3, fp
   23260:	b003      	add	sp, #12
   23262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   23266:	f44f 72c8 	mov.w	r2, #400	; 0x190
   2326a:	2300      	movs	r3, #0
   2326c:	4620      	mov	r0, r4
   2326e:	4629      	mov	r1, r5
   23270:	e7ac      	b.n	231cc <timeutil_timegm64+0x48>
   23272:	bf00      	nop
   23274:	fffffe70 	.word	0xfffffe70
   23278:	00023ab1 	.word	0x00023ab1
   2327c:	fff50594 	.word	0xfff50594
   23280:	00015180 	.word	0x00015180

00023284 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   23284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23288:	4605      	mov	r5, r0
		if (work == NULL) {
			continue;
		}

		handler = work->handler;
		__ASSERT(handler != NULL, "handler must be provided");
   2328a:	4e17      	ldr	r6, [pc, #92]	; (232e8 <z_work_q_main+0x64>)
   2328c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 232f0 <z_work_q_main+0x6c>
   23290:	f8df 9060 	ldr.w	r9, [pc, #96]	; 232f4 <z_work_q_main+0x70>
	return z_impl_k_queue_get(queue, timeout);
   23294:	f04f 32ff 	mov.w	r2, #4294967295
   23298:	f04f 33ff 	mov.w	r3, #4294967295
   2329c:	4628      	mov	r0, r5
   2329e:	f014 fd79 	bl	37d94 <z_impl_k_queue_get>
		if (work == NULL) {
   232a2:	4604      	mov	r4, r0
   232a4:	2800      	cmp	r0, #0
   232a6:	d0f5      	beq.n	23294 <z_work_q_main+0x10>
		handler = work->handler;
   232a8:	6847      	ldr	r7, [r0, #4]
		__ASSERT(handler != NULL, "handler must be provided");
   232aa:	b967      	cbnz	r7, 232c6 <z_work_q_main+0x42>
   232ac:	4641      	mov	r1, r8
   232ae:	231c      	movs	r3, #28
   232b0:	4632      	mov	r2, r6
   232b2:	4648      	mov	r0, r9
   232b4:	f019 fd5f 	bl	3cd76 <printk>
   232b8:	480c      	ldr	r0, [pc, #48]	; (232ec <z_work_q_main+0x68>)
   232ba:	f019 fd5c 	bl	3cd76 <printk>
   232be:	211c      	movs	r1, #28
   232c0:	4630      	mov	r0, r6
   232c2:	f01a f80c 	bl	3d2de <assert_post_action>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   232c6:	f104 0308 	add.w	r3, r4, #8
   232ca:	e8d3 2fef 	ldaex	r2, [r3]
   232ce:	f022 0101 	bic.w	r1, r2, #1
   232d2:	e8c3 1fe0 	stlex	r0, r1, [r3]
   232d6:	2800      	cmp	r0, #0
   232d8:	d1f7      	bne.n	232ca <z_work_q_main+0x46>

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   232da:	07d3      	lsls	r3, r2, #31
   232dc:	d501      	bpl.n	232e2 <z_work_q_main+0x5e>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   232de:	4620      	mov	r0, r4
   232e0:	47b8      	blx	r7
	z_impl_k_yield();
   232e2:	f015 fe5b 	bl	38f9c <z_impl_k_yield>
   232e6:	e7d5      	b.n	23294 <z_work_q_main+0x10>
   232e8:	00045819 	.word	0x00045819
   232ec:	00045853 	.word	0x00045853
   232f0:	0004583c 	.word	0x0004583c
   232f4:	00044dbf 	.word	0x00044dbf

000232f8 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   232f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   232fa:	460e      	mov	r6, r1
   232fc:	2900      	cmp	r1, #0
   232fe:	d043      	beq.n	23388 <sys_heap_free+0x90>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   23300:	6805      	ldr	r5, [r0, #0]
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23302:	2201      	movs	r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   23304:	68ab      	ldr	r3, [r5, #8]
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23306:	4628      	mov	r0, r5
	return big_heap(h) ? 8 : 4;
   23308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2330c:	bf2c      	ite	cs
   2330e:	2408      	movcs	r4, #8
   23310:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23312:	1b0c      	subs	r4, r1, r4
   23314:	1b64      	subs	r4, r4, r5
   23316:	08e4      	lsrs	r4, r4, #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23318:	4621      	mov	r1, r4
   2331a:	f019 fdb8 	bl	3ce8e <chunk_field>

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   2331e:	07c3      	lsls	r3, r0, #31
   23320:	d40d      	bmi.n	2333e <sys_heap_free+0x46>
   23322:	239a      	movs	r3, #154	; 0x9a
   23324:	4a19      	ldr	r2, [pc, #100]	; (2338c <sys_heap_free+0x94>)
   23326:	491a      	ldr	r1, [pc, #104]	; (23390 <sys_heap_free+0x98>)
   23328:	481a      	ldr	r0, [pc, #104]	; (23394 <sys_heap_free+0x9c>)
   2332a:	f019 fd24 	bl	3cd76 <printk>
   2332e:	4631      	mov	r1, r6
   23330:	4819      	ldr	r0, [pc, #100]	; (23398 <sys_heap_free+0xa0>)
   23332:	f019 fd20 	bl	3cd76 <printk>
   23336:	219a      	movs	r1, #154	; 0x9a
   23338:	4814      	ldr	r0, [pc, #80]	; (2338c <sys_heap_free+0x94>)
   2333a:	f019 ffd0 	bl	3d2de <assert_post_action>
	return c + chunk_size(h, c);
   2333e:	4621      	mov	r1, r4
   23340:	4628      	mov	r0, r5
   23342:	f019 fdba 	bl	3ceba <chunk_size>
   23346:	1827      	adds	r7, r4, r0
	return c - chunk_field(h, c, LEFT_SIZE);
   23348:	2200      	movs	r2, #0
   2334a:	4639      	mov	r1, r7
   2334c:	4628      	mov	r0, r5
   2334e:	f019 fd9e 	bl	3ce8e <chunk_field>
   23352:	1a38      	subs	r0, r7, r0
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   23354:	4284      	cmp	r4, r0
   23356:	d00d      	beq.n	23374 <sys_heap_free+0x7c>
   23358:	23a2      	movs	r3, #162	; 0xa2
   2335a:	4a0c      	ldr	r2, [pc, #48]	; (2338c <sys_heap_free+0x94>)
   2335c:	490f      	ldr	r1, [pc, #60]	; (2339c <sys_heap_free+0xa4>)
   2335e:	480d      	ldr	r0, [pc, #52]	; (23394 <sys_heap_free+0x9c>)
   23360:	f019 fd09 	bl	3cd76 <printk>
   23364:	4631      	mov	r1, r6
   23366:	480e      	ldr	r0, [pc, #56]	; (233a0 <sys_heap_free+0xa8>)
   23368:	f019 fd05 	bl	3cd76 <printk>
   2336c:	21a2      	movs	r1, #162	; 0xa2
   2336e:	4807      	ldr	r0, [pc, #28]	; (2338c <sys_heap_free+0x94>)
   23370:	f019 ffb5 	bl	3d2de <assert_post_action>
		 "corrupted heap bounds (buffer overflow?) for memory at %p",
		 mem);

	set_chunk_used(h, c, false);
   23374:	4621      	mov	r1, r4
   23376:	4628      	mov	r0, r5
   23378:	2200      	movs	r2, #0
   2337a:	f019 fda4 	bl	3cec6 <set_chunk_used>
	free_chunk(h, c);
   2337e:	4621      	mov	r1, r4
}
   23380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   23384:	f019 bee5 	b.w	3d152 <free_chunk>
}
   23388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2338a:	bf00      	nop
   2338c:	0004586e 	.word	0x0004586e
   23390:	0004588f 	.word	0x0004588f
   23394:	00044dbf 	.word	0x00044dbf
   23398:	000458a0 	.word	0x000458a0
   2339c:	000458d8 	.word	0x000458d8
   233a0:	000458fe 	.word	0x000458fe

000233a4 <sys_heap_aligned_alloc>:
	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   233a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;

	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   233a8:	f101 39ff 	add.w	r9, r1, #4294967295
   233ac:	ea19 0f01 	tst.w	r9, r1
{
   233b0:	4680      	mov	r8, r0
   233b2:	460f      	mov	r7, r1
   233b4:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   233b6:	6805      	ldr	r5, [r0, #0]
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   233b8:	d00c      	beq.n	233d4 <sys_heap_aligned_alloc+0x30>
   233ba:	4934      	ldr	r1, [pc, #208]	; (2348c <sys_heap_aligned_alloc+0xe8>)
   233bc:	23fc      	movs	r3, #252	; 0xfc
   233be:	4a34      	ldr	r2, [pc, #208]	; (23490 <sys_heap_aligned_alloc+0xec>)
   233c0:	4834      	ldr	r0, [pc, #208]	; (23494 <sys_heap_aligned_alloc+0xf0>)
   233c2:	f019 fcd8 	bl	3cd76 <printk>
   233c6:	4834      	ldr	r0, [pc, #208]	; (23498 <sys_heap_aligned_alloc+0xf4>)
   233c8:	f019 fcd5 	bl	3cd76 <printk>
   233cc:	21fc      	movs	r1, #252	; 0xfc
   233ce:	4830      	ldr	r0, [pc, #192]	; (23490 <sys_heap_aligned_alloc+0xec>)
   233d0:	f019 ff85 	bl	3d2de <assert_post_action>
	return big_heap(h) ? 8 : 4;
   233d4:	68aa      	ldr	r2, [r5, #8]
   233d6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   233da:	bf2c      	ite	cs
   233dc:	2308      	movcs	r3, #8
   233de:	2304      	movcc	r3, #4

	if (align <= chunk_header_bytes(h)) {
   233e0:	429f      	cmp	r7, r3
   233e2:	d805      	bhi.n	233f0 <sys_heap_aligned_alloc+0x4c>
		return sys_heap_alloc(heap, bytes);
   233e4:	4621      	mov	r1, r4
   233e6:	4640      	mov	r0, r8
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   233e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		return sys_heap_alloc(heap, bytes);
   233ec:	f019 bef5 	b.w	3d1da <sys_heap_alloc>
	if (bytes == 0 || size_too_big(h, bytes)) {
   233f0:	b91c      	cbnz	r4, 233fa <sys_heap_aligned_alloc+0x56>
		return NULL;
   233f2:	2600      	movs	r6, #0
}
   233f4:	4630      	mov	r0, r6
   233f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (bytes == 0 || size_too_big(h, bytes)) {
   233fa:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   233fe:	d9f8      	bls.n	233f2 <sys_heap_aligned_alloc+0x4e>
		bytes_to_chunksz(h, bytes + align - chunk_header_bytes(h));
   23400:	1939      	adds	r1, r7, r4
   23402:	1ac9      	subs	r1, r1, r3
   23404:	4628      	mov	r0, r5
   23406:	f019 fd7a 	bl	3cefe <bytes_to_chunksz>
   2340a:	4601      	mov	r1, r0
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2340c:	4628      	mov	r0, r5
   2340e:	f019 fe18 	bl	3d042 <alloc_chunk>
	if (c0 == 0) {
   23412:	4680      	mov	r8, r0
   23414:	2800      	cmp	r0, #0
   23416:	d0ec      	beq.n	233f2 <sys_heap_aligned_alloc+0x4e>
   23418:	68ab      	ldr	r3, [r5, #8]
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   2341a:	427f      	negs	r7, r7
   2341c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23420:	bf2c      	ite	cs
   23422:	2308      	movcs	r3, #8
   23424:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   23426:	eb03 06c0 	add.w	r6, r3, r0, lsl #3
   2342a:	442e      	add	r6, r5
	uint8_t *mem = (uint8_t *) ROUND_UP(chunk_mem(h, c0), align);
   2342c:	444e      	add	r6, r9
   2342e:	403e      	ands	r6, r7
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23430:	4434      	add	r4, r6
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23432:	1af3      	subs	r3, r6, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23434:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23436:	1b5b      	subs	r3, r3, r5
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23438:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2343c:	1b64      	subs	r4, r4, r5
	if (c > c0) {
   2343e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23442:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   23446:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2344a:	d208      	bcs.n	2345e <sys_heap_aligned_alloc+0xba>
		split_chunks(h, c0, c);
   2344c:	4601      	mov	r1, r0
   2344e:	463a      	mov	r2, r7
   23450:	4628      	mov	r0, r5
   23452:	f019 fd89 	bl	3cf68 <split_chunks>
		free_list_add(h, c0);
   23456:	4641      	mov	r1, r8
   23458:	4628      	mov	r0, r5
   2345a:	f019 fe35 	bl	3d0c8 <free_list_add>
	return c + chunk_size(h, c);
   2345e:	4639      	mov	r1, r7
   23460:	4628      	mov	r0, r5
   23462:	f019 fd2a 	bl	3ceba <chunk_size>
   23466:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   23468:	4284      	cmp	r4, r0
   2346a:	d208      	bcs.n	2347e <sys_heap_aligned_alloc+0xda>
		split_chunks(h, c, c_end);
   2346c:	4639      	mov	r1, r7
   2346e:	4628      	mov	r0, r5
   23470:	4622      	mov	r2, r4
   23472:	f019 fd79 	bl	3cf68 <split_chunks>
		free_list_add(h, c_end);
   23476:	4621      	mov	r1, r4
   23478:	4628      	mov	r0, r5
   2347a:	f019 fe25 	bl	3d0c8 <free_list_add>
	set_chunk_used(h, c, true);
   2347e:	2201      	movs	r2, #1
   23480:	4639      	mov	r1, r7
   23482:	4628      	mov	r0, r5
   23484:	f019 fd1f 	bl	3cec6 <set_chunk_used>
	return mem;
   23488:	e7b4      	b.n	233f4 <sys_heap_aligned_alloc+0x50>
   2348a:	bf00      	nop
   2348c:	0004593a 	.word	0x0004593a
   23490:	0004586e 	.word	0x0004586e
   23494:	00044dbf 	.word	0x00044dbf
   23498:	00045955 	.word	0x00045955

0002349c <sys_heap_init>:
}

static inline size_t heap_footer_bytes(size_t size)
{
	return big_heap_bytes(size) ? 8 : 4;
   2349c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   234a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234a2:	4607      	mov	r7, r0
   234a4:	460d      	mov	r5, r1
   234a6:	4616      	mov	r6, r2
   234a8:	d212      	bcs.n	234d0 <sys_heap_init+0x34>
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   234aa:	2a04      	cmp	r2, #4
   234ac:	d80e      	bhi.n	234cc <sys_heap_init+0x30>
   234ae:	4943      	ldr	r1, [pc, #268]	; (235bc <sys_heap_init+0x120>)
   234b0:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   234b4:	4a42      	ldr	r2, [pc, #264]	; (235c0 <sys_heap_init+0x124>)
   234b6:	4843      	ldr	r0, [pc, #268]	; (235c4 <sys_heap_init+0x128>)
   234b8:	f019 fc5d 	bl	3cd76 <printk>
   234bc:	4842      	ldr	r0, [pc, #264]	; (235c8 <sys_heap_init+0x12c>)
   234be:	f019 fc5a 	bl	3cd76 <printk>
   234c2:	f44f 71b6 	mov.w	r1, #364	; 0x16c
   234c6:	483e      	ldr	r0, [pc, #248]	; (235c0 <sys_heap_init+0x124>)
   234c8:	f019 ff09 	bl	3d2de <assert_post_action>
   234cc:	2204      	movs	r2, #4
   234ce:	e000      	b.n	234d2 <sys_heap_init+0x36>
   234d0:	2208      	movs	r2, #8
	bytes -= heap_footer_bytes(bytes);
   234d2:	1ab6      	subs	r6, r6, r2

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   234d4:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   234d6:	4435      	add	r5, r6
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   234d8:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   234dc:	f025 0507 	bic.w	r5, r5, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   234e0:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   234e2:	2d17      	cmp	r5, #23
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   234e4:	ea4f 06d5 	mov.w	r6, r5, lsr #3
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   234e8:	d80e      	bhi.n	23508 <sys_heap_init+0x6c>
   234ea:	4938      	ldr	r1, [pc, #224]	; (235cc <sys_heap_init+0x130>)
   234ec:	f240 1375 	movw	r3, #373	; 0x175
   234f0:	4a33      	ldr	r2, [pc, #204]	; (235c0 <sys_heap_init+0x124>)
   234f2:	4834      	ldr	r0, [pc, #208]	; (235c4 <sys_heap_init+0x128>)
   234f4:	f019 fc3f 	bl	3cd76 <printk>
   234f8:	4833      	ldr	r0, [pc, #204]	; (235c8 <sys_heap_init+0x12c>)
   234fa:	f019 fc3c 	bl	3cd76 <printk>
   234fe:	f240 1175 	movw	r1, #373	; 0x175
   23502:	482f      	ldr	r0, [pc, #188]	; (235c0 <sys_heap_init+0x124>)
   23504:	f019 feeb 	bl	3d2de <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   23508:	2200      	movs	r2, #0
   2350a:	2300      	movs	r3, #0
	heap->heap = h;
   2350c:	603c      	str	r4, [r7, #0]
	h->chunk0_hdr_area = 0;
   2350e:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   23512:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   23514:	4631      	mov	r1, r6
	h->avail_buckets = 0;
   23516:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   23518:	4620      	mov	r0, r4
	h->len = buf_sz;
   2351a:	60a6      	str	r6, [r4, #8]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   2351c:	f019 fcf9 	bl	3cf12 <bucket_idx>
	return chunksz(chunk_header_bytes(h) + bytes);
}

static inline int min_chunk_size(struct z_heap *h)
{
	return bytes_to_chunksz(h, 1);
   23520:	2101      	movs	r1, #1
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23522:	0085      	lsls	r5, r0, #2
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   23524:	1c47      	adds	r7, r0, #1
   23526:	4620      	mov	r0, r4
   23528:	f019 fce9 	bl	3cefe <bytes_to_chunksz>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2352c:	351b      	adds	r5, #27
   2352e:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");
   23530:	4428      	add	r0, r5
   23532:	42b0      	cmp	r0, r6
   23534:	d30e      	bcc.n	23554 <sys_heap_init+0xb8>
   23536:	4926      	ldr	r1, [pc, #152]	; (235d0 <sys_heap_init+0x134>)
   23538:	f240 1381 	movw	r3, #385	; 0x181
   2353c:	4a20      	ldr	r2, [pc, #128]	; (235c0 <sys_heap_init+0x124>)
   2353e:	4821      	ldr	r0, [pc, #132]	; (235c4 <sys_heap_init+0x128>)
   23540:	f019 fc19 	bl	3cd76 <printk>
   23544:	4820      	ldr	r0, [pc, #128]	; (235c8 <sys_heap_init+0x12c>)
   23546:	f019 fc16 	bl	3cd76 <printk>
   2354a:	f240 1181 	movw	r1, #385	; 0x181
   2354e:	481c      	ldr	r0, [pc, #112]	; (235c0 <sys_heap_init+0x124>)
   23550:	f019 fec5 	bl	3d2de <assert_post_action>
	return big_heap_bytes(size) ? 8 : 4;
   23554:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   23556:	4619      	mov	r1, r3
   23558:	f104 0210 	add.w	r2, r4, #16
	for (int i = 0; i < nb_buckets; i++) {
   2355c:	42bb      	cmp	r3, r7
   2355e:	db29      	blt.n	235b4 <sys_heap_init+0x118>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   23560:	462a      	mov	r2, r5
   23562:	4620      	mov	r0, r4
   23564:	2100      	movs	r1, #0
   23566:	f019 fcc6 	bl	3cef6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   2356a:	1b77      	subs	r7, r6, r5
	set_chunk_used(h, 0, true);
   2356c:	4620      	mov	r0, r4
   2356e:	2201      	movs	r2, #1
   23570:	2100      	movs	r1, #0
   23572:	f019 fca8 	bl	3cec6 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   23576:	463a      	mov	r2, r7
   23578:	4629      	mov	r1, r5
   2357a:	f019 fcbc 	bl	3cef6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2357e:	462b      	mov	r3, r5
   23580:	4629      	mov	r1, r5
   23582:	4620      	mov	r0, r4
   23584:	2200      	movs	r2, #0
   23586:	f019 fc8d 	bl	3cea4 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   2358a:	4631      	mov	r1, r6
   2358c:	4620      	mov	r0, r4
   2358e:	2200      	movs	r2, #0
   23590:	f019 fcb1 	bl	3cef6 <set_chunk_size>
   23594:	463b      	mov	r3, r7
   23596:	4631      	mov	r1, r6
   23598:	4620      	mov	r0, r4
   2359a:	2200      	movs	r2, #0
   2359c:	f019 fc82 	bl	3cea4 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   235a0:	4631      	mov	r1, r6
   235a2:	4620      	mov	r0, r4
   235a4:	2201      	movs	r2, #1
   235a6:	f019 fc8e 	bl	3cec6 <set_chunk_used>

	free_list_add(h, chunk0_size);
   235aa:	4629      	mov	r1, r5
}
   235ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   235b0:	f019 bd8a 	b.w	3d0c8 <free_list_add>
		h->buckets[i].next = 0;
   235b4:	f842 1b04 	str.w	r1, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   235b8:	3301      	adds	r3, #1
   235ba:	e7cf      	b.n	2355c <sys_heap_init+0xc0>
   235bc:	00045972 	.word	0x00045972
   235c0:	0004586e 	.word	0x0004586e
   235c4:	00044dbf 	.word	0x00044dbf
   235c8:	00045993 	.word	0x00045993
   235cc:	000459ac 	.word	0x000459ac
   235d0:	000459d4 	.word	0x000459d4

000235d4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   235d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   235d6:	4602      	mov	r2, r0
   235d8:	6801      	ldr	r1, [r0, #0]
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
		val = 10U * val + *sp++ - '0';
   235da:	270a      	movs	r7, #10
	size_t val = 0;
   235dc:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   235de:	4e07      	ldr	r6, [pc, #28]	; (235fc <extract_decimal+0x28>)
   235e0:	460c      	mov	r4, r1
   235e2:	7823      	ldrb	r3, [r4, #0]
   235e4:	3101      	adds	r1, #1
   235e6:	5d9d      	ldrb	r5, [r3, r6]
   235e8:	076d      	lsls	r5, r5, #29
   235ea:	d401      	bmi.n	235f0 <extract_decimal+0x1c>
	}
	*str = sp;
   235ec:	6014      	str	r4, [r2, #0]
	return val;
}
   235ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   235f0:	fb07 3300 	mla	r3, r7, r0, r3
   235f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   235f8:	e7f2      	b.n	235e0 <extract_decimal+0xc>
   235fa:	bf00      	nop
   235fc:	0004c29f 	.word	0x0004c29f

00023600 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   23600:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23604:	4614      	mov	r4, r2
   23606:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   23608:	78d3      	ldrb	r3, [r2, #3]
   2360a:	4a24      	ldr	r2, [pc, #144]	; (2369c <encode_uint+0x9c>)
	switch (specifier) {
   2360c:	2b6f      	cmp	r3, #111	; 0x6f
   2360e:	f813 a002 	ldrb.w	sl, [r3, r2]
{
   23612:	4606      	mov	r6, r0
   23614:	f00a 0203 	and.w	r2, sl, #3
   23618:	460f      	mov	r7, r1
   2361a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   2361c:	d02d      	beq.n	2367a <encode_uint+0x7a>
   2361e:	d828      	bhi.n	23672 <encode_uint+0x72>
		return 16;
   23620:	2b58      	cmp	r3, #88	; 0x58
   23622:	bf14      	ite	ne
   23624:	250a      	movne	r5, #10
   23626:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   23628:	46aa      	mov	sl, r5
   2362a:	f04f 0b00 	mov.w	fp, #0
	char *bp = bps + (bpe - bps);
   2362e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
   23632:	4652      	mov	r2, sl
   23634:	465b      	mov	r3, fp
   23636:	4630      	mov	r0, r6
   23638:	4639      	mov	r1, r7
   2363a:	f7f9 fc3f 	bl	1cebc <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   2363e:	2a09      	cmp	r2, #9
   23640:	b2d3      	uxtb	r3, r2
   23642:	d81f      	bhi.n	23684 <encode_uint+0x84>
   23644:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   23646:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23648:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   2364a:	bf08      	it	eq
   2364c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2364e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   23652:	d301      	bcc.n	23658 <encode_uint+0x58>
   23654:	45c8      	cmp	r8, r9
   23656:	d812      	bhi.n	2367e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   23658:	7823      	ldrb	r3, [r4, #0]
   2365a:	069b      	lsls	r3, r3, #26
   2365c:	d505      	bpl.n	2366a <encode_uint+0x6a>
		if (radix == 8) {
   2365e:	2d08      	cmp	r5, #8
   23660:	d116      	bne.n	23690 <encode_uint+0x90>
			conv->altform_0 = true;
   23662:	78a3      	ldrb	r3, [r4, #2]
   23664:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   23668:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
   2366a:	4640      	mov	r0, r8
   2366c:	b003      	add	sp, #12
   2366e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   23672:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   23676:	2b70      	cmp	r3, #112	; 0x70
   23678:	e7d3      	b.n	23622 <encode_uint+0x22>
	switch (specifier) {
   2367a:	2508      	movs	r5, #8
   2367c:	e7d4      	b.n	23628 <encode_uint+0x28>
		value /= radix;
   2367e:	4606      	mov	r6, r0
   23680:	460f      	mov	r7, r1
   23682:	e7d6      	b.n	23632 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   23684:	9a01      	ldr	r2, [sp, #4]
   23686:	2a01      	cmp	r2, #1
   23688:	bf0c      	ite	eq
   2368a:	3337      	addeq	r3, #55	; 0x37
   2368c:	3357      	addne	r3, #87	; 0x57
   2368e:	e7da      	b.n	23646 <encode_uint+0x46>
		} else if (radix == 16) {
   23690:	2d10      	cmp	r5, #16
   23692:	d1ea      	bne.n	2366a <encode_uint+0x6a>
			conv->altform_0c = true;
   23694:	78a3      	ldrb	r3, [r4, #2]
   23696:	f043 0310 	orr.w	r3, r3, #16
   2369a:	e7e5      	b.n	23668 <encode_uint+0x68>
   2369c:	0004c29f 	.word	0x0004c29f

000236a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   236a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236a4:	4688      	mov	r8, r1
   236a6:	4691      	mov	r9, r2
   236a8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   236aa:	2500      	movs	r5, #0
{
   236ac:	b0a3      	sub	sp, #140	; 0x8c
   236ae:	9006      	str	r0, [sp, #24]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   236b0:	f899 0000 	ldrb.w	r0, [r9]
   236b4:	b910      	cbnz	r0, 236bc <cbvprintf+0x1c>
			OUTC(' ');
			--width;
		}
	}

	return count;
   236b6:	4628      	mov	r0, r5
   236b8:	f000 bdae 	b.w	24218 <cbvprintf+0xb78>
		if (*fp != '%') {
   236bc:	f109 0301 	add.w	r3, r9, #1
   236c0:	2825      	cmp	r0, #37	; 0x25
   236c2:	9307      	str	r3, [sp, #28]
   236c4:	d007      	beq.n	236d6 <cbvprintf+0x36>
			OUTC(*fp++);
   236c6:	4641      	mov	r1, r8
			OUTC('%');
   236c8:	9b06      	ldr	r3, [sp, #24]
   236ca:	4798      	blx	r3
   236cc:	2800      	cmp	r0, #0
   236ce:	f2c0 85a3 	blt.w	24218 <cbvprintf+0xb78>
   236d2:	3501      	adds	r5, #1
		if (bps == NULL) {
   236d4:	e224      	b.n	23b20 <cbvprintf+0x480>
		} state = {
   236d6:	2218      	movs	r2, #24
   236d8:	2100      	movs	r1, #0
   236da:	a814      	add	r0, sp, #80	; 0x50
   236dc:	f01e faff 	bl	41cde <memset>
	if (*sp == '%') {
   236e0:	f899 3001 	ldrb.w	r3, [r9, #1]
   236e4:	2b25      	cmp	r3, #37	; 0x25
   236e6:	d059      	beq.n	2379c <cbvprintf+0xfc>
   236e8:	9a07      	ldr	r2, [sp, #28]
   236ea:	4616      	mov	r6, r2
		switch (*sp) {
   236ec:	f812 3b01 	ldrb.w	r3, [r2], #1
   236f0:	2b2b      	cmp	r3, #43	; 0x2b
   236f2:	f000 808b 	beq.w	2380c <cbvprintf+0x16c>
   236f6:	d879      	bhi.n	237ec <cbvprintf+0x14c>
   236f8:	2b20      	cmp	r3, #32
   236fa:	f000 808c 	beq.w	23816 <cbvprintf+0x176>
   236fe:	2b23      	cmp	r3, #35	; 0x23
   23700:	f000 808e 	beq.w	23820 <cbvprintf+0x180>
	if (conv->flag_zero && conv->flag_dash) {
   23704:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23708:	f003 0244 	and.w	r2, r3, #68	; 0x44
   2370c:	2a44      	cmp	r2, #68	; 0x44
   2370e:	d103      	bne.n	23718 <cbvprintf+0x78>
		conv->flag_zero = false;
   23710:	f36f 1386 	bfc	r3, #6, #1
   23714:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	conv->width_present = true;
   23718:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   2371c:	9612      	str	r6, [sp, #72]	; 0x48
   2371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   23722:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	if (*sp == '*') {
   23726:	7833      	ldrb	r3, [r6, #0]
   23728:	2b2a      	cmp	r3, #42	; 0x2a
   2372a:	d17e      	bne.n	2382a <cbvprintf+0x18a>
		conv->width_star = true;
   2372c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   23730:	f043 0301 	orr.w	r3, r3, #1
   23734:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		return ++sp;
   23738:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   2373a:	9312      	str	r3, [sp, #72]	; 0x48
	conv->prec_present = (*sp == '.');
   2373c:	781a      	ldrb	r2, [r3, #0]
   2373e:	2a2e      	cmp	r2, #46	; 0x2e
   23740:	bf0c      	ite	eq
   23742:	2101      	moveq	r1, #1
   23744:	2100      	movne	r1, #0
   23746:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   2374a:	f361 0241 	bfi	r2, r1, #1, #1
   2374e:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	if (!conv->prec_present) {
   23752:	d10b      	bne.n	2376c <cbvprintf+0xcc>
	++sp;
   23754:	1c5a      	adds	r2, r3, #1
   23756:	9212      	str	r2, [sp, #72]	; 0x48
	if (*sp == '*') {
   23758:	785a      	ldrb	r2, [r3, #1]
   2375a:	2a2a      	cmp	r2, #42	; 0x2a
   2375c:	d17b      	bne.n	23856 <cbvprintf+0x1b6>
		conv->prec_star = true;
   2375e:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
		return ++sp;
   23762:	3302      	adds	r3, #2
		conv->prec_star = true;
   23764:	f042 0204 	orr.w	r2, r2, #4
   23768:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
	switch (*sp) {
   2376c:	461a      	mov	r2, r3
   2376e:	f812 0b01 	ldrb.w	r0, [r2], #1
   23772:	286c      	cmp	r0, #108	; 0x6c
   23774:	f000 80cf 	beq.w	23916 <cbvprintf+0x276>
   23778:	d87d      	bhi.n	23876 <cbvprintf+0x1d6>
   2377a:	2868      	cmp	r0, #104	; 0x68
   2377c:	f000 8084 	beq.w	23888 <cbvprintf+0x1e8>
   23780:	286a      	cmp	r0, #106	; 0x6a
   23782:	f000 80d2 	beq.w	2392a <cbvprintf+0x28a>
   23786:	284c      	cmp	r0, #76	; 0x4c
   23788:	f000 80d6 	beq.w	23938 <cbvprintf+0x298>
		conv->length_mod = LENGTH_NONE;
   2378c:	f89d 2059 	ldrb.w	r2, [sp, #89]	; 0x59
   23790:	f36f 02c6 	bfc	r2, #3, #4
   23794:	f88d 2059 	strb.w	r2, [sp, #89]	; 0x59
		break;
   23798:	461a      	mov	r2, r3
   2379a:	e080      	b.n	2389e <cbvprintf+0x1fe>
		conv->specifier = *sp++;
   2379c:	f109 0202 	add.w	r2, r9, #2
   237a0:	9207      	str	r2, [sp, #28]
   237a2:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
		if (conv->width_star) {
   237a6:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   237aa:	07de      	lsls	r6, r3, #31
   237ac:	f140 816d 	bpl.w	23a8a <cbvprintf+0x3ea>
			width = va_arg(ap, int);
   237b0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (width < 0) {
   237b4:	f1ba 0f00 	cmp.w	sl, #0
   237b8:	da07      	bge.n	237ca <cbvprintf+0x12a>
				conv->flag_dash = true;
   237ba:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
				width = -width;
   237be:	f1ca 0a00 	rsb	sl, sl, #0
				conv->flag_dash = true;
   237c2:	f042 0204 	orr.w	r2, r2, #4
   237c6:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
		if (conv->prec_star) {
   237ca:	0758      	lsls	r0, r3, #29
   237cc:	f140 8166 	bpl.w	23a9c <cbvprintf+0x3fc>
			int arg = va_arg(ap, int);
   237d0:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   237d4:	2f00      	cmp	r7, #0
   237d6:	f280 8165 	bge.w	23aa4 <cbvprintf+0x404>
				conv->prec_present = false;
   237da:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   237de:	f36f 0341 	bfc	r3, #1, #1
   237e2:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
		int precision = -1;
   237e6:	f04f 37ff 	mov.w	r7, #4294967295
   237ea:	e15b      	b.n	23aa4 <cbvprintf+0x404>
		switch (*sp) {
   237ec:	2b2d      	cmp	r3, #45	; 0x2d
   237ee:	d006      	beq.n	237fe <cbvprintf+0x15e>
   237f0:	2b30      	cmp	r3, #48	; 0x30
   237f2:	d187      	bne.n	23704 <cbvprintf+0x64>
			conv->flag_zero = true;
   237f4:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   237f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   237fc:	e003      	b.n	23806 <cbvprintf+0x166>
			conv->flag_dash = true;
   237fe:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23802:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   23806:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
			break;
   2380a:	e76e      	b.n	236ea <cbvprintf+0x4a>
			conv->flag_plus = true;
   2380c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23810:	f043 0308 	orr.w	r3, r3, #8
   23814:	e7f7      	b.n	23806 <cbvprintf+0x166>
			conv->flag_space = true;
   23816:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   2381a:	f043 0310 	orr.w	r3, r3, #16
   2381e:	e7f2      	b.n	23806 <cbvprintf+0x166>
			conv->flag_hash = true;
   23820:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23824:	f043 0320 	orr.w	r3, r3, #32
   23828:	e7ed      	b.n	23806 <cbvprintf+0x166>
	size_t width = extract_decimal(&sp);
   2382a:	a812      	add	r0, sp, #72	; 0x48
   2382c:	f7ff fed2 	bl	235d4 <extract_decimal>
	if (sp != wp) {
   23830:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23832:	42b3      	cmp	r3, r6
   23834:	d081      	beq.n	2373a <cbvprintf+0x9a>
		conv->unsupported |= ((conv->width_value < 0)
   23836:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
		conv->width_value = width;
   2383a:	9017      	str	r0, [sp, #92]	; 0x5c
		conv->unsupported |= ((conv->width_value < 0)
   2383c:	f3c6 0140 	ubfx	r1, r6, #1, #1
   23840:	ea41 70d0 	orr.w	r0, r1, r0, lsr #31
   23844:	0042      	lsls	r2, r0, #1
   23846:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2384a:	f006 067d 	and.w	r6, r6, #125	; 0x7d
   2384e:	4332      	orrs	r2, r6
   23850:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
   23854:	e771      	b.n	2373a <cbvprintf+0x9a>
	size_t prec = extract_decimal(&sp);
   23856:	a812      	add	r0, sp, #72	; 0x48
   23858:	f7ff febc 	bl	235d4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   2385c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
	conv->prec_value = prec;
   23860:	9018      	str	r0, [sp, #96]	; 0x60
	conv->unsupported |= ((conv->prec_value < 0)
   23862:	f3c3 0240 	ubfx	r2, r3, #1, #1
   23866:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   2386a:	f360 0341 	bfi	r3, r0, #1, #1
   2386e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	return sp;
   23872:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23874:	e77a      	b.n	2376c <cbvprintf+0xcc>
	switch (*sp) {
   23876:	2874      	cmp	r0, #116	; 0x74
   23878:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   2387c:	d059      	beq.n	23932 <cbvprintf+0x292>
   2387e:	287a      	cmp	r0, #122	; 0x7a
   23880:	d184      	bne.n	2378c <cbvprintf+0xec>
		conv->length_mod = LENGTH_Z;
   23882:	460b      	mov	r3, r1
   23884:	2106      	movs	r1, #6
   23886:	e041      	b.n	2390c <cbvprintf+0x26c>
		if (*++sp == 'h') {
   23888:	7859      	ldrb	r1, [r3, #1]
   2388a:	2968      	cmp	r1, #104	; 0x68
   2388c:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   23890:	d13a      	bne.n	23908 <cbvprintf+0x268>
			conv->length_mod = LENGTH_HH;
   23892:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
   23894:	f362 01c6 	bfi	r1, r2, #3, #4
   23898:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
			++sp;
   2389c:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
   2389e:	4613      	mov	r3, r2
   238a0:	f813 2b01 	ldrb.w	r2, [r3], #1
	switch (conv->specifier) {
   238a4:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   238a6:	9307      	str	r3, [sp, #28]
   238a8:	f88d 205b 	strb.w	r2, [sp, #91]	; 0x5b
	switch (conv->specifier) {
   238ac:	f200 80c5 	bhi.w	23a3a <cbvprintf+0x39a>
   238b0:	2a57      	cmp	r2, #87	; 0x57
   238b2:	d84e      	bhi.n	23952 <cbvprintf+0x2b2>
   238b4:	2a41      	cmp	r2, #65	; 0x41
   238b6:	d004      	beq.n	238c2 <cbvprintf+0x222>
   238b8:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   238bc:	2b02      	cmp	r3, #2
   238be:	f200 80bc 	bhi.w	23a3a <cbvprintf+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   238c2:	2104      	movs	r1, #4
   238c4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			|| (conv->specifier == 'A');
   238c8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   238cc:	f1a2 0a41 	sub.w	sl, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   238d0:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   238d4:	f1da 0200 	rsbs	r2, sl, #0
		conv->specifier_a = (conv->specifier == 'a')
   238d8:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
			|| (conv->specifier == 'A');
   238dc:	eb42 020a 	adc.w	r2, r2, sl
		conv->specifier_a = (conv->specifier == 'a')
   238e0:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   238e4:	060a      	lsls	r2, r1, #24
		conv->specifier_cat = SPECIFIER_FP;
   238e6:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_a = (conv->specifier == 'a')
   238ea:	f88d 1059 	strb.w	r1, [sp, #89]	; 0x59
		if (conv->specifier_a
   238ee:	b2cb      	uxtb	r3, r1
   238f0:	f100 80c9 	bmi.w	23a86 <cbvprintf+0x3e6>
		if (conv->length_mod == LENGTH_L) {
   238f4:	f003 0278 	and.w	r2, r3, #120	; 0x78
   238f8:	2a18      	cmp	r2, #24
   238fa:	f040 809b 	bne.w	23a34 <cbvprintf+0x394>
			conv->length_mod = LENGTH_NONE;
   238fe:	f36f 03c6 	bfc	r3, #3, #4
   23902:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   23906:	e082      	b.n	23a0e <cbvprintf+0x36e>
			conv->length_mod = LENGTH_H;
   23908:	460b      	mov	r3, r1
   2390a:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
   2390c:	f361 03c6 	bfi	r3, r1, #3, #4
   23910:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
   23914:	e7c3      	b.n	2389e <cbvprintf+0x1fe>
		if (*++sp == 'l') {
   23916:	7859      	ldrb	r1, [r3, #1]
   23918:	296c      	cmp	r1, #108	; 0x6c
   2391a:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
   2391e:	d101      	bne.n	23924 <cbvprintf+0x284>
			conv->length_mod = LENGTH_LL;
   23920:	2204      	movs	r2, #4
   23922:	e7b7      	b.n	23894 <cbvprintf+0x1f4>
			conv->length_mod = LENGTH_L;
   23924:	460b      	mov	r3, r1
   23926:	2103      	movs	r1, #3
   23928:	e7f0      	b.n	2390c <cbvprintf+0x26c>
		conv->length_mod = LENGTH_J;
   2392a:	2105      	movs	r1, #5
   2392c:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   23930:	e7ec      	b.n	2390c <cbvprintf+0x26c>
		conv->length_mod = LENGTH_T;
   23932:	460b      	mov	r3, r1
   23934:	2107      	movs	r1, #7
   23936:	e7e9      	b.n	2390c <cbvprintf+0x26c>
		conv->unsupported = true;
   23938:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2393c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   23940:	f023 0302 	bic.w	r3, r3, #2
   23944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   23948:	f043 0302 	orr.w	r3, r3, #2
   2394c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
		break;
   23950:	e7a5      	b.n	2389e <cbvprintf+0x1fe>
   23952:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
   23956:	2b20      	cmp	r3, #32
   23958:	d86f      	bhi.n	23a3a <cbvprintf+0x39a>
   2395a:	a101      	add	r1, pc, #4	; (adr r1, 23960 <cbvprintf+0x2c0>)
   2395c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23960:	00023a13 	.word	0x00023a13
   23964:	00023a3b 	.word	0x00023a3b
   23968:	00023a3b 	.word	0x00023a3b
   2396c:	00023a3b 	.word	0x00023a3b
   23970:	00023a3b 	.word	0x00023a3b
   23974:	00023a3b 	.word	0x00023a3b
   23978:	00023a3b 	.word	0x00023a3b
   2397c:	00023a3b 	.word	0x00023a3b
   23980:	00023a3b 	.word	0x00023a3b
   23984:	000238c3 	.word	0x000238c3
   23988:	00023a3b 	.word	0x00023a3b
   2398c:	00023a13 	.word	0x00023a13
   23990:	000239e5 	.word	0x000239e5
   23994:	000238c3 	.word	0x000238c3
   23998:	000238c3 	.word	0x000238c3
   2399c:	000238c3 	.word	0x000238c3
   239a0:	00023a3b 	.word	0x00023a3b
   239a4:	000239e5 	.word	0x000239e5
   239a8:	00023a3b 	.word	0x00023a3b
   239ac:	00023a3b 	.word	0x00023a3b
   239b0:	00023a3b 	.word	0x00023a3b
   239b4:	00023a3b 	.word	0x00023a3b
   239b8:	00023a49 	.word	0x00023a49
   239bc:	00023a13 	.word	0x00023a13
   239c0:	00023a69 	.word	0x00023a69
   239c4:	00023a3b 	.word	0x00023a3b
   239c8:	00023a3b 	.word	0x00023a3b
   239cc:	00023a69 	.word	0x00023a69
   239d0:	00023a3b 	.word	0x00023a3b
   239d4:	00023a13 	.word	0x00023a13
   239d8:	00023a3b 	.word	0x00023a3b
   239dc:	00023a3b 	.word	0x00023a3b
   239e0:	00023a13 	.word	0x00023a13
		conv->specifier_cat = SPECIFIER_SINT;
   239e4:	2101      	movs	r1, #1
   239e6:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		conv->specifier_cat = SPECIFIER_UINT;
   239ea:	f361 0302 	bfi	r3, r1, #0, #3
   239ee:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   239f2:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   239f6:	f003 0378 	and.w	r3, r3, #120	; 0x78
   239fa:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
   239fc:	bf02      	ittt	eq
   239fe:	f89d 1058 	ldrbeq.w	r1, [sp, #88]	; 0x58
   23a02:	f041 0101 	orreq.w	r1, r1, #1
   23a06:	f88d 1058 	strbeq.w	r1, [sp, #88]	; 0x58
		if (conv->specifier == 'c') {
   23a0a:	2a63      	cmp	r2, #99	; 0x63
   23a0c:	d005      	beq.n	23a1a <cbvprintf+0x37a>
	bool unsupported = false;
   23a0e:	2300      	movs	r3, #0
   23a10:	e006      	b.n	23a20 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_UINT;
   23a12:	2102      	movs	r1, #2
   23a14:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   23a18:	e7e7      	b.n	239ea <cbvprintf+0x34a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   23a1a:	3b00      	subs	r3, #0
   23a1c:	bf18      	it	ne
   23a1e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   23a20:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   23a24:	f3c2 0140 	ubfx	r1, r2, #1, #1
   23a28:	430b      	orrs	r3, r1
   23a2a:	f363 0241 	bfi	r2, r3, #1, #1
   23a2e:	f88d 2058 	strb.w	r2, [sp, #88]	; 0x58
	return sp;
   23a32:	e6b8      	b.n	237a6 <cbvprintf+0x106>
		} else if ((conv->length_mod != LENGTH_NONE)
   23a34:	f013 0f38 	tst.w	r3, #56	; 0x38
   23a38:	d0e9      	beq.n	23a0e <cbvprintf+0x36e>
			conv->invalid = true;
   23a3a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23a3e:	f043 0301 	orr.w	r3, r3, #1
   23a42:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   23a46:	e7e2      	b.n	23a0e <cbvprintf+0x36e>
		conv->specifier_cat = SPECIFIER_PTR;
   23a48:	2203      	movs	r2, #3
   23a4a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   23a4e:	f362 0302 	bfi	r3, r2, #0, #3
   23a52:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod == LENGTH_UPPER_L) {
   23a56:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   23a5a:	f003 0378 	and.w	r3, r3, #120	; 0x78
   23a5e:	f1a3 0740 	sub.w	r7, r3, #64	; 0x40
   23a62:	427b      	negs	r3, r7
   23a64:	417b      	adcs	r3, r7
   23a66:	e7db      	b.n	23a20 <cbvprintf+0x380>
		conv->specifier_cat = SPECIFIER_PTR;
   23a68:	2203      	movs	r2, #3
   23a6a:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
   23a6e:	f362 0302 	bfi	r3, r2, #0, #3
   23a72:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
		if (conv->length_mod != LENGTH_NONE) {
   23a76:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   23a7a:	f013 0f78 	tst.w	r3, #120	; 0x78
   23a7e:	bf14      	ite	ne
   23a80:	2301      	movne	r3, #1
   23a82:	2300      	moveq	r3, #0
   23a84:	e7cc      	b.n	23a20 <cbvprintf+0x380>
			unsupported = true;
   23a86:	2301      	movs	r3, #1
   23a88:	e7ca      	b.n	23a20 <cbvprintf+0x380>
		} else if (conv->width_present) {
   23a8a:	f99d 2058 	ldrsb.w	r2, [sp, #88]	; 0x58
   23a8e:	2a00      	cmp	r2, #0
		int width = -1;
   23a90:	bfac      	ite	ge
   23a92:	f04f 3aff 	movge.w	sl, #4294967295
			width = conv->width_value;
   23a96:	f8dd a05c 	ldrlt.w	sl, [sp, #92]	; 0x5c
   23a9a:	e696      	b.n	237ca <cbvprintf+0x12a>
		} else if (conv->prec_present) {
   23a9c:	0799      	lsls	r1, r3, #30
   23a9e:	f57f aea2 	bpl.w	237e6 <cbvprintf+0x146>
			precision = conv->prec_value;
   23aa2:	9f18      	ldr	r7, [sp, #96]	; 0x60
		conv->pad0_value = 0;
   23aa4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   23aa6:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
		    && (conv->specifier_cat == SPECIFIER_FP)
   23aaa:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   23aae:	f003 0307 	and.w	r3, r3, #7
   23ab2:	2b04      	cmp	r3, #4
   23ab4:	d109      	bne.n	23aca <cbvprintf+0x42a>
		    && !conv->prec_present) {
   23ab6:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
   23aba:	079a      	lsls	r2, r3, #30
   23abc:	d405      	bmi.n	23aca <cbvprintf+0x42a>
			if (conv->specifier_a) {
   23abe:	f99d 3059 	ldrsb.w	r3, [sp, #89]	; 0x59
				precision = 6;
   23ac2:	2b00      	cmp	r3, #0
   23ac4:	bfb4      	ite	lt
   23ac6:	270d      	movlt	r7, #13
   23ac8:	2706      	movge	r7, #6
			= (enum specifier_cat_enum)conv->specifier_cat;
   23aca:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
			= (enum length_mod_enum)conv->length_mod;
   23ace:	f89d 1059 	ldrb.w	r1, [sp, #89]	; 0x59
		enum specifier_cat_enum specifier_cat
   23ad2:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   23ad6:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   23ad8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   23adc:	d136      	bne.n	23b4c <cbvprintf+0x4ac>
			switch (length_mod) {
   23ade:	1ecb      	subs	r3, r1, #3
   23ae0:	2b04      	cmp	r3, #4
   23ae2:	d820      	bhi.n	23b26 <cbvprintf+0x486>
   23ae4:	e8df f003 	tbb	[pc, r3]
   23ae8:	1f070703 	.word	0x1f070703
   23aec:	1f          	.byte	0x1f
   23aed:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   23aee:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   23af2:	17d3      	asrs	r3, r2, #31
   23af4:	e004      	b.n	23b00 <cbvprintf+0x460>
					(sint_value_type)va_arg(ap, intmax_t);
   23af6:	3407      	adds	r4, #7
   23af8:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   23afc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   23b00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		if (conv->invalid || conv->unsupported) {
   23b04:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58
   23b08:	07b3      	lsls	r3, r6, #30
   23b0a:	d055      	beq.n	23bb8 <cbvprintf+0x518>
			OUTS(sp, fp);
   23b0c:	464a      	mov	r2, r9
   23b0e:	4641      	mov	r1, r8
   23b10:	9b07      	ldr	r3, [sp, #28]
   23b12:	9806      	ldr	r0, [sp, #24]
   23b14:	f019 fbca 	bl	3d2ac <outs>
   23b18:	2800      	cmp	r0, #0
   23b1a:	f2c0 837d 	blt.w	24218 <cbvprintf+0xb78>
   23b1e:	4405      	add	r5, r0
			while (pad_len-- > 0) {
   23b20:	f8dd 901c 	ldr.w	r9, [sp, #28]
   23b24:	e5c4      	b.n	236b0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   23b26:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   23b2a:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   23b2c:	ea4f 73e2 	mov.w	r3, r2, asr #31
   23b30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			if (length_mod == LENGTH_HH) {
   23b34:	d105      	bne.n	23b42 <cbvprintf+0x4a2>
				value->uint = (unsigned char)value->uint;
   23b36:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
				value->uint = (unsigned short)value->uint;
   23b3a:	9314      	str	r3, [sp, #80]	; 0x50
   23b3c:	2300      	movs	r3, #0
   23b3e:	9315      	str	r3, [sp, #84]	; 0x54
   23b40:	e7e0      	b.n	23b04 <cbvprintf+0x464>
			} else if (length_mod == LENGTH_H) {
   23b42:	2902      	cmp	r1, #2
   23b44:	d1de      	bne.n	23b04 <cbvprintf+0x464>
				value->sint = (short)value->sint;
   23b46:	f9bd 2050 	ldrsh.w	r2, [sp, #80]	; 0x50
   23b4a:	e7d2      	b.n	23af2 <cbvprintf+0x452>
		} else if (specifier_cat == SPECIFIER_UINT) {
   23b4c:	2b02      	cmp	r3, #2
   23b4e:	d123      	bne.n	23b98 <cbvprintf+0x4f8>
			switch (length_mod) {
   23b50:	1ecb      	subs	r3, r1, #3
   23b52:	2b04      	cmp	r3, #4
   23b54:	d813      	bhi.n	23b7e <cbvprintf+0x4de>
   23b56:	e8df f003 	tbb	[pc, r3]
   23b5a:	0a03      	.short	0x0a03
   23b5c:	120a      	.short	0x120a
   23b5e:	12          	.byte	0x12
   23b5f:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
   23b60:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
   23b62:	6822      	ldr	r2, [r4, #0]
   23b64:	1d20      	adds	r0, r4, #4
   23b66:	9214      	str	r2, [sp, #80]	; 0x50
   23b68:	9315      	str	r3, [sp, #84]	; 0x54
					(uint_value_type)va_arg(ap, size_t);
   23b6a:	4604      	mov	r4, r0
   23b6c:	e7ca      	b.n	23b04 <cbvprintf+0x464>
					(uint_value_type)va_arg(ap,
   23b6e:	3407      	adds	r4, #7
   23b70:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   23b74:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   23b78:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
				break;
   23b7c:	e7f5      	b.n	23b6a <cbvprintf+0x4ca>
					(uint_value_type)va_arg(ap, size_t);
   23b7e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   23b82:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   23b84:	9314      	str	r3, [sp, #80]	; 0x50
   23b86:	f04f 0300 	mov.w	r3, #0
   23b8a:	9315      	str	r3, [sp, #84]	; 0x54
			if (length_mod == LENGTH_HH) {
   23b8c:	d0d3      	beq.n	23b36 <cbvprintf+0x496>
			} else if (length_mod == LENGTH_H) {
   23b8e:	2902      	cmp	r1, #2
   23b90:	d1b8      	bne.n	23b04 <cbvprintf+0x464>
				value->uint = (unsigned short)value->uint;
   23b92:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   23b96:	e7d0      	b.n	23b3a <cbvprintf+0x49a>
		} else if (specifier_cat == SPECIFIER_FP) {
   23b98:	2b04      	cmp	r3, #4
   23b9a:	d107      	bne.n	23bac <cbvprintf+0x50c>
			if (length_mod == LENGTH_UPPER_L) {
   23b9c:	3407      	adds	r4, #7
   23b9e:	f024 0407 	bic.w	r4, r4, #7
   23ba2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   23ba6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
   23baa:	e7ab      	b.n	23b04 <cbvprintf+0x464>
		} else if (specifier_cat == SPECIFIER_PTR) {
   23bac:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   23bae:	bf04      	itt	eq
   23bb0:	f854 3b04 	ldreq.w	r3, [r4], #4
   23bb4:	9314      	streq	r3, [sp, #80]	; 0x50
   23bb6:	e7a5      	b.n	23b04 <cbvprintf+0x464>
		switch (conv->specifier) {
   23bb8:	f89d 905b 	ldrb.w	r9, [sp, #91]	; 0x5b
   23bbc:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
   23bc0:	d8ae      	bhi.n	23b20 <cbvprintf+0x480>
   23bc2:	f1b9 0f57 	cmp.w	r9, #87	; 0x57
   23bc6:	f200 80a7 	bhi.w	23d18 <cbvprintf+0x678>
   23bca:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
   23bce:	f000 80ed 	beq.w	23dac <cbvprintf+0x70c>
   23bd2:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
   23bd6:	d9a3      	bls.n	23b20 <cbvprintf+0x480>
   23bd8:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
   23bdc:	d003      	beq.n	23be6 <cbvprintf+0x546>
   23bde:	f1a9 0345 	sub.w	r3, r9, #69	; 0x45
   23be2:	2b02      	cmp	r3, #2
   23be4:	d89c      	bhi.n	23b20 <cbvprintf+0x480>
	} u = {
   23be6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	if ((u.u64 & SIGN_MASK) != 0U) {
   23bea:	2a00      	cmp	r2, #0
   23bec:	f173 0100 	sbcs.w	r1, r3, #0
   23bf0:	f2c0 8186 	blt.w	23f00 <cbvprintf+0x860>
	} else if (conv->flag_plus) {
   23bf4:	0731      	lsls	r1, r6, #28
   23bf6:	f100 8185 	bmi.w	23f04 <cbvprintf+0x864>
		*sign = ' ';
   23bfa:	f016 0610 	ands.w	r6, r6, #16
   23bfe:	bf18      	it	ne
   23c00:	2620      	movne	r6, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   23c02:	f3c3 5b0a 	ubfx	fp, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   23c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
   23c0a:	9204      	str	r2, [sp, #16]
   23c0c:	9305      	str	r3, [sp, #20]
   23c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23c12:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	bool is_subnormal = (exp == 0) && (fract != 0);
   23c16:	f1bb 0f00 	cmp.w	fp, #0
   23c1a:	f040 8175 	bne.w	23f08 <cbvprintf+0x868>
   23c1e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
   23c22:	4313      	orrs	r3, r2
   23c24:	bf14      	ite	ne
   23c26:	f04f 0c01 	movne.w	ip, #1
   23c2a:	f04f 0c00 	moveq.w	ip, #0
	if ((exp | fract) != 0) {
   23c2e:	4658      	mov	r0, fp
	fract <<= EXPONENT_BITS;
   23c30:	9905      	ldr	r1, [sp, #20]
		c = 'f';
   23c32:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
	fract <<= EXPONENT_BITS;
   23c36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   23c3a:	9904      	ldr	r1, [sp, #16]
		c = 'f';
   23c3c:	bf08      	it	eq
   23c3e:	f04f 0966 	moveq.w	r9, #102	; 0x66
	fract <<= EXPONENT_BITS;
   23c42:	02ca      	lsls	r2, r1, #11
   23c44:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
	if ((exp | fract) != 0) {
   23c48:	ea4b 0102 	orr.w	r1, fp, r2
   23c4c:	910a      	str	r1, [sp, #40]	; 0x28
   23c4e:	17c1      	asrs	r1, r0, #31
   23c50:	4319      	orrs	r1, r3
   23c52:	910b      	str	r1, [sp, #44]	; 0x2c
   23c54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   23c58:	4301      	orrs	r1, r0
	fract &= ~SIGN_MASK;
   23c5a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
	if ((exp | fract) != 0) {
   23c5e:	f000 81c7 	beq.w	23ff0 <cbvprintf+0x950>
		if (is_subnormal) {
   23c62:	f1bc 0f00 	cmp.w	ip, #0
   23c66:	f040 8187 	bne.w	23f78 <cbvprintf+0x8d8>
		fract |= BIT_63;
   23c6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
		fract *= 5U;
   23c6c:	2105      	movs	r1, #5
		fract |= BIT_63;
   23c6e:	9302      	str	r3, [sp, #8]
   23c70:	9b11      	ldr	r3, [sp, #68]	; 0x44
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
   23c72:	f2ab 3bfe 	subw	fp, fp, #1022	; 0x3fe
		fract |= BIT_63;
   23c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23c7a:	9303      	str	r3, [sp, #12]
   23c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   23c80:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   23c84:	2300      	movs	r3, #0
   23c86:	461a      	mov	r2, r3
	while (exp < -2) {
   23c88:	f11b 0f02 	cmn.w	fp, #2
   23c8c:	f2c0 817d 	blt.w	23f8a <cbvprintf+0x8ea>
   23c90:	b11b      	cbz	r3, 23c9a <cbvprintf+0x5fa>
   23c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   23c96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	while (exp > 0) {
   23c9a:	e9dd 3110 	ldrd	r3, r1, [sp, #64]	; 0x40
   23c9e:	f1bb 0f00 	cmp.w	fp, #0
   23ca2:	f300 818d 	bgt.w	23fc0 <cbvprintf+0x920>
	fract >>= (4 - exp);
   23ca6:	9911      	ldr	r1, [sp, #68]	; 0x44
   23ca8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23caa:	f1cb 0004 	rsb	r0, fp, #4
   23cae:	f10b 0b1c 	add.w	fp, fp, #28
   23cb2:	fa01 fb0b 	lsl.w	fp, r1, fp
   23cb6:	f1a0 0c20 	sub.w	ip, r0, #32
   23cba:	40c3      	lsrs	r3, r0
   23cbc:	fa21 fc0c 	lsr.w	ip, r1, ip
   23cc0:	ea43 030b 	orr.w	r3, r3, fp
   23cc4:	ea43 030c 	orr.w	r3, r3, ip
   23cc8:	40c1      	lsrs	r1, r0
   23cca:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	if ((c == 'g') || (c == 'G')) {
   23cce:	f009 03df 	and.w	r3, r9, #223	; 0xdf
   23cd2:	2b47      	cmp	r3, #71	; 0x47
   23cd4:	f040 8193 	bne.w	23ffe <cbvprintf+0x95e>
		if (decexp < (-4 + 1) || decexp > precision) {
   23cd8:	1cd0      	adds	r0, r2, #3
   23cda:	db02      	blt.n	23ce2 <cbvprintf+0x642>
   23cdc:	4297      	cmp	r7, r2
   23cde:	f280 818a 	bge.w	23ff6 <cbvprintf+0x956>
			c += 'e' - 'g';  /* e or E */
   23ce2:	f1a9 0902 	sub.w	r9, r9, #2
			if (precision > 0) {
   23ce6:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   23ce8:	fa5f f989 	uxtb.w	r9, r9
			if (precision > 0) {
   23cec:	dd00      	ble.n	23cf0 <cbvprintf+0x650>
				precision--;
   23cee:	3f01      	subs	r7, #1
		if (!conv->flag_hash && (precision > 0)) {
   23cf0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   23cf4:	0699      	lsls	r1, r3, #26
   23cf6:	f100 8182 	bmi.w	23ffe <cbvprintf+0x95e>
   23cfa:	2f00      	cmp	r7, #0
   23cfc:	bfd4      	ite	le
   23cfe:	2300      	movle	r3, #0
   23d00:	2301      	movgt	r3, #1
	if (c == 'f') {
   23d02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
	bool prune_zero = false;
   23d06:	930c      	str	r3, [sp, #48]	; 0x30
	if (c == 'f') {
   23d08:	f040 817b 	bne.w	24002 <cbvprintf+0x962>
		if (decimals < 0) {
   23d0c:	19d3      	adds	r3, r2, r7
   23d0e:	f140 8179 	bpl.w	24004 <cbvprintf+0x964>
			decimals = 0;
   23d12:	f04f 0b00 	mov.w	fp, #0
   23d16:	e179      	b.n	2400c <cbvprintf+0x96c>
   23d18:	f1a9 0358 	sub.w	r3, r9, #88	; 0x58
   23d1c:	2b20      	cmp	r3, #32
   23d1e:	f63f aeff 	bhi.w	23b20 <cbvprintf+0x480>
   23d22:	a201      	add	r2, pc, #4	; (adr r2, 23d28 <cbvprintf+0x688>)
   23d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23d28:	00023ea1 	.word	0x00023ea1
   23d2c:	00023b21 	.word	0x00023b21
   23d30:	00023b21 	.word	0x00023b21
   23d34:	00023b21 	.word	0x00023b21
   23d38:	00023b21 	.word	0x00023b21
   23d3c:	00023b21 	.word	0x00023b21
   23d40:	00023b21 	.word	0x00023b21
   23d44:	00023b21 	.word	0x00023b21
   23d48:	00023b21 	.word	0x00023b21
   23d4c:	00023be7 	.word	0x00023be7
   23d50:	00023b21 	.word	0x00023b21
   23d54:	00023dd9 	.word	0x00023dd9
   23d58:	00023e41 	.word	0x00023e41
   23d5c:	00023be7 	.word	0x00023be7
   23d60:	00023be7 	.word	0x00023be7
   23d64:	00023be7 	.word	0x00023be7
   23d68:	00023b21 	.word	0x00023b21
   23d6c:	00023e41 	.word	0x00023e41
   23d70:	00023b21 	.word	0x00023b21
   23d74:	00023b21 	.word	0x00023b21
   23d78:	00023b21 	.word	0x00023b21
   23d7c:	00023b21 	.word	0x00023b21
   23d80:	00023ed7 	.word	0x00023ed7
   23d84:	00023ea1 	.word	0x00023ea1
   23d88:	00023ea5 	.word	0x00023ea5
   23d8c:	00023b21 	.word	0x00023b21
   23d90:	00023b21 	.word	0x00023b21
   23d94:	00023db3 	.word	0x00023db3
   23d98:	00023b21 	.word	0x00023b21
   23d9c:	00023ea1 	.word	0x00023ea1
   23da0:	00023b21 	.word	0x00023b21
   23da4:	00023b21 	.word	0x00023b21
   23da8:	00023ea1 	.word	0x00023ea1
			OUTC('%');
   23dac:	4641      	mov	r1, r8
   23dae:	4648      	mov	r0, r9
   23db0:	e48a      	b.n	236c8 <cbvprintf+0x28>
			if (precision >= 0) {
   23db2:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   23db4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
			if (precision >= 0) {
   23db8:	db0a      	blt.n	23dd0 <cbvprintf+0x730>
				len = strnlen(bps, precision);
   23dba:	4639      	mov	r1, r7
   23dbc:	4648      	mov	r0, r9
   23dbe:	f01e f99c 	bl	420fa <strnlen>
		char sign = 0;
   23dc2:	2600      	movs	r6, #0
			bpe = bps + len;
   23dc4:	eb09 0b00 	add.w	fp, r9, r0
		if (bps == NULL) {
   23dc8:	f1b9 0f00 	cmp.w	r9, #0
   23dcc:	d10c      	bne.n	23de8 <cbvprintf+0x748>
   23dce:	e6a7      	b.n	23b20 <cbvprintf+0x480>
				len = strlen(bps);
   23dd0:	4648      	mov	r0, r9
   23dd2:	f7f9 fa43 	bl	1d25c <strlen>
   23dd6:	e7f4      	b.n	23dc2 <cbvprintf+0x722>
		char sign = 0;
   23dd8:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   23dda:	9b14      	ldr	r3, [sp, #80]	; 0x50
			bpe = buf + 1;
   23ddc:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   23de0:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
				bps = encode_float(value->dbl, conv, precision,
   23de4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
		size_t nj_len = (bpe - bps);
   23de8:	ebab 0209 	sub.w	r2, fp, r9
		if (sign != 0) {
   23dec:	b106      	cbz	r6, 23df0 <cbvprintf+0x750>
			nj_len += 1U;
   23dee:	3201      	adds	r2, #1
		if (conv->altform_0c) {
   23df0:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   23df4:	06c3      	lsls	r3, r0, #27
   23df6:	f140 81ff 	bpl.w	241f8 <cbvprintf+0xb58>
			nj_len += 2U;
   23dfa:	3202      	adds	r2, #2
		nj_len += conv->pad0_value;
   23dfc:	9917      	ldr	r1, [sp, #92]	; 0x5c
		if (conv->pad_fp) {
   23dfe:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
   23e00:	440a      	add	r2, r1
			nj_len += conv->pad0_pre_exp;
   23e02:	bf44      	itt	mi
   23e04:	9918      	ldrmi	r1, [sp, #96]	; 0x60
   23e06:	1852      	addmi	r2, r2, r1
		if (width > 0) {
   23e08:	f1ba 0f00 	cmp.w	sl, #0
   23e0c:	f340 8211 	ble.w	24232 <cbvprintf+0xb92>
			width -= (int)nj_len;
   23e10:	ebaa 0a02 	sub.w	sl, sl, r2
			if (!conv->flag_dash) {
   23e14:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   23e18:	0751      	lsls	r1, r2, #29
   23e1a:	f3c2 0780 	ubfx	r7, r2, #2, #1
   23e1e:	f100 8208 	bmi.w	24232 <cbvprintf+0xb92>
				if (conv->flag_zero) {
   23e22:	0653      	lsls	r3, r2, #25
   23e24:	f140 81fb 	bpl.w	2421e <cbvprintf+0xb7e>
					if (sign != 0) {
   23e28:	b146      	cbz	r6, 23e3c <cbvprintf+0x79c>
						OUTC(sign);
   23e2a:	4641      	mov	r1, r8
   23e2c:	4630      	mov	r0, r6
   23e2e:	9b06      	ldr	r3, [sp, #24]
   23e30:	4798      	blx	r3
   23e32:	2800      	cmp	r0, #0
   23e34:	f2c0 81f0 	blt.w	24218 <cbvprintf+0xb78>
						sign = 0;
   23e38:	463e      	mov	r6, r7
						OUTC(sign);
   23e3a:	3501      	adds	r5, #1
					pad = '0';
   23e3c:	2730      	movs	r7, #48	; 0x30
   23e3e:	e1ef      	b.n	24220 <cbvprintf+0xb80>
			if (conv->flag_plus) {
   23e40:	0730      	lsls	r0, r6, #28
   23e42:	d42b      	bmi.n	23e9c <cbvprintf+0x7fc>
				sign = ' ';
   23e44:	f016 0610 	ands.w	r6, r6, #16
   23e48:	bf18      	it	ne
   23e4a:	2620      	movne	r6, #32
			if (value->sint < 0) {
   23e4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   23e50:	2a00      	cmp	r2, #0
   23e52:	f173 0100 	sbcs.w	r1, r3, #0
   23e56:	da05      	bge.n	23e64 <cbvprintf+0x7c4>
				sign = '-';
   23e58:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-value->sint;
   23e5a:	4252      	negs	r2, r2
   23e5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   23e60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			bps = encode_uint(value->uint, conv, buf, bpe);
   23e64:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   23e68:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   23e6c:	9300      	str	r3, [sp, #0]
   23e6e:	aa16      	add	r2, sp, #88	; 0x58
   23e70:	ab1b      	add	r3, sp, #108	; 0x6c
   23e72:	f7ff fbc5 	bl	23600 <encode_uint>
   23e76:	4681      	mov	r9, r0
			if (precision >= 0) {
   23e78:	2f00      	cmp	r7, #0
   23e7a:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   23e7e:	db0b      	blt.n	23e98 <cbvprintf+0x7f8>
				conv->flag_zero = false;
   23e80:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
				size_t len = bpe - bps;
   23e84:	eba3 0209 	sub.w	r2, r3, r9
				conv->flag_zero = false;
   23e88:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
   23e8c:	4297      	cmp	r7, r2
				conv->flag_zero = false;
   23e8e:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
				if (len < (size_t)precision) {
   23e92:	d901      	bls.n	23e98 <cbvprintf+0x7f8>
					conv->pad0_value = precision - (int)len;
   23e94:	1abf      	subs	r7, r7, r2
   23e96:	9717      	str	r7, [sp, #92]	; 0x5c
		const char *bpe = buf + sizeof(buf);
   23e98:	469b      	mov	fp, r3
   23e9a:	e795      	b.n	23dc8 <cbvprintf+0x728>
				sign = '+';
   23e9c:	262b      	movs	r6, #43	; 0x2b
   23e9e:	e7d5      	b.n	23e4c <cbvprintf+0x7ac>
		switch (conv->specifier) {
   23ea0:	2600      	movs	r6, #0
   23ea2:	e7df      	b.n	23e64 <cbvprintf+0x7c4>
			if (value->ptr != NULL) {
   23ea4:	9814      	ldr	r0, [sp, #80]	; 0x50
   23ea6:	2800      	cmp	r0, #0
   23ea8:	f000 81a0 	beq.w	241ec <cbvprintf+0xb4c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   23eac:	f10d 0385 	add.w	r3, sp, #133	; 0x85
   23eb0:	9300      	str	r3, [sp, #0]
   23eb2:	2100      	movs	r1, #0
   23eb4:	ab1b      	add	r3, sp, #108	; 0x6c
   23eb6:	aa16      	add	r2, sp, #88	; 0x58
   23eb8:	f7ff fba2 	bl	23600 <encode_uint>
				conv->altform_0c = true;
   23ebc:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
				bps = encode_uint((uintptr_t)value->ptr, conv,
   23ec0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   23ec2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   23ec6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   23eca:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
   23ece:	2600      	movs	r6, #0
				conv->altform_0c = true;
   23ed0:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
				goto prec_int_pad0;
   23ed4:	e7d0      	b.n	23e78 <cbvprintf+0x7d8>
				store_count(conv, value->ptr, count);
   23ed6:	9b14      	ldr	r3, [sp, #80]	; 0x50
	switch ((enum length_mod_enum)conv->length_mod) {
   23ed8:	2907      	cmp	r1, #7
   23eda:	f63f ae21 	bhi.w	23b20 <cbvprintf+0x480>
   23ede:	e8df f001 	tbb	[pc, r1]
   23ee2:	040d      	.short	0x040d
   23ee4:	08080d06 	.word	0x08080d06
   23ee8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   23eea:	701d      	strb	r5, [r3, #0]
		break;
   23eec:	e618      	b.n	23b20 <cbvprintf+0x480>
		*(short *)dp = (short)count;
   23eee:	801d      	strh	r5, [r3, #0]
		break;
   23ef0:	e616      	b.n	23b20 <cbvprintf+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   23ef2:	4628      	mov	r0, r5
   23ef4:	17e9      	asrs	r1, r5, #31
   23ef6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   23efa:	e611      	b.n	23b20 <cbvprintf+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   23efc:	601d      	str	r5, [r3, #0]
		break;
   23efe:	e60f      	b.n	23b20 <cbvprintf+0x480>
		*sign = '-';
   23f00:	262d      	movs	r6, #45	; 0x2d
   23f02:	e67e      	b.n	23c02 <cbvprintf+0x562>
		*sign = '+';
   23f04:	262b      	movs	r6, #43	; 0x2b
   23f06:	e67c      	b.n	23c02 <cbvprintf+0x562>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
   23f08:	f240 73ff 	movw	r3, #2047	; 0x7ff
   23f0c:	459b      	cmp	fp, r3
   23f0e:	d12e      	bne.n	23f6e <cbvprintf+0x8ce>
		if (fract == 0) {
   23f10:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   23f14:	4bba      	ldr	r3, [pc, #744]	; (24200 <cbvprintf+0xb60>)
   23f16:	430a      	orrs	r2, r1
   23f18:	f819 3003 	ldrb.w	r3, [r9, r3]
   23f1c:	f003 0303 	and.w	r3, r3, #3
   23f20:	d117      	bne.n	23f52 <cbvprintf+0x8b2>
			if (isupper((int)c)) {
   23f22:	2b01      	cmp	r3, #1
				*buf++ = 'I';
   23f24:	bf0b      	itete	eq
   23f26:	f644 6349 	movweq	r3, #20041	; 0x4e49
				*buf++ = 'i';
   23f2a:	f646 6369 	movwne	r3, #28265	; 0x6e69
				*buf++ = 'I';
   23f2e:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'i';
   23f32:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'F';
   23f36:	bf0c      	ite	eq
   23f38:	2346      	moveq	r3, #70	; 0x46
				*buf++ = 'f';
   23f3a:	2366      	movne	r3, #102	; 0x66
				*buf++ = 'n';
   23f3c:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
		conv->flag_zero = false;
   23f40:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		*bpe = buf;
   23f44:	f10d 0b6f 	add.w	fp, sp, #111	; 0x6f
		conv->flag_zero = false;
   23f48:	f36f 1386 	bfc	r3, #6, #1
   23f4c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
		return bps;
   23f50:	e748      	b.n	23de4 <cbvprintf+0x744>
			if (isupper((int)c)) {
   23f52:	2b01      	cmp	r3, #1
				*buf++ = 'N';
   23f54:	bf0b      	itete	eq
   23f56:	f244 134e 	movweq	r3, #16718	; 0x414e
				*buf++ = 'n';
   23f5a:	f246 136e 	movwne	r3, #24942	; 0x616e
				*buf++ = 'N';
   23f5e:	f8ad 306c 	strheq.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'n';
   23f62:	f8ad 306c 	strhne.w	r3, [sp, #108]	; 0x6c
				*buf++ = 'N';
   23f66:	bf0c      	ite	eq
   23f68:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'n';
   23f6a:	236e      	movne	r3, #110	; 0x6e
   23f6c:	e7e6      	b.n	23f3c <cbvprintf+0x89c>
	bool is_subnormal = (exp == 0) && (fract != 0);
   23f6e:	f04f 0c00 	mov.w	ip, #0
   23f72:	e65c      	b.n	23c2e <cbvprintf+0x58e>
				exp--;
   23f74:	f10b 3bff 	add.w	fp, fp, #4294967295
			while (((fract <<= 1) & BIT_63) == 0) {
   23f78:	1892      	adds	r2, r2, r2
   23f7a:	415b      	adcs	r3, r3
   23f7c:	2a00      	cmp	r2, #0
   23f7e:	f173 0100 	sbcs.w	r1, r3, #0
   23f82:	daf7      	bge.n	23f74 <cbvprintf+0x8d4>
   23f84:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   23f88:	e66f      	b.n	23c6a <cbvprintf+0x5ca>
			fract >>= 1;
   23f8a:	9b02      	ldr	r3, [sp, #8]
   23f8c:	9803      	ldr	r0, [sp, #12]
   23f8e:	085b      	lsrs	r3, r3, #1
   23f90:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
   23f94:	0840      	lsrs	r0, r0, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   23f96:	f1b0 3f33 	cmp.w	r0, #858993459	; 0x33333333
   23f9a:	46de      	mov	lr, fp
			fract >>= 1;
   23f9c:	e9cd 3002 	strd	r3, r0, [sp, #8]
			exp++;
   23fa0:	f10b 0b01 	add.w	fp, fp, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   23fa4:	d2f1      	bcs.n	23f8a <cbvprintf+0x8ea>
		fract *= 5U;
   23fa6:	fba3 bc01 	umull	fp, ip, r3, r1
   23faa:	4348      	muls	r0, r1
   23fac:	e9cd bc02 	strd	fp, ip, [sp, #8]
   23fb0:	9b03      	ldr	r3, [sp, #12]
		exp++;
   23fb2:	f10e 0b02 	add.w	fp, lr, #2
		fract *= 5U;
   23fb6:	18c3      	adds	r3, r0, r3
   23fb8:	9303      	str	r3, [sp, #12]
		decexp--;
   23fba:	3a01      	subs	r2, #1
   23fbc:	2301      	movs	r3, #1
   23fbe:	e663      	b.n	23c88 <cbvprintf+0x5e8>
		fract += 2;
   23fc0:	3302      	adds	r3, #2
   23fc2:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   23fc6:	a810      	add	r0, sp, #64	; 0x40
		fract += 2;
   23fc8:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   23fcc:	920c      	str	r2, [sp, #48]	; 0x30
		_ldiv5(&fract);
   23fce:	f019 f937 	bl	3d240 <_ldiv5>
		exp--;
   23fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
		decexp++;
   23fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		exp--;
   23fd8:	f10b 3bff 	add.w	fp, fp, #4294967295
		decexp++;
   23fdc:	3201      	adds	r2, #1
			fract <<= 1;
   23fde:	1800      	adds	r0, r0, r0
   23fe0:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   23fe2:	2800      	cmp	r0, #0
   23fe4:	f171 0300 	sbcs.w	r3, r1, #0
			exp--;
   23fe8:	f10b 3bff 	add.w	fp, fp, #4294967295
		} while (!(fract & BIT_63));
   23fec:	daf7      	bge.n	23fde <cbvprintf+0x93e>
   23fee:	e652      	b.n	23c96 <cbvprintf+0x5f6>
   23ff0:	2200      	movs	r2, #0
   23ff2:	4693      	mov	fp, r2
   23ff4:	e657      	b.n	23ca6 <cbvprintf+0x606>
			c = 'f';
   23ff6:	f04f 0966 	mov.w	r9, #102	; 0x66
			precision -= decexp;
   23ffa:	1abf      	subs	r7, r7, r2
   23ffc:	e678      	b.n	23cf0 <cbvprintf+0x650>
	bool prune_zero = false;
   23ffe:	2300      	movs	r3, #0
   24000:	e67f      	b.n	23d02 <cbvprintf+0x662>
		decimals = precision + 1;
   24002:	1c7b      	adds	r3, r7, #1
	if (decimals > 16) {
   24004:	2b10      	cmp	r3, #16
   24006:	bfa8      	it	ge
   24008:	2310      	movge	r3, #16
   2400a:	469b      	mov	fp, r3
   2400c:	2110      	movs	r1, #16
	uint64_t round = BIT64(59); /* 0.5 */
   2400e:	2000      	movs	r0, #0
   24010:	910f      	str	r1, [sp, #60]	; 0x3c
   24012:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   24016:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	while (decimals--) {
   2401a:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
   2401e:	f10b 3bff 	add.w	fp, fp, #4294967295
   24022:	f1bb 3fff 	cmp.w	fp, #4294967295
   24026:	d11f      	bne.n	24068 <cbvprintf+0x9c8>
	fract += round;
   24028:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2402a:	18cb      	adds	r3, r1, r3
   2402c:	9308      	str	r3, [sp, #32]
   2402e:	9b11      	ldr	r3, [sp, #68]	; 0x44
	if (fract >= BIT64(60)) {
   24030:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
	fract += round;
   24034:	eb40 0303 	adc.w	r3, r0, r3
	if (fract >= BIT64(60)) {
   24038:	f04f 30ff 	mov.w	r0, #4294967295
	fract += round;
   2403c:	9309      	str	r3, [sp, #36]	; 0x24
	if (fract >= BIT64(60)) {
   2403e:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
   24042:	4561      	cmp	r1, ip
   24044:	bf08      	it	eq
   24046:	4558      	cmpeq	r0, fp
   24048:	d31a      	bcc.n	24080 <cbvprintf+0x9e0>
	fract += round;
   2404a:	4658      	mov	r0, fp
   2404c:	4661      	mov	r1, ip
   2404e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	if (c == 'f') {
   24052:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   24056:	d153      	bne.n	24100 <cbvprintf+0xa60>
		if (decexp > 0) {
   24058:	2a00      	cmp	r2, #0
   2405a:	dc20      	bgt.n	2409e <cbvprintf+0x9fe>
			*buf++ = '0';
   2405c:	2330      	movs	r3, #48	; 0x30
   2405e:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   24062:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
   24066:	e02b      	b.n	240c0 <cbvprintf+0xa20>
	*v >>= 1;
   24068:	0849      	lsrs	r1, r1, #1
   2406a:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
   2406e:	0840      	lsrs	r0, r0, #1
   24070:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
	_ldiv5(v);
   24074:	a812      	add	r0, sp, #72	; 0x48
   24076:	920d      	str	r2, [sp, #52]	; 0x34
   24078:	f019 f8e2 	bl	3d240 <_ldiv5>
   2407c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
}
   2407e:	e7cc      	b.n	2401a <cbvprintf+0x97a>
	*v >>= 1;
   24080:	9b08      	ldr	r3, [sp, #32]
   24082:	920d      	str	r2, [sp, #52]	; 0x34
   24084:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24086:	085b      	lsrs	r3, r3, #1
   24088:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   2408c:	0851      	lsrs	r1, r2, #1
	_ldiv5(v);
   2408e:	a810      	add	r0, sp, #64	; 0x40
	*v >>= 1;
   24090:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
	_ldiv5(v);
   24094:	f019 f8d4 	bl	3d240 <_ldiv5>
		decexp++;
   24098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2409a:	3201      	adds	r2, #1
   2409c:	e7d9      	b.n	24052 <cbvprintf+0x9b2>
	char *buf = bps;
   2409e:	f10d 0b6c 	add.w	fp, sp, #108	; 0x6c
			while (decexp > 0 && digit_count > 0) {
   240a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   240a4:	2900      	cmp	r1, #0
   240a6:	dd09      	ble.n	240bc <cbvprintf+0xa1c>
				*buf++ = _get_digit(&fract, &digit_count);
   240a8:	a90f      	add	r1, sp, #60	; 0x3c
   240aa:	a810      	add	r0, sp, #64	; 0x40
   240ac:	920d      	str	r2, [sp, #52]	; 0x34
   240ae:	f019 f8e6 	bl	3d27e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   240b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
				*buf++ = _get_digit(&fract, &digit_count);
   240b4:	f80b 0b01 	strb.w	r0, [fp], #1
			while (decexp > 0 && digit_count > 0) {
   240b8:	3a01      	subs	r2, #1
   240ba:	d1f2      	bne.n	240a2 <cbvprintf+0xa02>
			conv->pad0_value = decexp;
   240bc:	9217      	str	r2, [sp, #92]	; 0x5c
			decexp = 0;
   240be:	2200      	movs	r2, #0
		if (conv->flag_hash || (precision > 0)) {
   240c0:	f89d 1058 	ldrb.w	r1, [sp, #88]	; 0x58
   240c4:	0688      	lsls	r0, r1, #26
   240c6:	d401      	bmi.n	240cc <cbvprintf+0xa2c>
   240c8:	2f00      	cmp	r7, #0
   240ca:	dd3f      	ble.n	2414c <cbvprintf+0xaac>
			*buf++ = '.';
   240cc:	465b      	mov	r3, fp
   240ce:	212e      	movs	r1, #46	; 0x2e
   240d0:	f803 1b01 	strb.w	r1, [r3], #1
		if (decexp < 0 && precision > 0) {
   240d4:	b192      	cbz	r2, 240fc <cbvprintf+0xa5c>
   240d6:	2f00      	cmp	r7, #0
   240d8:	dd76      	ble.n	241c8 <cbvprintf+0xb28>
			conv->pad0_value = -decexp;
   240da:	4251      	negs	r1, r2
   240dc:	42b9      	cmp	r1, r7
   240de:	bfa8      	it	ge
   240e0:	4639      	movge	r1, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   240e2:	2900      	cmp	r1, #0
			conv->pad0_value = -decexp;
   240e4:	9117      	str	r1, [sp, #92]	; 0x5c
			precision -= conv->pad0_value;
   240e6:	eba7 0701 	sub.w	r7, r7, r1
			conv->pad_postdp = (conv->pad0_value > 0);
   240ea:	bfd4      	ite	le
   240ec:	2100      	movle	r1, #0
   240ee:	2101      	movgt	r1, #1
   240f0:	f89d 005a 	ldrb.w	r0, [sp, #90]	; 0x5a
   240f4:	f361 1045 	bfi	r0, r1, #5, #1
   240f8:	f88d 005a 	strb.w	r0, [sp, #90]	; 0x5a
			*buf++ = '.';
   240fc:	469b      	mov	fp, r3
   240fe:	e020      	b.n	24142 <cbvprintf+0xaa2>
		*buf = _get_digit(&fract, &digit_count);
   24100:	a90f      	add	r1, sp, #60	; 0x3c
   24102:	a810      	add	r0, sp, #64	; 0x40
   24104:	920d      	str	r2, [sp, #52]	; 0x34
   24106:	f019 f8ba 	bl	3d27e <_get_digit>
		if (*buf++ != '0') {
   2410a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
		if (conv->flag_hash || (precision > 0)) {
   2410c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
		if (*buf++ != '0') {
   24110:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   24112:	bf18      	it	ne
   24114:	f102 32ff 	addne.w	r2, r2, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   24118:	0699      	lsls	r1, r3, #26
		*buf = _get_digit(&fract, &digit_count);
   2411a:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
		if (conv->flag_hash || (precision > 0)) {
   2411e:	d401      	bmi.n	24124 <cbvprintf+0xa84>
   24120:	2f00      	cmp	r7, #0
   24122:	dd53      	ble.n	241cc <cbvprintf+0xb2c>
			*buf++ = '.';
   24124:	232e      	movs	r3, #46	; 0x2e
   24126:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
   2412a:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
   2412e:	e7e5      	b.n	240fc <cbvprintf+0xa5c>
		*buf++ = _get_digit(&fract, &digit_count);
   24130:	a90f      	add	r1, sp, #60	; 0x3c
   24132:	a810      	add	r0, sp, #64	; 0x40
   24134:	920d      	str	r2, [sp, #52]	; 0x34
   24136:	f019 f8a2 	bl	3d27e <_get_digit>
   2413a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2413c:	f80b 0b01 	strb.w	r0, [fp], #1
		precision--;
   24140:	3f01      	subs	r7, #1
	while (precision > 0 && digit_count > 0) {
   24142:	2f00      	cmp	r7, #0
   24144:	dd02      	ble.n	2414c <cbvprintf+0xaac>
   24146:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24148:	2900      	cmp	r1, #0
   2414a:	dcf1      	bgt.n	24130 <cbvprintf+0xa90>
	if (prune_zero) {
   2414c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2414e:	2b00      	cmp	r3, #0
   24150:	d13f      	bne.n	241d2 <cbvprintf+0xb32>
	conv->pad0_pre_exp = precision;
   24152:	9718      	str	r7, [sp, #96]	; 0x60
	if ((c == 'e') || (c == 'E')) {
   24154:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   24158:	2945      	cmp	r1, #69	; 0x45
   2415a:	d123      	bne.n	241a4 <cbvprintf+0xb04>
		if (decexp < 0) {
   2415c:	2a00      	cmp	r2, #0
			*buf++ = '-';
   2415e:	bfb4      	ite	lt
   24160:	212d      	movlt	r1, #45	; 0x2d
			*buf++ = '+';
   24162:	212b      	movge	r1, #43	; 0x2b
		*buf++ = c;
   24164:	4658      	mov	r0, fp
			decexp = -decexp;
   24166:	bfb8      	it	lt
   24168:	4252      	neglt	r2, r2
		if (decexp >= 100) {
   2416a:	2a63      	cmp	r2, #99	; 0x63
		*buf++ = c;
   2416c:	f800 9b02 	strb.w	r9, [r0], #2
			*buf++ = '-';
   24170:	f88b 1001 	strb.w	r1, [fp, #1]
		if (decexp >= 100) {
   24174:	dd0a      	ble.n	2418c <cbvprintf+0xaec>
			*buf++ = (decexp / 100) + '0';
   24176:	2764      	movs	r7, #100	; 0x64
   24178:	fb92 f1f7 	sdiv	r1, r2, r7
			decexp %= 100;
   2417c:	fb07 2211 	mls	r2, r7, r1, r2
			*buf++ = (decexp / 100) + '0';
   24180:	f101 0c30 	add.w	ip, r1, #48	; 0x30
   24184:	f10b 0003 	add.w	r0, fp, #3
   24188:	f88b c002 	strb.w	ip, [fp, #2]
		*buf++ = (decexp / 10) + '0';
   2418c:	270a      	movs	r7, #10
   2418e:	fb92 f1f7 	sdiv	r1, r2, r7
   24192:	4683      	mov	fp, r0
		*buf++ = (decexp % 10) + '0';
   24194:	fb07 2211 	mls	r2, r7, r1, r2
		*buf++ = (decexp / 10) + '0';
   24198:	f101 0c30 	add.w	ip, r1, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   2419c:	3230      	adds	r2, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   2419e:	f80b cb02 	strb.w	ip, [fp], #2
		*buf++ = (decexp % 10) + '0';
   241a2:	7042      	strb	r2, [r0, #1]
		|| (conv->pad0_pre_exp > 0);
   241a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   241a6:	2a00      	cmp	r2, #0
   241a8:	dc1e      	bgt.n	241e8 <cbvprintf+0xb48>
   241aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   241ac:	2a00      	cmp	r2, #0
   241ae:	bfd4      	ite	le
   241b0:	2200      	movle	r2, #0
   241b2:	2201      	movgt	r2, #1
	conv->pad_fp = (conv->pad0_value > 0)
   241b4:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
   241b8:	f362 1186 	bfi	r1, r2, #6, #1
	*buf = 0;
   241bc:	2200      	movs	r2, #0
	conv->pad_fp = (conv->pad0_value > 0)
   241be:	f88d 105a 	strb.w	r1, [sp, #90]	; 0x5a
	*buf = 0;
   241c2:	f88b 2000 	strb.w	r2, [fp]
	return bps;
   241c6:	e60d      	b.n	23de4 <cbvprintf+0x744>
			*buf++ = '.';
   241c8:	469b      	mov	fp, r3
   241ca:	e7bf      	b.n	2414c <cbvprintf+0xaac>
		if (*buf++ != '0') {
   241cc:	f10d 0b6d 	add.w	fp, sp, #109	; 0x6d
   241d0:	e7bc      	b.n	2414c <cbvprintf+0xaac>
		conv->pad0_pre_exp = 0;
   241d2:	2100      	movs	r1, #0
   241d4:	9118      	str	r1, [sp, #96]	; 0x60
		while (*--buf == '0') {
   241d6:	4658      	mov	r0, fp
   241d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
   241dc:	2930      	cmp	r1, #48	; 0x30
   241de:	d0fa      	beq.n	241d6 <cbvprintf+0xb36>
		if (*buf != '.') {
   241e0:	292e      	cmp	r1, #46	; 0x2e
   241e2:	bf18      	it	ne
   241e4:	4683      	movne	fp, r0
   241e6:	e7b5      	b.n	24154 <cbvprintf+0xab4>
		|| (conv->pad0_pre_exp > 0);
   241e8:	2201      	movs	r2, #1
   241ea:	e7e3      	b.n	241b4 <cbvprintf+0xb14>
			bpe = bps + 5;
   241ec:	f8df b014 	ldr.w	fp, [pc, #20]	; 24204 <cbvprintf+0xb64>
		char sign = 0;
   241f0:	4606      	mov	r6, r0
			bps = "(nil)";
   241f2:	f1ab 0905 	sub.w	r9, fp, #5
   241f6:	e5f7      	b.n	23de8 <cbvprintf+0x748>
		} else if (conv->altform_0) {
   241f8:	0707      	lsls	r7, r0, #28
			nj_len += 1U;
   241fa:	bf48      	it	mi
   241fc:	3201      	addmi	r2, #1
   241fe:	e5fd      	b.n	23dfc <cbvprintf+0x75c>
   24200:	0004c29f 	.word	0x0004c29f
   24204:	00045a02 	.word	0x00045a02
   24208:	930c      	str	r3, [sp, #48]	; 0x30
					OUTC(pad);
   2420a:	4641      	mov	r1, r8
   2420c:	9b06      	ldr	r3, [sp, #24]
   2420e:	4638      	mov	r0, r7
   24210:	4798      	blx	r3
   24212:	2800      	cmp	r0, #0
   24214:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24216:	da05      	bge.n	24224 <cbvprintf+0xb84>
#undef OUTS
#undef OUTC
}
   24218:	b023      	add	sp, #140	; 0x8c
   2421a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   2421e:	2720      	movs	r7, #32
   24220:	eb0a 0305 	add.w	r3, sl, r5
   24224:	4652      	mov	r2, sl
				while (width-- > 0) {
   24226:	2a00      	cmp	r2, #0
   24228:	eba3 050a 	sub.w	r5, r3, sl
   2422c:	f10a 3aff 	add.w	sl, sl, #4294967295
   24230:	dcea      	bgt.n	24208 <cbvprintf+0xb68>
		if (sign != 0) {
   24232:	b136      	cbz	r6, 24242 <cbvprintf+0xba2>
			OUTC(sign);
   24234:	4641      	mov	r1, r8
   24236:	4630      	mov	r0, r6
   24238:	9b06      	ldr	r3, [sp, #24]
   2423a:	4798      	blx	r3
   2423c:	2800      	cmp	r0, #0
   2423e:	dbeb      	blt.n	24218 <cbvprintf+0xb78>
   24240:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   24242:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   24246:	0650      	lsls	r0, r2, #25
   24248:	d57c      	bpl.n	24344 <cbvprintf+0xca4>
			if (conv->specifier_a) {
   2424a:	f99d 2059 	ldrsb.w	r2, [sp, #89]	; 0x59
   2424e:	2a00      	cmp	r2, #0
   24250:	db2b      	blt.n	242aa <cbvprintf+0xc0a>
   24252:	eba5 0509 	sub.w	r5, r5, r9
   24256:	464e      	mov	r6, r9
				while (isdigit((int)*cp)) {
   24258:	f899 0000 	ldrb.w	r0, [r9]
   2425c:	4b59      	ldr	r3, [pc, #356]	; (243c4 <cbvprintf+0xd24>)
   2425e:	19af      	adds	r7, r5, r6
   24260:	5cc2      	ldrb	r2, [r0, r3]
   24262:	f109 0901 	add.w	r9, r9, #1
   24266:	0751      	lsls	r1, r2, #29
   24268:	d43f      	bmi.n	242ea <cbvprintf+0xc4a>
				if (!conv->pad_postdp) {
   2426a:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
				pad_len = conv->pad0_value;
   2426e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
				if (!conv->pad_postdp) {
   24272:	0692      	lsls	r2, r2, #26
   24274:	d408      	bmi.n	24288 <cbvprintf+0xbe8>
   24276:	eb09 0507 	add.w	r5, r9, r7
   2427a:	464a      	mov	r2, r9
					while (pad_len-- > 0) {
   2427c:	2a00      	cmp	r2, #0
   2427e:	eba5 0709 	sub.w	r7, r5, r9
   24282:	f109 39ff 	add.w	r9, r9, #4294967295
   24286:	dc36      	bgt.n	242f6 <cbvprintf+0xc56>
				if (*cp == '.') {
   24288:	7830      	ldrb	r0, [r6, #0]
   2428a:	282e      	cmp	r0, #46	; 0x2e
   2428c:	d10a      	bne.n	242a4 <cbvprintf+0xc04>
					OUTC(*cp++);
   2428e:	4641      	mov	r1, r8
   24290:	9b06      	ldr	r3, [sp, #24]
   24292:	4798      	blx	r3
						OUTC('0');
   24294:	2800      	cmp	r0, #0
   24296:	dbbf      	blt.n	24218 <cbvprintf+0xb78>
					while (pad_len-- > 0) {
   24298:	f1b9 0f00 	cmp.w	r9, #0
						OUTC('0');
   2429c:	f107 0701 	add.w	r7, r7, #1
					while (pad_len-- > 0) {
   242a0:	dc30      	bgt.n	24304 <cbvprintf+0xc64>
					OUTC(*cp++);
   242a2:	3601      	adds	r6, #1
   242a4:	46b1      	mov	r9, r6
   242a6:	1bbf      	subs	r7, r7, r6
   242a8:	e039      	b.n	2431e <cbvprintf+0xc7e>
   242aa:	eba5 0709 	sub.w	r7, r5, r9
   242ae:	464d      	mov	r5, r9
   242b0:	eb07 0609 	add.w	r6, r7, r9
				while (*cp != 'p') {
   242b4:	f819 0b01 	ldrb.w	r0, [r9], #1
   242b8:	2870      	cmp	r0, #112	; 0x70
   242ba:	d110      	bne.n	242de <cbvprintf+0xc3e>
			while (pad_len-- > 0) {
   242bc:	9f18      	ldr	r7, [sp, #96]	; 0x60
   242be:	4437      	add	r7, r6
   242c0:	1bba      	subs	r2, r7, r6
   242c2:	2a00      	cmp	r2, #0
   242c4:	dc35      	bgt.n	24332 <cbvprintf+0xc92>
			OUTS(cp, bpe);
   242c6:	465b      	mov	r3, fp
   242c8:	462a      	mov	r2, r5
   242ca:	4641      	mov	r1, r8
   242cc:	9806      	ldr	r0, [sp, #24]
   242ce:	f018 ffed 	bl	3d2ac <outs>
   242d2:	2800      	cmp	r0, #0
   242d4:	dba0      	blt.n	24218 <cbvprintf+0xb78>
   242d6:	4430      	add	r0, r6
			while (pad_len-- > 0) {
   242d8:	4605      	mov	r5, r0
   242da:	4482      	add	sl, r0
   242dc:	e06c      	b.n	243b8 <cbvprintf+0xd18>
					OUTC(*cp++);
   242de:	4641      	mov	r1, r8
   242e0:	9b06      	ldr	r3, [sp, #24]
   242e2:	4798      	blx	r3
   242e4:	2800      	cmp	r0, #0
   242e6:	dae2      	bge.n	242ae <cbvprintf+0xc0e>
   242e8:	e796      	b.n	24218 <cbvprintf+0xb78>
					OUTC(*cp++);
   242ea:	4641      	mov	r1, r8
   242ec:	9b06      	ldr	r3, [sp, #24]
   242ee:	4798      	blx	r3
   242f0:	2800      	cmp	r0, #0
   242f2:	dab0      	bge.n	24256 <cbvprintf+0xbb6>
   242f4:	e790      	b.n	24218 <cbvprintf+0xb78>
						OUTC('0');
   242f6:	4641      	mov	r1, r8
   242f8:	2030      	movs	r0, #48	; 0x30
   242fa:	9b06      	ldr	r3, [sp, #24]
   242fc:	4798      	blx	r3
   242fe:	2800      	cmp	r0, #0
   24300:	dabb      	bge.n	2427a <cbvprintf+0xbda>
   24302:	e789      	b.n	24218 <cbvprintf+0xb78>
						OUTC('0');
   24304:	4641      	mov	r1, r8
   24306:	2030      	movs	r0, #48	; 0x30
   24308:	9b06      	ldr	r3, [sp, #24]
   2430a:	4798      	blx	r3
   2430c:	f109 39ff 	add.w	r9, r9, #4294967295
   24310:	e7c0      	b.n	24294 <cbvprintf+0xbf4>
					OUTC(*cp++);
   24312:	4641      	mov	r1, r8
   24314:	9b06      	ldr	r3, [sp, #24]
   24316:	4798      	blx	r3
   24318:	2800      	cmp	r0, #0
   2431a:	f6ff af7d 	blt.w	24218 <cbvprintf+0xb78>
				while (isdigit((int)*cp)) {
   2431e:	4b29      	ldr	r3, [pc, #164]	; (243c4 <cbvprintf+0xd24>)
   24320:	464d      	mov	r5, r9
   24322:	eb07 0609 	add.w	r6, r7, r9
   24326:	f819 0b01 	ldrb.w	r0, [r9], #1
   2432a:	5cc2      	ldrb	r2, [r0, r3]
   2432c:	0753      	lsls	r3, r2, #29
   2432e:	d4f0      	bmi.n	24312 <cbvprintf+0xc72>
   24330:	e7c4      	b.n	242bc <cbvprintf+0xc1c>
				OUTC('0');
   24332:	4641      	mov	r1, r8
   24334:	2030      	movs	r0, #48	; 0x30
   24336:	9b06      	ldr	r3, [sp, #24]
   24338:	4798      	blx	r3
   2433a:	2800      	cmp	r0, #0
   2433c:	f6ff af6c 	blt.w	24218 <cbvprintf+0xb78>
   24340:	3601      	adds	r6, #1
   24342:	e7bd      	b.n	242c0 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
   24344:	06d1      	lsls	r1, r2, #27
   24346:	d401      	bmi.n	2434c <cbvprintf+0xcac>
   24348:	0712      	lsls	r2, r2, #28
   2434a:	d507      	bpl.n	2435c <cbvprintf+0xcbc>
				OUTC('0');
   2434c:	4641      	mov	r1, r8
   2434e:	2030      	movs	r0, #48	; 0x30
   24350:	9b06      	ldr	r3, [sp, #24]
   24352:	4798      	blx	r3
   24354:	2800      	cmp	r0, #0
   24356:	f6ff af5f 	blt.w	24218 <cbvprintf+0xb78>
   2435a:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   2435c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
   24360:	06d3      	lsls	r3, r2, #27
   24362:	d508      	bpl.n	24376 <cbvprintf+0xcd6>
				OUTC(conv->specifier);
   24364:	4641      	mov	r1, r8
   24366:	f89d 005b 	ldrb.w	r0, [sp, #91]	; 0x5b
   2436a:	9b06      	ldr	r3, [sp, #24]
   2436c:	4798      	blx	r3
   2436e:	2800      	cmp	r0, #0
   24370:	f6ff af52 	blt.w	24218 <cbvprintf+0xb78>
   24374:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   24376:	9f17      	ldr	r7, [sp, #92]	; 0x5c
   24378:	442f      	add	r7, r5
   2437a:	1b7a      	subs	r2, r7, r5
   2437c:	2a00      	cmp	r2, #0
   2437e:	dc0a      	bgt.n	24396 <cbvprintf+0xcf6>
			OUTS(bps, bpe);
   24380:	465b      	mov	r3, fp
   24382:	464a      	mov	r2, r9
   24384:	4641      	mov	r1, r8
   24386:	9806      	ldr	r0, [sp, #24]
   24388:	f018 ff90 	bl	3d2ac <outs>
   2438c:	2800      	cmp	r0, #0
   2438e:	f6ff af43 	blt.w	24218 <cbvprintf+0xb78>
   24392:	4428      	add	r0, r5
   24394:	e7a0      	b.n	242d8 <cbvprintf+0xc38>
				OUTC('0');
   24396:	4641      	mov	r1, r8
   24398:	2030      	movs	r0, #48	; 0x30
   2439a:	9b06      	ldr	r3, [sp, #24]
   2439c:	4798      	blx	r3
   2439e:	2800      	cmp	r0, #0
   243a0:	f6ff af3a 	blt.w	24218 <cbvprintf+0xb78>
   243a4:	3501      	adds	r5, #1
   243a6:	e7e8      	b.n	2437a <cbvprintf+0xcda>
			OUTC(' ');
   243a8:	4641      	mov	r1, r8
   243aa:	2020      	movs	r0, #32
   243ac:	9b06      	ldr	r3, [sp, #24]
   243ae:	4798      	blx	r3
   243b0:	2800      	cmp	r0, #0
   243b2:	f6ff af31 	blt.w	24218 <cbvprintf+0xb78>
   243b6:	3501      	adds	r5, #1
		while (width > 0) {
   243b8:	ebaa 0305 	sub.w	r3, sl, r5
   243bc:	2b00      	cmp	r3, #0
   243be:	dcf3      	bgt.n	243a8 <cbvprintf+0xd08>
   243c0:	f7ff bbae 	b.w	23b20 <cbvprintf+0x480>
   243c4:	0004c29f 	.word	0x0004c29f

000243c8 <nordicsemi_nrf91_init>:
	__asm__ volatile(
   243c8:	f04f 0220 	mov.w	r2, #32
   243cc:	f3ef 8311 	mrs	r3, BASEPRI
   243d0:	f382 8811 	msr	BASEPRI, r2
   243d4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   243d8:	2101      	movs	r1, #1
   243da:	4a04      	ldr	r2, [pc, #16]	; (243ec <nordicsemi_nrf91_init+0x24>)
   243dc:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   243e0:	f383 8811 	msr	BASEPRI, r3
   243e4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   243e8:	2000      	movs	r0, #0
   243ea:	4770      	bx	lr
   243ec:	40039000 	.word	0x40039000

000243f0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   243f0:	b120      	cbz	r0, 243fc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   243f2:	4b03      	ldr	r3, [pc, #12]	; (24400 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   243f4:	0180      	lsls	r0, r0, #6
   243f6:	f043 0301 	orr.w	r3, r3, #1
   243fa:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   243fc:	4770      	bx	lr
   243fe:	bf00      	nop
   24400:	00043590 	.word	0x00043590

00024404 <log_generic>:
	return args;
}

void log_generic(struct log_msg_ids src_level, const char *fmt, va_list ap,
		 enum log_strdup_action strdup_action)
{
   24404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (_is_user_context()) {
		log_generic_from_user(src_level, fmt, ap);
	} else if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) &&
	    (!IS_ENABLED(CONFIG_LOG_FRONTEND))) {
		struct log_backend const *backend;
		uint32_t timestamp = timestamp_func();
   24408:	4b12      	ldr	r3, [pc, #72]	; (24454 <log_generic+0x50>)
{
   2440a:	b085      	sub	sp, #20
		uint32_t timestamp = timestamp_func();
   2440c:	681b      	ldr	r3, [r3, #0]
{
   2440e:	4680      	mov	r8, r0
   24410:	4689      	mov	r9, r1
   24412:	4617      	mov	r7, r2
		uint32_t timestamp = timestamp_func();
   24414:	4798      	blx	r3

		for (int i = 0; i < log_backend_count_get(); i++) {
   24416:	2600      	movs	r6, #0
		uint32_t timestamp = timestamp_func();
   24418:	4682      	mov	sl, r0
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   2441a:	4c0f      	ldr	r4, [pc, #60]	; (24458 <log_generic+0x54>)
   2441c:	4d0f      	ldr	r5, [pc, #60]	; (2445c <log_generic+0x58>)
   2441e:	1b2d      	subs	r5, r5, r4
   24420:	112d      	asrs	r5, r5, #4
		for (int i = 0; i < log_backend_count_get(); i++) {
   24422:	42b5      	cmp	r5, r6
   24424:	dc02      	bgt.n	2442c <log_generic+0x28>
				mask &= ~BIT(idx);
			}
		}
		log_n(fmt, args, nargs, src_level);
	}
}
   24426:	b005      	add	sp, #20
   24428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (log_backend_is_active(backend)) {
   2442c:	4620      	mov	r0, r4
   2442e:	f018 ff60 	bl	3d2f2 <log_backend_is_active>
   24432:	b160      	cbz	r0, 2444e <log_generic+0x4a>
	if (backend->api->put_sync_string) {
   24434:	6823      	ldr	r3, [r4, #0]
				va_copy(ap_tmp, ap);
   24436:	9703      	str	r7, [sp, #12]
   24438:	f8d3 b004 	ldr.w	fp, [r3, #4]
   2443c:	f1bb 0f00 	cmp.w	fp, #0
   24440:	d005      	beq.n	2444e <log_generic+0x4a>
		backend->api->put_sync_string(backend, src_level,
   24442:	464b      	mov	r3, r9
   24444:	4652      	mov	r2, sl
   24446:	4641      	mov	r1, r8
   24448:	4620      	mov	r0, r4
   2444a:	9700      	str	r7, [sp, #0]
   2444c:	47d8      	blx	fp
		for (int i = 0; i < log_backend_count_get(); i++) {
   2444e:	3601      	adds	r6, #1
   24450:	3410      	adds	r4, #16
   24452:	e7e6      	b.n	24422 <log_generic+0x1e>
   24454:	200154f8 	.word	0x200154f8
   24458:	00043504 	.word	0x00043504
   2445c:	00043514 	.word	0x00043514

00024460 <log_core_init>:
	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
		timestamp_func = k_uptime_get_32;
		freq = 1000;
	} else {
		timestamp_func = k_cycle_get_32_wrapper;
   24460:	4b03      	ldr	r3, [pc, #12]	; (24470 <log_core_init+0x10>)
   24462:	4a04      	ldr	r2, [pc, #16]	; (24474 <log_core_init+0x14>)
		freq = sys_clock_hw_cycles_per_sec();
	}

	log_output_timestamp_freq_set(freq);
   24464:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   24468:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   2446a:	f000 ba3f 	b.w	248ec <log_output_timestamp_freq_set>
   2446e:	bf00      	nop
   24470:	200154f8 	.word	0x200154f8
   24474:	0003d2f9 	.word	0x0003d2f9

00024478 <log_source_name_get>:
   24478:	4a04      	ldr	r2, [pc, #16]	; (2448c <log_source_name_get+0x14>)
   2447a:	4b05      	ldr	r3, [pc, #20]	; (24490 <log_source_name_get+0x18>)
   2447c:	1a9b      	subs	r3, r3, r2
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   2447e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   24482:	bf34      	ite	cc
   24484:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   24488:	2000      	movcs	r0, #0
}
   2448a:	4770      	bx	lr
   2448c:	0004339c 	.word	0x0004339c
   24490:	00043504 	.word	0x00043504

00024494 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   24494:	b570      	push	{r4, r5, r6, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   24496:	4c10      	ldr	r4, [pc, #64]	; (244d8 <log_backend_enable+0x44>)
{
   24498:	4605      	mov	r5, r0
	id += backend - log_backend_get(0);
   2449a:	1b04      	subs	r4, r0, r4
   2449c:	1124      	asrs	r4, r4, #4
   2449e:	3401      	adds	r4, #1
{
   244a0:	460e      	mov	r6, r1

	log_backend_id_set(backend, id);
   244a2:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   244a4:	b948      	cbnz	r0, 244ba <log_backend_enable+0x26>
   244a6:	490d      	ldr	r1, [pc, #52]	; (244dc <log_backend_enable+0x48>)
   244a8:	480d      	ldr	r0, [pc, #52]	; (244e0 <log_backend_enable+0x4c>)
   244aa:	23c0      	movs	r3, #192	; 0xc0
   244ac:	4a0d      	ldr	r2, [pc, #52]	; (244e4 <log_backend_enable+0x50>)
   244ae:	f018 fc62 	bl	3cd76 <printk>
   244b2:	21c0      	movs	r1, #192	; 0xc0
   244b4:	480b      	ldr	r0, [pc, #44]	; (244e4 <log_backend_enable+0x50>)
   244b6:	f018 ff12 	bl	3d2de <assert_post_action>
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
   244ba:	2201      	movs	r2, #1
	backend->cb->id = id;
   244bc:	686b      	ldr	r3, [r5, #4]
   244be:	711c      	strb	r4, [r3, #4]
	log_backend_activate(backend, ctx);

	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (!backend_attached) {
   244c0:	4c09      	ldr	r4, [pc, #36]	; (244e8 <log_backend_enable+0x54>)
	backend->cb->active = true;
   244c2:	715a      	strb	r2, [r3, #5]
   244c4:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   244c6:	601e      	str	r6, [r3, #0]
   244c8:	b912      	cbnz	r2, 244d0 <log_backend_enable+0x3c>
	z_impl_k_sem_give(sem);
   244ca:	4808      	ldr	r0, [pc, #32]	; (244ec <log_backend_enable+0x58>)
   244cc:	f014 fef2 	bl	392b4 <z_impl_k_sem_give>
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   244d0:	2301      	movs	r3, #1
   244d2:	7023      	strb	r3, [r4, #0]
}
   244d4:	bd70      	pop	{r4, r5, r6, pc}
   244d6:	bf00      	nop
   244d8:	00043504 	.word	0x00043504
   244dc:	00044da8 	.word	0x00044da8
   244e0:	00044dbf 	.word	0x00044dbf
   244e4:	00045a4c 	.word	0x00045a4c
   244e8:	2001ebd5 	.word	0x2001ebd5
   244ec:	20015ba0 	.word	0x20015ba0

000244f0 <log_init>:
	return __log_backends_end - __log_backends_start;
   244f0:	4b17      	ldr	r3, [pc, #92]	; (24550 <log_init+0x60>)
   244f2:	4a18      	ldr	r2, [pc, #96]	; (24554 <log_init+0x64>)
{
   244f4:	b570      	push	{r4, r5, r6, lr}
   244f6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   244f8:	2b9f      	cmp	r3, #159	; 0x9f
   244fa:	ea4f 1623 	mov.w	r6, r3, asr #4
   244fe:	d90b      	bls.n	24518 <log_init+0x28>
   24500:	4915      	ldr	r1, [pc, #84]	; (24558 <log_init+0x68>)
   24502:	4816      	ldr	r0, [pc, #88]	; (2455c <log_init+0x6c>)
   24504:	f240 230e 	movw	r3, #526	; 0x20e
   24508:	4a15      	ldr	r2, [pc, #84]	; (24560 <log_init+0x70>)
   2450a:	f018 fc34 	bl	3cd76 <printk>
   2450e:	f240 210e 	movw	r1, #526	; 0x20e
   24512:	4813      	ldr	r0, [pc, #76]	; (24560 <log_init+0x70>)
   24514:	f018 fee3 	bl	3d2de <assert_post_action>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   24518:	4b12      	ldr	r3, [pc, #72]	; (24564 <log_init+0x74>)
   2451a:	e8d3 4fef 	ldaex	r4, [r3]
   2451e:	1c62      	adds	r2, r4, #1
   24520:	e8c3 2fe1 	stlex	r1, r2, [r3]
   24524:	2900      	cmp	r1, #0
   24526:	d1f8      	bne.n	2451a <log_init+0x2a>
	if (atomic_inc(&initialized) != 0) {
   24528:	b914      	cbnz	r4, 24530 <log_init+0x40>
   2452a:	4d0a      	ldr	r5, [pc, #40]	; (24554 <log_init+0x64>)
	for (i = 0; i < log_backend_count_get(); i++) {
   2452c:	42b4      	cmp	r4, r6
   2452e:	db00      	blt.n	24532 <log_init+0x42>
}
   24530:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   24532:	7b2b      	ldrb	r3, [r5, #12]
   24534:	b143      	cbz	r3, 24548 <log_init+0x58>
			if (backend->api->init != NULL) {
   24536:	682b      	ldr	r3, [r5, #0]
   24538:	695b      	ldr	r3, [r3, #20]
   2453a:	b103      	cbz	r3, 2453e <log_init+0x4e>
				backend->api->init();
   2453c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   2453e:	2204      	movs	r2, #4
   24540:	2100      	movs	r1, #0
   24542:	4628      	mov	r0, r5
   24544:	f7ff ffa6 	bl	24494 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   24548:	3401      	adds	r4, #1
   2454a:	3510      	adds	r5, #16
   2454c:	e7ee      	b.n	2452c <log_init+0x3c>
   2454e:	bf00      	nop
   24550:	00043514 	.word	0x00043514
   24554:	00043504 	.word	0x00043504
   24558:	00045a7d 	.word	0x00045a7d
   2455c:	00044dbf 	.word	0x00044dbf
   24560:	00045a07 	.word	0x00045a07
   24564:	20018cb4 	.word	0x20018cb4

00024568 <z_impl_log_panic>:
{
   24568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   2456a:	4f0c      	ldr	r7, [pc, #48]	; (2459c <z_impl_log_panic+0x34>)
   2456c:	783d      	ldrb	r5, [r7, #0]
   2456e:	b94d      	cbnz	r5, 24584 <z_impl_log_panic+0x1c>
	log_init();
   24570:	f7ff ffbe 	bl	244f0 <log_init>
   24574:	4c0a      	ldr	r4, [pc, #40]	; (245a0 <z_impl_log_panic+0x38>)
   24576:	4e0b      	ldr	r6, [pc, #44]	; (245a4 <z_impl_log_panic+0x3c>)
   24578:	1b36      	subs	r6, r6, r4
   2457a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   2457c:	42b5      	cmp	r5, r6
   2457e:	db02      	blt.n	24586 <z_impl_log_panic+0x1e>
	panic_mode = true;
   24580:	2301      	movs	r3, #1
   24582:	703b      	strb	r3, [r7, #0]
}
   24584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   24586:	4620      	mov	r0, r4
   24588:	f018 feb3 	bl	3d2f2 <log_backend_is_active>
   2458c:	b118      	cbz	r0, 24596 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
   2458e:	6823      	ldr	r3, [r4, #0]
   24590:	4620      	mov	r0, r4
   24592:	691b      	ldr	r3, [r3, #16]
   24594:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   24596:	3501      	adds	r5, #1
   24598:	3410      	adds	r4, #16
   2459a:	e7ef      	b.n	2457c <z_impl_log_panic+0x14>
   2459c:	2001ebd6 	.word	0x2001ebd6
   245a0:	00043504 	.word	0x00043504
   245a4:	00043514 	.word	0x00043514

000245a8 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   245a8:	b40e      	push	{r1, r2, r3}
   245aa:	b503      	push	{r0, r1, lr}
   245ac:	ab03      	add	r3, sp, #12
   245ae:	f853 2b04 	ldr.w	r2, [r3], #4
   245b2:	4601      	mov	r1, r0
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   245b4:	4804      	ldr	r0, [pc, #16]	; (245c8 <print_formatted+0x20>)
	va_start(args, fmt);
   245b6:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
   245b8:	f7ff f872 	bl	236a0 <cbvprintf>
	va_end(args);

	return length;
}
   245bc:	b002      	add	sp, #8
   245be:	f85d eb04 	ldr.w	lr, [sp], #4
   245c2:	b003      	add	sp, #12
   245c4:	4770      	bx	lr
   245c6:	bf00      	nop
   245c8:	0003d329 	.word	0x0003d329

000245cc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
   245cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   245d0:	f011 0402 	ands.w	r4, r1, #2
{
   245d4:	b085      	sub	sp, #20
   245d6:	4606      	mov	r6, r0
   245d8:	4690      	mov	r8, r2
   245da:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   245de:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   245e2:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   245e6:	d007      	beq.n	245f8 <prefix_print+0x2c>
	if (!format) {
   245e8:	f011 0f44 	tst.w	r1, #68	; 0x44
   245ec:	d137      	bne.n	2465e <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   245ee:	461a      	mov	r2, r3
   245f0:	4932      	ldr	r1, [pc, #200]	; (246bc <prefix_print+0xf0>)
   245f2:	f7ff ffd9 	bl	245a8 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   245f6:	4604      	mov	r4, r0
	if (color) {
   245f8:	f1b9 0f00 	cmp.w	r9, #0
   245fc:	d00a      	beq.n	24614 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
   245fe:	4b30      	ldr	r3, [pc, #192]	; (246c0 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
   24600:	4630      	mov	r0, r6
		const char *log_color = start && (colors[level] != NULL) ?
   24602:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
   24606:	4b2f      	ldr	r3, [pc, #188]	; (246c4 <prefix_print+0xf8>)
   24608:	492f      	ldr	r1, [pc, #188]	; (246c8 <prefix_print+0xfc>)
   2460a:	2a00      	cmp	r2, #0
   2460c:	bf08      	it	eq
   2460e:	461a      	moveq	r2, r3
   24610:	f7ff ffca 	bl	245a8 <print_formatted>
	if (level_on) {
   24614:	b13d      	cbz	r5, 24626 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   24616:	4b2d      	ldr	r3, [pc, #180]	; (246cc <prefix_print+0x100>)
   24618:	4630      	mov	r0, r6
   2461a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   2461e:	492c      	ldr	r1, [pc, #176]	; (246d0 <prefix_print+0x104>)
   24620:	f7ff ffc2 	bl	245a8 <print_formatted>
   24624:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   24626:	f1b8 0f00 	cmp.w	r8, #0
   2462a:	d044      	beq.n	246b6 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   2462c:	2301      	movs	r3, #1
   2462e:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   24632:	4b28      	ldr	r3, [pc, #160]	; (246d4 <prefix_print+0x108>)
   24634:	f017 0f10 	tst.w	r7, #16
   24638:	4f27      	ldr	r7, [pc, #156]	; (246d8 <prefix_print+0x10c>)
   2463a:	bf18      	it	ne
   2463c:	461f      	movne	r7, r3
   2463e:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   24642:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   24646:	f7ff ff17 	bl	24478 <log_source_name_get>
   2464a:	4639      	mov	r1, r7
   2464c:	4602      	mov	r2, r0
   2464e:	4630      	mov	r0, r6
   24650:	f7ff ffaa 	bl	245a8 <print_formatted>
   24654:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
   24656:	4420      	add	r0, r4
   24658:	b005      	add	sp, #20
   2465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   2465e:	4a1f      	ldr	r2, [pc, #124]	; (246dc <prefix_print+0x110>)
   24660:	6811      	ldr	r1, [r2, #0]
   24662:	b331      	cbz	r1, 246b2 <prefix_print+0xe6>
		timestamp /= timestamp_div;
   24664:	4a1e      	ldr	r2, [pc, #120]	; (246e0 <prefix_print+0x114>)
   24666:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   2466a:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   2466c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   24670:	fbb3 f3f4 	udiv	r3, r3, r4
		total_seconds = timestamp / freq;
   24674:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   24678:	fbb4 f2fe 	udiv	r2, r4, lr
   2467c:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   24680:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   24684:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24688:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   2468c:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   24690:	fb01 441b 	mls	r4, r1, fp, r4
   24694:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   24698:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   2469c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   246a0:	e9cd b101 	strd	fp, r1, [sp, #4]
   246a4:	fb0a e113 	mls	r1, sl, r3, lr
   246a8:	9100      	str	r1, [sp, #0]
   246aa:	490e      	ldr	r1, [pc, #56]	; (246e4 <prefix_print+0x118>)
   246ac:	f7ff ff7c 	bl	245a8 <print_formatted>
   246b0:	e7a1      	b.n	245f6 <prefix_print+0x2a>
		length = 0;
   246b2:	4608      	mov	r0, r1
   246b4:	e79f      	b.n	245f6 <prefix_print+0x2a>
	total += print_formatted(log_output,
   246b6:	4f08      	ldr	r7, [pc, #32]	; (246d8 <prefix_print+0x10c>)
   246b8:	e7c1      	b.n	2463e <prefix_print+0x72>
   246ba:	bf00      	nop
   246bc:	00045ab3 	.word	0x00045ab3
   246c0:	0004376c 	.word	0x0004376c
   246c4:	00045aa5 	.word	0x00045aa5
   246c8:	0004b3c7 	.word	0x0004b3c7
   246cc:	00043780 	.word	0x00043780
   246d0:	00045ad8 	.word	0x00045ad8
   246d4:	00045aaf 	.word	0x00045aaf
   246d8:	00045aaa 	.word	0x00045aaa
   246dc:	20018cb8 	.word	0x20018cb8
   246e0:	20018cbc 	.word	0x20018cbc
   246e4:	00045abc 	.word	0x00045abc

000246e8 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
   246e8:	b538      	push	{r3, r4, r5, lr}
   246ea:	460c      	mov	r4, r1
	if (color) {
   246ec:	07e1      	lsls	r1, r4, #31
{
   246ee:	4605      	mov	r5, r0
	if (color) {
   246f0:	d503      	bpl.n	246fa <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
   246f2:	4a08      	ldr	r2, [pc, #32]	; (24714 <postfix_print+0x2c>)
   246f4:	4908      	ldr	r1, [pc, #32]	; (24718 <postfix_print+0x30>)
   246f6:	f7ff ff57 	bl	245a8 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   246fa:	06e2      	lsls	r2, r4, #27
   246fc:	d408      	bmi.n	24710 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   246fe:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   24700:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   24702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   24706:	bf4c      	ite	mi
   24708:	4904      	ldrmi	r1, [pc, #16]	; (2471c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   2470a:	4905      	ldrpl	r1, [pc, #20]	; (24720 <postfix_print+0x38>)
   2470c:	f7ff bf4c 	b.w	245a8 <print_formatted>
}
   24710:	bd38      	pop	{r3, r4, r5, pc}
   24712:	bf00      	nop
   24714:	00045aa5 	.word	0x00045aa5
   24718:	0004b3c7 	.word	0x0004b3c7
   2471c:	00045c28 	.word	0x00045c28
   24720:	0004a585 	.word	0x0004a585

00024724 <hexdump_line_print>:
{
   24724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24728:	461d      	mov	r5, r3
   2472a:	9b08      	ldr	r3, [sp, #32]
   2472c:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   2472e:	06da      	lsls	r2, r3, #27
{
   24730:	4604      	mov	r4, r0
   24732:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   24734:	d405      	bmi.n	24742 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   24736:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   24738:	bf4c      	ite	mi
   2473a:	492b      	ldrmi	r1, [pc, #172]	; (247e8 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   2473c:	492b      	ldrpl	r1, [pc, #172]	; (247ec <hexdump_line_print+0xc8>)
   2473e:	f7ff ff33 	bl	245a8 <print_formatted>
{
   24742:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   24746:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 247f4 <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   2474a:	45a8      	cmp	r8, r5
   2474c:	db2d      	blt.n	247aa <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2474e:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   24750:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 247f8 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   24754:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 247fc <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   24758:	f8df a098 	ldr.w	sl, [pc, #152]	; 247f4 <hexdump_line_print+0xd0>
		if (i < length) {
   2475c:	42bd      	cmp	r5, r7
   2475e:	d232      	bcs.n	247c6 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   24760:	4649      	mov	r1, r9
   24762:	4620      	mov	r0, r4
   24764:	5d72      	ldrb	r2, [r6, r5]
   24766:	f7ff ff1f 	bl	245a8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   2476a:	3501      	adds	r5, #1
   2476c:	2d10      	cmp	r5, #16
   2476e:	d123      	bne.n	247b8 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   24770:	4620      	mov	r0, r4
   24772:	491f      	ldr	r1, [pc, #124]	; (247f0 <hexdump_line_print+0xcc>)
   24774:	f7ff ff18 	bl	245a8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   24778:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   2477a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 247f4 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   2477e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 24800 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   24782:	f8df a080 	ldr.w	sl, [pc, #128]	; 24804 <hexdump_line_print+0xe0>
		if (i < length) {
   24786:	42af      	cmp	r7, r5
   24788:	d929      	bls.n	247de <hexdump_line_print+0xba>
			char c = (char)data[i];
   2478a:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   2478c:	4651      	mov	r1, sl
   2478e:	f812 3009 	ldrb.w	r3, [r2, r9]
   24792:	4620      	mov	r0, r4
   24794:	f013 0f97 	tst.w	r3, #151	; 0x97
   24798:	bf08      	it	eq
   2479a:	222e      	moveq	r2, #46	; 0x2e
   2479c:	f7ff ff04 	bl	245a8 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   247a0:	3501      	adds	r5, #1
   247a2:	2d10      	cmp	r5, #16
   247a4:	d114      	bne.n	247d0 <hexdump_line_print+0xac>
}
   247a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   247aa:	4649      	mov	r1, r9
   247ac:	4620      	mov	r0, r4
   247ae:	f7ff fefb 	bl	245a8 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   247b2:	f108 0801 	add.w	r8, r8, #1
   247b6:	e7c8      	b.n	2474a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   247b8:	076a      	lsls	r2, r5, #29
   247ba:	d1cf      	bne.n	2475c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   247bc:	4651      	mov	r1, sl
   247be:	4620      	mov	r0, r4
   247c0:	f7ff fef2 	bl	245a8 <print_formatted>
   247c4:	e7ca      	b.n	2475c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   247c6:	4641      	mov	r1, r8
   247c8:	4620      	mov	r0, r4
   247ca:	f7ff feed 	bl	245a8 <print_formatted>
   247ce:	e7cc      	b.n	2476a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   247d0:	076b      	lsls	r3, r5, #29
   247d2:	d1d8      	bne.n	24786 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   247d4:	4641      	mov	r1, r8
   247d6:	4620      	mov	r0, r4
   247d8:	f7ff fee6 	bl	245a8 <print_formatted>
   247dc:	e7d3      	b.n	24786 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   247de:	4641      	mov	r1, r8
   247e0:	4620      	mov	r0, r4
   247e2:	f7ff fee1 	bl	245a8 <print_formatted>
   247e6:	e7db      	b.n	247a0 <hexdump_line_print+0x7c>
   247e8:	00045c28 	.word	0x00045c28
   247ec:	0004a585 	.word	0x0004a585
   247f0:	00045ae8 	.word	0x00045ae8
   247f4:	00045ae6 	.word	0x00045ae6
   247f8:	00045ae4 	.word	0x00045ae4
   247fc:	00045ade 	.word	0x00045ade
   24800:	0004c29f 	.word	0x0004c29f
   24804:	00045aea 	.word	0x00045aea

00024808 <log_output_string>:
}

void log_output_string(const struct log_output *log_output,
		       struct log_msg_ids src_level, uint32_t timestamp,
		       const char *fmt, va_list ap, uint32_t flags)
{
   24808:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		log_output_string_syst_process(log_output,
				src_level, fmt, ap, flags);
		return;
	}

	if (!raw_string) {
   2480c:	f011 0607 	ands.w	r6, r1, #7
{
   24810:	4605      	mov	r5, r0
   24812:	e9dd 870a 	ldrd	r8, r7, [sp, #40]	; 0x28
   24816:	461c      	mov	r4, r3
	if (!raw_string) {
   24818:	d00b      	beq.n	24832 <log_output_string+0x2a>
		prefix_print(log_output, flags, true, timestamp,
   2481a:	f3c1 1389 	ubfx	r3, r1, #6, #10
   2481e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   24822:	e9cd 6100 	strd	r6, r1, [sp]
   24826:	9302      	str	r3, [sp, #8]
   24828:	4639      	mov	r1, r7
   2482a:	4613      	mov	r3, r2
   2482c:	2201      	movs	r2, #1
   2482e:	f7ff fecd 	bl	245cc <prefix_print>
				level, domain_id, source_id);
	}

	length = cbvprintf(out_func, (void *)log_output, fmt, ap);
   24832:	4643      	mov	r3, r8
   24834:	4622      	mov	r2, r4
   24836:	4629      	mov	r1, r5
   24838:	480d      	ldr	r0, [pc, #52]	; (24870 <log_output_string+0x68>)
   2483a:	f7fe ff31 	bl	236a0 <cbvprintf>

	(void)length;

	if (raw_string) {
   2483e:	b98e      	cbnz	r6, 24864 <log_output_string+0x5c>
   24840:	3c01      	subs	r4, #1
	while (*fmt != '\0') {
   24842:	4633      	mov	r3, r6
   24844:	f814 6f01 	ldrb.w	r6, [r4, #1]!
   24848:	2e00      	cmp	r6, #0
   2484a:	d1fa      	bne.n	24842 <log_output_string+0x3a>
		/* add \r if string ends with newline. */
		if (ends_with_newline(fmt)) {
   2484c:	2b0a      	cmp	r3, #10
   2484e:	d103      	bne.n	24858 <log_output_string+0x50>
			print_formatted(log_output, "\r");
   24850:	4628      	mov	r0, r5
   24852:	4908      	ldr	r1, [pc, #32]	; (24874 <log_output_string+0x6c>)
   24854:	f7ff fea8 	bl	245a8 <print_formatted>
		}
	} else {
		postfix_print(log_output, flags, level);
	}

	log_output_flush(log_output);
   24858:	4628      	mov	r0, r5
}
   2485a:	b004      	add	sp, #16
   2485c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	log_output_flush(log_output);
   24860:	f018 bd7b 	b.w	3d35a <log_output_flush>
		postfix_print(log_output, flags, level);
   24864:	4632      	mov	r2, r6
   24866:	4639      	mov	r1, r7
   24868:	4628      	mov	r0, r5
   2486a:	f7ff ff3d 	bl	246e8 <postfix_print>
   2486e:	e7f3      	b.n	24858 <log_output_string+0x50>
   24870:	0003d329 	.word	0x0003d329
   24874:	00045b2d 	.word	0x00045b2d

00024878 <log_output_hexdump>:

void log_output_hexdump(const struct log_output *log_output,
			     struct log_msg_ids src_level, uint32_t timestamp,
			     const char *metadata, const uint8_t *data,
			     uint32_t length, uint32_t flags)
{
   24878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2487c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   2487e:	4698      	mov	r8, r3
   24880:	e9dd 750c 	ldrd	r7, r5, [sp, #48]	; 0x30
		log_output_hexdump_syst_process(log_output,
				src_level, data, length, flags);
		return;
	}

	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   24884:	f3c1 1389 	ubfx	r3, r1, #6, #10
	uint8_t level = (uint8_t)src_level.level;
   24888:	f001 0907 	and.w	r9, r1, #7
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   2488c:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   24890:	e9cd 9100 	strd	r9, r1, [sp]
   24894:	9302      	str	r3, [sp, #8]
   24896:	4631      	mov	r1, r6
   24898:	4613      	mov	r3, r2
   2489a:	2201      	movs	r2, #1
{
   2489c:	4604      	mov	r4, r0
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   2489e:	f7ff fe95 	bl	245cc <prefix_print>
				     level, domain_id, source_id);

	/* Print metadata */
	print_formatted(log_output, "%s", metadata);
   248a2:	4642      	mov	r2, r8
	prefix_offset = prefix_print(log_output, flags, true, timestamp,
   248a4:	4682      	mov	sl, r0
	print_formatted(log_output, "%s", metadata);
   248a6:	4910      	ldr	r1, [pc, #64]	; (248e8 <log_output_hexdump+0x70>)
   248a8:	4620      	mov	r0, r4
   248aa:	f7ff fe7d 	bl	245a8 <print_formatted>

	while (length) {
   248ae:	b955      	cbnz	r5, 248c6 <log_output_hexdump+0x4e>

		data += part_len;
		length -= part_len;
	};

	postfix_print(log_output, flags, level);
   248b0:	4620      	mov	r0, r4
   248b2:	464a      	mov	r2, r9
   248b4:	4631      	mov	r1, r6
   248b6:	f7ff ff17 	bl	246e8 <postfix_print>
	log_output_flush(log_output);
   248ba:	4620      	mov	r0, r4
}
   248bc:	b004      	add	sp, #16
   248be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
   248c2:	f018 bd4a 	b.w	3d35a <log_output_flush>
		uint32_t part_len = length > HEXDUMP_BYTES_IN_LINE ?
   248c6:	2d10      	cmp	r5, #16
   248c8:	46a8      	mov	r8, r5
   248ca:	bf28      	it	cs
   248cc:	f04f 0810 	movcs.w	r8, #16
		hexdump_line_print(log_output, data, part_len,
   248d0:	4639      	mov	r1, r7
   248d2:	4653      	mov	r3, sl
   248d4:	4642      	mov	r2, r8
   248d6:	4620      	mov	r0, r4
   248d8:	9600      	str	r6, [sp, #0]
   248da:	f7ff ff23 	bl	24724 <hexdump_line_print>
		data += part_len;
   248de:	4447      	add	r7, r8
		length -= part_len;
   248e0:	eba5 0508 	sub.w	r5, r5, r8
   248e4:	e7e3      	b.n	248ae <log_output_hexdump+0x36>
   248e6:	bf00      	nop
   248e8:	0004b3c7 	.word	0x0004b3c7

000248ec <log_output_timestamp_freq_set>:
		     log_output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   248ec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   248ee:	2100      	movs	r1, #0
	timestamp_div = 1U;
   248f0:	4a07      	ldr	r2, [pc, #28]	; (24910 <log_output_timestamp_freq_set+0x24>)
{
   248f2:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   248f4:	4c07      	ldr	r4, [pc, #28]	; (24914 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   248f6:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   248f8:	42a0      	cmp	r0, r4
   248fa:	d804      	bhi.n	24906 <log_output_timestamp_freq_set+0x1a>
   248fc:	b101      	cbz	r1, 24900 <log_output_timestamp_freq_set+0x14>
   248fe:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   24900:	4b05      	ldr	r3, [pc, #20]	; (24918 <log_output_timestamp_freq_set+0x2c>)
   24902:	6018      	str	r0, [r3, #0]
}
   24904:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   24906:	2101      	movs	r1, #1
		frequency /= 2U;
   24908:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   2490a:	005b      	lsls	r3, r3, #1
   2490c:	e7f4      	b.n	248f8 <log_output_timestamp_freq_set+0xc>
   2490e:	bf00      	nop
   24910:	20018cbc 	.word	0x20018cbc
   24914:	000f4240 	.word	0x000f4240
   24918:	20018cb8 	.word	0x20018cb8

0002491c <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   2491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2491e:	460d      	mov	r5, r1
   24920:	4604      	mov	r4, r0
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
   24922:	4f06      	ldr	r7, [pc, #24]	; (2493c <char_out+0x20>)
   24924:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
   24926:	42b4      	cmp	r4, r6
   24928:	d101      	bne.n	2492e <char_out+0x12>
	}

	return length;
}
   2492a:	4628      	mov	r0, r5
   2492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
   2492e:	6838      	ldr	r0, [r7, #0]
   24930:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   24934:	6883      	ldr	r3, [r0, #8]
   24936:	685b      	ldr	r3, [r3, #4]
   24938:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   2493a:	e7f4      	b.n	24926 <char_out+0xa>
   2493c:	20018cd4 	.word	0x20018cd4

00024940 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   24940:	4801      	ldr	r0, [pc, #4]	; (24948 <panic+0x8>)
   24942:	f018 bd0a 	b.w	3d35a <log_output_flush>
   24946:	bf00      	nop
   24948:	000437ac 	.word	0x000437ac

0002494c <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
   2494c:	b508      	push	{r3, lr}
   2494e:	4809      	ldr	r0, [pc, #36]	; (24974 <log_backend_uart_init+0x28>)
   24950:	f012 fb88 	bl	37064 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   24954:	4b08      	ldr	r3, [pc, #32]	; (24978 <log_backend_uart_init+0x2c>)
   24956:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
   24958:	b958      	cbnz	r0, 24972 <log_backend_uart_init+0x26>
   2495a:	232d      	movs	r3, #45	; 0x2d
   2495c:	4907      	ldr	r1, [pc, #28]	; (2497c <log_backend_uart_init+0x30>)
   2495e:	4808      	ldr	r0, [pc, #32]	; (24980 <log_backend_uart_init+0x34>)
   24960:	4a08      	ldr	r2, [pc, #32]	; (24984 <log_backend_uart_init+0x38>)
   24962:	f018 fa08 	bl	3cd76 <printk>
}
   24966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG((void *)uart_dev);
   2496a:	212d      	movs	r1, #45	; 0x2d
   2496c:	4805      	ldr	r0, [pc, #20]	; (24984 <log_backend_uart_init+0x38>)
   2496e:	f018 bcb6 	b.w	3d2de <assert_post_action>
}
   24972:	bd08      	pop	{r3, pc}
   24974:	00045b4f 	.word	0x00045b4f
   24978:	20018cd4 	.word	0x20018cd4
   2497c:	00045b8b 	.word	0x00045b8b
   24980:	00044dbf 	.word	0x00044dbf
   24984:	00045b56 	.word	0x00045b56

00024988 <sync_hexdump>:
}

static void sync_hexdump(const struct log_backend *const backend,
			 struct log_msg_ids src_level, uint32_t timestamp,
			 const char *metadata, const uint8_t *data, uint32_t length)
{
   24988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		 * by another one, lock context for whole log processing.
		 */
		key = irq_lock();
	}

	log_output_hexdump(log_output, src_level, timestamp,
   2498a:	200f      	movs	r0, #15
   2498c:	9002      	str	r0, [sp, #8]
   2498e:	9807      	ldr	r0, [sp, #28]
   24990:	9001      	str	r0, [sp, #4]
   24992:	9806      	ldr	r0, [sp, #24]
   24994:	9000      	str	r0, [sp, #0]
   24996:	4803      	ldr	r0, [pc, #12]	; (249a4 <sync_hexdump+0x1c>)
   24998:	f7ff ff6e 	bl	24878 <log_output_hexdump>
	uint32_t flag = IS_ENABLED(CONFIG_LOG_BACKEND_UART_SYST_ENABLE) ?
		LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_backend_std_sync_hexdump(&log_output_uart, flag, src_level,
				     timestamp, metadata, data, length);
}
   2499c:	b005      	add	sp, #20
   2499e:	f85d fb04 	ldr.w	pc, [sp], #4
   249a2:	bf00      	nop
   249a4:	000437ac 	.word	0x000437ac

000249a8 <sync_string>:
{
   249a8:	b507      	push	{r0, r1, r2, lr}
	log_output_string(log_output, src_level, timestamp, fmt, ap, flags);
   249aa:	200f      	movs	r0, #15
   249ac:	9001      	str	r0, [sp, #4]
   249ae:	9804      	ldr	r0, [sp, #16]
   249b0:	9000      	str	r0, [sp, #0]
   249b2:	4803      	ldr	r0, [pc, #12]	; (249c0 <sync_string+0x18>)
   249b4:	f7ff ff28 	bl	24808 <log_output_string>
}
   249b8:	b003      	add	sp, #12
   249ba:	f85d fb04 	ldr.w	pc, [sp], #4
   249be:	bf00      	nop
   249c0:	000437ac 	.word	0x000437ac

000249c4 <fcb_append>:
	return 0;
}

int
fcb_append(struct fcb *fcb, uint16_t len, struct fcb_entry *append_loc)
{
   249c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249c8:	b085      	sub	sp, #20
   249ca:	460d      	mov	r5, r1
   249cc:	4690      	mov	r8, r2
	struct fcb_entry *active;
	int cnt;
	int rc;
	uint8_t tmp_str[8];

	cnt = fcb_put_len(fcb, tmp_str, len);
   249ce:	460a      	mov	r2, r1
   249d0:	a902      	add	r1, sp, #8
{
   249d2:	4604      	mov	r4, r0
	cnt = fcb_put_len(fcb, tmp_str, len);
   249d4:	f018 fd67 	bl	3d4a6 <fcb_put_len>
	if (cnt < 0) {
   249d8:	1e06      	subs	r6, r0, #0
   249da:	db76      	blt.n	24aca <fcb_append+0x106>
		return cnt;
	}
	cnt = fcb_len_in_flash(fcb, cnt);
   249dc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
int fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len);
int fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len);

static inline int fcb_len_in_flash(struct fcb *fcb, uint16_t len)
{
	if (fcb->f_align <= 1U) {
   249e0:	b2b7      	uxth	r7, r6
   249e2:	2b01      	cmp	r3, #1
   249e4:	d906      	bls.n	249f4 <fcb_append+0x30>
		return len;
	}
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   249e6:	1e5a      	subs	r2, r3, #1
   249e8:	3d01      	subs	r5, #1
   249ea:	4259      	negs	r1, r3
   249ec:	4417      	add	r7, r2
   249ee:	441d      	add	r5, r3
   249f0:	400f      	ands	r7, r1
   249f2:	400d      	ands	r5, r1
	if (fcb->f_align <= 1U) {
   249f4:	2b01      	cmp	r3, #1
		return len;
   249f6:	bf92      	itee	ls
   249f8:	2301      	movls	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   249fa:	425a      	neghi	r2, r3
   249fc:	4013      	andhi	r3, r2
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   249fe:	b22d      	sxth	r5, r5
   24a00:	441d      	add	r5, r3

	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   24a02:	2f08      	cmp	r7, #8
	len = fcb_len_in_flash(fcb, len) + fcb_len_in_flash(fcb, FCB_CRC_SZ);
   24a04:	b2ad      	uxth	r5, r5
	__ASSERT_NO_MSG(cnt <= sizeof(tmp_str));
   24a06:	dd09      	ble.n	24a1c <fcb_append+0x58>
   24a08:	4937      	ldr	r1, [pc, #220]	; (24ae8 <fcb_append+0x124>)
   24a0a:	4838      	ldr	r0, [pc, #224]	; (24aec <fcb_append+0x128>)
   24a0c:	234b      	movs	r3, #75	; 0x4b
   24a0e:	4a38      	ldr	r2, [pc, #224]	; (24af0 <fcb_append+0x12c>)
   24a10:	f018 f9b1 	bl	3cd76 <printk>
   24a14:	214b      	movs	r1, #75	; 0x4b
   24a16:	4836      	ldr	r0, [pc, #216]	; (24af0 <fcb_append+0x12c>)
   24a18:	f018 fc61 	bl	3d2de <assert_post_action>

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   24a1c:	f104 0a0c 	add.w	sl, r4, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   24a20:	f04f 32ff 	mov.w	r2, #4294967295
   24a24:	f04f 33ff 	mov.w	r3, #4294967295
   24a28:	4650      	mov	r0, sl
   24a2a:	f012 ff51 	bl	378d0 <z_impl_k_mutex_lock>
	if (rc) {
   24a2e:	4606      	mov	r6, r0
   24a30:	2800      	cmp	r0, #0
   24a32:	d156      	bne.n	24ae2 <fcb_append+0x11e>
		return -EINVAL;
	}
	active = &fcb->f_active;
	if (active->fe_elem_off + len + cnt > active->fe_sector->fs_size) {
   24a34:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
   24a38:	684a      	ldr	r2, [r1, #4]
   24a3a:	443b      	add	r3, r7
   24a3c:	442b      	add	r3, r5
   24a3e:	4293      	cmp	r3, r2
   24a40:	d92b      	bls.n	24a9a <fcb_append+0xd6>
	prev = NULL;
   24a42:	4681      	mov	r9, r0
		sector = fcb_new_sector(fcb, fcb->f_scratch_cnt);
   24a44:	f894 b006 	ldrb.w	fp, [r4, #6]
		cur = fcb_getnext_sector(fcb, cur);
   24a48:	4620      	mov	r0, r4
   24a4a:	f018 fedf 	bl	3d80c <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   24a4e:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   24a50:	f1b9 0f00 	cmp.w	r9, #0
   24a54:	bf08      	it	eq
   24a56:	4681      	moveq	r9, r0
		if (cur == fcb->f_oldest) {
   24a58:	4298      	cmp	r0, r3
		cur = fcb_getnext_sector(fcb, cur);
   24a5a:	4601      	mov	r1, r0
		if (cur == fcb->f_oldest) {
   24a5c:	d03b      	beq.n	24ad6 <fcb_append+0x112>
	} while (i++ < cnt);
   24a5e:	45b3      	cmp	fp, r6
   24a60:	f106 0301 	add.w	r3, r6, #1
   24a64:	dc35      	bgt.n	24ad2 <fcb_append+0x10e>
		if (!sector || (sector->fs_size <
   24a66:	f1b9 0f00 	cmp.w	r9, #0
   24a6a:	d034      	beq.n	24ad6 <fcb_append+0x112>
   24a6c:	f8d9 2004 	ldr.w	r2, [r9, #4]
			sizeof(struct fcb_disk_area) + len + cnt)) {
   24a70:	f107 0308 	add.w	r3, r7, #8
   24a74:	442b      	add	r3, r5
		if (!sector || (sector->fs_size <
   24a76:	429a      	cmp	r2, r3
   24a78:	d32d      	bcc.n	24ad6 <fcb_append+0x112>
			rc = -ENOSPC;
			goto err;
		}
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   24a7a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   24a7c:	4649      	mov	r1, r9
   24a7e:	3201      	adds	r2, #1
   24a80:	4620      	mov	r0, r4
   24a82:	b292      	uxth	r2, r2
   24a84:	f018 fd51 	bl	3d52a <fcb_sector_hdr_init>
		if (rc) {
   24a88:	4606      	mov	r6, r0
   24a8a:	b9d8      	cbnz	r0, 24ac4 <fcb_append+0x100>
			goto err;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   24a8c:	2308      	movs	r3, #8
   24a8e:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   24a90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   24a92:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
		fcb->f_active_id++;
   24a96:	3301      	adds	r3, #1
   24a98:	86a3      	strh	r3, [r4, #52]	; 0x34
	}

	rc = fcb_flash_write(fcb, active->fe_sector, active->fe_elem_off, tmp_str, cnt);
   24a9a:	4620      	mov	r0, r4
   24a9c:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   24aa0:	9700      	str	r7, [sp, #0]
   24aa2:	ab02      	add	r3, sp, #8
   24aa4:	f018 fccd 	bl	3d442 <fcb_flash_write>
	if (rc) {
   24aa8:	4606      	mov	r6, r0
   24aaa:	b9b8      	cbnz	r0, 24adc <fcb_append+0x118>
		rc = -EIO;
		goto err;
	}
	append_loc->fe_sector = active->fe_sector;
   24aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24aae:	f8c8 3000 	str.w	r3, [r8]
	append_loc->fe_elem_off = active->fe_elem_off;
   24ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24ab4:	f8c8 3004 	str.w	r3, [r8, #4]
	append_loc->fe_data_off = active->fe_elem_off + cnt;
   24ab8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24aba:	441f      	add	r7, r3
   24abc:	f8c8 7008 	str.w	r7, [r8, #8]

	active->fe_elem_off = append_loc->fe_data_off + len;
   24ac0:	442f      	add	r7, r5
   24ac2:	62a7      	str	r7, [r4, #40]	; 0x28
	return z_impl_k_mutex_unlock(mutex);
   24ac4:	4650      	mov	r0, sl
   24ac6:	f012 fffd 	bl	37ac4 <z_impl_k_mutex_unlock>

	return 0;
err:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   24aca:	4630      	mov	r0, r6
   24acc:	b005      	add	sp, #20
   24ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (i++ < cnt);
   24ad2:	461e      	mov	r6, r3
   24ad4:	e7b8      	b.n	24a48 <fcb_append+0x84>
			rc = -ENOSPC;
   24ad6:	f06f 061b 	mvn.w	r6, #27
   24ada:	e7f3      	b.n	24ac4 <fcb_append+0x100>
		rc = -EIO;
   24adc:	f06f 0604 	mvn.w	r6, #4
   24ae0:	e7f0      	b.n	24ac4 <fcb_append+0x100>
		return -EINVAL;
   24ae2:	f06f 0615 	mvn.w	r6, #21
   24ae6:	e7f0      	b.n	24aca <fcb_append+0x106>
   24ae8:	00045bdb 	.word	0x00045bdb
   24aec:	00044dbf 	.word	0x00044dbf
   24af0:	00045bad 	.word	0x00045bad

00024af4 <z_impl_zsock_socket>:

	return fd;
}

int z_impl_zsock_socket(int family, int type, int proto)
{
   24af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24af8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 24b98 <z_impl_zsock_socket+0xa4>
{
   24afc:	4605      	mov	r5, r0
   24afe:	460e      	mov	r6, r1
   24b00:	4617      	mov	r7, r2
   24b02:	46ca      	mov	sl, r9
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24b04:	4c1e      	ldr	r4, [pc, #120]	; (24b80 <z_impl_zsock_socket+0x8c>)
   24b06:	f8df 8094 	ldr.w	r8, [pc, #148]	; 24b9c <z_impl_zsock_socket+0xa8>
   24b0a:	454c      	cmp	r4, r9
   24b0c:	d90c      	bls.n	24b28 <z_impl_zsock_socket+0x34>
   24b0e:	491d      	ldr	r1, [pc, #116]	; (24b84 <z_impl_zsock_socket+0x90>)
   24b10:	23c2      	movs	r3, #194	; 0xc2
   24b12:	4642      	mov	r2, r8
   24b14:	481c      	ldr	r0, [pc, #112]	; (24b88 <z_impl_zsock_socket+0x94>)
   24b16:	f018 f92e 	bl	3cd76 <printk>
   24b1a:	481c      	ldr	r0, [pc, #112]	; (24b8c <z_impl_zsock_socket+0x98>)
   24b1c:	f018 f92b 	bl	3cd76 <printk>
   24b20:	21c2      	movs	r1, #194	; 0xc2
   24b22:	4640      	mov	r0, r8
   24b24:	f018 fbdb 	bl	3d2de <assert_post_action>
   24b28:	4554      	cmp	r4, sl
   24b2a:	d307      	bcc.n	24b3c <z_impl_zsock_socket+0x48>

	if (IS_ENABLED(CONFIG_NET_NATIVE)) {
		return zsock_socket_internal(family, type, proto);
	}

	errno = EAFNOSUPPORT;
   24b2c:	f019 fad5 	bl	3e0da <__errno>
   24b30:	236a      	movs	r3, #106	; 0x6a
   24b32:	6003      	str	r3, [r0, #0]
	return -1;
}
   24b34:	f04f 30ff 	mov.w	r0, #4294967295
   24b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (sock_family->family != family &&
   24b3c:	6823      	ldr	r3, [r4, #0]
   24b3e:	42ab      	cmp	r3, r5
   24b40:	d000      	beq.n	24b44 <z_impl_zsock_socket+0x50>
   24b42:	b9db      	cbnz	r3, 24b7c <z_impl_zsock_socket+0x88>
		NET_ASSERT(sock_family->is_supported);
   24b44:	6863      	ldr	r3, [r4, #4]
   24b46:	b963      	cbnz	r3, 24b62 <z_impl_zsock_socket+0x6e>
   24b48:	4911      	ldr	r1, [pc, #68]	; (24b90 <z_impl_zsock_socket+0x9c>)
   24b4a:	23c8      	movs	r3, #200	; 0xc8
   24b4c:	4642      	mov	r2, r8
   24b4e:	480e      	ldr	r0, [pc, #56]	; (24b88 <z_impl_zsock_socket+0x94>)
   24b50:	f018 f911 	bl	3cd76 <printk>
   24b54:	480f      	ldr	r0, [pc, #60]	; (24b94 <z_impl_zsock_socket+0xa0>)
   24b56:	f018 f90e 	bl	3cd76 <printk>
   24b5a:	21c8      	movs	r1, #200	; 0xc8
   24b5c:	4640      	mov	r0, r8
   24b5e:	f018 fbbe 	bl	3d2de <assert_post_action>
		if (!sock_family->is_supported(family, type, proto)) {
   24b62:	463a      	mov	r2, r7
   24b64:	4631      	mov	r1, r6
   24b66:	4628      	mov	r0, r5
   24b68:	6863      	ldr	r3, [r4, #4]
   24b6a:	4798      	blx	r3
   24b6c:	b130      	cbz	r0, 24b7c <z_impl_zsock_socket+0x88>
		return sock_family->handler(family, type, proto);
   24b6e:	463a      	mov	r2, r7
   24b70:	4631      	mov	r1, r6
   24b72:	4628      	mov	r0, r5
   24b74:	68a3      	ldr	r3, [r4, #8]
}
   24b76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return sock_family->handler(family, type, proto);
   24b7a:	4718      	bx	r3
	Z_STRUCT_SECTION_FOREACH(net_socket_register, sock_family) {
   24b7c:	340c      	adds	r4, #12
   24b7e:	e7c4      	b.n	24b0a <z_impl_zsock_socket+0x16>
   24b80:	00043368 	.word	0x00043368
   24b84:	00045c78 	.word	0x00045c78
   24b88:	00044dbf 	.word	0x00044dbf
   24b8c:	00045ca5 	.word	0x00045ca5
   24b90:	00045c5e 	.word	0x00045c5e
   24b94:	00045c27 	.word	0x00045c27
   24b98:	00043374 	.word	0x00043374
   24b9c:	00045c2a 	.word	0x00045c2a

00024ba0 <z_impl_zsock_poll>:

	return timeout - elapsed;
}

int z_impl_zsock_poll(struct zsock_pollfd *fds, int nfds, int poll_timeout)
{
   24ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint64_t end;
	bool offload = false;
	const struct fd_op_vtable *offl_vtable = NULL;
	void *offl_ctx = NULL;

	if (poll_timeout < 0) {
   24ba4:	1e14      	subs	r4, r2, #0
{
   24ba6:	b09b      	sub	sp, #108	; 0x6c
   24ba8:	4606      	mov	r6, r0
   24baa:	9103      	str	r1, [sp, #12]
	if (poll_timeout < 0) {
   24bac:	db30      	blt.n	24c10 <z_impl_zsock_poll+0x70>
			return (t * to_hz + off) / from_hz;
   24bae:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   24bb2:	f240 30e7 	movw	r0, #999	; 0x3e7
   24bb6:	2100      	movs	r1, #0
   24bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24bbc:	2300      	movs	r3, #0
   24bbe:	fbc5 0104 	smlal	r0, r1, r5, r4
   24bc2:	f7f8 f97b 	bl	1cebc <__aeabi_uldivmod>
   24bc6:	4682      	mov	sl, r0
   24bc8:	468b      	mov	fp, r1
	void *offl_ctx = NULL;
   24bca:	2500      	movs	r5, #0
		poll_timeout = SYS_FOREVER_MS;
	} else {
		timeout = K_MSEC(poll_timeout);
	}

	end = z_timeout_end_calc(timeout);
   24bcc:	4650      	mov	r0, sl
   24bce:	4659      	mov	r1, fp
   24bd0:	f01c ff84 	bl	41adc <z_timeout_end_calc>

	pev = poll_events;
   24bd4:	ab0b      	add	r3, sp, #44	; 0x2c
   24bd6:	9309      	str	r3, [sp, #36]	; 0x24
	const struct fd_op_vtable *offl_vtable = NULL;
   24bd8:	462f      	mov	r7, r5
	for (pfd = fds, i = nfds; i--; pfd++) {
   24bda:	4633      	mov	r3, r6
	bool offload = false;
   24bdc:	46a8      	mov	r8, r5
	end = z_timeout_end_calc(timeout);
   24bde:	e9cd 0104 	strd	r0, r1, [sp, #16]
	for (pfd = fds, i = nfds; i--; pfd++) {
   24be2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   24be6:	f1b9 0f00 	cmp.w	r9, #0
   24bea:	d118      	bne.n	24c1e <z_impl_zsock_poll+0x7e>
			errno = -result;
			return -1;
		}
	}

	if (offload) {
   24bec:	f1b8 0f00 	cmp.w	r8, #0
   24bf0:	d049      	beq.n	24c86 <z_impl_zsock_poll+0xe6>
		return z_fdtable_call_ioctl(offl_vtable, offl_ctx,
   24bf2:	9b03      	ldr	r3, [sp, #12]
   24bf4:	9401      	str	r4, [sp, #4]
   24bf6:	9300      	str	r3, [sp, #0]
   24bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
   24bfc:	4633      	mov	r3, r6
   24bfe:	4629      	mov	r1, r5
   24c00:	4638      	mov	r0, r7
   24c02:	f018 fed9 	bl	3d9b8 <z_fdtable_call_ioctl>
   24c06:	4604      	mov	r4, r0
			}
		}
	} while (retry);

	return ret;
}
   24c08:	4620      	mov	r0, r4
   24c0a:	b01b      	add	sp, #108	; 0x6c
   24c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		timeout = K_FOREVER;
   24c10:	f04f 3aff 	mov.w	sl, #4294967295
   24c14:	f04f 3bff 	mov.w	fp, #4294967295
		poll_timeout = SYS_FOREVER_MS;
   24c18:	f04f 34ff 	mov.w	r4, #4294967295
   24c1c:	e7d5      	b.n	24bca <z_impl_zsock_poll+0x2a>
		if (pfd->fd < 0) {
   24c1e:	6818      	ldr	r0, [r3, #0]
   24c20:	2800      	cmp	r0, #0
   24c22:	db2c      	blt.n	24c7e <z_impl_zsock_poll+0xde>
	ctx = z_get_fd_obj_and_vtable(sock,
   24c24:	a90a      	add	r1, sp, #40	; 0x28
   24c26:	9306      	str	r3, [sp, #24]
   24c28:	f7fd ff0c 	bl	22a44 <z_get_fd_obj_and_vtable>
		if (ctx == NULL) {
   24c2c:	9b06      	ldr	r3, [sp, #24]
   24c2e:	4601      	mov	r1, r0
   24c30:	b328      	cbz	r0, 24c7e <z_impl_zsock_poll+0xde>
		result = z_fdtable_call_ioctl(vtable, ctx,
   24c32:	aa1a      	add	r2, sp, #104	; 0x68
   24c34:	9201      	str	r2, [sp, #4]
   24c36:	aa09      	add	r2, sp, #36	; 0x24
   24c38:	9200      	str	r2, [sp, #0]
   24c3a:	9006      	str	r0, [sp, #24]
   24c3c:	f44f 7281 	mov.w	r2, #258	; 0x102
   24c40:	980a      	ldr	r0, [sp, #40]	; 0x28
   24c42:	9307      	str	r3, [sp, #28]
   24c44:	f018 feb8 	bl	3d9b8 <z_fdtable_call_ioctl>
		if (result == -EALREADY) {
   24c48:	f110 0f78 	cmn.w	r0, #120	; 0x78
		result = z_fdtable_call_ioctl(vtable, ctx,
   24c4c:	4602      	mov	r2, r0
		if (result == -EALREADY) {
   24c4e:	9b07      	ldr	r3, [sp, #28]
   24c50:	d011      	beq.n	24c76 <z_impl_zsock_poll+0xd6>
		} else if (result == -EXDEV) {
   24c52:	f110 0f12 	cmn.w	r0, #18
   24c56:	9906      	ldr	r1, [sp, #24]
   24c58:	d105      	bne.n	24c66 <z_impl_zsock_poll+0xc6>
			if (offl_vtable == NULL || net_socket_is_tls(ctx)) {
   24c5a:	b90f      	cbnz	r7, 24c60 <z_impl_zsock_poll+0xc0>
				offl_vtable = vtable;
   24c5c:	460d      	mov	r5, r1
   24c5e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			offload = true;
   24c60:	f04f 0801 	mov.w	r8, #1
   24c64:	e00b      	b.n	24c7e <z_impl_zsock_poll+0xde>
		} else if (result != 0) {
   24c66:	b150      	cbz	r0, 24c7e <z_impl_zsock_poll+0xde>
   24c68:	9203      	str	r2, [sp, #12]
				errno = -result;
   24c6a:	f019 fa36 	bl	3e0da <__errno>
   24c6e:	9a03      	ldr	r2, [sp, #12]
   24c70:	4252      	negs	r2, r2
   24c72:	6002      	str	r2, [r0, #0]
				return -1;
   24c74:	e03e      	b.n	24cf4 <z_impl_zsock_poll+0x154>
			timeout = K_NO_WAIT;
   24c76:	f04f 0a00 	mov.w	sl, #0
   24c7a:	f04f 0b00 	mov.w	fp, #0
	for (pfd = fds, i = nfds; i--; pfd++) {
   24c7e:	3308      	adds	r3, #8
   24c80:	f109 39ff 	add.w	r9, r9, #4294967295
   24c84:	e7af      	b.n	24be6 <z_impl_zsock_poll+0x46>
	if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   24c86:	ea5a 030b 	orrs.w	r3, sl, fp
   24c8a:	d016      	beq.n	24cba <z_impl_zsock_poll+0x11a>
   24c8c:	f1bb 3fff 	cmp.w	fp, #4294967295
   24c90:	bf08      	it	eq
   24c92:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   24c96:	d010      	beq.n	24cba <z_impl_zsock_poll+0x11a>
		int64_t remaining = end - z_tick_get();
   24c98:	f015 fa22 	bl	3a0e0 <z_tick_get>
   24c9c:	9b04      	ldr	r3, [sp, #16]
   24c9e:	ebb3 0a00 	subs.w	sl, r3, r0
   24ca2:	9b05      	ldr	r3, [sp, #20]
   24ca4:	eb63 0b01 	sbc.w	fp, r3, r1
   24ca8:	f1ba 0f00 	cmp.w	sl, #0
   24cac:	f17b 0300 	sbcs.w	r3, fp, #0
   24cb0:	bfbc      	itt	lt
   24cb2:	f04f 0a00 	movlt.w	sl, #0
   24cb6:	f04f 0b00 	movlt.w	fp, #0
			pfd->revents = 0;
   24cba:	f04f 0900 	mov.w	r9, #0
		ret = k_poll(poll_events, pev - poll_events, timeout);
   24cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
   24cc0:	ac0b      	add	r4, sp, #44	; 0x2c
   24cc2:	4b34      	ldr	r3, [pc, #208]	; (24d94 <z_impl_zsock_poll+0x1f4>)
   24cc4:	1b09      	subs	r1, r1, r4
   24cc6:	1089      	asrs	r1, r1, #2
   24cc8:	4359      	muls	r1, r3
	return z_impl_k_poll(events, num_events, timeout);
   24cca:	465b      	mov	r3, fp
   24ccc:	4652      	mov	r2, sl
   24cce:	4620      	mov	r0, r4
   24cd0:	f015 fc84 	bl	3a5dc <z_impl_k_poll>
		if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
   24cd4:	f100 030b 	add.w	r3, r0, #11
   24cd8:	2b0b      	cmp	r3, #11
   24cda:	4607      	mov	r7, r0
   24cdc:	d806      	bhi.n	24cec <z_impl_zsock_poll+0x14c>
   24cde:	f640 0581 	movw	r5, #2177	; 0x881
   24ce2:	40dd      	lsrs	r5, r3
   24ce4:	43ed      	mvns	r5, r5
   24ce6:	f015 0501 	ands.w	r5, r5, #1
   24cea:	d006      	beq.n	24cfa <z_impl_zsock_poll+0x15a>
			errno = -ret;
   24cec:	f019 f9f5 	bl	3e0da <__errno>
   24cf0:	427f      	negs	r7, r7
   24cf2:	6007      	str	r7, [r0, #0]
			return -1;
   24cf4:	f04f 34ff 	mov.w	r4, #4294967295
   24cf8:	e786      	b.n	24c08 <z_impl_zsock_poll+0x68>
		pev = poll_events;
   24cfa:	9409      	str	r4, [sp, #36]	; 0x24
		for (pfd = fds, i = nfds; i--; pfd++) {
   24cfc:	46b0      	mov	r8, r6
		ret = 0;
   24cfe:	462c      	mov	r4, r5
		for (pfd = fds, i = nfds; i--; pfd++) {
   24d00:	9f03      	ldr	r7, [sp, #12]
   24d02:	b9ef      	cbnz	r7, 24d40 <z_impl_zsock_poll+0x1a0>
		if (retry) {
   24d04:	2d00      	cmp	r5, #0
   24d06:	f43f af7f 	beq.w	24c08 <z_impl_zsock_poll+0x68>
			if (ret > 0) {
   24d0a:	2c00      	cmp	r4, #0
   24d0c:	f73f af7c 	bgt.w	24c08 <z_impl_zsock_poll+0x68>
			if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24d10:	ea5a 030b 	orrs.w	r3, sl, fp
   24d14:	f43f af78 	beq.w	24c08 <z_impl_zsock_poll+0x68>
			if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   24d18:	f1bb 3fff 	cmp.w	fp, #4294967295
   24d1c:	bf08      	it	eq
   24d1e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   24d22:	d0cc      	beq.n	24cbe <z_impl_zsock_poll+0x11e>
				int64_t remaining = end - z_tick_get();
   24d24:	f015 f9dc 	bl	3a0e0 <z_tick_get>
   24d28:	9b04      	ldr	r3, [sp, #16]
   24d2a:	ebb3 0a00 	subs.w	sl, r3, r0
   24d2e:	9b05      	ldr	r3, [sp, #20]
   24d30:	eb63 0b01 	sbc.w	fp, r3, r1
				if (remaining <= 0) {
   24d34:	f1ba 0f01 	cmp.w	sl, #1
   24d38:	f17b 0300 	sbcs.w	r3, fp, #0
   24d3c:	dabf      	bge.n	24cbe <z_impl_zsock_poll+0x11e>
   24d3e:	e763      	b.n	24c08 <z_impl_zsock_poll+0x68>
			if (pfd->fd < 0) {
   24d40:	f8d8 0000 	ldr.w	r0, [r8]
			pfd->revents = 0;
   24d44:	f8a8 9006 	strh.w	r9, [r8, #6]
			if (pfd->fd < 0) {
   24d48:	2800      	cmp	r0, #0
   24d4a:	db1c      	blt.n	24d86 <z_impl_zsock_poll+0x1e6>
	ctx = z_get_fd_obj_and_vtable(sock,
   24d4c:	a90a      	add	r1, sp, #40	; 0x28
   24d4e:	f7fd fe79 	bl	22a44 <z_get_fd_obj_and_vtable>
			if (ctx == NULL) {
   24d52:	4601      	mov	r1, r0
   24d54:	b920      	cbnz	r0, 24d60 <z_impl_zsock_poll+0x1c0>
				pfd->revents = ZSOCK_POLLNVAL;
   24d56:	2220      	movs	r2, #32
   24d58:	f8a8 2006 	strh.w	r2, [r8, #6]
				ret++;
   24d5c:	3401      	adds	r4, #1
   24d5e:	e012      	b.n	24d86 <z_impl_zsock_poll+0x1e6>
			result = z_fdtable_call_ioctl(vtable, ctx,
   24d60:	ab09      	add	r3, sp, #36	; 0x24
   24d62:	f240 1203 	movw	r2, #259	; 0x103
   24d66:	9300      	str	r3, [sp, #0]
   24d68:	980a      	ldr	r0, [sp, #40]	; 0x28
   24d6a:	4643      	mov	r3, r8
   24d6c:	f018 fe24 	bl	3d9b8 <z_fdtable_call_ioctl>
			if (result == -EAGAIN) {
   24d70:	f110 0f0b 	cmn.w	r0, #11
			result = z_fdtable_call_ioctl(vtable, ctx,
   24d74:	4602      	mov	r2, r0
			if (result == -EAGAIN) {
   24d76:	d00a      	beq.n	24d8e <z_impl_zsock_poll+0x1ee>
			} else if (result != 0) {
   24d78:	2800      	cmp	r0, #0
   24d7a:	f47f af75 	bne.w	24c68 <z_impl_zsock_poll+0xc8>
			if (pfd->revents != 0) {
   24d7e:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   24d82:	2a00      	cmp	r2, #0
   24d84:	d1ea      	bne.n	24d5c <z_impl_zsock_poll+0x1bc>
		for (pfd = fds, i = nfds; i--; pfd++) {
   24d86:	f108 0808 	add.w	r8, r8, #8
   24d8a:	3f01      	subs	r7, #1
   24d8c:	e7b9      	b.n	24d02 <z_impl_zsock_poll+0x162>
				retry = true;
   24d8e:	2501      	movs	r5, #1
   24d90:	e7f9      	b.n	24d86 <z_impl_zsock_poll+0x1e6>
   24d92:	bf00      	nop
   24d94:	cccccccd 	.word	0xcccccccd

00024d98 <socket_offload_dns_register>:
#include "sockets_internal.h"

const struct socket_dns_offload *dns_offload;

void socket_offload_dns_register(const struct socket_dns_offload *ops)
{
   24d98:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(ops);
   24d9a:	4605      	mov	r5, r0
   24d9c:	b948      	cbnz	r0, 24db2 <socket_offload_dns_register+0x1a>
   24d9e:	490c      	ldr	r1, [pc, #48]	; (24dd0 <socket_offload_dns_register+0x38>)
   24da0:	480c      	ldr	r0, [pc, #48]	; (24dd4 <socket_offload_dns_register+0x3c>)
   24da2:	2313      	movs	r3, #19
   24da4:	4a0c      	ldr	r2, [pc, #48]	; (24dd8 <socket_offload_dns_register+0x40>)
   24da6:	f017 ffe6 	bl	3cd76 <printk>
   24daa:	2113      	movs	r1, #19
   24dac:	480a      	ldr	r0, [pc, #40]	; (24dd8 <socket_offload_dns_register+0x40>)
   24dae:	f018 fa96 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(dns_offload == NULL);
   24db2:	4c0a      	ldr	r4, [pc, #40]	; (24ddc <socket_offload_dns_register+0x44>)
   24db4:	6822      	ldr	r2, [r4, #0]
   24db6:	b14a      	cbz	r2, 24dcc <socket_offload_dns_register+0x34>
   24db8:	4909      	ldr	r1, [pc, #36]	; (24de0 <socket_offload_dns_register+0x48>)
   24dba:	4806      	ldr	r0, [pc, #24]	; (24dd4 <socket_offload_dns_register+0x3c>)
   24dbc:	2314      	movs	r3, #20
   24dbe:	4a06      	ldr	r2, [pc, #24]	; (24dd8 <socket_offload_dns_register+0x40>)
   24dc0:	f017 ffd9 	bl	3cd76 <printk>
   24dc4:	2114      	movs	r1, #20
   24dc6:	4804      	ldr	r0, [pc, #16]	; (24dd8 <socket_offload_dns_register+0x40>)
   24dc8:	f018 fa89 	bl	3d2de <assert_post_action>

	dns_offload = ops;
   24dcc:	6025      	str	r5, [r4, #0]
}
   24dce:	bd38      	pop	{r3, r4, r5, pc}
   24dd0:	0004ba53 	.word	0x0004ba53
   24dd4:	00044dbf 	.word	0x00044dbf
   24dd8:	00045cc4 	.word	0x00045cc4
   24ddc:	20018cd8 	.word	0x20018cd8
   24de0:	00045cff 	.word	0x00045cff

00024de4 <socket_offload_getaddrinfo>:

int socket_offload_getaddrinfo(const char *node, const char *service,
			       const struct zsock_addrinfo *hints,
			       struct zsock_addrinfo **res)
{
   24de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(dns_offload);
   24de8:	4c13      	ldr	r4, [pc, #76]	; (24e38 <socket_offload_getaddrinfo+0x54>)
{
   24dea:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(dns_offload);
   24dec:	6823      	ldr	r3, [r4, #0]
{
   24dee:	4605      	mov	r5, r0
   24df0:	460e      	mov	r6, r1
   24df2:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(dns_offload);
   24df4:	b94b      	cbnz	r3, 24e0a <socket_offload_getaddrinfo+0x26>
   24df6:	4911      	ldr	r1, [pc, #68]	; (24e3c <socket_offload_getaddrinfo+0x58>)
   24df8:	4811      	ldr	r0, [pc, #68]	; (24e40 <socket_offload_getaddrinfo+0x5c>)
   24dfa:	231d      	movs	r3, #29
   24dfc:	4a11      	ldr	r2, [pc, #68]	; (24e44 <socket_offload_getaddrinfo+0x60>)
   24dfe:	f017 ffba 	bl	3cd76 <printk>
   24e02:	211d      	movs	r1, #29
   24e04:	480f      	ldr	r0, [pc, #60]	; (24e44 <socket_offload_getaddrinfo+0x60>)
   24e06:	f018 fa6a 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->getaddrinfo);
   24e0a:	6823      	ldr	r3, [r4, #0]
   24e0c:	681b      	ldr	r3, [r3, #0]
   24e0e:	b94b      	cbnz	r3, 24e24 <socket_offload_getaddrinfo+0x40>
   24e10:	490d      	ldr	r1, [pc, #52]	; (24e48 <socket_offload_getaddrinfo+0x64>)
   24e12:	480b      	ldr	r0, [pc, #44]	; (24e40 <socket_offload_getaddrinfo+0x5c>)
   24e14:	231e      	movs	r3, #30
   24e16:	4a0b      	ldr	r2, [pc, #44]	; (24e44 <socket_offload_getaddrinfo+0x60>)
   24e18:	f017 ffad 	bl	3cd76 <printk>
   24e1c:	211e      	movs	r1, #30
   24e1e:	4809      	ldr	r0, [pc, #36]	; (24e44 <socket_offload_getaddrinfo+0x60>)
   24e20:	f018 fa5d 	bl	3d2de <assert_post_action>

	return dns_offload->getaddrinfo(node, service, hints, res);
   24e24:	6823      	ldr	r3, [r4, #0]
   24e26:	463a      	mov	r2, r7
   24e28:	681c      	ldr	r4, [r3, #0]
   24e2a:	4631      	mov	r1, r6
   24e2c:	4643      	mov	r3, r8
   24e2e:	4628      	mov	r0, r5
   24e30:	46a4      	mov	ip, r4
}
   24e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return dns_offload->getaddrinfo(node, service, hints, res);
   24e36:	4760      	bx	ip
   24e38:	20018cd8 	.word	0x20018cd8
   24e3c:	00045d1a 	.word	0x00045d1a
   24e40:	00044dbf 	.word	0x00044dbf
   24e44:	00045cc4 	.word	0x00045cc4
   24e48:	00045d26 	.word	0x00045d26

00024e4c <socket_offload_freeaddrinfo>:

void socket_offload_freeaddrinfo(struct zsock_addrinfo *res)
{
   24e4c:	b570      	push	{r4, r5, r6, lr}
	__ASSERT_NO_MSG(dns_offload);
   24e4e:	4c10      	ldr	r4, [pc, #64]	; (24e90 <socket_offload_freeaddrinfo+0x44>)
{
   24e50:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(dns_offload);
   24e52:	6823      	ldr	r3, [r4, #0]
   24e54:	b94b      	cbnz	r3, 24e6a <socket_offload_freeaddrinfo+0x1e>
   24e56:	490f      	ldr	r1, [pc, #60]	; (24e94 <socket_offload_freeaddrinfo+0x48>)
   24e58:	480f      	ldr	r0, [pc, #60]	; (24e98 <socket_offload_freeaddrinfo+0x4c>)
   24e5a:	2325      	movs	r3, #37	; 0x25
   24e5c:	4a0f      	ldr	r2, [pc, #60]	; (24e9c <socket_offload_freeaddrinfo+0x50>)
   24e5e:	f017 ff8a 	bl	3cd76 <printk>
   24e62:	2125      	movs	r1, #37	; 0x25
   24e64:	480d      	ldr	r0, [pc, #52]	; (24e9c <socket_offload_freeaddrinfo+0x50>)
   24e66:	f018 fa3a 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(dns_offload->freeaddrinfo);
   24e6a:	6823      	ldr	r3, [r4, #0]
   24e6c:	685b      	ldr	r3, [r3, #4]
   24e6e:	b94b      	cbnz	r3, 24e84 <socket_offload_freeaddrinfo+0x38>
   24e70:	490b      	ldr	r1, [pc, #44]	; (24ea0 <socket_offload_freeaddrinfo+0x54>)
   24e72:	4809      	ldr	r0, [pc, #36]	; (24e98 <socket_offload_freeaddrinfo+0x4c>)
   24e74:	2326      	movs	r3, #38	; 0x26
   24e76:	4a09      	ldr	r2, [pc, #36]	; (24e9c <socket_offload_freeaddrinfo+0x50>)
   24e78:	f017 ff7d 	bl	3cd76 <printk>
   24e7c:	2126      	movs	r1, #38	; 0x26
   24e7e:	4807      	ldr	r0, [pc, #28]	; (24e9c <socket_offload_freeaddrinfo+0x50>)
   24e80:	f018 fa2d 	bl	3d2de <assert_post_action>

	return dns_offload->freeaddrinfo(res);
   24e84:	6823      	ldr	r3, [r4, #0]
   24e86:	4628      	mov	r0, r5
}
   24e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return dns_offload->freeaddrinfo(res);
   24e8c:	685b      	ldr	r3, [r3, #4]
   24e8e:	4718      	bx	r3
   24e90:	20018cd8 	.word	0x20018cd8
   24e94:	00045d1a 	.word	0x00045d1a
   24e98:	00044dbf 	.word	0x00044dbf
   24e9c:	00045cc4 	.word	0x00045cc4
   24ea0:	00045d3f 	.word	0x00045d3f

00024ea4 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
   24ea4:	4b09      	ldr	r3, [pc, #36]	; (24ecc <get_flash_area_from_id+0x28>)
{
   24ea6:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
   24ea8:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
   24eaa:	4b09      	ldr	r3, [pc, #36]	; (24ed0 <get_flash_area_from_id+0x2c>)
   24eac:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
   24eae:	2300      	movs	r3, #0
   24eb0:	429d      	cmp	r5, r3
   24eb2:	dc02      	bgt.n	24eba <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
   24eb4:	2100      	movs	r1, #0
}
   24eb6:	4608      	mov	r0, r1
   24eb8:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
   24eba:	011a      	lsls	r2, r3, #4
   24ebc:	5ca2      	ldrb	r2, [r4, r2]
   24ebe:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   24ec2:	4282      	cmp	r2, r0
   24ec4:	d0f7      	beq.n	24eb6 <get_flash_area_from_id+0x12>
	for (int i = 0; i < flash_map_entries; i++) {
   24ec6:	3301      	adds	r3, #1
   24ec8:	e7f2      	b.n	24eb0 <get_flash_area_from_id+0xc>
   24eca:	bf00      	nop
   24ecc:	0004385c 	.word	0x0004385c
   24ed0:	200154fc 	.word	0x200154fc

00024ed4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
   24ed4:	4b08      	ldr	r3, [pc, #32]	; (24ef8 <flash_area_open+0x24>)
{
   24ed6:	b510      	push	{r4, lr}
	if (flash_map == NULL) {
   24ed8:	681b      	ldr	r3, [r3, #0]
{
   24eda:	460c      	mov	r4, r1
	if (flash_map == NULL) {
   24edc:	b12b      	cbz	r3, 24eea <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
   24ede:	f7ff ffe1 	bl	24ea4 <get_flash_area_from_id>
	if (area == NULL) {
   24ee2:	b128      	cbz	r0, 24ef0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
   24ee4:	6020      	str	r0, [r4, #0]
	return 0;
   24ee6:	2000      	movs	r0, #0
}
   24ee8:	bd10      	pop	{r4, pc}
		return -EACCES;
   24eea:	f06f 000c 	mvn.w	r0, #12
   24eee:	e7fb      	b.n	24ee8 <flash_area_open+0x14>
		return -ENOENT;
   24ef0:	f06f 0001 	mvn.w	r0, #1
   24ef4:	e7f8      	b.n	24ee8 <flash_area_open+0x14>
   24ef6:	bf00      	nop
   24ef8:	200154fc 	.word	0x200154fc

00024efc <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
   24efc:	b530      	push	{r4, r5, lr}
   24efe:	b089      	sub	sp, #36	; 0x24
   24f00:	460c      	mov	r4, r1
   24f02:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
   24f04:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
   24f06:	f7ff ffcd 	bl	24ea4 <get_flash_area_from_id>
	if (fa == NULL) {
   24f0a:	b1b8      	cbz	r0, 24f3c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
   24f0c:	6843      	ldr	r3, [r0, #4]
	cb_data->ret_len = *cnt;
   24f0e:	6822      	ldr	r2, [r4, #0]
	cb_data->area_off = fa->fa_off;
   24f10:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
   24f12:	6883      	ldr	r3, [r0, #8]
	flash_dev = device_get_binding(fa->fa_dev_name);
   24f14:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
   24f16:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
   24f1a:	2300      	movs	r3, #0
	cb_data->status = 0;
   24f1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
   24f20:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
   24f22:	f018 fe0e 	bl	3db42 <device_get_binding>
	if (flash_dev == NULL) {
   24f26:	b160      	cbz	r0, 24f42 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
   24f28:	4907      	ldr	r1, [pc, #28]	; (24f48 <flash_area_get_sectors+0x4c>)
   24f2a:	aa01      	add	r2, sp, #4
   24f2c:	f01a f81d 	bl	3ef6a <flash_page_foreach>
	if (cb_data->status == 0) {
   24f30:	9807      	ldr	r0, [sp, #28]
   24f32:	b908      	cbnz	r0, 24f38 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
   24f34:	9b05      	ldr	r3, [sp, #20]
   24f36:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
   24f38:	b009      	add	sp, #36	; 0x24
   24f3a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   24f3c:	f06f 0015 	mvn.w	r0, #21
   24f40:	e7fa      	b.n	24f38 <flash_area_get_sectors+0x3c>
		return -ENODEV;
   24f42:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
   24f46:	e7f7      	b.n	24f38 <flash_area_get_sectors+0x3c>
   24f48:	0003db47 	.word	0x0003db47

00024f4c <find_flash_total_size>:
static bool find_flash_total_size(const struct flash_pages_info *info,
				  void *data)
{
	struct _inspect_flash *ctx = (struct _inspect_flash *) data;

	if (ctx->buf_len > info->size) {
   24f4c:	6842      	ldr	r2, [r0, #4]
   24f4e:	680b      	ldr	r3, [r1, #0]
{
   24f50:	b510      	push	{r4, lr}
	if (ctx->buf_len > info->size) {
   24f52:	4293      	cmp	r3, r2
{
   24f54:	460c      	mov	r4, r1
	if (ctx->buf_len > info->size) {
   24f56:	d90c      	bls.n	24f72 <find_flash_total_size+0x26>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   24f58:	4b08      	ldr	r3, [pc, #32]	; (24f7c <find_flash_total_size+0x30>)
   24f5a:	4809      	ldr	r0, [pc, #36]	; (24f80 <find_flash_total_size+0x34>)
		LOG_ERR("Buffer size is bigger than page");
   24f5c:	4909      	ldr	r1, [pc, #36]	; (24f84 <find_flash_total_size+0x38>)
   24f5e:	1ac0      	subs	r0, r0, r3
   24f60:	08c0      	lsrs	r0, r0, #3
   24f62:	0180      	lsls	r0, r0, #6
   24f64:	f040 0001 	orr.w	r0, r0, #1
   24f68:	f018 f9ca 	bl	3d300 <log_string_sync>
		ctx->total_size = 0;
   24f6c:	2000      	movs	r0, #0
   24f6e:	6060      	str	r0, [r4, #4]
	}

	ctx->total_size += info->size;

	return true;
}
   24f70:	bd10      	pop	{r4, pc}
	ctx->total_size += info->size;
   24f72:	684b      	ldr	r3, [r1, #4]
	return true;
   24f74:	2001      	movs	r0, #1
	ctx->total_size += info->size;
   24f76:	4413      	add	r3, r2
   24f78:	604b      	str	r3, [r1, #4]
	return true;
   24f7a:	e7f9      	b.n	24f70 <find_flash_total_size+0x24>
   24f7c:	0004339c 	.word	0x0004339c
   24f80:	0004339c 	.word	0x0004339c
   24f84:	00045d6c 	.word	0x00045d6c

00024f88 <stream_flash_erase_page>:
{
   24f88:	b530      	push	{r4, r5, lr}
   24f8a:	4605      	mov	r5, r0
   24f8c:	b085      	sub	sp, #20
	rc = flash_get_page_info_by_offs(ctx->fdev, off, &page);
   24f8e:	68c0      	ldr	r0, [r0, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
   24f90:	aa01      	add	r2, sp, #4
   24f92:	f019 ffe6 	bl	3ef62 <z_impl_flash_get_page_info_by_offs>
	if (rc != 0) {
   24f96:	4604      	mov	r4, r0
   24f98:	b168      	cbz	r0, 24fb6 <stream_flash_erase_page+0x2e>
		LOG_ERR("Error %d while getting page info", rc);
   24f9a:	4622      	mov	r2, r4
   24f9c:	4815      	ldr	r0, [pc, #84]	; (24ff4 <stream_flash_erase_page+0x6c>)
   24f9e:	4b16      	ldr	r3, [pc, #88]	; (24ff8 <stream_flash_erase_page+0x70>)
   24fa0:	4916      	ldr	r1, [pc, #88]	; (24ffc <stream_flash_erase_page+0x74>)
   24fa2:	1ac0      	subs	r0, r0, r3
   24fa4:	08c0      	lsrs	r0, r0, #3
   24fa6:	0180      	lsls	r0, r0, #6
		LOG_ERR("Error %d while erasing page", rc);
   24fa8:	f040 0001 	orr.w	r0, r0, #1
   24fac:	f018 f9a8 	bl	3d300 <log_string_sync>
}
   24fb0:	4620      	mov	r0, r4
   24fb2:	b005      	add	sp, #20
   24fb4:	bd30      	pop	{r4, r5, pc}
	if (ctx->last_erased_page_start_offset == page.start_offset) {
   24fb6:	9b01      	ldr	r3, [sp, #4]
   24fb8:	6a2a      	ldr	r2, [r5, #32]
   24fba:	429a      	cmp	r2, r3
   24fbc:	d0f8      	beq.n	24fb0 <stream_flash_erase_page+0x28>
	flash_write_protection_set(ctx->fdev, false);
   24fbe:	4601      	mov	r1, r0
	ctx->last_erased_page_start_offset = page.start_offset;
   24fc0:	622b      	str	r3, [r5, #32]
	flash_write_protection_set(ctx->fdev, false);
   24fc2:	68e8      	ldr	r0, [r5, #12]
   24fc4:	f018 fe5c 	bl	3dc80 <flash_write_protection_set>
	rc = flash_erase(ctx->fdev, page.start_offset, page.size);
   24fc8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   24fcc:	68e8      	ldr	r0, [r5, #12]
				     size_t size)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->erase(dev, offset, size);
   24fce:	6883      	ldr	r3, [r0, #8]
   24fd0:	689b      	ldr	r3, [r3, #8]
   24fd2:	4798      	blx	r3
   24fd4:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   24fd6:	2101      	movs	r1, #1
   24fd8:	68e8      	ldr	r0, [r5, #12]
   24fda:	f018 fe51 	bl	3dc80 <flash_write_protection_set>
	if (rc != 0) {
   24fde:	2c00      	cmp	r4, #0
   24fe0:	d0e6      	beq.n	24fb0 <stream_flash_erase_page+0x28>
   24fe2:	4804      	ldr	r0, [pc, #16]	; (24ff4 <stream_flash_erase_page+0x6c>)
   24fe4:	4b04      	ldr	r3, [pc, #16]	; (24ff8 <stream_flash_erase_page+0x70>)
		LOG_ERR("Error %d while erasing page", rc);
   24fe6:	4622      	mov	r2, r4
   24fe8:	1ac0      	subs	r0, r0, r3
   24fea:	08c0      	lsrs	r0, r0, #3
   24fec:	4904      	ldr	r1, [pc, #16]	; (25000 <stream_flash_erase_page+0x78>)
   24fee:	0180      	lsls	r0, r0, #6
   24ff0:	e7da      	b.n	24fa8 <stream_flash_erase_page+0x20>
   24ff2:	bf00      	nop
   24ff4:	0004339c 	.word	0x0004339c
   24ff8:	0004339c 	.word	0x0004339c
   24ffc:	00045d8c 	.word	0x00045d8c
   25000:	00045dad 	.word	0x00045dad

00025004 <flash_sync>:
{
   25004:	b570      	push	{r4, r5, r6, lr}
		if (ctx->buf_bytes == 0) {
   25006:	6884      	ldr	r4, [r0, #8]
{
   25008:	4605      	mov	r5, r0
		if (ctx->buf_bytes == 0) {
   2500a:	b1a4      	cbz	r4, 25036 <flash_sync+0x32>
	size_t write_addr = ctx->offset + ctx->bytes_written;
   2500c:	e9d0 3604 	ldrd	r3, r6, [r0, #16]
					     write_addr + ctx->buf_bytes - 1);
   25010:	3c01      	subs	r4, #1
	size_t write_addr = ctx->offset + ctx->bytes_written;
   25012:	441e      	add	r6, r3
		rc = stream_flash_erase_page(ctx,
   25014:	19a1      	adds	r1, r4, r6
   25016:	f7ff ffb7 	bl	24f88 <stream_flash_erase_page>
		if (rc < 0) {
   2501a:	1e04      	subs	r4, r0, #0
   2501c:	da0d      	bge.n	2503a <flash_sync+0x36>
   2501e:	4b30      	ldr	r3, [pc, #192]	; (250e0 <flash_sync+0xdc>)
   25020:	4830      	ldr	r0, [pc, #192]	; (250e4 <flash_sync+0xe0>)
			LOG_ERR("stream_flash_erase_page err %d offset=0x%08zx",
   25022:	4622      	mov	r2, r4
   25024:	1ac0      	subs	r0, r0, r3
   25026:	4633      	mov	r3, r6
   25028:	08c0      	lsrs	r0, r0, #3
   2502a:	492f      	ldr	r1, [pc, #188]	; (250e8 <flash_sync+0xe4>)
   2502c:	0180      	lsls	r0, r0, #6
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   2502e:	f040 0001 	orr.w	r0, r0, #1
   25032:	f018 f965 	bl	3d300 <log_string_sync>
}
   25036:	4620      	mov	r0, r4
   25038:	bd70      	pop	{r4, r5, r6, pc}
	flash_write_protection_set(ctx->fdev, false);
   2503a:	2100      	movs	r1, #0
   2503c:	68e8      	ldr	r0, [r5, #12]
   2503e:	f018 fe1f 	bl	3dc80 <flash_write_protection_set>
	rc = flash_write(ctx->fdev, write_addr, ctx->buf, ctx->buf_bytes);
   25042:	68e8      	ldr	r0, [r5, #12]
   25044:	682a      	ldr	r2, [r5, #0]
   25046:	68ab      	ldr	r3, [r5, #8]
	return api->write(dev, offset, data, len);
   25048:	6881      	ldr	r1, [r0, #8]
   2504a:	684c      	ldr	r4, [r1, #4]
   2504c:	4631      	mov	r1, r6
   2504e:	47a0      	blx	r4
   25050:	4604      	mov	r4, r0
	flash_write_protection_set(ctx->fdev, true);
   25052:	2101      	movs	r1, #1
   25054:	68e8      	ldr	r0, [r5, #12]
   25056:	f018 fe13 	bl	3dc80 <flash_write_protection_set>
	if (rc != 0) {
   2505a:	b144      	cbz	r4, 2506e <flash_sync+0x6a>
   2505c:	4b20      	ldr	r3, [pc, #128]	; (250e0 <flash_sync+0xdc>)
   2505e:	4821      	ldr	r0, [pc, #132]	; (250e4 <flash_sync+0xe0>)
		LOG_ERR("flash_write error %d offset=0x%08zx", rc,
   25060:	4622      	mov	r2, r4
   25062:	1ac0      	subs	r0, r0, r3
   25064:	08c0      	lsrs	r0, r0, #3
   25066:	4633      	mov	r3, r6
   25068:	4920      	ldr	r1, [pc, #128]	; (250ec <flash_sync+0xe8>)
   2506a:	0180      	lsls	r0, r0, #6
   2506c:	e7df      	b.n	2502e <flash_sync+0x2a>
	if (ctx->callback) {
   2506e:	69eb      	ldr	r3, [r5, #28]
   25070:	b953      	cbnz	r3, 25088 <flash_sync+0x84>
	ctx->bytes_written += ctx->buf_bytes;
   25072:	692b      	ldr	r3, [r5, #16]
   25074:	68aa      	ldr	r2, [r5, #8]
   25076:	4413      	add	r3, r2
   25078:	612b      	str	r3, [r5, #16]
	ctx->buf_bytes = 0U;
   2507a:	2300      	movs	r3, #0
   2507c:	60ab      	str	r3, [r5, #8]
	return rc;
   2507e:	e7da      	b.n	25036 <flash_sync+0x32>
			ctx->buf[i] = ~ctx->buf[i];
   25080:	5d13      	ldrb	r3, [r2, r4]
   25082:	43db      	mvns	r3, r3
   25084:	5513      	strb	r3, [r2, r4]
		for (int i = 0; i < ctx->buf_bytes; i++) {
   25086:	3401      	adds	r4, #1
   25088:	68ab      	ldr	r3, [r5, #8]
   2508a:	682a      	ldr	r2, [r5, #0]
   2508c:	429c      	cmp	r4, r3
   2508e:	d3f7      	bcc.n	25080 <flash_sync+0x7c>
		rc = flash_read(ctx->fdev, write_addr, ctx->buf,
   25090:	68e8      	ldr	r0, [r5, #12]
	return api->read(dev, offset, data, len);
   25092:	6881      	ldr	r1, [r0, #8]
   25094:	680c      	ldr	r4, [r1, #0]
   25096:	4631      	mov	r1, r6
   25098:	47a0      	blx	r4
		if (rc != 0) {
   2509a:	4604      	mov	r4, r0
   2509c:	b158      	cbz	r0, 250b6 <flash_sync+0xb2>
   2509e:	4b10      	ldr	r3, [pc, #64]	; (250e0 <flash_sync+0xdc>)
   250a0:	4810      	ldr	r0, [pc, #64]	; (250e4 <flash_sync+0xe0>)
			LOG_ERR("flash read failed: %d", rc);
   250a2:	4622      	mov	r2, r4
   250a4:	1ac0      	subs	r0, r0, r3
   250a6:	08c0      	lsrs	r0, r0, #3
   250a8:	0180      	lsls	r0, r0, #6
   250aa:	4911      	ldr	r1, [pc, #68]	; (250f0 <flash_sync+0xec>)
   250ac:	f040 0001 	orr.w	r0, r0, #1
   250b0:	f018 f926 	bl	3d300 <log_string_sync>
			return rc;
   250b4:	e7bf      	b.n	25036 <flash_sync+0x32>
		rc = ctx->callback(ctx->buf, ctx->buf_bytes, write_addr);
   250b6:	4632      	mov	r2, r6
   250b8:	69eb      	ldr	r3, [r5, #28]
   250ba:	68a9      	ldr	r1, [r5, #8]
   250bc:	6828      	ldr	r0, [r5, #0]
   250be:	4798      	blx	r3
		if (rc != 0) {
   250c0:	4604      	mov	r4, r0
   250c2:	2800      	cmp	r0, #0
   250c4:	d0d5      	beq.n	25072 <flash_sync+0x6e>
   250c6:	4b06      	ldr	r3, [pc, #24]	; (250e0 <flash_sync+0xdc>)
   250c8:	4806      	ldr	r0, [pc, #24]	; (250e4 <flash_sync+0xe0>)
			LOG_ERR("callback failed: %d", rc);
   250ca:	4622      	mov	r2, r4
   250cc:	1ac0      	subs	r0, r0, r3
   250ce:	08c0      	lsrs	r0, r0, #3
   250d0:	0180      	lsls	r0, r0, #6
   250d2:	4908      	ldr	r1, [pc, #32]	; (250f4 <flash_sync+0xf0>)
   250d4:	f040 0001 	orr.w	r0, r0, #1
   250d8:	f018 f912 	bl	3d300 <log_string_sync>
   250dc:	e7c9      	b.n	25072 <flash_sync+0x6e>
   250de:	bf00      	nop
   250e0:	0004339c 	.word	0x0004339c
   250e4:	0004339c 	.word	0x0004339c
   250e8:	00045dc9 	.word	0x00045dc9
   250ec:	00045df7 	.word	0x00045df7
   250f0:	00045e1b 	.word	0x00045e1b
   250f4:	00045e31 	.word	0x00045e31

000250f8 <stream_flash_init>:

int stream_flash_init(struct stream_flash_ctx *ctx, const struct device *fdev,
		      uint8_t *buf, size_t buf_len, size_t offset, size_t size,
		      stream_flash_callback_t cb)
{
   250f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   250fc:	460d      	mov	r5, r1
   250fe:	e9dd 860a 	ldrd	r8, r6, [sp, #40]	; 0x28
   25102:	4691      	mov	r9, r2
   25104:	461f      	mov	r7, r3
	if (!ctx || !fdev || !buf) {
   25106:	4604      	mov	r4, r0
   25108:	b920      	cbnz	r0, 25114 <stream_flash_init+0x1c>
	}

	if ((offset + size) > inspect_flash_ctx.total_size ||
	    offset % flash_get_write_block_size(fdev)) {
		LOG_ERR("Incorrect parameter");
		return -EFAULT;
   2510a:	f06f 000d 	mvn.w	r0, #13
#ifdef CONFIG_STREAM_FLASH_ERASE
	ctx->last_erased_page_start_offset = -1;
#endif

	return 0;
}
   2510e:	b003      	add	sp, #12
   25110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!ctx || !fdev || !buf) {
   25114:	2900      	cmp	r1, #0
   25116:	d0f8      	beq.n	2510a <stream_flash_init+0x12>
   25118:	2a00      	cmp	r2, #0
   2511a:	d0f6      	beq.n	2510a <stream_flash_init+0x12>
	struct _inspect_flash inspect_flash_ctx = {
   2511c:	9300      	str	r3, [sp, #0]
   2511e:	2300      	movs	r3, #0
	if (buf_len % flash_get_write_block_size(fdev)) {
   25120:	4608      	mov	r0, r1
	struct _inspect_flash inspect_flash_ctx = {
   25122:	9301      	str	r3, [sp, #4]
	if (buf_len % flash_get_write_block_size(fdev)) {
   25124:	f018 fdaf 	bl	3dc86 <flash_get_write_block_size>
   25128:	fbb7 f3f0 	udiv	r3, r7, r0
   2512c:	fb03 7010 	mls	r0, r3, r0, r7
   25130:	b150      	cbz	r0, 25148 <stream_flash_init+0x50>
   25132:	481d      	ldr	r0, [pc, #116]	; (251a8 <stream_flash_init+0xb0>)
   25134:	4b1d      	ldr	r3, [pc, #116]	; (251ac <stream_flash_init+0xb4>)
		LOG_ERR("Buffer size is not aligned to minimal write-block-size");
   25136:	491e      	ldr	r1, [pc, #120]	; (251b0 <stream_flash_init+0xb8>)
   25138:	1ac0      	subs	r0, r0, r3
   2513a:	08c0      	lsrs	r0, r0, #3
   2513c:	0180      	lsls	r0, r0, #6
		LOG_ERR("Incorrect parameter");
   2513e:	f040 0001 	orr.w	r0, r0, #1
   25142:	f018 f8dd 	bl	3d300 <log_string_sync>
   25146:	e7e0      	b.n	2510a <stream_flash_init+0x12>
	flash_page_foreach(fdev, find_flash_total_size, &inspect_flash_ctx);
   25148:	466a      	mov	r2, sp
   2514a:	4628      	mov	r0, r5
   2514c:	4919      	ldr	r1, [pc, #100]	; (251b4 <stream_flash_init+0xbc>)
   2514e:	f019 ff0c 	bl	3ef6a <flash_page_foreach>
	if (inspect_flash_ctx.total_size == 0) {
   25152:	9b01      	ldr	r3, [sp, #4]
   25154:	2b00      	cmp	r3, #0
   25156:	d0d8      	beq.n	2510a <stream_flash_init+0x12>
	if ((offset + size) > inspect_flash_ctx.total_size ||
   25158:	eb08 0206 	add.w	r2, r8, r6
   2515c:	4293      	cmp	r3, r2
   2515e:	d206      	bcs.n	2516e <stream_flash_init+0x76>
   25160:	4811      	ldr	r0, [pc, #68]	; (251a8 <stream_flash_init+0xb0>)
   25162:	4b12      	ldr	r3, [pc, #72]	; (251ac <stream_flash_init+0xb4>)
		LOG_ERR("Incorrect parameter");
   25164:	4914      	ldr	r1, [pc, #80]	; (251b8 <stream_flash_init+0xc0>)
   25166:	1ac0      	subs	r0, r0, r3
   25168:	08c0      	lsrs	r0, r0, #3
   2516a:	0180      	lsls	r0, r0, #6
   2516c:	e7e7      	b.n	2513e <stream_flash_init+0x46>
	    offset % flash_get_write_block_size(fdev)) {
   2516e:	4628      	mov	r0, r5
   25170:	f018 fd89 	bl	3dc86 <flash_get_write_block_size>
   25174:	fbb8 f3f0 	udiv	r3, r8, r0
   25178:	fb03 8010 	mls	r0, r3, r0, r8
	if ((offset + size) > inspect_flash_ctx.total_size ||
   2517c:	2800      	cmp	r0, #0
   2517e:	d1ef      	bne.n	25160 <stream_flash_init+0x68>
	ctx->buf_len = buf_len;
   25180:	e9c4 9700 	strd	r9, r7, [r4]
	ctx->fdev = fdev;
   25184:	60e5      	str	r5, [r4, #12]
	ctx->bytes_written = 0;
   25186:	6120      	str	r0, [r4, #16]
	ctx->buf_bytes = 0U;
   25188:	60a0      	str	r0, [r4, #8]
	ctx->offset = offset;
   2518a:	f8c4 8014 	str.w	r8, [r4, #20]
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   2518e:	b916      	cbnz	r6, 25196 <stream_flash_init+0x9e>
   25190:	9e01      	ldr	r6, [sp, #4]
   25192:	eba6 0608 	sub.w	r6, r6, r8
	ctx->callback = cb;
   25196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   25198:	2000      	movs	r0, #0
	ctx->callback = cb;
   2519a:	61e3      	str	r3, [r4, #28]
	ctx->last_erased_page_start_offset = -1;
   2519c:	f04f 33ff 	mov.w	r3, #4294967295
	ctx->available = (size == 0 ? inspect_flash_ctx.total_size - offset :
   251a0:	61a6      	str	r6, [r4, #24]
	ctx->last_erased_page_start_offset = -1;
   251a2:	6223      	str	r3, [r4, #32]
	return 0;
   251a4:	e7b3      	b.n	2510e <stream_flash_init+0x16>
   251a6:	bf00      	nop
   251a8:	0004339c 	.word	0x0004339c
   251ac:	0004339c 	.word	0x0004339c
   251b0:	00045e45 	.word	0x00045e45
   251b4:	00024f4d 	.word	0x00024f4d
   251b8:	00045e7c 	.word	0x00045e7c

000251bc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
   251bc:	4b10      	ldr	r3, [pc, #64]	; (25200 <settings_save_one+0x44>)
{
   251be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
   251c2:	681c      	ldr	r4, [r3, #0]
{
   251c4:	4605      	mov	r5, r0
   251c6:	460e      	mov	r6, r1
   251c8:	4617      	mov	r7, r2
	if (!cs) {
   251ca:	b1ac      	cbz	r4, 251f8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
   251cc:	f04f 32ff 	mov.w	r2, #4294967295
   251d0:	f04f 33ff 	mov.w	r3, #4294967295
   251d4:	480b      	ldr	r0, [pc, #44]	; (25204 <settings_save_one+0x48>)
   251d6:	f012 fb7b 	bl	378d0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
   251da:	6863      	ldr	r3, [r4, #4]
   251dc:	4632      	mov	r2, r6
   251de:	f8d3 8008 	ldr.w	r8, [r3, #8]
   251e2:	4629      	mov	r1, r5
   251e4:	463b      	mov	r3, r7
   251e6:	4620      	mov	r0, r4
   251e8:	47c0      	blx	r8
   251ea:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   251ec:	4805      	ldr	r0, [pc, #20]	; (25204 <settings_save_one+0x48>)
   251ee:	f012 fc69 	bl	37ac4 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
   251f2:	4620      	mov	r0, r4
   251f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
   251f8:	f06f 0401 	mvn.w	r4, #1
   251fc:	e7f9      	b.n	251f2 <settings_save_one+0x36>
   251fe:	bf00      	nop
   25200:	20018ce4 	.word	0x20018ce4
   25204:	20015ad8 	.word	0x20015ad8

00025208 <settings_src_register>:
	parent->next = child;
   25208:	2300      	movs	r3, #0
   2520a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
   2520c:	4b04      	ldr	r3, [pc, #16]	; (25220 <settings_src_register+0x18>)
   2520e:	685a      	ldr	r2, [r3, #4]
   25210:	b912      	cbnz	r2, 25218 <settings_src_register+0x10>
	list->head = node;
   25212:	e9c3 0000 	strd	r0, r0, [r3]
}
   25216:	4770      	bx	lr
	parent->next = child;
   25218:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2521a:	6058      	str	r0, [r3, #4]
}
   2521c:	4770      	bx	lr
   2521e:	bf00      	nop
   25220:	20018cdc 	.word	0x20018cdc

00025224 <settings_dst_register>:
	settings_save_dst = cs;
   25224:	4b01      	ldr	r3, [pc, #4]	; (2522c <settings_dst_register+0x8>)
   25226:	6018      	str	r0, [r3, #0]
}
   25228:	4770      	bx	lr
   2522a:	bf00      	nop
   2522c:	20018ce4 	.word	0x20018ce4

00025230 <settings_load_subtree>:
	const struct settings_load_arg arg = {
   25230:	2300      	movs	r3, #0
{
   25232:	b530      	push	{r4, r5, lr}
   25234:	b085      	sub	sp, #20
   25236:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
   25238:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2523c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
   2523e:	f04f 33ff 	mov.w	r3, #4294967295
   25242:	f04f 32ff 	mov.w	r2, #4294967295
   25246:	480d      	ldr	r0, [pc, #52]	; (2527c <settings_load_subtree+0x4c>)
   25248:	f012 fb42 	bl	378d0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   2524c:	4b0c      	ldr	r3, [pc, #48]	; (25280 <settings_load_subtree+0x50>)
   2524e:	681c      	ldr	r4, [r3, #0]
   25250:	2c00      	cmp	r4, #0
   25252:	bf38      	it	cc
   25254:	2400      	movcc	r4, #0
   25256:	b13c      	cbz	r4, 25268 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
   25258:	6863      	ldr	r3, [r4, #4]
   2525a:	4620      	mov	r0, r4
   2525c:	681b      	ldr	r3, [r3, #0]
   2525e:	a901      	add	r1, sp, #4
   25260:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25262:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
   25264:	2c00      	cmp	r4, #0
   25266:	d1f6      	bne.n	25256 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
   25268:	4628      	mov	r0, r5
   2526a:	f000 f8c7 	bl	253fc <settings_commit_subtree>
   2526e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   25270:	4802      	ldr	r0, [pc, #8]	; (2527c <settings_load_subtree+0x4c>)
   25272:	f012 fc27 	bl	37ac4 <z_impl_k_mutex_unlock>
}
   25276:	4620      	mov	r0, r4
   25278:	b005      	add	sp, #20
   2527a:	bd30      	pop	{r4, r5, pc}
   2527c:	20015ad8 	.word	0x20015ad8
   25280:	20018cdc 	.word	0x20018cdc

00025284 <settings_store_init>:
	list->head = NULL;
   25284:	2200      	movs	r2, #0
   25286:	4b02      	ldr	r3, [pc, #8]	; (25290 <settings_store_init+0xc>)
	list->tail = NULL;
   25288:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
   2528c:	4770      	bx	lr
   2528e:	bf00      	nop
   25290:	20018cdc 	.word	0x20018cdc

00025294 <settings_init>:
	list->head = NULL;
   25294:	2200      	movs	r2, #0
   25296:	4b02      	ldr	r3, [pc, #8]	; (252a0 <settings_init+0xc>)
	list->tail = NULL;
   25298:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
   2529c:	f7ff bff2 	b.w	25284 <settings_store_init>
   252a0:	20018ce8 	.word	0x20018ce8

000252a4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
   252a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   252a8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
   252aa:	460e      	mov	r6, r1
   252ac:	b109      	cbz	r1, 252b2 <settings_parse_and_lookup+0xe>
		*next = NULL;
   252ae:	2300      	movs	r3, #0
   252b0:	600b      	str	r3, [r1, #0]
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   252b2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 25364 <settings_parse_and_lookup+0xc0>
   252b6:	2500      	movs	r5, #0
   252b8:	46c2      	mov	sl, r8
   252ba:	4c25      	ldr	r4, [pc, #148]	; (25350 <settings_parse_and_lookup+0xac>)
   252bc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 25368 <settings_parse_and_lookup+0xc4>
   252c0:	4544      	cmp	r4, r8
   252c2:	d90c      	bls.n	252de <settings_parse_and_lookup+0x3a>
   252c4:	4923      	ldr	r1, [pc, #140]	; (25354 <settings_parse_and_lookup+0xb0>)
   252c6:	2394      	movs	r3, #148	; 0x94
   252c8:	464a      	mov	r2, r9
   252ca:	4823      	ldr	r0, [pc, #140]	; (25358 <settings_parse_and_lookup+0xb4>)
   252cc:	f017 fd53 	bl	3cd76 <printk>
   252d0:	4822      	ldr	r0, [pc, #136]	; (2535c <settings_parse_and_lookup+0xb8>)
   252d2:	f017 fd50 	bl	3cd76 <printk>
   252d6:	2194      	movs	r1, #148	; 0x94
   252d8:	4648      	mov	r0, r9
   252da:	f018 f800 	bl	3d2de <assert_post_action>
   252de:	4554      	cmp	r4, sl
   252e0:	d308      	bcc.n	252f4 <settings_parse_and_lookup+0x50>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   252e2:	4b1f      	ldr	r3, [pc, #124]	; (25360 <settings_parse_and_lookup+0xbc>)
   252e4:	681c      	ldr	r4, [r3, #0]
   252e6:	b10c      	cbz	r4, 252ec <settings_parse_and_lookup+0x48>
   252e8:	3c14      	subs	r4, #20
   252ea:	b9c4      	cbnz	r4, 2531e <settings_parse_and_lookup+0x7a>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
   252ec:	4628      	mov	r0, r5
   252ee:	b002      	add	sp, #8
   252f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   252f4:	4638      	mov	r0, r7
   252f6:	6821      	ldr	r1, [r4, #0]
   252f8:	aa01      	add	r2, sp, #4
   252fa:	f018 fd36 	bl	3dd6a <settings_name_steq>
   252fe:	b160      	cbz	r0, 2531a <settings_parse_and_lookup+0x76>
		if (!bestmatch) {
   25300:	b925      	cbnz	r5, 2530c <settings_parse_and_lookup+0x68>
			if (next) {
   25302:	b10e      	cbz	r6, 25308 <settings_parse_and_lookup+0x64>
				*next = tmpnext;
   25304:	9b01      	ldr	r3, [sp, #4]
   25306:	6033      	str	r3, [r6, #0]
   25308:	4625      	mov	r5, r4
   2530a:	e006      	b.n	2531a <settings_parse_and_lookup+0x76>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   2530c:	2200      	movs	r2, #0
   2530e:	6829      	ldr	r1, [r5, #0]
   25310:	6820      	ldr	r0, [r4, #0]
   25312:	f018 fd2a 	bl	3dd6a <settings_name_steq>
   25316:	2800      	cmp	r0, #0
   25318:	d1f3      	bne.n	25302 <settings_parse_and_lookup+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   2531a:	3414      	adds	r4, #20
   2531c:	e7d0      	b.n	252c0 <settings_parse_and_lookup+0x1c>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
   2531e:	4638      	mov	r0, r7
   25320:	6821      	ldr	r1, [r4, #0]
   25322:	aa01      	add	r2, sp, #4
   25324:	f018 fd21 	bl	3dd6a <settings_name_steq>
   25328:	b160      	cbz	r0, 25344 <settings_parse_and_lookup+0xa0>
		if (!bestmatch) {
   2532a:	b925      	cbnz	r5, 25336 <settings_parse_and_lookup+0x92>
			if (next) {
   2532c:	b10e      	cbz	r6, 25332 <settings_parse_and_lookup+0x8e>
				*next = tmpnext;
   2532e:	9b01      	ldr	r3, [sp, #4]
   25330:	6033      	str	r3, [r6, #0]
   25332:	4625      	mov	r5, r4
   25334:	e006      	b.n	25344 <settings_parse_and_lookup+0xa0>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
   25336:	2200      	movs	r2, #0
   25338:	6829      	ldr	r1, [r5, #0]
   2533a:	6820      	ldr	r0, [r4, #0]
   2533c:	f018 fd15 	bl	3dd6a <settings_name_steq>
   25340:	2800      	cmp	r0, #0
   25342:	d1f3      	bne.n	2532c <settings_parse_and_lookup+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25344:	f114 0f14 	cmn.w	r4, #20
   25348:	d0d0      	beq.n	252ec <settings_parse_and_lookup+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2534a:	6964      	ldr	r4, [r4, #20]
   2534c:	e7cb      	b.n	252e6 <settings_parse_and_lookup+0x42>
   2534e:	bf00      	nop
   25350:	00043374 	.word	0x00043374
   25354:	00045ecf 	.word	0x00045ecf
   25358:	00044dbf 	.word	0x00044dbf
   2535c:	00045ca5 	.word	0x00045ca5
   25360:	20018ce8 	.word	0x20018ce8
   25364:	0004339c 	.word	0x0004339c
   25368:	00045e9d 	.word	0x00045e9d

0002536c <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
   2536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25370:	b086      	sub	sp, #24
   25372:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   25374:	4605      	mov	r5, r0
   25376:	460c      	mov	r4, r1
   25378:	4616      	mov	r6, r2
	int rc;
	const char *name_key = name;
   2537a:	9005      	str	r0, [sp, #20]

	if (load_arg && load_arg->subtree &&
   2537c:	b1bf      	cbz	r7, 253ae <settings_call_set_handler+0x42>
   2537e:	6839      	ldr	r1, [r7, #0]
   25380:	b181      	cbz	r1, 253a4 <settings_call_set_handler+0x38>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
   25382:	aa05      	add	r2, sp, #20
   25384:	9303      	str	r3, [sp, #12]
   25386:	f018 fcf0 	bl	3dd6a <settings_name_steq>
	if (load_arg && load_arg->subtree &&
   2538a:	9b03      	ldr	r3, [sp, #12]
   2538c:	b950      	cbnz	r0, 253a4 <settings_call_set_handler+0x38>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
   2538e:	2000      	movs	r0, #0
   25390:	e005      	b.n	2539e <settings_call_set_handler+0x32>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
   25392:	68ba      	ldr	r2, [r7, #8]
   25394:	4621      	mov	r1, r4
   25396:	9200      	str	r2, [sp, #0]
   25398:	9805      	ldr	r0, [sp, #20]
   2539a:	4632      	mov	r2, r6
   2539c:	47c0      	blx	r8
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
   2539e:	b006      	add	sp, #24
   253a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (load_arg && load_arg->cb) {
   253a4:	f8d7 8004 	ldr.w	r8, [r7, #4]
   253a8:	f1b8 0f00 	cmp.w	r8, #0
   253ac:	d1f1      	bne.n	25392 <settings_call_set_handler+0x26>
		ch = settings_parse_and_lookup(name, &name_key);
   253ae:	4628      	mov	r0, r5
   253b0:	a905      	add	r1, sp, #20
   253b2:	9303      	str	r3, [sp, #12]
   253b4:	f7ff ff76 	bl	252a4 <settings_parse_and_lookup>
		if (!ch) {
   253b8:	2800      	cmp	r0, #0
   253ba:	d0e8      	beq.n	2538e <settings_call_set_handler+0x22>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
   253bc:	4632      	mov	r2, r6
   253be:	6887      	ldr	r7, [r0, #8]
   253c0:	4621      	mov	r1, r4
   253c2:	9b03      	ldr	r3, [sp, #12]
   253c4:	9805      	ldr	r0, [sp, #20]
   253c6:	47b8      	blx	r7
		if (rc != 0) {
   253c8:	4606      	mov	r6, r0
   253ca:	2800      	cmp	r0, #0
   253cc:	d0df      	beq.n	2538e <settings_call_set_handler+0x22>
   253ce:	4b08      	ldr	r3, [pc, #32]	; (253f0 <settings_call_set_handler+0x84>)
   253d0:	4c08      	ldr	r4, [pc, #32]	; (253f4 <settings_call_set_handler+0x88>)
			LOG_ERR("set-value failure. key: %s error(%d)",
   253d2:	4628      	mov	r0, r5
   253d4:	1ae4      	subs	r4, r4, r3
   253d6:	f017 ffa6 	bl	3d326 <log_strdup>
   253da:	08e4      	lsrs	r4, r4, #3
   253dc:	01a4      	lsls	r4, r4, #6
   253de:	f044 0401 	orr.w	r4, r4, #1
   253e2:	4602      	mov	r2, r0
   253e4:	4633      	mov	r3, r6
   253e6:	4620      	mov	r0, r4
   253e8:	4903      	ldr	r1, [pc, #12]	; (253f8 <settings_call_set_handler+0x8c>)
   253ea:	f017 ff89 	bl	3d300 <log_string_sync>
   253ee:	e7ce      	b.n	2538e <settings_call_set_handler+0x22>
   253f0:	0004339c 	.word	0x0004339c
   253f4:	000434d4 	.word	0x000434d4
   253f8:	00045ef7 	.word	0x00045ef7

000253fc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
   253fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25400:	4f23      	ldr	r7, [pc, #140]	; (25490 <settings_commit_subtree+0x94>)
{
   25402:	4606      	mov	r6, r0
	rc = 0;
   25404:	2500      	movs	r5, #0
   25406:	46b9      	mov	r9, r7
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25408:	4c22      	ldr	r4, [pc, #136]	; (25494 <settings_commit_subtree+0x98>)
   2540a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 254a8 <settings_commit_subtree+0xac>
   2540e:	42bc      	cmp	r4, r7
   25410:	d90c      	bls.n	2542c <settings_commit_subtree+0x30>
   25412:	4921      	ldr	r1, [pc, #132]	; (25498 <settings_commit_subtree+0x9c>)
   25414:	23f4      	movs	r3, #244	; 0xf4
   25416:	4642      	mov	r2, r8
   25418:	4820      	ldr	r0, [pc, #128]	; (2549c <settings_commit_subtree+0xa0>)
   2541a:	f017 fcac 	bl	3cd76 <printk>
   2541e:	4820      	ldr	r0, [pc, #128]	; (254a0 <settings_commit_subtree+0xa4>)
   25420:	f017 fca9 	bl	3cd76 <printk>
   25424:	21f4      	movs	r1, #244	; 0xf4
   25426:	4640      	mov	r0, r8
   25428:	f017 ff59 	bl	3d2de <assert_post_action>
   2542c:	454c      	cmp	r4, r9
   2542e:	d307      	bcc.n	25440 <settings_commit_subtree+0x44>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
   25430:	4b1c      	ldr	r3, [pc, #112]	; (254a4 <settings_commit_subtree+0xa8>)
   25432:	681c      	ldr	r4, [r3, #0]
   25434:	b10c      	cbz	r4, 2543a <settings_commit_subtree+0x3e>
   25436:	3c14      	subs	r4, #20
   25438:	b9a4      	cbnz	r4, 25464 <settings_commit_subtree+0x68>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
   2543a:	4628      	mov	r0, r5
   2543c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25440:	b91e      	cbnz	r6, 2544a <settings_commit_subtree+0x4e>
		if (ch->h_commit) {
   25442:	68e3      	ldr	r3, [r4, #12]
   25444:	b94b      	cbnz	r3, 2545a <settings_commit_subtree+0x5e>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
   25446:	3414      	adds	r4, #20
   25448:	e7e1      	b.n	2540e <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   2544a:	2200      	movs	r2, #0
   2544c:	4631      	mov	r1, r6
   2544e:	6820      	ldr	r0, [r4, #0]
   25450:	f018 fc8b 	bl	3dd6a <settings_name_steq>
   25454:	2800      	cmp	r0, #0
   25456:	d1f4      	bne.n	25442 <settings_commit_subtree+0x46>
   25458:	e7f5      	b.n	25446 <settings_commit_subtree+0x4a>
			rc2 = ch->h_commit();
   2545a:	4798      	blx	r3
				rc = rc2;
   2545c:	2d00      	cmp	r5, #0
   2545e:	bf08      	it	eq
   25460:	4605      	moveq	r5, r0
   25462:	e7f0      	b.n	25446 <settings_commit_subtree+0x4a>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25464:	b936      	cbnz	r6, 25474 <settings_commit_subtree+0x78>
		if (ch->h_commit) {
   25466:	68e3      	ldr	r3, [r4, #12]
   25468:	b963      	cbnz	r3, 25484 <settings_commit_subtree+0x88>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2546a:	f114 0f14 	cmn.w	r4, #20
   2546e:	d0e4      	beq.n	2543a <settings_commit_subtree+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25470:	6964      	ldr	r4, [r4, #20]
   25472:	e7df      	b.n	25434 <settings_commit_subtree+0x38>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
   25474:	2200      	movs	r2, #0
   25476:	4631      	mov	r1, r6
   25478:	6820      	ldr	r0, [r4, #0]
   2547a:	f018 fc76 	bl	3dd6a <settings_name_steq>
   2547e:	2800      	cmp	r0, #0
   25480:	d1f1      	bne.n	25466 <settings_commit_subtree+0x6a>
   25482:	e7f2      	b.n	2546a <settings_commit_subtree+0x6e>
			rc2 = ch->h_commit();
   25484:	4798      	blx	r3
				rc = rc2;
   25486:	2d00      	cmp	r5, #0
   25488:	bf08      	it	eq
   2548a:	4605      	moveq	r5, r0
   2548c:	e7ed      	b.n	2546a <settings_commit_subtree+0x6e>
   2548e:	bf00      	nop
   25490:	0004339c 	.word	0x0004339c
   25494:	00043374 	.word	0x00043374
   25498:	00045ecf 	.word	0x00045ecf
   2549c:	00044dbf 	.word	0x00044dbf
   254a0:	00045ca5 	.word	0x00045ca5
   254a4:	20018ce8 	.word	0x20018ce8
   254a8:	00045e9d 	.word	0x00045e9d

000254ac <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
   254ac:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
   254ae:	4c06      	ldr	r4, [pc, #24]	; (254c8 <settings_subsys_init+0x1c>)
   254b0:	7823      	ldrb	r3, [r4, #0]
   254b2:	b93b      	cbnz	r3, 254c4 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
   254b4:	f7ff feee 	bl	25294 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
   254b8:	f000 faa8 	bl	25a0c <settings_backend_init>

	if (!err) {
   254bc:	b908      	cbnz	r0, 254c2 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
   254be:	2301      	movs	r3, #1
   254c0:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
   254c2:	bd10      	pop	{r4, pc}
		return 0;
   254c4:	2000      	movs	r0, #0
   254c6:	e7fc      	b.n	254c2 <settings_subsys_init+0x16>
   254c8:	2001ebd8 	.word	0x2001ebd8

000254cc <settings_line_raw_read_until>:
 * -ERCODE on storage errors
 */
static int settings_line_raw_read_until(off_t seek, char *out, size_t len_req,
				 size_t *len_read, char const *until_char,
				 void *cb_arg)
{
   254cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254d0:	b08b      	sub	sp, #44	; 0x2c
   254d2:	9301      	str	r3, [sp, #4]
	size_t rem_size, len;
	char temp_buf[16]; /* buffer for fit read-block-size requirements */
	size_t exp_size, read_size;
	uint8_t rbs = settings_io_cb.rwbs;
   254d4:	4b2a      	ldr	r3, [pc, #168]	; (25580 <settings_line_raw_read_until+0xb4>)
{
   254d6:	4606      	mov	r6, r0
   254d8:	4688      	mov	r8, r1
	off_t off;
	int rc = -EINVAL;

	if (len_req == 0) {
   254da:	4615      	mov	r5, r2
	uint8_t rbs = settings_io_cb.rwbs;
   254dc:	f893 a00c 	ldrb.w	sl, [r3, #12]
	if (len_req == 0) {
   254e0:	2a00      	cmp	r2, #0
   254e2:	d046      	beq.n	25572 <settings_line_raw_read_until+0xa6>
   254e4:	4617      	mov	r7, r2
		off = seek / rbs * rbs;

		read_size = sizeof(temp_buf);
		exp_size = read_size;

		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   254e6:	9302      	str	r3, [sp, #8]
		off = seek / rbs * rbs;
   254e8:	fb96 fbfa 	sdiv	fp, r6, sl
		read_size = sizeof(temp_buf);
   254ec:	2310      	movs	r3, #16
		off = seek / rbs * rbs;
   254ee:	fb0a fb0b 	mul.w	fp, sl, fp
		read_size = sizeof(temp_buf);
   254f2:	9305      	str	r3, [sp, #20]
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   254f4:	9b02      	ldr	r3, [sp, #8]
   254f6:	4659      	mov	r1, fp
   254f8:	681c      	ldr	r4, [r3, #0]
   254fa:	9815      	ldr	r0, [sp, #84]	; 0x54
   254fc:	ab05      	add	r3, sp, #20
   254fe:	aa06      	add	r2, sp, #24
   25500:	47a0      	blx	r4
		if (rc) {
   25502:	4604      	mov	r4, r0
   25504:	2800      	cmp	r0, #0
   25506:	d137      	bne.n	25578 <settings_line_raw_read_until+0xac>
			return -EIO;
		}

		off = seek - off;
		len = read_size - off;
   25508:	9a05      	ldr	r2, [sp, #20]
   2550a:	eba6 0b0b 	sub.w	fp, r6, fp
   2550e:	eba2 020b 	sub.w	r2, r2, fp
		len = MIN(rem_size, len);
   25512:	42ba      	cmp	r2, r7
   25514:	bf28      	it	cs
   25516:	463a      	movcs	r2, r7
   25518:	ab06      	add	r3, sp, #24
   2551a:	449b      	add	fp, r3

		if (until_char != NULL) {
   2551c:	9b14      	ldr	r3, [sp, #80]	; 0x50
		len = MIN(rem_size, len);
   2551e:	4691      	mov	r9, r2
		if (until_char != NULL) {
   25520:	b31b      	cbz	r3, 2556a <settings_line_raw_read_until+0x9e>
			char *pend;
			pend = memchr(&temp_buf[off], *until_char, len);
   25522:	4658      	mov	r0, fp
   25524:	7819      	ldrb	r1, [r3, #0]
   25526:	f01c fb9e 	bl	41c66 <memchr>
			if (pend != NULL) {
   2552a:	b300      	cbz	r0, 2556e <settings_line_raw_read_until+0xa2>
				len = pend - &temp_buf[off];
				rc = 1; /* will cause loop expiration */
   2552c:	2301      	movs	r3, #1
				len = pend - &temp_buf[off];
   2552e:	eba0 090b 	sub.w	r9, r0, fp
   25532:	4659      	mov	r1, fp
   25534:	464a      	mov	r2, r9
   25536:	4640      	mov	r0, r8
   25538:	9303      	str	r3, [sp, #12]
   2553a:	f01c fbb0 	bl	41c9e <memcpy>

		memcpy(out, &temp_buf[off], len);

		rem_size -= len;

		if (exp_size > read_size || rc) {
   2553e:	9905      	ldr	r1, [sp, #20]
   25540:	9b03      	ldr	r3, [sp, #12]
   25542:	290f      	cmp	r1, #15
		rem_size -= len;
   25544:	eba7 0709 	sub.w	r7, r7, r9
		if (exp_size > read_size || rc) {
   25548:	d904      	bls.n	25554 <settings_line_raw_read_until+0x88>
   2554a:	b91b      	cbnz	r3, 25554 <settings_line_raw_read_until+0x88>
			break;
		}

		out += len;
   2554c:	44c8      	add	r8, r9
		seek += len;
   2554e:	444e      	add	r6, r9
	while (rem_size) {
   25550:	2f00      	cmp	r7, #0
   25552:	d1c9      	bne.n	254e8 <settings_line_raw_read_until+0x1c>
	}

	*len_read = len_req - rem_size;
   25554:	9a01      	ldr	r2, [sp, #4]
   25556:	1bed      	subs	r5, r5, r7
   25558:	6015      	str	r5, [r2, #0]

	if (until_char != NULL) {
   2555a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2555c:	b10a      	cbz	r2, 25562 <settings_line_raw_read_until+0x96>
		return (rc) ? 0 : 1;
   2555e:	f083 0401 	eor.w	r4, r3, #1
	}

	return 0;
}
   25562:	4620      	mov	r0, r4
   25564:	b00b      	add	sp, #44	; 0x2c
   25566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_io_cb.read_cb(cb_arg, off, temp_buf, &read_size);
   2556a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2556c:	e7e1      	b.n	25532 <settings_line_raw_read_until+0x66>
   2556e:	4623      	mov	r3, r4
   25570:	e7df      	b.n	25532 <settings_line_raw_read_until+0x66>
		return -EINVAL;
   25572:	f06f 0415 	mvn.w	r4, #21
   25576:	e7f4      	b.n	25562 <settings_line_raw_read_until+0x96>
			return -EIO;
   25578:	f06f 0404 	mvn.w	r4, #4
   2557c:	e7f1      	b.n	25562 <settings_line_raw_read_until+0x96>
   2557e:	bf00      	nop
   25580:	20018cf0 	.word	0x20018cf0

00025584 <settings_line_write>:
{
   25584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t wbs = settings_io_cb.rwbs;
   25588:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 25648 <settings_line_write+0xc4>
{
   2558c:	b087      	sub	sp, #28
	uint8_t wbs = settings_io_cb.rwbs;
   2558e:	f89a 800c 	ldrb.w	r8, [sl, #12]
{
   25592:	4681      	mov	r9, r0
   25594:	468b      	mov	fp, r1
   25596:	4617      	mov	r7, r2
   25598:	9301      	str	r3, [sp, #4]
	rem = strlen(name);
   2559a:	f7f7 fe5f 	bl	1d25c <strlen>
	w_size = rem - rem % wbs;
   2559e:	fbb0 f4f8 	udiv	r4, r0, r8
   255a2:	fb08 0414 	mls	r4, r8, r4, r0
   255a6:	1b05      	subs	r5, r0, r4
	rc = settings_io_cb.write_cb(cb_arg, w_loc, name, w_size);
   255a8:	462b      	mov	r3, r5
   255aa:	f8da 6004 	ldr.w	r6, [sl, #4]
   255ae:	464a      	mov	r2, r9
   255b0:	9901      	ldr	r1, [sp, #4]
   255b2:	9810      	ldr	r0, [sp, #64]	; 0x40
   255b4:	47b0      	blx	r6
	w_loc += w_size;
   255b6:	9b01      	ldr	r3, [sp, #4]
   255b8:	442b      	add	r3, r5
   255ba:	461e      	mov	r6, r3
	if (rem) {
   255bc:	b134      	cbz	r4, 255cc <settings_line_write+0x48>
		memcpy(w_buf, name, rem);
   255be:	2310      	movs	r3, #16
   255c0:	4622      	mov	r2, r4
   255c2:	eb09 0105 	add.w	r1, r9, r5
   255c6:	a802      	add	r0, sp, #8
   255c8:	f01c fb76 	bl	41cb8 <__memcpy_chk>
	w_buf[rem] = '=';
   255cc:	223d      	movs	r2, #61	; 0x3d
   255ce:	ab06      	add	r3, sp, #24
   255d0:	4423      	add	r3, r4
   255d2:	f803 2c10 	strb.w	r2, [r3, #-16]
	w_size++;
   255d6:	f104 0901 	add.w	r9, r4, #1
		while (w_size < sizeof(w_buf)) {
   255da:	f1b9 0f0f 	cmp.w	r9, #15
   255de:	d90b      	bls.n	255f8 <settings_line_write+0x74>
   255e0:	2400      	movs	r4, #0
		rc = settings_io_cb.write_cb(cb_arg, w_loc, w_buf, w_size);
   255e2:	464b      	mov	r3, r9
   255e4:	4631      	mov	r1, r6
   255e6:	f8da 5004 	ldr.w	r5, [sl, #4]
   255ea:	9810      	ldr	r0, [sp, #64]	; 0x40
   255ec:	aa02      	add	r2, sp, #8
   255ee:	47a8      	blx	r5
		if (rc) {
   255f0:	bb20      	cbnz	r0, 2563c <settings_line_write+0xb8>
		if (done) {
   255f2:	bb2c      	cbnz	r4, 25640 <settings_line_write+0xbc>
		w_loc += w_size;
   255f4:	444e      	add	r6, r9
		w_size = 0;
   255f6:	46a1      	mov	r9, r4
			if (rem) {
   255f8:	b17f      	cbz	r7, 2561a <settings_line_write+0x96>
				add = MIN(rem, sizeof(w_buf) - w_size);
   255fa:	f1c9 0410 	rsb	r4, r9, #16
   255fe:	42bc      	cmp	r4, r7
   25600:	bf28      	it	cs
   25602:	463c      	movcs	r4, r7
   25604:	ab02      	add	r3, sp, #8
   25606:	4659      	mov	r1, fp
   25608:	eb03 0009 	add.w	r0, r3, r9
   2560c:	4622      	mov	r2, r4
   2560e:	f01c fb46 	bl	41c9e <memcpy>
				value += add;
   25612:	44a3      	add	fp, r4
				rem -= add;
   25614:	1b3f      	subs	r7, r7, r4
				w_size += add;
   25616:	44a1      	add	r9, r4
   25618:	e7df      	b.n	255da <settings_line_write+0x56>
				add = (w_size) % wbs;
   2561a:	fbb9 f4f8 	udiv	r4, r9, r8
   2561e:	fb08 9414 	mls	r4, r8, r4, r9
				if (add) {
   25622:	b14c      	cbz	r4, 25638 <settings_line_write+0xb4>
					add = wbs - add;
   25624:	eba8 0404 	sub.w	r4, r8, r4
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   25628:	ab02      	add	r3, sp, #8
   2562a:	eb03 0009 	add.w	r0, r3, r9
   2562e:	4622      	mov	r2, r4
   25630:	4639      	mov	r1, r7
   25632:	f01c fb54 	bl	41cde <memset>
					w_size += add;
   25636:	44a1      	add	r9, r4
				done = true;
   25638:	2401      	movs	r4, #1
   2563a:	e7d2      	b.n	255e2 <settings_line_write+0x5e>
			return -EIO;
   2563c:	f06f 0004 	mvn.w	r0, #4
}
   25640:	b007      	add	sp, #28
   25642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25646:	bf00      	nop
   25648:	20018cf0 	.word	0x20018cf0

0002564c <settings_line_val_get_len>:

size_t settings_line_val_get_len(off_t val_off, void *read_cb_ctx)
{
	size_t len;

	len = settings_io_cb.get_len_cb(read_cb_ctx);
   2564c:	4b03      	ldr	r3, [pc, #12]	; (2565c <settings_line_val_get_len+0x10>)
{
   2564e:	b510      	push	{r4, lr}
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25650:	689b      	ldr	r3, [r3, #8]
{
   25652:	4604      	mov	r4, r0
	len = settings_io_cb.get_len_cb(read_cb_ctx);
   25654:	4608      	mov	r0, r1
   25656:	4798      	blx	r3

	return len - val_off;
}
   25658:	1b00      	subs	r0, r0, r4
   2565a:	bd10      	pop	{r4, pc}
   2565c:	20018cf0 	.word	0x20018cf0

00025660 <settings_line_entry_copy>:
}


int settings_line_entry_copy(void *dst_ctx, off_t dst_off, void *src_ctx,
			     off_t src_off, size_t len)
{
   25660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25664:	4680      	mov	r8, r0
   25666:	468a      	mov	sl, r1
   25668:	4691      	mov	r9, r2
   2566a:	461d      	mov	r5, r3
	int rc = -EINVAL;
   2566c:	f06f 0015 	mvn.w	r0, #21
{
   25670:	b086      	sub	sp, #24
   25672:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	size_t chunk_size;

	while (len) {
		chunk_size = MIN(len, sizeof(buf));

		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25674:	4f13      	ldr	r7, [pc, #76]	; (256c4 <settings_line_entry_copy+0x64>)
	while (len) {
   25676:	b916      	cbnz	r6, 2567e <settings_line_entry_copy+0x1e>
		dst_off += chunk_size;
		len -= chunk_size;
	}

	return rc;
}
   25678:	b006      	add	sp, #24
   2567a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chunk_size = MIN(len, sizeof(buf));
   2567e:	2e10      	cmp	r6, #16
   25680:	4633      	mov	r3, r6
   25682:	bf28      	it	cs
   25684:	2310      	movcs	r3, #16
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   25686:	4629      	mov	r1, r5
		chunk_size = MIN(len, sizeof(buf));
   25688:	9301      	str	r3, [sp, #4]
		rc = settings_io_cb.read_cb(src_ctx, src_off, buf, &chunk_size);
   2568a:	4648      	mov	r0, r9
   2568c:	683c      	ldr	r4, [r7, #0]
   2568e:	ab01      	add	r3, sp, #4
   25690:	aa02      	add	r2, sp, #8
   25692:	47a0      	blx	r4
		if (rc) {
   25694:	2800      	cmp	r0, #0
   25696:	d1ef      	bne.n	25678 <settings_line_entry_copy+0x18>
		size_t write_size = chunk_size;
   25698:	9b01      	ldr	r3, [sp, #4]
		if (chunk_size % settings_io_cb.rwbs) {
   2569a:	7b39      	ldrb	r1, [r7, #12]
   2569c:	fbb3 f2f1 	udiv	r2, r3, r1
   256a0:	fb01 3212 	mls	r2, r1, r2, r3
   256a4:	b10a      	cbz	r2, 256aa <settings_line_entry_copy+0x4a>
			write_size += settings_io_cb.rwbs -
   256a6:	440b      	add	r3, r1
   256a8:	1a9b      	subs	r3, r3, r2
		rc = settings_io_cb.write_cb(dst_ctx, dst_off, buf, write_size);
   256aa:	4651      	mov	r1, sl
   256ac:	4640      	mov	r0, r8
   256ae:	687c      	ldr	r4, [r7, #4]
   256b0:	aa02      	add	r2, sp, #8
   256b2:	47a0      	blx	r4
		if (rc) {
   256b4:	2800      	cmp	r0, #0
   256b6:	d1df      	bne.n	25678 <settings_line_entry_copy+0x18>
		src_off += chunk_size;
   256b8:	9b01      	ldr	r3, [sp, #4]
   256ba:	441d      	add	r5, r3
		dst_off += chunk_size;
   256bc:	449a      	add	sl, r3
		len -= chunk_size;
   256be:	1af6      	subs	r6, r6, r3
   256c0:	e7d9      	b.n	25676 <settings_line_entry_copy+0x16>
   256c2:	bf00      	nop
   256c4:	20018cf0 	.word	0x20018cf0

000256c8 <settings_line_io_init>:
					  size_t *len),
			  int (*write_cb)(void *ctx, off_t off, char const *buf,
					  size_t len),
			  size_t (*get_len_cb)(void *ctx),
			  uint8_t io_rwbs)
{
   256c8:	b510      	push	{r4, lr}
	settings_io_cb.read_cb = read_cb;
   256ca:	4c03      	ldr	r4, [pc, #12]	; (256d8 <settings_line_io_init+0x10>)
	settings_io_cb.write_cb = write_cb;
   256cc:	e9c4 0100 	strd	r0, r1, [r4]
	settings_io_cb.get_len_cb = get_len_cb;
   256d0:	60a2      	str	r2, [r4, #8]
	settings_io_cb.rwbs = io_rwbs;
   256d2:	7323      	strb	r3, [r4, #12]
}
   256d4:	bd10      	pop	{r4, pc}
   256d6:	bf00      	nop
   256d8:	20018cf0 	.word	0x20018cf0

000256dc <settings_line_load_cb>:
	return -1;
}

int settings_line_load_cb(const char *name, void *val_read_cb_ctx, off_t off,
			  void *cb_arg)
{
   256dc:	b530      	push	{r4, r5, lr}
   256de:	4604      	mov	r4, r0
   256e0:	b085      	sub	sp, #20
   256e2:	4610      	mov	r0, r2
   256e4:	461d      	mov	r5, r3
	size_t len;
	struct settings_line_read_value_cb_ctx value_ctx;
	struct settings_load_arg *arg = cb_arg;
	value_ctx.read_cb_ctx = val_read_cb_ctx;
	value_ctx.off = off;
   256e6:	e9cd 1202 	strd	r1, r2, [sp, #8]
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   256ea:	f7ff ffaf 	bl	2564c <settings_line_val_get_len>

	return settings_call_set_handler(name, len, settings_line_read_cb,
   256ee:	4a04      	ldr	r2, [pc, #16]	; (25700 <settings_line_load_cb+0x24>)
	len = settings_line_val_get_len(off, val_read_cb_ctx);
   256f0:	4601      	mov	r1, r0
	return settings_call_set_handler(name, len, settings_line_read_cb,
   256f2:	9500      	str	r5, [sp, #0]
   256f4:	4620      	mov	r0, r4
   256f6:	ab02      	add	r3, sp, #8
   256f8:	f7ff fe38 	bl	2536c <settings_call_set_handler>
					 &value_ctx, arg);
}
   256fc:	b005      	add	sp, #20
   256fe:	bd30      	pop	{r4, r5, pc}
   25700:	0003ddcb 	.word	0x0003ddcb

00025704 <settings_fcb_load_priv>:

static int settings_fcb_load_priv(struct settings_store *cs,
				  line_load_cb cb,
				  void *cb_arg,
				  bool filter_duplicates)
{
   25704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25708:	4607      	mov	r7, r0
   2570a:	b0b3      	sub	sp, #204	; 0xcc
   2570c:	4688      	mov	r8, r1
   2570e:	4691      	mov	r9, r2
	struct settings_fcb *cf = (struct settings_fcb *)cs;
	struct fcb_entry_ctx entry_ctx = {
   25710:	2100      	movs	r1, #0
   25712:	2210      	movs	r2, #16
   25714:	a802      	add	r0, sp, #8
{
   25716:	469a      	mov	sl, r3
	struct fcb_entry_ctx entry_ctx = {
   25718:	f01c fae1 	bl	41cde <memset>
   2571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2571e:	4c2c      	ldr	r4, [pc, #176]	; (257d0 <settings_fcb_load_priv+0xcc>)
   25720:	9306      	str	r3, [sp, #24]
   25722:	4b2c      	ldr	r3, [pc, #176]	; (257d4 <settings_fcb_load_priv+0xd0>)
   25724:	1ae4      	subs	r4, r4, r3
   25726:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("failed to load line");
   25728:	01a4      	lsls	r4, r4, #6
   2572a:	f044 0401 	orr.w	r4, r4, #1
		{.fe_sector = NULL, .fe_elem_off = 0},
		.fap = cf->cf_fcb.fap
	};
	int rc;

	while ((rc = fcb_getnext(&cf->cf_fcb, &entry_ctx.loc)) == 0) {
   2572e:	f107 0b08 	add.w	fp, r7, #8
   25732:	4658      	mov	r0, fp
   25734:	a902      	add	r1, sp, #8
   25736:	f018 f8b3 	bl	3d8a0 <fcb_getnext>
   2573a:	b118      	cbz	r0, 25744 <settings_fcb_load_priv+0x40>
	}
	if (rc == -ENOTSUP) {
		rc = 0;
	}
	return 0;
}
   2573c:	2000      	movs	r0, #0
   2573e:	b033      	add	sp, #204	; 0xcc
   25740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rc = settings_line_name_read(name, sizeof(name), &name_len,
   25744:	466a      	mov	r2, sp
   25746:	214a      	movs	r1, #74	; 0x4a
   25748:	ab02      	add	r3, sp, #8
   2574a:	a80c      	add	r0, sp, #48	; 0x30
   2574c:	f018 fb4c 	bl	3dde8 <settings_line_name_read>
		if (rc) {
   25750:	b128      	cbz	r0, 2575e <settings_fcb_load_priv+0x5a>
			LOG_ERR("Failed to load line name: %d", rc);
   25752:	4602      	mov	r2, r0
   25754:	4920      	ldr	r1, [pc, #128]	; (257d8 <settings_fcb_load_priv+0xd4>)
   25756:	4620      	mov	r0, r4
   25758:	f017 fdd2 	bl	3d300 <log_string_sync>
			continue;
   2575c:	e7e7      	b.n	2572e <settings_fcb_load_priv+0x2a>
		name[name_len] = '\0';
   2575e:	9b00      	ldr	r3, [sp, #0]
   25760:	aa32      	add	r2, sp, #200	; 0xc8
   25762:	441a      	add	r2, r3
   25764:	f802 0c98 	strb.w	r0, [r2, #-152]
		if (filter_duplicates &&
   25768:	f1ba 0f00 	cmp.w	sl, #0
   2576c:	d010      	beq.n	25790 <settings_fcb_load_priv+0x8c>
	if (off >= entry_ctx->loc.fe_data_len) {
   2576e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   25772:	3301      	adds	r3, #1
   25774:	4293      	cmp	r3, r2
   25776:	dada      	bge.n	2572e <settings_fcb_load_priv+0x2a>
	struct fcb_entry_ctx entry2_ctx = *entry_ctx;
   25778:	ad07      	add	r5, sp, #28
   2577a:	ae02      	add	r6, sp, #8
   2577c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2577e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25780:	6833      	ldr	r3, [r6, #0]
   25782:	602b      	str	r3, [r5, #0]
			LOG_ERR("failed to load line");
   25784:	4d15      	ldr	r5, [pc, #84]	; (257dc <settings_fcb_load_priv+0xd8>)
	while (fcb_getnext(&cf->cf_fcb, &entry2_ctx.loc) == 0) {
   25786:	4658      	mov	r0, fp
   25788:	a907      	add	r1, sp, #28
   2578a:	f018 f889 	bl	3d8a0 <fcb_getnext>
   2578e:	b130      	cbz	r0, 2579e <settings_fcb_load_priv+0x9a>
			cb(name, &entry_ctx, name_len + 1, cb_arg);
   25790:	9a00      	ldr	r2, [sp, #0]
   25792:	464b      	mov	r3, r9
   25794:	3201      	adds	r2, #1
   25796:	a902      	add	r1, sp, #8
   25798:	a80c      	add	r0, sp, #48	; 0x30
   2579a:	47c0      	blx	r8
   2579c:	e7c7      	b.n	2572e <settings_fcb_load_priv+0x2a>
		if (settings_line_name_read(name2, sizeof(name2), &name2_len,
   2579e:	214a      	movs	r1, #74	; 0x4a
   257a0:	ab07      	add	r3, sp, #28
   257a2:	aa01      	add	r2, sp, #4
   257a4:	a81f      	add	r0, sp, #124	; 0x7c
   257a6:	f018 fb1f 	bl	3dde8 <settings_line_name_read>
   257aa:	b120      	cbz	r0, 257b6 <settings_fcb_load_priv+0xb2>
			LOG_ERR("failed to load line");
   257ac:	4629      	mov	r1, r5
   257ae:	4620      	mov	r0, r4
   257b0:	f017 fda6 	bl	3d300 <log_string_sync>
			continue;
   257b4:	e7e7      	b.n	25786 <settings_fcb_load_priv+0x82>
		name2[name2_len] = '\0';
   257b6:	9b01      	ldr	r3, [sp, #4]
   257b8:	aa32      	add	r2, sp, #200	; 0xc8
   257ba:	4413      	add	r3, r2
   257bc:	f803 0c4c 	strb.w	r0, [r3, #-76]
		if (!strcmp(name, name2)) {
   257c0:	a91f      	add	r1, sp, #124	; 0x7c
   257c2:	a80c      	add	r0, sp, #48	; 0x30
   257c4:	f7f7 fd40 	bl	1d248 <strcmp>
   257c8:	2800      	cmp	r0, #0
   257ca:	d1dc      	bne.n	25786 <settings_fcb_load_priv+0x82>
   257cc:	e7af      	b.n	2572e <settings_fcb_load_priv+0x2a>
   257ce:	bf00      	nop
   257d0:	000434d4 	.word	0x000434d4
   257d4:	0004339c 	.word	0x0004339c
   257d8:	00045f25 	.word	0x00045f25
   257dc:	00045f42 	.word	0x00045f42

000257e0 <settings_fcb_load>:

static int settings_fcb_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
   257e0:	460a      	mov	r2, r1
	return settings_fcb_load_priv(
   257e2:	2301      	movs	r3, #1
   257e4:	4901      	ldr	r1, [pc, #4]	; (257ec <settings_fcb_load+0xc>)
   257e6:	f7ff bf8d 	b.w	25704 <settings_fcb_load_priv>
   257ea:	bf00      	nop
   257ec:	000256dd 	.word	0x000256dd

000257f0 <settings_fcb_save>:
	return rc;
}

static int settings_fcb_save(struct settings_store *cs, const char *name,
			     const char *value, size_t val_len)
{
   257f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   257f4:	4605      	mov	r5, r0
   257f6:	4688      	mov	r8, r1
   257f8:	4692      	mov	sl, r2
	struct settings_line_dup_check_arg cdca;

	if (val_len > 0 && value == NULL) {
   257fa:	4699      	mov	r9, r3
{
   257fc:	b0c1      	sub	sp, #260	; 0x104
	if (val_len > 0 && value == NULL) {
   257fe:	b103      	cbz	r3, 25802 <settings_fcb_save+0x12>
   25800:	b18a      	cbz	r2, 25826 <settings_fcb_save+0x36>
	/*
	 * Check if we're writing the same value again.
	 */
	cdca.name = name;
	cdca.val = (char *)value;
	cdca.is_dup = 0;
   25802:	2400      	movs	r4, #0
	cdca.val_len = val_len;
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25804:	4628      	mov	r0, r5
   25806:	4623      	mov	r3, r4
   25808:	495f      	ldr	r1, [pc, #380]	; (25988 <settings_fcb_save+0x198>)
   2580a:	aa07      	add	r2, sp, #28
	cdca.val = (char *)value;
   2580c:	e9cd 8a07 	strd	r8, sl, [sp, #28]
	cdca.val_len = val_len;
   25810:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
	settings_fcb_load_priv(cs, settings_line_dup_check_cb, &cdca, false);
   25814:	f7ff ff76 	bl	25704 <settings_fcb_load_priv>
	if (cdca.is_dup == 1) {
   25818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2581a:	2b01      	cmp	r3, #1
   2581c:	f000 80b0 	beq.w	25980 <settings_fcb_save+0x190>
	if (!name) {
   25820:	f1b8 0f00 	cmp.w	r8, #0
   25824:	d102      	bne.n	2582c <settings_fcb_save+0x3c>
		return -EINVAL;
   25826:	f06f 0415 	mvn.w	r4, #21
   2582a:	e0a9      	b.n	25980 <settings_fcb_save+0x190>
	len = settings_line_len_calc(name, val_len);
   2582c:	4649      	mov	r1, r9
   2582e:	4640      	mov	r0, r8
   25830:	f018 fabb 	bl	3ddaa <settings_line_len_calc>
   25834:	4e55      	ldr	r6, [pc, #340]	; (2598c <settings_fcb_save+0x19c>)
   25836:	4b56      	ldr	r3, [pc, #344]	; (25990 <settings_fcb_save+0x1a0>)
   25838:	9003      	str	r0, [sp, #12]
   2583a:	1af6      	subs	r6, r6, r3
   2583c:	08f6      	lsrs	r6, r6, #3
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   2583e:	01b6      	lsls	r6, r6, #6
   25840:	f046 0601 	orr.w	r6, r6, #1
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   25844:	7b6b      	ldrb	r3, [r5, #13]
   25846:	429c      	cmp	r4, r3
   25848:	daed      	bge.n	25826 <settings_fcb_save+0x36>
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   2584a:	f105 0708 	add.w	r7, r5, #8
   2584e:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   25852:	465a      	mov	r2, fp
   25854:	4638      	mov	r0, r7
   25856:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   2585a:	f7ff f8b3 	bl	249c4 <fcb_append>
		if (rc != -ENOSPC) {
   2585e:	f110 0f1c 	cmn.w	r0, #28
		rc = fcb_append(&cf->cf_fcb, len, &loc.loc);
   25862:	4603      	mov	r3, r0
		if (rc != -ENOSPC) {
   25864:	d176      	bne.n	25954 <settings_fcb_save+0x164>
		if (i < (cf->cf_fcb.f_sector_cnt - 1)) {
   25866:	7b6b      	ldrb	r3, [r5, #13]
   25868:	3b01      	subs	r3, #1
   2586a:	42a3      	cmp	r3, r4
   2586c:	dd1b      	ble.n	258a6 <settings_fcb_save+0xb6>
	rc = fcb_append_to_scratch(&cf->cf_fcb);
   2586e:	4638      	mov	r0, r7
   25870:	f017 fd80 	bl	3d374 <fcb_append_to_scratch>
	if (rc) {
   25874:	4683      	mov	fp, r0
   25876:	b9b0      	cbnz	r0, 258a6 <settings_fcb_save+0xb6>
	rbs = flash_area_align(cf->cf_fcb.fap);
   25878:	6c28      	ldr	r0, [r5, #64]	; 0x40
   2587a:	f018 f9ef 	bl	3dc5c <flash_area_align>
	loc1.fap = cf->cf_fcb.fap;
   2587e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
	loc1.loc.fe_elem_off = 0U;
   25880:	e9cd bb10 	strd	fp, fp, [sp, #64]	; 0x40
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25884:	f8df b110 	ldr.w	fp, [pc, #272]	; 25998 <settings_fcb_save+0x1a8>
	loc1.fap = cf->cf_fcb.fap;
   25888:	9314      	str	r3, [sp, #80]	; 0x50
	while (fcb_getnext(&cf->cf_fcb, &loc1.loc) == 0) {
   2588a:	4638      	mov	r0, r7
   2588c:	a910      	add	r1, sp, #64	; 0x40
   2588e:	f018 f807 	bl	3d8a0 <fcb_getnext>
   25892:	b150      	cbz	r0, 258aa <settings_fcb_save+0xba>
	rc = fcb_rotate(&cf->cf_fcb);
   25894:	4638      	mov	r0, r7
   25896:	f018 f81e 	bl	3d8d6 <fcb_rotate>
	if (rc != 0) {
   2589a:	4602      	mov	r2, r0
   2589c:	b118      	cbz	r0, 258a6 <settings_fcb_save+0xb6>
		LOG_ERR("Failed to fcb rotate (%d)", rc);
   2589e:	4630      	mov	r0, r6
   258a0:	493c      	ldr	r1, [pc, #240]	; (25994 <settings_fcb_save+0x1a4>)
   258a2:	f017 fd2d 	bl	3d300 <log_string_sync>
	for (i = 0; i < cf->cf_fcb.f_sector_cnt; i++) {
   258a6:	3401      	adds	r4, #1
   258a8:	e7cc      	b.n	25844 <settings_fcb_save+0x54>
		if (loc1.loc.fe_sector != cf->cf_fcb.f_oldest) {
   258aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   258ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
   258ae:	429a      	cmp	r2, r3
   258b0:	d1f0      	bne.n	25894 <settings_fcb_save+0xa4>
		rc = settings_line_name_read(name1, sizeof(name1), &val1_off,
   258b2:	2149      	movs	r1, #73	; 0x49
   258b4:	ab10      	add	r3, sp, #64	; 0x40
   258b6:	aa05      	add	r2, sp, #20
   258b8:	a81a      	add	r0, sp, #104	; 0x68
   258ba:	f018 fa95 	bl	3dde8 <settings_line_name_read>
		if (rc) {
   258be:	2800      	cmp	r0, #0
   258c0:	d1e3      	bne.n	2588a <settings_fcb_save+0x9a>
		if (val1_off + 1 == loc1.loc.fe_data_len) {
   258c2:	9b05      	ldr	r3, [sp, #20]
   258c4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
   258c8:	3301      	adds	r3, #1
   258ca:	4293      	cmp	r3, r2
   258cc:	d0dd      	beq.n	2588a <settings_fcb_save+0x9a>
		loc2 = loc1;
   258ce:	f10d 0c54 	add.w	ip, sp, #84	; 0x54
   258d2:	f10d 0e40 	add.w	lr, sp, #64	; 0x40
   258d6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   258da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   258de:	f8de 3000 	ldr.w	r3, [lr]
   258e2:	f8cc 3000 	str.w	r3, [ip]
		while (fcb_getnext(&cf->cf_fcb, &loc2.loc) == 0) {
   258e6:	4638      	mov	r0, r7
   258e8:	a915      	add	r1, sp, #84	; 0x54
   258ea:	f017 ffd9 	bl	3d8a0 <fcb_getnext>
   258ee:	b1f0      	cbz	r0, 2592e <settings_fcb_save+0x13e>
		rc = fcb_append(&cf->cf_fcb, loc1.loc.fe_data_len, &loc2.loc);
   258f0:	4638      	mov	r0, r7
   258f2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
   258f6:	aa15      	add	r2, sp, #84	; 0x54
   258f8:	f7ff f864 	bl	249c4 <fcb_append>
		if (rc) {
   258fc:	2800      	cmp	r0, #0
   258fe:	d1c4      	bne.n	2588a <settings_fcb_save+0x9a>
		rc = settings_line_entry_copy(&loc2, 0, &loc1, 0,
   25900:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
   25904:	4601      	mov	r1, r0
   25906:	9300      	str	r3, [sp, #0]
   25908:	aa10      	add	r2, sp, #64	; 0x40
   2590a:	4603      	mov	r3, r0
   2590c:	a815      	add	r0, sp, #84	; 0x54
   2590e:	f7ff fea7 	bl	25660 <settings_line_entry_copy>
		if (rc) {
   25912:	2800      	cmp	r0, #0
   25914:	d1b9      	bne.n	2588a <settings_fcb_save+0x9a>
		rc = fcb_append_finish(&cf->cf_fcb, &loc2.loc);
   25916:	4638      	mov	r0, r7
   25918:	a915      	add	r1, sp, #84	; 0x54
   2591a:	f017 fd47 	bl	3d3ac <fcb_append_finish>
		if (rc != 0) {
   2591e:	4602      	mov	r2, r0
   25920:	2800      	cmp	r0, #0
   25922:	d0b2      	beq.n	2588a <settings_fcb_save+0x9a>
			LOG_ERR("Failed to finish fcb_append (%d)", rc);
   25924:	4659      	mov	r1, fp
   25926:	4630      	mov	r0, r6
   25928:	f017 fcea 	bl	3d300 <log_string_sync>
   2592c:	e7ad      	b.n	2588a <settings_fcb_save+0x9a>
			rc = settings_line_name_read(name2, sizeof(name2),
   2592e:	2149      	movs	r1, #73	; 0x49
   25930:	ab15      	add	r3, sp, #84	; 0x54
   25932:	aa06      	add	r2, sp, #24
   25934:	a82d      	add	r0, sp, #180	; 0xb4
   25936:	f018 fa57 	bl	3dde8 <settings_line_name_read>
			if (rc) {
   2593a:	2800      	cmp	r0, #0
   2593c:	d1d3      	bne.n	258e6 <settings_fcb_save+0xf6>
			if ((val1_off == val2_off) &&
   2593e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   25942:	429a      	cmp	r2, r3
   25944:	d1cf      	bne.n	258e6 <settings_fcb_save+0xf6>
			    !memcmp(name1, name2, val1_off)) {
   25946:	a92d      	add	r1, sp, #180	; 0xb4
   25948:	a81a      	add	r0, sp, #104	; 0x68
   2594a:	f01c f99a 	bl	41c82 <memcmp>
			if ((val1_off == val2_off) &&
   2594e:	2800      	cmp	r0, #0
   25950:	d1c9      	bne.n	258e6 <settings_fcb_save+0xf6>
   25952:	e79a      	b.n	2588a <settings_fcb_save+0x9a>
	if (rc) {
   25954:	2800      	cmp	r0, #0
   25956:	f47f af66 	bne.w	25826 <settings_fcb_save+0x36>
	loc.fap = cf->cf_fcb.fap;
   2595a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2595c:	4651      	mov	r1, sl
	loc.fap = cf->cf_fcb.fap;
   2595e:	920f      	str	r2, [sp, #60]	; 0x3c
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   25960:	4640      	mov	r0, r8
   25962:	464a      	mov	r2, r9
   25964:	f8cd b000 	str.w	fp, [sp]
   25968:	f7ff fe0c 	bl	25584 <settings_line_write>
	if (rc != -EIO) {
   2596c:	1d43      	adds	r3, r0, #5
	rc = settings_line_write(name, value, val_len, 0, (void *)&loc);
   2596e:	4604      	mov	r4, r0
	if (rc != -EIO) {
   25970:	d006      	beq.n	25980 <settings_fcb_save+0x190>
		i = fcb_append_finish(&cf->cf_fcb, &loc.loc);
   25972:	4659      	mov	r1, fp
   25974:	4638      	mov	r0, r7
   25976:	f017 fd19 	bl	3d3ac <fcb_append_finish>
			rc = i;
   2597a:	2c00      	cmp	r4, #0
   2597c:	bf08      	it	eq
   2597e:	4604      	moveq	r4, r0
		return 0;
	}
	return settings_fcb_save_priv(cs, name, (char *)value, val_len);
}
   25980:	4620      	mov	r0, r4
   25982:	b041      	add	sp, #260	; 0x104
   25984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25988:	0003de09 	.word	0x0003de09
   2598c:	000434d4 	.word	0x000434d4
   25990:	0004339c 	.word	0x0004339c
   25994:	00045f77 	.word	0x00045f77
   25998:	00045f56 	.word	0x00045f56

0002599c <settings_fcb_src>:
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   2599c:	2301      	movs	r3, #1
{
   2599e:	b570      	push	{r4, r5, r6, lr}
   259a0:	4604      	mov	r4, r0
	cf->cf_fcb.f_version = SETTINGS_FCB_VERS;
   259a2:	7303      	strb	r3, [r0, #12]
	cf->cf_fcb.f_scratch_cnt = 1;
   259a4:	7383      	strb	r3, [r0, #14]
		rc = fcb_init(FLASH_AREA_ID(storage), &cf->cf_fcb);
   259a6:	f100 0608 	add.w	r6, r0, #8
   259aa:	4631      	mov	r1, r6
   259ac:	2009      	movs	r0, #9
   259ae:	f017 fe02 	bl	3d5b6 <fcb_init>
		if (rc) {
   259b2:	4605      	mov	r5, r0
   259b4:	b9b0      	cbnz	r0, 259e4 <settings_fcb_src+0x48>
		if (fcb_free_sector_cnt(&cf->cf_fcb) < 1) {
   259b6:	4630      	mov	r0, r6
   259b8:	f017 fd63 	bl	3d482 <fcb_free_sector_cnt>
   259bc:	2800      	cmp	r0, #0
   259be:	dc0a      	bgt.n	259d6 <settings_fcb_src+0x3a>
					cf->cf_fcb.f_active.fe_sector->fs_off,
   259c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			rc = flash_area_erase(cf->cf_fcb.fap,
   259c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   259c4:	e9d3 1200 	ldrd	r1, r2, [r3]
   259c8:	f018 f922 	bl	3dc10 <flash_area_erase>
			if (rc) {
   259cc:	2800      	cmp	r0, #0
   259ce:	d0ec      	beq.n	259aa <settings_fcb_src+0xe>
				return -EIO;
   259d0:	f06f 0504 	mvn.w	r5, #4
   259d4:	e004      	b.n	259e0 <settings_fcb_src+0x44>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   259d6:	4b05      	ldr	r3, [pc, #20]	; (259ec <settings_fcb_src+0x50>)
	settings_src_register(&cf->cf_store);
   259d8:	4620      	mov	r0, r4
	cf->cf_store.cs_itf = &settings_fcb_itf;
   259da:	6063      	str	r3, [r4, #4]
	settings_src_register(&cf->cf_store);
   259dc:	f7ff fc14 	bl	25208 <settings_src_register>
}
   259e0:	4628      	mov	r0, r5
   259e2:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
   259e4:	f06f 0515 	mvn.w	r5, #21
   259e8:	e7fa      	b.n	259e0 <settings_fcb_src+0x44>
   259ea:	bf00      	nop
   259ec:	00043860 	.word	0x00043860

000259f0 <settings_mount_fcb_backend>:
{
	uint8_t rbs;

	rbs = cf->cf_fcb.f_align;

	settings_line_io_init(read_handler, write_handler, get_len_cb, rbs);
   259f0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
   259f4:	4a02      	ldr	r2, [pc, #8]	; (25a00 <settings_mount_fcb_backend+0x10>)
   259f6:	4903      	ldr	r1, [pc, #12]	; (25a04 <settings_mount_fcb_backend+0x14>)
   259f8:	4803      	ldr	r0, [pc, #12]	; (25a08 <settings_mount_fcb_backend+0x18>)
   259fa:	f7ff be65 	b.w	256c8 <settings_line_io_init>
   259fe:	bf00      	nop
   25a00:	0003de87 	.word	0x0003de87
   25a04:	0003de8b 	.word	0x0003de8b
   25a08:	0003de9f 	.word	0x0003de9f

00025a0c <settings_backend_init>:
}

int settings_backend_init(void)
{
   25a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		settings_fcb_area[CONFIG_SETTINGS_FCB_NUM_AREAS + 1];
	static struct settings_fcb config_init_settings_fcb = {
		.cf_fcb.f_magic = CONFIG_SETTINGS_FCB_MAGIC,
		.cf_fcb.f_sectors = settings_fcb_area,
	};
	uint32_t cnt = sizeof(settings_fcb_area) /
   25a0e:	2009      	movs	r0, #9
		    sizeof(settings_fcb_area[0]);
	int rc;
	const struct flash_area *fap;

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   25a10:	4669      	mov	r1, sp
   25a12:	4a22      	ldr	r2, [pc, #136]	; (25a9c <settings_backend_init+0x90>)
	uint32_t cnt = sizeof(settings_fcb_area) /
   25a14:	9000      	str	r0, [sp, #0]
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &cnt,
   25a16:	f7ff fa71 	bl	24efc <flash_area_get_sectors>
				    settings_fcb_area);
	if (rc == -ENODEV) {
   25a1a:	f110 0f13 	cmn.w	r0, #19
   25a1e:	d03a      	beq.n	25a96 <settings_backend_init+0x8a>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
   25a20:	b138      	cbz	r0, 25a32 <settings_backend_init+0x26>
   25a22:	300c      	adds	r0, #12
   25a24:	d005      	beq.n	25a32 <settings_backend_init+0x26>
		k_panic();
   25a26:	4040      	eors	r0, r0
   25a28:	f380 8811 	msr	BASEPRI, r0
   25a2c:	f04f 0004 	mov.w	r0, #4
   25a30:	df02      	svc	2
	}

	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   25a32:	4d1b      	ldr	r5, [pc, #108]	; (25aa0 <settings_backend_init+0x94>)
   25a34:	9b00      	ldr	r3, [sp, #0]

	rc = settings_fcb_src(&config_init_settings_fcb);
   25a36:	4628      	mov	r0, r5
	config_init_settings_fcb.cf_fcb.f_sector_cnt = cnt;
   25a38:	736b      	strb	r3, [r5, #13]
	rc = settings_fcb_src(&config_init_settings_fcb);
   25a3a:	f7ff ffaf 	bl	2599c <settings_fcb_src>

	if (rc != 0) {
   25a3e:	b308      	cbz	r0, 25a84 <settings_backend_init+0x78>
		rc = flash_area_open(FLASH_AREA_ID(storage), &fap);
   25a40:	a901      	add	r1, sp, #4
   25a42:	2009      	movs	r0, #9
   25a44:	f7ff fa46 	bl	24ed4 <flash_area_open>

		if (rc == 0) {
   25a48:	4601      	mov	r1, r0
   25a4a:	b160      	cbz	r0, 25a66 <settings_backend_init+0x5a>
			rc = flash_area_erase(fap, 0, fap->fa_size);
			flash_area_close(fap);
		}

		if (rc != 0) {
			k_panic();
   25a4c:	4040      	eors	r0, r0
   25a4e:	f380 8811 	msr	BASEPRI, r0
   25a52:	f04f 0004 	mov.w	r0, #4
   25a56:	df02      	svc	2
			rc = settings_fcb_src(&config_init_settings_fcb);
		}
	}

	if (rc != 0) {
		k_panic();
   25a58:	4040      	eors	r0, r0
   25a5a:	f380 8811 	msr	BASEPRI, r0
   25a5e:	f04f 0004 	mov.w	r0, #4
   25a62:	df02      	svc	2
   25a64:	e00e      	b.n	25a84 <settings_backend_init+0x78>
			rc = flash_area_erase(fap, 0, fap->fa_size);
   25a66:	9801      	ldr	r0, [sp, #4]
   25a68:	6882      	ldr	r2, [r0, #8]
   25a6a:	f018 f8d1 	bl	3dc10 <flash_area_erase>
   25a6e:	4604      	mov	r4, r0
			flash_area_close(fap);
   25a70:	9801      	ldr	r0, [sp, #4]
   25a72:	f018 f886 	bl	3db82 <flash_area_close>
		if (rc != 0) {
   25a76:	2c00      	cmp	r4, #0
   25a78:	d1e8      	bne.n	25a4c <settings_backend_init+0x40>
			rc = settings_fcb_src(&config_init_settings_fcb);
   25a7a:	4628      	mov	r0, r5
   25a7c:	f7ff ff8e 	bl	2599c <settings_fcb_src>
	if (rc != 0) {
   25a80:	2800      	cmp	r0, #0
   25a82:	d1e9      	bne.n	25a58 <settings_backend_init+0x4c>
	cf->cf_store.cs_itf = &settings_fcb_itf;
   25a84:	4b07      	ldr	r3, [pc, #28]	; (25aa4 <settings_backend_init+0x98>)
	settings_dst_register(&cf->cf_store);
   25a86:	4806      	ldr	r0, [pc, #24]	; (25aa0 <settings_backend_init+0x94>)
	cf->cf_store.cs_itf = &settings_fcb_itf;
   25a88:	606b      	str	r3, [r5, #4]
	settings_dst_register(&cf->cf_store);
   25a8a:	f7ff fbcb 	bl	25224 <settings_dst_register>

	if (rc != 0) {
		k_panic();
	}

	settings_mount_fcb_backend(&config_init_settings_fcb);
   25a8e:	4804      	ldr	r0, [pc, #16]	; (25aa0 <settings_backend_init+0x94>)
   25a90:	f7ff ffae 	bl	259f0 <settings_mount_fcb_backend>

	return rc;
   25a94:	2000      	movs	r0, #0
}
   25a96:	b003      	add	sp, #12
   25a98:	bd30      	pop	{r4, r5, pc}
   25a9a:	bf00      	nop
   25a9c:	20018d00 	.word	0x20018d00
   25aa0:	20015500 	.word	0x20015500
   25aa4:	00043860 	.word	0x00043860

00025aa8 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
   25aa8:	b507      	push	{r0, r1, r2, lr}
   25aaa:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   25aac:	f04f 0220 	mov.w	r2, #32
   25ab0:	f3ef 8311 	mrs	r3, BASEPRI
   25ab4:	f382 8811 	msr	BASEPRI, r2
   25ab8:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   25abc:	f018 fa9a 	bl	3dff4 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   25ac0:	9801      	ldr	r0, [sp, #4]
   25ac2:	f001 f939 	bl	26d38 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   25ac6:	4803      	ldr	r0, [pc, #12]	; (25ad4 <sys_reboot+0x2c>)
   25ac8:	f017 f955 	bl	3cd76 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   25acc:	f000 fdc2 	bl	26654 <arch_cpu_idle>
   25ad0:	e7fc      	b.n	25acc <sys_reboot+0x24>
   25ad2:	bf00      	nop
   25ad4:	00045f97 	.word	0x00045f97

00025ad8 <console_out>:

static int console_out(int c)
{
#ifdef CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS

	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   25ad8:	4b0a      	ldr	r3, [pc, #40]	; (25b04 <console_out+0x2c>)
{
   25ada:	b570      	push	{r4, r5, r6, lr}
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   25adc:	b2c6      	uxtb	r6, r0
{
   25ade:	4604      	mov	r4, r0
	int handled_by_debug_server = HANDLE_DEBUG_HOOK_OUT(c);
   25ae0:	681b      	ldr	r3, [r3, #0]
   25ae2:	4630      	mov	r0, r6
   25ae4:	4798      	blx	r3

	if (handled_by_debug_server) {
   25ae6:	2801      	cmp	r0, #1
   25ae8:	d00a      	beq.n	25b00 <console_out+0x28>
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   25aea:	2c0a      	cmp	r4, #10
   25aec:	4d06      	ldr	r5, [pc, #24]	; (25b08 <console_out+0x30>)
   25aee:	d103      	bne.n	25af8 <console_out+0x20>
		uart_poll_out(uart_console_dev, '\r');
   25af0:	210d      	movs	r1, #13
   25af2:	6828      	ldr	r0, [r5, #0]
   25af4:	f018 f9eb 	bl	3dece <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
   25af8:	4631      	mov	r1, r6
   25afa:	6828      	ldr	r0, [r5, #0]
   25afc:	f018 f9e7 	bl	3dece <uart_poll_out>

	return c;
}
   25b00:	4620      	mov	r0, r4
   25b02:	bd70      	pop	{r4, r5, r6, pc}
   25b04:	20015548 	.word	0x20015548
   25b08:	20018d48 	.word	0x20018d48

00025b0c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   25b0c:	b508      	push	{r3, lr}
   25b0e:	4806      	ldr	r0, [pc, #24]	; (25b28 <uart_console_init+0x1c>)
   25b10:	f011 faa8 	bl	37064 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   25b14:	4b05      	ldr	r3, [pc, #20]	; (25b2c <uart_console_init+0x20>)
   25b16:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   25b18:	4805      	ldr	r0, [pc, #20]	; (25b30 <uart_console_init+0x24>)
   25b1a:	f001 fb8d 	bl	27238 <__stdout_hook_install>
	__printk_hook_install(console_out);
   25b1e:	4804      	ldr	r0, [pc, #16]	; (25b30 <uart_console_init+0x24>)
   25b20:	f7fd f838 	bl	22b94 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
   25b24:	2000      	movs	r0, #0
   25b26:	bd08      	pop	{r3, pc}
   25b28:	00045b4f 	.word	0x00045b4f
   25b2c:	20018d48 	.word	0x20018d48
   25b30:	00025ad9 	.word	0x00025ad9

00025b34 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   25b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   25b38:	4c0e      	ldr	r4, [pc, #56]	; (25b74 <onoff_start+0x40>)
{
   25b3a:	4607      	mov	r7, r0
	size_t offset = (size_t)(mgr - data->mgr);
   25b3c:	1b05      	subs	r5, r0, r4
   25b3e:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   25b42:	250c      	movs	r5, #12
   25b44:	435d      	muls	r5, r3
   25b46:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   25b4a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   25b4c:	4420      	add	r0, r4
   25b4e:	2140      	movs	r1, #64	; 0x40
   25b50:	f018 f9c2 	bl	3ded8 <set_starting_state>
	if (err < 0) {
   25b54:	1e01      	subs	r1, r0, #0
   25b56:	db08      	blt.n	25b6a <onoff_start+0x36>
	subdata->cb = cb;
   25b58:	4b07      	ldr	r3, [pc, #28]	; (25b78 <onoff_start+0x44>)
   25b5a:	442c      	add	r4, r5
	subdata->user_data = user_data;
   25b5c:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   25b60:	4b06      	ldr	r3, [pc, #24]	; (25b7c <onoff_start+0x48>)
   25b62:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   25b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   25b68:	4718      	bx	r3
		notify(mgr, err);
   25b6a:	4638      	mov	r0, r7
   25b6c:	4633      	mov	r3, r6
}
   25b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   25b72:	4718      	bx	r3
   25b74:	20018d5c 	.word	0x20018d5c
   25b78:	0003df3b 	.word	0x0003df3b
   25b7c:	00043884 	.word	0x00043884

00025b80 <get_status>:
{
   25b80:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25b82:	b2cc      	uxtb	r4, r1
   25b84:	2c01      	cmp	r4, #1
{
   25b86:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25b88:	d909      	bls.n	25b9e <get_status+0x1e>
   25b8a:	4909      	ldr	r1, [pc, #36]	; (25bb0 <get_status+0x30>)
   25b8c:	4809      	ldr	r0, [pc, #36]	; (25bb4 <get_status+0x34>)
   25b8e:	237e      	movs	r3, #126	; 0x7e
   25b90:	4a09      	ldr	r2, [pc, #36]	; (25bb8 <get_status+0x38>)
   25b92:	f017 f8f0 	bl	3cd76 <printk>
   25b96:	217e      	movs	r1, #126	; 0x7e
   25b98:	4807      	ldr	r0, [pc, #28]	; (25bb8 <get_status+0x38>)
   25b9a:	f017 fba0 	bl	3d2de <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   25b9e:	210c      	movs	r1, #12
   25ba0:	68eb      	ldr	r3, [r5, #12]
   25ba2:	fb04 3401 	mla	r4, r4, r1, r3
   25ba6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   25ba8:	f000 0007 	and.w	r0, r0, #7
   25bac:	bd38      	pop	{r3, r4, r5, pc}
   25bae:	bf00      	nop
   25bb0:	00045ffd 	.word	0x00045ffd
   25bb4:	00044dbf 	.word	0x00044dbf
   25bb8:	00045fc0 	.word	0x00045fc0

00025bbc <stop>:
{
   25bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25bbe:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25bc0:	2c01      	cmp	r4, #1
{
   25bc2:	4605      	mov	r5, r0
   25bc4:	4616      	mov	r6, r2
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   25bc6:	68c7      	ldr	r7, [r0, #12]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   25bc8:	d90b      	bls.n	25be2 <stop+0x26>
   25bca:	4919      	ldr	r1, [pc, #100]	; (25c30 <stop+0x74>)
   25bcc:	4819      	ldr	r0, [pc, #100]	; (25c34 <stop+0x78>)
   25bce:	f240 1353 	movw	r3, #339	; 0x153
   25bd2:	4a19      	ldr	r2, [pc, #100]	; (25c38 <stop+0x7c>)
   25bd4:	f017 f8cf 	bl	3cd76 <printk>
   25bd8:	f240 1153 	movw	r1, #339	; 0x153
   25bdc:	4816      	ldr	r0, [pc, #88]	; (25c38 <stop+0x7c>)
   25bde:	f017 fb7e 	bl	3d2de <assert_post_action>
   25be2:	f04f 0320 	mov.w	r3, #32
   25be6:	f3ef 8211 	mrs	r2, BASEPRI
   25bea:	f383 8811 	msr	BASEPRI, r3
   25bee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25bf2:	230c      	movs	r3, #12
   25bf4:	fb03 7104 	mla	r1, r3, r4, r7
   25bf8:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   25bfa:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   25bfe:	d001      	beq.n	25c04 <stop+0x48>
   25c00:	428e      	cmp	r6, r1
   25c02:	d111      	bne.n	25c28 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   25c04:	2101      	movs	r1, #1
	int err = 0;
   25c06:	2000      	movs	r0, #0
		*flags = CLOCK_CONTROL_STATUS_OFF;
   25c08:	fb03 7304 	mla	r3, r3, r4, r7
   25c0c:	6499      	str	r1, [r3, #72]	; 0x48
	__asm__ volatile(
   25c0e:	f382 8811 	msr	BASEPRI, r2
   25c12:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   25c16:	b930      	cbnz	r0, 25c26 <stop+0x6a>
	get_sub_config(dev, type)->stop();
   25c18:	230c      	movs	r3, #12
   25c1a:	6869      	ldr	r1, [r5, #4]
   25c1c:	fb03 1404 	mla	r4, r3, r4, r1
   25c20:	6863      	ldr	r3, [r4, #4]
   25c22:	4798      	blx	r3
	return 0;
   25c24:	2000      	movs	r0, #0
}
   25c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   25c28:	f04f 30ff 	mov.w	r0, #4294967295
   25c2c:	e7ef      	b.n	25c0e <stop+0x52>
   25c2e:	bf00      	nop
   25c30:	00045ffd 	.word	0x00045ffd
   25c34:	00044dbf 	.word	0x00044dbf
   25c38:	00045fc0 	.word	0x00045fc0

00025c3c <onoff_stop>:
{
   25c3c:	b570      	push	{r4, r5, r6, lr}
   25c3e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   25c40:	4906      	ldr	r1, [pc, #24]	; (25c5c <onoff_stop+0x20>)
{
   25c42:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
   25c44:	1a41      	subs	r1, r0, r1
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   25c46:	1149      	asrs	r1, r1, #5
   25c48:	2240      	movs	r2, #64	; 0x40
   25c4a:	4805      	ldr	r0, [pc, #20]	; (25c60 <onoff_stop+0x24>)
   25c4c:	f7ff ffb6 	bl	25bbc <stop>
	notify(mgr, res);
   25c50:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   25c52:	4601      	mov	r1, r0
	notify(mgr, res);
   25c54:	4620      	mov	r0, r4
}
   25c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   25c5a:	4718      	bx	r3
   25c5c:	20018d5c 	.word	0x20018d5c
   25c60:	2001591c 	.word	0x2001591c

00025c64 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
   25c64:	b570      	push	{r4, r5, r6, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   25c66:	2200      	movs	r2, #0
   25c68:	2101      	movs	r1, #1
{
   25c6a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   25c6c:	2005      	movs	r0, #5
   25c6e:	f000 fc67 	bl	26540 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   25c72:	2005      	movs	r0, #5
   25c74:	f000 fc46 	bl	26504 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   25c78:	480f      	ldr	r0, [pc, #60]	; (25cb8 <clk_init+0x54>)
   25c7a:	f010 fd7f 	bl	3677c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   25c7e:	4b0f      	ldr	r3, [pc, #60]	; (25cbc <clk_init+0x58>)
   25c80:	4298      	cmp	r0, r3
   25c82:	d115      	bne.n	25cb0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   25c84:	f010 fd9e 	bl	367c4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   25c88:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   25c8a:	490d      	ldr	r1, [pc, #52]	; (25cc0 <clk_init+0x5c>)
   25c8c:	4630      	mov	r0, r6
   25c8e:	f017 f8cd 	bl	3ce2c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   25c92:	2800      	cmp	r0, #0
   25c94:	db0b      	blt.n	25cae <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   25c96:	2501      	movs	r5, #1
   25c98:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   25c9a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   25c9c:	4908      	ldr	r1, [pc, #32]	; (25cc0 <clk_init+0x5c>)
   25c9e:	f104 0020 	add.w	r0, r4, #32
   25ca2:	f017 f8c3 	bl	3ce2c <onoff_manager_init>
		if (err < 0) {
   25ca6:	2800      	cmp	r0, #0
   25ca8:	db01      	blt.n	25cae <clk_init+0x4a>
	}

	return 0;
   25caa:	2000      	movs	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   25cac:	6565      	str	r5, [r4, #84]	; 0x54
}
   25cae:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   25cb0:	f06f 0004 	mvn.w	r0, #4
   25cb4:	e7fb      	b.n	25cae <clk_init+0x4a>
   25cb6:	bf00      	nop
   25cb8:	00025d01 	.word	0x00025d01
   25cbc:	0bad0000 	.word	0x0bad0000
   25cc0:	0004389c 	.word	0x0004389c

00025cc4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   25cc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   25cc6:	230c      	movs	r3, #12
static void clkstarted_handle(const struct device *dev,
   25cc8:	4601      	mov	r1, r0
	sub_data->cb = NULL;
   25cca:	2600      	movs	r6, #0
	clock_control_cb_t callback = sub_data->cb;
   25ccc:	434b      	muls	r3, r1
   25cce:	480a      	ldr	r0, [pc, #40]	; (25cf8 <clkstarted_handle.constprop.0+0x34>)
   25cd0:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
   25cd2:	3348      	adds	r3, #72	; 0x48
	void *user_data = sub_data->user_data;
   25cd4:	e9d4 5210 	ldrd	r5, r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   25cd8:	4418      	add	r0, r3
	sub_data->cb = NULL;
   25cda:	6426      	str	r6, [r4, #64]	; 0x40
	void *user_data = sub_data->user_data;
   25cdc:	9201      	str	r2, [sp, #4]
	set_on_state(&sub_data->flags);
   25cde:	f018 f919 	bl	3df14 <set_on_state>
	if (callback) {
   25ce2:	b135      	cbz	r5, 25cf2 <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
   25ce4:	462b      	mov	r3, r5
   25ce6:	9a01      	ldr	r2, [sp, #4]
   25ce8:	4804      	ldr	r0, [pc, #16]	; (25cfc <clkstarted_handle.constprop.0+0x38>)
}
   25cea:	b002      	add	sp, #8
   25cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   25cf0:	4718      	bx	r3
}
   25cf2:	b002      	add	sp, #8
   25cf4:	bd70      	pop	{r4, r5, r6, pc}
   25cf6:	bf00      	nop
   25cf8:	20018d5c 	.word	0x20018d5c
   25cfc:	2001591c 	.word	0x2001591c

00025d00 <clock_event_handler>:
	switch (event) {
   25d00:	2801      	cmp	r0, #1
{
   25d02:	b508      	push	{r3, lr}
	switch (event) {
   25d04:	d006      	beq.n	25d14 <clock_event_handler+0x14>
   25d06:	2803      	cmp	r0, #3
   25d08:	d008      	beq.n	25d1c <clock_event_handler+0x1c>
   25d0a:	b9a8      	cbnz	r0, 25d38 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   25d0c:	4b10      	ldr	r3, [pc, #64]	; (25d50 <clock_event_handler+0x50>)
   25d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25d10:	075b      	lsls	r3, r3, #29
   25d12:	d11b      	bne.n	25d4c <clock_event_handler+0x4c>
}
   25d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   25d18:	f7ff bfd4 	b.w	25cc4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   25d1c:	490d      	ldr	r1, [pc, #52]	; (25d54 <clock_event_handler+0x54>)
   25d1e:	f240 2366 	movw	r3, #614	; 0x266
   25d22:	4a0d      	ldr	r2, [pc, #52]	; (25d58 <clock_event_handler+0x58>)
   25d24:	480d      	ldr	r0, [pc, #52]	; (25d5c <clock_event_handler+0x5c>)
   25d26:	f017 f826 	bl	3cd76 <printk>
   25d2a:	f240 2166 	movw	r1, #614	; 0x266
}
   25d2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   25d32:	4809      	ldr	r0, [pc, #36]	; (25d58 <clock_event_handler+0x58>)
   25d34:	f017 bad3 	b.w	3d2de <assert_post_action>
   25d38:	4906      	ldr	r1, [pc, #24]	; (25d54 <clock_event_handler+0x54>)
   25d3a:	f240 236a 	movw	r3, #618	; 0x26a
   25d3e:	4a06      	ldr	r2, [pc, #24]	; (25d58 <clock_event_handler+0x58>)
   25d40:	4806      	ldr	r0, [pc, #24]	; (25d5c <clock_event_handler+0x5c>)
   25d42:	f017 f818 	bl	3cd76 <printk>
   25d46:	f240 216a 	movw	r1, #618	; 0x26a
   25d4a:	e7f0      	b.n	25d2e <clock_event_handler+0x2e>
}
   25d4c:	bd08      	pop	{r3, pc}
   25d4e:	bf00      	nop
   25d50:	20018d5c 	.word	0x20018d5c
   25d54:	0004bcc7 	.word	0x0004bcc7
   25d58:	00045fc0 	.word	0x00045fc0
   25d5c:	00044dbf 	.word	0x00044dbf

00025d60 <generic_hfclk_start>:
{
   25d60:	b508      	push	{r3, lr}
	__asm__ volatile(
   25d62:	f04f 0320 	mov.w	r3, #32
   25d66:	f3ef 8111 	mrs	r1, BASEPRI
   25d6a:	f383 8811 	msr	BASEPRI, r3
   25d6e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   25d72:	4a11      	ldr	r2, [pc, #68]	; (25db8 <generic_hfclk_start+0x58>)
   25d74:	6813      	ldr	r3, [r2, #0]
   25d76:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   25d7a:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   25d7e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   25d80:	d00b      	beq.n	25d9a <generic_hfclk_start+0x3a>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   25d82:	4a0e      	ldr	r2, [pc, #56]	; (25dbc <generic_hfclk_start+0x5c>)
   25d84:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   25d88:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   25d8c:	f013 0301 	ands.w	r3, r3, #1
   25d90:	d003      	beq.n	25d9a <generic_hfclk_start+0x3a>
			set_on_state(get_hf_flags());
   25d92:	480b      	ldr	r0, [pc, #44]	; (25dc0 <generic_hfclk_start+0x60>)
   25d94:	f018 f8be 	bl	3df14 <set_on_state>
			already_started = true;
   25d98:	2301      	movs	r3, #1
	__asm__ volatile(
   25d9a:	f381 8811 	msr	BASEPRI, r1
   25d9e:	f3bf 8f6f 	isb	sy
	if (already_started) {
   25da2:	b123      	cbz	r3, 25dae <generic_hfclk_start+0x4e>
}
   25da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   25da8:	2000      	movs	r0, #0
   25daa:	f7ff bf8b 	b.w	25cc4 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   25dae:	2001      	movs	r0, #1
}
   25db0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   25db4:	f010 bd26 	b.w	36804 <nrfx_clock_start>
   25db8:	20018db4 	.word	0x20018db4
   25dbc:	40005000 	.word	0x40005000
   25dc0:	20018da4 	.word	0x20018da4

00025dc4 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25dc4:	4b07      	ldr	r3, [pc, #28]	; (25de4 <generic_hfclk_stop+0x20>)
   25dc6:	e8d3 2fef 	ldaex	r2, [r3]
   25dca:	f022 0102 	bic.w	r1, r2, #2
   25dce:	e8c3 1fe0 	stlex	r0, r1, [r3]
   25dd2:	2800      	cmp	r0, #0
   25dd4:	d1f7      	bne.n	25dc6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   25dd6:	07d3      	lsls	r3, r2, #31
   25dd8:	d402      	bmi.n	25de0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   25dda:	2001      	movs	r0, #1
   25ddc:	f010 bd68 	b.w	368b0 <nrfx_clock_stop>
}
   25de0:	4770      	bx	lr
   25de2:	bf00      	nop
   25de4:	20018db4 	.word	0x20018db4

00025de8 <api_blocking_start>:
{
   25de8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   25dea:	2200      	movs	r2, #0
   25dec:	2301      	movs	r3, #1
   25dee:	e9cd 2302 	strd	r2, r3, [sp, #8]
   25df2:	ab04      	add	r3, sp, #16
   25df4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   25df8:	4a09      	ldr	r2, [pc, #36]	; (25e20 <api_blocking_start+0x38>)
   25dfa:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   25dfc:	f8cd d000 	str.w	sp, [sp]
   25e00:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   25e04:	f018 f8ab 	bl	3df5e <api_start>
	if (err < 0) {
   25e08:	2800      	cmp	r0, #0
   25e0a:	db05      	blt.n	25e18 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   25e0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   25e10:	2300      	movs	r3, #0
   25e12:	4668      	mov	r0, sp
   25e14:	f013 fa92 	bl	3933c <z_impl_k_sem_take>
}
   25e18:	b007      	add	sp, #28
   25e1a:	f85d fb04 	ldr.w	pc, [sp], #4
   25e1e:	bf00      	nop
   25e20:	0003df59 	.word	0x0003df59

00025e24 <z_nrf_clock_control_lf_on>:
{
   25e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25e28:	2201      	movs	r2, #1
   25e2a:	4606      	mov	r6, r0
   25e2c:	4945      	ldr	r1, [pc, #276]	; (25f44 <z_nrf_clock_control_lf_on+0x120>)
   25e2e:	e8d1 3fef 	ldaex	r3, [r1]
   25e32:	e8c1 2fe0 	stlex	r0, r2, [r1]
   25e36:	2800      	cmp	r0, #0
   25e38:	d1f9      	bne.n	25e2e <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
   25e3a:	b9a3      	cbnz	r3, 25e66 <z_nrf_clock_control_lf_on+0x42>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   25e3c:	4942      	ldr	r1, [pc, #264]	; (25f48 <z_nrf_clock_control_lf_on+0x124>)
		err = onoff_request(mgr, &cli);
   25e3e:	4843      	ldr	r0, [pc, #268]	; (25f4c <z_nrf_clock_control_lf_on+0x128>)
   25e40:	604b      	str	r3, [r1, #4]
   25e42:	60cb      	str	r3, [r1, #12]
   25e44:	608a      	str	r2, [r1, #8]
   25e46:	f7fd f905 	bl	23054 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   25e4a:	2800      	cmp	r0, #0
   25e4c:	da0b      	bge.n	25e66 <z_nrf_clock_control_lf_on+0x42>
   25e4e:	4940      	ldr	r1, [pc, #256]	; (25f50 <z_nrf_clock_control_lf_on+0x12c>)
   25e50:	4840      	ldr	r0, [pc, #256]	; (25f54 <z_nrf_clock_control_lf_on+0x130>)
   25e52:	f240 2326 	movw	r3, #550	; 0x226
   25e56:	4a40      	ldr	r2, [pc, #256]	; (25f58 <z_nrf_clock_control_lf_on+0x134>)
   25e58:	f016 ff8d 	bl	3cd76 <printk>
   25e5c:	f240 2126 	movw	r1, #550	; 0x226
   25e60:	483d      	ldr	r0, [pc, #244]	; (25f58 <z_nrf_clock_control_lf_on+0x134>)
   25e62:	f017 fa3c 	bl	3d2de <assert_post_action>
	switch (start_mode) {
   25e66:	b38e      	cbz	r6, 25ecc <z_nrf_clock_control_lf_on+0xa8>
   25e68:	1e73      	subs	r3, r6, #1
   25e6a:	2b01      	cmp	r3, #1
   25e6c:	d855      	bhi.n	25f1a <z_nrf_clock_control_lf_on+0xf6>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   25e6e:	2e01      	cmp	r6, #1
   25e70:	d106      	bne.n	25e80 <z_nrf_clock_control_lf_on+0x5c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   25e72:	4b3a      	ldr	r3, [pc, #232]	; (25f5c <z_nrf_clock_control_lf_on+0x138>)
   25e74:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   25e78:	f003 0303 	and.w	r3, r3, #3
   25e7c:	2b02      	cmp	r3, #2
   25e7e:	d025      	beq.n	25ecc <z_nrf_clock_control_lf_on+0xa8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   25e80:	f01b fdbe 	bl	41a00 <k_is_in_isr>
   25e84:	4604      	mov	r4, r0
   25e86:	b918      	cbnz	r0, 25e90 <z_nrf_clock_control_lf_on+0x6c>
	return !z_sys_post_kernel;
   25e88:	4b35      	ldr	r3, [pc, #212]	; (25f60 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
   25e8a:	781b      	ldrb	r3, [r3, #0]
   25e8c:	2b00      	cmp	r3, #0
   25e8e:	d152      	bne.n	25f36 <z_nrf_clock_control_lf_on+0x112>
	__asm__ volatile(
   25e90:	f04f 0320 	mov.w	r3, #32
   25e94:	f3ef 8711 	mrs	r7, BASEPRI
   25e98:	f383 8811 	msr	BASEPRI, r3
   25e9c:	f3bf 8f6f 	isb	sy
   25ea0:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25ea2:	4d2e      	ldr	r5, [pc, #184]	; (25f5c <z_nrf_clock_control_lf_on+0x138>)
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   25ea4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 25f70 <z_nrf_clock_control_lf_on+0x14c>
   25ea8:	46a9      	mov	r9, r5
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   25eaa:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   25eae:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   25eb2:	03d2      	lsls	r2, r2, #15
   25eb4:	d50c      	bpl.n	25ed0 <z_nrf_clock_control_lf_on+0xac>
	while (!(nrfx_clock_is_running(d, (void *)&type)
   25eb6:	f003 0303 	and.w	r3, r3, #3
   25eba:	2b02      	cmp	r3, #2
   25ebc:	d001      	beq.n	25ec2 <z_nrf_clock_control_lf_on+0x9e>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   25ebe:	2e01      	cmp	r6, #1
   25ec0:	d106      	bne.n	25ed0 <z_nrf_clock_control_lf_on+0xac>
	if (isr_mode) {
   25ec2:	b334      	cbz	r4, 25f12 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
   25ec4:	f387 8811 	msr	BASEPRI, r7
   25ec8:	f3bf 8f6f 	isb	sy
}
   25ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
   25ed0:	b1d4      	cbz	r4, 25f08 <z_nrf_clock_control_lf_on+0xe4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   25ed2:	4638      	mov	r0, r7
   25ed4:	f000 fbcc 	bl	26670 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   25ed8:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   25edc:	b2db      	uxtb	r3, r3
   25ede:	2b01      	cmp	r3, #1
   25ee0:	d1e3      	bne.n	25eaa <z_nrf_clock_control_lf_on+0x86>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   25ee2:	f8d8 2000 	ldr.w	r2, [r8]
		    && nrf_clock_event_check(NRF_CLOCK,
   25ee6:	2a00      	cmp	r2, #0
   25ee8:	d0df      	beq.n	25eaa <z_nrf_clock_control_lf_on+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25eea:	2200      	movs	r2, #0
   25eec:	f8c8 2000 	str.w	r2, [r8]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   25ef0:	f8d8 2000 	ldr.w	r2, [r8]
    p_reg->LFCLKSRC = (uint32_t)(source);
   25ef4:	2202      	movs	r2, #2
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25ef6:	2120      	movs	r1, #32
   25ef8:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
   25efc:	4a19      	ldr	r2, [pc, #100]	; (25f64 <z_nrf_clock_control_lf_on+0x140>)
   25efe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f02:	4a19      	ldr	r2, [pc, #100]	; (25f68 <z_nrf_clock_control_lf_on+0x144>)
   25f04:	6013      	str	r3, [r2, #0]
}
   25f06:	e7d0      	b.n	25eaa <z_nrf_clock_control_lf_on+0x86>
	return z_impl_k_sleep(timeout);
   25f08:	2100      	movs	r1, #0
   25f0a:	2021      	movs	r0, #33	; 0x21
   25f0c:	f013 f994 	bl	39238 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   25f10:	e7e2      	b.n	25ed8 <z_nrf_clock_control_lf_on+0xb4>
    p_reg->INTENSET = mask;
   25f12:	2302      	movs	r3, #2
   25f14:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   25f18:	e7d8      	b.n	25ecc <z_nrf_clock_control_lf_on+0xa8>
		__ASSERT_NO_MSG(false);
   25f1a:	f44f 730e 	mov.w	r3, #568	; 0x238
   25f1e:	4913      	ldr	r1, [pc, #76]	; (25f6c <z_nrf_clock_control_lf_on+0x148>)
   25f20:	480c      	ldr	r0, [pc, #48]	; (25f54 <z_nrf_clock_control_lf_on+0x130>)
   25f22:	4a0d      	ldr	r2, [pc, #52]	; (25f58 <z_nrf_clock_control_lf_on+0x134>)
   25f24:	f016 ff27 	bl	3cd76 <printk>
}
   25f28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   25f2c:	f44f 710e 	mov.w	r1, #568	; 0x238
   25f30:	4809      	ldr	r0, [pc, #36]	; (25f58 <z_nrf_clock_control_lf_on+0x134>)
   25f32:	f017 b9d4 	b.w	3d2de <assert_post_action>
    p_reg->INTENCLR = mask;
   25f36:	2202      	movs	r2, #2
   25f38:	4b08      	ldr	r3, [pc, #32]	; (25f5c <z_nrf_clock_control_lf_on+0x138>)
	int key = isr_mode ? irq_lock() : 0;
   25f3a:	4607      	mov	r7, r0
   25f3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   25f40:	e7af      	b.n	25ea2 <z_nrf_clock_control_lf_on+0x7e>
   25f42:	bf00      	nop
   25f44:	20018db8 	.word	0x20018db8
   25f48:	20018d4c 	.word	0x20018d4c
   25f4c:	20018d7c 	.word	0x20018d7c
   25f50:	00046021 	.word	0x00046021
   25f54:	00044dbf 	.word	0x00044dbf
   25f58:	00045fc0 	.word	0x00045fc0
   25f5c:	40005000 	.word	0x40005000
   25f60:	20020e54 	.word	0x20020e54
   25f64:	e000e100 	.word	0xe000e100
   25f68:	40005008 	.word	0x40005008
   25f6c:	0004bcc7 	.word	0x0004bcc7
   25f70:	40005104 	.word	0x40005104

00025f74 <wdt_nrf_install_timeout>:
	return -EPERM;
}

static int wdt_nrf_install_timeout(const struct device *dev,
				   const struct wdt_timeout_cfg *cfg)
{
   25f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	nrfx_err_t err_code;
	nrfx_wdt_channel_id channel_id;

	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   25f76:	7b0b      	ldrb	r3, [r1, #12]
{
   25f78:	4604      	mov	r4, r0
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   25f7a:	2b02      	cmp	r3, #2
{
   25f7c:	460d      	mov	r5, r1
	if (cfg->flags != WDT_FLAG_RESET_SOC) {
   25f7e:	d128      	bne.n	25fd2 <wdt_nrf_install_timeout+0x5e>
		return -ENOTSUP;
	}

	if (cfg->window.min != 0U) {
   25f80:	680b      	ldr	r3, [r1, #0]
   25f82:	bb1b      	cbnz	r3, 25fcc <wdt_nrf_install_timeout+0x58>
		return -EINVAL;
	}

	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   25f84:	68c2      	ldr	r2, [r0, #12]
	return dev->data;
   25f86:	684b      	ldr	r3, [r1, #4]
	if (get_dev_data(dev)->m_allocated_channels == 0U) {
   25f88:	f892 1024 	ldrb.w	r1, [r2, #36]	; 0x24
   25f8c:	b9d9      	cbnz	r1, 25fc6 <wdt_nrf_install_timeout+0x52>
		 * in all nRF chips can use reload values (determining
		 * the timeout) from range 0xF-0xFFFFFFFF given in 32768 Hz
		 * clock ticks. This makes the allowed range of 0x1-0x07CFFFFF
		 * in milliseconds. Check if the provided value is within
		 * this range. */
		if ((cfg->window.max == 0U) || (cfg->window.max > 0x07CFFFFF)) {
   25f8e:	4914      	ldr	r1, [pc, #80]	; (25fe0 <wdt_nrf_install_timeout+0x6c>)
   25f90:	1e58      	subs	r0, r3, #1
   25f92:	4288      	cmp	r0, r1
   25f94:	d81a      	bhi.n	25fcc <wdt_nrf_install_timeout+0x58>
			return -EINVAL;
		}

		/* Save timeout value from first registered watchdog channel. */
		get_dev_data(dev)->m_timeout = cfg->window.max;
   25f96:	6213      	str	r3, [r2, #32]
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
		return -EINVAL;
	}

	err_code = nrfx_wdt_channel_alloc(&get_dev_config(dev)->wdt,
   25f98:	6860      	ldr	r0, [r4, #4]
   25f9a:	f10d 0107 	add.w	r1, sp, #7
   25f9e:	f010 ffa3 	bl	36ee8 <nrfx_wdt_channel_alloc>
					  &channel_id);

	if (err_code == NRFX_ERROR_NO_MEM) {
   25fa2:	4b10      	ldr	r3, [pc, #64]	; (25fe4 <wdt_nrf_install_timeout+0x70>)
   25fa4:	4298      	cmp	r0, r3
   25fa6:	d017      	beq.n	25fd8 <wdt_nrf_install_timeout+0x64>
		return -ENOMEM;
	}

	if (cfg->callback != NULL) {
   25fa8:	68ab      	ldr	r3, [r5, #8]
   25faa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   25fae:	b113      	cbz	r3, 25fb6 <wdt_nrf_install_timeout+0x42>
   25fb0:	68e2      	ldr	r2, [r4, #12]
		get_dev_data(dev)->m_callbacks[channel_id] = cfg->callback;
   25fb2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	}

	get_dev_data(dev)->m_allocated_channels++;
   25fb6:	68e2      	ldr	r2, [r4, #12]
   25fb8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   25fbc:	3301      	adds	r3, #1
   25fbe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	return channel_id;
}
   25fc2:	b003      	add	sp, #12
   25fc4:	bd30      	pop	{r4, r5, pc}
	} else if (cfg->window.max != get_dev_data(dev)->m_timeout) {
   25fc6:	6a12      	ldr	r2, [r2, #32]
   25fc8:	429a      	cmp	r2, r3
   25fca:	d0e5      	beq.n	25f98 <wdt_nrf_install_timeout+0x24>
		return -EINVAL;
   25fcc:	f06f 0015 	mvn.w	r0, #21
   25fd0:	e7f7      	b.n	25fc2 <wdt_nrf_install_timeout+0x4e>
		return -ENOTSUP;
   25fd2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25fd6:	e7f4      	b.n	25fc2 <wdt_nrf_install_timeout+0x4e>
		return -ENOMEM;
   25fd8:	f06f 000b 	mvn.w	r0, #11
   25fdc:	e7f1      	b.n	25fc2 <wdt_nrf_install_timeout+0x4e>
   25fde:	bf00      	nop
   25fe0:	07cffffe 	.word	0x07cffffe
   25fe4:	0bad0002 	.word	0x0bad0002

00025fe8 <wdt_0_init>:
			    &wdt_##idx##z_config,			       \
			    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,  \
			    &wdt_nrfx_driver_api)

#ifdef CONFIG_NRFX_WDT0
WDT_NRFX_WDT_DEVICE(0);
   25fe8:	b510      	push	{r4, lr}
   25fea:	4604      	mov	r4, r0
   25fec:	2200      	movs	r2, #0
   25fee:	2101      	movs	r1, #1
   25ff0:	2018      	movs	r0, #24
   25ff2:	f000 faa5 	bl	26540 <z_arm_irq_priority_set>
   25ff6:	6860      	ldr	r0, [r4, #4]
   25ff8:	4a05      	ldr	r2, [pc, #20]	; (26010 <wdt_0_init+0x28>)
   25ffa:	f100 0108 	add.w	r1, r0, #8
   25ffe:	f010 fee7 	bl	36dd0 <nrfx_wdt_init>
   26002:	4b04      	ldr	r3, [pc, #16]	; (26014 <wdt_0_init+0x2c>)
   26004:	4298      	cmp	r0, r3
   26006:	bf14      	ite	ne
   26008:	f06f 000f 	mvnne.w	r0, #15
   2600c:	2000      	moveq	r0, #0
   2600e:	bd10      	pop	{r4, pc}
   26010:	00026019 	.word	0x00026019
   26014:	0bad0000 	.word	0x0bad0000

00026018 <wdt_0_event_handler>:
   26018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   2601a:	2400      	movs	r4, #0
   2601c:	4d0a      	ldr	r5, [pc, #40]	; (26048 <wdt_0_event_handler+0x30>)
}

NRF_STATIC_INLINE bool nrf_wdt_request_status(NRF_WDT_Type const *  p_reg,
                                              nrf_wdt_rr_register_t rr_register)
{
    return (bool)(((p_reg->REQSTATUS) >> rr_register) & 0x1UL);
   2601e:	4e0b      	ldr	r6, [pc, #44]	; (2604c <wdt_0_event_handler+0x34>)
				get_dev_data(dev)->m_callbacks[i](dev, i);
   26020:	4f0b      	ldr	r7, [pc, #44]	; (26050 <wdt_0_event_handler+0x38>)
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26022:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   26026:	429c      	cmp	r4, r3
   26028:	db00      	blt.n	2602c <wdt_0_event_handler+0x14>
WDT_NRFX_WDT_DEVICE(0);
   2602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2602c:	f8d6 3404 	ldr.w	r3, [r6, #1028]	; 0x404
   26030:	40e3      	lsrs	r3, r4
		if (nrf_wdt_request_status(get_dev_config(dev)->wdt.p_reg,
   26032:	07db      	lsls	r3, r3, #31
   26034:	d505      	bpl.n	26042 <wdt_0_event_handler+0x2a>
			if (get_dev_data(dev)->m_callbacks[i]) {
   26036:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   2603a:	b113      	cbz	r3, 26042 <wdt_0_event_handler+0x2a>
				get_dev_data(dev)->m_callbacks[i](dev, i);
   2603c:	4621      	mov	r1, r4
   2603e:	4638      	mov	r0, r7
   26040:	4798      	blx	r3
	for (i = 0; i < get_dev_data(dev)->m_allocated_channels; ++i) {
   26042:	3401      	adds	r4, #1
   26044:	e7ed      	b.n	26022 <wdt_0_event_handler+0xa>
   26046:	bf00      	nop
   26048:	20018dbc 	.word	0x20018dbc
   2604c:	40018000 	.word	0x40018000
   26050:	2001592c 	.word	0x2001592c

00026054 <z_clock_isr>:
#include <drivers/timer/system_timer.h>

/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
   26054:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(false);
   26056:	4c06      	ldr	r4, [pc, #24]	; (26070 <z_clock_isr+0x1c>)
   26058:	4906      	ldr	r1, [pc, #24]	; (26074 <z_clock_isr+0x20>)
   2605a:	4622      	mov	r2, r4
   2605c:	4806      	ldr	r0, [pc, #24]	; (26078 <z_clock_isr+0x24>)
   2605e:	2317      	movs	r3, #23
   26060:	f016 fe89 	bl	3cd76 <printk>
   26064:	4620      	mov	r0, r4
}
   26066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT_NO_MSG(false);
   2606a:	2117      	movs	r1, #23
   2606c:	f017 b937 	b.w	3d2de <assert_post_action>
   26070:	00046053 	.word	0x00046053
   26074:	0004bcc7 	.word	0x0004bcc7
   26078:	00044dbf 	.word	0x00044dbf

0002607c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   2607c:	4a04      	ldr	r2, [pc, #16]	; (26090 <sys_clock_timeout_handler+0x14>)
   2607e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   26080:	1ac9      	subs	r1, r1, r3
   26082:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   26086:	4403      	add	r3, r0
   26088:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2608a:	f013 bf5f 	b.w	39f4c <z_clock_announce>
   2608e:	bf00      	nop
   26090:	20018df0 	.word	0x20018df0

00026094 <set_absolute_alarm>:
{
   26094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   26098:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2609c:	f04f 0900 	mov.w	r9, #0
   260a0:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   260a2:	f100 0450 	add.w	r4, r0, #80	; 0x50
   260a6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
   260aa:	00a4      	lsls	r4, r4, #2
   260ac:	f506 36a8 	add.w	r6, r6, #86016	; 0x15000
   260b0:	b2a4      	uxth	r4, r4
   260b2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    return p_reg->CC[ch];
   260b6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   260ba:	f8df 806c 	ldr.w	r8, [pc, #108]	; 26128 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   260be:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   260c2:	f504 34a8 	add.w	r4, r4, #86016	; 0x15000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   260c6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   260c8:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   260cc:	eba3 030a 	sub.w	r3, r3, sl
   260d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   260d4:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   260d8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   260da:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   260de:	d102      	bne.n	260e6 <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
   260e0:	2013      	movs	r0, #19
   260e2:	f01b fc93 	bl	41a0c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   260e6:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
   260ea:	1aab      	subs	r3, r5, r2
   260ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   260f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   260f4:	bf88      	it	hi
   260f6:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   260f8:	f8c4 9000 	str.w	r9, [r4]
   260fc:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   260fe:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   26102:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
   26106:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   2610a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2610e:	459a      	cmp	sl, r3
   26110:	d006      	beq.n	26120 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
   26112:	1aeb      	subs	r3, r5, r3
   26114:	3b02      	subs	r3, #2
   26116:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   2611a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   2611e:	d801      	bhi.n	26124 <set_absolute_alarm+0x90>
}
   26120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
   26124:	462b      	mov	r3, r5
   26126:	e7cf      	b.n	260c8 <set_absolute_alarm+0x34>
   26128:	40015000 	.word	0x40015000

0002612c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   2612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2612e:	2400      	movs	r4, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   26130:	4627      	mov	r7, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26132:	4e0f      	ldr	r6, [pc, #60]	; (26170 <rtc_nrf_isr+0x44>)
   26134:	4b0f      	ldr	r3, [pc, #60]	; (26174 <rtc_nrf_isr+0x48>)
    return p_reg->INTENSET & mask;
   26136:	4a10      	ldr	r2, [pc, #64]	; (26178 <rtc_nrf_isr+0x4c>)
   26138:	4618      	mov	r0, r3
   2613a:	681d      	ldr	r5, [r3, #0]
   2613c:	b104      	cbz	r4, 26140 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   2613e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26140:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   26144:	03c9      	lsls	r1, r1, #15
   26146:	d5fa      	bpl.n	2613e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26148:	6831      	ldr	r1, [r6, #0]
   2614a:	2900      	cmp	r1, #0
   2614c:	d0f7      	beq.n	2613e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2614e:	6034      	str	r4, [r6, #0]
   26150:	6831      	ldr	r1, [r6, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   26152:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   26156:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
   2615a:	2401      	movs	r4, #1
    return p_reg->CC[ch];
   2615c:	f8d2 1540 	ldr.w	r1, [r2, #1344]	; 0x540
			if (handler) {
   26160:	b125      	cbz	r5, 2616c <rtc_nrf_isr+0x40>
				handler(chan, cc_val,
   26162:	2000      	movs	r0, #0
   26164:	685a      	ldr	r2, [r3, #4]
   26166:	601f      	str	r7, [r3, #0]
   26168:	47a8      	blx	r5
   2616a:	e7e3      	b.n	26134 <rtc_nrf_isr+0x8>
   2616c:	6005      	str	r5, [r0, #0]
}
   2616e:	e7e6      	b.n	2613e <rtc_nrf_isr+0x12>
   26170:	40015140 	.word	0x40015140
   26174:	20018de4 	.word	0x20018de4
   26178:	40015000 	.word	0x40015000

0002617c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
   2617c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   2617e:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
   26180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26184:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
   26188:	4d0d      	ldr	r5, [pc, #52]	; (261c0 <z_clock_driver_init+0x44>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   2618a:	2101      	movs	r1, #1
   2618c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
   26190:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   26194:	4b0b      	ldr	r3, [pc, #44]	; (261c4 <z_clock_driver_init+0x48>)
   26196:	2015      	movs	r0, #21
   26198:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   2619c:	4622      	mov	r2, r4
   2619e:	f000 f9cf 	bl	26540 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   261a2:	2015      	movs	r0, #21
   261a4:	f000 f9ae 	bl	26504 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   261a8:	2301      	movs	r3, #1
   261aa:	4a07      	ldr	r2, [pc, #28]	; (261c8 <z_clock_driver_init+0x4c>)
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   261ac:	2002      	movs	r0, #2
   261ae:	6013      	str	r3, [r2, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   261b0:	4a06      	ldr	r2, [pc, #24]	; (261cc <z_clock_driver_init+0x50>)
   261b2:	602b      	str	r3, [r5, #0]
   261b4:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   261b6:	f7ff fe35 	bl	25e24 <z_nrf_clock_control_lf_on>

	return 0;
}
   261ba:	4620      	mov	r0, r4
   261bc:	bd38      	pop	{r3, r4, r5, pc}
   261be:	bf00      	nop
   261c0:	40015000 	.word	0x40015000
   261c4:	e000e100 	.word	0xe000e100
   261c8:	40015008 	.word	0x40015008
   261cc:	20018dec 	.word	0x20018dec

000261d0 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   261d0:	4b13      	ldr	r3, [pc, #76]	; (26220 <z_clock_set_timeout+0x50>)
   261d2:	f1b0 3fff 	cmp.w	r0, #4294967295
   261d6:	bf08      	it	eq
   261d8:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   261da:	3801      	subs	r0, #1
   261dc:	2800      	cmp	r0, #0
   261de:	dd1c      	ble.n	2621a <z_clock_set_timeout+0x4a>
   261e0:	4298      	cmp	r0, r3
   261e2:	bfa8      	it	ge
   261e4:	4618      	movge	r0, r3
     return p_reg->COUNTER;
   261e6:	4b0f      	ldr	r3, [pc, #60]	; (26224 <z_clock_set_timeout+0x54>)
   261e8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   261ec:	4b0e      	ldr	r3, [pc, #56]	; (26228 <z_clock_set_timeout+0x58>)
   261ee:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   261f0:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   261f2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   261f6:	bf18      	it	ne
   261f8:	2000      	movne	r0, #0
	return (a - b) & COUNTER_MAX;
   261fa:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   261fe:	3301      	adds	r3, #1
	cc_data[chan].callback = handler;
   26200:	4a0a      	ldr	r2, [pc, #40]	; (2622c <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   26202:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
   26204:	480a      	ldr	r0, [pc, #40]	; (26230 <z_clock_set_timeout+0x60>)
   26206:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   26208:	2000      	movs	r0, #0
   2620a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   2620c:	4a04      	ldr	r2, [pc, #16]	; (26220 <z_clock_set_timeout+0x50>)
   2620e:	4293      	cmp	r3, r2
   26210:	bf94      	ite	ls
   26212:	18c9      	addls	r1, r1, r3
   26214:	1889      	addhi	r1, r1, r2
   26216:	f7ff bf3d 	b.w	26094 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   2621a:	2000      	movs	r0, #0
   2621c:	e7e3      	b.n	261e6 <z_clock_set_timeout+0x16>
   2621e:	bf00      	nop
   26220:	007fffff 	.word	0x007fffff
   26224:	40015000 	.word	0x40015000
   26228:	20018df0 	.word	0x20018df0
   2622c:	20018de4 	.word	0x20018de4
   26230:	0002607d 	.word	0x0002607d

00026234 <z_clock_elapsed>:
	cyc += last_count;
	compare_set(0, cyc, sys_clock_timeout_handler, NULL);
}

uint32_t z_clock_elapsed(void)
{
   26234:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26236:	f04f 0320 	mov.w	r3, #32
   2623a:	f3ef 8511 	mrs	r5, BASEPRI
   2623e:	f383 8811 	msr	BASEPRI, r3
   26242:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26246:	481a      	ldr	r0, [pc, #104]	; (262b0 <z_clock_elapsed+0x7c>)
   26248:	f013 fa76 	bl	39738 <z_spin_lock_valid>
   2624c:	b968      	cbnz	r0, 2626a <z_clock_elapsed+0x36>
   2624e:	237c      	movs	r3, #124	; 0x7c
   26250:	4a18      	ldr	r2, [pc, #96]	; (262b4 <z_clock_elapsed+0x80>)
   26252:	4919      	ldr	r1, [pc, #100]	; (262b8 <z_clock_elapsed+0x84>)
   26254:	4819      	ldr	r0, [pc, #100]	; (262bc <z_clock_elapsed+0x88>)
   26256:	f016 fd8e 	bl	3cd76 <printk>
   2625a:	4915      	ldr	r1, [pc, #84]	; (262b0 <z_clock_elapsed+0x7c>)
   2625c:	4818      	ldr	r0, [pc, #96]	; (262c0 <z_clock_elapsed+0x8c>)
   2625e:	f016 fd8a 	bl	3cd76 <printk>
   26262:	217c      	movs	r1, #124	; 0x7c
   26264:	4813      	ldr	r0, [pc, #76]	; (262b4 <z_clock_elapsed+0x80>)
   26266:	f017 f83a 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   2626a:	4811      	ldr	r0, [pc, #68]	; (262b0 <z_clock_elapsed+0x7c>)
   2626c:	f013 fa82 	bl	39774 <z_spin_lock_set_owner>
   26270:	4b14      	ldr	r3, [pc, #80]	; (262c4 <z_clock_elapsed+0x90>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26272:	480f      	ldr	r0, [pc, #60]	; (262b0 <z_clock_elapsed+0x7c>)
   26274:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   26278:	4b13      	ldr	r3, [pc, #76]	; (262c8 <z_clock_elapsed+0x94>)
	return (a - b) & COUNTER_MAX;
   2627a:	681b      	ldr	r3, [r3, #0]
   2627c:	1ae4      	subs	r4, r4, r3
   2627e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   26282:	f013 fa67 	bl	39754 <z_spin_unlock_valid>
   26286:	b968      	cbnz	r0, 262a4 <z_clock_elapsed+0x70>
   26288:	23a7      	movs	r3, #167	; 0xa7
   2628a:	4a0a      	ldr	r2, [pc, #40]	; (262b4 <z_clock_elapsed+0x80>)
   2628c:	490f      	ldr	r1, [pc, #60]	; (262cc <z_clock_elapsed+0x98>)
   2628e:	480b      	ldr	r0, [pc, #44]	; (262bc <z_clock_elapsed+0x88>)
   26290:	f016 fd71 	bl	3cd76 <printk>
   26294:	4906      	ldr	r1, [pc, #24]	; (262b0 <z_clock_elapsed+0x7c>)
   26296:	480e      	ldr	r0, [pc, #56]	; (262d0 <z_clock_elapsed+0x9c>)
   26298:	f016 fd6d 	bl	3cd76 <printk>
   2629c:	21a7      	movs	r1, #167	; 0xa7
   2629e:	4805      	ldr	r0, [pc, #20]	; (262b4 <z_clock_elapsed+0x80>)
   262a0:	f017 f81d 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   262a4:	f385 8811 	msr	BASEPRI, r5
   262a8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   262ac:	4620      	mov	r0, r4
   262ae:	bd38      	pop	{r3, r4, r5, pc}
   262b0:	20018df4 	.word	0x20018df4
   262b4:	00045538 	.word	0x00045538
   262b8:	0004555e 	.word	0x0004555e
   262bc:	00044dbf 	.word	0x00044dbf
   262c0:	00045573 	.word	0x00045573
   262c4:	40015000 	.word	0x40015000
   262c8:	20018df0 	.word	0x20018df0
   262cc:	0004558b 	.word	0x0004558b
   262d0:	000455a2 	.word	0x000455a2

000262d4 <z_timer_cycle_get_32>:

uint32_t z_timer_cycle_get_32(void)
{
   262d4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   262d6:	f04f 0320 	mov.w	r3, #32
   262da:	f3ef 8511 	mrs	r5, BASEPRI
   262de:	f383 8811 	msr	BASEPRI, r3
   262e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   262e6:	481b      	ldr	r0, [pc, #108]	; (26354 <z_timer_cycle_get_32+0x80>)
   262e8:	f013 fa26 	bl	39738 <z_spin_lock_valid>
   262ec:	b968      	cbnz	r0, 2630a <z_timer_cycle_get_32+0x36>
   262ee:	237c      	movs	r3, #124	; 0x7c
   262f0:	4a19      	ldr	r2, [pc, #100]	; (26358 <z_timer_cycle_get_32+0x84>)
   262f2:	491a      	ldr	r1, [pc, #104]	; (2635c <z_timer_cycle_get_32+0x88>)
   262f4:	481a      	ldr	r0, [pc, #104]	; (26360 <z_timer_cycle_get_32+0x8c>)
   262f6:	f016 fd3e 	bl	3cd76 <printk>
   262fa:	4916      	ldr	r1, [pc, #88]	; (26354 <z_timer_cycle_get_32+0x80>)
   262fc:	4819      	ldr	r0, [pc, #100]	; (26364 <z_timer_cycle_get_32+0x90>)
   262fe:	f016 fd3a 	bl	3cd76 <printk>
   26302:	217c      	movs	r1, #124	; 0x7c
   26304:	4814      	ldr	r0, [pc, #80]	; (26358 <z_timer_cycle_get_32+0x84>)
   26306:	f016 ffea 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   2630a:	4812      	ldr	r0, [pc, #72]	; (26354 <z_timer_cycle_get_32+0x80>)
   2630c:	f013 fa32 	bl	39774 <z_spin_lock_set_owner>
   26310:	4b15      	ldr	r3, [pc, #84]	; (26368 <z_timer_cycle_get_32+0x94>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26312:	4810      	ldr	r0, [pc, #64]	; (26354 <z_timer_cycle_get_32+0x80>)
   26314:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   26318:	4b14      	ldr	r3, [pc, #80]	; (2636c <z_timer_cycle_get_32+0x98>)
   2631a:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
   2631c:	1ae4      	subs	r4, r4, r3
   2631e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   26322:	441c      	add	r4, r3
   26324:	f013 fa16 	bl	39754 <z_spin_unlock_valid>
   26328:	b968      	cbnz	r0, 26346 <z_timer_cycle_get_32+0x72>
   2632a:	23a7      	movs	r3, #167	; 0xa7
   2632c:	4a0a      	ldr	r2, [pc, #40]	; (26358 <z_timer_cycle_get_32+0x84>)
   2632e:	4910      	ldr	r1, [pc, #64]	; (26370 <z_timer_cycle_get_32+0x9c>)
   26330:	480b      	ldr	r0, [pc, #44]	; (26360 <z_timer_cycle_get_32+0x8c>)
   26332:	f016 fd20 	bl	3cd76 <printk>
   26336:	4907      	ldr	r1, [pc, #28]	; (26354 <z_timer_cycle_get_32+0x80>)
   26338:	480e      	ldr	r0, [pc, #56]	; (26374 <z_timer_cycle_get_32+0xa0>)
   2633a:	f016 fd1c 	bl	3cd76 <printk>
   2633e:	21a7      	movs	r1, #167	; 0xa7
   26340:	4805      	ldr	r0, [pc, #20]	; (26358 <z_timer_cycle_get_32+0x84>)
   26342:	f016 ffcc 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   26346:	f385 8811 	msr	BASEPRI, r5
   2634a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2634e:	4620      	mov	r0, r4
   26350:	bd38      	pop	{r3, r4, r5, pc}
   26352:	bf00      	nop
   26354:	20018df4 	.word	0x20018df4
   26358:	00045538 	.word	0x00045538
   2635c:	0004555e 	.word	0x0004555e
   26360:	00044dbf 	.word	0x00044dbf
   26364:	00045573 	.word	0x00045573
   26368:	40015000 	.word	0x40015000
   2636c:	20018df0 	.word	0x20018df0
   26370:	0004558b 	.word	0x0004558b
   26374:	000455a2 	.word	0x000455a2

00026378 <gps_agps_request>:
}

#endif /* CONFIG_AGPS_SRC_SUPL */

int gps_agps_request(struct gps_agps_request request, int socket)
{
   26378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2637a:	ab01      	add	r3, sp, #4
   2637c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LOG_ERR("SUPL request failed, error: %d", err);
		return err;
	}

#elif defined(CONFIG_AGPS_SRC_NRF_CLOUD)
	err = nrf_cloud_agps_request(request);
   26380:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   26384:	f008 fb90 	bl	2eaa8 <nrf_cloud_agps_request>
	if (err) {
   26388:	4604      	mov	r4, r0
   2638a:	b150      	cbz	r0, 263a2 <gps_agps_request+0x2a>
   2638c:	4806      	ldr	r0, [pc, #24]	; (263a8 <gps_agps_request+0x30>)
   2638e:	4b07      	ldr	r3, [pc, #28]	; (263ac <gps_agps_request+0x34>)
		LOG_ERR("nRF Cloud A-GPS request failed, error: %d", err);
   26390:	4622      	mov	r2, r4
   26392:	1a1b      	subs	r3, r3, r0
   26394:	08db      	lsrs	r3, r3, #3
   26396:	019b      	lsls	r3, r3, #6
   26398:	4905      	ldr	r1, [pc, #20]	; (263b0 <gps_agps_request+0x38>)
   2639a:	f043 0001 	orr.w	r0, r3, #1
   2639e:	f016 ffaf 	bl	3d300 <log_string_sync>
		return err;
	}
#endif /* CONFIG_AGPS_SRC_SUPL */

	return 0;
}
   263a2:	4620      	mov	r0, r4
   263a4:	b004      	add	sp, #16
   263a6:	bd10      	pop	{r4, pc}
   263a8:	0004339c 	.word	0x0004339c
   263ac:	000433a4 	.word	0x000433a4
   263b0:	000460cf 	.word	0x000460cf

000263b4 <gps_process_agps_data>:
{
	int err = 0;

#if defined(CONFIG_AGPS_SRC_NRF_CLOUD) && defined(CONFIG_NRF_CLOUD_AGPS)

	err = nrf_cloud_agps_process(buf, len, NULL);
   263b4:	2200      	movs	r2, #0
{
   263b6:	b510      	push	{r4, lr}
	err = nrf_cloud_agps_process(buf, len, NULL);
   263b8:	f008 fc6c 	bl	2ec94 <nrf_cloud_agps_process>
	if (err) {
   263bc:	4604      	mov	r4, r0
   263be:	4b0a      	ldr	r3, [pc, #40]	; (263e8 <gps_process_agps_data+0x34>)
   263c0:	4a0a      	ldr	r2, [pc, #40]	; (263ec <gps_process_agps_data+0x38>)
   263c2:	1a9b      	subs	r3, r3, r2
   263c4:	08db      	lsrs	r3, r3, #3
   263c6:	0198      	lsls	r0, r3, #6
   263c8:	b13c      	cbz	r4, 263da <gps_process_agps_data+0x26>
		LOG_ERR("A-GPS failed, error: %d", err);
   263ca:	4622      	mov	r2, r4
   263cc:	4908      	ldr	r1, [pc, #32]	; (263f0 <gps_process_agps_data+0x3c>)
   263ce:	f040 0001 	orr.w	r0, r0, #1
   263d2:	f016 ff95 	bl	3d300 <log_string_sync>
		LOG_INF("A-GPS data successfully processed");
	}
#endif /* CONFIG_AGPS_SRC_NRF_CLOUD && CONFIG_NRF_CLOUD_AGPS */

	return err;
}
   263d6:	4620      	mov	r0, r4
   263d8:	bd10      	pop	{r4, pc}
		LOG_INF("A-GPS data successfully processed");
   263da:	4906      	ldr	r1, [pc, #24]	; (263f4 <gps_process_agps_data+0x40>)
   263dc:	f040 0003 	orr.w	r0, r0, #3
   263e0:	f016 ff8e 	bl	3d300 <log_string_sync>
	return err;
   263e4:	e7f7      	b.n	263d6 <gps_process_agps_data+0x22>
   263e6:	bf00      	nop
   263e8:	000433a4 	.word	0x000433a4
   263ec:	0004339c 	.word	0x0004339c
   263f0:	000460f9 	.word	0x000460f9
   263f4:	00046111 	.word	0x00046111

000263f8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   263f8:	4a0a      	ldr	r2, [pc, #40]	; (26424 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   263fa:	490b      	ldr	r1, [pc, #44]	; (26428 <arch_swap+0x30>)
	_current->arch.basepri = key;
   263fc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   263fe:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   26400:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
	_current->arch.swap_return_value = _k_neg_eagain;
   26404:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26408:	4908      	ldr	r1, [pc, #32]	; (2642c <arch_swap+0x34>)
   2640a:	684b      	ldr	r3, [r1, #4]
   2640c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   26410:	604b      	str	r3, [r1, #4]
   26412:	2300      	movs	r3, #0
   26414:	f383 8811 	msr	BASEPRI, r3
   26418:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   2641c:	6893      	ldr	r3, [r2, #8]
}
   2641e:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
   26422:	4770      	bx	lr
   26424:	2001a07c 	.word	0x2001a07c
   26428:	000440d8 	.word	0x000440d8
   2642c:	e000ed00 	.word	0xe000ed00

00026430 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26430:	492a      	ldr	r1, [pc, #168]	; (264dc <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26432:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26434:	f04f 0040 	mov.w	r0, #64	; 0x40
    add r0, r2
   26438:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   2643a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   2643e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
   26442:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   26446:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
   2644a:	d004      	beq.n	26456 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
   2644c:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
   26450:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
   26454:	e007      	b.n	26466 <out_fp_endif>

00026456 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
   26456:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vstmia r0, {s16-s31}
   2645a:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
   2645e:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
   26462:	f050 0004 	orrs.w	r0, r0, #4

00026466 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
   26466:	f8c2 00cc 	str.w	r0, [r2, #204]	; 0xcc

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   2646a:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2646c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   26470:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   26474:	4f1a      	ldr	r7, [pc, #104]	; (264e0 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26476:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   2647a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
   2647c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   2647e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   26480:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    movs r3, #0
   26484:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26486:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2648a:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
   2648e:	f8d2 00cc 	ldr.w	r0, [r2, #204]	; 0xcc
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
   26492:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
   26496:	d105      	bne.n	264a4 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   26498:	2300      	movs	r3, #0
    vmsr fpscr, r3
   2649a:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
   2649e:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
   264a2:	e005      	b.n	264b0 <in_fp_endif>

000264a4 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
   264a4:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
   264a8:	f102 008c 	add.w	r0, r2, #140	; 0x8c
    vldmia r0, {s16-s31}
   264ac:	ec90 8a10 	vldmia	r0, {s16-s31}

000264b0 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   264b0:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
   264b4:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   264b8:	f383 8814 	msr	CONTROL, r3
    isb
   264bc:	f3bf 8f6f 	isb	sy
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   264c0:	f102 0040 	add.w	r0, r2, #64	; 0x40
    ldmia r0, {v1-v8, ip}
   264c4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   264c8:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
   264cc:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
   264d0:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
   264d2:	f017 fdac 	bl	3e02e <configure_builtin_stack_guard>
    pop {r2, lr}
   264d6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   264da:	4770      	bx	lr
    ldr r1, =_kernel
   264dc:	2001a07c 	.word	0x2001a07c
    ldr v4, =_SCS_ICSR
   264e0:	e000ed04 	.word	0xe000ed04

000264e4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   264e4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   264e8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   264ea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   264ee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   264f2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   264f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   264f8:	2902      	cmp	r1, #2
    beq _oops
   264fa:	d0ff      	beq.n	264fc <_oops>

000264fc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   264fc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   264fe:	f017 fd9a 	bl	3e036 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   26502:	bd01      	pop	{r0, pc}

00026504 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   26504:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   26506:	2b00      	cmp	r3, #0
   26508:	db08      	blt.n	2651c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2650a:	2201      	movs	r2, #1
   2650c:	f000 001f 	and.w	r0, r0, #31
   26510:	fa02 f000 	lsl.w	r0, r2, r0
   26514:	4a02      	ldr	r2, [pc, #8]	; (26520 <arch_irq_enable+0x1c>)
   26516:	095b      	lsrs	r3, r3, #5
   26518:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   2651c:	4770      	bx	lr
   2651e:	bf00      	nop
   26520:	e000e100 	.word	0xe000e100

00026524 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   26524:	4b05      	ldr	r3, [pc, #20]	; (2653c <arch_irq_is_enabled+0x18>)
   26526:	0942      	lsrs	r2, r0, #5
   26528:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   2652c:	2301      	movs	r3, #1
   2652e:	f000 001f 	and.w	r0, r0, #31
   26532:	fa03 f000 	lsl.w	r0, r3, r0
}
   26536:	4010      	ands	r0, r2
   26538:	4770      	bx	lr
   2653a:	bf00      	nop
   2653c:	e000e100 	.word	0xe000e100

00026540 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   26540:	b570      	push	{r4, r5, r6, lr}
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   26542:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   26544:	2c07      	cmp	r4, #7
{
   26546:	4605      	mov	r5, r0
   26548:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   2654a:	d90e      	bls.n	2656a <z_arm_irq_priority_set+0x2a>
   2654c:	235c      	movs	r3, #92	; 0x5c
   2654e:	4a10      	ldr	r2, [pc, #64]	; (26590 <z_arm_irq_priority_set+0x50>)
   26550:	4910      	ldr	r1, [pc, #64]	; (26594 <z_arm_irq_priority_set+0x54>)
   26552:	4811      	ldr	r0, [pc, #68]	; (26598 <z_arm_irq_priority_set+0x58>)
   26554:	f016 fc0f 	bl	3cd76 <printk>
   26558:	4631      	mov	r1, r6
   2655a:	4810      	ldr	r0, [pc, #64]	; (2659c <z_arm_irq_priority_set+0x5c>)
   2655c:	2207      	movs	r2, #7
   2655e:	f016 fc0a 	bl	3cd76 <printk>
   26562:	215c      	movs	r1, #92	; 0x5c
   26564:	480a      	ldr	r0, [pc, #40]	; (26590 <z_arm_irq_priority_set+0x50>)
   26566:	f016 feba 	bl	3d2de <assert_post_action>
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2656a:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   2656c:	2b00      	cmp	r3, #0
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2656e:	bfac      	ite	ge
   26570:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26574:	4b0a      	ldrlt	r3, [pc, #40]	; (265a0 <z_arm_irq_priority_set+0x60>)
   26576:	ea4f 1444 	mov.w	r4, r4, lsl #5
   2657a:	b2e4      	uxtb	r4, r4
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2657c:	bfab      	itete	ge
   2657e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26582:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26586:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2658a:	555c      	strblt	r4, [r3, r5]
}
   2658c:	bd70      	pop	{r4, r5, r6, pc}
   2658e:	bf00      	nop
   26590:	00046133 	.word	0x00046133
   26594:	00046169 	.word	0x00046169
   26598:	00044dbf 	.word	0x00044dbf
   2659c:	00046184 	.word	0x00046184
   265a0:	e000ed14 	.word	0xe000ed14

000265a4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   265a4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   265a6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   265a8:	4b04      	ldr	r3, [pc, #16]	; (265bc <_arch_isr_direct_pm+0x18>)
   265aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
   265ac:	b118      	cbz	r0, 265b6 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   265ae:	2200      	movs	r2, #0
   265b0:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
   265b2:	f01b f997 	bl	418e4 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   265b6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   265b8:	bd08      	pop	{r3, pc}
   265ba:	bf00      	nop
   265bc:	2001a07c 	.word	0x2001a07c

000265c0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   265c0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   265c4:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
   265c6:	490c      	ldr	r1, [pc, #48]	; (265f8 <arch_new_thread+0x38>)
	iframe->a2 = (uint32_t)p1;
   265c8:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   265cc:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
   265ce:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
   265d2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   265d6:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
   265d8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
   265dc:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   265e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   265e4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   265e8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   265ea:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   265ec:	6602      	str	r2, [r0, #96]	; 0x60
	thread->arch.basepri = 0;
   265ee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FPU_SHARING)
	thread->arch.mode = 0;
   265f2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   265f6:	4770      	bx	lr
   265f8:	0003ce7b 	.word	0x0003ce7b

000265fc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   265fc:	b508      	push	{r3, lr}
   265fe:	4604      	mov	r4, r0
   26600:	460e      	mov	r6, r1
   26602:	4615      	mov	r5, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   26604:	2300      	movs	r3, #0
   26606:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   2660a:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   2660e:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   26612:	f383 8814 	msr	CONTROL, r3
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
   26616:	f3bf 8f6f 	isb	sy
	z_arm_configure_static_mpu_regions();
   2661a:	f000 fc03 	bl	26e24 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   2661e:	4b09      	ldr	r3, [pc, #36]	; (26644 <arch_switch_to_main_thread+0x48>)
   26620:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   26622:	6f63      	ldr	r3, [r4, #116]	; 0x74
   26624:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   26628:	4628      	mov	r0, r5
   2662a:	f386 8809 	msr	PSP, r6
   2662e:	2100      	movs	r1, #0
   26630:	b663      	cpsie	if
   26632:	f381 8811 	msr	BASEPRI, r1
   26636:	f3bf 8f6f 	isb	sy
   2663a:	2200      	movs	r2, #0
   2663c:	2300      	movs	r3, #0
   2663e:	f016 fc1c 	bl	3ce7a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   26642:	bf00      	nop
   26644:	2001a07c 	.word	0x2001a07c

00026648 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   26648:	4901      	ldr	r1, [pc, #4]	; (26650 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   2664a:	2210      	movs	r2, #16
	str	r2, [r1]
   2664c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   2664e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   26650:	e000ed10 	.word	0xe000ed10

00026654 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   26654:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   26656:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   26658:	f380 8811 	msr	BASEPRI, r0
	isb
   2665c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   26660:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   26664:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   26666:	b662      	cpsie	i
	isb
   26668:	f3bf 8f6f 	isb	sy

	bx	lr
   2666c:	4770      	bx	lr
   2666e:	bf00      	nop

00026670 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   26670:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   26672:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   26674:	f381 8811 	msr	BASEPRI, r1

	wfe
   26678:	bf20      	wfe

	msr	BASEPRI, r0
   2667a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   2667e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   26680:	4770      	bx	lr
   26682:	bf00      	nop

00026684 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26688:	4606      	mov	r6, r0

	if (esf != NULL) {
   2668a:	460d      	mov	r5, r1
{
   2668c:	b087      	sub	sp, #28
	if (esf != NULL) {
   2668e:	2900      	cmp	r1, #0
   26690:	d051      	beq.n	26736 <z_arm_fatal_error+0xb2>
   26692:	4b2c      	ldr	r3, [pc, #176]	; (26744 <z_arm_fatal_error+0xc0>)
   26694:	4c2c      	ldr	r4, [pc, #176]	; (26748 <z_arm_fatal_error+0xc4>)
   26696:	46a8      	mov	r8, r5
   26698:	1ae4      	subs	r4, r4, r3
   2669a:	08e4      	lsrs	r4, r4, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   2669c:	688b      	ldr	r3, [r1, #8]
   2669e:	01a4      	lsls	r4, r4, #6
   266a0:	f044 0401 	orr.w	r4, r4, #1
   266a4:	9300      	str	r3, [sp, #0]
   266a6:	e9d1 2300 	ldrd	r2, r3, [r1]
   266aa:	4620      	mov	r0, r4
   266ac:	4927      	ldr	r1, [pc, #156]	; (2674c <z_arm_fatal_error+0xc8>)
   266ae:	f016 fe27 	bl	3d300 <log_string_sync>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   266b2:	696b      	ldr	r3, [r5, #20]
   266b4:	4620      	mov	r0, r4
   266b6:	9300      	str	r3, [sp, #0]
   266b8:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
   266bc:	4924      	ldr	r1, [pc, #144]	; (26750 <z_arm_fatal_error+0xcc>)
   266be:	f016 fe1f 	bl	3d300 <log_string_sync>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   266c2:	4620      	mov	r0, r4
   266c4:	69ea      	ldr	r2, [r5, #28]
   266c6:	4923      	ldr	r1, [pc, #140]	; (26754 <z_arm_fatal_error+0xd0>)
   266c8:	f016 fe1a 	bl	3d300 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   266cc:	2700      	movs	r7, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   266ce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 26760 <z_arm_fatal_error+0xdc>
   266d2:	edd8 7a0b 	vldr	s15, [r8, #44]	; 0x2c
   266d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   266da:	ed98 7a08 	vldr	s14, [r8, #32]
   266de:	edcd 7a05 	vstr	s15, [sp, #20]
   266e2:	1cfb      	adds	r3, r7, #3
   266e4:	9304      	str	r3, [sp, #16]
   266e6:	edd8 7a0a 	vldr	s15, [r8, #40]	; 0x28
   266ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   266ee:	edcd 7a03 	vstr	s15, [sp, #12]
   266f2:	1cbb      	adds	r3, r7, #2
   266f4:	9302      	str	r3, [sp, #8]
   266f6:	edd8 7a09 	vldr	s15, [r8, #36]	; 0x24
   266fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   266fe:	edcd 7a01 	vstr	s15, [sp, #4]
   26702:	eefc 7ac7 	vcvt.u32.f32	s15, s14
   26706:	1c7b      	adds	r3, r7, #1
   26708:	463a      	mov	r2, r7
   2670a:	9300      	str	r3, [sp, #0]
   2670c:	4649      	mov	r1, r9
   2670e:	ee17 3a90 	vmov	r3, s15
   26712:	4620      	mov	r0, r4
	for (int i = 0; i < 16; i += 4) {
   26714:	3704      	adds	r7, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   26716:	f016 fdf3 	bl	3d300 <log_string_sync>
	for (int i = 0; i < 16; i += 4) {
   2671a:	2f10      	cmp	r7, #16
   2671c:	f108 0810 	add.w	r8, r8, #16
   26720:	d1d7      	bne.n	266d2 <z_arm_fatal_error+0x4e>
	LOG_ERR("fpscr:  0x%08x", esf->fpscr);
   26722:	4620      	mov	r0, r4
   26724:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   26726:	490c      	ldr	r1, [pc, #48]	; (26758 <z_arm_fatal_error+0xd4>)
   26728:	f016 fdea 	bl	3d300 <log_string_sync>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   2672c:	4620      	mov	r0, r4
   2672e:	69aa      	ldr	r2, [r5, #24]
   26730:	490a      	ldr	r1, [pc, #40]	; (2675c <z_arm_fatal_error+0xd8>)
   26732:	f016 fde5 	bl	3d300 <log_string_sync>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   26736:	4629      	mov	r1, r5
   26738:	4630      	mov	r0, r6
}
   2673a:	b007      	add	sp, #28
   2673c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_fatal_error(reason, esf);
   26740:	f010 bcbe 	b.w	370c0 <z_fatal_error>
   26744:	0004339c 	.word	0x0004339c
   26748:	000434bc 	.word	0x000434bc
   2674c:	000461b9 	.word	0x000461b9
   26750:	000461e8 	.word	0x000461e8
   26754:	00046217 	.word	0x00046217
   26758:	00046269 	.word	0x00046269
   2675c:	00046278 	.word	0x00046278
   26760:	00046226 	.word	0x00046226

00026764 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   26764:	bf30      	wfi
    b z_SysNmiOnReset
   26766:	f7ff bffd 	b.w	26764 <z_SysNmiOnReset>
   2676a:	bf00      	nop

0002676c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   2676c:	4a14      	ldr	r2, [pc, #80]	; (267c0 <z_arm_prep_c+0x54>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   2676e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   26770:	4b14      	ldr	r3, [pc, #80]	; (267c4 <z_arm_prep_c+0x58>)
   26772:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   26776:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   26778:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2677c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   26780:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26784:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   26788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   2678c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   26790:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   26794:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   26798:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   2679c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   267a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   267a4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   267a8:	2300      	movs	r3, #0
   267aa:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   267ae:	f010 fd2f 	bl	37210 <z_bss_zero>
	z_data_copy();
   267b2:	f013 f92f 	bl	39a14 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   267b6:	f000 fb07 	bl	26dc8 <z_arm_interrupt_init>
	z_cstart();
   267ba:	f010 fd4d 	bl	37258 <z_cstart>
   267be:	bf00      	nop
   267c0:	0001c200 	.word	0x0001c200
   267c4:	e000ed00 	.word	0xe000ed00

000267c8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   267c8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   267ca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   267cc:	4a0b      	ldr	r2, [pc, #44]	; (267fc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   267ce:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
   267d0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   267d2:	bf1e      	ittt	ne
	movne	r1, #0
   267d4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   267d6:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
   267d8:	f01b f884 	blne	418e4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   267dc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   267de:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   267e2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   267e6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   267ea:	4905      	ldr	r1, [pc, #20]	; (26800 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   267ec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   267ee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   267f0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   267f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   267f6:	4903      	ldr	r1, [pc, #12]	; (26804 <_isr_wrapper+0x3c>)
	bx r1
   267f8:	4708      	bx	r1
   267fa:	0000      	.short	0x0000
	ldr r2, =_kernel
   267fc:	2001a07c 	.word	0x2001a07c
	ldr r1, =_sw_isr_table
   26800:	00043160 	.word	0x00043160
	ldr r1, =z_arm_int_exit
   26804:	00026d1d 	.word	0x00026d1d

00026808 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   26808:	2000      	movs	r0, #0
    msr CONTROL, r0
   2680a:	f380 8814 	msr	CONTROL, r0
    isb
   2680e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
   26812:	2000      	movs	r0, #0
    msr MSPLIM, r0
   26814:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
   26818:	f380 880b 	msr	PSPLIM, r0
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   2681c:	f016 fd67 	bl	3d2ee <z_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   26820:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   26822:	490e      	ldr	r1, [pc, #56]	; (2685c <__start+0x54>)
    str r0, [r1]
   26824:	6008      	str	r0, [r1, #0]
    dsb
   26826:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   2682a:	480d      	ldr	r0, [pc, #52]	; (26860 <__start+0x58>)
    msr msp, r0
   2682c:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   26830:	f000 faa4 	bl	26d7c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26834:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26836:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   2683a:	480a      	ldr	r0, [pc, #40]	; (26864 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   2683c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   26840:	1840      	adds	r0, r0, r1
    msr PSP, r0
   26842:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   26846:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   2684a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   2684c:	4308      	orrs	r0, r1
    msr CONTROL, r0
   2684e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   26852:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   26856:	f7ff ff89 	bl	2676c <z_arm_prep_c>
   2685a:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   2685c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   26860:	20025668 	.word	0x20025668
    ldr r0, =z_interrupt_stacks
   26864:	200257a8 	.word	0x200257a8

00026868 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   26868:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   2686c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   26870:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   26872:	4672      	mov	r2, lr
	bl z_arm_fault
   26874:	f000 f958 	bl	26b28 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   26878:	bd01      	pop	{r0, pc}
   2687a:	bf00      	nop

0002687c <mem_manage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   2687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26880:	4b31      	ldr	r3, [pc, #196]	; (26948 <mem_manage_fault.isra.0+0xcc>)
   26882:	4c32      	ldr	r4, [pc, #200]	; (2694c <mem_manage_fault.isra.0+0xd0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   26884:	4d32      	ldr	r5, [pc, #200]	; (26950 <mem_manage_fault.isra.0+0xd4>)
   26886:	1ae4      	subs	r4, r4, r3
   26888:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   2688a:	01a4      	lsls	r4, r4, #6
   2688c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   26890:	4607      	mov	r7, r0
   26892:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   26894:	4640      	mov	r0, r8
   26896:	492f      	ldr	r1, [pc, #188]	; (26954 <mem_manage_fault.isra.0+0xd8>)
   26898:	f016 fd32 	bl	3d300 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   2689c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2689e:	06d0      	lsls	r0, r2, #27
   268a0:	d503      	bpl.n	268aa <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   268a2:	4640      	mov	r0, r8
   268a4:	492c      	ldr	r1, [pc, #176]	; (26958 <mem_manage_fault.isra.0+0xdc>)
   268a6:	f016 fd2b 	bl	3d300 <log_string_sync>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   268aa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   268ac:	0719      	lsls	r1, r3, #28
   268ae:	d504      	bpl.n	268ba <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   268b0:	492a      	ldr	r1, [pc, #168]	; (2695c <mem_manage_fault.isra.0+0xe0>)
   268b2:	f044 0001 	orr.w	r0, r4, #1
   268b6:	f016 fd23 	bl	3d300 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   268ba:	4d25      	ldr	r5, [pc, #148]	; (26950 <mem_manage_fault.isra.0+0xd4>)
   268bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   268be:	079a      	lsls	r2, r3, #30
   268c0:	d512      	bpl.n	268e8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   268c2:	f044 0801 	orr.w	r8, r4, #1
   268c6:	4640      	mov	r0, r8
   268c8:	4925      	ldr	r1, [pc, #148]	; (26960 <mem_manage_fault.isra.0+0xe4>)
   268ca:	f016 fd19 	bl	3d300 <log_string_sync>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
   268ce:	6b6a      	ldr	r2, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   268d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   268d2:	061b      	lsls	r3, r3, #24
   268d4:	d508      	bpl.n	268e8 <mem_manage_fault.isra.0+0x6c>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   268d6:	4640      	mov	r0, r8
   268d8:	4922      	ldr	r1, [pc, #136]	; (26964 <mem_manage_fault.isra.0+0xe8>)
   268da:	f016 fd11 	bl	3d300 <log_string_sync>
			if (from_hard_fault) {
   268de:	b11f      	cbz	r7, 268e8 <mem_manage_fault.isra.0+0x6c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   268e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   268e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   268e6:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   268e8:	4d19      	ldr	r5, [pc, #100]	; (26950 <mem_manage_fault.isra.0+0xd4>)
   268ea:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   268ec:	07d0      	lsls	r0, r2, #31
   268ee:	d504      	bpl.n	268fa <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   268f0:	491d      	ldr	r1, [pc, #116]	; (26968 <mem_manage_fault.isra.0+0xec>)
   268f2:	f044 0001 	orr.w	r0, r4, #1
   268f6:	f016 fd03 	bl	3d300 <log_string_sync>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   268fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   268fc:	0699      	lsls	r1, r3, #26
   268fe:	d504      	bpl.n	2690a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   26900:	491a      	ldr	r1, [pc, #104]	; (2696c <mem_manage_fault.isra.0+0xf0>)
   26902:	f044 0001 	orr.w	r0, r4, #1
   26906:	f016 fcfb 	bl	3d300 <log_string_sync>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   2690a:	4b11      	ldr	r3, [pc, #68]	; (26950 <mem_manage_fault.isra.0+0xd4>)
   2690c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2690e:	06d2      	lsls	r2, r2, #27
   26910:	d402      	bmi.n	26918 <mem_manage_fault.isra.0+0x9c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   26912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   26914:	079b      	lsls	r3, r3, #30
   26916:	d50e      	bpl.n	26936 <mem_manage_fault.isra.0+0xba>
					"Stacking error not a stack fail\n");
			}
		}
#else
	(void)mmfar;
	__ASSERT(0,
   26918:	4915      	ldr	r1, [pc, #84]	; (26970 <mem_manage_fault.isra.0+0xf4>)
   2691a:	f240 1347 	movw	r3, #327	; 0x147
   2691e:	4a15      	ldr	r2, [pc, #84]	; (26974 <mem_manage_fault.isra.0+0xf8>)
   26920:	4815      	ldr	r0, [pc, #84]	; (26978 <mem_manage_fault.isra.0+0xfc>)
   26922:	f016 fa28 	bl	3cd76 <printk>
   26926:	4815      	ldr	r0, [pc, #84]	; (2697c <mem_manage_fault.isra.0+0x100>)
   26928:	f016 fa25 	bl	3cd76 <printk>
   2692c:	f240 1147 	movw	r1, #327	; 0x147
   26930:	4810      	ldr	r0, [pc, #64]	; (26974 <mem_manage_fault.isra.0+0xf8>)
   26932:	f016 fcd4 	bl	3d2de <assert_post_action>

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   26936:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   26938:	4a05      	ldr	r2, [pc, #20]	; (26950 <mem_manage_fault.isra.0+0xd4>)
   2693a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2693c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   26940:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   26942:	7030      	strb	r0, [r6, #0]

	return reason;
}
   26944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26948:	0004339c 	.word	0x0004339c
   2694c:	000434bc 	.word	0x000434bc
   26950:	e000ed00 	.word	0xe000ed00
   26954:	000462a6 	.word	0x000462a6
   26958:	000462bc 	.word	0x000462bc
   2695c:	000462ef 	.word	0x000462ef
   26960:	00046302 	.word	0x00046302
   26964:	0004631a 	.word	0x0004631a
   26968:	00046330 	.word	0x00046330
   2696c:	0004634f 	.word	0x0004634f
   26970:	0004bcc7 	.word	0x0004bcc7
   26974:	0004637e 	.word	0x0004637e
   26978:	00044dbf 	.word	0x00044dbf
   2697c:	000463b8 	.word	0x000463b8

00026980 <bus_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   26980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26984:	4b29      	ldr	r3, [pc, #164]	; (26a2c <bus_fault.isra.0+0xac>)
   26986:	4c2a      	ldr	r4, [pc, #168]	; (26a30 <bus_fault.isra.0+0xb0>)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   26988:	4d2a      	ldr	r5, [pc, #168]	; (26a34 <bus_fault.isra.0+0xb4>)
   2698a:	1ae4      	subs	r4, r4, r3
   2698c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   2698e:	01a4      	lsls	r4, r4, #6
   26990:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   26994:	4607      	mov	r7, r0
   26996:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   26998:	4640      	mov	r0, r8
   2699a:	4927      	ldr	r1, [pc, #156]	; (26a38 <bus_fault.isra.0+0xb8>)
   2699c:	f016 fcb0 	bl	3d300 <log_string_sync>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   269a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   269a2:	04d1      	lsls	r1, r2, #19
   269a4:	d503      	bpl.n	269ae <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   269a6:	4640      	mov	r0, r8
   269a8:	4924      	ldr	r1, [pc, #144]	; (26a3c <bus_fault.isra.0+0xbc>)
   269aa:	f016 fca9 	bl	3d300 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   269ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   269b0:	051a      	lsls	r2, r3, #20
   269b2:	d504      	bpl.n	269be <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   269b4:	4922      	ldr	r1, [pc, #136]	; (26a40 <bus_fault.isra.0+0xc0>)
   269b6:	f044 0001 	orr.w	r0, r4, #1
   269ba:	f016 fca1 	bl	3d300 <log_string_sync>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   269be:	4d1d      	ldr	r5, [pc, #116]	; (26a34 <bus_fault.isra.0+0xb4>)
   269c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   269c2:	059b      	lsls	r3, r3, #22
   269c4:	d512      	bpl.n	269ec <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   269c6:	f044 0801 	orr.w	r8, r4, #1
   269ca:	4640      	mov	r0, r8
   269cc:	491d      	ldr	r1, [pc, #116]	; (26a44 <bus_fault.isra.0+0xc4>)
   269ce:	f016 fc97 	bl	3d300 <log_string_sync>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   269d2:	6baa      	ldr	r2, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   269d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   269d6:	0418      	lsls	r0, r3, #16
   269d8:	d508      	bpl.n	269ec <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   269da:	4640      	mov	r0, r8
   269dc:	491a      	ldr	r1, [pc, #104]	; (26a48 <bus_fault.isra.0+0xc8>)
   269de:	f016 fc8f 	bl	3d300 <log_string_sync>
			if (from_hard_fault) {
   269e2:	b11f      	cbz	r7, 269ec <bus_fault.isra.0+0x6c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   269e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   269e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   269ea:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   269ec:	4d11      	ldr	r5, [pc, #68]	; (26a34 <bus_fault.isra.0+0xb4>)
   269ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   269f0:	0559      	lsls	r1, r3, #21
   269f2:	d504      	bpl.n	269fe <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   269f4:	4915      	ldr	r1, [pc, #84]	; (26a4c <bus_fault.isra.0+0xcc>)
   269f6:	f044 0001 	orr.w	r0, r4, #1
   269fa:	f016 fc81 	bl	3d300 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   269fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26a00:	05da      	lsls	r2, r3, #23
   26a02:	d50d      	bpl.n	26a20 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   26a04:	4912      	ldr	r1, [pc, #72]	; (26a50 <bus_fault.isra.0+0xd0>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   26a06:	f044 0001 	orr.w	r0, r4, #1
   26a0a:	f016 fc79 	bl	3d300 <log_string_sync>
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   26a0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   26a10:	4a08      	ldr	r2, [pc, #32]	; (26a34 <bus_fault.isra.0+0xb4>)
   26a12:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26a14:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   26a18:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   26a1a:	7030      	strb	r0, [r6, #0]

	return reason;
}
   26a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   26a20:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26a22:	049b      	lsls	r3, r3, #18
   26a24:	d5f3      	bpl.n	26a0e <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   26a26:	490b      	ldr	r1, [pc, #44]	; (26a54 <bus_fault.isra.0+0xd4>)
   26a28:	e7ed      	b.n	26a06 <bus_fault.isra.0+0x86>
   26a2a:	bf00      	nop
   26a2c:	0004339c 	.word	0x0004339c
   26a30:	000434bc 	.word	0x000434bc
   26a34:	e000ed00 	.word	0xe000ed00
   26a38:	000463f2 	.word	0x000463f2
   26a3c:	00046408 	.word	0x00046408
   26a40:	000462ef 	.word	0x000462ef
   26a44:	00046419 	.word	0x00046419
   26a48:	00046432 	.word	0x00046432
   26a4c:	00046447 	.word	0x00046447
   26a50:	00046462 	.word	0x00046462
   26a54:	0004634f 	.word	0x0004634f

00026a58 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   26a58:	b570      	push	{r4, r5, r6, lr}
   26a5a:	4b28      	ldr	r3, [pc, #160]	; (26afc <usage_fault.isra.0+0xa4>)
   26a5c:	4c28      	ldr	r4, [pc, #160]	; (26b00 <usage_fault.isra.0+0xa8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   26a5e:	4d29      	ldr	r5, [pc, #164]	; (26b04 <usage_fault.isra.0+0xac>)
   26a60:	1ae4      	subs	r4, r4, r3
   26a62:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   26a64:	01a4      	lsls	r4, r4, #6
   26a66:	f044 0601 	orr.w	r6, r4, #1
   26a6a:	4630      	mov	r0, r6
   26a6c:	4926      	ldr	r1, [pc, #152]	; (26b08 <usage_fault.isra.0+0xb0>)
   26a6e:	f016 fc47 	bl	3d300 <log_string_sync>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   26a72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26a74:	0193      	lsls	r3, r2, #6
   26a76:	d503      	bpl.n	26a80 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   26a78:	4630      	mov	r0, r6
   26a7a:	4924      	ldr	r1, [pc, #144]	; (26b0c <usage_fault.isra.0+0xb4>)
   26a7c:	f016 fc40 	bl	3d300 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   26a80:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26a82:	01dd      	lsls	r5, r3, #7
   26a84:	d504      	bpl.n	26a90 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   26a86:	4922      	ldr	r1, [pc, #136]	; (26b10 <usage_fault.isra.0+0xb8>)
   26a88:	f044 0001 	orr.w	r0, r4, #1
   26a8c:	f016 fc38 	bl	3d300 <log_string_sync>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   26a90:	4d1c      	ldr	r5, [pc, #112]	; (26b04 <usage_fault.isra.0+0xac>)
   26a92:	6aae      	ldr	r6, [r5, #40]	; 0x28
   26a94:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   26a98:	d005      	beq.n	26aa6 <usage_fault.isra.0+0x4e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   26a9a:	491e      	ldr	r1, [pc, #120]	; (26b14 <usage_fault.isra.0+0xbc>)
   26a9c:	f044 0001 	orr.w	r0, r4, #1
   26aa0:	f016 fc2e 	bl	3d300 <log_string_sync>
		 * prevents the context area to be loaded on the stack upon
		 * UsageFault exception entry. As a result, we cannot rely
		 * on the reported faulty instruction address, to determine
		 * the instruction that triggered the stack overflow.
		 */
		reason = K_ERR_STACK_CHK_FAIL;
   26aa4:	2602      	movs	r6, #2
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   26aa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26aa8:	0318      	lsls	r0, r3, #12
   26aaa:	d504      	bpl.n	26ab6 <usage_fault.isra.0+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   26aac:	491a      	ldr	r1, [pc, #104]	; (26b18 <usage_fault.isra.0+0xc0>)
   26aae:	f044 0001 	orr.w	r0, r4, #1
   26ab2:	f016 fc25 	bl	3d300 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   26ab6:	4d13      	ldr	r5, [pc, #76]	; (26b04 <usage_fault.isra.0+0xac>)
   26ab8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26aba:	0351      	lsls	r1, r2, #13
   26abc:	d504      	bpl.n	26ac8 <usage_fault.isra.0+0x70>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   26abe:	4917      	ldr	r1, [pc, #92]	; (26b1c <usage_fault.isra.0+0xc4>)
   26ac0:	f044 0001 	orr.w	r0, r4, #1
   26ac4:	f016 fc1c 	bl	3d300 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   26ac8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26aca:	039a      	lsls	r2, r3, #14
   26acc:	d504      	bpl.n	26ad8 <usage_fault.isra.0+0x80>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   26ace:	4914      	ldr	r1, [pc, #80]	; (26b20 <usage_fault.isra.0+0xc8>)
   26ad0:	f044 0001 	orr.w	r0, r4, #1
   26ad4:	f016 fc14 	bl	3d300 <log_string_sync>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   26ad8:	4d0a      	ldr	r5, [pc, #40]	; (26b04 <usage_fault.isra.0+0xac>)
   26ada:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26adc:	03db      	lsls	r3, r3, #15
   26ade:	d504      	bpl.n	26aea <usage_fault.isra.0+0x92>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   26ae0:	4910      	ldr	r1, [pc, #64]	; (26b24 <usage_fault.isra.0+0xcc>)
   26ae2:	f044 0001 	orr.w	r0, r4, #1
   26ae6:	f016 fc0b 	bl	3d300 <log_string_sync>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26aea:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   26aec:	4630      	mov	r0, r6
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26aee:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   26af2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   26af6:	62ab      	str	r3, [r5, #40]	; 0x28
}
   26af8:	bd70      	pop	{r4, r5, r6, pc}
   26afa:	bf00      	nop
   26afc:	0004339c 	.word	0x0004339c
   26b00:	000434bc 	.word	0x000434bc
   26b04:	e000ed00 	.word	0xe000ed00
   26b08:	0004647a 	.word	0x0004647a
   26b0c:	00046492 	.word	0x00046492
   26b10:	000464a5 	.word	0x000464a5
   26b14:	000464bf 	.word	0x000464bf
   26b18:	000464e9 	.word	0x000464e9
   26b1c:	00046507 	.word	0x00046507
   26b20:	0004652c 	.word	0x0004652c
   26b24:	00046546 	.word	0x00046546

00026b28 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   26b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26b2c:	4b63      	ldr	r3, [pc, #396]	; (26cbc <z_arm_fault+0x194>)
{
   26b2e:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26b30:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   26b34:	460e      	mov	r6, r1
   26b36:	4614      	mov	r4, r2
   26b38:	2700      	movs	r7, #0
   26b3a:	b09d      	sub	sp, #116	; 0x74
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   26b3c:	f3c8 0508 	ubfx	r5, r8, #0, #9
   26b40:	f387 8811 	msr	BASEPRI, r7
   26b44:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   26b48:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   26b4c:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   26b50:	d117      	bne.n	26b82 <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   26b52:	07d0      	lsls	r0, r2, #31
   26b54:	d415      	bmi.n	26b82 <z_arm_fault+0x5a>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   26b56:	0651      	lsls	r1, r2, #25
   26b58:	d404      	bmi.n	26b64 <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   26b5a:	0722      	lsls	r2, r4, #28
   26b5c:	d40f      	bmi.n	26b7e <z_arm_fault+0x56>
			ptr_esf = (z_arch_esf_t *)msp;
   26b5e:	464e      	mov	r6, r9
			*nested_exc = true;
   26b60:	2701      	movs	r7, #1
   26b62:	e00d      	b.n	26b80 <z_arm_fault+0x58>
   26b64:	4856      	ldr	r0, [pc, #344]	; (26cc0 <z_arm_fault+0x198>)
   26b66:	4b57      	ldr	r3, [pc, #348]	; (26cc4 <z_arm_fault+0x19c>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   26b68:	4957      	ldr	r1, [pc, #348]	; (26cc8 <z_arm_fault+0x1a0>)
   26b6a:	1a1b      	subs	r3, r3, r0
   26b6c:	08db      	lsrs	r3, r3, #3
   26b6e:	019b      	lsls	r3, r3, #6
   26b70:	f043 0001 	orr.w	r0, r3, #1
   26b74:	f016 fbc4 	bl	3d300 <log_string_sync>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   26b78:	f014 0704 	ands.w	r7, r4, #4
   26b7c:	d01e      	beq.n	26bbc <z_arm_fault+0x94>
	*nested_exc = false;
   26b7e:	2700      	movs	r7, #0

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   26b80:	b97e      	cbnz	r6, 26ba2 <z_arm_fault+0x7a>
   26b82:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   26b86:	4a51      	ldr	r2, [pc, #324]	; (26ccc <z_arm_fault+0x1a4>)
   26b88:	4951      	ldr	r1, [pc, #324]	; (26cd0 <z_arm_fault+0x1a8>)
   26b8a:	4852      	ldr	r0, [pc, #328]	; (26cd4 <z_arm_fault+0x1ac>)
   26b8c:	f016 f8f3 	bl	3cd76 <printk>
   26b90:	4851      	ldr	r0, [pc, #324]	; (26cd8 <z_arm_fault+0x1b0>)
   26b92:	f016 f8f0 	bl	3cd76 <printk>
   26b96:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   26b9a:	484c      	ldr	r0, [pc, #304]	; (26ccc <z_arm_fault+0x1a4>)
   26b9c:	f016 fb9f 	bl	3d2de <assert_post_action>
   26ba0:	2600      	movs	r6, #0
	*recoverable = false;
   26ba2:	2300      	movs	r3, #0
   26ba4:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   26ba8:	1eeb      	subs	r3, r5, #3
   26baa:	2b09      	cmp	r3, #9
   26bac:	d86c      	bhi.n	26c88 <z_arm_fault+0x160>
   26bae:	e8df f003 	tbb	[pc, r3]
   26bb2:	5a07      	.short	0x5a07
   26bb4:	6b6b3e5e 	.word	0x6b6b3e5e
   26bb8:	626b6b6b 	.word	0x626b6b6b
			ptr_esf = (z_arch_esf_t *)msp;
   26bbc:	464e      	mov	r6, r9
	if (!alternative_state_exc) {
   26bbe:	e7df      	b.n	26b80 <z_arm_fault+0x58>
	*recoverable = false;
   26bc0:	f04f 0800 	mov.w	r8, #0
   26bc4:	4b3e      	ldr	r3, [pc, #248]	; (26cc0 <z_arm_fault+0x198>)
   26bc6:	4d3f      	ldr	r5, [pc, #252]	; (26cc4 <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   26bc8:	4944      	ldr	r1, [pc, #272]	; (26cdc <z_arm_fault+0x1b4>)
   26bca:	1aed      	subs	r5, r5, r3
   26bcc:	08ed      	lsrs	r5, r5, #3
   26bce:	01ad      	lsls	r5, r5, #6
   26bd0:	f045 0501 	orr.w	r5, r5, #1
   26bd4:	4628      	mov	r0, r5
   26bd6:	f016 fb93 	bl	3d300 <log_string_sync>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   26bda:	4b38      	ldr	r3, [pc, #224]	; (26cbc <z_arm_fault+0x194>)
	*recoverable = false;
   26bdc:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   26be0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   26be2:	f014 0402 	ands.w	r4, r4, #2
   26be6:	d005      	beq.n	26bf4 <z_arm_fault+0xcc>
		PR_EXC("  Bus fault on vector table read");
   26be8:	4628      	mov	r0, r5
   26bea:	493d      	ldr	r1, [pc, #244]	; (26ce0 <z_arm_fault+0x1b8>)
	PR_FAULT_INFO(
   26bec:	f016 fb88 	bl	3d300 <log_string_sync>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   26bf0:	2400      	movs	r4, #0
}
   26bf2:	e01f      	b.n	26c34 <z_arm_fault+0x10c>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   26bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26bf6:	005b      	lsls	r3, r3, #1
   26bf8:	d51c      	bpl.n	26c34 <z_arm_fault+0x10c>
		PR_EXC("  Fault escalation (see below)");
   26bfa:	4628      	mov	r0, r5
   26bfc:	4939      	ldr	r1, [pc, #228]	; (26ce4 <z_arm_fault+0x1bc>)
   26bfe:	f016 fb7f 	bl	3d300 <log_string_sync>
		if (SCB_MMFSR != 0) {
   26c02:	4b39      	ldr	r3, [pc, #228]	; (26ce8 <z_arm_fault+0x1c0>)
   26c04:	781b      	ldrb	r3, [r3, #0]
   26c06:	b12b      	cbz	r3, 26c14 <z_arm_fault+0xec>
			reason = mem_manage_fault(esf, 1, recoverable);
   26c08:	2001      	movs	r0, #1
   26c0a:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   26c0e:	f7ff fe35 	bl	2687c <mem_manage_fault.isra.0>
   26c12:	e00e      	b.n	26c32 <z_arm_fault+0x10a>
		} else if (SCB_BFSR != 0) {
   26c14:	4b35      	ldr	r3, [pc, #212]	; (26cec <z_arm_fault+0x1c4>)
   26c16:	781b      	ldrb	r3, [r3, #0]
   26c18:	b12b      	cbz	r3, 26c26 <z_arm_fault+0xfe>
			reason = bus_fault(esf, 1, recoverable);
   26c1a:	2001      	movs	r0, #1
   26c1c:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   26c20:	f7ff feae 	bl	26980 <bus_fault.isra.0>
   26c24:	e005      	b.n	26c32 <z_arm_fault+0x10a>
		} else if (SCB_UFSR != 0) {
   26c26:	4b32      	ldr	r3, [pc, #200]	; (26cf0 <z_arm_fault+0x1c8>)
   26c28:	881b      	ldrh	r3, [r3, #0]
   26c2a:	b29b      	uxth	r3, r3
   26c2c:	b113      	cbz	r3, 26c34 <z_arm_fault+0x10c>
			reason = usage_fault(esf);
   26c2e:	f7ff ff13 	bl	26a58 <usage_fault.isra.0>
   26c32:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   26c34:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26c38:	b993      	cbnz	r3, 26c60 <z_arm_fault+0x138>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   26c3a:	2268      	movs	r2, #104	; 0x68
   26c3c:	4631      	mov	r1, r6
   26c3e:	a802      	add	r0, sp, #8
   26c40:	f01b f82d 	bl	41c9e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   26c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26c46:	b39f      	cbz	r7, 26cb0 <z_arm_fault+0x188>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   26c48:	f3c3 0208 	ubfx	r2, r3, #0, #9
   26c4c:	b922      	cbnz	r2, 26c58 <z_arm_fault+0x130>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   26c4e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   26c52:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   26c56:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   26c58:	4620      	mov	r0, r4
   26c5a:	a902      	add	r1, sp, #8
   26c5c:	f7ff fd12 	bl	26684 <z_arm_fatal_error>
}
   26c60:	b01d      	add	sp, #116	; 0x74
   26c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   26c66:	2000      	movs	r0, #0
   26c68:	f10d 0107 	add.w	r1, sp, #7
   26c6c:	e7cf      	b.n	26c0e <z_arm_fault+0xe6>
		reason = bus_fault(esf, 0, recoverable);
   26c6e:	2000      	movs	r0, #0
   26c70:	f10d 0107 	add.w	r1, sp, #7
   26c74:	e7d4      	b.n	26c20 <z_arm_fault+0xf8>
   26c76:	4813      	ldr	r0, [pc, #76]	; (26cc4 <z_arm_fault+0x19c>)
   26c78:	4b11      	ldr	r3, [pc, #68]	; (26cc0 <z_arm_fault+0x198>)
	PR_FAULT_INFO(
   26c7a:	491e      	ldr	r1, [pc, #120]	; (26cf4 <z_arm_fault+0x1cc>)
   26c7c:	1ac0      	subs	r0, r0, r3
   26c7e:	08c0      	lsrs	r0, r0, #3
   26c80:	0180      	lsls	r0, r0, #6
   26c82:	f040 0001 	orr.w	r0, r0, #1
   26c86:	e7b1      	b.n	26bec <z_arm_fault+0xc4>
   26c88:	4b0d      	ldr	r3, [pc, #52]	; (26cc0 <z_arm_fault+0x198>)
   26c8a:	480e      	ldr	r0, [pc, #56]	; (26cc4 <z_arm_fault+0x19c>)
	PR_FAULT_INFO("***** %s %d) *****",
   26c8c:	491a      	ldr	r1, [pc, #104]	; (26cf8 <z_arm_fault+0x1d0>)
   26c8e:	1ac0      	subs	r0, r0, r3
   26c90:	08c0      	lsrs	r0, r0, #3
   26c92:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   26c96:	ea4f 1080 	mov.w	r0, r0, lsl #6
   26c9a:	4a18      	ldr	r2, [pc, #96]	; (26cfc <z_arm_fault+0x1d4>)
   26c9c:	f1a5 0310 	sub.w	r3, r5, #16
   26ca0:	bf08      	it	eq
   26ca2:	460a      	moveq	r2, r1
   26ca4:	f040 0001 	orr.w	r0, r0, #1
   26ca8:	4915      	ldr	r1, [pc, #84]	; (26d00 <z_arm_fault+0x1d8>)
   26caa:	f016 fb29 	bl	3d300 <log_string_sync>
   26cae:	e79f      	b.n	26bf0 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   26cb0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   26cb4:	f023 0301 	bic.w	r3, r3, #1
   26cb8:	e7cd      	b.n	26c56 <z_arm_fault+0x12e>
   26cba:	bf00      	nop
   26cbc:	e000ed00 	.word	0xe000ed00
   26cc0:	0004339c 	.word	0x0004339c
   26cc4:	000434bc 	.word	0x000434bc
   26cc8:	0004659f 	.word	0x0004659f
   26ccc:	0004637e 	.word	0x0004637e
   26cd0:	000465c2 	.word	0x000465c2
   26cd4:	00044dbf 	.word	0x00044dbf
   26cd8:	000465d5 	.word	0x000465d5
   26cdc:	00046613 	.word	0x00046613
   26ce0:	0004662a 	.word	0x0004662a
   26ce4:	0004664b 	.word	0x0004664b
   26ce8:	e000ed28 	.word	0xe000ed28
   26cec:	e000ed29 	.word	0xe000ed29
   26cf0:	e000ed2a 	.word	0xe000ed2a
   26cf4:	0004666a 	.word	0x0004666a
   26cf8:	00046571 	.word	0x00046571
   26cfc:	00046586 	.word	0x00046586
   26d00:	000466a0 	.word	0x000466a0

00026d04 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   26d04:	4b04      	ldr	r3, [pc, #16]	; (26d18 <z_arm_fault_init+0x14>)
   26d06:	695a      	ldr	r2, [r3, #20]
   26d08:	f042 0210 	orr.w	r2, r2, #16
   26d0c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
   26d0e:	695a      	ldr	r2, [r3, #20]
   26d10:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   26d14:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   26d16:	4770      	bx	lr
   26d18:	e000ed00 	.word	0xe000ed00

00026d1c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   26d1c:	4b04      	ldr	r3, [pc, #16]	; (26d30 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   26d1e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   26d20:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
   26d22:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   26d24:	d003      	beq.n	26d2e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   26d26:	4903      	ldr	r1, [pc, #12]	; (26d34 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   26d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   26d2c:	600a      	str	r2, [r1, #0]

00026d2e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   26d2e:	4770      	bx	lr
	ldr r3, =_kernel
   26d30:	2001a07c 	.word	0x2001a07c
	ldr r1, =_SCS_ICSR
   26d34:	e000ed04 	.word	0xe000ed04

00026d38 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   26d38:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   26d3c:	4905      	ldr	r1, [pc, #20]	; (26d54 <sys_arch_reboot+0x1c>)
   26d3e:	4b06      	ldr	r3, [pc, #24]	; (26d58 <sys_arch_reboot+0x20>)
   26d40:	68ca      	ldr	r2, [r1, #12]
   26d42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   26d46:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   26d48:	60cb      	str	r3, [r1, #12]
   26d4a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   26d4e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   26d50:	e7fd      	b.n	26d4e <sys_arch_reboot+0x16>
   26d52:	bf00      	nop
   26d54:	e000ed00 	.word	0xe000ed00
   26d58:	05fa0004 	.word	0x05fa0004

00026d5c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
   26d5c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
   26d5e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   26d60:	4a05      	ldr	r2, [pc, #20]	; (26d78 <z_arm_clear_arm_mpu_config+0x1c>)
   26d62:	6811      	ldr	r1, [r2, #0]
	int num_regions =
   26d64:	f3c1 2107 	ubfx	r1, r1, #8, #8
	for (i = 0; i < num_regions; i++) {
   26d68:	428b      	cmp	r3, r1
   26d6a:	d100      	bne.n	26d6e <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   26d6c:	4770      	bx	lr
  mpu->RNR = rnr;
   26d6e:	6093      	str	r3, [r2, #8]
  mpu->RLAR = 0U;
   26d70:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   26d72:	3301      	adds	r3, #1
   26d74:	e7f8      	b.n	26d68 <z_arm_clear_arm_mpu_config+0xc>
   26d76:	bf00      	nop
   26d78:	e000ed90 	.word	0xe000ed90

00026d7c <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   26d7c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   26d7e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   26d80:	2400      	movs	r4, #0
   26d82:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   26d86:	f7ff ffe9 	bl	26d5c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   26d8a:	4a0e      	ldr	r2, [pc, #56]	; (26dc4 <z_arm_init_arch_hw_at_boot+0x48>)
	z_arm_clear_arm_mpu_config();
   26d8c:	4623      	mov	r3, r4
   26d8e:	4611      	mov	r1, r2
		NVIC->ICER[i] = 0xFFFFFFFF;
   26d90:	f04f 34ff 	mov.w	r4, #4294967295
   26d94:	f103 0020 	add.w	r0, r3, #32
   26d98:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   26d9a:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
   26d9c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   26da0:	d1f8      	bne.n	26d94 <z_arm_init_arch_hw_at_boot+0x18>
   26da2:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   26da4:	f04f 30ff 	mov.w	r0, #4294967295
   26da8:	f103 0260 	add.w	r2, r3, #96	; 0x60
   26dac:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   26dae:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
   26db0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   26db4:	d1f8      	bne.n	26da8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   26db6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   26db8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   26dbc:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   26dc0:	bd10      	pop	{r4, pc}
   26dc2:	bf00      	nop
   26dc4:	e000e100 	.word	0xe000e100

00026dc8 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   26dc8:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26dca:	2120      	movs	r1, #32
   26dcc:	4803      	ldr	r0, [pc, #12]	; (26ddc <z_arm_interrupt_init+0x14>)
   26dce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26dd0:	3301      	adds	r3, #1
   26dd2:	2b41      	cmp	r3, #65	; 0x41
   26dd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   26dd8:	d1f9      	bne.n	26dce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   26dda:	4770      	bx	lr
   26ddc:	e000e100 	.word	0xe000e100

00026de0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   26de0:	b508      	push	{r3, lr}
	if (_current == thread) {
   26de2:	4b0e      	ldr	r3, [pc, #56]	; (26e1c <z_impl_k_thread_abort+0x3c>)
   26de4:	689b      	ldr	r3, [r3, #8]
   26de6:	4283      	cmp	r3, r0
   26de8:	d107      	bne.n	26dfa <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26dea:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   26dee:	b193      	cbz	r3, 26e16 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   26df0:	4a0b      	ldr	r2, [pc, #44]	; (26e20 <z_impl_k_thread_abort+0x40>)
   26df2:	6853      	ldr	r3, [r2, #4]
   26df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   26df8:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
   26dfa:	f011 fd87 	bl	3890c <z_thread_single_abort>
	__asm__ volatile(
   26dfe:	f04f 0320 	mov.w	r3, #32
   26e02:	f3ef 8011 	mrs	r0, BASEPRI
   26e06:	f383 8811 	msr	BASEPRI, r3
   26e0a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
   26e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
   26e12:	f01a bda6 	b.w	41962 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
   26e16:	f012 fcb5 	bl	39784 <z_self_abort>
   26e1a:	bf00      	nop
   26e1c:	2001a07c 	.word	0x2001a07c
   26e20:	e000ed00 	.word	0xe000ed00

00026e24 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   26e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   26e26:	4c09      	ldr	r4, [pc, #36]	; (26e4c <z_arm_configure_static_mpu_regions+0x28>)
   26e28:	4a09      	ldr	r2, [pc, #36]	; (26e50 <z_arm_configure_static_mpu_regions+0x2c>)
   26e2a:	4623      	mov	r3, r4
   26e2c:	2101      	movs	r1, #1
   26e2e:	4809      	ldr	r0, [pc, #36]	; (26e54 <z_arm_configure_static_mpu_regions+0x30>)
   26e30:	f000 f96c 	bl	2710c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   26e34:	2300      	movs	r3, #0
   26e36:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   26e38:	4b07      	ldr	r3, [pc, #28]	; (26e58 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   26e3a:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   26e3c:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   26e3e:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
   26e40:	9301      	str	r3, [sp, #4]
   26e42:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   26e44:	f000 f988 	bl	27158 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   26e48:	b004      	add	sp, #16
   26e4a:	bd10      	pop	{r4, pc}
   26e4c:	20040000 	.word	0x20040000
   26e50:	20014500 	.word	0x20014500
   26e54:	000438cc 	.word	0x000438cc
   26e58:	20015c08 	.word	0x20015c08

00026e5c <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
   26e5c:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   26e5e:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   26e60:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   26e62:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   26e66:	f004 031f 	and.w	r3, r4, #31
   26e6a:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   26e6c:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   26e6e:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   26e70:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   26e74:	4904      	ldr	r1, [pc, #16]	; (26e88 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   26e76:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   26e7a:	f043 0301 	orr.w	r3, r3, #1
   26e7e:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   26e80:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   26e82:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   26e84:	bd10      	pop	{r4, pc}
   26e86:	bf00      	nop
   26e88:	e000ed90 	.word	0xe000ed90

00026e8c <region_allocate_and_init.part.0>:
#include "arm_mpu_v8_internal.h"
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
   26e8c:	4602      	mov	r2, r0
   26e8e:	b508      	push	{r3, lr}
   26e90:	4806      	ldr	r0, [pc, #24]	; (26eac <region_allocate_and_init.part.0+0x20>)
   26e92:	4b07      	ldr	r3, [pc, #28]	; (26eb0 <region_allocate_and_init.part.0+0x24>)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   26e94:	4907      	ldr	r1, [pc, #28]	; (26eb4 <region_allocate_and_init.part.0+0x28>)
   26e96:	1a1b      	subs	r3, r3, r0
   26e98:	08db      	lsrs	r3, r3, #3
   26e9a:	019b      	lsls	r3, r3, #6
   26e9c:	f043 0001 	orr.w	r0, r3, #1
   26ea0:	f016 fa2e 	bl	3d300 <log_string_sync>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   26ea4:	f06f 0015 	mvn.w	r0, #21
   26ea8:	bd08      	pop	{r3, pc}
   26eaa:	bf00      	nop
   26eac:	0004339c 	.word	0x0004339c
   26eb0:	0004346c 	.word	0x0004346c
   26eb4:	000466b7 	.word	0x000466b7

00026eb8 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   26eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ebc:	4688      	mov	r8, r1
   26ebe:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   26ec0:	4606      	mov	r6, r0
   26ec2:	2700      	movs	r7, #0
	MPU->RNR = index;
   26ec4:	4d58      	ldr	r5, [pc, #352]	; (27028 <mpu_configure_regions_and_partition.constprop.0+0x170>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
   26ec6:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   26ec8:	4547      	cmp	r7, r8
   26eca:	da31      	bge.n	26f30 <mpu_configure_regions_and_partition.constprop.0+0x78>
		if (regions[i].size == 0U) {
   26ecc:	f8d6 9004 	ldr.w	r9, [r6, #4]
   26ed0:	f1b9 0f00 	cmp.w	r9, #0
   26ed4:	d04e      	beq.n	26f74 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		&&
   26ed6:	f1b9 0f1f 	cmp.w	r9, #31
   26eda:	d91c      	bls.n	26f16 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		&&
   26edc:	f019 0f1f 	tst.w	r9, #31
   26ee0:	d119      	bne.n	26f16 <mpu_configure_regions_and_partition.constprop.0+0x5e>
		((part->start &
   26ee2:	f8d6 a000 	ldr.w	sl, [r6]
		&&
   26ee6:	f01a 0f1f 	tst.w	sl, #31
   26eea:	d114      	bne.n	26f16 <mpu_configure_regions_and_partition.constprop.0+0x5e>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   26eec:	4650      	mov	r0, sl
   26eee:	f017 f8ca 	bl	3e086 <arm_cmse_mpu_region_get>
   26ef2:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   26ef4:	eb09 000a 	add.w	r0, r9, sl
   26ef8:	3801      	subs	r0, #1
   26efa:	f017 f8c4 	bl	3e086 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   26efe:	4583      	cmp	fp, r0
   26f00:	d01a      	beq.n	26f38 <mpu_configure_regions_and_partition.constprop.0+0x80>
	return -EINVAL;
   26f02:	f06f 0b15 	mvn.w	fp, #21
   26f06:	4849      	ldr	r0, [pc, #292]	; (2702c <mpu_configure_regions_and_partition.constprop.0+0x174>)
   26f08:	4b49      	ldr	r3, [pc, #292]	; (27030 <mpu_configure_regions_and_partition.constprop.0+0x178>)
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   26f0a:	465a      	mov	r2, fp
   26f0c:	1ac0      	subs	r0, r0, r3
   26f0e:	08c0      	lsrs	r0, r0, #3
   26f10:	4948      	ldr	r1, [pc, #288]	; (27034 <mpu_configure_regions_and_partition.constprop.0+0x17c>)
   26f12:	0180      	lsls	r0, r0, #6
   26f14:	e006      	b.n	26f24 <mpu_configure_regions_and_partition.constprop.0+0x6c>
			LOG_ERR("Partition %u: sanity check failed.", i);
   26f16:	463a      	mov	r2, r7
   26f18:	4844      	ldr	r0, [pc, #272]	; (2702c <mpu_configure_regions_and_partition.constprop.0+0x174>)
   26f1a:	4b45      	ldr	r3, [pc, #276]	; (27030 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   26f1c:	4946      	ldr	r1, [pc, #280]	; (27038 <mpu_configure_regions_and_partition.constprop.0+0x180>)
   26f1e:	1ac0      	subs	r0, r0, r3
   26f20:	08c0      	lsrs	r0, r0, #3
   26f22:	0180      	lsls	r0, r0, #6
			LOG_ERR("Invalid underlying region index %u",
   26f24:	f040 0001 	orr.w	r0, r0, #1
   26f28:	f016 f9ea 	bl	3d300 <log_string_sync>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   26f2c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   26f30:	4620      	mov	r0, r4
   26f32:	b005      	add	sp, #20
   26f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   26f38:	f11b 0f16 	cmn.w	fp, #22
   26f3c:	d0e3      	beq.n	26f06 <mpu_configure_regions_and_partition.constprop.0+0x4e>
			(u_reg_index > (reg_index - 1))) {
   26f3e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   26f40:	455b      	cmp	r3, fp
   26f42:	dbe0      	blt.n	26f06 <mpu_configure_regions_and_partition.constprop.0+0x4e>
	MPU->RNR = index;
   26f44:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   26f48:	68e9      	ldr	r1, [r5, #12]
	MPU->RNR = index;
   26f4a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   26f4e:	692b      	ldr	r3, [r5, #16]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   26f50:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   26f54:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   26f58:	e9d6 3200 	ldrd	r3, r2, [r6]
   26f5c:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
   26f5e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
   26f60:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
   26f64:	d11b      	bne.n	26f9e <mpu_configure_regions_and_partition.constprop.0+0xe6>
   26f66:	45ca      	cmp	sl, r9
   26f68:	d107      	bne.n	26f7a <mpu_configure_regions_and_partition.constprop.0+0xc2>
			mpu_configure_region(u_reg_index, &regions[i]);
   26f6a:	4631      	mov	r1, r6
   26f6c:	fa5f f08b 	uxtb.w	r0, fp
   26f70:	f017 f86c 	bl	3e04c <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   26f74:	3701      	adds	r7, #1
   26f76:	360c      	adds	r6, #12
   26f78:	e7a6      	b.n	26ec8 <mpu_configure_regions_and_partition.constprop.0+0x10>
				mpu_configure_region(reg_index, &regions[i]);
   26f7a:	4631      	mov	r1, r6
	MPU->RNR = index;
   26f7c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   26f80:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   26f82:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   26f86:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   26f8a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   26f8c:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, &regions[i]);
   26f8e:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
   26f90:	f017 f85c 	bl	3e04c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   26f94:	f110 0f16 	cmn.w	r0, #22
   26f98:	d0c8      	beq.n	26f2c <mpu_configure_regions_and_partition.constprop.0+0x74>
			reg_index++;
   26f9a:	1c44      	adds	r4, r0, #1
   26f9c:	e7ea      	b.n	26f74 <mpu_configure_regions_and_partition.constprop.0+0xbc>
		} else if (reg_last == u_reg_last) {
   26f9e:	3b01      	subs	r3, #1
   26fa0:	45ca      	cmp	sl, r9
   26fa2:	b2e0      	uxtb	r0, r4
   26fa4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
   26fa8:	f8c5 b008 	str.w	fp, [r5, #8]
		} else if (reg_last == u_reg_last) {
   26fac:	d106      	bne.n	26fbc <mpu_configure_regions_and_partition.constprop.0+0x104>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26fae:	692a      	ldr	r2, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   26fb0:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26fb2:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   26fb6:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26fb8:	612b      	str	r3, [r5, #16]
			reg_index =
   26fba:	e7e9      	b.n	26f90 <mpu_configure_regions_and_partition.constprop.0+0xd8>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26fbc:	6929      	ldr	r1, [r5, #16]
   26fbe:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   26fc2:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   26fc4:	612b      	str	r3, [r5, #16]
				mpu_configure_region(reg_index, &regions[i]);
   26fc6:	4631      	mov	r1, r6
   26fc8:	f017 f840 	bl	3e04c <mpu_configure_region>
			if (reg_index == -EINVAL) {
   26fcc:	f110 0f16 	cmn.w	r0, #22
   26fd0:	d0ac      	beq.n	26f2c <mpu_configure_regions_and_partition.constprop.0+0x74>
	MPU->RNR = index;
   26fd2:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   26fd6:	68ea      	ldr	r2, [r5, #12]
   26fd8:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
   26fdc:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
   26fe0:	f362 0304 	bfi	r3, r2, #0, #5
   26fe4:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   26fe8:	692b      	ldr	r3, [r5, #16]
   26fea:	f89d 2008 	ldrb.w	r2, [sp, #8]
   26fee:	085b      	lsrs	r3, r3, #1
   26ff0:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i].start +
   26ff4:	e9d6 1300 	ldrd	r1, r3, [r6]
   26ff8:	440b      	add	r3, r1
   26ffa:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
   26ffc:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   27000:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
   27002:	4453      	add	r3, sl
   27004:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   27008:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i].start +
   2700a:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   2700e:	280f      	cmp	r0, #15
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   27010:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.attr.r_limit =
   27014:	9303      	str	r3, [sp, #12]
   27016:	d902      	bls.n	2701e <mpu_configure_regions_and_partition.constprop.0+0x166>
   27018:	f7ff ff38 	bl	26e8c <region_allocate_and_init.part.0>
   2701c:	e7ba      	b.n	26f94 <mpu_configure_regions_and_partition.constprop.0+0xdc>
	region_init(index, region_conf);
   2701e:	4669      	mov	r1, sp
   27020:	f7ff ff1c 	bl	26e5c <region_init>
			if (reg_index == -EINVAL) {
   27024:	e7b9      	b.n	26f9a <mpu_configure_regions_and_partition.constprop.0+0xe2>
   27026:	bf00      	nop
   27028:	e000ed90 	.word	0xe000ed90
   2702c:	0004346c 	.word	0x0004346c
   27030:	0004339c 	.word	0x0004339c
   27034:	00046700 	.word	0x00046700
   27038:	000466dd 	.word	0x000466dd

0002703c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   2703c:	2205      	movs	r2, #5
   2703e:	4b03      	ldr	r3, [pc, #12]	; (2704c <arm_core_mpu_enable+0x10>)
   27040:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   27042:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27046:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   2704a:	4770      	bx	lr
   2704c:	e000ed90 	.word	0xe000ed90

00027050 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   27050:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   27054:	2200      	movs	r2, #0
   27056:	4b01      	ldr	r3, [pc, #4]	; (2705c <arm_core_mpu_disable+0xc>)
   27058:	605a      	str	r2, [r3, #4]
}
   2705a:	4770      	bx	lr
   2705c:	e000ed90 	.word	0xe000ed90

00027060 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
   27060:	b570      	push	{r4, r5, r6, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   27062:	4e20      	ldr	r6, [pc, #128]	; (270e4 <arm_mpu_init+0x84>)
   27064:	6835      	ldr	r5, [r6, #0]
   27066:	2d10      	cmp	r5, #16
   27068:	d913      	bls.n	27092 <arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   2706a:	f240 133b 	movw	r3, #315	; 0x13b
   2706e:	4a1e      	ldr	r2, [pc, #120]	; (270e8 <arm_mpu_init+0x88>)
   27070:	491e      	ldr	r1, [pc, #120]	; (270ec <arm_mpu_init+0x8c>)
   27072:	481f      	ldr	r0, [pc, #124]	; (270f0 <arm_mpu_init+0x90>)
   27074:	f015 fe7f 	bl	3cd76 <printk>
   27078:	2210      	movs	r2, #16
   2707a:	4629      	mov	r1, r5
   2707c:	481d      	ldr	r0, [pc, #116]	; (270f4 <arm_mpu_init+0x94>)
   2707e:	f015 fe7a 	bl	3cd76 <printk>
   27082:	4819      	ldr	r0, [pc, #100]	; (270e8 <arm_mpu_init+0x88>)
   27084:	f240 113b 	movw	r1, #315	; 0x13b
   27088:	f016 f929 	bl	3d2de <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   2708c:	f04f 30ff 	mov.w	r0, #4294967295
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
}
   27090:	bd70      	pop	{r4, r5, r6, pc}
	arm_core_mpu_disable();
   27092:	f7ff ffdd 	bl	27050 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   27096:	2000      	movs	r0, #0
	MPU->MAIR0 =
   27098:	4c17      	ldr	r4, [pc, #92]	; (270f8 <arm_mpu_init+0x98>)
   2709a:	4a18      	ldr	r2, [pc, #96]	; (270fc <arm_mpu_init+0x9c>)
   2709c:	6322      	str	r2, [r4, #48]	; 0x30
   2709e:	4285      	cmp	r5, r0
   270a0:	d119      	bne.n	270d6 <arm_mpu_init+0x76>
	static_regions_num = mpu_config.num_regions;
   270a2:	4b17      	ldr	r3, [pc, #92]	; (27100 <arm_mpu_init+0xa0>)
   270a4:	701d      	strb	r5, [r3, #0]
	arm_core_mpu_enable();
   270a6:	f7ff ffc9 	bl	2703c <arm_core_mpu_enable>
	__ASSERT(
   270aa:	6823      	ldr	r3, [r4, #0]
   270ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
   270b0:	2b10      	cmp	r3, #16
   270b2:	d00e      	beq.n	270d2 <arm_mpu_init+0x72>
   270b4:	4913      	ldr	r1, [pc, #76]	; (27104 <arm_mpu_init+0xa4>)
   270b6:	f44f 73b3 	mov.w	r3, #358	; 0x166
   270ba:	4a0b      	ldr	r2, [pc, #44]	; (270e8 <arm_mpu_init+0x88>)
   270bc:	480c      	ldr	r0, [pc, #48]	; (270f0 <arm_mpu_init+0x90>)
   270be:	f015 fe5a 	bl	3cd76 <printk>
   270c2:	4811      	ldr	r0, [pc, #68]	; (27108 <arm_mpu_init+0xa8>)
   270c4:	f015 fe57 	bl	3cd76 <printk>
   270c8:	f44f 71b3 	mov.w	r1, #358	; 0x166
   270cc:	4806      	ldr	r0, [pc, #24]	; (270e8 <arm_mpu_init+0x88>)
   270ce:	f016 f906 	bl	3d2de <assert_post_action>
	return 0;
   270d2:	2000      	movs	r0, #0
   270d4:	e7dc      	b.n	27090 <arm_mpu_init+0x30>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   270d6:	6871      	ldr	r1, [r6, #4]
   270d8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   270dc:	f7ff febe 	bl	26e5c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   270e0:	3001      	adds	r0, #1
   270e2:	e7dc      	b.n	2709e <arm_mpu_init+0x3e>
   270e4:	000438d8 	.word	0x000438d8
   270e8:	00046723 	.word	0x00046723
   270ec:	0004bcc7 	.word	0x0004bcc7
   270f0:	00044dbf 	.word	0x00044dbf
   270f4:	00046763 	.word	0x00046763
   270f8:	e000ed90 	.word	0xe000ed90
   270fc:	0044ffaa 	.word	0x0044ffaa
   27100:	2001ebd9 	.word	0x2001ebd9
   27104:	00046797 	.word	0x00046797
   27108:	000467e8 	.word	0x000467e8

0002710c <arm_core_mpu_configure_static_mpu_regions>:
{
   2710c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   2710e:	4d0d      	ldr	r5, [pc, #52]	; (27144 <arm_core_mpu_configure_static_mpu_regions+0x38>)
   27110:	460c      	mov	r4, r1
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   27112:	782a      	ldrb	r2, [r5, #0]
   27114:	f7ff fed0 	bl	26eb8 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   27118:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   2711a:	3016      	adds	r0, #22
   2711c:	d111      	bne.n	27142 <arm_core_mpu_configure_static_mpu_regions+0x36>
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   2711e:	f44f 7382 	mov.w	r3, #260	; 0x104
   27122:	4a09      	ldr	r2, [pc, #36]	; (27148 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   27124:	4909      	ldr	r1, [pc, #36]	; (2714c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   27126:	480a      	ldr	r0, [pc, #40]	; (27150 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   27128:	f015 fe25 	bl	3cd76 <printk>
   2712c:	4621      	mov	r1, r4
   2712e:	4809      	ldr	r0, [pc, #36]	; (27154 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   27130:	f015 fe21 	bl	3cd76 <printk>
}
   27134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   27138:	f44f 7182 	mov.w	r1, #260	; 0x104
   2713c:	4802      	ldr	r0, [pc, #8]	; (27148 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   2713e:	f016 b8ce 	b.w	3d2de <assert_post_action>
}
   27142:	bd38      	pop	{r3, r4, r5, pc}
   27144:	2001ebd9 	.word	0x2001ebd9
   27148:	00046723 	.word	0x00046723
   2714c:	0004bcc7 	.word	0x0004bcc7
   27150:	00044dbf 	.word	0x00044dbf
   27154:	00046809 	.word	0x00046809

00027158 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   27158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2715c:	4e2f      	ldr	r6, [pc, #188]	; (2721c <arm_core_mpu_mark_areas_for_dynamic_regions+0xc4>)
   2715e:	4689      	mov	r9, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   27160:	4605      	mov	r5, r0
   27162:	f04f 0800 	mov.w	r8, #0
   27166:	46b3      	mov	fp, r6
	MPU->RNR = index;
   27168:	4f2d      	ldr	r7, [pc, #180]	; (27220 <arm_core_mpu_mark_areas_for_dynamic_regions+0xc8>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   2716a:	45c8      	cmp	r8, r9
   2716c:	db02      	blt.n	27174 <arm_core_mpu_mark_areas_for_dynamic_regions+0x1c>
}
   2716e:	b003      	add	sp, #12
   27170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (dyn_region_areas[i].size == 0U) {
   27174:	f8d5 a004 	ldr.w	sl, [r5, #4]
   27178:	f1ba 0f00 	cmp.w	sl, #0
   2717c:	d049      	beq.n	27212 <arm_core_mpu_mark_areas_for_dynamic_regions+0xba>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   2717e:	6829      	ldr	r1, [r5, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   27180:	4608      	mov	r0, r1
   27182:	9101      	str	r1, [sp, #4]
   27184:	f016 ff7f 	bl	3e086 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   27188:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
   2718a:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   2718c:	eb0a 0001 	add.w	r0, sl, r1
   27190:	3801      	subs	r0, #1
   27192:	f016 ff78 	bl	3e086 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   27196:	4284      	cmp	r4, r0
   27198:	f04f 0214 	mov.w	r2, #20
   2719c:	4b21      	ldr	r3, [pc, #132]	; (27224 <arm_core_mpu_mark_areas_for_dynamic_regions+0xcc>)
   2719e:	d018      	beq.n	271d2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x7a>
		dyn_reg_info[i].index =
   271a0:	f06f 0315 	mvn.w	r3, #21
   271a4:	fb02 f808 	mul.w	r8, r2, r8
   271a8:	f84b 3008 	str.w	r3, [fp, r8]
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   271ac:	f44f 738a 	mov.w	r3, #276	; 0x114
   271b0:	4a1d      	ldr	r2, [pc, #116]	; (27228 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
   271b2:	491e      	ldr	r1, [pc, #120]	; (2722c <arm_core_mpu_mark_areas_for_dynamic_regions+0xd4>)
   271b4:	481e      	ldr	r0, [pc, #120]	; (27230 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd8>)
   271b6:	f015 fdde 	bl	3cd76 <printk>
   271ba:	4649      	mov	r1, r9
   271bc:	481d      	ldr	r0, [pc, #116]	; (27234 <arm_core_mpu_mark_areas_for_dynamic_regions+0xdc>)
   271be:	f015 fdda 	bl	3cd76 <printk>
   271c2:	f44f 718a 	mov.w	r1, #276	; 0x114
   271c6:	4818      	ldr	r0, [pc, #96]	; (27228 <arm_core_mpu_mark_areas_for_dynamic_regions+0xd0>)
}
   271c8:	b003      	add	sp, #12
   271ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
   271ce:	f016 b886 	b.w	3d2de <assert_post_action>
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   271d2:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   271d6:	6034      	str	r4, [r6, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   271d8:	d0e8      	beq.n	271ac <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   271da:	7819      	ldrb	r1, [r3, #0]
   271dc:	42a1      	cmp	r1, r4
   271de:	dde5      	ble.n	271ac <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
	attr->rbar = MPU->RBAR &
   271e0:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   271e4:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   271e6:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   271e8:	68fc      	ldr	r4, [r7, #12]
   271ea:	f100 0108 	add.w	r1, r0, #8
   271ee:	7b00      	ldrb	r0, [r0, #12]
   271f0:	f364 0004 	bfi	r0, r4, #0, #5
   271f4:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   271f6:	6938      	ldr	r0, [r7, #16]
   271f8:	790c      	ldrb	r4, [r1, #4]
   271fa:	0840      	lsrs	r0, r0, #1
   271fc:	f360 1447 	bfi	r4, r0, #5, #3
   27200:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   27202:	68f9      	ldr	r1, [r7, #12]
   27204:	f021 011f 	bic.w	r1, r1, #31
   27208:	6071      	str	r1, [r6, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   2720a:	6939      	ldr	r1, [r7, #16]
   2720c:	f021 011f 	bic.w	r1, r1, #31
   27210:	6131      	str	r1, [r6, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   27212:	f108 0801 	add.w	r8, r8, #1
   27216:	3614      	adds	r6, #20
   27218:	350c      	adds	r5, #12
   2721a:	e7a6      	b.n	2716a <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   2721c:	20018df8 	.word	0x20018df8
   27220:	e000ed90 	.word	0xe000ed90
   27224:	2001ebd9 	.word	0x2001ebd9
   27228:	00046723 	.word	0x00046723
   2722c:	0004bcc7 	.word	0x0004bcc7
   27230:	00044dbf 	.word	0x00044dbf
   27234:	00046835 	.word	0x00046835

00027238 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   27238:	4b01      	ldr	r3, [pc, #4]	; (27240 <__stdout_hook_install+0x8>)
   2723a:	6018      	str	r0, [r3, #0]
}
   2723c:	4770      	bx	lr
   2723e:	bf00      	nop
   27240:	20015550 	.word	0x20015550

00027244 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   27244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27246:	4606      	mov	r6, r0
   27248:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   2724a:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   2724c:	4f06      	ldr	r7, [pc, #24]	; (27268 <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   2724e:	42ac      	cmp	r4, r5
   27250:	da08      	bge.n	27264 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   27252:	683b      	ldr	r3, [r7, #0]
   27254:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   27256:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   27258:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   2725a:	f104 0401 	add.w	r4, r4, #1
   2725e:	d001      	beq.n	27264 <z_impl_zephyr_read_stdin+0x20>
   27260:	280d      	cmp	r0, #13
   27262:	d1f4      	bne.n	2724e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   27264:	4620      	mov	r0, r4
   27266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27268:	2001554c 	.word	0x2001554c

0002726c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   2726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2726e:	460d      	mov	r5, r1
   27270:	4f09      	ldr	r7, [pc, #36]	; (27298 <z_impl_zephyr_write_stdout+0x2c>)
   27272:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   27274:	f1c0 0401 	rsb	r4, r0, #1
   27278:	19a3      	adds	r3, r4, r6
   2727a:	429d      	cmp	r5, r3
   2727c:	dc01      	bgt.n	27282 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   2727e:	4628      	mov	r0, r5
   27280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   27282:	7873      	ldrb	r3, [r6, #1]
   27284:	2b0a      	cmp	r3, #10
   27286:	d102      	bne.n	2728e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   27288:	200d      	movs	r0, #13
   2728a:	683b      	ldr	r3, [r7, #0]
   2728c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   2728e:	683b      	ldr	r3, [r7, #0]
   27290:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   27294:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   27296:	e7ef      	b.n	27278 <z_impl_zephyr_write_stdout+0xc>
   27298:	20015550 	.word	0x20015550

0002729c <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   2729c:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   2729e:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   272a0:	4801      	ldr	r0, [pc, #4]	; (272a8 <_exit+0xc>)
   272a2:	f7ff ffe3 	bl	2726c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   272a6:	e7fe      	b.n	272a6 <_exit+0xa>
   272a8:	00046864 	.word	0x00046864

000272ac <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   272ac:	b510      	push	{r4, lr}
   272ae:	4604      	mov	r4, r0
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
   272b0:	f04f 32ff 	mov.w	r2, #4294967295
   272b4:	f04f 33ff 	mov.w	r3, #4294967295
   272b8:	480a      	ldr	r0, [pc, #40]	; (272e4 <_sbrk+0x38>)
   272ba:	f015 fdcf 	bl	3ce5c <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   272be:	490a      	ldr	r1, [pc, #40]	; (272e8 <_sbrk+0x3c>)
   272c0:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   272c2:	18e0      	adds	r0, r4, r3
   272c4:	4c09      	ldr	r4, [pc, #36]	; (272ec <_sbrk+0x40>)
   272c6:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   272ca:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   272ce:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   272d0:	bf2e      	itee	cs
   272d2:	f04f 34ff 	movcs.w	r4, #4294967295
	ptr = ((char *)HEAP_BASE) + heap_sz;
   272d6:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   272d8:	6008      	strcc	r0, [r1, #0]
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
   272da:	4802      	ldr	r0, [pc, #8]	; (272e4 <_sbrk+0x38>)
   272dc:	f015 fdb9 	bl	3ce52 <sys_sem_give>

	return ret;
}
   272e0:	4620      	mov	r0, r4
   272e2:	bd10      	pop	{r4, pc}
   272e4:	20015b88 	.word	0x20015b88
   272e8:	20018e0c 	.word	0x20018e0c
   272ec:	200268f0 	.word	0x200268f0

000272f0 <__chk_fail>:
	return z_impl_zephyr_write_stdout(buf, nbytes);
   272f0:	211d      	movs	r1, #29
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   272f2:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   272f4:	4804      	ldr	r0, [pc, #16]	; (27308 <__chk_fail+0x18>)
   272f6:	f7ff ffb9 	bl	2726c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
   272fa:	4040      	eors	r0, r0
   272fc:	f380 8811 	msr	BASEPRI, r0
   27300:	f04f 0003 	mov.w	r0, #3
   27304:	df02      	svc	2
	CODE_UNREACHABLE;
   27306:	bf00      	nop
   27308:	0004686a 	.word	0x0004686a

0002730c <net_if_flag_is_set>:
 *
 * @return True if the value is set, false otherwise
 */
static inline bool net_if_flag_is_set(struct net_if *iface,
				      enum net_if_flag value)
{
   2730c:	b538      	push	{r3, r4, r5, lr}
   2730e:	460d      	mov	r5, r1
	NET_ASSERT(iface);
   27310:	4604      	mov	r4, r0
   27312:	b970      	cbnz	r0, 27332 <net_if_flag_is_set+0x26>
   27314:	490b      	ldr	r1, [pc, #44]	; (27344 <net_if_flag_is_set+0x38>)
   27316:	f240 230f 	movw	r3, #527	; 0x20f
   2731a:	4a0b      	ldr	r2, [pc, #44]	; (27348 <net_if_flag_is_set+0x3c>)
   2731c:	480b      	ldr	r0, [pc, #44]	; (2734c <net_if_flag_is_set+0x40>)
   2731e:	f015 fd2a 	bl	3cd76 <printk>
   27322:	480b      	ldr	r0, [pc, #44]	; (27350 <net_if_flag_is_set+0x44>)
   27324:	f015 fd27 	bl	3cd76 <printk>
   27328:	f240 210f 	movw	r1, #527	; 0x20f
   2732c:	4806      	ldr	r0, [pc, #24]	; (27348 <net_if_flag_is_set+0x3c>)
   2732e:	f015 ffd6 	bl	3d2de <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27332:	6823      	ldr	r3, [r4, #0]
   27334:	330c      	adds	r3, #12
   27336:	e8d3 0faf 	lda	r0, [r3]
 */
static inline bool atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2733a:	4128      	asrs	r0, r5

	return atomic_test_bit(iface->if_dev->flags, value);
}
   2733c:	f000 0001 	and.w	r0, r0, #1
   27340:	bd38      	pop	{r3, r4, r5, pc}
   27342:	bf00      	nop
   27344:	000468c7 	.word	0x000468c7
   27348:	0004689f 	.word	0x0004689f
   2734c:	00044dbf 	.word	0x00044dbf
   27350:	00045c27 	.word	0x00045c27

00027354 <net_if_flag_set.constprop.0>:
static inline void net_if_flag_set(struct net_if *iface,
   27354:	b510      	push	{r4, lr}
	NET_ASSERT(iface);
   27356:	4604      	mov	r4, r0
   27358:	b970      	cbnz	r0, 27378 <net_if_flag_set.constprop.0+0x24>
   2735a:	490d      	ldr	r1, [pc, #52]	; (27390 <net_if_flag_set.constprop.0+0x3c>)
   2735c:	f240 13e1 	movw	r3, #481	; 0x1e1
   27360:	4a0c      	ldr	r2, [pc, #48]	; (27394 <net_if_flag_set.constprop.0+0x40>)
   27362:	480d      	ldr	r0, [pc, #52]	; (27398 <net_if_flag_set.constprop.0+0x44>)
   27364:	f015 fd07 	bl	3cd76 <printk>
   27368:	480c      	ldr	r0, [pc, #48]	; (2739c <net_if_flag_set.constprop.0+0x48>)
   2736a:	f015 fd04 	bl	3cd76 <printk>
   2736e:	f240 11e1 	movw	r1, #481	; 0x1e1
   27372:	4808      	ldr	r0, [pc, #32]	; (27394 <net_if_flag_set.constprop.0+0x40>)
   27374:	f015 ffb3 	bl	3d2de <assert_post_action>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27378:	6823      	ldr	r3, [r4, #0]
   2737a:	330c      	adds	r3, #12
   2737c:	e8d3 2fef 	ldaex	r2, [r3]
   27380:	f042 0201 	orr.w	r2, r2, #1
   27384:	e8c3 2fe1 	stlex	r1, r2, [r3]
   27388:	2900      	cmp	r1, #0
   2738a:	d1f7      	bne.n	2737c <net_if_flag_set.constprop.0+0x28>
}
   2738c:	bd10      	pop	{r4, pc}
   2738e:	bf00      	nop
   27390:	000468c7 	.word	0x000468c7
   27394:	0004689f 	.word	0x0004689f
   27398:	00044dbf 	.word	0x00044dbf
   2739c:	00045c27 	.word	0x00045c27

000273a0 <net_if_up>:
		cb(iface, user_data);
	}
}

int net_if_up(struct net_if *iface)
{
   273a0:	b538      	push	{r3, r4, r5, lr}
	int status;

	NET_DBG("iface %p", iface);

	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   273a2:	2100      	movs	r1, #0
{
   273a4:	4605      	mov	r5, r0
	if (net_if_flag_is_set(iface, NET_IF_UP)) {
   273a6:	f7ff ffb1 	bl	2730c <net_if_flag_is_set>
   273aa:	b928      	cbnz	r0, 273b8 <net_if_up+0x18>
 * @return True if socket offloading is active, false otherwise.
 */
static inline bool net_if_is_socket_offloaded(struct net_if *iface)
{
#if defined(CONFIG_NET_SOCKETS_OFFLOAD)
	return iface->if_dev->offloaded;
   273ac:	682b      	ldr	r3, [r5, #0]

	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
	     net_if_is_ip_offloaded(iface)) ||
	    (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD) &&
	     net_if_is_socket_offloaded(iface))) {
		net_if_flag_set(iface, NET_IF_UP);
   273ae:	4628      	mov	r0, r5
	if ((IS_ENABLED(CONFIG_NET_OFFLOAD) &&
   273b0:	7e9b      	ldrb	r3, [r3, #26]
   273b2:	b11b      	cbz	r3, 273bc <net_if_up+0x1c>
		net_if_flag_set(iface, NET_IF_UP);
   273b4:	f7ff ffce 	bl	27354 <net_if_flag_set.constprop.0>
		return 0;
   273b8:	2000      	movs	r0, #0
   273ba:	e023      	b.n	27404 <net_if_up+0x64>
		goto exit;
	}

	/* If the L2 does not support enable just set the flag */
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   273bc:	f016 febd 	bl	3e13a <net_if_l2>
   273c0:	b9c0      	cbnz	r0, 273f4 <net_if_up+0x54>

done:
	/* In many places it's assumed that link address was set with
	 * net_if_set_link_addr(). Better check that now.
	 */
	NET_ASSERT(net_if_get_link_addr(iface)->addr != NULL);
   273c2:	682b      	ldr	r3, [r5, #0]
   273c4:	691b      	ldr	r3, [r3, #16]
   273c6:	b973      	cbnz	r3, 273e6 <net_if_up+0x46>
   273c8:	490f      	ldr	r1, [pc, #60]	; (27408 <net_if_up+0x68>)
   273ca:	f640 538c 	movw	r3, #3468	; 0xd8c
   273ce:	4a0f      	ldr	r2, [pc, #60]	; (2740c <net_if_up+0x6c>)
   273d0:	480f      	ldr	r0, [pc, #60]	; (27410 <net_if_up+0x70>)
   273d2:	f015 fcd0 	bl	3cd76 <printk>
   273d6:	480f      	ldr	r0, [pc, #60]	; (27414 <net_if_up+0x74>)
   273d8:	f015 fccd 	bl	3cd76 <printk>
   273dc:	f640 518c 	movw	r1, #3468	; 0xd8c
   273e0:	480a      	ldr	r0, [pc, #40]	; (2740c <net_if_up+0x6c>)
   273e2:	f015 ff7c 	bl	3d2de <assert_post_action>

	net_if_flag_set(iface, NET_IF_UP);
   273e6:	4628      	mov	r0, r5
   273e8:	f7ff ffb4 	bl	27354 <net_if_flag_set.constprop.0>

	/* If the interface is only having point-to-point traffic then we do
	 * not need to run DAD etc for it.
	 */
	if (!(l2_flags_get(iface) & NET_L2_POINT_TO_POINT)) {
   273ec:	4628      	mov	r0, r5
   273ee:	f016 fea9 	bl	3e144 <l2_flags_get>
   273f2:	e7e1      	b.n	273b8 <net_if_up+0x18>
	if (!net_if_l2(iface) || !net_if_l2(iface)->enable) {
   273f4:	6883      	ldr	r3, [r0, #8]
   273f6:	2b00      	cmp	r3, #0
   273f8:	d0e3      	beq.n	273c2 <net_if_up+0x22>
	status = net_if_l2(iface)->enable(iface, true);
   273fa:	2101      	movs	r1, #1
   273fc:	4628      	mov	r0, r5
   273fe:	4798      	blx	r3
	if (status < 0) {
   27400:	2800      	cmp	r0, #0
   27402:	dade      	bge.n	273c2 <net_if_up+0x22>

exit:
	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   27404:	bd38      	pop	{r3, r4, r5, pc}
   27406:	bf00      	nop
   27408:	00046911 	.word	0x00046911
   2740c:	000468cd 	.word	0x000468cd
   27410:	00044dbf 	.word	0x00044dbf
   27414:	00045c27 	.word	0x00045c27

00027418 <net_if_init>:
	k_fifo_put(&tx_ts_queue, pkt);
}
#endif /* CONFIG_NET_PKT_TIMESTAMP_THREAD */

void net_if_init(void)
{
   27418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	NET_DBG("");

	net_tc_tx_init();

	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   2741c:	4e12      	ldr	r6, [pc, #72]	; (27468 <net_if_init+0x50>)
   2741e:	4c13      	ldr	r4, [pc, #76]	; (2746c <net_if_init+0x54>)
   27420:	46b0      	mov	r8, r6
   27422:	4f13      	ldr	r7, [pc, #76]	; (27470 <net_if_init+0x58>)
   27424:	42b4      	cmp	r4, r6
   27426:	4625      	mov	r5, r4
   27428:	d90e      	bls.n	27448 <net_if_init+0x30>
   2742a:	4912      	ldr	r1, [pc, #72]	; (27474 <net_if_init+0x5c>)
   2742c:	f640 636b 	movw	r3, #3691	; 0xe6b
   27430:	463a      	mov	r2, r7
   27432:	4811      	ldr	r0, [pc, #68]	; (27478 <net_if_init+0x60>)
   27434:	f015 fc9f 	bl	3cd76 <printk>
   27438:	4810      	ldr	r0, [pc, #64]	; (2747c <net_if_init+0x64>)
   2743a:	f015 fc9c 	bl	3cd76 <printk>
   2743e:	f640 616b 	movw	r1, #3691	; 0xe6b
   27442:	4638      	mov	r0, r7
   27444:	f015 ff4b 	bl	3d2de <assert_post_action>
   27448:	4544      	cmp	r4, r8
   2744a:	d301      	bcc.n	27450 <net_if_init+0x38>
		NET_WARN("You have configured only %d VLAN interfaces"
			 " but you have %d network interfaces.",
			 CONFIG_NET_VLAN_COUNT, if_count);
	}
#endif
}
   2744c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return iface->if_dev->dev;
   27450:	682b      	ldr	r3, [r5, #0]
   27452:	3404      	adds	r4, #4
	const struct net_if_api *api = net_if_get_device(iface)->api;
   27454:	681b      	ldr	r3, [r3, #0]
   27456:	689b      	ldr	r3, [r3, #8]
	if (!api || !api->init) {
   27458:	2b00      	cmp	r3, #0
   2745a:	d0e3      	beq.n	27424 <net_if_init+0xc>
   2745c:	681b      	ldr	r3, [r3, #0]
   2745e:	2b00      	cmp	r3, #0
   27460:	d0e0      	beq.n	27424 <net_if_init+0xc>
	api->init(iface);
   27462:	4628      	mov	r0, r5
   27464:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27466:	e7dd      	b.n	27424 <net_if_init+0xc>
   27468:	20015bec 	.word	0x20015bec
   2746c:	20015be8 	.word	0x20015be8
   27470:	000468cd 	.word	0x000468cd
   27474:	000468f7 	.word	0x000468f7
   27478:	00044dbf 	.word	0x00044dbf
   2747c:	00045ca5 	.word	0x00045ca5

00027480 <net_if_post_init>:

void net_if_post_init(void)
{
   27480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   27482:	4d11      	ldr	r5, [pc, #68]	; (274c8 <net_if_post_init+0x48>)
   27484:	4c11      	ldr	r4, [pc, #68]	; (274cc <net_if_post_init+0x4c>)
   27486:	462f      	mov	r7, r5
   27488:	4e11      	ldr	r6, [pc, #68]	; (274d0 <net_if_post_init+0x50>)
   2748a:	42ac      	cmp	r4, r5
   2748c:	d90e      	bls.n	274ac <net_if_post_init+0x2c>
   2748e:	4911      	ldr	r1, [pc, #68]	; (274d4 <net_if_post_init+0x54>)
   27490:	f640 639a 	movw	r3, #3738	; 0xe9a
   27494:	4632      	mov	r2, r6
   27496:	4810      	ldr	r0, [pc, #64]	; (274d8 <net_if_post_init+0x58>)
   27498:	f015 fc6d 	bl	3cd76 <printk>
   2749c:	480f      	ldr	r0, [pc, #60]	; (274dc <net_if_post_init+0x5c>)
   2749e:	f015 fc6a 	bl	3cd76 <printk>
   274a2:	f640 619a 	movw	r1, #3738	; 0xe9a
   274a6:	4630      	mov	r0, r6
   274a8:	f015 ff19 	bl	3d2de <assert_post_action>
   274ac:	42bc      	cmp	r4, r7
   274ae:	d300      	bcc.n	274b2 <net_if_post_init+0x32>
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
			net_if_up(iface);
		}
	}
}
   274b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!net_if_flag_is_set(iface, NET_IF_NO_AUTO_START)) {
   274b2:	2103      	movs	r1, #3
   274b4:	4620      	mov	r0, r4
   274b6:	f7ff ff29 	bl	2730c <net_if_flag_is_set>
   274ba:	b910      	cbnz	r0, 274c2 <net_if_post_init+0x42>
			net_if_up(iface);
   274bc:	4620      	mov	r0, r4
   274be:	f7ff ff6f 	bl	273a0 <net_if_up>
	Z_STRUCT_SECTION_FOREACH(net_if, iface) {
   274c2:	3404      	adds	r4, #4
   274c4:	e7e1      	b.n	2748a <net_if_post_init+0xa>
   274c6:	bf00      	nop
   274c8:	20015bec 	.word	0x20015bec
   274cc:	20015be8 	.word	0x20015be8
   274d0:	000468cd 	.word	0x000468cd
   274d4:	000468f7 	.word	0x000468f7
   274d8:	00044dbf 	.word	0x00044dbf
   274dc:	00045ca5 	.word	0x00045ca5

000274e0 <z_impl_net_addr_ntop>:
	struct in6_addr *addr6;
	uint16_t *w;
	uint8_t i, bl, bh, longest = 1U;
	int8_t pos = -1;
	char delim = ':';
	unsigned char zeros[8] = { 0 };
   274e0:	2300      	movs	r3, #0
{
   274e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *ptr = dst;
	int len = -1;
	uint16_t value;
	bool needcolon = false;

	if (family == AF_INET6) {
   274e6:	2802      	cmp	r0, #2
{
   274e8:	b089      	sub	sp, #36	; 0x24
   274ea:	4607      	mov	r7, r0
   274ec:	4616      	mov	r6, r2
	unsigned char zeros[8] = { 0 };
   274ee:	e9cd 3306 	strd	r3, r3, [sp, #24]
{
   274f2:	9104      	str	r1, [sp, #16]
	if (family == AF_INET6) {
   274f4:	d13e      	bne.n	27574 <z_impl_net_addr_ntop+0x94>
		addr6 = (struct in6_addr *)src;
		w = (uint16_t *)addr6->s6_addr16;
   274f6:	a806      	add	r0, sp, #24
   274f8:	9105      	str	r1, [sp, #20]
   274fa:	4601      	mov	r1, r0
{
   274fc:	461a      	mov	r2, r3
   274fe:	e006      	b.n	2750e <z_impl_net_addr_ntop+0x2e>
			for (j = i; j < 8; j++) {
				if (UNALIGNED_GET(&w[j]) != 0) {
					break;
				}

				zeros[i]++;
   27500:	780c      	ldrb	r4, [r1, #0]
   27502:	3201      	adds	r2, #1
   27504:	3401      	adds	r4, #1
   27506:	700c      	strb	r4, [r1, #0]
			for (j = i; j < 8; j++) {
   27508:	b2d4      	uxtb	r4, r2
   2750a:	2c07      	cmp	r4, #7
   2750c:	d804      	bhi.n	27518 <z_impl_net_addr_ntop+0x38>
				if (UNALIGNED_GET(&w[j]) != 0) {
   2750e:	9c04      	ldr	r4, [sp, #16]
   27510:	f834 4012 	ldrh.w	r4, [r4, r2, lsl #1]
   27514:	2c00      	cmp	r4, #0
   27516:	d0f3      	beq.n	27500 <z_impl_net_addr_ntop+0x20>
		for (i = 0U; i < 8; i++) {
   27518:	3301      	adds	r3, #1
   2751a:	2b08      	cmp	r3, #8
   2751c:	f101 0101 	add.w	r1, r1, #1
   27520:	d1ec      	bne.n	274fc <z_impl_net_addr_ntop+0x1c>
	int8_t pos = -1;
   27522:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   27526:	f04f 0901 	mov.w	r9, #1
			}
		}

		for (i = 0U; i < 8; i++) {
   2752a:	2300      	movs	r3, #0
			if (zeros[i] > longest) {
   2752c:	f810 2b01 	ldrb.w	r2, [r0], #1
   27530:	454a      	cmp	r2, r9
				longest = zeros[i];
				pos = i;
   27532:	bf88      	it	hi
   27534:	fa4f f883 	sxtbhi.w	r8, r3
		for (i = 0U; i < 8; i++) {
   27538:	f103 0301 	add.w	r3, r3, #1
   2753c:	b2db      	uxtb	r3, r3
				pos = i;
   2753e:	bf88      	it	hi
   27540:	4691      	movhi	r9, r2
		for (i = 0U; i < 8; i++) {
   27542:	2b08      	cmp	r3, #8
   27544:	d1f2      	bne.n	2752c <z_impl_net_addr_ntop+0x4c>
		len = 8;
   27546:	469b      	mov	fp, r3
   27548:	f1b9 0f01 	cmp.w	r9, #1
   2754c:	f04f 033a 	mov.w	r3, #58	; 0x3a
   27550:	bf08      	it	eq
   27552:	f04f 38ff 	moveq.w	r8, #4294967295
   27556:	9303      	str	r3, [sp, #12]
	bool needcolon = false;
   27558:	2100      	movs	r1, #0
		delim = '.';
	} else {
		return NULL;
	}

	for (i = 0U; i < len; i++) {
   2755a:	4634      	mov	r4, r6
   2755c:	460d      	mov	r5, r1
   2755e:	455d      	cmp	r5, fp
   27560:	db17      	blt.n	27592 <z_impl_net_addr_ntop+0xb2>
		}

		needcolon = true;
	}

	if (!(ptr - dst)) {
   27562:	42b4      	cmp	r4, r6
   27564:	d008      	beq.n	27578 <z_impl_net_addr_ntop+0x98>
		return NULL;
	}

	if (family == AF_INET) {
   27566:	2300      	movs	r3, #0
   27568:	2f01      	cmp	r7, #1
		*(ptr - 1) = '\0';
   2756a:	bf0c      	ite	eq
   2756c:	f804 3c01 	strbeq.w	r3, [r4, #-1]
	} else {
		*ptr = '\0';
   27570:	7023      	strbne	r3, [r4, #0]
   27572:	e002      	b.n	2757a <z_impl_net_addr_ntop+0x9a>
	} else if (family == AF_INET) {
   27574:	2801      	cmp	r0, #1
   27576:	d004      	beq.n	27582 <z_impl_net_addr_ntop+0xa2>
		return NULL;
   27578:	2600      	movs	r6, #0
	}

	return dst;
}
   2757a:	4630      	mov	r0, r6
   2757c:	b009      	add	sp, #36	; 0x24
   2757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		delim = '.';
   27582:	232e      	movs	r3, #46	; 0x2e
		len = 4;
   27584:	f04f 0b04 	mov.w	fp, #4
	int8_t pos = -1;
   27588:	f04f 38ff 	mov.w	r8, #4294967295
	uint8_t i, bl, bh, longest = 1U;
   2758c:	4681      	mov	r9, r0
		delim = '.';
   2758e:	9303      	str	r3, [sp, #12]
   27590:	e7e2      	b.n	27558 <z_impl_net_addr_ntop+0x78>
		if (len == 4) {
   27592:	f1bb 0f04 	cmp.w	fp, #4
   27596:	d13b      	bne.n	27610 <z_impl_net_addr_ntop+0x130>
			value = (uint32_t)addr->s4_addr[i];
   27598:	9b04      	ldr	r3, [sp, #16]
   2759a:	5d5a      	ldrb	r2, [r3, r5]
			if (value == 0U) {
   2759c:	b94a      	cbnz	r2, 275b2 <z_impl_net_addr_ntop+0xd2>
				*ptr++ = '0';
   2759e:	2330      	movs	r3, #48	; 0x30
   275a0:	4620      	mov	r0, r4
   275a2:	f800 3b02 	strb.w	r3, [r0], #2
				*ptr++ = delim;
   275a6:	9b03      	ldr	r3, [sp, #12]
   275a8:	7063      	strb	r3, [r4, #1]
	for (i = 0U; i < len; i++) {
   275aa:	3501      	adds	r5, #1
   275ac:	4604      	mov	r4, r0
   275ae:	b2ed      	uxtb	r5, r5
   275b0:	e7d5      	b.n	2755e <z_impl_net_addr_ntop+0x7e>
			l = net_value_to_udec(ptr, value, 0);
   275b2:	f04f 0e09 	mov.w	lr, #9
   275b6:	f04f 0a00 	mov.w	sl, #0
   275ba:	e9cd 2401 	strd	r2, r4, [sp, #4]
   275be:	483a      	ldr	r0, [pc, #232]	; (276a8 <z_impl_net_addr_ntop+0x1c8>)
		value = value % divisor;
   275c0:	f8dd c004 	ldr.w	ip, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   275c4:	45f2      	cmp	sl, lr
		value = value % divisor;
   275c6:	fbbc f2f0 	udiv	r2, ip, r0
   275ca:	fb00 c212 	mls	r2, r0, r2, ip
   275ce:	9201      	str	r2, [sp, #4]
		if ((precision > i) || (temp != 0)) {
   275d0:	dc01      	bgt.n	275d6 <z_impl_net_addr_ntop+0xf6>
   275d2:	4584      	cmp	ip, r0
   275d4:	d308      	bcc.n	275e8 <z_impl_net_addr_ntop+0x108>
		temp = value / divisor;
   275d6:	fbbc fcf0 	udiv	ip, ip, r0
			*buf++ = (char) (temp + '0');
   275da:	46f2      	mov	sl, lr
   275dc:	9b02      	ldr	r3, [sp, #8]
   275de:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   275e2:	f803 cb01 	strb.w	ip, [r3], #1
   275e6:	9302      	str	r3, [sp, #8]
	for (i = 9; i >= 0; i--, divisor /= 10U) {
   275e8:	220a      	movs	r2, #10
   275ea:	f10e 3eff 	add.w	lr, lr, #4294967295
   275ee:	f1be 3fff 	cmp.w	lr, #4294967295
   275f2:	fbb0 f0f2 	udiv	r0, r0, r2
   275f6:	d1e3      	bne.n	275c0 <z_impl_net_addr_ntop+0xe0>
	*buf = 0;
   275f8:	f04f 0200 	mov.w	r2, #0
   275fc:	9b02      	ldr	r3, [sp, #8]
   275fe:	701a      	strb	r2, [r3, #0]
	return buf - start;
   27600:	1b1b      	subs	r3, r3, r4
			ptr += l;
   27602:	b2da      	uxtb	r2, r3
   27604:	fa54 f383 	uxtab	r3, r4, r3
			*ptr++ = delim;
   27608:	1c58      	adds	r0, r3, #1
   2760a:	9b03      	ldr	r3, [sp, #12]
   2760c:	54a3      	strb	r3, [r4, r2]
			continue;
   2760e:	e7cc      	b.n	275aa <z_impl_net_addr_ntop+0xca>
		if (i == pos) {
   27610:	45a8      	cmp	r8, r5
   27612:	d110      	bne.n	27636 <z_impl_net_addr_ntop+0x156>
			if (needcolon || i == 0U) {
   27614:	b911      	cbnz	r1, 2761c <z_impl_net_addr_ntop+0x13c>
   27616:	f1b8 0f00 	cmp.w	r8, #0
   2761a:	d102      	bne.n	27622 <z_impl_net_addr_ntop+0x142>
				*ptr++ = ':';
   2761c:	233a      	movs	r3, #58	; 0x3a
   2761e:	f804 3b01 	strb.w	r3, [r4], #1
			*ptr++ = ':';
   27622:	233a      	movs	r3, #58	; 0x3a
   27624:	4620      	mov	r0, r4
   27626:	f800 3b01 	strb.w	r3, [r0], #1
			i += longest - 1U;
   2762a:	f109 33ff 	add.w	r3, r9, #4294967295
   2762e:	441d      	add	r5, r3
			needcolon = false;
   27630:	2100      	movs	r1, #0
			i += longest - 1U;
   27632:	b2ed      	uxtb	r5, r5
			continue;
   27634:	e7b9      	b.n	275aa <z_impl_net_addr_ntop+0xca>
		if (needcolon) {
   27636:	b111      	cbz	r1, 2763e <z_impl_net_addr_ntop+0x15e>
			*ptr++ = ':';
   27638:	233a      	movs	r3, #58	; 0x3a
   2763a:	f804 3b01 	strb.w	r3, [r4], #1
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   2763e:	9b05      	ldr	r3, [sp, #20]
   27640:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   27644:	0219      	lsls	r1, r3, #8
   27646:	ea41 2113 	orr.w	r1, r1, r3, lsr #8
		if (bh) {
   2764a:	f411 4f7f 	tst.w	r1, #65280	; 0xff00
		value = (uint32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   2764e:	b20a      	sxth	r2, r1
		bh = value >> 8;
   27650:	f3c1 2307 	ubfx	r3, r1, #8, #8
		bl = value & 0xff;
   27654:	fa5f fa81 	uxtb.w	sl, r1
		if (bh) {
   27658:	d016      	beq.n	27688 <z_impl_net_addr_ntop+0x1a8>
			if (bh > 0x0f) {
   2765a:	2b0f      	cmp	r3, #15
		bh = value >> 8;
   2765c:	b2d9      	uxtb	r1, r3
			if (bh > 0x0f) {
   2765e:	d90b      	bls.n	27678 <z_impl_net_addr_ntop+0x198>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   27660:	2300      	movs	r3, #0
   27662:	2261      	movs	r2, #97	; 0x61
   27664:	4620      	mov	r0, r4
   27666:	f016 fd7a 	bl	3e15e <net_byte_to_hex>
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   2766a:	2301      	movs	r3, #1
   2766c:	2261      	movs	r2, #97	; 0x61
   2766e:	4651      	mov	r1, sl
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   27670:	f016 fd75 	bl	3e15e <net_byte_to_hex>
		needcolon = true;
   27674:	2101      	movs	r1, #1
   27676:	e798      	b.n	275aa <z_impl_net_addr_ntop+0xca>
				if (bh < 10) {
   27678:	b25b      	sxtb	r3, r3
   2767a:	2909      	cmp	r1, #9
					*ptr++ = (char)(bh + '0');
   2767c:	bf94      	ite	ls
   2767e:	3330      	addls	r3, #48	; 0x30
					*ptr++ = (char) (bh - 10 + 'a');
   27680:	3357      	addhi	r3, #87	; 0x57
   27682:	1c60      	adds	r0, r4, #1
   27684:	7023      	strb	r3, [r4, #0]
   27686:	e7f0      	b.n	2766a <z_impl_net_addr_ntop+0x18a>
		} else if (bl > 0x0f) {
   27688:	f1ba 0f0f 	cmp.w	sl, #15
   2768c:	d903      	bls.n	27696 <z_impl_net_addr_ntop+0x1b6>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   2768e:	2261      	movs	r2, #97	; 0x61
   27690:	4651      	mov	r1, sl
   27692:	4620      	mov	r0, r4
   27694:	e7ec      	b.n	27670 <z_impl_net_addr_ntop+0x190>
			if (bl < 10) {
   27696:	b253      	sxtb	r3, r2
   27698:	f1ba 0f09 	cmp.w	sl, #9
				*ptr++ = (char)(bl + '0');
   2769c:	bf94      	ite	ls
   2769e:	3330      	addls	r3, #48	; 0x30
				*ptr++ = (char) (bl - 10 + 'a');
   276a0:	3357      	addhi	r3, #87	; 0x57
   276a2:	1c60      	adds	r0, r4, #1
   276a4:	7023      	strb	r3, [r4, #0]
   276a6:	e7e5      	b.n	27674 <z_impl_net_addr_ntop+0x194>
   276a8:	3b9aca00 	.word	0x3b9aca00

000276ac <connect_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int connect_request_encode(const struct mqtt_client *client,
			   struct buf_ctx *buf)
{
   276ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	} else {
		mqtt_proto_desc = &mqtt_3_1_0_proto_desc;
	}

	/* Reserve space for fixed header. */
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   276b0:	680d      	ldr	r5, [r1, #0]
	uint8_t connect_flags = client->clean_session << 1;
   276b2:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	start = buf->cur;

	MQTT_TRC("Encoding Protocol Description. Str:%s Size:%08x.",
		 mqtt_proto_desc->utf8, mqtt_proto_desc->size);

	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   276b6:	4b3b      	ldr	r3, [pc, #236]	; (277a4 <connect_request_encode+0xf8>)
   276b8:	4a3b      	ldr	r2, [pc, #236]	; (277a8 <connect_request_encode+0xfc>)
{
   276ba:	4607      	mov	r7, r0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   276bc:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   276c0:	3505      	adds	r5, #5
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   276c2:	2804      	cmp	r0, #4
   276c4:	bf0c      	ite	eq
   276c6:	4610      	moveq	r0, r2
   276c8:	4618      	movne	r0, r3
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   276ca:	600d      	str	r5, [r1, #0]
{
   276cc:	4688      	mov	r8, r1
	err_code = pack_utf8_str(mqtt_proto_desc, buf);
   276ce:	f016 fe2d 	bl	3e32c <pack_utf8_str>
	uint8_t connect_flags = client->clean_session << 1;
   276d2:	f3c4 0440 	ubfx	r4, r4, #1, #1
	if (err_code != 0) {
   276d6:	4603      	mov	r3, r0
   276d8:	b938      	cbnz	r0, 276ea <connect_request_encode+0x3e>
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   276da:	e9d8 2000 	ldrd	r2, r0, [r8]
   276de:	4290      	cmp	r0, r2
		return err_code;
	}

	MQTT_TRC("Encoding Protocol Version %02x.", client->protocol_version);
	err_code = pack_uint8(client->protocol_version, buf);
   276e0:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   276e4:	d104      	bne.n	276f0 <connect_request_encode+0x44>
		return -ENOMEM;
   276e6:	f06f 030b 	mvn.w	r3, #11

	/* Write the flags the connect flags. */
	*connect_flags_pos = connect_flags;

	return mqtt_encode_fixed_header(message_type, start, buf);
}
   276ea:	4618      	mov	r0, r3
   276ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*(buf->cur++) = val;
   276f0:	1c50      	adds	r0, r2, #1
   276f2:	f8c8 0000 	str.w	r0, [r8]
   276f6:	7011      	strb	r1, [r2, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   276f8:	e9d8 6200 	ldrd	r6, r2, [r8]
   276fc:	4296      	cmp	r6, r2
   276fe:	d0f2      	beq.n	276e6 <connect_request_encode+0x3a>
	*(buf->cur++) = val;
   27700:	1c72      	adds	r2, r6, #1
   27702:	f8c8 2000 	str.w	r2, [r8]
   27706:	7033      	strb	r3, [r6, #0]
	err_code = pack_uint16(client->keepalive, buf);
   27708:	4641      	mov	r1, r8
   2770a:	f8b7 0078 	ldrh.w	r0, [r7, #120]	; 0x78
   2770e:	f016 fdfb 	bl	3e308 <pack_uint16>
	if (err_code != 0) {
   27712:	4603      	mov	r3, r0
   27714:	2800      	cmp	r0, #0
   27716:	d1e8      	bne.n	276ea <connect_request_encode+0x3e>
	err_code = pack_utf8_str(&client->client_id, buf);
   27718:	f107 0048 	add.w	r0, r7, #72	; 0x48
   2771c:	f016 fe06 	bl	3e32c <pack_utf8_str>
	if (err_code != 0) {
   27720:	4603      	mov	r3, r0
   27722:	2800      	cmp	r0, #0
   27724:	d1e1      	bne.n	276ea <connect_request_encode+0x3e>
	if (client->will_topic != NULL) {
   27726:	6df8      	ldr	r0, [r7, #92]	; 0x5c
	uint8_t connect_flags = client->clean_session << 1;
   27728:	0064      	lsls	r4, r4, #1
	if (client->will_topic != NULL) {
   2772a:	b1d8      	cbz	r0, 27764 <connect_request_encode+0xb8>
		connect_flags |= client->will_retain << 5;
   2772c:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
		connect_flags |= MQTT_CONNECT_FLAG_WILL_TOPIC;
   27730:	f044 0404 	orr.w	r4, r4, #4
		connect_flags |= client->will_retain << 5;
   27734:	f003 0301 	and.w	r3, r3, #1
   27738:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   2773c:	7a03      	ldrb	r3, [r0, #8]
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   2773e:	4641      	mov	r1, r8
		connect_flags |= ((client->will_topic->qos & 0x03) << 3);
   27740:	00db      	lsls	r3, r3, #3
   27742:	f003 0318 	and.w	r3, r3, #24
		connect_flags |= client->will_retain << 5;
   27746:	431c      	orrs	r4, r3
		err_code = pack_utf8_str(&client->will_topic->topic, buf);
   27748:	f016 fdf0 	bl	3e32c <pack_utf8_str>
		if (err_code != 0) {
   2774c:	4603      	mov	r3, r0
   2774e:	2800      	cmp	r0, #0
   27750:	d1cb      	bne.n	276ea <connect_request_encode+0x3e>
		if (client->will_message != NULL) {
   27752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
			err_code = pack_utf8_str(client->will_message, buf);
   27754:	4641      	mov	r1, r8
		if (client->will_message != NULL) {
   27756:	b30b      	cbz	r3, 2779c <connect_request_encode+0xf0>
			err_code = pack_utf8_str(client->will_message, buf);
   27758:	4618      	mov	r0, r3
   2775a:	f016 fde7 	bl	3e32c <pack_utf8_str>
			if (err_code != 0) {
   2775e:	4603      	mov	r3, r0
   27760:	2800      	cmp	r0, #0
   27762:	d1c2      	bne.n	276ea <connect_request_encode+0x3e>
	if (client->user_name != NULL) {
   27764:	6d78      	ldr	r0, [r7, #84]	; 0x54
   27766:	b138      	cbz	r0, 27778 <connect_request_encode+0xcc>
		err_code = pack_utf8_str(client->user_name, buf);
   27768:	4641      	mov	r1, r8
   2776a:	f016 fddf 	bl	3e32c <pack_utf8_str>
		if (err_code != 0) {
   2776e:	4603      	mov	r3, r0
   27770:	2800      	cmp	r0, #0
   27772:	d1ba      	bne.n	276ea <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_USERNAME;
   27774:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	if (client->password != NULL) {
   27778:	6db8      	ldr	r0, [r7, #88]	; 0x58
   2777a:	b138      	cbz	r0, 2778c <connect_request_encode+0xe0>
		err_code = pack_utf8_str(client->password, buf);
   2777c:	4641      	mov	r1, r8
   2777e:	f016 fdd5 	bl	3e32c <pack_utf8_str>
		if (err_code != 0) {
   27782:	4603      	mov	r3, r0
   27784:	2800      	cmp	r0, #0
   27786:	d1b0      	bne.n	276ea <connect_request_encode+0x3e>
		connect_flags |= MQTT_CONNECT_FLAG_PASSWORD;
   27788:	f044 0440 	orr.w	r4, r4, #64	; 0x40
	*connect_flags_pos = connect_flags;
   2778c:	7034      	strb	r4, [r6, #0]
	return mqtt_encode_fixed_header(message_type, start, buf);
   2778e:	4642      	mov	r2, r8
   27790:	4629      	mov	r1, r5
}
   27792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   27796:	2010      	movs	r0, #16
   27798:	f016 bde3 	b.w	3e362 <mqtt_encode_fixed_header>
	return pack_uint16(0x0000, buf);
   2779c:	f016 fdb4 	bl	3e308 <pack_uint16>
   277a0:	e7dd      	b.n	2775e <connect_request_encode+0xb2>
   277a2:	bf00      	nop
   277a4:	00043900 	.word	0x00043900
   277a8:	00043908 	.word	0x00043908

000277ac <disconnect_encode>:
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
}

int disconnect_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(disc_packet)) {
   277ac:	e9d0 2300 	ldrd	r2, r3, [r0]
   277b0:	1a9b      	subs	r3, r3, r2
   277b2:	2b01      	cmp	r3, #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   277b4:	bf81      	itttt	hi
   277b6:	4b05      	ldrhi	r3, [pc, #20]	; (277cc <disconnect_encode+0x20>)
   277b8:	881b      	ldrhhi	r3, [r3, #0]
   277ba:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, disc_packet, sizeof(disc_packet));
	buf->end = buf->cur + sizeof(disc_packet);
   277bc:	6803      	ldrhi	r3, [r0, #0]
   277be:	bf83      	ittte	hi
   277c0:	3302      	addhi	r3, #2
   277c2:	6043      	strhi	r3, [r0, #4]

	return 0;
   277c4:	2000      	movhi	r0, #0
		return -ENOMEM;
   277c6:	f06f 000b 	mvnls.w	r0, #11
}
   277ca:	4770      	bx	lr
   277cc:	00046942 	.word	0x00046942

000277d0 <ping_request_encode>:
	return mqtt_encode_fixed_header(message_type, start, buf);
}

int ping_request_encode(struct buf_ctx *buf)
{
	if (buf->end - buf->cur < sizeof(ping_packet)) {
   277d0:	e9d0 2300 	ldrd	r2, r3, [r0]
   277d4:	1a9b      	subs	r3, r3, r2
   277d6:	2b01      	cmp	r3, #1
   277d8:	bf81      	itttt	hi
   277da:	4b05      	ldrhi	r3, [pc, #20]	; (277f0 <ping_request_encode+0x20>)
   277dc:	881b      	ldrhhi	r3, [r3, #0]
   277de:	8013      	strhhi	r3, [r2, #0]
		return -ENOMEM;
	}

	memcpy(buf->cur, ping_packet, sizeof(ping_packet));
	buf->end = buf->cur + sizeof(ping_packet);
   277e0:	6803      	ldrhi	r3, [r0, #0]
   277e2:	bf83      	ittte	hi
   277e4:	3302      	addhi	r3, #2
   277e6:	6043      	strhi	r3, [r0, #4]

	return 0;
   277e8:	2000      	movhi	r0, #0
		return -ENOMEM;
   277ea:	f06f 000b 	mvnls.w	r0, #11
}
   277ee:	4770      	bx	lr
   277f0:	00046944 	.word	0x00046944

000277f4 <mqtt_transport_connect>:
#endif /* CONFIG_MQTT_LIB_WEBSOCKET */
};

int mqtt_transport_connect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].connect(client);
   277f4:	2314      	movs	r3, #20
   277f6:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
   277fa:	4353      	muls	r3, r2
   277fc:	4a01      	ldr	r2, [pc, #4]	; (27804 <mqtt_transport_connect+0x10>)
   277fe:	58d3      	ldr	r3, [r2, r3]
   27800:	4718      	bx	r3
   27802:	bf00      	nop
   27804:	00043910 	.word	0x00043910

00027808 <mqtt_transport_write>:
}

int mqtt_transport_write(struct mqtt_client *client, const uint8_t *data,
			 uint32_t datalen)
{
   27808:	b430      	push	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   2780a:	2514      	movs	r5, #20
   2780c:	4c03      	ldr	r4, [pc, #12]	; (2781c <mqtt_transport_write+0x14>)
   2780e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   27812:	fb05 4303 	mla	r3, r5, r3, r4
							  datalen);
}
   27816:	bc30      	pop	{r4, r5}
	return transport_fn[client->transport.type].write(client, data,
   27818:	685b      	ldr	r3, [r3, #4]
   2781a:	4718      	bx	r3
   2781c:	00043910 	.word	0x00043910

00027820 <mqtt_transport_write_msg>:

int mqtt_transport_write_msg(struct mqtt_client *client,
			     const struct msghdr *message)
{
   27820:	b410      	push	{r4}
	return transport_fn[client->transport.type].write_msg(client, message);
   27822:	2414      	movs	r4, #20
   27824:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   27828:	4a03      	ldr	r2, [pc, #12]	; (27838 <mqtt_transport_write_msg+0x18>)
   2782a:	fb04 2303 	mla	r3, r4, r3, r2
}
   2782e:	f85d 4b04 	ldr.w	r4, [sp], #4
	return transport_fn[client->transport.type].write_msg(client, message);
   27832:	689b      	ldr	r3, [r3, #8]
   27834:	4718      	bx	r3
   27836:	bf00      	nop
   27838:	00043910 	.word	0x00043910

0002783c <mqtt_transport_read>:

int mqtt_transport_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			bool shall_block)
{
   2783c:	b470      	push	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   2783e:	2614      	movs	r6, #20
   27840:	4d04      	ldr	r5, [pc, #16]	; (27854 <mqtt_transport_read+0x18>)
   27842:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
   27846:	fb06 5404 	mla	r4, r6, r4, r5
   2784a:	68e4      	ldr	r4, [r4, #12]
   2784c:	46a4      	mov	ip, r4
							 shall_block);
}
   2784e:	bc70      	pop	{r4, r5, r6}
	return transport_fn[client->transport.type].read(client, data, buflen,
   27850:	4760      	bx	ip
   27852:	bf00      	nop
   27854:	00043910 	.word	0x00043910

00027858 <mqtt_transport_disconnect>:

int mqtt_transport_disconnect(struct mqtt_client *client)
{
	return transport_fn[client->transport.type].disconnect(client);
   27858:	2114      	movs	r1, #20
   2785a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
   2785e:	4a02      	ldr	r2, [pc, #8]	; (27868 <mqtt_transport_disconnect+0x10>)
   27860:	fb01 2303 	mla	r3, r1, r3, r2
   27864:	691b      	ldr	r3, [r3, #16]
   27866:	4718      	bx	r3
   27868:	00043910 	.word	0x00043910

0002786c <mqtt_mutex_unlock>:
	return k_mutex_lock(&mutex->kernel_mutex, timeout);
}

static inline int sys_mutex_unlock(struct sys_mutex *mutex)
{
	if (mutex->kernel_mutex.lock_count == 0) {
   2786c:	68c2      	ldr	r2, [r0, #12]
}

/**@brief Release the lock on the module specific mutex, if any.
 */
static inline void mqtt_mutex_unlock(struct mqtt_client *client)
{
   2786e:	b510      	push	{r4, lr}
   27870:	b142      	cbz	r2, 27884 <mqtt_mutex_unlock+0x18>
		return -EINVAL;
	}

	if (mutex->kernel_mutex.owner != _current) {
   27872:	4b0f      	ldr	r3, [pc, #60]	; (278b0 <mqtt_mutex_unlock+0x44>)
   27874:	6882      	ldr	r2, [r0, #8]
   27876:	689b      	ldr	r3, [r3, #8]
   27878:	429a      	cmp	r2, r3
   2787a:	d115      	bne.n	278a8 <mqtt_mutex_unlock+0x3c>
	int ret = sys_mutex_unlock(&client->internal.mutex);

	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
	(void)ret;
}
   2787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_unlock(mutex);
   27880:	f010 b920 	b.w	37ac4 <z_impl_k_mutex_unlock>
		return -EINVAL;
   27884:	f06f 0415 	mvn.w	r4, #21
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   27888:	2343      	movs	r3, #67	; 0x43
   2788a:	4a0a      	ldr	r2, [pc, #40]	; (278b4 <mqtt_mutex_unlock+0x48>)
   2788c:	490a      	ldr	r1, [pc, #40]	; (278b8 <mqtt_mutex_unlock+0x4c>)
   2788e:	480b      	ldr	r0, [pc, #44]	; (278bc <mqtt_mutex_unlock+0x50>)
   27890:	f015 fa71 	bl	3cd76 <printk>
   27894:	4621      	mov	r1, r4
   27896:	480a      	ldr	r0, [pc, #40]	; (278c0 <mqtt_mutex_unlock+0x54>)
   27898:	f015 fa6d 	bl	3cd76 <printk>
}
   2789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_unlock failed with %d", ret);
   278a0:	2143      	movs	r1, #67	; 0x43
   278a2:	4804      	ldr	r0, [pc, #16]	; (278b4 <mqtt_mutex_unlock+0x48>)
   278a4:	f015 bd1b 	b.w	3d2de <assert_post_action>
		return -EPERM;
   278a8:	f04f 34ff 	mov.w	r4, #4294967295
   278ac:	e7ec      	b.n	27888 <mqtt_mutex_unlock+0x1c>
   278ae:	bf00      	nop
   278b0:	2001a07c 	.word	0x2001a07c
   278b4:	00046952 	.word	0x00046952
   278b8:	00046983 	.word	0x00046983
   278bc:	00044dbf 	.word	0x00044dbf
   278c0:	0004698c 	.word	0x0004698c

000278c4 <mqtt_mutex_lock>:
{
   278c4:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   278c6:	f04f 32ff 	mov.w	r2, #4294967295
   278ca:	f04f 33ff 	mov.w	r3, #4294967295
   278ce:	f00f ffff 	bl	378d0 <z_impl_k_mutex_lock>
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   278d2:	4604      	mov	r4, r0
   278d4:	b178      	cbz	r0, 278f6 <mqtt_mutex_lock+0x32>
   278d6:	2339      	movs	r3, #57	; 0x39
   278d8:	4a07      	ldr	r2, [pc, #28]	; (278f8 <mqtt_mutex_lock+0x34>)
   278da:	4908      	ldr	r1, [pc, #32]	; (278fc <mqtt_mutex_lock+0x38>)
   278dc:	4808      	ldr	r0, [pc, #32]	; (27900 <mqtt_mutex_lock+0x3c>)
   278de:	f015 fa4a 	bl	3cd76 <printk>
   278e2:	4621      	mov	r1, r4
   278e4:	4807      	ldr	r0, [pc, #28]	; (27904 <mqtt_mutex_lock+0x40>)
   278e6:	f015 fa46 	bl	3cd76 <printk>
}
   278ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__ASSERT(ret == 0, "sys_mutex_lock failed with %d", ret);
   278ee:	2139      	movs	r1, #57	; 0x39
   278f0:	4801      	ldr	r0, [pc, #4]	; (278f8 <mqtt_mutex_lock+0x34>)
   278f2:	f015 bcf4 	b.w	3d2de <assert_post_action>
}
   278f6:	bd10      	pop	{r4, pc}
   278f8:	00046952 	.word	0x00046952
   278fc:	00046983 	.word	0x00046983
   27900:	00044dbf 	.word	0x00044dbf
   27904:	000469ae 	.word	0x000469ae

00027908 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   27908:	b570      	push	{r4, r5, r6, lr}
   2790a:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   2790c:	460c      	mov	r4, r1
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2790e:	68c5      	ldr	r5, [r0, #12]
   27910:	b961      	cbnz	r1, 2792c <gpio_nrfx_manage_callback+0x24>
   27912:	4922      	ldr	r1, [pc, #136]	; (2799c <gpio_nrfx_manage_callback+0x94>)
   27914:	2324      	movs	r3, #36	; 0x24
   27916:	4a22      	ldr	r2, [pc, #136]	; (279a0 <gpio_nrfx_manage_callback+0x98>)
   27918:	4822      	ldr	r0, [pc, #136]	; (279a4 <gpio_nrfx_manage_callback+0x9c>)
   2791a:	f015 fa2c 	bl	3cd76 <printk>
   2791e:	4822      	ldr	r0, [pc, #136]	; (279a8 <gpio_nrfx_manage_callback+0xa0>)
   27920:	f015 fa29 	bl	3cd76 <printk>
   27924:	2124      	movs	r1, #36	; 0x24
   27926:	481e      	ldr	r0, [pc, #120]	; (279a0 <gpio_nrfx_manage_callback+0x98>)
   27928:	f015 fcd9 	bl	3d2de <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   2792c:	6863      	ldr	r3, [r4, #4]
   2792e:	b963      	cbnz	r3, 2794a <gpio_nrfx_manage_callback+0x42>
   27930:	491e      	ldr	r1, [pc, #120]	; (279ac <gpio_nrfx_manage_callback+0xa4>)
   27932:	2325      	movs	r3, #37	; 0x25
   27934:	4a1a      	ldr	r2, [pc, #104]	; (279a0 <gpio_nrfx_manage_callback+0x98>)
   27936:	481b      	ldr	r0, [pc, #108]	; (279a4 <gpio_nrfx_manage_callback+0x9c>)
   27938:	f015 fa1d 	bl	3cd76 <printk>
   2793c:	481c      	ldr	r0, [pc, #112]	; (279b0 <gpio_nrfx_manage_callback+0xa8>)
   2793e:	f015 fa1a 	bl	3cd76 <printk>
   27942:	2125      	movs	r1, #37	; 0x25
   27944:	4816      	ldr	r0, [pc, #88]	; (279a0 <gpio_nrfx_manage_callback+0x98>)
   27946:	f015 fcca 	bl	3d2de <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   2794a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   2794c:	b15b      	cbz	r3, 27966 <gpio_nrfx_manage_callback+0x5e>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2794e:	2200      	movs	r2, #0
   27950:	429c      	cmp	r4, r3
   27952:	d113      	bne.n	2797c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   27954:	6823      	ldr	r3, [r4, #0]
   27956:	b95a      	cbnz	r2, 27970 <gpio_nrfx_manage_callback+0x68>
   27958:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   2795a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2795c:	4294      	cmp	r4, r2
   2795e:	d100      	bne.n	27962 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   27960:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   27962:	2300      	movs	r3, #0
   27964:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   27966:	b976      	cbnz	r6, 27986 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   27968:	2000      	movs	r0, #0
				     callback, set);
}
   2796a:	bd70      	pop	{r4, r5, r6, pc}
   2796c:	460b      	mov	r3, r1
   2796e:	e7ef      	b.n	27950 <gpio_nrfx_manage_callback+0x48>
   27970:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   27972:	68ab      	ldr	r3, [r5, #8]
   27974:	429c      	cmp	r4, r3
	list->tail = node;
   27976:	bf08      	it	eq
   27978:	60aa      	streq	r2, [r5, #8]
}
   2797a:	e7f2      	b.n	27962 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2797c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2797e:	461a      	mov	r2, r3
   27980:	2900      	cmp	r1, #0
   27982:	d1f3      	bne.n	2796c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   27984:	b13e      	cbz	r6, 27996 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   27986:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   27988:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2798a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   2798c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2798e:	2800      	cmp	r0, #0
   27990:	d1ea      	bne.n	27968 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   27992:	60ac      	str	r4, [r5, #8]
}
   27994:	e7e9      	b.n	2796a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   27996:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2799a:	e7e6      	b.n	2796a <gpio_nrfx_manage_callback+0x62>
   2799c:	0004707e 	.word	0x0004707e
   279a0:	000469ce 	.word	0x000469ce
   279a4:	00044dbf 	.word	0x00044dbf
   279a8:	000469fb 	.word	0x000469fb
   279ac:	00046a0a 	.word	0x00046a0a
   279b0:	00046a1c 	.word	0x00046a1c

000279b4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 */
NRF_STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   279b4:	6803      	ldr	r3, [r0, #0]
{
   279b6:	b510      	push	{r4, lr}
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   279b8:	095a      	lsrs	r2, r3, #5
   279ba:	bf0c      	ite	eq
   279bc:	f04f 32ff 	moveq.w	r2, #4294967295
   279c0:	2200      	movne	r2, #0
            mask = P1_FEATURE_PINS_PRESENT;
            break;
#endif
    }

    pin_number &= 0x1F;
   279c2:	f003 031f 	and.w	r3, r3, #31

    return (mask & (1UL << pin_number)) ? true : false;
   279c6:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   279ca:	07db      	lsls	r3, r3, #31
{
   279cc:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   279ce:	d40b      	bmi.n	279e8 <nrf_gpio_pin_port_decode+0x34>
   279d0:	490f      	ldr	r1, [pc, #60]	; (27a10 <nrf_gpio_pin_port_decode+0x5c>)
   279d2:	4810      	ldr	r0, [pc, #64]	; (27a14 <nrf_gpio_pin_port_decode+0x60>)
   279d4:	f240 231a 	movw	r3, #538	; 0x21a
   279d8:	4a0f      	ldr	r2, [pc, #60]	; (27a18 <nrf_gpio_pin_port_decode+0x64>)
   279da:	f015 f9cc 	bl	3cd76 <printk>
   279de:	f240 211a 	movw	r1, #538	; 0x21a
   279e2:	480d      	ldr	r0, [pc, #52]	; (27a18 <nrf_gpio_pin_port_decode+0x64>)
   279e4:	f015 fc7b 	bl	3d2de <assert_post_action>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
   279e8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   279ea:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   279ee:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   279f0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   279f2:	d00b      	beq.n	27a0c <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   279f4:	4909      	ldr	r1, [pc, #36]	; (27a1c <nrf_gpio_pin_port_decode+0x68>)
   279f6:	4807      	ldr	r0, [pc, #28]	; (27a14 <nrf_gpio_pin_port_decode+0x60>)
   279f8:	f240 231f 	movw	r3, #543	; 0x21f
   279fc:	4a06      	ldr	r2, [pc, #24]	; (27a18 <nrf_gpio_pin_port_decode+0x64>)
   279fe:	f015 f9ba 	bl	3cd76 <printk>
   27a02:	f240 211f 	movw	r1, #543	; 0x21f
   27a06:	4804      	ldr	r0, [pc, #16]	; (27a18 <nrf_gpio_pin_port_decode+0x64>)
   27a08:	f015 fc69 	bl	3d2de <assert_post_action>
}
   27a0c:	4804      	ldr	r0, [pc, #16]	; (27a20 <nrf_gpio_pin_port_decode+0x6c>)
   27a0e:	bd10      	pop	{r4, pc}
   27a10:	00046a66 	.word	0x00046a66
   27a14:	00044dbf 	.word	0x00044dbf
   27a18:	00046a33 	.word	0x00046a33
   27a1c:	0004bcc7 	.word	0x0004bcc7
   27a20:	40842500 	.word	0x40842500

00027a24 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   27a24:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   27a26:	4b09      	ldr	r3, [pc, #36]	; (27a4c <gpio_nrfx_init+0x28>)
   27a28:	781a      	ldrb	r2, [r3, #0]
   27a2a:	b96a      	cbnz	r2, 27a48 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   27a2c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   27a2e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   27a30:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   27a32:	2105      	movs	r1, #5
   27a34:	f7fe fd84 	bl	26540 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   27a38:	2031      	movs	r0, #49	; 0x31
   27a3a:	f7fe fd63 	bl	26504 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   27a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   27a42:	4b03      	ldr	r3, [pc, #12]	; (27a50 <gpio_nrfx_init+0x2c>)
   27a44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   27a48:	2000      	movs	r0, #0
   27a4a:	bd08      	pop	{r3, pc}
   27a4c:	2001ebda 	.word	0x2001ebda
   27a50:	40031000 	.word	0x40031000

00027a54 <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   27a54:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   27a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27a5c:	4605      	mov	r5, r0
   27a5e:	460e      	mov	r6, r1
   27a60:	4690      	mov	r8, r2
   27a62:	4699      	mov	r9, r3
	struct gpio_nrfx_data *data = get_port_data(port);
   27a64:	68c4      	ldr	r4, [r0, #12]
	return port->config;
   27a66:	f001 071f 	and.w	r7, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   27a6a:	f040 80a7 	bne.w	27bbc <gpio_nrfx_pin_interrupt_configure+0x168>
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   27a6e:	6843      	ldr	r3, [r0, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27a70:	a801      	add	r0, sp, #4
   27a72:	7a1b      	ldrb	r3, [r3, #8]
   27a74:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
   27a78:	9301      	str	r3, [sp, #4]
   27a7a:	f7ff ff9b 	bl	279b4 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   27a7e:	9b01      	ldr	r3, [sp, #4]
   27a80:	3380      	adds	r3, #128	; 0x80
   27a82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   27a86:	07d9      	lsls	r1, r3, #31
   27a88:	f100 80b7 	bmi.w	27bfa <gpio_nrfx_pin_interrupt_configure+0x1a6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   27a8c:	2101      	movs	r1, #1
   27a8e:	68e3      	ldr	r3, [r4, #12]
   27a90:	40b1      	lsls	r1, r6
   27a92:	4319      	orrs	r1, r3
   27a94:	60e1      	str	r1, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   27a96:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   27a98:	2000      	movs	r0, #0
   27a9a:	6963      	ldr	r3, [r4, #20]
   27a9c:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   27a9e:	f5b8 3fa0 	cmp.w	r8, #81920	; 0x14000
   27aa2:	bf0c      	ite	eq
   27aa4:	430b      	orreq	r3, r1
   27aa6:	438b      	bicne	r3, r1
   27aa8:	6163      	str	r3, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   27aaa:	69a3      	ldr	r3, [r4, #24]
   27aac:	f5b9 2fc0 	cmp.w	r9, #393216	; 0x60000
   27ab0:	bf0c      	ite	eq
   27ab2:	430b      	orreq	r3, r1
   27ab4:	438b      	bicne	r3, r1
   27ab6:	61a3      	str	r3, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   27ab8:	6923      	ldr	r3, [r4, #16]
   27aba:	f5b9 2f80 	cmp.w	r9, #262144	; 0x40000
   27abe:	bf0c      	ite	eq
   27ac0:	4319      	orreq	r1, r3
   27ac2:	ea23 0101 	bicne.w	r1, r3, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   27ac6:	686b      	ldr	r3, [r5, #4]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   27ac8:	6121      	str	r1, [r4, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   27aca:	7a1b      	ldrb	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
   27acc:	f8d5 800c 	ldr.w	r8, [r5, #12]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   27ad0:	4d4b      	ldr	r5, [pc, #300]	; (27c00 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   27ad2:	ea47 1743 	orr.w	r7, r7, r3, lsl #5
   27ad6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   27ada:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   27adc:	f500 72a2 	add.w	r2, r0, #324	; 0x144
   27ae0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   27ae4:	f3c2 2204 	ubfx	r2, r2, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   27ae8:	4297      	cmp	r7, r2
   27aea:	d172      	bne.n	27bd2 <gpio_nrfx_pin_interrupt_configure+0x17e>
		    && (intenset & BIT(i))) {
   27aec:	fa23 f200 	lsr.w	r2, r3, r0
   27af0:	07d2      	lsls	r2, r2, #31
   27af2:	d56e      	bpl.n	27bd2 <gpio_nrfx_pin_interrupt_configure+0x17e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   27af4:	0083      	lsls	r3, r0, #2
   27af6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   27afa:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
   27afe:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   27b02:	f022 0201 	bic.w	r2, r2, #1
   27b06:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   27b0a:	2301      	movs	r3, #1
   27b0c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   27b0e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   27b12:	b2c0      	uxtb	r0, r0
   27b14:	f00e ff8a 	bl	36a2c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   27b18:	4638      	mov	r0, r7
   27b1a:	2100      	movs	r1, #0
   27b1c:	f017 f9b9 	bl	3ee92 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   27b20:	f8d8 000c 	ldr.w	r0, [r8, #12]
   27b24:	40f0      	lsrs	r0, r6
   27b26:	f010 0001 	ands.w	r0, r0, #1
   27b2a:	d044      	beq.n	27bb6 <gpio_nrfx_pin_interrupt_configure+0x162>
		if (data->trig_edge & BIT(pin)) {
   27b2c:	f8d8 0014 	ldr.w	r0, [r8, #20]
   27b30:	40f0      	lsrs	r0, r6
   27b32:	f010 0401 	ands.w	r4, r0, #1
   27b36:	d053      	beq.n	27be0 <gpio_nrfx_pin_interrupt_configure+0x18c>
			if (data->double_edge & BIT(pin)) {
   27b38:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   27b3c:	a801      	add	r0, sp, #4
			if (data->double_edge & BIT(pin)) {
   27b3e:	40f3      	lsrs	r3, r6
   27b40:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   27b42:	bf57      	itett	pl
   27b44:	f8d8 1010 	ldrpl.w	r1, [r8, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   27b48:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   27b4a:	fa21 f606 	lsrpl.w	r6, r1, r6
   27b4e:	f006 0601 	andpl.w	r6, r6, #1
   27b52:	bf5c      	itt	pl
   27b54:	f1c6 0602 	rsbpl	r6, r6, #2
   27b58:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   27b5a:	f00e ff89 	bl	36a70 <nrfx_gpiote_channel_alloc>
   27b5e:	4b29      	ldr	r3, [pc, #164]	; (27c04 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   27b60:	4298      	cmp	r0, r3
   27b62:	d13a      	bne.n	27bda <gpio_nrfx_pin_interrupt_configure+0x186>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   27b64:	f89d 1004 	ldrb.w	r1, [sp, #4]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27b68:	023f      	lsls	r7, r7, #8
   27b6a:	008b      	lsls	r3, r1, #2
   27b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   27b70:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   27b74:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27b78:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   27b7c:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   27b80:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   27b84:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27b88:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   27b8c:	0088      	lsls	r0, r1, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27b8e:	4317      	orrs	r7, r2
    return ((uint32_t)p_reg + event);
   27b90:	4a1d      	ldr	r2, [pc, #116]	; (27c08 <gpio_nrfx_pin_interrupt_configure+0x1b4>)
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27b92:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    return ((uint32_t)p_reg + event);
   27b96:	4402      	add	r2, r0
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   27b98:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   27b9a:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   27b9e:	6010      	str	r0, [r2, #0]
   27ba0:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   27ba2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   27ba6:	f042 0201 	orr.w	r2, r2, #1
   27baa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   27bae:	2301      	movs	r3, #1
   27bb0:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   27bb2:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
}
   27bb6:	b003      	add	sp, #12
   27bb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   27bbc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   27bc0:	f47f af64 	bne.w	27a8c <gpio_nrfx_pin_interrupt_configure+0x38>
   27bc4:	2101      	movs	r1, #1
   27bc6:	fa01 f306 	lsl.w	r3, r1, r6
   27bca:	68e1      	ldr	r1, [r4, #12]
   27bcc:	ea21 0103 	bic.w	r1, r1, r3
   27bd0:	e760      	b.n	27a94 <gpio_nrfx_pin_interrupt_configure+0x40>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   27bd2:	3001      	adds	r0, #1
   27bd4:	2808      	cmp	r0, #8
   27bd6:	d181      	bne.n	27adc <gpio_nrfx_pin_interrupt_configure+0x88>
   27bd8:	e79e      	b.n	27b18 <gpio_nrfx_pin_interrupt_configure+0xc4>
		return -ENODEV;
   27bda:	f06f 0012 	mvn.w	r0, #18
   27bde:	e7ea      	b.n	27bb6 <gpio_nrfx_pin_interrupt_configure+0x162>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27be0:	f8d8 1010 	ldr.w	r1, [r8, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   27be4:	4638      	mov	r0, r7
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27be6:	40f1      	lsrs	r1, r6
   27be8:	f001 0101 	and.w	r1, r1, #1
   27bec:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   27bf0:	b2c9      	uxtb	r1, r1
   27bf2:	f017 f94e 	bl	3ee92 <nrf_gpio_cfg_sense_set>
	int res = 0;
   27bf6:	4620      	mov	r0, r4
   27bf8:	e7dd      	b.n	27bb6 <gpio_nrfx_pin_interrupt_configure+0x162>
		return -ENOTSUP;
   27bfa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   27bfe:	e7da      	b.n	27bb6 <gpio_nrfx_pin_interrupt_configure+0x162>
   27c00:	40031000 	.word	0x40031000
   27c04:	0bad0000 	.word	0x0bad0000
   27c08:	40031100 	.word	0x40031100

00027c0c <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27c0c:	4b2e      	ldr	r3, [pc, #184]	; (27cc8 <gpio_nrfx_config+0xbc>)
{
   27c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27c10:	4c2e      	ldr	r4, [pc, #184]	; (27ccc <gpio_nrfx_config+0xc0>)
   27c12:	4013      	ands	r3, r2
   27c14:	42a3      	cmp	r3, r4
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27c16:	6840      	ldr	r0, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27c18:	d044      	beq.n	27ca4 <gpio_nrfx_config+0x98>
   27c1a:	d80e      	bhi.n	27c3a <gpio_nrfx_config+0x2e>
   27c1c:	2b06      	cmp	r3, #6
   27c1e:	d043      	beq.n	27ca8 <gpio_nrfx_config+0x9c>
   27c20:	d806      	bhi.n	27c30 <gpio_nrfx_config+0x24>
   27c22:	2b00      	cmp	r3, #0
   27c24:	d040      	beq.n	27ca8 <gpio_nrfx_config+0x9c>
   27c26:	2b02      	cmp	r3, #2
   27c28:	d040      	beq.n	27cac <gpio_nrfx_config+0xa0>
   27c2a:	f06f 0015 	mvn.w	r0, #21
   27c2e:	e037      	b.n	27ca0 <gpio_nrfx_config+0x94>
   27c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   27c34:	d1f9      	bne.n	27c2a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_H0S1;
   27c36:	2401      	movs	r4, #1
   27c38:	e009      	b.n	27c4e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27c3a:	4c25      	ldr	r4, [pc, #148]	; (27cd0 <gpio_nrfx_config+0xc4>)
   27c3c:	42a3      	cmp	r3, r4
   27c3e:	d037      	beq.n	27cb0 <gpio_nrfx_config+0xa4>
   27c40:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   27c44:	d036      	beq.n	27cb4 <gpio_nrfx_config+0xa8>
   27c46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   27c4a:	d1ee      	bne.n	27c2a <gpio_nrfx_config+0x1e>
		drive = NRF_GPIO_PIN_S0H1;
   27c4c:	2402      	movs	r4, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   27c4e:	06d5      	lsls	r5, r2, #27
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   27c50:	f482 7380 	eor.w	r3, r2, #256	; 0x100
		pull = NRF_GPIO_PIN_PULLUP;
   27c54:	bf4c      	ite	mi
   27c56:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
   27c58:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   27c5c:	f3c3 2700 	ubfx	r7, r3, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   27c60:	0593      	lsls	r3, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   27c62:	f3c2 2540 	ubfx	r5, r2, #9, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   27c66:	d507      	bpl.n	27c78 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   27c68:	0513      	lsls	r3, r2, #20
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   27c6a:	f8d0 c004 	ldr.w	ip, [r0, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   27c6e:	d523      	bpl.n	27cb8 <gpio_nrfx_config+0xac>
			nrf_gpio_port_out_set(reg, BIT(pin));
   27c70:	2301      	movs	r3, #1
   27c72:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   27c74:	f8cc 3008 	str.w	r3, [ip, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   27c78:	7a03      	ldrb	r3, [r0, #8]
   27c7a:	f001 011f 	and.w	r1, r1, #31
   27c7e:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   27c82:	a801      	add	r0, sp, #4
   27c84:	9101      	str	r1, [sp, #4]
   27c86:	f7ff fe95 	bl	279b4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   27c8a:	9a01      	ldr	r2, [sp, #4]
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   27c8c:	ea45 0347 	orr.w	r3, r5, r7, lsl #1
   27c90:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   27c94:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   27c98:	3280      	adds	r2, #128	; 0x80
   27c9a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	return 0;
   27c9e:	2000      	movs	r0, #0
}
   27ca0:	b003      	add	sp, #12
   27ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   27ca4:	2407      	movs	r4, #7
   27ca6:	e7d2      	b.n	27c4e <gpio_nrfx_config+0x42>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   27ca8:	461c      	mov	r4, r3
   27caa:	e7d0      	b.n	27c4e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0S1;
   27cac:	2404      	movs	r4, #4
   27cae:	e7ce      	b.n	27c4e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_D0H1;
   27cb0:	2405      	movs	r4, #5
   27cb2:	e7cc      	b.n	27c4e <gpio_nrfx_config+0x42>
		drive = NRF_GPIO_PIN_H0H1;
   27cb4:	2403      	movs	r4, #3
   27cb6:	e7ca      	b.n	27c4e <gpio_nrfx_config+0x42>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   27cb8:	0553      	lsls	r3, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   27cba:	bf42      	ittt	mi
   27cbc:	2301      	movmi	r3, #1
   27cbe:	408b      	lslmi	r3, r1
    p_reg->OUTCLR = clr_mask;
   27cc0:	f8cc 300c 	strmi.w	r3, [ip, #12]
}
   27cc4:	e7d8      	b.n	27c78 <gpio_nrfx_config+0x6c>
   27cc6:	bf00      	nop
   27cc8:	00f00006 	.word	0x00f00006
   27ccc:	00100006 	.word	0x00100006
   27cd0:	00400002 	.word	0x00400002

00027cd4 <gpiote_event_handler>:
{
   27cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27cd8:	4e4b      	ldr	r6, [pc, #300]	; (27e08 <gpiote_event_handler+0x134>)
   27cda:	6837      	ldr	r7, [r6, #0]
	if (port_event) {
   27cdc:	2f00      	cmp	r7, #0
   27cde:	d050      	beq.n	27d82 <gpiote_event_handler+0xae>
	uint32_t bit = 1U << pin;
   27ce0:	f04f 0801 	mov.w	r8, #1
	uint32_t pin = 0U;
   27ce4:	f04f 0900 	mov.w	r9, #0
	uint32_t out = data->pin_int_en;
   27ce8:	4b48      	ldr	r3, [pc, #288]	; (27e0c <gpiote_event_handler+0x138>)
   27cea:	68dd      	ldr	r5, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   27cec:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   27cf0:	430a      	orrs	r2, r1
   27cf2:	ea25 0502 	bic.w	r5, r5, r2
    return p_reg->IN;
   27cf6:	4a46      	ldr	r2, [pc, #280]	; (27e10 <gpiote_event_handler+0x13c>)
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   27cf8:	691b      	ldr	r3, [r3, #16]
   27cfa:	6914      	ldr	r4, [r2, #16]
   27cfc:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   27cfe:	ea25 0404 	bic.w	r4, r5, r4
	while (level_pins) {
   27d02:	bb7d      	cbnz	r5, 27d64 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   27d04:	6035      	str	r5, [r6, #0]
   27d06:	6833      	ldr	r3, [r6, #0]
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   27d08:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   27d0a:	2501      	movs	r5, #1
   27d0c:	461e      	mov	r6, r3
    return p_reg->INTENSET & mask;
   27d0e:	4841      	ldr	r0, [pc, #260]	; (27e14 <gpiote_event_handler+0x140>)
   27d10:	4941      	ldr	r1, [pc, #260]	; (27e18 <gpiote_event_handler+0x144>)
   27d12:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   27d16:	fa05 fc03 	lsl.w	ip, r5, r3
   27d1a:	ea1c 0f02 	tst.w	ip, r2
   27d1e:	d00f      	beq.n	27d40 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27d20:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   27d24:	b162      	cbz	r2, 27d40 <gpiote_event_handler+0x6c>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   27d26:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   27d2a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   27d2e:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   27d32:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   27d36:	fa05 f202 	lsl.w	r2, r5, r2
   27d3a:	4314      	orrs	r4, r2
   27d3c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   27d40:	3301      	adds	r3, #1
   27d42:	2b08      	cmp	r3, #8
   27d44:	d1e5      	bne.n	27d12 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   27d46:	b9f4      	cbnz	r4, 27d86 <gpiote_event_handler+0xb2>
	if (port_event) {
   27d48:	b157      	cbz	r7, 27d60 <gpiote_event_handler+0x8c>
	uint32_t bit = 1U << pin;
   27d4a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   27d4c:	2700      	movs	r7, #0
	uint32_t out = data->pin_int_en;
   27d4e:	4d2f      	ldr	r5, [pc, #188]	; (27e0c <gpiote_event_handler+0x138>)
   27d50:	68ec      	ldr	r4, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   27d52:	e9d5 2105 	ldrd	r2, r1, [r5, #20]
   27d56:	430a      	orrs	r2, r1
   27d58:	ea24 0402 	bic.w	r4, r4, r2
	while (level_pins) {
   27d5c:	2c00      	cmp	r4, #0
   27d5e:	d141      	bne.n	27de4 <gpiote_event_handler+0x110>
}
   27d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (level_pins & bit) {
   27d64:	ea15 0f08 	tst.w	r5, r8
   27d68:	d006      	beq.n	27d78 <gpiote_event_handler+0xa4>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   27d6a:	2100      	movs	r1, #0
   27d6c:	f009 001f 	and.w	r0, r9, #31
   27d70:	f017 f88f 	bl	3ee92 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   27d74:	ea25 0508 	bic.w	r5, r5, r8
		++pin;
   27d78:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   27d7c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   27d80:	e7bf      	b.n	27d02 <gpiote_event_handler+0x2e>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   27d82:	463c      	mov	r4, r7
   27d84:	e7c0      	b.n	27d08 <gpiote_event_handler+0x34>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   27d86:	4b21      	ldr	r3, [pc, #132]	; (27e0c <gpiote_event_handler+0x138>)
   27d88:	685d      	ldr	r5, [r3, #4]
   27d8a:	2d00      	cmp	r5, #0
   27d8c:	d0dc      	beq.n	27d48 <gpiote_event_handler+0x74>
	return node->next;
   27d8e:	682e      	ldr	r6, [r5, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   27d90:	f8df 9090 	ldr.w	r9, [pc, #144]	; 27e24 <gpiote_event_handler+0x150>
   27d94:	2e00      	cmp	r6, #0
   27d96:	bf38      	it	cc
   27d98:	2600      	movcc	r6, #0
			__ASSERT(cb->handler, "No callback handler!");
   27d9a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 27e28 <gpiote_event_handler+0x154>
   27d9e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 27e2c <gpiote_event_handler+0x158>
		if (cb->pin_mask & pins) {
   27da2:	68ab      	ldr	r3, [r5, #8]
   27da4:	421c      	tst	r4, r3
   27da6:	d014      	beq.n	27dd2 <gpiote_event_handler+0xfe>
			__ASSERT(cb->handler, "No callback handler!");
   27da8:	686b      	ldr	r3, [r5, #4]
   27daa:	b963      	cbnz	r3, 27dc6 <gpiote_event_handler+0xf2>
   27dac:	4651      	mov	r1, sl
   27dae:	2345      	movs	r3, #69	; 0x45
   27db0:	4642      	mov	r2, r8
   27db2:	481a      	ldr	r0, [pc, #104]	; (27e1c <gpiote_event_handler+0x148>)
   27db4:	f014 ffdf 	bl	3cd76 <printk>
   27db8:	4819      	ldr	r0, [pc, #100]	; (27e20 <gpiote_event_handler+0x14c>)
   27dba:	f014 ffdc 	bl	3cd76 <printk>
   27dbe:	2145      	movs	r1, #69	; 0x45
   27dc0:	4640      	mov	r0, r8
   27dc2:	f015 fa8c 	bl	3d2de <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   27dc6:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   27dca:	4629      	mov	r1, r5
   27dcc:	4648      	mov	r0, r9
   27dce:	4022      	ands	r2, r4
   27dd0:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   27dd2:	2e00      	cmp	r6, #0
   27dd4:	d0b8      	beq.n	27d48 <gpiote_event_handler+0x74>
   27dd6:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   27dd8:	4635      	mov	r5, r6
   27dda:	2b00      	cmp	r3, #0
   27ddc:	bf38      	it	cc
   27dde:	2300      	movcc	r3, #0
   27de0:	461e      	mov	r6, r3
   27de2:	e7de      	b.n	27da2 <gpiote_event_handler+0xce>
		if (level_pins & bit) {
   27de4:	4226      	tst	r6, r4
   27de6:	d00c      	beq.n	27e02 <gpiote_event_handler+0x12e>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27de8:	6929      	ldr	r1, [r5, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   27dea:	f007 001f 	and.w	r0, r7, #31
	if ((BIT(pin) & data->int_active_level) != 0U) {
   27dee:	40f9      	lsrs	r1, r7
   27df0:	f001 0101 	and.w	r1, r1, #1
   27df4:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   27df8:	b2c9      	uxtb	r1, r1
   27dfa:	f017 f84a 	bl	3ee92 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   27dfe:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   27e02:	3701      	adds	r7, #1
		bit <<= 1;
   27e04:	0076      	lsls	r6, r6, #1
   27e06:	e7a9      	b.n	27d5c <gpiote_event_handler+0x88>
   27e08:	4003117c 	.word	0x4003117c
   27e0c:	20018e10 	.word	0x20018e10
   27e10:	40842500 	.word	0x40842500
   27e14:	40031000 	.word	0x40031000
   27e18:	40031100 	.word	0x40031100
   27e1c:	00044dbf 	.word	0x00044dbf
   27e20:	00046a1c 	.word	0x00046a1c
   27e24:	2001597c 	.word	0x2001597c
   27e28:	000469ce 	.word	0x000469ce
   27e2c:	00046a89 	.word	0x00046a89

00027e30 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   27e30:	4b02      	ldr	r3, [pc, #8]	; (27e3c <flash_nrf_pages_layout+0xc>)
   27e32:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   27e34:	2301      	movs	r3, #1
   27e36:	6013      	str	r3, [r2, #0]
}
   27e38:	4770      	bx	lr
   27e3a:	bf00      	nop
   27e3c:	20018e2c 	.word	0x20018e2c

00027e40 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   27e40:	4800      	ldr	r0, [pc, #0]	; (27e44 <flash_nrf_get_parameters+0x4>)
   27e42:	4770      	bx	lr
   27e44:	00043980 	.word	0x00043980

00027e48 <flash_nrf_read>:
{
   27e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27e4a:	460c      	mov	r4, r1
	if (is_regular_addr_valid(addr, len)) {
   27e4c:	4619      	mov	r1, r3
   27e4e:	4620      	mov	r0, r4
{
   27e50:	4615      	mov	r5, r2
	if (is_regular_addr_valid(addr, len)) {
   27e52:	9301      	str	r3, [sp, #4]
   27e54:	f017 f832 	bl	3eebc <is_regular_addr_valid>
   27e58:	9a01      	ldr	r2, [sp, #4]
   27e5a:	b978      	cbnz	r0, 27e7c <flash_nrf_read+0x34>
   27e5c:	4b10      	ldr	r3, [pc, #64]	; (27ea0 <flash_nrf_read+0x58>)
   27e5e:	4811      	ldr	r0, [pc, #68]	; (27ea4 <flash_nrf_read+0x5c>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   27e60:	4911      	ldr	r1, [pc, #68]	; (27ea8 <flash_nrf_read+0x60>)
   27e62:	1ac0      	subs	r0, r0, r3
   27e64:	08c0      	lsrs	r0, r0, #3
   27e66:	0180      	lsls	r0, r0, #6
   27e68:	4613      	mov	r3, r2
   27e6a:	f040 0001 	orr.w	r0, r0, #1
   27e6e:	4622      	mov	r2, r4
   27e70:	f015 fa46 	bl	3d300 <log_string_sync>
		return -EINVAL;
   27e74:	f06f 0015 	mvn.w	r0, #21
}
   27e78:	b003      	add	sp, #12
   27e7a:	bd30      	pop	{r4, r5, pc}
	if (!len) {
   27e7c:	b16a      	cbz	r2, 27e9a <flash_nrf_read+0x52>
	if (addr < PM_APP_ADDRESS) {
   27e7e:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
		return spm_request_read(data, addr, len);
   27e82:	4621      	mov	r1, r4
   27e84:	4628      	mov	r0, r5
	if (addr < PM_APP_ADDRESS) {
   27e86:	da04      	bge.n	27e92 <flash_nrf_read+0x4a>
}
   27e88:	b003      	add	sp, #12
   27e8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return spm_request_read(data, addr, len);
   27e8e:	f016 b8be 	b.w	3e00e <spm_request_read>
   27e92:	f019 ff04 	bl	41c9e <memcpy>
	return 0;
   27e96:	2000      	movs	r0, #0
   27e98:	e7ee      	b.n	27e78 <flash_nrf_read+0x30>
		return 0;
   27e9a:	4610      	mov	r0, r2
   27e9c:	e7ec      	b.n	27e78 <flash_nrf_read+0x30>
   27e9e:	bf00      	nop
   27ea0:	0004339c 	.word	0x0004339c
   27ea4:	0004341c 	.word	0x0004341c
   27ea8:	00046a9c 	.word	0x00046a9c

00027eac <flash_nrf_erase>:
{
   27eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27eae:	460d      	mov	r5, r1
   27eb0:	4614      	mov	r4, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27eb2:	f019 fd11 	bl	418d8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   27eb6:	4621      	mov	r1, r4
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27eb8:	4606      	mov	r6, r0
	if (is_regular_addr_valid(addr, size)) {
   27eba:	4628      	mov	r0, r5
   27ebc:	f016 fffe 	bl	3eebc <is_regular_addr_valid>
   27ec0:	462f      	mov	r7, r5
   27ec2:	b378      	cbz	r0, 27f24 <flash_nrf_erase+0x78>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   27ec4:	fbb5 f3f6 	udiv	r3, r5, r6
   27ec8:	fb06 5313 	mls	r3, r6, r3, r5
   27ecc:	b923      	cbnz	r3, 27ed8 <flash_nrf_erase+0x2c>
   27ece:	fbb4 f2f6 	udiv	r2, r4, r6
   27ed2:	fb06 4012 	mls	r0, r6, r2, r4
   27ed6:	b170      	cbz	r0, 27ef6 <flash_nrf_erase+0x4a>
   27ed8:	4b17      	ldr	r3, [pc, #92]	; (27f38 <flash_nrf_erase+0x8c>)
   27eda:	4818      	ldr	r0, [pc, #96]	; (27f3c <flash_nrf_erase+0x90>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   27edc:	462a      	mov	r2, r5
   27ede:	1ac0      	subs	r0, r0, r3
   27ee0:	4623      	mov	r3, r4
   27ee2:	08c0      	lsrs	r0, r0, #3
   27ee4:	4916      	ldr	r1, [pc, #88]	; (27f40 <flash_nrf_erase+0x94>)
   27ee6:	0180      	lsls	r0, r0, #6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   27ee8:	f040 0001 	orr.w	r0, r0, #1
   27eec:	f015 fa08 	bl	3d300 <log_string_sync>
		return -EINVAL;
   27ef0:	f06f 0015 	mvn.w	r0, #21
   27ef4:	e015      	b.n	27f22 <flash_nrf_erase+0x76>
		if (!n_pages) {
   27ef6:	42a6      	cmp	r6, r4
   27ef8:	d813      	bhi.n	27f22 <flash_nrf_erase+0x76>
	return z_impl_k_sem_take(sem, timeout);
   27efa:	f04f 32ff 	mov.w	r2, #4294967295
   27efe:	f04f 33ff 	mov.w	r3, #4294967295
   27f02:	4810      	ldr	r0, [pc, #64]	; (27f44 <flash_nrf_erase+0x98>)
   27f04:	f011 fa1a 	bl	3933c <z_impl_k_sem_take>

#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

static int erase_op(void *context)
{
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   27f08:	f019 fce6 	bl	418d8 <nrfx_nvmc_flash_page_size_get>
   27f0c:	4605      	mov	r5, r0
		if (nrfx_nvmc_page_partial_erase_continue()) {
			e_ctx->len -= pg_size;
			e_ctx->flash_addr += pg_size;
		}
#else
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   27f0e:	4638      	mov	r0, r7
   27f10:	f00e fef2 	bl	36cf8 <nrfx_nvmc_page_erase>
			}

		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

	} while (e_ctx->len > 0);
   27f14:	1b64      	subs	r4, r4, r5
   27f16:	442f      	add	r7, r5
   27f18:	d1f9      	bne.n	27f0e <flash_nrf_erase+0x62>
	z_impl_k_sem_give(sem);
   27f1a:	480a      	ldr	r0, [pc, #40]	; (27f44 <flash_nrf_erase+0x98>)
   27f1c:	f011 f9ca 	bl	392b4 <z_impl_k_sem_give>
	return ret;
   27f20:	4620      	mov	r0, r4
}
   27f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27f24:	4b04      	ldr	r3, [pc, #16]	; (27f38 <flash_nrf_erase+0x8c>)
   27f26:	4805      	ldr	r0, [pc, #20]	; (27f3c <flash_nrf_erase+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   27f28:	462a      	mov	r2, r5
   27f2a:	1ac0      	subs	r0, r0, r3
   27f2c:	08c0      	lsrs	r0, r0, #3
   27f2e:	4623      	mov	r3, r4
   27f30:	4905      	ldr	r1, [pc, #20]	; (27f48 <flash_nrf_erase+0x9c>)
   27f32:	0180      	lsls	r0, r0, #6
   27f34:	e7d8      	b.n	27ee8 <flash_nrf_erase+0x3c>
   27f36:	bf00      	nop
   27f38:	0004339c 	.word	0x0004339c
   27f3c:	0004341c 	.word	0x0004341c
   27f40:	00046ab9 	.word	0x00046ab9
   27f44:	20018e34 	.word	0x20018e34
   27f48:	00046a9c 	.word	0x00046a9c

00027f4c <nrf_flash_init>:
{
   27f4c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   27f4e:	2201      	movs	r2, #1
   27f50:	4806      	ldr	r0, [pc, #24]	; (27f6c <nrf_flash_init+0x20>)
   27f52:	4611      	mov	r1, r2
   27f54:	f019 fd44 	bl	419e0 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   27f58:	f019 fcc1 	bl	418de <nrfx_nvmc_flash_page_count_get>
   27f5c:	4c04      	ldr	r4, [pc, #16]	; (27f70 <nrf_flash_init+0x24>)
   27f5e:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   27f60:	f019 fcba 	bl	418d8 <nrfx_nvmc_flash_page_size_get>
   27f64:	6060      	str	r0, [r4, #4]
}
   27f66:	2000      	movs	r0, #0
   27f68:	bd10      	pop	{r4, pc}
   27f6a:	bf00      	nop
   27f6c:	20018e34 	.word	0x20018e34
   27f70:	20018e2c 	.word	0x20018e2c

00027f74 <flash_nrf_write>:
{
   27f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27f76:	460e      	mov	r6, r1
	if (is_regular_addr_valid(addr, len)) {
   27f78:	4619      	mov	r1, r3
   27f7a:	4630      	mov	r0, r6
{
   27f7c:	4617      	mov	r7, r2
   27f7e:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   27f80:	f016 ff9c 	bl	3eebc <is_regular_addr_valid>
   27f84:	b970      	cbnz	r0, 27fa4 <flash_nrf_write+0x30>
   27f86:	4b1e      	ldr	r3, [pc, #120]	; (28000 <flash_nrf_write+0x8c>)
   27f88:	481e      	ldr	r0, [pc, #120]	; (28004 <flash_nrf_write+0x90>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   27f8a:	4632      	mov	r2, r6
   27f8c:	1ac0      	subs	r0, r0, r3
   27f8e:	4623      	mov	r3, r4
   27f90:	08c0      	lsrs	r0, r0, #3
   27f92:	491d      	ldr	r1, [pc, #116]	; (28008 <flash_nrf_write+0x94>)
   27f94:	0180      	lsls	r0, r0, #6
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   27f96:	f040 0001 	orr.w	r0, r0, #1
   27f9a:	f015 f9b1 	bl	3d300 <log_string_sync>
		return -EINVAL;
   27f9e:	f06f 0015 	mvn.w	r0, #21
}
   27fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (data & 0x3) ? false : true;
   27fa4:	ea46 0504 	orr.w	r5, r6, r4
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   27fa8:	f015 0503 	ands.w	r5, r5, #3
   27fac:	d008      	beq.n	27fc0 <flash_nrf_write+0x4c>
   27fae:	4b14      	ldr	r3, [pc, #80]	; (28000 <flash_nrf_write+0x8c>)
   27fb0:	4814      	ldr	r0, [pc, #80]	; (28004 <flash_nrf_write+0x90>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   27fb2:	4632      	mov	r2, r6
   27fb4:	1ac0      	subs	r0, r0, r3
   27fb6:	08c0      	lsrs	r0, r0, #3
   27fb8:	4623      	mov	r3, r4
   27fba:	4914      	ldr	r1, [pc, #80]	; (2800c <flash_nrf_write+0x98>)
   27fbc:	0180      	lsls	r0, r0, #6
   27fbe:	e7ea      	b.n	27f96 <flash_nrf_write+0x22>
	if (!len) {
   27fc0:	b1dc      	cbz	r4, 27ffa <flash_nrf_write+0x86>
	return z_impl_k_sem_take(sem, timeout);
   27fc2:	f04f 32ff 	mov.w	r2, #4294967295
   27fc6:	f04f 33ff 	mov.w	r3, #4294967295
   27fca:	4811      	ldr	r0, [pc, #68]	; (28010 <flash_nrf_write+0x9c>)
   27fcc:	f011 f9b6 	bl	3933c <z_impl_k_sem_take>
	w_ctx->flash_addr += shift;
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
   27fd0:	f024 0403 	bic.w	r4, r4, #3
		}
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	/* Write all the 4-byte aligned data */
	while (w_ctx->len >= sizeof(uint32_t)) {
   27fd4:	42a5      	cmp	r5, r4
   27fd6:	eb05 0006 	add.w	r0, r5, r6
   27fda:	d109      	bne.n	27ff0 <flash_nrf_write+0x7c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   27fdc:	4a0d      	ldr	r2, [pc, #52]	; (28014 <flash_nrf_write+0xa0>)
   27fde:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   27fe2:	07db      	lsls	r3, r3, #31
   27fe4:	d5fb      	bpl.n	27fde <flash_nrf_write+0x6a>
	z_impl_k_sem_give(sem);
   27fe6:	480a      	ldr	r0, [pc, #40]	; (28010 <flash_nrf_write+0x9c>)
   27fe8:	f011 f964 	bl	392b4 <z_impl_k_sem_give>
	return ret;
   27fec:	2000      	movs	r0, #0
}
   27fee:	e7d8      	b.n	27fa2 <flash_nrf_write+0x2e>
		if (SUSPEND_POFWARN()) {
			return -ECANCELED;
		}

		nrfx_nvmc_word_write(w_ctx->flash_addr,
   27ff0:	5979      	ldr	r1, [r7, r5]
   27ff2:	f00e feb3 	bl	36d5c <nrfx_nvmc_word_write>
	w_ctx->len -= shift;
   27ff6:	3504      	adds	r5, #4
}
   27ff8:	e7ec      	b.n	27fd4 <flash_nrf_write+0x60>
		return 0;
   27ffa:	4620      	mov	r0, r4
   27ffc:	e7d1      	b.n	27fa2 <flash_nrf_write+0x2e>
   27ffe:	bf00      	nop
   28000:	0004339c 	.word	0x0004339c
   28004:	0004341c 	.word	0x0004341c
   28008:	00046a9c 	.word	0x00046a9c
   2800c:	00046ad8 	.word	0x00046ad8
   28010:	20018e34 	.word	0x20018e34
   28014:	40039000 	.word	0x40039000

00028018 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   28018:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   2801a:	794b      	ldrb	r3, [r1, #5]
   2801c:	2b01      	cmp	r3, #1
   2801e:	d029      	beq.n	28074 <uarte_nrfx_configure+0x5c>
   28020:	2b03      	cmp	r3, #3
   28022:	d124      	bne.n	2806e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   28024:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   28026:	798b      	ldrb	r3, [r1, #6]
   28028:	2b03      	cmp	r3, #3
   2802a:	d120      	bne.n	2806e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2802c:	79cc      	ldrb	r4, [r1, #7]
   2802e:	b124      	cbz	r4, 2803a <uarte_nrfx_configure+0x22>
   28030:	2c01      	cmp	r4, #1
   28032:	d11c      	bne.n	2806e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   28034:	6843      	ldr	r3, [r0, #4]
   28036:	791b      	ldrb	r3, [r3, #4]
   28038:	b1cb      	cbz	r3, 2806e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   2803a:	790a      	ldrb	r2, [r1, #4]
   2803c:	b112      	cbz	r2, 28044 <uarte_nrfx_configure+0x2c>
   2803e:	2a02      	cmp	r2, #2
   28040:	d115      	bne.n	2806e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   28042:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   28044:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   28046:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   28048:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2804c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2804e:	d065      	beq.n	2811c <uarte_nrfx_configure+0x104>
   28050:	d82d      	bhi.n	280ae <uarte_nrfx_configure+0x96>
   28052:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   28056:	d064      	beq.n	28122 <uarte_nrfx_configure+0x10a>
   28058:	d816      	bhi.n	28088 <uarte_nrfx_configure+0x70>
   2805a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2805e:	d062      	beq.n	28126 <uarte_nrfx_configure+0x10e>
   28060:	d80a      	bhi.n	28078 <uarte_nrfx_configure+0x60>
   28062:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   28066:	d061      	beq.n	2812c <uarte_nrfx_configure+0x114>
   28068:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2806c:	d061      	beq.n	28132 <uarte_nrfx_configure+0x11a>
   2806e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28072:	e052      	b.n	2811a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   28074:	2600      	movs	r6, #0
   28076:	e7d6      	b.n	28026 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   28078:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2807c:	d05c      	beq.n	28138 <uarte_nrfx_configure+0x120>
   2807e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   28082:	d1f4      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   28084:	4b37      	ldr	r3, [pc, #220]	; (28164 <uarte_nrfx_configure+0x14c>)
   28086:	e03c      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28088:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2808c:	d057      	beq.n	2813e <uarte_nrfx_configure+0x126>
   2808e:	d807      	bhi.n	280a0 <uarte_nrfx_configure+0x88>
   28090:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   28094:	d055      	beq.n	28142 <uarte_nrfx_configure+0x12a>
   28096:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   2809a:	d1e8      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2809c:	4b32      	ldr	r3, [pc, #200]	; (28168 <uarte_nrfx_configure+0x150>)
   2809e:	e030      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   280a0:	f647 2712 	movw	r7, #31250	; 0x7a12
   280a4:	42bb      	cmp	r3, r7
   280a6:	d1e2      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   280a8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   280ac:	e029      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   280ae:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   280b2:	d048      	beq.n	28146 <uarte_nrfx_configure+0x12e>
   280b4:	d813      	bhi.n	280de <uarte_nrfx_configure+0xc6>
   280b6:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   280ba:	d047      	beq.n	2814c <uarte_nrfx_configure+0x134>
   280bc:	d809      	bhi.n	280d2 <uarte_nrfx_configure+0xba>
   280be:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   280c2:	42bb      	cmp	r3, r7
   280c4:	d044      	beq.n	28150 <uarte_nrfx_configure+0x138>
   280c6:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   280ca:	d1d0      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   280cc:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   280d0:	e017      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   280d2:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   280d6:	d1ca      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   280d8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   280dc:	e011      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   280de:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   280e2:	d038      	beq.n	28156 <uarte_nrfx_configure+0x13e>
   280e4:	d808      	bhi.n	280f8 <uarte_nrfx_configure+0xe0>
   280e6:	4f21      	ldr	r7, [pc, #132]	; (2816c <uarte_nrfx_configure+0x154>)
   280e8:	42bb      	cmp	r3, r7
   280ea:	d037      	beq.n	2815c <uarte_nrfx_configure+0x144>
   280ec:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   280f0:	d1bd      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   280f2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   280f6:	e004      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   280f8:	4f1d      	ldr	r7, [pc, #116]	; (28170 <uarte_nrfx_configure+0x158>)
   280fa:	42bb      	cmp	r3, r7
   280fc:	d1b7      	bne.n	2806e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   280fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   28102:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   28106:	68c3      	ldr	r3, [r0, #12]
                    | (uint32_t)p_cfg->hwfc;
   28108:	4334      	orrs	r4, r6
   2810a:	4322      	orrs	r2, r4
   2810c:	3304      	adds	r3, #4
   2810e:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   28110:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   28114:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   28118:	2000      	movs	r0, #0
}
   2811a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   2811c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   28120:	e7ef      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   28122:	4b14      	ldr	r3, [pc, #80]	; (28174 <uarte_nrfx_configure+0x15c>)
   28124:	e7ed      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   28126:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   2812a:	e7ea      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   2812c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   28130:	e7e7      	b.n	28102 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   28132:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   28136:	e7e4      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   28138:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2813c:	e7e1      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2813e:	4b0e      	ldr	r3, [pc, #56]	; (28178 <uarte_nrfx_configure+0x160>)
   28140:	e7df      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   28142:	4b0e      	ldr	r3, [pc, #56]	; (2817c <uarte_nrfx_configure+0x164>)
   28144:	e7dd      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   28146:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   2814a:	e7da      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2814c:	4b0c      	ldr	r3, [pc, #48]	; (28180 <uarte_nrfx_configure+0x168>)
   2814e:	e7d8      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   28150:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   28154:	e7d5      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   28156:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2815a:	e7d2      	b.n	28102 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2815c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   28160:	e7cf      	b.n	28102 <uarte_nrfx_configure+0xea>
   28162:	bf00      	nop
   28164:	0013b000 	.word	0x0013b000
   28168:	004ea000 	.word	0x004ea000
   2816c:	0003d090 	.word	0x0003d090
   28170:	000f4240 	.word	0x000f4240
   28174:	00275000 	.word	0x00275000
   28178:	0075c000 	.word	0x0075c000
   2817c:	003af000 	.word	0x003af000
   28180:	013a9000 	.word	0x013a9000

00028184 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   28184:	6803      	ldr	r3, [r0, #0]
{
   28186:	b510      	push	{r4, lr}
    switch (port)
   28188:	095a      	lsrs	r2, r3, #5
   2818a:	bf0c      	ite	eq
   2818c:	f04f 32ff 	moveq.w	r2, #4294967295
   28190:	2200      	movne	r2, #0
    pin_number &= 0x1F;
   28192:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   28196:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2819a:	07db      	lsls	r3, r3, #31
{
   2819c:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   2819e:	d40b      	bmi.n	281b8 <nrf_gpio_pin_port_decode+0x34>
   281a0:	490f      	ldr	r1, [pc, #60]	; (281e0 <nrf_gpio_pin_port_decode+0x5c>)
   281a2:	4810      	ldr	r0, [pc, #64]	; (281e4 <nrf_gpio_pin_port_decode+0x60>)
   281a4:	f240 231a 	movw	r3, #538	; 0x21a
   281a8:	4a0f      	ldr	r2, [pc, #60]	; (281e8 <nrf_gpio_pin_port_decode+0x64>)
   281aa:	f014 fde4 	bl	3cd76 <printk>
   281ae:	f240 211a 	movw	r1, #538	; 0x21a
   281b2:	480d      	ldr	r0, [pc, #52]	; (281e8 <nrf_gpio_pin_port_decode+0x64>)
   281b4:	f015 f893 	bl	3d2de <assert_post_action>
    uint32_t pin_number = *p_pin;
   281b8:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   281ba:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   281be:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   281c0:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   281c2:	d00b      	beq.n	281dc <nrf_gpio_pin_port_decode+0x58>
            NRFX_ASSERT(0);
   281c4:	4909      	ldr	r1, [pc, #36]	; (281ec <nrf_gpio_pin_port_decode+0x68>)
   281c6:	4807      	ldr	r0, [pc, #28]	; (281e4 <nrf_gpio_pin_port_decode+0x60>)
   281c8:	f240 231f 	movw	r3, #543	; 0x21f
   281cc:	4a06      	ldr	r2, [pc, #24]	; (281e8 <nrf_gpio_pin_port_decode+0x64>)
   281ce:	f014 fdd2 	bl	3cd76 <printk>
   281d2:	f240 211f 	movw	r1, #543	; 0x21f
   281d6:	4804      	ldr	r0, [pc, #16]	; (281e8 <nrf_gpio_pin_port_decode+0x64>)
   281d8:	f015 f881 	bl	3d2de <assert_post_action>
}
   281dc:	4804      	ldr	r0, [pc, #16]	; (281f0 <nrf_gpio_pin_port_decode+0x6c>)
   281de:	bd10      	pop	{r4, pc}
   281e0:	00046a66 	.word	0x00046a66
   281e4:	00044dbf 	.word	0x00044dbf
   281e8:	00046a33 	.word	0x00046a33
   281ec:	0004bcc7 	.word	0x0004bcc7
   281f0:	40842500 	.word	0x40842500

000281f4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   281f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   281f8:	4606      	mov	r6, r0
   281fa:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   281fc:	68c7      	ldr	r7, [r0, #12]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   281fe:	f019 fbff 	bl	41a00 <k_is_in_isr>
   28202:	b9b8      	cbnz	r0, 28234 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   28204:	4b28      	ldr	r3, [pc, #160]	; (282a8 <uarte_nrfx_poll_out+0xb4>)
   28206:	781b      	ldrb	r3, [r3, #0]
   28208:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   2820c:	6872      	ldr	r2, [r6, #4]
   2820e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   28210:	b193      	cbz	r3, 28238 <uarte_nrfx_poll_out+0x44>
   28212:	f04f 0320 	mov.w	r3, #32
   28216:	f3ef 8411 	mrs	r4, BASEPRI
   2821a:	f383 8811 	msr	BASEPRI, r3
   2821e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   28222:	4630      	mov	r0, r6
   28224:	f016 ff1d 	bl	3f062 <is_tx_ready>
   28228:	bb38      	cbnz	r0, 2827a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   2822a:	f384 8811 	msr	BASEPRI, r4
   2822e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   28232:	e7ee      	b.n	28212 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   28234:	2301      	movs	r3, #1
   28236:	e7e9      	b.n	2820c <uarte_nrfx_poll_out+0x18>
   28238:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2823a:	4630      	mov	r0, r6
   2823c:	f016 ff11 	bl	3f062 <is_tx_ready>
   28240:	b970      	cbnz	r0, 28260 <uarte_nrfx_poll_out+0x6c>
   28242:	2001      	movs	r0, #1
   28244:	f019 fb43 	bl	418ce <nrfx_busy_wait>
   28248:	3c01      	subs	r4, #1
   2824a:	d1f6      	bne.n	2823a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   2824c:	2100      	movs	r1, #0
   2824e:	2021      	movs	r0, #33	; 0x21
   28250:	f010 fff2 	bl	39238 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   28254:	e7f0      	b.n	28238 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   28256:	f384 8811 	msr	BASEPRI, r4
   2825a:	f3bf 8f6f 	isb	sy
}
   2825e:	e7f5      	b.n	2824c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   28260:	f04f 0320 	mov.w	r3, #32
   28264:	f3ef 8411 	mrs	r4, BASEPRI
   28268:	f383 8811 	msr	BASEPRI, r3
   2826c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   28270:	4630      	mov	r0, r6
   28272:	f016 fef6 	bl	3f062 <is_tx_ready>
   28276:	2800      	cmp	r0, #0
   28278:	d0ed      	beq.n	28256 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   2827a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2827c:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   2827e:	f807 8f14 	strb.w	r8, [r7, #20]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   28282:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28286:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2828a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   2828e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   28292:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   28296:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2829a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   2829c:	f384 8811 	msr	BASEPRI, r4
   282a0:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   282a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   282a8:	20020e54 	.word	0x20020e54

000282ac <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   282ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   282b0:	f04f 0800 	mov.w	r8, #0
	return config->uarte_regs;
   282b4:	6843      	ldr	r3, [r0, #4]
			       const struct uarte_init_config *config,
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   282b6:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   282b8:	681c      	ldr	r4, [r3, #0]
   282ba:	680b      	ldr	r3, [r1, #0]
   282bc:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   282c0:	4606      	mov	r6, r0

	nrf_uarte_disable(uarte);

	data->dev = dev;
   282c2:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   282c4:	a801      	add	r0, sp, #4
static int uarte_instance_init(const struct device *dev,
   282c6:	460d      	mov	r5, r1
   282c8:	9301      	str	r3, [sp, #4]
   282ca:	f7ff ff5b 	bl	28184 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   282ce:	2301      	movs	r3, #1
   282d0:	9a01      	ldr	r2, [sp, #4]
   282d2:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   282d4:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   282d6:	682b      	ldr	r3, [r5, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   282d8:	a801      	add	r0, sp, #4
   282da:	9301      	str	r3, [sp, #4]
   282dc:	f7ff ff52 	bl	28184 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   282e0:	2203      	movs	r2, #3
   282e2:	9b01      	ldr	r3, [sp, #4]
   282e4:	3380      	adds	r3, #128	; 0x80
   282e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   282ea:	686b      	ldr	r3, [r5, #4]
   282ec:	1c58      	adds	r0, r3, #1
   282ee:	d007      	beq.n	28300 <uarte_instance_init.isra.0+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   282f0:	a801      	add	r0, sp, #4
   282f2:	9301      	str	r3, [sp, #4]
   282f4:	f7ff ff46 	bl	28184 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   282f8:	9b01      	ldr	r3, [sp, #4]
   282fa:	3380      	adds	r3, #128	; 0x80
   282fc:	f840 8023 	str.w	r8, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   28300:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   28304:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   28308:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   2830c:	68ab      	ldr	r3, [r5, #8]
   2830e:	1c59      	adds	r1, r3, #1
   28310:	d008      	beq.n	28324 <uarte_instance_init.isra.0+0x78>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   28312:	a801      	add	r0, sp, #4
   28314:	9301      	str	r3, [sp, #4]
   28316:	f7ff ff35 	bl	28184 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   2831a:	2200      	movs	r2, #0
   2831c:	9b01      	ldr	r3, [sp, #4]
   2831e:	3380      	adds	r3, #128	; 0x80
   28320:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   28324:	68eb      	ldr	r3, [r5, #12]
   28326:	1c5a      	adds	r2, r3, #1
   28328:	d011      	beq.n	2834e <uarte_instance_init.isra.0+0xa2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2832a:	a801      	add	r0, sp, #4
   2832c:	9301      	str	r3, [sp, #4]
   2832e:	f7ff ff29 	bl	28184 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28332:	2301      	movs	r3, #1
   28334:	9a01      	ldr	r2, [sp, #4]
   28336:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   28338:	6083      	str	r3, [r0, #8]
    nrf_gpio_cfg(
   2833a:	68eb      	ldr	r3, [r5, #12]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2833c:	a801      	add	r0, sp, #4
   2833e:	9301      	str	r3, [sp, #4]
   28340:	f7ff ff20 	bl	28184 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   28344:	2203      	movs	r2, #3
   28346:	9b01      	ldr	r3, [sp, #4]
   28348:	3380      	adds	r3, #128	; 0x80
   2834a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2834e:	68f1      	ldr	r1, [r6, #12]
	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   28350:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   28354:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   28356:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   2835a:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   2835c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   28360:	f7ff fe5a 	bl	28018 <uarte_nrfx_configure>
	if (err) {
   28364:	4680      	mov	r8, r0
   28366:	b9b0      	cbnz	r0, 28396 <uarte_instance_init.isra.0+0xea>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   28368:	6873      	ldr	r3, [r6, #4]
   2836a:	799b      	ldrb	r3, [r3, #6]
   2836c:	2b00      	cmp	r3, #0
   2836e:	d042      	beq.n	283f6 <uarte_instance_init.isra.0+0x14a>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   28370:	f107 0016 	add.w	r0, r7, #22
   28374:	f00e fb3c 	bl	369f0 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   28378:	4b31      	ldr	r3, [pc, #196]	; (28440 <uarte_instance_init.isra.0+0x194>)
   2837a:	4298      	cmp	r0, r3
   2837c:	d00f      	beq.n	2839e <uarte_instance_init.isra.0+0xf2>
   2837e:	4b31      	ldr	r3, [pc, #196]	; (28444 <uarte_instance_init.isra.0+0x198>)
   28380:	4831      	ldr	r0, [pc, #196]	; (28448 <uarte_instance_init.isra.0+0x19c>)
		LOG_ERR("Failed to allocate PPI Channel");
   28382:	4932      	ldr	r1, [pc, #200]	; (2844c <uarte_instance_init.isra.0+0x1a0>)
   28384:	1ac0      	subs	r0, r0, r3
   28386:	08c0      	lsrs	r0, r0, #3
   28388:	0180      	lsls	r0, r0, #6
   2838a:	f040 0001 	orr.w	r0, r0, #1
   2838e:	f014 ffb7 	bl	3d300 <log_string_sync>
		return -EIO;
   28392:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   28396:	4640      	mov	r0, r8
   28398:	b002      	add	sp, #8
   2839a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    nrf_dppi_task_trigger(NRF_DPPIC, (nrf_dppi_task_t)task);
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
   2839e:	f514 7a90 	adds.w	sl, r4, #288	; 0x120
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   283a2:	f897 9016 	ldrb.w	r9, [r7, #22]
   283a6:	d10b      	bne.n	283c0 <uarte_instance_init.isra.0+0x114>
   283a8:	4929      	ldr	r1, [pc, #164]	; (28450 <uarte_instance_init.isra.0+0x1a4>)
   283aa:	482a      	ldr	r0, [pc, #168]	; (28454 <uarte_instance_init.isra.0+0x1a8>)
   283ac:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   283b0:	4a29      	ldr	r2, [pc, #164]	; (28458 <uarte_instance_init.isra.0+0x1ac>)
   283b2:	f014 fce0 	bl	3cd76 <printk>
   283b6:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
   283ba:	4827      	ldr	r0, [pc, #156]	; (28458 <uarte_instance_init.isra.0+0x1ac>)
   283bc:	f014 ff8f 	bl	3d2de <assert_post_action>
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   283c0:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
   283c4:	f114 0f0c 	cmn.w	r4, #12
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   283c8:	f8ca 9080 	str.w	r9, [sl, #128]	; 0x80
    NRFX_ASSERT(tep);
   283cc:	d10b      	bne.n	283e6 <uarte_instance_init.isra.0+0x13a>
   283ce:	4923      	ldr	r1, [pc, #140]	; (2845c <uarte_instance_init.isra.0+0x1b0>)
   283d0:	4820      	ldr	r0, [pc, #128]	; (28454 <uarte_instance_init.isra.0+0x1a8>)
   283d2:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
   283d6:	4a20      	ldr	r2, [pc, #128]	; (28458 <uarte_instance_init.isra.0+0x1ac>)
   283d8:	f014 fccd 	bl	3cd76 <printk>
   283dc:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
   283e0:	481d      	ldr	r0, [pc, #116]	; (28458 <uarte_instance_init.isra.0+0x1ac>)
   283e2:	f014 ff7c 	bl	3d2de <assert_post_action>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   283e6:	2301      	movs	r3, #1
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
   283e8:	f8c4 908c 	str.w	r9, [r4, #140]	; 0x8c
   283ec:	7dba      	ldrb	r2, [r7, #22]
   283ee:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   283f0:	4a1b      	ldr	r2, [pc, #108]	; (28460 <uarte_instance_init.isra.0+0x1b4>)
   283f2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   283f6:	2308      	movs	r3, #8
   283f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   283fc:	686b      	ldr	r3, [r5, #4]
   283fe:	3301      	adds	r3, #1
   28400:	d00c      	beq.n	2841c <uarte_instance_init.isra.0+0x170>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   28402:	2300      	movs	r3, #0
   28404:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   28408:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2840c:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   28410:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   28414:	2301      	movs	r3, #1
   28416:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2841a:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   2841c:	6873      	ldr	r3, [r6, #4]
   2841e:	799b      	ldrb	r3, [r3, #6]
   28420:	b91b      	cbnz	r3, 2842a <uarte_instance_init.isra.0+0x17e>
    p_reg->INTENSET = mask;
   28422:	f44f 7380 	mov.w	r3, #256	; 0x100
   28426:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   2842a:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2842c:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2842e:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   28432:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   28436:	2301      	movs	r3, #1
   28438:	60a3      	str	r3, [r4, #8]
   2843a:	60e3      	str	r3, [r4, #12]
	return 0;
   2843c:	e7ab      	b.n	28396 <uarte_instance_init.isra.0+0xea>
   2843e:	bf00      	nop
   28440:	0bad0000 	.word	0x0bad0000
   28444:	0004339c 	.word	0x0004339c
   28448:	000434e4 	.word	0x000434e4
   2844c:	00046b00 	.word	0x00046b00
   28450:	00046b57 	.word	0x00046b57
   28454:	00044dbf 	.word	0x00044dbf
   28458:	00046b1f 	.word	0x00046b1f
   2845c:	00046b5b 	.word	0x00046b5b
   28460:	40017000 	.word	0x40017000

00028464 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   28464:	b530      	push	{r4, r5, lr}
   28466:	b085      	sub	sp, #20
   28468:	466c      	mov	r4, sp
   2846a:	4605      	mov	r5, r0
   2846c:	4b08      	ldr	r3, [pc, #32]	; (28490 <uarte_0_init+0x2c>)
   2846e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   28470:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   28474:	2200      	movs	r2, #0
   28476:	2101      	movs	r1, #1
   28478:	2008      	movs	r0, #8
   2847a:	f7fe f861 	bl	26540 <z_arm_irq_priority_set>
   2847e:	2008      	movs	r0, #8
   28480:	f7fe f840 	bl	26504 <arch_irq_enable>
   28484:	4621      	mov	r1, r4
   28486:	4628      	mov	r0, r5
   28488:	f7ff ff10 	bl	282ac <uarte_instance_init.isra.0>
   2848c:	b005      	add	sp, #20
   2848e:	bd30      	pop	{r4, r5, pc}
   28490:	00043538 	.word	0x00043538

00028494 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   28494:	b530      	push	{r4, r5, lr}
   28496:	b085      	sub	sp, #20
   28498:	466c      	mov	r4, sp
   2849a:	4605      	mov	r5, r0
   2849c:	4b08      	ldr	r3, [pc, #32]	; (284c0 <uarte_1_init+0x2c>)
   2849e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   284a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   284a4:	2200      	movs	r2, #0
   284a6:	2101      	movs	r1, #1
   284a8:	2009      	movs	r0, #9
   284aa:	f7fe f849 	bl	26540 <z_arm_irq_priority_set>
   284ae:	2009      	movs	r0, #9
   284b0:	f7fe f828 	bl	26504 <arch_irq_enable>
   284b4:	4621      	mov	r1, r4
   284b6:	4628      	mov	r0, r5
   284b8:	f7ff fef8 	bl	282ac <uarte_instance_init.isra.0>
   284bc:	b005      	add	sp, #20
   284be:	bd30      	pop	{r4, r5, pc}
   284c0:	00043548 	.word	0x00043548

000284c4 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   284c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   284c8:	460e      	mov	r6, r1
   284ca:	4614      	mov	r4, r2
   284cc:	b0a6      	sub	sp, #152	; 0x98
	int res = -EINVAL;
	size_t olen;

	__ASSERT_NO_MSG(dev != NULL);
   284ce:	b948      	cbnz	r0, 284e4 <entropy_cc3xx_rng_get_entropy+0x20>
   284d0:	491c      	ldr	r1, [pc, #112]	; (28544 <entropy_cc3xx_rng_get_entropy+0x80>)
   284d2:	481d      	ldr	r0, [pc, #116]	; (28548 <entropy_cc3xx_rng_get_entropy+0x84>)
   284d4:	231f      	movs	r3, #31
   284d6:	4a1d      	ldr	r2, [pc, #116]	; (2854c <entropy_cc3xx_rng_get_entropy+0x88>)
   284d8:	f014 fc4d 	bl	3cd76 <printk>
   284dc:	211f      	movs	r1, #31
   284de:	481b      	ldr	r0, [pc, #108]	; (2854c <entropy_cc3xx_rng_get_entropy+0x88>)
   284e0:	f014 fefd 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   284e4:	b94e      	cbnz	r6, 284fa <entropy_cc3xx_rng_get_entropy+0x36>
   284e6:	491a      	ldr	r1, [pc, #104]	; (28550 <entropy_cc3xx_rng_get_entropy+0x8c>)
   284e8:	4817      	ldr	r0, [pc, #92]	; (28548 <entropy_cc3xx_rng_get_entropy+0x84>)
   284ea:	2320      	movs	r3, #32
   284ec:	4a17      	ldr	r2, [pc, #92]	; (2854c <entropy_cc3xx_rng_get_entropy+0x88>)
   284ee:	f014 fc42 	bl	3cd76 <printk>
   284f2:	2120      	movs	r1, #32
   284f4:	4815      	ldr	r0, [pc, #84]	; (2854c <entropy_cc3xx_rng_get_entropy+0x88>)
   284f6:	f014 fef2 	bl	3d2de <assert_post_action>
{
   284fa:	2700      	movs	r7, #0
   284fc:	f06f 0515 	mvn.w	r5, #21
			       */

	/** This is a call from a non-secure app that enables secure services,
	 *  in which case entropy is gathered by calling through SPM
	 */
	while (length > 0) {
   28500:	b91c      	cbnz	r4, 2850a <entropy_cc3xx_rng_get_entropy+0x46>
		return -EINVAL;
	}
#endif

	return res;
}
   28502:	4628      	mov	r0, r5
   28504:	b026      	add	sp, #152	; 0x98
   28506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		res = spm_request_random_number(spm_buf, sizeof(spm_buf),
   2850a:	2190      	movs	r1, #144	; 0x90
   2850c:	aa01      	add	r2, sp, #4
   2850e:	a802      	add	r0, sp, #8
   28510:	f015 fd71 	bl	3dff6 <spm_request_random_number>
		if (res < 0) {
   28514:	1e05      	subs	r5, r0, #0
   28516:	dbf4      	blt.n	28502 <entropy_cc3xx_rng_get_entropy+0x3e>
		if (olen != sizeof(spm_buf)) {
   28518:	9b01      	ldr	r3, [sp, #4]
   2851a:	2b90      	cmp	r3, #144	; 0x90
   2851c:	d10e      	bne.n	2853c <entropy_cc3xx_rng_get_entropy+0x78>
		to_copy = MIN(length, sizeof(spm_buf));
   2851e:	2c90      	cmp	r4, #144	; 0x90
   28520:	46a0      	mov	r8, r4
   28522:	bf28      	it	cs
   28524:	f04f 0890 	movcs.w	r8, #144	; 0x90
   28528:	19f0      	adds	r0, r6, r7
   2852a:	4642      	mov	r2, r8
   2852c:	a902      	add	r1, sp, #8
		length -= to_copy;
   2852e:	eba4 0408 	sub.w	r4, r4, r8
   28532:	f019 fbb4 	bl	41c9e <memcpy>
   28536:	b2a4      	uxth	r4, r4
		offset += to_copy;
   28538:	4447      	add	r7, r8
   2853a:	e7e1      	b.n	28500 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   2853c:	f06f 0515 	mvn.w	r5, #21
   28540:	e7df      	b.n	28502 <entropy_cc3xx_rng_get_entropy+0x3e>
   28542:	bf00      	nop
   28544:	00046ba6 	.word	0x00046ba6
   28548:	00044dbf 	.word	0x00044dbf
   2854c:	00046b76 	.word	0x00046b76
   28550:	00046bb9 	.word	0x00046bb9

00028554 <parse_string>:
{
   28554:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28558:	680a      	ldr	r2, [r1, #0]
   2855a:	688b      	ldr	r3, [r1, #8]
{
   2855c:	4680      	mov	r8, r0
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2855e:	1c5d      	adds	r5, r3, #1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   28560:	18d0      	adds	r0, r2, r3
   28562:	5cd3      	ldrb	r3, [r2, r3]
{
   28564:	468a      	mov	sl, r1
    if (buffer_at_offset(input_buffer)[0] != '\"')
   28566:	2b22      	cmp	r3, #34	; 0x22
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   28568:	4415      	add	r5, r2
    if (buffer_at_offset(input_buffer)[0] != '\"')
   2856a:	f040 80de 	bne.w	2872a <parse_string+0x1d6>
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
   2856e:	462f      	mov	r7, r5
        size_t skipped_bytes = 0;
   28570:	2300      	movs	r3, #0
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
   28572:	684c      	ldr	r4, [r1, #4]
   28574:	1ab9      	subs	r1, r7, r2
   28576:	42a1      	cmp	r1, r4
   28578:	f080 80d7 	bcs.w	2872a <parse_string+0x1d6>
   2857c:	7839      	ldrb	r1, [r7, #0]
   2857e:	2922      	cmp	r1, #34	; 0x22
   28580:	d10e      	bne.n	285a0 <parse_string+0x4c>
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   28582:	f1c3 0301 	rsb	r3, r3, #1
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
   28586:	1a38      	subs	r0, r7, r0
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   28588:	f8da 2010 	ldr.w	r2, [sl, #16]
   2858c:	4418      	add	r0, r3
   2858e:	4790      	blx	r2
        if (output == NULL)
   28590:	4683      	mov	fp, r0
   28592:	2800      	cmp	r0, #0
   28594:	f000 80c9 	beq.w	2872a <parse_string+0x1d6>
   28598:	4604      	mov	r4, r0
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   2859a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 28734 <parse_string+0x1e0>
   2859e:	e00f      	b.n	285c0 <parse_string+0x6c>
            if (input_end[0] == '\\')
   285a0:	295c      	cmp	r1, #92	; 0x5c
   285a2:	d105      	bne.n	285b0 <parse_string+0x5c>
   285a4:	3701      	adds	r7, #1
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   285a6:	1ab9      	subs	r1, r7, r2
   285a8:	428c      	cmp	r4, r1
   285aa:	f240 80be 	bls.w	2872a <parse_string+0x1d6>
                skipped_bytes++;
   285ae:	3301      	adds	r3, #1
            input_end++;
   285b0:	3701      	adds	r7, #1
   285b2:	e7df      	b.n	28574 <parse_string+0x20>
        if (*input_pointer != '\\')
   285b4:	782b      	ldrb	r3, [r5, #0]
   285b6:	2b5c      	cmp	r3, #92	; 0x5c
   285b8:	d012      	beq.n	285e0 <parse_string+0x8c>
            *output_pointer++ = *input_pointer++;
   285ba:	3501      	adds	r5, #1
   285bc:	f804 3b01 	strb.w	r3, [r4], #1
    while (input_pointer < input_end)
   285c0:	42bd      	cmp	r5, r7
   285c2:	d3f7      	bcc.n	285b4 <parse_string+0x60>
    *output_pointer = '\0';
   285c4:	2300      	movs	r3, #0
   285c6:	7023      	strb	r3, [r4, #0]
    item->type = cJSON_String;
   285c8:	2310      	movs	r3, #16
    return true;
   285ca:	2001      	movs	r0, #1
    item->valuestring = (char*)output;
   285cc:	e9c8 3b03 	strd	r3, fp, [r8, #12]
    input_buffer->offset = (size_t) (input_end - input_buffer->content);
   285d0:	f8da 3000 	ldr.w	r3, [sl]
   285d4:	1aff      	subs	r7, r7, r3
    input_buffer->offset++;
   285d6:	3701      	adds	r7, #1
   285d8:	f8ca 7008 	str.w	r7, [sl, #8]
}
   285dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if ((input_end - input_pointer) < 1)
   285e0:	1b7a      	subs	r2, r7, r5
   285e2:	2a00      	cmp	r2, #0
   285e4:	dd0d      	ble.n	28602 <parse_string+0xae>
            switch (input_pointer[1])
   285e6:	786b      	ldrb	r3, [r5, #1]
   285e8:	2b75      	cmp	r3, #117	; 0x75
   285ea:	d80a      	bhi.n	28602 <parse_string+0xae>
   285ec:	2b6d      	cmp	r3, #109	; 0x6d
   285ee:	d812      	bhi.n	28616 <parse_string+0xc2>
   285f0:	2b62      	cmp	r3, #98	; 0x62
   285f2:	d02b      	beq.n	2864c <parse_string+0xf8>
   285f4:	d826      	bhi.n	28644 <parse_string+0xf0>
   285f6:	2b2f      	cmp	r3, #47	; 0x2f
   285f8:	d029      	beq.n	2864e <parse_string+0xfa>
   285fa:	2b5c      	cmp	r3, #92	; 0x5c
   285fc:	d027      	beq.n	2864e <parse_string+0xfa>
   285fe:	2b22      	cmp	r3, #34	; 0x22
   28600:	d025      	beq.n	2864e <parse_string+0xfa>
        input_buffer->hooks.deallocate(output);
   28602:	4658      	mov	r0, fp
   28604:	f8da 3014 	ldr.w	r3, [sl, #20]
   28608:	4798      	blx	r3
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   2860a:	f8da 0000 	ldr.w	r0, [sl]
   2860e:	1a28      	subs	r0, r5, r0
   28610:	f8ca 0008 	str.w	r0, [sl, #8]
   28614:	e08c      	b.n	28730 <parse_string+0x1dc>
   28616:	3b6e      	subs	r3, #110	; 0x6e
   28618:	2b07      	cmp	r3, #7
   2861a:	d8f2      	bhi.n	28602 <parse_string+0xae>
   2861c:	a101      	add	r1, pc, #4	; (adr r1, 28624 <parse_string+0xd0>)
   2861e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   28622:	bf00      	nop
   28624:	00028659 	.word	0x00028659
   28628:	00028603 	.word	0x00028603
   2862c:	00028603 	.word	0x00028603
   28630:	00028603 	.word	0x00028603
   28634:	0002865d 	.word	0x0002865d
   28638:	00028603 	.word	0x00028603
   2863c:	00028661 	.word	0x00028661
   28640:	00028665 	.word	0x00028665
            switch (input_pointer[1])
   28644:	2b66      	cmp	r3, #102	; 0x66
   28646:	d1dc      	bne.n	28602 <parse_string+0xae>
                    *output_pointer++ = '\f';
   28648:	230c      	movs	r3, #12
   2864a:	e000      	b.n	2864e <parse_string+0xfa>
                    *output_pointer++ = '\b';
   2864c:	2308      	movs	r3, #8
                    *output_pointer++ = '\f';
   2864e:	f804 3b01 	strb.w	r3, [r4], #1
            unsigned char sequence_length = 2;
   28652:	2302      	movs	r3, #2
            input_pointer += sequence_length;
   28654:	441d      	add	r5, r3
   28656:	e7b3      	b.n	285c0 <parse_string+0x6c>
                    *output_pointer++ = '\n';
   28658:	230a      	movs	r3, #10
   2865a:	e7f8      	b.n	2864e <parse_string+0xfa>
                    *output_pointer++ = '\r';
   2865c:	230d      	movs	r3, #13
   2865e:	e7f6      	b.n	2864e <parse_string+0xfa>
                    *output_pointer++ = '\t';
   28660:	2309      	movs	r3, #9
   28662:	e7f4      	b.n	2864e <parse_string+0xfa>
    if ((input_end - first_sequence) < 6)
   28664:	2a05      	cmp	r2, #5
   28666:	ddcc      	ble.n	28602 <parse_string+0xae>
    first_code = parse_hex4(first_sequence + 2);
   28668:	1ca8      	adds	r0, r5, #2
   2866a:	f016 fded 	bl	3f248 <parse_hex4>
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   2866e:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   28672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    first_code = parse_hex4(first_sequence + 2);
   28676:	4606      	mov	r6, r0
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   28678:	d3c3      	bcc.n	28602 <parse_string+0xae>
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   2867a:	f5a0 4358 	sub.w	r3, r0, #55296	; 0xd800
   2867e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   28682:	d22d      	bcs.n	286e0 <parse_string+0x18c>
        const unsigned char *second_sequence = first_sequence + 6;
   28684:	1dab      	adds	r3, r5, #6
        if ((input_end - second_sequence) < 6)
   28686:	1afb      	subs	r3, r7, r3
   28688:	2b05      	cmp	r3, #5
   2868a:	ddba      	ble.n	28602 <parse_string+0xae>
        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   2868c:	79ab      	ldrb	r3, [r5, #6]
   2868e:	2b5c      	cmp	r3, #92	; 0x5c
   28690:	d1b7      	bne.n	28602 <parse_string+0xae>
   28692:	79eb      	ldrb	r3, [r5, #7]
   28694:	2b75      	cmp	r3, #117	; 0x75
   28696:	d1b4      	bne.n	28602 <parse_string+0xae>
        second_code = parse_hex4(second_sequence + 2);
   28698:	f105 0008 	add.w	r0, r5, #8
   2869c:	f016 fdd4 	bl	3f248 <parse_hex4>
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   286a0:	f5a0 435c 	sub.w	r3, r0, #56320	; 0xdc00
   286a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   286a8:	d2ab      	bcs.n	28602 <parse_string+0xae>
        sequence_length = 12; /* \uXXXX\uXXXX */
   286aa:	230c      	movs	r3, #12
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   286ac:	ea09 2686 	and.w	r6, r9, r6, lsl #10
   286b0:	f3c0 0009 	ubfx	r0, r0, #0, #10
   286b4:	4330      	orrs	r0, r6
   286b6:	f500 3680 	add.w	r6, r0, #65536	; 0x10000
        first_byte_mark = 0xF0; /* 11110000 */
   286ba:	20f0      	movs	r0, #240	; 0xf0
        utf8_length = 4;
   286bc:	2104      	movs	r1, #4
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   286be:	f101 3eff 	add.w	lr, r1, #4294967295
   286c2:	fa5f fc8e 	uxtb.w	ip, lr
   286c6:	44a6      	add	lr, r4
   286c8:	b2f2      	uxtb	r2, r6
   286ca:	f1bc 0f00 	cmp.w	ip, #0
   286ce:	d120      	bne.n	28712 <parse_string+0x1be>
    if (utf8_length > 1)
   286d0:	2901      	cmp	r1, #1
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   286d2:	bf14      	ite	ne
   286d4:	4302      	orrne	r2, r0
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   286d6:	f002 027f 	andeq.w	r2, r2, #127	; 0x7f
   286da:	7022      	strb	r2, [r4, #0]
    *output_pointer += utf8_length;
   286dc:	440c      	add	r4, r1
                    if (sequence_length == 0)
   286de:	e7b9      	b.n	28654 <parse_string+0x100>
    if (codepoint < 0x80)
   286e0:	287f      	cmp	r0, #127	; 0x7f
   286e2:	d90a      	bls.n	286fa <parse_string+0x1a6>
    else if (codepoint < 0x800)
   286e4:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   286e8:	d30b      	bcc.n	28702 <parse_string+0x1ae>
    else if (codepoint < 0x10000)
   286ea:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   286ee:	d30c      	bcc.n	2870a <parse_string+0x1b6>
    else if (codepoint <= 0x10FFFF)
   286f0:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   286f4:	d285      	bcs.n	28602 <parse_string+0xae>
        sequence_length = 6; /* \uXXXX */
   286f6:	2306      	movs	r3, #6
   286f8:	e7df      	b.n	286ba <parse_string+0x166>
   286fa:	2306      	movs	r3, #6
    unsigned char first_byte_mark = 0;
   286fc:	2000      	movs	r0, #0
        utf8_length = 1;
   286fe:	2101      	movs	r1, #1
   28700:	e7dd      	b.n	286be <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   28702:	2306      	movs	r3, #6
        first_byte_mark = 0xC0; /* 11000000 */
   28704:	20c0      	movs	r0, #192	; 0xc0
        utf8_length = 2;
   28706:	2102      	movs	r1, #2
   28708:	e7d9      	b.n	286be <parse_string+0x16a>
        sequence_length = 6; /* \uXXXX */
   2870a:	2306      	movs	r3, #6
        first_byte_mark = 0xE0; /* 11100000 */
   2870c:	20e0      	movs	r0, #224	; 0xe0
        utf8_length = 3;
   2870e:	2103      	movs	r1, #3
   28710:	e7d5      	b.n	286be <parse_string+0x16a>
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   28712:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   28716:	f062 027f 	orn	r2, r2, #127	; 0x7f
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   2871a:	f10c 3cff 	add.w	ip, ip, #4294967295
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   2871e:	f80e 2901 	strb.w	r2, [lr], #-1
        codepoint >>= 6;
   28722:	09b6      	lsrs	r6, r6, #6
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   28724:	fa5f fc8c 	uxtb.w	ip, ip
   28728:	e7ce      	b.n	286c8 <parse_string+0x174>
    if (input_pointer != NULL)
   2872a:	2d00      	cmp	r5, #0
   2872c:	f47f af6d 	bne.w	2860a <parse_string+0xb6>
    return false;
   28730:	2000      	movs	r0, #0
   28732:	e753      	b.n	285dc <parse_string+0x88>
   28734:	000ffc00 	.word	0x000ffc00

00028738 <get_object_item>:
{
   28738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2873a:	460d      	mov	r5, r1
    if ((object == NULL) || (name == NULL))
   2873c:	b360      	cbz	r0, 28798 <get_object_item+0x60>
   2873e:	b359      	cbz	r1, 28798 <get_object_item+0x60>
    current_element = object->child;
   28740:	6884      	ldr	r4, [r0, #8]
    if (case_sensitive)
   28742:	b9fa      	cbnz	r2, 28784 <get_object_item+0x4c>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28744:	4e17      	ldr	r6, [pc, #92]	; (287a4 <get_object_item+0x6c>)
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   28746:	b33c      	cbz	r4, 28798 <get_object_item+0x60>
   28748:	6a23      	ldr	r3, [r4, #32]
    if ((string1 == NULL) || (string2 == NULL))
   2874a:	b1c3      	cbz	r3, 2877e <get_object_item+0x46>
    if (string1 == string2)
   2874c:	42ab      	cmp	r3, r5
   2874e:	d021      	beq.n	28794 <get_object_item+0x5c>
   28750:	f105 3cff 	add.w	ip, r5, #4294967295
   28754:	3b01      	subs	r3, #1
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
   28756:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   2875a:	460f      	mov	r7, r1
   2875c:	5d8a      	ldrb	r2, [r1, r6]
   2875e:	f002 0203 	and.w	r2, r2, #3
   28762:	2a01      	cmp	r2, #1
   28764:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28768:	bf08      	it	eq
   2876a:	f101 0720 	addeq.w	r7, r1, #32
   2876e:	5cb0      	ldrb	r0, [r6, r2]
   28770:	f000 0003 	and.w	r0, r0, #3
   28774:	2801      	cmp	r0, #1
   28776:	bf08      	it	eq
   28778:	3220      	addeq	r2, #32
   2877a:	4297      	cmp	r7, r2
   2877c:	d00f      	beq.n	2879e <get_object_item+0x66>
            current_element = current_element->next;
   2877e:	6824      	ldr	r4, [r4, #0]
   28780:	e7e1      	b.n	28746 <get_object_item+0xe>
            current_element = current_element->next;
   28782:	6824      	ldr	r4, [r4, #0]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   28784:	b144      	cbz	r4, 28798 <get_object_item+0x60>
   28786:	6a21      	ldr	r1, [r4, #32]
   28788:	b121      	cbz	r1, 28794 <get_object_item+0x5c>
   2878a:	4628      	mov	r0, r5
   2878c:	f7f4 fd5c 	bl	1d248 <strcmp>
   28790:	2800      	cmp	r0, #0
   28792:	d1f6      	bne.n	28782 <get_object_item+0x4a>
    if ((current_element == NULL) || (current_element->string == NULL)) {
   28794:	6a23      	ldr	r3, [r4, #32]
   28796:	b903      	cbnz	r3, 2879a <get_object_item+0x62>
        return NULL;
   28798:	2400      	movs	r4, #0
}
   2879a:	4620      	mov	r0, r4
   2879c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (*string1 == '\0')
   2879e:	2900      	cmp	r1, #0
   287a0:	d1d9      	bne.n	28756 <get_object_item+0x1e>
   287a2:	e7f7      	b.n	28794 <get_object_item+0x5c>
   287a4:	0004c29f 	.word	0x0004c29f

000287a8 <print_string_ptr>:
{
   287a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   287ac:	4605      	mov	r5, r0
    if (output_buffer == NULL)
   287ae:	460f      	mov	r7, r1
{
   287b0:	b085      	sub	sp, #20
    if (output_buffer == NULL)
   287b2:	b919      	cbnz	r1, 287bc <print_string_ptr+0x14>
        return false;
   287b4:	2000      	movs	r0, #0
}
   287b6:	b005      	add	sp, #20
   287b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const char quotes[] = "\"\"";
   287bc:	4b4e      	ldr	r3, [pc, #312]	; (288f8 <print_string_ptr+0x150>)
   287be:	881a      	ldrh	r2, [r3, #0]
   287c0:	789b      	ldrb	r3, [r3, #2]
   287c2:	f8ad 200c 	strh.w	r2, [sp, #12]
   287c6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (input == NULL)
   287ca:	b340      	cbz	r0, 2881e <print_string_ptr+0x76>
   287cc:	4601      	mov	r1, r0
    size_t escape_characters = 0;
   287ce:	f04f 0b00 	mov.w	fp, #0
   287d2:	2001      	movs	r0, #1
   287d4:	4c49      	ldr	r4, [pc, #292]	; (288fc <print_string_ptr+0x154>)
   287d6:	468a      	mov	sl, r1
    for (input_pointer = input; *input_pointer; input_pointer++)
   287d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   287dc:	bb6b      	cbnz	r3, 2883a <print_string_ptr+0x92>
    output_length = (size_t)(input_pointer - input) + escape_characters;
   287de:	ebaa 0a05 	sub.w	sl, sl, r5
   287e2:	44da      	add	sl, fp
    output = ensure(output_buffer, output_length + sizeof(quotes));
   287e4:	4638      	mov	r0, r7
   287e6:	f10a 0103 	add.w	r1, sl, #3
   287ea:	f016 fd98 	bl	3f31e <ensure>
    if (output == NULL)
   287ee:	4606      	mov	r6, r0
   287f0:	2800      	cmp	r0, #0
   287f2:	d0df      	beq.n	287b4 <print_string_ptr+0xc>
    if (escape_characters == 0)
   287f4:	2322      	movs	r3, #34	; 0x22
   287f6:	1c44      	adds	r4, r0, #1
   287f8:	f10a 0901 	add.w	r9, sl, #1
   287fc:	f10a 0802 	add.w	r8, sl, #2
        output[0] = '\"';
   28800:	7003      	strb	r3, [r0, #0]
    if (escape_characters == 0)
   28802:	f1bb 0f00 	cmp.w	fp, #0
   28806:	d12e      	bne.n	28866 <print_string_ptr+0xbe>
   28808:	4652      	mov	r2, sl
   2880a:	4629      	mov	r1, r5
   2880c:	4620      	mov	r0, r4
   2880e:	f019 fa46 	bl	41c9e <memcpy>
        output[output_length + 1] = '\"';
   28812:	2322      	movs	r3, #34	; 0x22
   28814:	f806 3009 	strb.w	r3, [r6, r9]
        output[output_length + 2] = '\0';
   28818:	f806 b008 	strb.w	fp, [r6, r8]
        return true;
   2881c:	e00b      	b.n	28836 <print_string_ptr+0x8e>
        output = ensure(output_buffer, sizeof(quotes));
   2881e:	2103      	movs	r1, #3
   28820:	4638      	mov	r0, r7
   28822:	f016 fd7c 	bl	3f31e <ensure>
        if (output == NULL)
   28826:	2800      	cmp	r0, #0
   28828:	d0c4      	beq.n	287b4 <print_string_ptr+0xc>
        strncpy((char*)output, quotes, output_buffer->length - output_buffer->offset);
   2882a:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2882e:	a903      	add	r1, sp, #12
   28830:	1ad2      	subs	r2, r2, r3
   28832:	f019 fc4f 	bl	420d4 <strncpy>
    return true;
   28836:	2001      	movs	r0, #1
   28838:	e7bd      	b.n	287b6 <print_string_ptr+0xe>
        switch (*input_pointer)
   2883a:	2b22      	cmp	r3, #34	; 0x22
   2883c:	d80b      	bhi.n	28856 <print_string_ptr+0xae>
   2883e:	2b07      	cmp	r3, #7
   28840:	d90c      	bls.n	2885c <print_string_ptr+0xb4>
   28842:	f1a3 0208 	sub.w	r2, r3, #8
   28846:	b2d2      	uxtb	r2, r2
   28848:	fa00 f202 	lsl.w	r2, r0, r2
   2884c:	4222      	tst	r2, r4
   2884e:	d005      	beq.n	2885c <print_string_ptr+0xb4>
                escape_characters++;
   28850:	f10b 0b01 	add.w	fp, fp, #1
                break;
   28854:	e7bf      	b.n	287d6 <print_string_ptr+0x2e>
        switch (*input_pointer)
   28856:	2b5c      	cmp	r3, #92	; 0x5c
   28858:	d1bd      	bne.n	287d6 <print_string_ptr+0x2e>
   2885a:	e7f9      	b.n	28850 <print_string_ptr+0xa8>
                if (*input_pointer < 32)
   2885c:	2b1f      	cmp	r3, #31
                    escape_characters += 5;
   2885e:	bf98      	it	ls
   28860:	f10b 0b05 	addls.w	fp, fp, #5
    for (input_pointer = input; *input_pointer; input_pointer++)
   28864:	e7b7      	b.n	287d6 <print_string_ptr+0x2e>
            *output_pointer++ = '\\';
   28866:	f04f 0a5c 	mov.w	sl, #92	; 0x5c
                    *output_pointer = 't';
   2886a:	f04f 0b74 	mov.w	fp, #116	; 0x74
   2886e:	1e6b      	subs	r3, r5, #1
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   28870:	4a23      	ldr	r2, [pc, #140]	; (28900 <print_string_ptr+0x158>)
   28872:	9301      	str	r3, [sp, #4]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   28874:	9901      	ldr	r1, [sp, #4]
   28876:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   2887a:	9101      	str	r1, [sp, #4]
   2887c:	b92b      	cbnz	r3, 2888a <print_string_ptr+0xe2>
    output[output_length + 1] = '\"';
   2887e:	2222      	movs	r2, #34	; 0x22
   28880:	f806 2009 	strb.w	r2, [r6, r9]
    output[output_length + 2] = '\0';
   28884:	f806 3008 	strb.w	r3, [r6, r8]
   28888:	e7d5      	b.n	28836 <print_string_ptr+0x8e>
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
   2888a:	2b1f      	cmp	r3, #31
   2888c:	d907      	bls.n	2889e <print_string_ptr+0xf6>
   2888e:	2b22      	cmp	r3, #34	; 0x22
   28890:	d005      	beq.n	2889e <print_string_ptr+0xf6>
   28892:	2b5c      	cmp	r3, #92	; 0x5c
   28894:	d003      	beq.n	2889e <print_string_ptr+0xf6>
            *output_pointer = *input_pointer;
   28896:	4620      	mov	r0, r4
   28898:	7023      	strb	r3, [r4, #0]
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   2889a:	1c44      	adds	r4, r0, #1
   2889c:	e7ea      	b.n	28874 <print_string_ptr+0xcc>
            *output_pointer++ = '\\';
   2889e:	4620      	mov	r0, r4
            switch (*input_pointer)
   288a0:	9b01      	ldr	r3, [sp, #4]
            *output_pointer++ = '\\';
   288a2:	f800 ab01 	strb.w	sl, [r0], #1
            switch (*input_pointer)
   288a6:	781b      	ldrb	r3, [r3, #0]
   288a8:	2b0d      	cmp	r3, #13
   288aa:	d80a      	bhi.n	288c2 <print_string_ptr+0x11a>
   288ac:	2b07      	cmp	r3, #7
   288ae:	d919      	bls.n	288e4 <print_string_ptr+0x13c>
   288b0:	f1a3 0108 	sub.w	r1, r3, #8
   288b4:	2905      	cmp	r1, #5
   288b6:	d815      	bhi.n	288e4 <print_string_ptr+0x13c>
   288b8:	e8df f001 	tbb	[pc, r1]
   288bc:	140d1109 	.word	0x140d1109
   288c0:	0f0b      	.short	0x0f0b
   288c2:	2b22      	cmp	r3, #34	; 0x22
   288c4:	d001      	beq.n	288ca <print_string_ptr+0x122>
   288c6:	2b5c      	cmp	r3, #92	; 0x5c
   288c8:	d10c      	bne.n	288e4 <print_string_ptr+0x13c>
                    *output_pointer = 'b';
   288ca:	7063      	strb	r3, [r4, #1]
                    break;
   288cc:	e7e5      	b.n	2889a <print_string_ptr+0xf2>
                    *output_pointer = 'b';
   288ce:	2362      	movs	r3, #98	; 0x62
   288d0:	e7fb      	b.n	288ca <print_string_ptr+0x122>
                    *output_pointer = 'f';
   288d2:	2366      	movs	r3, #102	; 0x66
   288d4:	e7f9      	b.n	288ca <print_string_ptr+0x122>
                    *output_pointer = 'n';
   288d6:	236e      	movs	r3, #110	; 0x6e
   288d8:	e7f7      	b.n	288ca <print_string_ptr+0x122>
                    *output_pointer = 'r';
   288da:	2372      	movs	r3, #114	; 0x72
   288dc:	e7f5      	b.n	288ca <print_string_ptr+0x122>
                    *output_pointer = 't';
   288de:	f884 b001 	strb.w	fp, [r4, #1]
                    break;
   288e2:	e7da      	b.n	2889a <print_string_ptr+0xf2>
                    snprintf((char*)output_pointer, output_buffer->length - (output_pointer - output_buffer->buffer), "u%04x", *input_pointer);
   288e4:	6839      	ldr	r1, [r7, #0]
   288e6:	687d      	ldr	r5, [r7, #4]
   288e8:	1a41      	subs	r1, r0, r1
   288ea:	1a69      	subs	r1, r5, r1
   288ec:	f012 fe1e 	bl	3b52c <sniprintf>
                    output_pointer += 4;
   288f0:	4a03      	ldr	r2, [pc, #12]	; (28900 <print_string_ptr+0x158>)
   288f2:	1d60      	adds	r0, r4, #5
                    break;
   288f4:	e7d1      	b.n	2889a <print_string_ptr+0xf2>
   288f6:	bf00      	nop
   288f8:	00046be3 	.word	0x00046be3
   288fc:	04000037 	.word	0x04000037
   28900:	00046bdd 	.word	0x00046bdd

00028904 <print_value>:
{
   28904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28908:	460c      	mov	r4, r1
    if ((item == NULL) || (output_buffer == NULL))
   2890a:	4606      	mov	r6, r0
{
   2890c:	b08f      	sub	sp, #60	; 0x3c
    if ((item == NULL) || (output_buffer == NULL))
   2890e:	b908      	cbnz	r0, 28914 <print_value+0x10>
    switch ((item->type) & 0xFF)
   28910:	2500      	movs	r5, #0
   28912:	e06f      	b.n	289f4 <print_value+0xf0>
    if ((item == NULL) || (output_buffer == NULL))
   28914:	2900      	cmp	r1, #0
   28916:	d0fb      	beq.n	28910 <print_value+0xc>
    switch ((item->type) & 0xFF)
   28918:	7b05      	ldrb	r5, [r0, #12]
   2891a:	2d10      	cmp	r5, #16
   2891c:	f000 80cc 	beq.w	28ab8 <print_value+0x1b4>
   28920:	dc18      	bgt.n	28954 <print_value+0x50>
   28922:	1e6b      	subs	r3, r5, #1
   28924:	2b07      	cmp	r3, #7
   28926:	d8f3      	bhi.n	28910 <print_value+0xc>
   28928:	2b07      	cmp	r3, #7
   2892a:	d8f1      	bhi.n	28910 <print_value+0xc>
   2892c:	a201      	add	r2, pc, #4	; (adr r2, 28934 <print_value+0x30>)
   2892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   28932:	bf00      	nop
   28934:	000289d1 	.word	0x000289d1
   28938:	000289fd 	.word	0x000289fd
   2893c:	00028911 	.word	0x00028911
   28940:	000289a9 	.word	0x000289a9
   28944:	00028911 	.word	0x00028911
   28948:	00028911 	.word	0x00028911
   2894c:	00028911 	.word	0x00028911
   28950:	00028a01 	.word	0x00028a01
   28954:	2d40      	cmp	r5, #64	; 0x40
   28956:	f000 80dd 	beq.w	28b14 <print_value+0x210>
   2895a:	2d80      	cmp	r5, #128	; 0x80
   2895c:	f000 8098 	beq.w	28a90 <print_value+0x18c>
   28960:	2d20      	cmp	r5, #32
   28962:	d1d5      	bne.n	28910 <print_value+0xc>
            return print_array(item, output_buffer);
   28964:	6886      	ldr	r6, [r0, #8]
    output_pointer = ensure(output_buffer, 1);
   28966:	2101      	movs	r1, #1
   28968:	4620      	mov	r0, r4
   2896a:	f016 fcd8 	bl	3f31e <ensure>
    if (output_pointer == NULL)
   2896e:	2800      	cmp	r0, #0
   28970:	d0ce      	beq.n	28910 <print_value+0xc>
    *output_pointer = '[';
   28972:	235b      	movs	r3, #91	; 0x5b
            *output_pointer++ = ',';
   28974:	272c      	movs	r7, #44	; 0x2c
            *output_pointer = '\0';
   28976:	f04f 0800 	mov.w	r8, #0
    *output_pointer = '[';
   2897a:	7003      	strb	r3, [r0, #0]
    output_buffer->offset++;
   2897c:	68a3      	ldr	r3, [r4, #8]
   2897e:	3301      	adds	r3, #1
   28980:	60a3      	str	r3, [r4, #8]
    output_buffer->depth++;
   28982:	68e3      	ldr	r3, [r4, #12]
   28984:	3301      	adds	r3, #1
   28986:	60e3      	str	r3, [r4, #12]
    while (current_element != NULL)
   28988:	2e00      	cmp	r6, #0
   2898a:	f040 809a 	bne.w	28ac2 <print_value+0x1be>
    output_pointer = ensure(output_buffer, 2);
   2898e:	2102      	movs	r1, #2
   28990:	4620      	mov	r0, r4
   28992:	f016 fcc4 	bl	3f31e <ensure>
    if (output_pointer == NULL)
   28996:	2800      	cmp	r0, #0
   28998:	d0ba      	beq.n	28910 <print_value+0xc>
    *output_pointer++ = ']';
   2899a:	235d      	movs	r3, #93	; 0x5d
    *output_pointer = '\0';
   2899c:	7046      	strb	r6, [r0, #1]
    *output_pointer++ = ']';
   2899e:	7003      	strb	r3, [r0, #0]
    output_buffer->depth--;
   289a0:	68e3      	ldr	r3, [r4, #12]
   289a2:	3b01      	subs	r3, #1
   289a4:	60e3      	str	r3, [r4, #12]
   289a6:	e011      	b.n	289cc <print_value+0xc8>
            const char buff[] = "null";
   289a8:	4ba8      	ldr	r3, [pc, #672]	; (28c4c <print_value+0x348>)
            const char buff[] = "true";
   289aa:	6818      	ldr	r0, [r3, #0]
   289ac:	791b      	ldrb	r3, [r3, #4]
   289ae:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   289b0:	2105      	movs	r1, #5
   289b2:	4620      	mov	r0, r4
            const char buff[] = "true";
   289b4:	f88d 3020 	strb.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   289b8:	f016 fcb1 	bl	3f31e <ensure>
            if (output == NULL)
   289bc:	4605      	mov	r5, r0
   289be:	b1c8      	cbz	r0, 289f4 <print_value+0xf0>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   289c0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   289c4:	a907      	add	r1, sp, #28
   289c6:	1ad2      	subs	r2, r2, r3
   289c8:	f019 fb84 	bl	420d4 <strncpy>
    return true;
   289cc:	2501      	movs	r5, #1
   289ce:	e011      	b.n	289f4 <print_value+0xf0>
            const char buff[] = "false";
   289d0:	4b9f      	ldr	r3, [pc, #636]	; (28c50 <print_value+0x34c>)
            output = ensure(output_buffer, sizeof(buff));
   289d2:	2106      	movs	r1, #6
            const char buff[] = "false";
   289d4:	6818      	ldr	r0, [r3, #0]
   289d6:	889b      	ldrh	r3, [r3, #4]
   289d8:	9007      	str	r0, [sp, #28]
            output = ensure(output_buffer, sizeof(buff));
   289da:	4620      	mov	r0, r4
            const char buff[] = "false";
   289dc:	f8ad 3020 	strh.w	r3, [sp, #32]
            output = ensure(output_buffer, sizeof(buff));
   289e0:	f016 fc9d 	bl	3f31e <ensure>
            if (output == NULL)
   289e4:	2800      	cmp	r0, #0
   289e6:	d093      	beq.n	28910 <print_value+0xc>
            strncpy((char*)output, buff, output_buffer->length - output_buffer->offset);
   289e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
   289ec:	a907      	add	r1, sp, #28
   289ee:	1ad2      	subs	r2, r2, r3
   289f0:	f019 fb70 	bl	420d4 <strncpy>
}
   289f4:	4628      	mov	r0, r5
   289f6:	b00f      	add	sp, #60	; 0x3c
   289f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            const char buff[] = "true";
   289fc:	4b95      	ldr	r3, [pc, #596]	; (28c54 <print_value+0x350>)
   289fe:	e7d4      	b.n	289aa <print_value+0xa6>
    if ((d * 0) != 0)
   28a00:	2200      	movs	r2, #0
    double d = item->valuedouble;
   28a02:	e9d0 8906 	ldrd	r8, r9, [r0, #24]
    if ((d * 0) != 0)
   28a06:	2300      	movs	r3, #0
   28a08:	4640      	mov	r0, r8
   28a0a:	4649      	mov	r1, r9
   28a0c:	f7f3 fed4 	bl	1c7b8 <__aeabi_dmul>
   28a10:	2200      	movs	r2, #0
   28a12:	2300      	movs	r3, #0
   28a14:	f7f4 f938 	bl	1cc88 <__aeabi_dcmpeq>
   28a18:	ae07      	add	r6, sp, #28
   28a1a:	b9b8      	cbnz	r0, 28a4c <print_value+0x148>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "null");
   28a1c:	4630      	mov	r0, r6
   28a1e:	498b      	ldr	r1, [pc, #556]	; (28c4c <print_value+0x348>)
   28a20:	f019 fb22 	bl	42068 <strcpy>
   28a24:	2504      	movs	r5, #4
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   28a26:	4620      	mov	r0, r4
   28a28:	1c69      	adds	r1, r5, #1
   28a2a:	f016 fc78 	bl	3f31e <ensure>
    if (output_pointer == NULL)
   28a2e:	2800      	cmp	r0, #0
   28a30:	f43f af6e 	beq.w	28910 <print_value+0xc>
    for (i = 0; i < ((size_t)length); i++)
   28a34:	2300      	movs	r3, #0
        if (number_buffer[i] == decimal_point)
   28a36:	5cf2      	ldrb	r2, [r6, r3]
        output_pointer[i] = number_buffer[i];
   28a38:	54c2      	strb	r2, [r0, r3]
    for (i = 0; i < ((size_t)length); i++)
   28a3a:	3301      	adds	r3, #1
   28a3c:	429d      	cmp	r5, r3
   28a3e:	d1fa      	bne.n	28a36 <print_value+0x132>
    output_pointer[i] = '\0';
   28a40:	2300      	movs	r3, #0
   28a42:	5543      	strb	r3, [r0, r5]
    output_buffer->offset += (size_t)length;
   28a44:	68a0      	ldr	r0, [r4, #8]
   28a46:	4428      	add	r0, r5
   28a48:	60a0      	str	r0, [r4, #8]
    return true;
   28a4a:	e7bf      	b.n	289cc <print_value+0xc8>
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28a4c:	211a      	movs	r1, #26
   28a4e:	4a82      	ldr	r2, [pc, #520]	; (28c58 <print_value+0x354>)
   28a50:	4630      	mov	r0, r6
   28a52:	e9cd 8900 	strd	r8, r9, [sp]
   28a56:	f012 fd69 	bl	3b52c <sniprintf>
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   28a5a:	4980      	ldr	r1, [pc, #512]	; (28c5c <print_value+0x358>)
        length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.15g", d);
   28a5c:	4605      	mov	r5, r0
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || ((double)test != d))
   28a5e:	aa04      	add	r2, sp, #16
   28a60:	4630      	mov	r0, r6
   28a62:	f012 fd97 	bl	3b594 <siscanf>
   28a66:	2801      	cmp	r0, #1
   28a68:	d106      	bne.n	28a78 <print_value+0x174>
   28a6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   28a6e:	4640      	mov	r0, r8
   28a70:	4649      	mov	r1, r9
   28a72:	f7f4 f909 	bl	1cc88 <__aeabi_dcmpeq>
   28a76:	b938      	cbnz	r0, 28a88 <print_value+0x184>
            length = snprintf((char*)number_buffer, sizeof(number_buffer), "%1.17g", d);
   28a78:	211a      	movs	r1, #26
   28a7a:	4630      	mov	r0, r6
   28a7c:	e9cd 8900 	strd	r8, r9, [sp]
   28a80:	4a77      	ldr	r2, [pc, #476]	; (28c60 <print_value+0x35c>)
   28a82:	f012 fd53 	bl	3b52c <sniprintf>
   28a86:	4605      	mov	r5, r0
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   28a88:	2d19      	cmp	r5, #25
   28a8a:	f73f af41 	bgt.w	28910 <print_value+0xc>
   28a8e:	e7ca      	b.n	28a26 <print_value+0x122>
            if (item->valuestring == NULL)
   28a90:	6900      	ldr	r0, [r0, #16]
   28a92:	2800      	cmp	r0, #0
   28a94:	f43f af3c 	beq.w	28910 <print_value+0xc>
            raw_length = strlen(item->valuestring) + sizeof("");
   28a98:	f7f4 fbe0 	bl	1d25c <strlen>
   28a9c:	1c42      	adds	r2, r0, #1
            output = ensure(output_buffer, raw_length);
   28a9e:	4611      	mov	r1, r2
   28aa0:	4620      	mov	r0, r4
   28aa2:	9203      	str	r2, [sp, #12]
   28aa4:	f016 fc3b 	bl	3f31e <ensure>
            if (output == NULL)
   28aa8:	2800      	cmp	r0, #0
   28aaa:	f43f af31 	beq.w	28910 <print_value+0xc>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28aae:	9a03      	ldr	r2, [sp, #12]
   28ab0:	6931      	ldr	r1, [r6, #16]
   28ab2:	f019 f8f4 	bl	41c9e <memcpy>
   28ab6:	e789      	b.n	289cc <print_value+0xc8>
    return print_string_ptr((unsigned char*)item->valuestring, p);
   28ab8:	6900      	ldr	r0, [r0, #16]
   28aba:	f7ff fe75 	bl	287a8 <print_string_ptr>
   28abe:	4605      	mov	r5, r0
            return print_string(item, output_buffer);
   28ac0:	e798      	b.n	289f4 <print_value+0xf0>
        if (!print_value(current_element, output_buffer))
   28ac2:	4621      	mov	r1, r4
   28ac4:	4630      	mov	r0, r6
   28ac6:	f7ff ff1d 	bl	28904 <print_value>
   28aca:	2800      	cmp	r0, #0
   28acc:	f43f af20 	beq.w	28910 <print_value+0xc>
        update_offset(output_buffer);
   28ad0:	4620      	mov	r0, r4
   28ad2:	f016 fbfb 	bl	3f2cc <update_offset>
        if (current_element->next)
   28ad6:	6833      	ldr	r3, [r6, #0]
   28ad8:	b1bb      	cbz	r3, 28b0a <print_value+0x206>
            length = (size_t) (output_buffer->format ? 2 : 1);
   28ada:	6963      	ldr	r3, [r4, #20]
            output_pointer = ensure(output_buffer, length + 1);
   28adc:	4620      	mov	r0, r4
            length = (size_t) (output_buffer->format ? 2 : 1);
   28ade:	2b00      	cmp	r3, #0
   28ae0:	bf14      	ite	ne
   28ae2:	f04f 0902 	movne.w	r9, #2
   28ae6:	f04f 0901 	moveq.w	r9, #1
            output_pointer = ensure(output_buffer, length + 1);
   28aea:	f109 0101 	add.w	r1, r9, #1
   28aee:	f016 fc16 	bl	3f31e <ensure>
            if (output_pointer == NULL)
   28af2:	2800      	cmp	r0, #0
   28af4:	f43f af0c 	beq.w	28910 <print_value+0xc>
            *output_pointer++ = ',';
   28af8:	7007      	strb	r7, [r0, #0]
            if(output_buffer->format)
   28afa:	6963      	ldr	r3, [r4, #20]
   28afc:	b93b      	cbnz	r3, 28b0e <print_value+0x20a>
            *output_pointer++ = ',';
   28afe:	1c43      	adds	r3, r0, #1
            *output_pointer = '\0';
   28b00:	f883 8000 	strb.w	r8, [r3]
            output_buffer->offset += length;
   28b04:	68a3      	ldr	r3, [r4, #8]
   28b06:	444b      	add	r3, r9
   28b08:	60a3      	str	r3, [r4, #8]
        current_element = current_element->next;
   28b0a:	6836      	ldr	r6, [r6, #0]
   28b0c:	e73c      	b.n	28988 <print_value+0x84>
                *output_pointer++ = ' ';
   28b0e:	1c83      	adds	r3, r0, #2
   28b10:	7045      	strb	r5, [r0, #1]
   28b12:	e7f5      	b.n	28b00 <print_value+0x1fc>
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   28b14:	694b      	ldr	r3, [r1, #20]
            return print_object(item, output_buffer);
   28b16:	6885      	ldr	r5, [r0, #8]
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   28b18:	2b00      	cmp	r3, #0
   28b1a:	bf14      	ite	ne
   28b1c:	2702      	movne	r7, #2
   28b1e:	2701      	moveq	r7, #1
    output_pointer = ensure(output_buffer, length + 1);
   28b20:	4620      	mov	r0, r4
   28b22:	1c79      	adds	r1, r7, #1
   28b24:	f016 fbfb 	bl	3f31e <ensure>
    if (output_pointer == NULL)
   28b28:	2800      	cmp	r0, #0
   28b2a:	f43f aef1 	beq.w	28910 <print_value+0xc>
    *output_pointer++ = '{';
   28b2e:	237b      	movs	r3, #123	; 0x7b
   28b30:	7003      	strb	r3, [r0, #0]
    output_buffer->depth++;
   28b32:	68e2      	ldr	r2, [r4, #12]
    if (output_buffer->format)
   28b34:	6963      	ldr	r3, [r4, #20]
    output_buffer->depth++;
   28b36:	3201      	adds	r2, #1
   28b38:	60e2      	str	r2, [r4, #12]
    if (output_buffer->format)
   28b3a:	b10b      	cbz	r3, 28b40 <print_value+0x23c>
        *output_pointer++ = '\n';
   28b3c:	230a      	movs	r3, #10
   28b3e:	7043      	strb	r3, [r0, #1]
    output_buffer->offset += length;
   28b40:	68a3      	ldr	r3, [r4, #8]
                *output_pointer++ = '\t';
   28b42:	2609      	movs	r6, #9
    output_buffer->offset += length;
   28b44:	443b      	add	r3, r7
        *output_pointer++ = ':';
   28b46:	273a      	movs	r7, #58	; 0x3a
    output_buffer->offset += length;
   28b48:	60a3      	str	r3, [r4, #8]
    while (current_item)
   28b4a:	6963      	ldr	r3, [r4, #20]
   28b4c:	b995      	cbnz	r5, 28b74 <print_value+0x270>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   28b4e:	2b00      	cmp	r3, #0
   28b50:	d06f      	beq.n	28c32 <print_value+0x32e>
   28b52:	68e1      	ldr	r1, [r4, #12]
   28b54:	3101      	adds	r1, #1
   28b56:	4620      	mov	r0, r4
   28b58:	f016 fbe1 	bl	3f31e <ensure>
    if (output_pointer == NULL)
   28b5c:	2800      	cmp	r0, #0
   28b5e:	f43f aed7 	beq.w	28910 <print_value+0xc>
    if (output_buffer->format)
   28b62:	6963      	ldr	r3, [r4, #20]
   28b64:	2b00      	cmp	r3, #0
   28b66:	d16e      	bne.n	28c46 <print_value+0x342>
   28b68:	4603      	mov	r3, r0
    *output_pointer++ = '}';
   28b6a:	227d      	movs	r2, #125	; 0x7d
   28b6c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
   28b6e:	2200      	movs	r2, #0
   28b70:	705a      	strb	r2, [r3, #1]
   28b72:	e715      	b.n	289a0 <print_value+0x9c>
        if (output_buffer->format)
   28b74:	b173      	cbz	r3, 28b94 <print_value+0x290>
            output_pointer = ensure(output_buffer, output_buffer->depth);
   28b76:	4620      	mov	r0, r4
   28b78:	68e1      	ldr	r1, [r4, #12]
   28b7a:	f016 fbd0 	bl	3f31e <ensure>
            if (output_pointer == NULL)
   28b7e:	2800      	cmp	r0, #0
   28b80:	f43f aec6 	beq.w	28910 <print_value+0xc>
   28b84:	4602      	mov	r2, r0
            for (i = 0; i < output_buffer->depth; i++)
   28b86:	68e1      	ldr	r1, [r4, #12]
   28b88:	1a13      	subs	r3, r2, r0
   28b8a:	428b      	cmp	r3, r1
   28b8c:	d34e      	bcc.n	28c2c <print_value+0x328>
            output_buffer->offset += output_buffer->depth;
   28b8e:	68a3      	ldr	r3, [r4, #8]
   28b90:	440b      	add	r3, r1
   28b92:	60a3      	str	r3, [r4, #8]
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   28b94:	4621      	mov	r1, r4
   28b96:	6a28      	ldr	r0, [r5, #32]
   28b98:	f7ff fe06 	bl	287a8 <print_string_ptr>
   28b9c:	2800      	cmp	r0, #0
   28b9e:	f43f aeb7 	beq.w	28910 <print_value+0xc>
        update_offset(output_buffer);
   28ba2:	4620      	mov	r0, r4
   28ba4:	f016 fb92 	bl	3f2cc <update_offset>
        length = (size_t) (output_buffer->format ? 2 : 1);
   28ba8:	6963      	ldr	r3, [r4, #20]
        output_pointer = ensure(output_buffer, length);
   28baa:	4620      	mov	r0, r4
        length = (size_t) (output_buffer->format ? 2 : 1);
   28bac:	2b00      	cmp	r3, #0
   28bae:	bf14      	ite	ne
   28bb0:	f04f 0802 	movne.w	r8, #2
   28bb4:	f04f 0801 	moveq.w	r8, #1
        output_pointer = ensure(output_buffer, length);
   28bb8:	4641      	mov	r1, r8
   28bba:	f016 fbb0 	bl	3f31e <ensure>
        if (output_pointer == NULL)
   28bbe:	2800      	cmp	r0, #0
   28bc0:	f43f aea6 	beq.w	28910 <print_value+0xc>
        *output_pointer++ = ':';
   28bc4:	7007      	strb	r7, [r0, #0]
        if (output_buffer->format)
   28bc6:	6963      	ldr	r3, [r4, #20]
   28bc8:	b103      	cbz	r3, 28bcc <print_value+0x2c8>
            *output_pointer++ = '\t';
   28bca:	7046      	strb	r6, [r0, #1]
        output_buffer->offset += length;
   28bcc:	68a3      	ldr	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   28bce:	4621      	mov	r1, r4
        output_buffer->offset += length;
   28bd0:	4443      	add	r3, r8
        if (!print_value(current_item, output_buffer))
   28bd2:	4628      	mov	r0, r5
        output_buffer->offset += length;
   28bd4:	60a3      	str	r3, [r4, #8]
        if (!print_value(current_item, output_buffer))
   28bd6:	f7ff fe95 	bl	28904 <print_value>
   28bda:	2800      	cmp	r0, #0
   28bdc:	f43f ae98 	beq.w	28910 <print_value+0xc>
        update_offset(output_buffer);
   28be0:	4620      	mov	r0, r4
   28be2:	f016 fb73 	bl	3f2cc <update_offset>
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   28be6:	682b      	ldr	r3, [r5, #0]
   28be8:	6962      	ldr	r2, [r4, #20]
   28bea:	3b00      	subs	r3, #0
   28bec:	bf18      	it	ne
   28bee:	2301      	movne	r3, #1
   28bf0:	2a00      	cmp	r2, #0
   28bf2:	bf0c      	ite	eq
   28bf4:	4698      	moveq	r8, r3
   28bf6:	f103 0801 	addne.w	r8, r3, #1
        output_pointer = ensure(output_buffer, length + 1);
   28bfa:	4620      	mov	r0, r4
   28bfc:	f108 0101 	add.w	r1, r8, #1
   28c00:	f016 fb8d 	bl	3f31e <ensure>
        if (output_pointer == NULL)
   28c04:	2800      	cmp	r0, #0
   28c06:	f43f ae83 	beq.w	28910 <print_value+0xc>
        if (current_item->next)
   28c0a:	682b      	ldr	r3, [r5, #0]
   28c0c:	b113      	cbz	r3, 28c14 <print_value+0x310>
            *output_pointer++ = ',';
   28c0e:	232c      	movs	r3, #44	; 0x2c
   28c10:	f800 3b01 	strb.w	r3, [r0], #1
        if (output_buffer->format)
   28c14:	6963      	ldr	r3, [r4, #20]
   28c16:	b113      	cbz	r3, 28c1e <print_value+0x31a>
            *output_pointer++ = '\n';
   28c18:	230a      	movs	r3, #10
   28c1a:	f800 3b01 	strb.w	r3, [r0], #1
        *output_pointer = '\0';
   28c1e:	2300      	movs	r3, #0
   28c20:	7003      	strb	r3, [r0, #0]
        output_buffer->offset += length;
   28c22:	68a3      	ldr	r3, [r4, #8]
        current_item = current_item->next;
   28c24:	682d      	ldr	r5, [r5, #0]
        output_buffer->offset += length;
   28c26:	4443      	add	r3, r8
   28c28:	60a3      	str	r3, [r4, #8]
        current_item = current_item->next;
   28c2a:	e78e      	b.n	28b4a <print_value+0x246>
                *output_pointer++ = '\t';
   28c2c:	f802 6b01 	strb.w	r6, [r2], #1
            for (i = 0; i < output_buffer->depth; i++)
   28c30:	e7a9      	b.n	28b86 <print_value+0x282>
    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   28c32:	2102      	movs	r1, #2
   28c34:	e78f      	b.n	28b56 <print_value+0x252>
            *output_pointer++ = '\t';
   28c36:	f803 5b01 	strb.w	r5, [r3], #1
        for (i = 0; i < (output_buffer->depth - 1); i++)
   28c3a:	68e2      	ldr	r2, [r4, #12]
   28c3c:	1a19      	subs	r1, r3, r0
   28c3e:	3a01      	subs	r2, #1
   28c40:	4291      	cmp	r1, r2
   28c42:	d3f8      	bcc.n	28c36 <print_value+0x332>
   28c44:	e791      	b.n	28b6a <print_value+0x266>
   28c46:	4603      	mov	r3, r0
            *output_pointer++ = '\t';
   28c48:	2509      	movs	r5, #9
   28c4a:	e7f6      	b.n	28c3a <print_value+0x336>
   28c4c:	00046be6 	.word	0x00046be6
   28c50:	00046bfd 	.word	0x00046bfd
   28c54:	00046c03 	.word	0x00046c03
   28c58:	00046beb 	.word	0x00046beb
   28c5c:	00046bf2 	.word	0x00046bf2
   28c60:	00046bf6 	.word	0x00046bf6

00028c64 <cJSON_strdup.isra.0.constprop.0>:
static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   28c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (string == NULL)
   28c66:	4605      	mov	r5, r0
   28c68:	b180      	cbz	r0, 28c8c <cJSON_strdup.isra.0.constprop.0+0x28>
    length = strlen((const char*)string) + sizeof("");
   28c6a:	f7f4 faf7 	bl	1d25c <strlen>
    copy = (unsigned char*)hooks->allocate(length);
   28c6e:	4b08      	ldr	r3, [pc, #32]	; (28c90 <cJSON_strdup.isra.0.constprop.0+0x2c>)
    length = strlen((const char*)string) + sizeof("");
   28c70:	1c42      	adds	r2, r0, #1
    copy = (unsigned char*)hooks->allocate(length);
   28c72:	4610      	mov	r0, r2
   28c74:	681b      	ldr	r3, [r3, #0]
   28c76:	9201      	str	r2, [sp, #4]
   28c78:	4798      	blx	r3
    if (copy == NULL)
   28c7a:	4604      	mov	r4, r0
   28c7c:	b118      	cbz	r0, 28c86 <cJSON_strdup.isra.0.constprop.0+0x22>
   28c7e:	4629      	mov	r1, r5
   28c80:	9a01      	ldr	r2, [sp, #4]
   28c82:	f019 f80c 	bl	41c9e <memcpy>
}
   28c86:	4620      	mov	r0, r4
   28c88:	b003      	add	sp, #12
   28c8a:	bd30      	pop	{r4, r5, pc}
        return NULL;
   28c8c:	4604      	mov	r4, r0
   28c8e:	e7fa      	b.n	28c86 <cJSON_strdup.isra.0.constprop.0+0x22>
   28c90:	200155ac 	.word	0x200155ac

00028c94 <add_item_to_object.constprop.0>:
static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   28c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28c96:	460d      	mov	r5, r1
   28c98:	4614      	mov	r4, r2
    if ((object == NULL) || (string == NULL) || (item == NULL))
   28c9a:	4607      	mov	r7, r0
   28c9c:	b1f0      	cbz	r0, 28cdc <add_item_to_object.constprop.0+0x48>
   28c9e:	b1e9      	cbz	r1, 28cdc <add_item_to_object.constprop.0+0x48>
   28ca0:	b1e2      	cbz	r2, 28cdc <add_item_to_object.constprop.0+0x48>
    if (constant_key)
   28ca2:	b193      	cbz	r3, 28cca <add_item_to_object.constprop.0+0x36>
        new_type = item->type | cJSON_StringIsConst;
   28ca4:	68d6      	ldr	r6, [r2, #12]
   28ca6:	f446 7600 	orr.w	r6, r6, #512	; 0x200
    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   28caa:	68e3      	ldr	r3, [r4, #12]
   28cac:	059b      	lsls	r3, r3, #22
   28cae:	d404      	bmi.n	28cba <add_item_to_object.constprop.0+0x26>
   28cb0:	6a20      	ldr	r0, [r4, #32]
   28cb2:	b110      	cbz	r0, 28cba <add_item_to_object.constprop.0+0x26>
        hooks->deallocate(item->string);
   28cb4:	4b0a      	ldr	r3, [pc, #40]	; (28ce0 <add_item_to_object.constprop.0+0x4c>)
   28cb6:	685b      	ldr	r3, [r3, #4]
   28cb8:	4798      	blx	r3
    return add_item_to_array(object, item);
   28cba:	4621      	mov	r1, r4
   28cbc:	4638      	mov	r0, r7
    item->string = new_key;
   28cbe:	6225      	str	r5, [r4, #32]
    item->type = new_type;
   28cc0:	60e6      	str	r6, [r4, #12]
}
   28cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    return add_item_to_array(object, item);
   28cc6:	f016 bb0e 	b.w	3f2e6 <add_item_to_array>
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   28cca:	4608      	mov	r0, r1
   28ccc:	f7ff ffca 	bl	28c64 <cJSON_strdup.isra.0.constprop.0>
        if (new_key == NULL)
   28cd0:	4605      	mov	r5, r0
   28cd2:	b118      	cbz	r0, 28cdc <add_item_to_object.constprop.0+0x48>
        new_type = item->type & ~cJSON_StringIsConst;
   28cd4:	68e6      	ldr	r6, [r4, #12]
   28cd6:	f426 7600 	bic.w	r6, r6, #512	; 0x200
   28cda:	e7e6      	b.n	28caa <add_item_to_object.constprop.0+0x16>
}
   28cdc:	2000      	movs	r0, #0
   28cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28ce0:	200155ac 	.word	0x200155ac

00028ce4 <print.constprop.0>:
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   28ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   28ce6:	4d24      	ldr	r5, [pc, #144]	; (28d78 <print.constprop.0+0x94>)
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   28ce8:	b08b      	sub	sp, #44	; 0x2c
   28cea:	460e      	mov	r6, r1
    memset(buffer, 0, sizeof(buffer));
   28cec:	2224      	movs	r2, #36	; 0x24
   28cee:	2100      	movs	r1, #0
static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   28cf0:	4604      	mov	r4, r0
    memset(buffer, 0, sizeof(buffer));
   28cf2:	a801      	add	r0, sp, #4
   28cf4:	f018 fff3 	bl	41cde <memset>
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   28cf8:	682b      	ldr	r3, [r5, #0]
   28cfa:	f44f 7080 	mov.w	r0, #256	; 0x100
   28cfe:	4798      	blx	r3
    buffer->length = default_buffer_size;
   28d00:	f44f 7280 	mov.w	r2, #256	; 0x100
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   28d04:	4603      	mov	r3, r0
    buffer->format = format;
   28d06:	9606      	str	r6, [sp, #24]
    buffer->hooks = *hooks;
   28d08:	ae0a      	add	r6, sp, #40	; 0x28
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   28d0a:	9001      	str	r0, [sp, #4]
    buffer->length = default_buffer_size;
   28d0c:	9202      	str	r2, [sp, #8]
    buffer->hooks = *hooks;
   28d0e:	462f      	mov	r7, r5
   28d10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   28d14:	e906 0007 	stmdb	r6, {r0, r1, r2}
    if (buffer->buffer == NULL)
   28d18:	b17b      	cbz	r3, 28d3a <print.constprop.0+0x56>
    if (!print_value(item, buffer))
   28d1a:	4620      	mov	r0, r4
   28d1c:	a901      	add	r1, sp, #4
   28d1e:	f7ff fdf1 	bl	28904 <print_value>
   28d22:	b150      	cbz	r0, 28d3a <print.constprop.0+0x56>
    update_offset(buffer);
   28d24:	a801      	add	r0, sp, #4
   28d26:	f016 fad1 	bl	3f2cc <update_offset>
    if (hooks->reallocate != NULL)
   28d2a:	68ae      	ldr	r6, [r5, #8]
   28d2c:	9903      	ldr	r1, [sp, #12]
   28d2e:	b15e      	cbz	r6, 28d48 <print.constprop.0+0x64>
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   28d30:	9801      	ldr	r0, [sp, #4]
   28d32:	3101      	adds	r1, #1
   28d34:	47b0      	blx	r6
        if (printed == NULL) {
   28d36:	4604      	mov	r4, r0
   28d38:	b9d0      	cbnz	r0, 28d70 <print.constprop.0+0x8c>
    if (buffer->buffer != NULL)
   28d3a:	9c01      	ldr	r4, [sp, #4]
   28d3c:	b1c4      	cbz	r4, 28d70 <print.constprop.0+0x8c>
        hooks->deallocate(buffer->buffer);
   28d3e:	4620      	mov	r0, r4
   28d40:	687b      	ldr	r3, [r7, #4]
   28d42:	4798      	blx	r3
    return NULL;
   28d44:	2400      	movs	r4, #0
   28d46:	e013      	b.n	28d70 <print.constprop.0+0x8c>
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   28d48:	682b      	ldr	r3, [r5, #0]
   28d4a:	1c48      	adds	r0, r1, #1
   28d4c:	4798      	blx	r3
        if (printed == NULL)
   28d4e:	4604      	mov	r4, r0
   28d50:	2800      	cmp	r0, #0
   28d52:	d0f2      	beq.n	28d3a <print.constprop.0+0x56>
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   28d54:	9a03      	ldr	r2, [sp, #12]
   28d56:	9b02      	ldr	r3, [sp, #8]
   28d58:	3201      	adds	r2, #1
   28d5a:	429a      	cmp	r2, r3
   28d5c:	bf28      	it	cs
   28d5e:	461a      	movcs	r2, r3
   28d60:	9901      	ldr	r1, [sp, #4]
   28d62:	f018 ff9c 	bl	41c9e <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
   28d66:	9b03      	ldr	r3, [sp, #12]
   28d68:	54e6      	strb	r6, [r4, r3]
        hooks->deallocate(buffer->buffer);
   28d6a:	686b      	ldr	r3, [r5, #4]
   28d6c:	9801      	ldr	r0, [sp, #4]
   28d6e:	4798      	blx	r3
}
   28d70:	4620      	mov	r0, r4
   28d72:	b00b      	add	sp, #44	; 0x2c
   28d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28d76:	bf00      	nop
   28d78:	200155ac 	.word	0x200155ac

00028d7c <cJSON_InitHooks>:
{
   28d7c:	b530      	push	{r4, r5, lr}
   28d7e:	4b0d      	ldr	r3, [pc, #52]	; (28db4 <cJSON_InitHooks+0x38>)
   28d80:	4d0d      	ldr	r5, [pc, #52]	; (28db8 <cJSON_InitHooks+0x3c>)
   28d82:	4c0e      	ldr	r4, [pc, #56]	; (28dbc <cJSON_InitHooks+0x40>)
    if (hooks == NULL)
   28d84:	b920      	cbnz	r0, 28d90 <cJSON_InitHooks+0x14>
        global_hooks.deallocate = free;
   28d86:	e9c3 5400 	strd	r5, r4, [r3]
        global_hooks.reallocate = realloc;
   28d8a:	4a0d      	ldr	r2, [pc, #52]	; (28dc0 <cJSON_InitHooks+0x44>)
   28d8c:	609a      	str	r2, [r3, #8]
   28d8e:	e00f      	b.n	28db0 <cJSON_InitHooks+0x34>
    if (hooks->malloc_fn != NULL)
   28d90:	6801      	ldr	r1, [r0, #0]
    if (hooks->free_fn != NULL)
   28d92:	6842      	ldr	r2, [r0, #4]
        global_hooks.allocate = hooks->malloc_fn;
   28d94:	2900      	cmp	r1, #0
   28d96:	bf08      	it	eq
   28d98:	4629      	moveq	r1, r5
        global_hooks.deallocate = hooks->free_fn;
   28d9a:	2a00      	cmp	r2, #0
   28d9c:	bf08      	it	eq
   28d9e:	4622      	moveq	r2, r4
    global_hooks.reallocate = NULL;
   28da0:	2000      	movs	r0, #0
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   28da2:	42a9      	cmp	r1, r5
        global_hooks.allocate = hooks->malloc_fn;
   28da4:	6019      	str	r1, [r3, #0]
        global_hooks.deallocate = hooks->free_fn;
   28da6:	605a      	str	r2, [r3, #4]
    global_hooks.reallocate = NULL;
   28da8:	6098      	str	r0, [r3, #8]
    if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   28daa:	d101      	bne.n	28db0 <cJSON_InitHooks+0x34>
   28dac:	42a2      	cmp	r2, r4
   28dae:	d0ec      	beq.n	28d8a <cJSON_InitHooks+0xe>
}
   28db0:	bd30      	pop	{r4, r5, pc}
   28db2:	bf00      	nop
   28db4:	200155ac 	.word	0x200155ac
   28db8:	0003a9c1 	.word	0x0003a9c1
   28dbc:	0003a9d1 	.word	0x0003a9d1
   28dc0:	0003b4fd 	.word	0x0003b4fd

00028dc4 <cJSON_Delete>:
{
   28dc4:	b570      	push	{r4, r5, r6, lr}
   28dc6:	4604      	mov	r4, r0
   28dc8:	4d0f      	ldr	r5, [pc, #60]	; (28e08 <cJSON_Delete+0x44>)
    while (item != NULL)
   28dca:	b904      	cbnz	r4, 28dce <cJSON_Delete+0xa>
}
   28dcc:	bd70      	pop	{r4, r5, r6, pc}
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   28dce:	68e3      	ldr	r3, [r4, #12]
        next = item->next;
   28dd0:	6826      	ldr	r6, [r4, #0]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   28dd2:	05d9      	lsls	r1, r3, #23
   28dd4:	d403      	bmi.n	28dde <cJSON_Delete+0x1a>
   28dd6:	68a0      	ldr	r0, [r4, #8]
   28dd8:	b968      	cbnz	r0, 28df6 <cJSON_Delete+0x32>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   28dda:	6920      	ldr	r0, [r4, #16]
   28ddc:	b988      	cbnz	r0, 28e02 <cJSON_Delete+0x3e>
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   28dde:	68e3      	ldr	r3, [r4, #12]
   28de0:	059b      	lsls	r3, r3, #22
   28de2:	d403      	bmi.n	28dec <cJSON_Delete+0x28>
   28de4:	6a20      	ldr	r0, [r4, #32]
   28de6:	b108      	cbz	r0, 28dec <cJSON_Delete+0x28>
            global_hooks.deallocate(item->string);
   28de8:	686b      	ldr	r3, [r5, #4]
   28dea:	4798      	blx	r3
        global_hooks.deallocate(item);
   28dec:	4620      	mov	r0, r4
   28dee:	686b      	ldr	r3, [r5, #4]
   28df0:	4798      	blx	r3
        item = next;
   28df2:	4634      	mov	r4, r6
   28df4:	e7e9      	b.n	28dca <cJSON_Delete+0x6>
            cJSON_Delete(item->child);
   28df6:	f7ff ffe5 	bl	28dc4 <cJSON_Delete>
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   28dfa:	68e3      	ldr	r3, [r4, #12]
   28dfc:	05da      	lsls	r2, r3, #23
   28dfe:	d5ec      	bpl.n	28dda <cJSON_Delete+0x16>
   28e00:	e7ed      	b.n	28dde <cJSON_Delete+0x1a>
            global_hooks.deallocate(item->valuestring);
   28e02:	686b      	ldr	r3, [r5, #4]
   28e04:	4798      	blx	r3
   28e06:	e7ea      	b.n	28dde <cJSON_Delete+0x1a>
   28e08:	200155ac 	.word	0x200155ac

00028e0c <cJSON_ParseWithOpts>:
{
   28e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28e10:	4605      	mov	r5, r0
    global_error.json = NULL;
   28e12:	f04f 0800 	mov.w	r8, #0
{
   28e16:	b089      	sub	sp, #36	; 0x24
    global_error.json = NULL;
   28e18:	4f31      	ldr	r7, [pc, #196]	; (28ee0 <cJSON_ParseWithOpts+0xd4>)
{
   28e1a:	460e      	mov	r6, r1
   28e1c:	4691      	mov	r9, r2
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   28e1e:	2100      	movs	r1, #0
   28e20:	221c      	movs	r2, #28
   28e22:	a801      	add	r0, sp, #4
   28e24:	f018 ff5b 	bl	41cde <memset>
    global_error.position = 0;
   28e28:	e9c7 8800 	strd	r8, r8, [r7]
    if (value == NULL)
   28e2c:	2d00      	cmp	r5, #0
   28e2e:	d04d      	beq.n	28ecc <cJSON_ParseWithOpts+0xc0>
    buffer.length = strlen((const char*)value) + sizeof("");
   28e30:	4628      	mov	r0, r5
    buffer.content = (const unsigned char*)value;
   28e32:	9501      	str	r5, [sp, #4]
    buffer.length = strlen((const char*)value) + sizeof("");
   28e34:	f7f4 fa12 	bl	1d25c <strlen>
    buffer.hooks = global_hooks;
   28e38:	4b2a      	ldr	r3, [pc, #168]	; (28ee4 <cJSON_ParseWithOpts+0xd8>)
    buffer.length = strlen((const char*)value) + sizeof("");
   28e3a:	3001      	adds	r0, #1
    buffer.offset = 0;
   28e3c:	e9cd 0802 	strd	r0, r8, [sp, #8]
    buffer.hooks = global_hooks;
   28e40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   28e44:	ab08      	add	r3, sp, #32
   28e46:	e903 0007 	stmdb	r3, {r0, r1, r2}
    item = cJSON_New_Item(&global_hooks);
   28e4a:	f016 fa5c 	bl	3f306 <cJSON_New_Item.isra.0>
    if (item == NULL) /* memory fail */
   28e4e:	4604      	mov	r4, r0
   28e50:	2800      	cmp	r0, #0
   28e52:	d030      	beq.n	28eb6 <cJSON_ParseWithOpts+0xaa>
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   28e54:	9801      	ldr	r0, [sp, #4]
   28e56:	b128      	cbz	r0, 28e64 <cJSON_ParseWithOpts+0x58>
   28e58:	9b03      	ldr	r3, [sp, #12]
   28e5a:	b9e3      	cbnz	r3, 28e96 <cJSON_ParseWithOpts+0x8a>
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   28e5c:	9b02      	ldr	r3, [sp, #8]
   28e5e:	2b04      	cmp	r3, #4
   28e60:	d80f      	bhi.n	28e82 <cJSON_ParseWithOpts+0x76>
    return buffer;
   28e62:	a801      	add	r0, sp, #4
    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   28e64:	f016 fa15 	bl	3f292 <buffer_skip_whitespace>
   28e68:	4601      	mov	r1, r0
   28e6a:	4620      	mov	r0, r4
   28e6c:	f7f4 fc38 	bl	1d6e0 <parse_value>
   28e70:	b1f0      	cbz	r0, 28eb0 <cJSON_ParseWithOpts+0xa4>
    if (require_null_terminated)
   28e72:	f1b9 0f00 	cmp.w	r9, #0
   28e76:	d110      	bne.n	28e9a <cJSON_ParseWithOpts+0x8e>
    if (return_parse_end)
   28e78:	bb56      	cbnz	r6, 28ed0 <cJSON_ParseWithOpts+0xc4>
}
   28e7a:	4620      	mov	r0, r4
   28e7c:	b009      	add	sp, #36	; 0x24
   28e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   28e82:	2203      	movs	r2, #3
   28e84:	4918      	ldr	r1, [pc, #96]	; (28ee8 <cJSON_ParseWithOpts+0xdc>)
   28e86:	f019 f913 	bl	420b0 <strncmp>
   28e8a:	2800      	cmp	r0, #0
   28e8c:	d1e9      	bne.n	28e62 <cJSON_ParseWithOpts+0x56>
        buffer->offset += 3;
   28e8e:	9b03      	ldr	r3, [sp, #12]
   28e90:	3303      	adds	r3, #3
   28e92:	9303      	str	r3, [sp, #12]
   28e94:	e7e5      	b.n	28e62 <cJSON_ParseWithOpts+0x56>
        return NULL;
   28e96:	4640      	mov	r0, r8
   28e98:	e7e4      	b.n	28e64 <cJSON_ParseWithOpts+0x58>
        buffer_skip_whitespace(&buffer);
   28e9a:	a801      	add	r0, sp, #4
   28e9c:	f016 f9f9 	bl	3f292 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   28ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   28ea4:	4293      	cmp	r3, r2
   28ea6:	d203      	bcs.n	28eb0 <cJSON_ParseWithOpts+0xa4>
   28ea8:	9a01      	ldr	r2, [sp, #4]
   28eaa:	5cd3      	ldrb	r3, [r2, r3]
   28eac:	2b00      	cmp	r3, #0
   28eae:	d0e3      	beq.n	28e78 <cJSON_ParseWithOpts+0x6c>
        cJSON_Delete(item);
   28eb0:	4620      	mov	r0, r4
   28eb2:	f7ff ff87 	bl	28dc4 <cJSON_Delete>
        if (buffer.offset < buffer.length)
   28eb6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   28eba:	429a      	cmp	r2, r3
   28ebc:	d30d      	bcc.n	28eda <cJSON_ParseWithOpts+0xce>
        else if (buffer.length > 0)
   28ebe:	b103      	cbz	r3, 28ec2 <cJSON_ParseWithOpts+0xb6>
            local_error.position = buffer.length - 1;
   28ec0:	3b01      	subs	r3, #1
        if (return_parse_end != NULL)
   28ec2:	b10e      	cbz	r6, 28ec8 <cJSON_ParseWithOpts+0xbc>
            *return_parse_end = (const char*)local_error.json + local_error.position;
   28ec4:	18ea      	adds	r2, r5, r3
   28ec6:	6032      	str	r2, [r6, #0]
        global_error = local_error;
   28ec8:	e9c7 5300 	strd	r5, r3, [r7]
    return NULL;
   28ecc:	2400      	movs	r4, #0
   28ece:	e7d4      	b.n	28e7a <cJSON_ParseWithOpts+0x6e>
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
   28ed0:	9b01      	ldr	r3, [sp, #4]
   28ed2:	9a03      	ldr	r2, [sp, #12]
   28ed4:	4413      	add	r3, r2
   28ed6:	6033      	str	r3, [r6, #0]
   28ed8:	e7cf      	b.n	28e7a <cJSON_ParseWithOpts+0x6e>
   28eda:	4613      	mov	r3, r2
   28edc:	e7f1      	b.n	28ec2 <cJSON_ParseWithOpts+0xb6>
   28ede:	bf00      	nop
   28ee0:	20018e4c 	.word	0x20018e4c
   28ee4:	200155ac 	.word	0x200155ac
   28ee8:	00046c08 	.word	0x00046c08

00028eec <cJSON_CreateNull>:
{
   28eec:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   28eee:	4b04      	ldr	r3, [pc, #16]	; (28f00 <cJSON_CreateNull+0x14>)
   28ef0:	6818      	ldr	r0, [r3, #0]
   28ef2:	f016 fa08 	bl	3f306 <cJSON_New_Item.isra.0>
    if(item)
   28ef6:	b108      	cbz	r0, 28efc <cJSON_CreateNull+0x10>
        item->type = cJSON_NULL;
   28ef8:	2304      	movs	r3, #4
   28efa:	60c3      	str	r3, [r0, #12]
}
   28efc:	bd08      	pop	{r3, pc}
   28efe:	bf00      	nop
   28f00:	200155ac 	.word	0x200155ac

00028f04 <cJSON_CreateBool>:
    cJSON *item = cJSON_New_Item(&global_hooks);
   28f04:	4b06      	ldr	r3, [pc, #24]	; (28f20 <cJSON_CreateBool+0x1c>)
{
   28f06:	b510      	push	{r4, lr}
   28f08:	4604      	mov	r4, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   28f0a:	6818      	ldr	r0, [r3, #0]
   28f0c:	f016 f9fb 	bl	3f306 <cJSON_New_Item.isra.0>
    if(item)
   28f10:	b120      	cbz	r0, 28f1c <cJSON_CreateBool+0x18>
        item->type = b ? cJSON_True : cJSON_False;
   28f12:	2c00      	cmp	r4, #0
   28f14:	bf14      	ite	ne
   28f16:	2302      	movne	r3, #2
   28f18:	2301      	moveq	r3, #1
   28f1a:	60c3      	str	r3, [r0, #12]
}
   28f1c:	bd10      	pop	{r4, pc}
   28f1e:	bf00      	nop
   28f20:	200155ac 	.word	0x200155ac

00028f24 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
   28f24:	b538      	push	{r3, r4, r5, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   28f26:	4b0a      	ldr	r3, [pc, #40]	; (28f50 <cJSON_CreateString+0x2c>)
{
   28f28:	4605      	mov	r5, r0
    cJSON *item = cJSON_New_Item(&global_hooks);
   28f2a:	6818      	ldr	r0, [r3, #0]
   28f2c:	f016 f9eb 	bl	3f306 <cJSON_New_Item.isra.0>
    if(item)
   28f30:	4604      	mov	r4, r0
   28f32:	b158      	cbz	r0, 28f4c <cJSON_CreateString+0x28>
    {
        item->type = cJSON_String;
   28f34:	2310      	movs	r3, #16
   28f36:	60c3      	str	r3, [r0, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   28f38:	4628      	mov	r0, r5
   28f3a:	f7ff fe93 	bl	28c64 <cJSON_strdup.isra.0.constprop.0>
   28f3e:	4605      	mov	r5, r0
   28f40:	6120      	str	r0, [r4, #16]
        if(!item->valuestring)
   28f42:	b918      	cbnz	r0, 28f4c <cJSON_CreateString+0x28>
        {
            cJSON_Delete(item);
   28f44:	4620      	mov	r0, r4
   28f46:	f7ff ff3d 	bl	28dc4 <cJSON_Delete>
            return NULL;
   28f4a:	462c      	mov	r4, r5
        }
    }

    return item;
}
   28f4c:	4620      	mov	r0, r4
   28f4e:	bd38      	pop	{r3, r4, r5, pc}
   28f50:	200155ac 	.word	0x200155ac

00028f54 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
   28f54:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   28f56:	4b04      	ldr	r3, [pc, #16]	; (28f68 <cJSON_CreateArray+0x14>)
   28f58:	6818      	ldr	r0, [r3, #0]
   28f5a:	f016 f9d4 	bl	3f306 <cJSON_New_Item.isra.0>
    if(item)
   28f5e:	b108      	cbz	r0, 28f64 <cJSON_CreateArray+0x10>
    {
        item->type=cJSON_Array;
   28f60:	2320      	movs	r3, #32
   28f62:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   28f64:	bd08      	pop	{r3, pc}
   28f66:	bf00      	nop
   28f68:	200155ac 	.word	0x200155ac

00028f6c <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
   28f6c:	b508      	push	{r3, lr}
    cJSON *item = cJSON_New_Item(&global_hooks);
   28f6e:	4b04      	ldr	r3, [pc, #16]	; (28f80 <cJSON_CreateObject+0x14>)
   28f70:	6818      	ldr	r0, [r3, #0]
   28f72:	f016 f9c8 	bl	3f306 <cJSON_New_Item.isra.0>
    if (item)
   28f76:	b108      	cbz	r0, 28f7c <cJSON_CreateObject+0x10>
    {
        item->type = cJSON_Object;
   28f78:	2340      	movs	r3, #64	; 0x40
   28f7a:	60c3      	str	r3, [r0, #12]
    }

    return item;
}
   28f7c:	bd08      	pop	{r3, pc}
   28f7e:	bf00      	nop
   28f80:	200155ac 	.word	0x200155ac

00028f84 <cJSON_free>:
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
    global_hooks.deallocate(object);
   28f84:	4b01      	ldr	r3, [pc, #4]	; (28f8c <cJSON_free+0x8>)
   28f86:	685b      	ldr	r3, [r3, #4]
   28f88:	4718      	bx	r3
   28f8a:	bf00      	nop
   28f8c:	200155ac 	.word	0x200155ac

00028f90 <cJSON_Init>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }

/**@brief Initialize cJSON by assigning function hooks. */
void cJSON_Init(void)
{
	_cjson_hooks.malloc_fn = malloc_fn_hook;
   28f90:	4803      	ldr	r0, [pc, #12]	; (28fa0 <cJSON_Init+0x10>)
   28f92:	4b04      	ldr	r3, [pc, #16]	; (28fa4 <cJSON_Init+0x14>)
   28f94:	6003      	str	r3, [r0, #0]
	_cjson_hooks.free_fn = free_fn_hook;
   28f96:	4b04      	ldr	r3, [pc, #16]	; (28fa8 <cJSON_Init+0x18>)
   28f98:	6043      	str	r3, [r0, #4]

	cJSON_InitHooks(&_cjson_hooks);
   28f9a:	f7ff beef 	b.w	28d7c <cJSON_InitHooks>
   28f9e:	bf00      	nop
   28fa0:	20018e54 	.word	0x20018e54
   28fa4:	0003f4e9 	.word	0x0003f4e9
   28fa8:	0003f4e5 	.word	0x0003f4e5

00028fac <_nrf_modem_lib_init>:
	},
#endif
};

static int _nrf_modem_lib_init(const struct device *unused)
{
   28fac:	b538      	push	{r3, r4, r5, lr}
	if (!first_time_init) {
   28fae:	4d19      	ldr	r5, [pc, #100]	; (29014 <_nrf_modem_lib_init+0x68>)
   28fb0:	4c19      	ldr	r4, [pc, #100]	; (29018 <_nrf_modem_lib_init+0x6c>)
   28fb2:	782b      	ldrb	r3, [r5, #0]
   28fb4:	b933      	cbnz	r3, 28fc4 <_nrf_modem_lib_init+0x18>
	list->tail = NULL;
   28fb6:	e9c4 3300 	strd	r3, r3, [r4]
	return z_impl_k_mutex_init(mutex);
   28fba:	4818      	ldr	r0, [pc, #96]	; (2901c <_nrf_modem_lib_init+0x70>)
   28fbc:	f018 fc9d 	bl	418fa <z_impl_k_mutex_init>
		sys_slist_init(&shutdown_threads);
		k_mutex_init(&slist_mutex);
		first_time_init = true;
   28fc0:	2301      	movs	r3, #1
   28fc2:	702b      	strb	r3, [r5, #0]
	}

	/* Setup the network IRQ used by the Modem library.
	 * Note: No call to irq_enable() here, that is done through nrf_modem_init().
	 */
	IRQ_CONNECT(NRF_MODEM_NETWORK_IRQ, NRF_MODEM_NETWORK_IRQ_PRIORITY,
   28fc4:	2200      	movs	r2, #0
   28fc6:	202a      	movs	r0, #42	; 0x2a
   28fc8:	4611      	mov	r1, r2
   28fca:	f7fd fab9 	bl	26540 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	init_ret = nrf_modem_init(&init_params, NORMAL_MODE);
   28fce:	2100      	movs	r1, #0
   28fd0:	4813      	ldr	r0, [pc, #76]	; (29020 <_nrf_modem_lib_init+0x74>)
   28fd2:	f00d fa43 	bl	3645c <nrf_modem_init>
   28fd6:	4b13      	ldr	r3, [pc, #76]	; (29024 <_nrf_modem_lib_init+0x78>)
   28fd8:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   28fda:	f04f 32ff 	mov.w	r2, #4294967295
   28fde:	f04f 33ff 	mov.w	r3, #4294967295
   28fe2:	480e      	ldr	r0, [pc, #56]	; (2901c <_nrf_modem_lib_init+0x70>)
   28fe4:	f00e fc74 	bl	378d0 <z_impl_k_mutex_lock>

	k_mutex_lock(&slist_mutex, K_FOREVER);
	if (sys_slist_peek_head(&shutdown_threads) != NULL) {
   28fe8:	6820      	ldr	r0, [r4, #0]
   28fea:	b170      	cbz	r0, 2900a <_nrf_modem_lib_init+0x5e>
	return node->next;
   28fec:	6804      	ldr	r4, [r0, #0]
   28fee:	2c00      	cmp	r4, #0
   28ff0:	bf38      	it	cc
   28ff2:	2400      	movcc	r4, #0
	z_impl_k_sem_give(sem);
   28ff4:	3004      	adds	r0, #4
   28ff6:	f010 f95d 	bl	392b4 <z_impl_k_sem_give>
		struct shutdown_thread *thread, *next_thread;

		/* Wake up all sleeping threads. */
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&shutdown_threads, thread,
   28ffa:	b134      	cbz	r4, 2900a <_nrf_modem_lib_init+0x5e>
   28ffc:	6823      	ldr	r3, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   28ffe:	4620      	mov	r0, r4
   29000:	2b00      	cmp	r3, #0
   29002:	bf38      	it	cc
   29004:	2300      	movcc	r3, #0
   29006:	461c      	mov	r4, r3
   29008:	e7f4      	b.n	28ff4 <_nrf_modem_lib_init+0x48>
	return z_impl_k_mutex_unlock(mutex);
   2900a:	4804      	ldr	r0, [pc, #16]	; (2901c <_nrf_modem_lib_init+0x70>)
   2900c:	f00e fd5a 	bl	37ac4 <z_impl_k_mutex_unlock>
		 */
		return 0;
	}

	return init_ret;
}
   29010:	2000      	movs	r0, #0
   29012:	bd38      	pop	{r3, r4, r5, pc}
   29014:	2001ec1b 	.word	0x2001ec1b
   29018:	20018e60 	.word	0x20018e60
   2901c:	20018e68 	.word	0x20018e68
   29020:	000439ec 	.word	0x000439ec
   29024:	20018e5c 	.word	0x20018e5c

00029028 <nrf_modem_lib_shutdown_wait>:

void nrf_modem_lib_shutdown_wait(void)
{
   29028:	b530      	push	{r4, r5, lr}
   2902a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
   2902c:	2201      	movs	r2, #1
   2902e:	2100      	movs	r1, #0
   29030:	a802      	add	r0, sp, #8
   29032:	f018 fcd5 	bl	419e0 <z_impl_k_sem_init>
   29036:	ad01      	add	r5, sp, #4
	return z_impl_k_mutex_lock(mutex, timeout);
   29038:	f04f 33ff 	mov.w	r3, #4294967295
   2903c:	f04f 32ff 	mov.w	r2, #4294967295
   29040:	481c      	ldr	r0, [pc, #112]	; (290b4 <nrf_modem_lib_shutdown_wait+0x8c>)
   29042:	f00e fc45 	bl	378d0 <z_impl_k_mutex_lock>
	parent->next = child;
   29046:	2300      	movs	r3, #0
Z_GENLIST_APPEND(slist, snode)
   29048:	4c1b      	ldr	r4, [pc, #108]	; (290b8 <nrf_modem_lib_shutdown_wait+0x90>)
	parent->next = child;
   2904a:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2904c:	6863      	ldr	r3, [r4, #4]
   2904e:	bb2b      	cbnz	r3, 2909c <nrf_modem_lib_shutdown_wait+0x74>
	list->head = node;
   29050:	e9c4 5500 	strd	r5, r5, [r4]
	return z_impl_k_mutex_unlock(mutex);
   29054:	4817      	ldr	r0, [pc, #92]	; (290b4 <nrf_modem_lib_shutdown_wait+0x8c>)
   29056:	f00e fd35 	bl	37ac4 <z_impl_k_mutex_unlock>
	return z_impl_k_sem_take(sem, timeout);
   2905a:	f04f 32ff 	mov.w	r2, #4294967295
   2905e:	f04f 33ff 	mov.w	r3, #4294967295
   29062:	a802      	add	r0, sp, #8
   29064:	f010 f96a 	bl	3933c <z_impl_k_sem_take>
	return z_impl_k_mutex_lock(mutex, timeout);
   29068:	f04f 32ff 	mov.w	r2, #4294967295
   2906c:	f04f 33ff 	mov.w	r3, #4294967295
   29070:	4810      	ldr	r0, [pc, #64]	; (290b4 <nrf_modem_lib_shutdown_wait+0x8c>)
   29072:	f00e fc2d 	bl	378d0 <z_impl_k_mutex_lock>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29076:	2200      	movs	r2, #0
   29078:	6823      	ldr	r3, [r4, #0]
   2907a:	b153      	cbz	r3, 29092 <nrf_modem_lib_shutdown_wait+0x6a>
   2907c:	42ab      	cmp	r3, r5
   2907e:	d116      	bne.n	290ae <nrf_modem_lib_shutdown_wait+0x86>
Z_GENLIST_REMOVE(slist, snode)
   29080:	9901      	ldr	r1, [sp, #4]
   29082:	b972      	cbnz	r2, 290a2 <nrf_modem_lib_shutdown_wait+0x7a>
   29084:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   29086:	6021      	str	r1, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29088:	429a      	cmp	r2, r3
   2908a:	d100      	bne.n	2908e <nrf_modem_lib_shutdown_wait+0x66>
	list->tail = node;
   2908c:	6061      	str	r1, [r4, #4]
	parent->next = child;
   2908e:	2300      	movs	r3, #0
   29090:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
   29092:	4808      	ldr	r0, [pc, #32]	; (290b4 <nrf_modem_lib_shutdown_wait+0x8c>)
   29094:	f00e fd16 	bl	37ac4 <z_impl_k_mutex_unlock>
	(void)k_sem_take(&thread.sem, K_FOREVER);

	k_mutex_lock(&slist_mutex, K_FOREVER);
	sys_slist_find_and_remove(&shutdown_threads, &thread.node);
	k_mutex_unlock(&slist_mutex);
}
   29098:	b009      	add	sp, #36	; 0x24
   2909a:	bd30      	pop	{r4, r5, pc}
   2909c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2909e:	6065      	str	r5, [r4, #4]
}
   290a0:	e7d8      	b.n	29054 <nrf_modem_lib_shutdown_wait+0x2c>
	parent->next = child;
   290a2:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   290a4:	6861      	ldr	r1, [r4, #4]
   290a6:	4299      	cmp	r1, r3
	list->tail = node;
   290a8:	bf08      	it	eq
   290aa:	6062      	streq	r2, [r4, #4]
}
   290ac:	e7ef      	b.n	2908e <nrf_modem_lib_shutdown_wait+0x66>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   290ae:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   290b0:	681b      	ldr	r3, [r3, #0]
   290b2:	e7e2      	b.n	2907a <nrf_modem_lib_shutdown_wait+0x52>
   290b4:	20018e68 	.word	0x20018e68
   290b8:	20018e60 	.word	0x20018e60

000290bc <nrf_modem_lib_get_init_ret>:
}

int nrf_modem_lib_get_init_ret(void)
{
	return init_ret;
}
   290bc:	4b01      	ldr	r3, [pc, #4]	; (290c4 <nrf_modem_lib_get_init_ret+0x8>)
   290be:	6818      	ldr	r0, [r3, #0]
   290c0:	4770      	bx	lr
   290c2:	bf00      	nop
   290c4:	20018e5c 	.word	0x20018e5c

000290c8 <thread_monitor_entry_get>:

/* Get thread monitor structure assigned to a specific thread id, with a RPC
 * counter value at which nrf_modem_lib last checked the 'readiness' of a thread
 */
static struct thread_monitor_entry *thread_monitor_entry_get(k_tid_t id)
{
   290c8:	b570      	push	{r4, r5, r6, lr}
	struct thread_monitor_entry *entry = thread_event_monitor;
	struct thread_monitor_entry *new_entry = thread_event_monitor;
   290ca:	4c0d      	ldr	r4, [pc, #52]	; (29100 <thread_monitor_entry_get+0x38>)
{
   290cc:	4602      	mov	r2, r0
			new_entry = entry;
			break;
		}

		/* Identify oldest entry. */
		entry_age = rpc_event_cnt - entry->cnt;
   290ce:	250a      	movs	r5, #10
	int entry_age, oldest_entry_age = 0;
   290d0:	2600      	movs	r6, #0
	struct thread_monitor_entry *entry = thread_event_monitor;
   290d2:	4620      	mov	r0, r4
		entry_age = rpc_event_cnt - entry->cnt;
   290d4:	4b0b      	ldr	r3, [pc, #44]	; (29104 <thread_monitor_entry_get+0x3c>)
   290d6:	681b      	ldr	r3, [r3, #0]
		if (entry->id == id) {
   290d8:	6801      	ldr	r1, [r0, #0]
   290da:	4291      	cmp	r1, r2
   290dc:	d00e      	beq.n	290fc <thread_monitor_entry_get+0x34>
		} else if (entry->id == 0) {
   290de:	b151      	cbz	r1, 290f6 <thread_monitor_entry_get+0x2e>
		entry_age = rpc_event_cnt - entry->cnt;
   290e0:	6841      	ldr	r1, [r0, #4]
   290e2:	1a59      	subs	r1, r3, r1
		if (entry_age > oldest_entry_age) {
   290e4:	42b1      	cmp	r1, r6
   290e6:	bfc4      	itt	gt
   290e8:	4604      	movgt	r4, r0
   290ea:	460e      	movgt	r6, r1
	for ( ; PART_OF_ARRAY(thread_event_monitor, entry); entry++) {
   290ec:	3d01      	subs	r5, #1
   290ee:	f100 0008 	add.w	r0, r0, #8
   290f2:	d1f1      	bne.n	290d8 <thread_monitor_entry_get+0x10>
   290f4:	4620      	mov	r0, r4
			new_entry = entry;
		}
	}

	new_entry->id = id;
	new_entry->cnt = rpc_event_cnt - 1;
   290f6:	3b01      	subs	r3, #1
	new_entry->id = id;
   290f8:	6002      	str	r2, [r0, #0]
	new_entry->cnt = rpc_event_cnt - 1;
   290fa:	6043      	str	r3, [r0, #4]

	return new_entry;
}
   290fc:	bd70      	pop	{r4, r5, r6, pc}
   290fe:	bf00      	nop
   29100:	200190a8 	.word	0x200190a8
   29104:	20019080 	.word	0x20019080

00029108 <rpc_proxy_irq_handler>:
void nrf_modem_os_trace_irq_clear(void)
{
	NVIC_ClearPendingIRQ(TRACE_IRQ);
}

ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   29108:	4668      	mov	r0, sp
   2910a:	f020 0107 	bic.w	r1, r0, #7
   2910e:	468d      	mov	sp, r1
   29110:	b519      	push	{r0, r3, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29112:	4b0f      	ldr	r3, [pc, #60]	; (29150 <rpc_proxy_irq_handler+0x48>)
   29114:	e8d3 2fef 	ldaex	r2, [r3]
   29118:	3201      	adds	r2, #1
   2911a:	e8c3 2fe1 	stlex	r1, r2, [r3]
   2911e:	2900      	cmp	r1, #0
   29120:	d1f8      	bne.n	29114 <rpc_proxy_irq_handler+0xc>
{
	atomic_inc(&rpc_event_cnt);

	nrf_modem_os_application_irq_handler();
   29122:	f009 ff33 	bl	32f8c <nrf_modem_os_application_irq_handler>

	struct sleeping_thread *thread;

	/* Wake up all sleeping threads. */
	SYS_SLIST_FOR_EACH_CONTAINER(&sleeping_threads, thread, node) {
   29126:	4b0b      	ldr	r3, [pc, #44]	; (29154 <rpc_proxy_irq_handler+0x4c>)
   29128:	681c      	ldr	r4, [r3, #0]
   2912a:	2c00      	cmp	r4, #0
   2912c:	bf38      	it	cc
   2912e:	2400      	movcc	r4, #0
   29130:	b12c      	cbz	r4, 2913e <rpc_proxy_irq_handler+0x36>
	z_impl_k_sem_give(sem);
   29132:	1d20      	adds	r0, r4, #4
   29134:	f010 f8be 	bl	392b4 <z_impl_k_sem_give>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   29138:	6824      	ldr	r4, [r4, #0]
   2913a:	2c00      	cmp	r4, #0
   2913c:	d1f8      	bne.n	29130 <rpc_proxy_irq_handler+0x28>
		k_sem_give(&thread->sem);
	}

	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   2913e:	f7fd fa31 	bl	265a4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   29142:	f7fd fdeb 	bl	26d1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(rpc_proxy_irq_handler)
   29146:	e8bd 4019 	ldmia.w	sp!, {r0, r3, r4, lr}
   2914a:	4685      	mov	sp, r0
   2914c:	4770      	bx	lr
   2914e:	bf00      	nop
   29150:	20019080 	.word	0x20019080
   29154:	200190a0 	.word	0x200190a0

00029158 <nrf_modem_os_timedwait>:
{
   29158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2915c:	460c      	mov	r4, r1
   2915e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_uptime_ticks();
   29160:	f018 fcba 	bl	41ad8 <z_impl_k_uptime_ticks>
	if (*timeout == 0) {
   29164:	6823      	ldr	r3, [r4, #0]
   29166:	4680      	mov	r8, r0
   29168:	2b00      	cmp	r3, #0
   2916a:	468a      	mov	sl, r1
   2916c:	d103      	bne.n	29176 <nrf_modem_os_timedwait+0x1e>
	z_impl_k_yield();
   2916e:	f00f ff15 	bl	38f9c <z_impl_k_yield>
		return NRF_ETIMEDOUT;
   29172:	203c      	movs	r0, #60	; 0x3c
   29174:	e091      	b.n	2929a <nrf_modem_os_timedwait+0x142>
		*timeout = SYS_FOREVER_MS;
   29176:	bfbc      	itt	lt
   29178:	f04f 33ff 	movlt.w	r3, #4294967295
   2917c:	6023      	strlt	r3, [r4, #0]
	return z_impl_k_sem_init(sem, initial_count, limit);
   2917e:	2201      	movs	r2, #1
   29180:	2100      	movs	r1, #0
   29182:	a802      	add	r0, sp, #8
   29184:	f018 fc2c 	bl	419e0 <z_impl_k_sem_init>
   29188:	ad01      	add	r5, sp, #4
	__asm__ volatile(
   2918a:	f04f 0320 	mov.w	r3, #32
   2918e:	f3ef 8b11 	mrs	fp, BASEPRI
   29192:	f383 8811 	msr	BASEPRI, r3
   29196:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   2919a:	f010 f885 	bl	392a8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   2919e:	f7ff ff93 	bl	290c8 <thread_monitor_entry_get>
	if (rpc_event_cnt != entry->cnt) {
   291a2:	4947      	ldr	r1, [pc, #284]	; (292c0 <nrf_modem_os_timedwait+0x168>)
   291a4:	6843      	ldr	r3, [r0, #4]
   291a6:	680a      	ldr	r2, [r1, #0]
   291a8:	4689      	mov	r9, r1
   291aa:	4293      	cmp	r3, r2
   291ac:	f04f 0300 	mov.w	r3, #0
   291b0:	d108      	bne.n	291c4 <nrf_modem_os_timedwait+0x6c>
	parent->next = child;
   291b2:	9301      	str	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   291b4:	4b43      	ldr	r3, [pc, #268]	; (292c4 <nrf_modem_os_timedwait+0x16c>)
   291b6:	685a      	ldr	r2, [r3, #4]
   291b8:	2a00      	cmp	r2, #0
   291ba:	d171      	bne.n	292a0 <nrf_modem_os_timedwait+0x148>
	list->head = node;
   291bc:	e9c3 5500 	strd	r5, r5, [r3]
		allow_to_sleep = true;
   291c0:	2301      	movs	r3, #1
}
   291c2:	e000      	b.n	291c6 <nrf_modem_os_timedwait+0x6e>
	entry->cnt = rpc_event_cnt;
   291c4:	6042      	str	r2, [r0, #4]
	__asm__ volatile(
   291c6:	f38b 8811 	msr	BASEPRI, fp
   291ca:	f3bf 8f6f 	isb	sy
	if (!sleeping_thread_add(&thread)) {
   291ce:	2b00      	cmp	r3, #0
   291d0:	d062      	beq.n	29298 <nrf_modem_os_timedwait+0x140>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   291d2:	6823      	ldr	r3, [r4, #0]
   291d4:	1c5a      	adds	r2, r3, #1
   291d6:	d066      	beq.n	292a6 <nrf_modem_os_timedwait+0x14e>
   291d8:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
   291dc:	f240 30e7 	movw	r0, #999	; 0x3e7
   291e0:	2100      	movs	r1, #0
   291e2:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   291e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   291ea:	2300      	movs	r3, #0
   291ec:	fbce 010c 	smlal	r0, r1, lr, ip
   291f0:	f7f3 fe64 	bl	1cebc <__aeabi_uldivmod>
   291f4:	4602      	mov	r2, r0
   291f6:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   291f8:	a802      	add	r0, sp, #8
   291fa:	f010 f89f 	bl	3933c <z_impl_k_sem_take>
	__asm__ volatile(
   291fe:	f04f 0320 	mov.w	r3, #32
   29202:	f3ef 8b11 	mrs	fp, BASEPRI
   29206:	f383 8811 	msr	BASEPRI, r3
   2920a:	f3bf 8f6f 	isb	sy
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2920e:	2000      	movs	r0, #0
   29210:	4b2c      	ldr	r3, [pc, #176]	; (292c4 <nrf_modem_os_timedwait+0x16c>)
   29212:	681a      	ldr	r2, [r3, #0]
   29214:	b15a      	cbz	r2, 2922e <nrf_modem_os_timedwait+0xd6>
   29216:	42aa      	cmp	r2, r5
   29218:	d14f      	bne.n	292ba <nrf_modem_os_timedwait+0x162>
Z_GENLIST_REMOVE(slist, snode)
   2921a:	9d01      	ldr	r5, [sp, #4]
   2921c:	2800      	cmp	r0, #0
   2921e:	d146      	bne.n	292ae <nrf_modem_os_timedwait+0x156>
   29220:	6859      	ldr	r1, [r3, #4]
	list->head = node;
   29222:	601d      	str	r5, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   29224:	4291      	cmp	r1, r2
   29226:	d100      	bne.n	2922a <nrf_modem_os_timedwait+0xd2>
	list->tail = node;
   29228:	605d      	str	r5, [r3, #4]
	parent->next = child;
   2922a:	2300      	movs	r3, #0
   2922c:	9301      	str	r3, [sp, #4]
	return z_impl_k_current_get();
   2922e:	f010 f83b 	bl	392a8 <z_impl_k_current_get>
	entry = thread_monitor_entry_get(k_current_get());
   29232:	f7ff ff49 	bl	290c8 <thread_monitor_entry_get>
	entry->cnt = rpc_event_cnt;
   29236:	f8d9 3000 	ldr.w	r3, [r9]
   2923a:	6043      	str	r3, [r0, #4]
	__asm__ volatile(
   2923c:	f38b 8811 	msr	BASEPRI, fp
   29240:	f3bf 8f6f 	isb	sy
	if (*timeout == SYS_FOREVER_MS) {
   29244:	6825      	ldr	r5, [r4, #0]
   29246:	1c6b      	adds	r3, r5, #1
   29248:	d026      	beq.n	29298 <nrf_modem_os_timedwait+0x140>
	return z_impl_k_uptime_ticks();
   2924a:	f018 fc45 	bl	41ad8 <z_impl_k_uptime_ticks>
   2924e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
   29252:	468e      	mov	lr, r1
   29254:	fba8 890c 	umull	r8, r9, r8, ip
   29258:	fba0 010c 	umull	r0, r1, r0, ip
   2925c:	fb0c 990a 	mla	r9, ip, sl, r9
   29260:	fb0c 110e 	mla	r1, ip, lr, r1
   29264:	ea4f 32d8 	mov.w	r2, r8, lsr #15
   29268:	ea42 4249 	orr.w	r2, r2, r9, lsl #17
	remaining = *timeout - k_uptime_delta(&start);
   2926c:	1952      	adds	r2, r2, r5
   2926e:	ea4f 33d9 	mov.w	r3, r9, lsr #15
   29272:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   29276:	0bc5      	lsrs	r5, r0, #15
   29278:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
   2927c:	1b56      	subs	r6, r2, r5
   2927e:	ea4f 3cd1 	mov.w	ip, r1, lsr #15
   29282:	eb63 070c 	sbc.w	r7, r3, ip
	*timeout = remaining > 0 ? remaining : 0;
   29286:	2e00      	cmp	r6, #0
   29288:	f177 0300 	sbcs.w	r3, r7, #0
   2928c:	bfb8      	it	lt
   2928e:	2600      	movlt	r6, #0
   29290:	6026      	str	r6, [r4, #0]
	if (*timeout == 0) {
   29292:	2e00      	cmp	r6, #0
   29294:	f43f af6d 	beq.w	29172 <nrf_modem_os_timedwait+0x1a>
	return 0;
   29298:	2000      	movs	r0, #0
}
   2929a:	b009      	add	sp, #36	; 0x24
   2929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   292a0:	6015      	str	r5, [r2, #0]
	list->tail = node;
   292a2:	605d      	str	r5, [r3, #4]
   292a4:	e78c      	b.n	291c0 <nrf_modem_os_timedwait+0x68>
	(void)k_sem_take(&thread.sem, SYS_TIMEOUT_MS(*timeout));
   292a6:	f04f 32ff 	mov.w	r2, #4294967295
   292aa:	4613      	mov	r3, r2
   292ac:	e7a4      	b.n	291f8 <nrf_modem_os_timedwait+0xa0>
	parent->next = child;
   292ae:	6005      	str	r5, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   292b0:	6859      	ldr	r1, [r3, #4]
   292b2:	4291      	cmp	r1, r2
	list->tail = node;
   292b4:	bf08      	it	eq
   292b6:	6058      	streq	r0, [r3, #4]
}
   292b8:	e7b7      	b.n	2922a <nrf_modem_os_timedwait+0xd2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   292ba:	4610      	mov	r0, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   292bc:	6812      	ldr	r2, [r2, #0]
   292be:	e7a9      	b.n	29214 <nrf_modem_os_timedwait+0xbc>
   292c0:	20019080 	.word	0x20019080
   292c4:	200190a0 	.word	0x200190a0

000292c8 <nrf_modem_os_errno_set>:
	switch (err_code) {
   292c8:	283c      	cmp	r0, #60	; 0x3c
{
   292ca:	b510      	push	{r4, lr}
   292cc:	4604      	mov	r4, r0
	switch (err_code) {
   292ce:	f300 809f 	bgt.w	29410 <nrf_modem_os_errno_set+0x148>
   292d2:	2800      	cmp	r0, #0
   292d4:	dc1e      	bgt.n	29314 <nrf_modem_os_errno_set+0x4c>
		__ASSERT(false, "Untranslated errno %d set by nrf_modem_lib!", err_code);
   292d6:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   292da:	4ab9      	ldr	r2, [pc, #740]	; (295c0 <nrf_modem_os_errno_set+0x2f8>)
   292dc:	49b9      	ldr	r1, [pc, #740]	; (295c4 <nrf_modem_os_errno_set+0x2fc>)
   292de:	48ba      	ldr	r0, [pc, #744]	; (295c8 <nrf_modem_os_errno_set+0x300>)
   292e0:	f013 fd49 	bl	3cd76 <printk>
   292e4:	4621      	mov	r1, r4
   292e6:	48b9      	ldr	r0, [pc, #740]	; (295cc <nrf_modem_os_errno_set+0x304>)
   292e8:	f013 fd45 	bl	3cd76 <printk>
   292ec:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   292f0:	48b3      	ldr	r0, [pc, #716]	; (295c0 <nrf_modem_os_errno_set+0x2f8>)
   292f2:	f013 fff4 	bl	3d2de <assert_post_action>
   292f6:	4bb6      	ldr	r3, [pc, #728]	; (295d0 <nrf_modem_os_errno_set+0x308>)
   292f8:	48b6      	ldr	r0, [pc, #728]	; (295d4 <nrf_modem_os_errno_set+0x30c>)
		LOG_ERR("Untranslated errno %d set by nrf_modem_lib!", err_code);
   292fa:	4622      	mov	r2, r4
   292fc:	1ac0      	subs	r0, r0, r3
   292fe:	08c0      	lsrs	r0, r0, #3
   29300:	0180      	lsls	r0, r0, #6
   29302:	49b5      	ldr	r1, [pc, #724]	; (295d8 <nrf_modem_os_errno_set+0x310>)
   29304:	f040 0001 	orr.w	r0, r0, #1
   29308:	f013 fffa 	bl	3d300 <log_string_sync>
		errno = 0xBAADBAAD;
   2930c:	f014 fee5 	bl	3e0da <__errno>
   29310:	4bb2      	ldr	r3, [pc, #712]	; (295dc <nrf_modem_os_errno_set+0x314>)
   29312:	e0be      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
   29314:	1e43      	subs	r3, r0, #1
   29316:	2b3b      	cmp	r3, #59	; 0x3b
   29318:	d8dd      	bhi.n	292d6 <nrf_modem_os_errno_set+0xe>
   2931a:	a201      	add	r2, pc, #4	; (adr r2, 29320 <nrf_modem_os_errno_set+0x58>)
   2931c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   29320:	0002948d 	.word	0x0002948d
   29324:	00029497 	.word	0x00029497
   29328:	000292d7 	.word	0x000292d7
   2932c:	000292d7 	.word	0x000292d7
   29330:	0002949f 	.word	0x0002949f
   29334:	000292d7 	.word	0x000292d7
   29338:	000292d7 	.word	0x000292d7
   2933c:	000294a7 	.word	0x000294a7
   29340:	000294af 	.word	0x000294af
   29344:	000292d7 	.word	0x000292d7
   29348:	000292d7 	.word	0x000292d7
   2934c:	000294b7 	.word	0x000294b7
   29350:	000294bf 	.word	0x000294bf
   29354:	000294c7 	.word	0x000294c7
   29358:	000292d7 	.word	0x000292d7
   2935c:	000292d7 	.word	0x000292d7
   29360:	000292d7 	.word	0x000292d7
   29364:	000292d7 	.word	0x000292d7
   29368:	000292d7 	.word	0x000292d7
   2936c:	000292d7 	.word	0x000292d7
   29370:	000292d7 	.word	0x000292d7
   29374:	000294cf 	.word	0x000294cf
   29378:	000292d7 	.word	0x000292d7
   2937c:	000294d7 	.word	0x000294d7
   29380:	000292d7 	.word	0x000292d7
   29384:	000292d7 	.word	0x000292d7
   29388:	000292d7 	.word	0x000292d7
   2938c:	000292d7 	.word	0x000292d7
   29390:	000292d7 	.word	0x000292d7
   29394:	000292d7 	.word	0x000292d7
   29398:	000292d7 	.word	0x000292d7
   2939c:	000292d7 	.word	0x000292d7
   293a0:	000292d7 	.word	0x000292d7
   293a4:	000292d7 	.word	0x000292d7
   293a8:	000294df 	.word	0x000294df
   293ac:	000292d7 	.word	0x000292d7
   293b0:	000294e7 	.word	0x000294e7
   293b4:	000292d7 	.word	0x000292d7
   293b8:	000292d7 	.word	0x000292d7
   293bc:	000295af 	.word	0x000295af
   293c0:	000294ef 	.word	0x000294ef
   293c4:	000294f7 	.word	0x000294f7
   293c8:	000294ff 	.word	0x000294ff
   293cc:	00029507 	.word	0x00029507
   293d0:	0002950f 	.word	0x0002950f
   293d4:	000292d7 	.word	0x000292d7
   293d8:	00029517 	.word	0x00029517
   293dc:	0002951f 	.word	0x0002951f
   293e0:	000292d7 	.word	0x000292d7
   293e4:	00029527 	.word	0x00029527
   293e8:	0002952f 	.word	0x0002952f
   293ec:	00029537 	.word	0x00029537
   293f0:	000295b7 	.word	0x000295b7
   293f4:	0002953f 	.word	0x0002953f
   293f8:	000292d7 	.word	0x000292d7
   293fc:	00029547 	.word	0x00029547
   29400:	0002954f 	.word	0x0002954f
   29404:	000292d7 	.word	0x000292d7
   29408:	000292d7 	.word	0x000292d7
   2940c:	00029557 	.word	0x00029557
	switch (err_code) {
   29410:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
   29414:	2b18      	cmp	r3, #24
   29416:	f63f af5e 	bhi.w	292d6 <nrf_modem_os_errno_set+0xe>
   2941a:	2b18      	cmp	r3, #24
   2941c:	f63f af5b 	bhi.w	292d6 <nrf_modem_os_errno_set+0xe>
   29420:	a201      	add	r2, pc, #4	; (adr r2, 29428 <nrf_modem_os_errno_set+0x160>)
   29422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   29426:	bf00      	nop
   29428:	0002955f 	.word	0x0002955f
   2942c:	000292d7 	.word	0x000292d7
   29430:	000292d7 	.word	0x000292d7
   29434:	000292d7 	.word	0x000292d7
   29438:	000292d7 	.word	0x000292d7
   2943c:	000292d7 	.word	0x000292d7
   29440:	000292d7 	.word	0x000292d7
   29444:	00029567 	.word	0x00029567
   29448:	000292d7 	.word	0x000292d7
   2944c:	00029577 	.word	0x00029577
   29450:	0002956f 	.word	0x0002956f
   29454:	000292d7 	.word	0x000292d7
   29458:	000292d7 	.word	0x000292d7
   2945c:	000292d7 	.word	0x000292d7
   29460:	000292d7 	.word	0x000292d7
   29464:	000292d7 	.word	0x000292d7
   29468:	000292d7 	.word	0x000292d7
   2946c:	000292d7 	.word	0x000292d7
   29470:	000292d7 	.word	0x000292d7
   29474:	000292d7 	.word	0x000292d7
   29478:	0002957f 	.word	0x0002957f
   2947c:	00029587 	.word	0x00029587
   29480:	00029591 	.word	0x00029591
   29484:	0002959b 	.word	0x0002959b
   29488:	000295a5 	.word	0x000295a5
		errno = EPERM;
   2948c:	f014 fe25 	bl	3e0da <__errno>
   29490:	2301      	movs	r3, #1
		errno = 0xBAADBAAD;
   29492:	6003      	str	r3, [r0, #0]
}
   29494:	bd10      	pop	{r4, pc}
		errno = ENOENT;
   29496:	f014 fe20 	bl	3e0da <__errno>
   2949a:	2302      	movs	r3, #2
   2949c:	e7f9      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EIO;
   2949e:	f014 fe1c 	bl	3e0da <__errno>
   294a2:	2305      	movs	r3, #5
   294a4:	e7f5      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENOEXEC;
   294a6:	f014 fe18 	bl	3e0da <__errno>
   294aa:	2308      	movs	r3, #8
   294ac:	e7f1      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EBADF;
   294ae:	f014 fe14 	bl	3e0da <__errno>
   294b2:	2309      	movs	r3, #9
   294b4:	e7ed      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENOMEM;
   294b6:	f014 fe10 	bl	3e0da <__errno>
   294ba:	230c      	movs	r3, #12
   294bc:	e7e9      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EACCES;
   294be:	f014 fe0c 	bl	3e0da <__errno>
   294c2:	230d      	movs	r3, #13
   294c4:	e7e5      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EFAULT;
   294c6:	f014 fe08 	bl	3e0da <__errno>
   294ca:	230e      	movs	r3, #14
   294cc:	e7e1      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EINVAL;
   294ce:	f014 fe04 	bl	3e0da <__errno>
   294d2:	2316      	movs	r3, #22
   294d4:	e7dd      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EMFILE;
   294d6:	f014 fe00 	bl	3e0da <__errno>
   294da:	2318      	movs	r3, #24
   294dc:	e7d9      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EAGAIN;
   294de:	f014 fdfc 	bl	3e0da <__errno>
   294e2:	230b      	movs	r3, #11
   294e4:	e7d5      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EDOM;
   294e6:	f014 fdf8 	bl	3e0da <__errno>
   294ea:	2321      	movs	r3, #33	; 0x21
   294ec:	e7d1      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EPROTOTYPE;
   294ee:	f014 fdf4 	bl	3e0da <__errno>
   294f2:	236b      	movs	r3, #107	; 0x6b
   294f4:	e7cd      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENOPROTOOPT;
   294f6:	f014 fdf0 	bl	3e0da <__errno>
   294fa:	236d      	movs	r3, #109	; 0x6d
   294fc:	e7c9      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EPROTONOSUPPORT;
   294fe:	f014 fdec 	bl	3e0da <__errno>
   29502:	237b      	movs	r3, #123	; 0x7b
   29504:	e7c5      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ESOCKTNOSUPPORT;
   29506:	f014 fde8 	bl	3e0da <__errno>
   2950a:	237c      	movs	r3, #124	; 0x7c
   2950c:	e7c1      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EOPNOTSUPP;
   2950e:	f014 fde4 	bl	3e0da <__errno>
   29512:	235f      	movs	r3, #95	; 0x5f
   29514:	e7bd      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EAFNOSUPPORT;
   29516:	f014 fde0 	bl	3e0da <__errno>
   2951a:	236a      	movs	r3, #106	; 0x6a
   2951c:	e7b9      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EADDRINUSE;
   2951e:	f014 fddc 	bl	3e0da <__errno>
   29522:	2370      	movs	r3, #112	; 0x70
   29524:	e7b5      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENETDOWN;
   29526:	f014 fdd8 	bl	3e0da <__errno>
   2952a:	2373      	movs	r3, #115	; 0x73
   2952c:	e7b1      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENETUNREACH;
   2952e:	f014 fdd4 	bl	3e0da <__errno>
   29532:	2372      	movs	r3, #114	; 0x72
   29534:	e7ad      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENETRESET;
   29536:	f014 fdd0 	bl	3e0da <__errno>
   2953a:	237e      	movs	r3, #126	; 0x7e
   2953c:	e7a9      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ECONNRESET;
   2953e:	f014 fdcc 	bl	3e0da <__errno>
   29542:	2368      	movs	r3, #104	; 0x68
   29544:	e7a5      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EISCONN;
   29546:	f014 fdc8 	bl	3e0da <__errno>
   2954a:	237f      	movs	r3, #127	; 0x7f
   2954c:	e7a1      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENOTCONN;
   2954e:	f014 fdc4 	bl	3e0da <__errno>
   29552:	2380      	movs	r3, #128	; 0x80
   29554:	e79d      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ETIMEDOUT;
   29556:	f014 fdc0 	bl	3e0da <__errno>
   2955a:	2374      	movs	r3, #116	; 0x74
   2955c:	e799      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENOBUFS;
   2955e:	f014 fdbc 	bl	3e0da <__errno>
   29562:	2369      	movs	r3, #105	; 0x69
   29564:	e795      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EHOSTDOWN;
   29566:	f014 fdb8 	bl	3e0da <__errno>
   2956a:	2375      	movs	r3, #117	; 0x75
   2956c:	e791      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EINPROGRESS;
   2956e:	f014 fdb4 	bl	3e0da <__errno>
   29572:	2377      	movs	r3, #119	; 0x77
   29574:	e78d      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EALREADY;
   29576:	f014 fdb0 	bl	3e0da <__errno>
   2957a:	2378      	movs	r3, #120	; 0x78
   2957c:	e789      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ECANCELED;
   2957e:	f014 fdac 	bl	3e0da <__errno>
   29582:	238c      	movs	r3, #140	; 0x8c
   29584:	e785      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ENOKEY;
   29586:	f014 fda8 	bl	3e0da <__errno>
   2958a:	f240 73d1 	movw	r3, #2001	; 0x7d1
   2958e:	e780      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EKEYEXPIRED;
   29590:	f014 fda3 	bl	3e0da <__errno>
   29594:	f240 73d2 	movw	r3, #2002	; 0x7d2
   29598:	e77b      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EKEYREVOKED;
   2959a:	f014 fd9e 	bl	3e0da <__errno>
   2959e:	f240 73d3 	movw	r3, #2003	; 0x7d3
   295a2:	e776      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EKEYREJECTED;
   295a4:	f014 fd99 	bl	3e0da <__errno>
   295a8:	f240 73d4 	movw	r3, #2004	; 0x7d4
   295ac:	e771      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = EMSGSIZE;
   295ae:	f014 fd94 	bl	3e0da <__errno>
   295b2:	237a      	movs	r3, #122	; 0x7a
   295b4:	e76d      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
		errno = ECONNABORTED;
   295b6:	f014 fd90 	bl	3e0da <__errno>
   295ba:	2371      	movs	r3, #113	; 0x71
   295bc:	e769      	b.n	29492 <nrf_modem_os_errno_set+0x1ca>
   295be:	bf00      	nop
   295c0:	00046c0c 	.word	0x00046c0c
   295c4:	0004bcc7 	.word	0x0004bcc7
   295c8:	00044dbf 	.word	0x00044dbf
   295cc:	00046c3d 	.word	0x00046c3d
   295d0:	0004339c 	.word	0x0004339c
   295d4:	000434b4 	.word	0x000434b4
   295d8:	00046c6b 	.word	0x00046c6b
   295dc:	baadbaad 	.word	0xbaadbaad

000295e0 <nrf_modem_os_application_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   295e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   295e4:	4b01      	ldr	r3, [pc, #4]	; (295ec <nrf_modem_os_application_irq_set+0xc>)
   295e6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   295ea:	4770      	bx	lr
   295ec:	e000e100 	.word	0xe000e100

000295f0 <nrf_modem_os_application_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   295f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   295f4:	4b01      	ldr	r3, [pc, #4]	; (295fc <nrf_modem_os_application_irq_clear+0xc>)
   295f6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   295fa:	4770      	bx	lr
   295fc:	e000e100 	.word	0xe000e100

00029600 <nrf_modem_os_trace_irq_set>:
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29600:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29604:	4b01      	ldr	r3, [pc, #4]	; (2960c <nrf_modem_os_trace_irq_set+0xc>)
   29606:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   2960a:	4770      	bx	lr
   2960c:	e000e100 	.word	0xe000e100

00029610 <nrf_modem_os_trace_irq_clear>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   29610:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   29614:	4b01      	ldr	r3, [pc, #4]	; (2961c <nrf_modem_os_trace_irq_clear+0xc>)
   29616:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   2961a:	4770      	bx	lr
   2961c:	e000e100 	.word	0xe000e100

00029620 <nrf_modem_os_alloc>:
	nrfx_uarte_init(&uarte_inst, &config, NULL);
#endif
}

void *nrf_modem_os_alloc(size_t bytes)
{
   29620:	b507      	push	{r0, r1, r2, lr}
   29622:	4602      	mov	r2, r0
	return k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   29624:	2100      	movs	r1, #0
   29626:	2000      	movs	r0, #0
   29628:	e9cd 0100 	strd	r0, r1, [sp]
   2962c:	2104      	movs	r1, #4
   2962e:	4803      	ldr	r0, [pc, #12]	; (2963c <nrf_modem_os_alloc+0x1c>)
   29630:	f00d fec0 	bl	373b4 <k_heap_aligned_alloc>
	} else {
		heap_diag.failed_allocs++;
	}
#endif
	return addr;
}
   29634:	b003      	add	sp, #12
   29636:	f85d fb04 	ldr.w	pc, [sp], #4
   2963a:	bf00      	nop
   2963c:	20015a48 	.word	0x20015a48

00029640 <nrf_modem_os_free>:

void nrf_modem_os_free(void *mem)
{
   29640:	4601      	mov	r1, r0
	k_heap_free(&library_heap, mem);
   29642:	4801      	ldr	r0, [pc, #4]	; (29648 <nrf_modem_os_free+0x8>)
   29644:	f00d bf64 	b.w	37510 <k_heap_free>
   29648:	20015a48 	.word	0x20015a48

0002964c <nrf_modem_os_shm_tx_alloc>:
	LOG_INF("free(%p)", mem);
#endif
}

void *nrf_modem_os_shm_tx_alloc(size_t bytes)
{
   2964c:	b507      	push	{r0, r1, r2, lr}
   2964e:	4602      	mov	r2, r0
   29650:	2100      	movs	r1, #0
   29652:	2000      	movs	r0, #0
   29654:	e9cd 0100 	strd	r0, r1, [sp]
   29658:	2104      	movs	r1, #4
   2965a:	4803      	ldr	r0, [pc, #12]	; (29668 <nrf_modem_os_shm_tx_alloc+0x1c>)
   2965c:	f00d feaa 	bl	373b4 <k_heap_aligned_alloc>
	} else {
		shmem_diag.failed_allocs++;
	}
#endif
	return addr;
}
   29660:	b003      	add	sp, #12
   29662:	f85d fb04 	ldr.w	pc, [sp], #4
   29666:	bf00      	nop
   29668:	20019088 	.word	0x20019088

0002966c <nrf_modem_os_shm_tx_free>:

void nrf_modem_os_shm_tx_free(void *mem)
{
   2966c:	4601      	mov	r1, r0
	k_heap_free(&shmem_heap, mem);
   2966e:	4801      	ldr	r0, [pc, #4]	; (29674 <nrf_modem_os_shm_tx_free+0x8>)
   29670:	f00d bf4e 	b.w	37510 <k_heap_free>
   29674:	20019088 	.word	0x20019088

00029678 <nrf_modem_os_init>:
}
#endif

/* This function is called by nrf_modem_init() */
void nrf_modem_os_init(void)
{
   29678:	b510      	push	{r4, lr}
	list->head = NULL;
   2967a:	2400      	movs	r4, #0
   2967c:	4b0c      	ldr	r3, [pc, #48]	; (296b0 <nrf_modem_os_init+0x38>)
	list->tail = NULL;
   2967e:	e9c3 4400 	strd	r4, r4, [r3]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29682:	4b0c      	ldr	r3, [pc, #48]	; (296b4 <nrf_modem_os_init+0x3c>)
   29684:	e8d3 2fef 	ldaex	r2, [r3]
   29688:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2968c:	2900      	cmp	r1, #0
   2968e:	d1f9      	bne.n	29684 <nrf_modem_os_init+0xc>
	sys_slist_init(&sleeping_threads);
	atomic_clear(&rpc_event_cnt);

	read_task_create();
   29690:	f015 ff4f 	bl	3f532 <read_task_create>

	/* Configure and enable modem tracing over UART. */
	trace_uart_init();
	trace_task_create();
   29694:	f015 ff42 	bl	3f51c <trace_task_create>

	memset(&heap_diag, 0x00, sizeof(heap_diag));
   29698:	4b07      	ldr	r3, [pc, #28]	; (296b8 <nrf_modem_os_init+0x40>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));

	/* Initialize TX heap */
	k_heap_init(&shmem_heap,
   2969a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	memset(&heap_diag, 0x00, sizeof(heap_diag));
   2969e:	601c      	str	r4, [r3, #0]
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   296a0:	4b06      	ldr	r3, [pc, #24]	; (296bc <nrf_modem_os_init+0x44>)
	k_heap_init(&shmem_heap,
   296a2:	4907      	ldr	r1, [pc, #28]	; (296c0 <nrf_modem_os_init+0x48>)
	memset(&shmem_diag, 0x00, sizeof(shmem_diag));
   296a4:	601c      	str	r4, [r3, #0]
	k_heap_init(&shmem_heap,
   296a6:	4807      	ldr	r0, [pc, #28]	; (296c4 <nrf_modem_os_init+0x4c>)
#ifdef CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIODIC
	k_delayed_work_init(&heap_task.work, diag_task);
	k_delayed_work_submit(&heap_task.work,
		K_MSEC(CONFIG_NRF_MODEM_LIB_HEAP_DUMP_PERIOD_MS));
#endif
}
   296a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_heap_init(&shmem_heap,
   296ac:	f018 b91c 	b.w	418e8 <k_heap_init>
   296b0:	200190a0 	.word	0x200190a0
   296b4:	20019080 	.word	0x20019080
   296b8:	20018e7c 	.word	0x20018e7c
   296bc:	20019084 	.word	0x20019084
   296c0:	200104e8 	.word	0x200104e8
   296c4:	20019088 	.word	0x20019088

000296c8 <z_to_nrf_optname>:
static int z_to_nrf_optname(int z_in_level, int z_in_optname,
			    int *nrf_out_optname)
{
	int retval = 0;

	switch (z_in_level) {
   296c8:	f240 2302 	movw	r3, #514	; 0x202
   296cc:	4298      	cmp	r0, r3
   296ce:	f000 8093 	beq.w	297f8 <z_to_nrf_optname+0x130>
   296d2:	dc07      	bgt.n	296e4 <z_to_nrf_optname+0x1c>
   296d4:	2801      	cmp	r0, #1
   296d6:	d04d      	beq.n	29774 <z_to_nrf_optname+0xac>
   296d8:	f5b0 7f8d 	cmp.w	r0, #282	; 0x11a
   296dc:	d034      	beq.n	29748 <z_to_nrf_optname+0x80>
   296de:	f04f 30ff 	mov.w	r0, #4294967295
		retval = -1;
		break;
	}

	return retval;
}
   296e2:	4770      	bx	lr
	switch (z_in_level) {
   296e4:	f240 2303 	movw	r3, #515	; 0x203
   296e8:	4298      	cmp	r0, r3
   296ea:	d1f8      	bne.n	296de <z_to_nrf_optname+0x16>
		switch (z_in_optname) {
   296ec:	3901      	subs	r1, #1
   296ee:	2913      	cmp	r1, #19
   296f0:	d8f5      	bhi.n	296de <z_to_nrf_optname+0x16>
   296f2:	a301      	add	r3, pc, #4	; (adr r3, 296f8 <z_to_nrf_optname+0x30>)
   296f4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   296f8:	00029807 	.word	0x00029807
   296fc:	000297e1 	.word	0x000297e1
   29700:	000297e5 	.word	0x000297e5
   29704:	00029785 	.word	0x00029785
   29708:	000297e9 	.word	0x000297e9
   2970c:	000297ed 	.word	0x000297ed
   29710:	000297f1 	.word	0x000297f1
   29714:	000296df 	.word	0x000296df
   29718:	000296df 	.word	0x000296df
   2971c:	000296df 	.word	0x000296df
   29720:	000296df 	.word	0x000296df
   29724:	000296df 	.word	0x000296df
   29728:	000296df 	.word	0x000296df
   2972c:	000296df 	.word	0x000296df
   29730:	000296df 	.word	0x000296df
   29734:	000296df 	.word	0x000296df
   29738:	000296df 	.word	0x000296df
   2973c:	000296df 	.word	0x000296df
   29740:	000296df 	.word	0x000296df
   29744:	000297f5 	.word	0x000297f5
		switch (z_in_optname) {
   29748:	3901      	subs	r1, #1
   2974a:	2907      	cmp	r1, #7
   2974c:	d8c7      	bhi.n	296de <z_to_nrf_optname+0x16>
   2974e:	a301      	add	r3, pc, #4	; (adr r3, 29754 <z_to_nrf_optname+0x8c>)
   29750:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29754:	000297e1 	.word	0x000297e1
   29758:	000297e9 	.word	0x000297e9
   2975c:	000297ed 	.word	0x000297ed
   29760:	000297f1 	.word	0x000297f1
   29764:	00029785 	.word	0x00029785
   29768:	00029807 	.word	0x00029807
   2976c:	000296df 	.word	0x000296df
   29770:	000297e5 	.word	0x000297e5
		switch (z_in_optname) {
   29774:	2920      	cmp	r1, #32
   29776:	dcb2      	bgt.n	296de <z_to_nrf_optname+0x16>
   29778:	2913      	cmp	r1, #19
   2977a:	dc05      	bgt.n	29788 <z_to_nrf_optname+0xc0>
   2977c:	2902      	cmp	r1, #2
   2977e:	d027      	beq.n	297d0 <z_to_nrf_optname+0x108>
   29780:	2904      	cmp	r1, #4
   29782:	d1ac      	bne.n	296de <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_DFU_APPLY;
   29784:	2304      	movs	r3, #4
   29786:	e03f      	b.n	29808 <z_to_nrf_optname+0x140>
   29788:	3914      	subs	r1, #20
   2978a:	290c      	cmp	r1, #12
   2978c:	d8a7      	bhi.n	296de <z_to_nrf_optname+0x16>
   2978e:	a301      	add	r3, pc, #4	; (adr r3, 29794 <z_to_nrf_optname+0xcc>)
   29790:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   29794:	000297f5 	.word	0x000297f5
   29798:	000297c9 	.word	0x000297c9
   2979c:	000296df 	.word	0x000296df
   297a0:	000296df 	.word	0x000296df
   297a4:	000296df 	.word	0x000296df
   297a8:	000297cd 	.word	0x000297cd
   297ac:	000296df 	.word	0x000296df
   297b0:	000296df 	.word	0x000296df
   297b4:	000296df 	.word	0x000296df
   297b8:	000296df 	.word	0x000296df
   297bc:	000297d5 	.word	0x000297d5
   297c0:	000297d9 	.word	0x000297d9
   297c4:	000297dd 	.word	0x000297dd
			*nrf_out_optname = NRF_SO_SNDTIMEO;
   297c8:	2315      	movs	r3, #21
   297ca:	e01d      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_BINDTODEVICE;
   297cc:	2319      	movs	r3, #25
   297ce:	e01b      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_REUSEADDR;
   297d0:	2328      	movs	r3, #40	; 0x28
   297d2:	e019      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_ALL;
   297d4:	231e      	movs	r3, #30
   297d6:	e017      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IP_ECHO_REPLY;
   297d8:	231f      	movs	r3, #31
   297da:	e015      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_SILENCE_IPV6_ECHO_REPLY;
   297dc:	2320      	movs	r3, #32
   297de:	e013      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_RESOURCES;
   297e0:	2302      	movs	r3, #2
   297e2:	e011      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_TIMEO;
   297e4:	2303      	movs	r3, #3
   297e6:	e00f      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_REVERT;
   297e8:	2305      	movs	r3, #5
   297ea:	e00d      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_BACKUP_DELETE;
   297ec:	2306      	movs	r3, #6
   297ee:	e00b      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_OFFSET;
   297f0:	2307      	movs	r3, #7
   297f2:	e009      	b.n	29808 <z_to_nrf_optname+0x140>
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   297f4:	2314      	movs	r3, #20
   297f6:	e007      	b.n	29808 <z_to_nrf_optname+0x140>
		switch (z_in_optname) {
   297f8:	2902      	cmp	r1, #2
   297fa:	d0f1      	beq.n	297e0 <z_to_nrf_optname+0x118>
   297fc:	2903      	cmp	r1, #3
   297fe:	d0f1      	beq.n	297e4 <z_to_nrf_optname+0x11c>
   29800:	2901      	cmp	r1, #1
   29802:	f47f af6c 	bne.w	296de <z_to_nrf_optname+0x16>
			*nrf_out_optname = NRF_SO_SEC_ROLE;
   29806:	2301      	movs	r3, #1
	int retval = 0;
   29808:	2000      	movs	r0, #0
			*nrf_out_optname = NRF_SO_DFU_ERROR;
   2980a:	6013      	str	r3, [r2, #0]
			break;
   2980c:	4770      	bx	lr
   2980e:	bf00      	nop

00029810 <nrf91_socket_offload_ioctl>:
static int nrf91_socket_offload_ioctl(void *obj, unsigned int request,
				      va_list args)
{
	int sd = OBJ_TO_SD(obj);

	switch (request) {
   29810:	f240 1303 	movw	r3, #259	; 0x103
{
   29814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (request) {
   29818:	4299      	cmp	r1, r3
{
   2981a:	b091      	sub	sp, #68	; 0x44
	switch (request) {
   2981c:	f000 8097 	beq.w	2994e <nrf91_socket_offload_ioctl+0x13e>
   29820:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
   29824:	d005      	beq.n	29832 <nrf91_socket_offload_ioctl+0x22>
   29826:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   2982a:	d171      	bne.n	29910 <nrf91_socket_offload_ioctl+0x100>
	case ZFD_IOCTL_POLL_PREPARE:
		return -EXDEV;
   2982c:	f06f 0411 	mvn.w	r4, #17
   29830:	e01d      	b.n	2986e <nrf91_socket_offload_ioctl+0x5e>
	for (int i = 0; i < nfds; i++) {
   29832:	f04f 0800 	mov.w	r8, #0
		struct zsock_pollfd *fds;
		int nfds;
		int timeout;

		fds = va_arg(args, struct zsock_pollfd *);
		nfds = va_arg(args, int);
   29836:	e9d2 a900 	ldrd	sl, r9, [r2]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   2983a:	2100      	movs	r1, #0
		timeout = va_arg(args, int);
   2983c:	f8d2 b008 	ldr.w	fp, [r2, #8]
	struct nrf_pollfd tmp[NRF_MODEM_MAX_SOCKET_COUNT] = { 0 };
   29840:	4668      	mov	r0, sp
   29842:	2240      	movs	r2, #64	; 0x40
   29844:	f018 fa4b 	bl	41cde <memset>
	for (int i = 0; i < nfds; i++) {
   29848:	466e      	mov	r6, sp
   2984a:	4655      	mov	r5, sl
   2984c:	4657      	mov	r7, sl
	int retval = 0;
   2984e:	4644      	mov	r4, r8
		tmp[i].events = 0;
   29850:	4643      	mov	r3, r8
			obj = z_get_fd_obj(fds[i].fd,
   29852:	4940      	ldr	r1, [pc, #256]	; (29954 <nrf91_socket_offload_ioctl+0x144>)
	for (int i = 0; i < nfds; i++) {
   29854:	45c1      	cmp	r9, r8
   29856:	dc0e      	bgt.n	29876 <nrf91_socket_offload_ioctl+0x66>
	if (retval > 0) {
   29858:	2c00      	cmp	r4, #0
   2985a:	dc08      	bgt.n	2986e <nrf91_socket_offload_ioctl+0x5e>
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   2985c:	465a      	mov	r2, fp
   2985e:	4649      	mov	r1, r9
   29860:	4668      	mov	r0, sp
   29862:	f017 ffff 	bl	41864 <nrf_poll>
	for (int i = 0; i < nfds; i++) {
   29866:	2300      	movs	r3, #0
	retval = nrf_poll((struct nrf_pollfd *)&tmp, nfds, timeout);
   29868:	4604      	mov	r4, r0
	for (int i = 0; i < nfds; i++) {
   2986a:	4599      	cmp	r9, r3
   2986c:	dc28      	bgt.n	298c0 <nrf91_socket_offload_ioctl+0xb0>
	 * In Zephyr, fcntl() is just an alias of ioctl().
	 */
	default:
		return nrf91_socket_offload_fcntl(sd, request, args);
	}
}
   2986e:	4620      	mov	r0, r4
   29870:	b011      	add	sp, #68	; 0x44
   29872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (fds[i].fd < 0) {
   29876:	6838      	ldr	r0, [r7, #0]
		tmp[i].events = 0;
   29878:	80b3      	strh	r3, [r6, #4]
		if (fds[i].fd < 0) {
   2987a:	2800      	cmp	r0, #0
		fds[i].revents = 0;
   2987c:	80fb      	strh	r3, [r7, #6]
		if (fds[i].fd < 0) {
   2987e:	da05      	bge.n	2988c <nrf91_socket_offload_ioctl+0x7c>
			tmp[i].fd = fds[i].fd;
   29880:	6030      	str	r0, [r6, #0]
	for (int i = 0; i < nfds; i++) {
   29882:	f108 0801 	add.w	r8, r8, #1
   29886:	3608      	adds	r6, #8
   29888:	3708      	adds	r7, #8
   2988a:	e7e3      	b.n	29854 <nrf91_socket_offload_ioctl+0x44>
			obj = z_get_fd_obj(fds[i].fd,
   2988c:	2286      	movs	r2, #134	; 0x86
   2988e:	f7f9 f8bd 	bl	22a0c <z_get_fd_obj>
			if (obj != NULL) {
   29892:	2300      	movs	r3, #0
   29894:	492f      	ldr	r1, [pc, #188]	; (29954 <nrf91_socket_offload_ioctl+0x144>)
   29896:	b178      	cbz	r0, 298b8 <nrf91_socket_offload_ioctl+0xa8>
				tmp[i].fd = OBJ_TO_SD(obj);
   29898:	3801      	subs	r0, #1
   2989a:	6030      	str	r0, [r6, #0]
		if (fds[i].events & POLLIN) {
   2989c:	88b8      	ldrh	r0, [r7, #4]
   2989e:	07c2      	lsls	r2, r0, #31
			tmp[i].events |= NRF_POLLIN;
   298a0:	bf42      	ittt	mi
   298a2:	88b2      	ldrhmi	r2, [r6, #4]
   298a4:	f042 0201 	orrmi.w	r2, r2, #1
   298a8:	80b2      	strhmi	r2, [r6, #4]
		if (fds[i].events & POLLOUT) {
   298aa:	0742      	lsls	r2, r0, #29
			tmp[i].events |= NRF_POLLOUT;
   298ac:	bf42      	ittt	mi
   298ae:	88b2      	ldrhmi	r2, [r6, #4]
   298b0:	f042 0202 	orrmi.w	r2, r2, #2
   298b4:	80b2      	strhmi	r2, [r6, #4]
   298b6:	e7e4      	b.n	29882 <nrf91_socket_offload_ioctl+0x72>
				fds[i].revents = POLLNVAL;
   298b8:	2220      	movs	r2, #32
				retval++;
   298ba:	3401      	adds	r4, #1
				fds[i].revents = POLLNVAL;
   298bc:	80fa      	strh	r2, [r7, #6]
				retval++;
   298be:	e7ed      	b.n	2989c <nrf91_socket_offload_ioctl+0x8c>
		if (fds[i].fd < 0) {
   298c0:	f85a 2033 	ldr.w	r2, [sl, r3, lsl #3]
   298c4:	2a00      	cmp	r2, #0
   298c6:	db20      	blt.n	2990a <nrf91_socket_offload_ioctl+0xfa>
		if (tmp[i].revents & NRF_POLLIN) {
   298c8:	eb0d 02c3 	add.w	r2, sp, r3, lsl #3
   298cc:	88d2      	ldrh	r2, [r2, #6]
   298ce:	07d7      	lsls	r7, r2, #31
			fds[i].revents |= POLLIN;
   298d0:	bf42      	ittt	mi
   298d2:	88e9      	ldrhmi	r1, [r5, #6]
   298d4:	f041 0101 	orrmi.w	r1, r1, #1
   298d8:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLOUT) {
   298da:	0796      	lsls	r6, r2, #30
			fds[i].revents |= POLLOUT;
   298dc:	bf42      	ittt	mi
   298de:	88e9      	ldrhmi	r1, [r5, #6]
   298e0:	f041 0104 	orrmi.w	r1, r1, #4
   298e4:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLERR) {
   298e6:	0750      	lsls	r0, r2, #29
			fds[i].revents |= POLLERR;
   298e8:	bf42      	ittt	mi
   298ea:	88e9      	ldrhmi	r1, [r5, #6]
   298ec:	f041 0108 	orrmi.w	r1, r1, #8
   298f0:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLNVAL) {
   298f2:	06d1      	lsls	r1, r2, #27
			fds[i].revents |= POLLNVAL;
   298f4:	bf42      	ittt	mi
   298f6:	88e9      	ldrhmi	r1, [r5, #6]
   298f8:	f041 0120 	orrmi.w	r1, r1, #32
   298fc:	80e9      	strhmi	r1, [r5, #6]
		if (tmp[i].revents & NRF_POLLHUP) {
   298fe:	0712      	lsls	r2, r2, #28
			fds[i].revents |= POLLHUP;
   29900:	bf42      	ittt	mi
   29902:	88ea      	ldrhmi	r2, [r5, #6]
   29904:	f042 0210 	orrmi.w	r2, r2, #16
   29908:	80ea      	strhmi	r2, [r5, #6]
	for (int i = 0; i < nfds; i++) {
   2990a:	3301      	adds	r3, #1
   2990c:	3508      	adds	r5, #8
   2990e:	e7ac      	b.n	2986a <nrf91_socket_offload_ioctl+0x5a>
	switch (cmd) {
   29910:	2903      	cmp	r1, #3
	int sd = OBJ_TO_SD(obj);
   29912:	f100 30ff 	add.w	r0, r0, #4294967295
	switch (cmd) {
   29916:	d00b      	beq.n	29930 <nrf91_socket_offload_ioctl+0x120>
   29918:	2904      	cmp	r1, #4
   2991a:	d111      	bne.n	29940 <nrf91_socket_offload_ioctl+0x130>
		flags = va_arg(args, int);
   2991c:	6812      	ldr	r2, [r2, #0]
		if (flags != 0 && flags != O_NONBLOCK)
   2991e:	f432 4380 	bics.w	r3, r2, #16384	; 0x4000
   29922:	d10d      	bne.n	29940 <nrf91_socket_offload_ioctl+0x130>
		retval = nrf_fcntl(fd, NRF_F_SETFL, flags);
   29924:	2101      	movs	r1, #1
   29926:	1392      	asrs	r2, r2, #14
   29928:	f017 ff9e 	bl	41868 <nrf_fcntl>
   2992c:	4604      	mov	r4, r0
		break;
   2992e:	e79e      	b.n	2986e <nrf91_socket_offload_ioctl+0x5e>
		flags = nrf_fcntl(fd, NRF_F_GETFL, 0);
   29930:	2200      	movs	r2, #0
   29932:	2102      	movs	r1, #2
   29934:	f017 ff98 	bl	41868 <nrf_fcntl>
		retval = (flags & NRF_O_NONBLOCK) ? O_NONBLOCK : 0;
   29938:	0380      	lsls	r0, r0, #14
   2993a:	f400 4480 	and.w	r4, r0, #16384	; 0x4000
		break;
   2993e:	e796      	b.n	2986e <nrf91_socket_offload_ioctl+0x5e>
	errno = EINVAL;
   29940:	f014 fbcb 	bl	3e0da <__errno>
   29944:	2316      	movs	r3, #22
	return retval;
   29946:	f04f 34ff 	mov.w	r4, #4294967295
	errno = EINVAL;
   2994a:	6003      	str	r3, [r0, #0]
		return nrf91_socket_offload_fcntl(sd, request, args);
   2994c:	e78f      	b.n	2986e <nrf91_socket_offload_ioctl+0x5e>
	switch (request) {
   2994e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   29952:	e78c      	b.n	2986e <nrf91_socket_offload_ioctl+0x5e>
   29954:	00043a18 	.word	0x00043a18

00029958 <nrf91_socket_iface_init>:

static void nrf91_socket_iface_init(struct net_if *iface)
{
	nrf91_socket_iface_data.iface = iface;

	iface->if_dev->offloaded = true;
   29958:	2201      	movs	r2, #1
	nrf91_socket_iface_data.iface = iface;
   2995a:	4b03      	ldr	r3, [pc, #12]	; (29968 <nrf91_socket_iface_init+0x10>)
   2995c:	6018      	str	r0, [r3, #0]
	iface->if_dev->offloaded = true;
   2995e:	6803      	ldr	r3, [r0, #0]

	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29960:	4802      	ldr	r0, [pc, #8]	; (2996c <nrf91_socket_iface_init+0x14>)
	iface->if_dev->offloaded = true;
   29962:	769a      	strb	r2, [r3, #26]
	socket_offload_dns_register(&nrf91_socket_dns_offload_ops);
   29964:	f7fb ba18 	b.w	24d98 <socket_offload_dns_register>
   29968:	200190f8 	.word	0x200190f8
   2996c:	00043a10 	.word	0x00043a10

00029970 <nrf91_socket_offload_accept>:
{
   29970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29974:	b08a      	sub	sp, #40	; 0x28
   29976:	4607      	mov	r7, r0
   29978:	460c      	mov	r4, r1
   2997a:	4615      	mov	r5, r2
	int fd = z_reserve_fd();
   2997c:	f7f9 f876 	bl	22a6c <z_reserve_fd>
   29980:	4606      	mov	r6, r0
	if (fd < 0) {
   29982:	2e00      	cmp	r6, #0
	int sd = OBJ_TO_SD(obj);
   29984:	f107 30ff 	add.w	r0, r7, #4294967295
	if (fd < 0) {
   29988:	da05      	bge.n	29996 <nrf91_socket_offload_accept+0x26>
	return -1;
   2998a:	f04f 36ff 	mov.w	r6, #4294967295
}
   2998e:	4630      	mov	r0, r6
   29990:	b00a      	add	sp, #40	; 0x28
   29992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((addr != NULL) && (addrlen != NULL)) {
   29996:	b31c      	cbz	r4, 299e0 <nrf91_socket_offload_accept+0x70>
   29998:	b32d      	cbz	r5, 299e6 <nrf91_socket_offload_accept+0x76>
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2999a:	682b      	ldr	r3, [r5, #0]
		nrf_addrlen_ptr = &nrf_addrlen;
   2999c:	466a      	mov	r2, sp
		if (*addrlen == sizeof(struct sockaddr_in)) {
   2999e:	2b08      	cmp	r3, #8
			nrf_addrlen = sizeof(struct nrf_sockaddr_in);
   299a0:	bf0c      	ite	eq
   299a2:	2310      	moveq	r3, #16
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   299a4:	2324      	movne	r3, #36	; 0x24
		nrf_addr_ptr = (struct nrf_sockaddr *)&nrf_addr;
   299a6:	af01      	add	r7, sp, #4
			nrf_addrlen = sizeof(struct nrf_sockaddr_in6);
   299a8:	9300      	str	r3, [sp, #0]
	new_sd = nrf_accept(sd, nrf_addr_ptr, nrf_addrlen_ptr);
   299aa:	4639      	mov	r1, r7
   299ac:	f017 fefc 	bl	417a8 <nrf_accept>
	if (new_sd < 0) {
   299b0:	f1b0 0800 	subs.w	r8, r0, #0
   299b4:	dbe9      	blt.n	2998a <nrf91_socket_offload_accept+0x1a>
	if ((addr != NULL) && (addrlen != NULL)) {
   299b6:	b164      	cbz	r4, 299d2 <nrf91_socket_offload_accept+0x62>
   299b8:	b15d      	cbz	r5, 299d2 <nrf91_socket_offload_accept+0x62>
		if (nrf_addr_ptr->sa_family == NRF_AF_INET) {
   299ba:	687b      	ldr	r3, [r7, #4]
   299bc:	2b02      	cmp	r3, #2
   299be:	d115      	bne.n	299ec <nrf91_socket_offload_accept+0x7c>
			*addrlen = sizeof(struct sockaddr_in);
   299c0:	2308      	movs	r3, #8
   299c2:	602b      	str	r3, [r5, #0]
	ptr->sin_port = nrf_in->sin_port;
   299c4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   299c8:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   299ca:	2301      	movs	r3, #1
   299cc:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   299ce:	9b04      	ldr	r3, [sp, #16]
   299d0:	6063      	str	r3, [r4, #4]
	z_finalize_fd(fd, SD_TO_OBJ(new_sd),
   299d2:	4630      	mov	r0, r6
   299d4:	4a0c      	ldr	r2, [pc, #48]	; (29a08 <nrf91_socket_offload_accept+0x98>)
   299d6:	f108 0101 	add.w	r1, r8, #1
   299da:	f7f9 f879 	bl	22ad0 <z_finalize_fd>
	return fd;
   299de:	e7d6      	b.n	2998e <nrf91_socket_offload_accept+0x1e>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   299e0:	4622      	mov	r2, r4
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   299e2:	4627      	mov	r7, r4
   299e4:	e7e1      	b.n	299aa <nrf91_socket_offload_accept+0x3a>
	nrf_socklen_t *nrf_addrlen_ptr = NULL;
   299e6:	462a      	mov	r2, r5
	struct nrf_sockaddr *nrf_addr_ptr = NULL;
   299e8:	462f      	mov	r7, r5
   299ea:	e7de      	b.n	299aa <nrf91_socket_offload_accept+0x3a>
		} else if (nrf_addr_ptr->sa_family == NRF_AF_INET6) {
   299ec:	2b0a      	cmp	r3, #10
   299ee:	d106      	bne.n	299fe <nrf91_socket_offload_accept+0x8e>
			*addrlen = sizeof(struct sockaddr_in6);
   299f0:	2318      	movs	r3, #24
			nrf_to_z_ipv6(
   299f2:	4620      	mov	r0, r4
			*addrlen = sizeof(struct sockaddr_in6);
   299f4:	602b      	str	r3, [r5, #0]
			nrf_to_z_ipv6(
   299f6:	a901      	add	r1, sp, #4
   299f8:	f015 fe9e 	bl	3f738 <nrf_to_z_ipv6>
   299fc:	e7e9      	b.n	299d2 <nrf91_socket_offload_accept+0x62>
	z_free_fd(fd);
   299fe:	4630      	mov	r0, r6
   29a00:	f7f9 f870 	bl	22ae4 <z_free_fd>
   29a04:	e7c1      	b.n	2998a <nrf91_socket_offload_accept+0x1a>
   29a06:	bf00      	nop
   29a08:	00043a18 	.word	0x00043a18

00029a0c <nrf91_socket_offload_sendmsg>:
{
   29a0c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   29a10:	4680      	mov	r8, r0
   29a12:	4691      	mov	r9, r2
	if (msg == NULL) {
   29a14:	460c      	mov	r4, r1
   29a16:	b1f9      	cbz	r1, 29a58 <nrf91_socket_offload_sendmsg+0x4c>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29a18:	2300      	movs	r3, #0
	ssize_t len = 0;
   29a1a:	461a      	mov	r2, r3
   29a1c:	68c8      	ldr	r0, [r1, #12]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29a1e:	4283      	cmp	r3, r0
   29a20:	d124      	bne.n	29a6c <nrf91_socket_offload_sendmsg+0x60>
	if (len <= sizeof(buf)) {
   29a22:	2a80      	cmp	r2, #128	; 0x80
   29a24:	d86d      	bhi.n	29b02 <nrf91_socket_offload_sendmsg+0xf6>
		for (i = 0; i < msg->msg_iovlen; i++) {
   29a26:	2500      	movs	r5, #0
	return z_impl_k_mutex_lock(mutex, timeout);
   29a28:	f04f 32ff 	mov.w	r2, #4294967295
   29a2c:	f04f 33ff 	mov.w	r3, #4294967295
   29a30:	4836      	ldr	r0, [pc, #216]	; (29b0c <nrf91_socket_offload_sendmsg+0x100>)
   29a32:	f00d ff4d 	bl	378d0 <z_impl_k_mutex_lock>
		len = 0;
   29a36:	462f      	mov	r7, r5
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29a38:	4e35      	ldr	r6, [pc, #212]	; (29b10 <nrf91_socket_offload_sendmsg+0x104>)
		for (i = 0; i < msg->msg_iovlen; i++) {
   29a3a:	68e3      	ldr	r3, [r4, #12]
   29a3c:	429d      	cmp	r5, r3
   29a3e:	d31c      	bcc.n	29a7a <nrf91_socket_offload_sendmsg+0x6e>
		offset = 0;
   29a40:	2600      	movs	r6, #0
		ret = 0;
   29a42:	4635      	mov	r5, r6
			ret = nrf91_socket_offload_sendto(obj,
   29a44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 29b10 <nrf91_socket_offload_sendmsg+0x104>
		while ((offset < len) && (ret >= 0)) {
   29a48:	42b7      	cmp	r7, r6
   29a4a:	dd01      	ble.n	29a50 <nrf91_socket_offload_sendmsg+0x44>
   29a4c:	2d00      	cmp	r5, #0
   29a4e:	da25      	bge.n	29a9c <nrf91_socket_offload_sendmsg+0x90>
	return z_impl_k_mutex_unlock(mutex);
   29a50:	482e      	ldr	r0, [pc, #184]	; (29b0c <nrf91_socket_offload_sendmsg+0x100>)
   29a52:	f00e f837 	bl	37ac4 <z_impl_k_mutex_unlock>
		return ret;
   29a56:	e005      	b.n	29a64 <nrf91_socket_offload_sendmsg+0x58>
		errno = EINVAL;
   29a58:	f014 fb3f 	bl	3e0da <__errno>
   29a5c:	2316      	movs	r3, #22
		return -1;
   29a5e:	f04f 35ff 	mov.w	r5, #4294967295
		errno = EINVAL;
   29a62:	6003      	str	r3, [r0, #0]
}
   29a64:	4628      	mov	r0, r5
   29a66:	b002      	add	sp, #8
   29a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		len += msg->msg_iov[i].iov_len;
   29a6c:	68a1      	ldr	r1, [r4, #8]
   29a6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   29a72:	6849      	ldr	r1, [r1, #4]
	for (i = 0; i < msg->msg_iovlen; i++) {
   29a74:	3301      	adds	r3, #1
		len += msg->msg_iov[i].iov_len;
   29a76:	440a      	add	r2, r1
	for (i = 0; i < msg->msg_iovlen; i++) {
   29a78:	e7d1      	b.n	29a1e <nrf91_socket_offload_sendmsg+0x12>
			memcpy(buf + len, msg->msg_iov[i].iov_base,
   29a7a:	68a1      	ldr	r1, [r4, #8]
   29a7c:	19f0      	adds	r0, r6, r7
   29a7e:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
   29a82:	685a      	ldr	r2, [r3, #4]
   29a84:	f851 1035 	ldr.w	r1, [r1, r5, lsl #3]
   29a88:	f018 f909 	bl	41c9e <memcpy>
			len += msg->msg_iov[i].iov_len;
   29a8c:	68a3      	ldr	r3, [r4, #8]
   29a8e:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   29a92:	4453      	add	r3, sl
   29a94:	685b      	ldr	r3, [r3, #4]
		for (i = 0; i < msg->msg_iovlen; i++) {
   29a96:	3501      	adds	r5, #1
			len += msg->msg_iov[i].iov_len;
   29a98:	441f      	add	r7, r3
		for (i = 0; i < msg->msg_iovlen; i++) {
   29a9a:	e7ce      	b.n	29a3a <nrf91_socket_offload_sendmsg+0x2e>
			ret = nrf91_socket_offload_sendto(obj,
   29a9c:	6863      	ldr	r3, [r4, #4]
   29a9e:	1bba      	subs	r2, r7, r6
   29aa0:	9301      	str	r3, [sp, #4]
   29aa2:	6823      	ldr	r3, [r4, #0]
   29aa4:	eb0a 0106 	add.w	r1, sl, r6
   29aa8:	9300      	str	r3, [sp, #0]
   29aaa:	4640      	mov	r0, r8
   29aac:	464b      	mov	r3, r9
   29aae:	f015 feaf 	bl	3f810 <nrf91_socket_offload_sendto>
			if (ret > 0) {
   29ab2:	1e05      	subs	r5, r0, #0
				offset += ret;
   29ab4:	bfc8      	it	gt
   29ab6:	1976      	addgt	r6, r6, r5
   29ab8:	e7c6      	b.n	29a48 <nrf91_socket_offload_sendmsg+0x3c>
		if (msg->msg_iov[i].iov_len == 0) {
   29aba:	68a3      	ldr	r3, [r4, #8]
   29abc:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
   29ac0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   29ac4:	685b      	ldr	r3, [r3, #4]
   29ac6:	b133      	cbz	r3, 29ad6 <nrf91_socket_offload_sendmsg+0xca>
		offset = 0;
   29ac8:	2700      	movs	r7, #0
		while (offset < msg->msg_iov[i].iov_len) {
   29aca:	68a3      	ldr	r3, [r4, #8]
   29acc:	eb03 020a 	add.w	r2, r3, sl
   29ad0:	6852      	ldr	r2, [r2, #4]
   29ad2:	4297      	cmp	r7, r2
   29ad4:	d304      	bcc.n	29ae0 <nrf91_socket_offload_sendmsg+0xd4>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29ad6:	3601      	adds	r6, #1
   29ad8:	68e3      	ldr	r3, [r4, #12]
   29ada:	429e      	cmp	r6, r3
   29adc:	d3ed      	bcc.n	29aba <nrf91_socket_offload_sendmsg+0xae>
   29ade:	e7c1      	b.n	29a64 <nrf91_socket_offload_sendmsg+0x58>
			ret = nrf91_socket_offload_sendto(obj,
   29ae0:	f853 100a 	ldr.w	r1, [r3, sl]
   29ae4:	6863      	ldr	r3, [r4, #4]
   29ae6:	4640      	mov	r0, r8
   29ae8:	9301      	str	r3, [sp, #4]
   29aea:	6823      	ldr	r3, [r4, #0]
   29aec:	1bd2      	subs	r2, r2, r7
   29aee:	9300      	str	r3, [sp, #0]
   29af0:	4439      	add	r1, r7
   29af2:	464b      	mov	r3, r9
   29af4:	f015 fe8c 	bl	3f810 <nrf91_socket_offload_sendto>
			if (ret < 0) {
   29af8:	1e03      	subs	r3, r0, #0
   29afa:	db05      	blt.n	29b08 <nrf91_socket_offload_sendmsg+0xfc>
			offset += ret;
   29afc:	441f      	add	r7, r3
			len += ret;
   29afe:	441d      	add	r5, r3
   29b00:	e7e3      	b.n	29aca <nrf91_socket_offload_sendmsg+0xbe>
	for (i = 0; i < msg->msg_iovlen; i++) {
   29b02:	2600      	movs	r6, #0
	len = 0;
   29b04:	4635      	mov	r5, r6
   29b06:	e7e7      	b.n	29ad8 <nrf91_socket_offload_sendmsg+0xcc>
			ret = nrf91_socket_offload_sendto(obj,
   29b08:	461d      	mov	r5, r3
   29b0a:	e7ab      	b.n	29a64 <nrf91_socket_offload_sendmsg+0x58>
   29b0c:	20015ac4 	.word	0x20015ac4
   29b10:	2001ec1c 	.word	0x2001ec1c

00029b14 <nrf91_socket_offload_getaddrinfo>:
{
   29b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29b18:	4614      	mov	r4, r2
   29b1a:	460e      	mov	r6, r1
	struct nrf_addrinfo *nrf_res = NULL;
   29b1c:	2100      	movs	r1, #0
{
   29b1e:	b093      	sub	sp, #76	; 0x4c
   29b20:	4605      	mov	r5, r0
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   29b22:	2220      	movs	r2, #32
   29b24:	a802      	add	r0, sp, #8
{
   29b26:	461f      	mov	r7, r3
	struct nrf_addrinfo *nrf_res = NULL;
   29b28:	9101      	str	r1, [sp, #4]
	memset(&nrf_hints, 0, sizeof(struct nrf_addrinfo));
   29b2a:	f018 f8d8 	bl	41cde <memset>
	if (hints != NULL) {
   29b2e:	b194      	cbz	r4, 29b56 <nrf91_socket_offload_getaddrinfo+0x42>
		error = z_to_nrf_addrinfo_hints(hints, &nrf_hints);
   29b30:	4620      	mov	r0, r4
   29b32:	a902      	add	r1, sp, #8
   29b34:	f015 fddb 	bl	3f6ee <z_to_nrf_addrinfo_hints>
		if (error == -EPROTONOSUPPORT) {
   29b38:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
   29b3c:	f000 80e3 	beq.w	29d06 <nrf91_socket_offload_getaddrinfo+0x1f2>
		} else if (error == -EAFNOSUPPORT) {
   29b40:	306a      	adds	r0, #106	; 0x6a
   29b42:	f000 80e3 	beq.w	29d0c <nrf91_socket_offload_getaddrinfo+0x1f8>
		if (hints->ai_next != NULL) {
   29b46:	6820      	ldr	r0, [r4, #0]
   29b48:	b120      	cbz	r0, 29b54 <nrf91_socket_offload_getaddrinfo+0x40>
			z_to_nrf_addrinfo_hints(hints->ai_next, &nrf_hints_pdn);
   29b4a:	ac0a      	add	r4, sp, #40	; 0x28
   29b4c:	4621      	mov	r1, r4
   29b4e:	f015 fdce 	bl	3f6ee <z_to_nrf_addrinfo_hints>
			nrf_hints.ai_next = &nrf_hints_pdn;
   29b52:	9409      	str	r4, [sp, #36]	; 0x24
		nrf_hints_ptr = &nrf_hints;
   29b54:	ac02      	add	r4, sp, #8
	return z_impl_k_mutex_lock(mutex, timeout);
   29b56:	f04f 32ff 	mov.w	r2, #4294967295
   29b5a:	f04f 33ff 	mov.w	r3, #4294967295
   29b5e:	486d      	ldr	r0, [pc, #436]	; (29d14 <nrf91_socket_offload_getaddrinfo+0x200>)
   29b60:	f00d feb6 	bl	378d0 <z_impl_k_mutex_lock>
	int retval = nrf_getaddrinfo(node, service, nrf_hints_ptr, &nrf_res);
   29b64:	4628      	mov	r0, r5
   29b66:	4622      	mov	r2, r4
   29b68:	4631      	mov	r1, r6
   29b6a:	ab01      	add	r3, sp, #4
   29b6c:	f017 fe76 	bl	4185c <nrf_getaddrinfo>
	if (retval != 0) {
   29b70:	4605      	mov	r5, r0
   29b72:	b318      	cbz	r0, 29bbc <nrf91_socket_offload_getaddrinfo+0xa8>
	switch (nrf_error) {
   29b74:	282f      	cmp	r0, #47	; 0x2f
   29b76:	f000 80c0 	beq.w	29cfa <nrf91_socket_offload_getaddrinfo+0x1e6>
   29b7a:	dc0f      	bgt.n	29b9c <nrf91_socket_offload_getaddrinfo+0x88>
   29b7c:	280c      	cmp	r0, #12
   29b7e:	f000 80bf 	beq.w	29d00 <nrf91_socket_offload_getaddrinfo+0x1ec>
		return DNS_EAI_AGAIN;
   29b82:	2823      	cmp	r0, #35	; 0x23
   29b84:	bf14      	ite	ne
   29b86:	f06f 050a 	mvnne.w	r5, #10
   29b8a:	f06f 0502 	mvneq.w	r5, #2
	return z_impl_k_mutex_unlock(mutex);
   29b8e:	4861      	ldr	r0, [pc, #388]	; (29d14 <nrf91_socket_offload_getaddrinfo+0x200>)
   29b90:	f00d ff98 	bl	37ac4 <z_impl_k_mutex_unlock>
}
   29b94:	4628      	mov	r0, r5
   29b96:	b013      	add	sp, #76	; 0x4c
   29b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (nrf_error) {
   29b9c:	2833      	cmp	r0, #51	; 0x33
   29b9e:	d006      	beq.n	29bae <nrf91_socket_offload_getaddrinfo+0x9a>
		return DNS_EAI_INPROGRESS;
   29ba0:	2873      	cmp	r0, #115	; 0x73
   29ba2:	bf14      	ite	ne
   29ba4:	f06f 050a 	mvnne.w	r5, #10
   29ba8:	f06f 0563 	mvneq.w	r5, #99	; 0x63
   29bac:	e7ef      	b.n	29b8e <nrf91_socket_offload_getaddrinfo+0x7a>
		errno = ENETUNREACH;
   29bae:	f014 fa94 	bl	3e0da <__errno>
   29bb2:	2372      	movs	r3, #114	; 0x72
		return DNS_EAI_SYSTEM;
   29bb4:	f06f 050a 	mvn.w	r5, #10
		errno = ENETUNREACH;
   29bb8:	6003      	str	r3, [r0, #0]
   29bba:	e7e8      	b.n	29b8e <nrf91_socket_offload_getaddrinfo+0x7a>
	struct zsock_addrinfo *latest_z_res = NULL;
   29bbc:	4680      	mov	r8, r0
	z_out->ai_next = NULL;
   29bbe:	4681      	mov	r9, r0
	struct nrf_addrinfo *next_nrf_res = nrf_res;
   29bc0:	9e01      	ldr	r6, [sp, #4]
	*res = NULL;
   29bc2:	6038      	str	r0, [r7, #0]
	while ((retval == 0) && (next_nrf_res != NULL)) {
   29bc4:	b91e      	cbnz	r6, 29bce <nrf91_socket_offload_getaddrinfo+0xba>
	nrf_freeaddrinfo(nrf_res);
   29bc6:	9801      	ldr	r0, [sp, #4]
   29bc8:	f017 fe4a 	bl	41860 <nrf_freeaddrinfo>
   29bcc:	e7df      	b.n	29b8e <nrf91_socket_offload_getaddrinfo+0x7a>
	return k_aligned_alloc(sizeof(void *), size);
   29bce:	2150      	movs	r1, #80	; 0x50
   29bd0:	2004      	movs	r0, #4
   29bd2:	f010 fe6f 	bl	3a8b4 <k_aligned_alloc>
		if (next_z_res == NULL) {
   29bd6:	4604      	mov	r4, r0
   29bd8:	2800      	cmp	r0, #0
   29bda:	f000 8083 	beq.w	29ce4 <nrf91_socket_offload_getaddrinfo+0x1d0>
	family = nrf_to_z_family(nrf_in->ai_family);
   29bde:	6871      	ldr	r1, [r6, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   29be0:	68b3      	ldr	r3, [r6, #8]
	switch (nrf_family) {
   29be2:	290a      	cmp	r1, #10
	z_out->ai_next = NULL;
   29be4:	f8c0 9000 	str.w	r9, [r0]
	z_out->ai_canonname = NULL; /* TODO Do proper content copy. */
   29be8:	f8c0 901c 	str.w	r9, [r0, #28]
	z_out->ai_flags = nrf_to_z_addrinfo_flags(nrf_in->ai_flags);
   29bec:	f8c0 9004 	str.w	r9, [r0, #4]
	z_out->ai_socktype = nrf_in->ai_socktype;
   29bf0:	60c3      	str	r3, [r0, #12]
	switch (nrf_family) {
   29bf2:	dc23      	bgt.n	29c3c <nrf91_socket_offload_getaddrinfo+0x128>
   29bf4:	2900      	cmp	r1, #0
   29bf6:	dd23      	ble.n	29c40 <nrf91_socket_offload_getaddrinfo+0x12c>
   29bf8:	1e4b      	subs	r3, r1, #1
   29bfa:	2b09      	cmp	r3, #9
   29bfc:	d820      	bhi.n	29c40 <nrf91_socket_offload_getaddrinfo+0x12c>
   29bfe:	e8df f003 	tbb	[pc, r3]
   29c02:	2905      	.short	0x2905
   29c04:	1f251f1f 	.word	0x1f251f1f
   29c08:	271f1f1f 	.word	0x271f1f1f
		return AF_LOCAL;
   29c0c:	2306      	movs	r3, #6
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29c0e:	68f2      	ldr	r2, [r6, #12]
	z_out->ai_family = family;
   29c10:	60a3      	str	r3, [r4, #8]
	switch (proto) {
   29c12:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   29c16:	d04c      	beq.n	29cb2 <nrf91_socket_offload_getaddrinfo+0x19e>
   29c18:	dc26      	bgt.n	29c68 <nrf91_socket_offload_getaddrinfo+0x154>
   29c1a:	2a02      	cmp	r2, #2
   29c1c:	d04d      	beq.n	29cba <nrf91_socket_offload_getaddrinfo+0x1a6>
   29c1e:	dc1d      	bgt.n	29c5c <nrf91_socket_offload_getaddrinfo+0x148>
   29c20:	b372      	cbz	r2, 29c80 <nrf91_socket_offload_getaddrinfo+0x16c>
   29c22:	2a01      	cmp	r2, #1
   29c24:	d04b      	beq.n	29cbe <nrf91_socket_offload_getaddrinfo+0x1aa>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29c26:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   29c2a:	6123      	str	r3, [r4, #16]
		z_out->ai_addr = NULL;
   29c2c:	2300      	movs	r3, #0
   29c2e:	61a3      	str	r3, [r4, #24]
			k_free(next_z_res);
   29c30:	4620      	mov	r0, r4
   29c32:	f017 fff1 	bl	41c18 <k_free>
			retval = DNS_EAI_SOCKTYPE;
   29c36:	f06f 0506 	mvn.w	r5, #6
   29c3a:	e055      	b.n	29ce8 <nrf91_socket_offload_getaddrinfo+0x1d4>
	switch (nrf_family) {
   29c3c:	2966      	cmp	r1, #102	; 0x66
   29c3e:	d00b      	beq.n	29c58 <nrf91_socket_offload_getaddrinfo+0x144>
			k_free(next_z_res);
   29c40:	4620      	mov	r0, r4
   29c42:	f017 ffe9 	bl	41c18 <k_free>
			retval = DNS_EAI_ADDRFAMILY;
   29c46:	f06f 0508 	mvn.w	r5, #8
   29c4a:	e04d      	b.n	29ce8 <nrf91_socket_offload_getaddrinfo+0x1d4>
		return AF_PACKET;
   29c4c:	2303      	movs	r3, #3
   29c4e:	e7de      	b.n	29c0e <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_INET6;
   29c50:	2302      	movs	r3, #2
   29c52:	e7dc      	b.n	29c0e <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (nrf_family) {
   29c54:	2301      	movs	r3, #1
   29c56:	e7da      	b.n	29c0e <nrf91_socket_offload_getaddrinfo+0xfa>
		return AF_LTE;
   29c58:	460b      	mov	r3, r1
   29c5a:	e7d8      	b.n	29c0e <nrf91_socket_offload_getaddrinfo+0xfa>
	switch (proto) {
   29c5c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   29c60:	d1e1      	bne.n	29c26 <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29c62:	f44f 7381 	mov.w	r3, #258	; 0x102
   29c66:	e026      	b.n	29cb6 <nrf91_socket_offload_getaddrinfo+0x1a2>
	switch (proto) {
   29c68:	f240 2302 	movw	r3, #514	; 0x202
   29c6c:	429a      	cmp	r2, r3
   29c6e:	d007      	beq.n	29c80 <nrf91_socket_offload_getaddrinfo+0x16c>
   29c70:	f240 2303 	movw	r3, #515	; 0x203
   29c74:	429a      	cmp	r2, r3
   29c76:	d003      	beq.n	29c80 <nrf91_socket_offload_getaddrinfo+0x16c>
   29c78:	f240 2301 	movw	r3, #513	; 0x201
   29c7c:	429a      	cmp	r2, r3
   29c7e:	d1d2      	bne.n	29c26 <nrf91_socket_offload_getaddrinfo+0x112>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29c80:	6122      	str	r2, [r4, #16]
	if (nrf_in->ai_family == NRF_AF_INET) {
   29c82:	2902      	cmp	r1, #2
   29c84:	d11d      	bne.n	29cc2 <nrf91_socket_offload_getaddrinfo+0x1ae>
   29c86:	2108      	movs	r1, #8
   29c88:	2004      	movs	r0, #4
   29c8a:	f010 fe13 	bl	3a8b4 <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in));
   29c8e:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   29c90:	b328      	cbz	r0, 29cde <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in);
   29c92:	2308      	movs	r3, #8
   29c94:	6163      	str	r3, [r4, #20]
			(const struct nrf_sockaddr_in *)nrf_in->ai_addr);
   29c96:	6973      	ldr	r3, [r6, #20]
	ptr->sin_port = nrf_in->sin_port;
   29c98:	891a      	ldrh	r2, [r3, #8]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29c9a:	68db      	ldr	r3, [r3, #12]
	ptr->sin_port = nrf_in->sin_port;
   29c9c:	8042      	strh	r2, [r0, #2]
	ptr->sin_family = AF_INET;
   29c9e:	2201      	movs	r2, #1
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   29ca0:	6043      	str	r3, [r0, #4]
	ptr->sin_family = AF_INET;
   29ca2:	8002      	strh	r2, [r0, #0]
		if (latest_z_res == NULL) {
   29ca4:	f1b8 0f00 	cmp.w	r8, #0
   29ca8:	d124      	bne.n	29cf4 <nrf91_socket_offload_getaddrinfo+0x1e0>
			*res = next_z_res;
   29caa:	603c      	str	r4, [r7, #0]
		next_nrf_res = next_nrf_res->ai_next;
   29cac:	46a0      	mov	r8, r4
   29cae:	69f6      	ldr	r6, [r6, #28]
   29cb0:	e788      	b.n	29bc4 <nrf91_socket_offload_getaddrinfo+0xb0>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29cb2:	f240 1311 	movw	r3, #273	; 0x111
   29cb6:	6123      	str	r3, [r4, #16]
	if (z_out->ai_protocol == -EPROTONOSUPPORT) {
   29cb8:	e7e3      	b.n	29c82 <nrf91_socket_offload_getaddrinfo+0x16e>
	z_out->ai_protocol = nrf_to_z_protocol(nrf_in->ai_protocol);
   29cba:	2311      	movs	r3, #17
   29cbc:	e7fb      	b.n	29cb6 <nrf91_socket_offload_getaddrinfo+0x1a2>
   29cbe:	2306      	movs	r3, #6
   29cc0:	e7f9      	b.n	29cb6 <nrf91_socket_offload_getaddrinfo+0x1a2>
	} else if (nrf_in->ai_family == NRF_AF_INET6) {
   29cc2:	290a      	cmp	r1, #10
   29cc4:	d1b4      	bne.n	29c30 <nrf91_socket_offload_getaddrinfo+0x11c>
   29cc6:	2118      	movs	r1, #24
   29cc8:	2004      	movs	r0, #4
   29cca:	f010 fdf3 	bl	3a8b4 <k_aligned_alloc>
		z_out->ai_addr = k_malloc(sizeof(struct sockaddr_in6));
   29cce:	61a0      	str	r0, [r4, #24]
		if (z_out->ai_addr == NULL) {
   29cd0:	b128      	cbz	r0, 29cde <nrf91_socket_offload_getaddrinfo+0x1ca>
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   29cd2:	2318      	movs	r3, #24
		nrf_to_z_ipv6(z_out->ai_addr,
   29cd4:	6971      	ldr	r1, [r6, #20]
		z_out->ai_addrlen  = sizeof(struct sockaddr_in6);
   29cd6:	6163      	str	r3, [r4, #20]
		nrf_to_z_ipv6(z_out->ai_addr,
   29cd8:	f015 fd2e 	bl	3f738 <nrf_to_z_ipv6>
		} else if (error == -EAFNOSUPPORT) {
   29cdc:	e7e2      	b.n	29ca4 <nrf91_socket_offload_getaddrinfo+0x190>
			k_free(next_z_res);
   29cde:	4620      	mov	r0, r4
   29ce0:	f017 ff9a 	bl	41c18 <k_free>
			retval = DNS_EAI_MEMORY;
   29ce4:	f06f 0509 	mvn.w	r5, #9
		nrf91_socket_offload_freeaddrinfo(*res);
   29ce8:	6838      	ldr	r0, [r7, #0]
   29cea:	f015 fcf3 	bl	3f6d4 <nrf91_socket_offload_freeaddrinfo>
		*res = NULL;
   29cee:	2300      	movs	r3, #0
   29cf0:	603b      	str	r3, [r7, #0]
   29cf2:	e768      	b.n	29bc6 <nrf91_socket_offload_getaddrinfo+0xb2>
			latest_z_res->ai_next = next_z_res;
   29cf4:	f8c8 4000 	str.w	r4, [r8]
   29cf8:	e7d8      	b.n	29cac <nrf91_socket_offload_getaddrinfo+0x198>
		return DNS_EAI_NONAME;
   29cfa:	f06f 0501 	mvn.w	r5, #1
   29cfe:	e746      	b.n	29b8e <nrf91_socket_offload_getaddrinfo+0x7a>
		return DNS_EAI_MEMORY;
   29d00:	f06f 0509 	mvn.w	r5, #9
   29d04:	e743      	b.n	29b8e <nrf91_socket_offload_getaddrinfo+0x7a>
			return DNS_EAI_SOCKTYPE;
   29d06:	f06f 0506 	mvn.w	r5, #6
   29d0a:	e743      	b.n	29b94 <nrf91_socket_offload_getaddrinfo+0x80>
			return DNS_EAI_ADDRFAMILY;
   29d0c:	f06f 0508 	mvn.w	r5, #8
   29d10:	e740      	b.n	29b94 <nrf91_socket_offload_getaddrinfo+0x80>
   29d12:	bf00      	nop
   29d14:	20015a88 	.word	0x20015a88

00029d18 <nrf91_socket_create>:
{
   29d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29d1a:	4606      	mov	r6, r0
   29d1c:	460d      	mov	r5, r1
   29d1e:	4617      	mov	r7, r2
	int fd = z_reserve_fd();
   29d20:	f7f8 fea4 	bl	22a6c <z_reserve_fd>
	if (fd < 0) {
   29d24:	1e04      	subs	r4, r0, #0
   29d26:	db0d      	blt.n	29d44 <nrf91_socket_create+0x2c>
	family = z_to_nrf_family(family);
   29d28:	b2b0      	uxth	r0, r6
   29d2a:	f015 fc21 	bl	3f570 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   29d2e:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
	family = z_to_nrf_family(family);
   29d32:	4606      	mov	r6, r0
	if (family == -EAFNOSUPPORT) {
   29d34:	d109      	bne.n	29d4a <nrf91_socket_create+0x32>
		errno = EAFNOSUPPORT;
   29d36:	f014 f9d0 	bl	3e0da <__errno>
   29d3a:	236a      	movs	r3, #106	; 0x6a
		errno = EPROTONOSUPPORT;
   29d3c:	6003      	str	r3, [r0, #0]
		z_free_fd(fd);
   29d3e:	4620      	mov	r0, r4
   29d40:	f7f8 fed0 	bl	22ae4 <z_free_fd>
		return -1;
   29d44:	f04f 34ff 	mov.w	r4, #4294967295
   29d48:	e01b      	b.n	29d82 <nrf91_socket_create+0x6a>
	switch (socktype) {
   29d4a:	2d03      	cmp	r5, #3
   29d4c:	d003      	beq.n	29d56 <nrf91_socket_create+0x3e>
   29d4e:	2d04      	cmp	r5, #4
   29d50:	bf08      	it	eq
   29d52:	f44f 7500 	moveq.w	r5, #512	; 0x200
	proto = z_to_nrf_protocol(proto);
   29d56:	4638      	mov	r0, r7
   29d58:	f015 fc26 	bl	3f5a8 <z_to_nrf_protocol>
	if (proto == -EPROTONOSUPPORT) {
   29d5c:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	proto = z_to_nrf_protocol(proto);
   29d60:	4602      	mov	r2, r0
	if (proto == -EPROTONOSUPPORT) {
   29d62:	d103      	bne.n	29d6c <nrf91_socket_create+0x54>
		errno = EPROTONOSUPPORT;
   29d64:	f014 f9b9 	bl	3e0da <__errno>
   29d68:	237b      	movs	r3, #123	; 0x7b
   29d6a:	e7e7      	b.n	29d3c <nrf91_socket_create+0x24>
	retval = nrf_socket(family, type, proto);
   29d6c:	4629      	mov	r1, r5
   29d6e:	4630      	mov	r0, r6
   29d70:	f017 fc9c 	bl	416ac <nrf_socket>
	if (sd < 0) {
   29d74:	1e01      	subs	r1, r0, #0
   29d76:	dbe2      	blt.n	29d3e <nrf91_socket_create+0x26>
	z_finalize_fd(fd, SD_TO_OBJ(sd),
   29d78:	4620      	mov	r0, r4
   29d7a:	4a03      	ldr	r2, [pc, #12]	; (29d88 <nrf91_socket_create+0x70>)
   29d7c:	3101      	adds	r1, #1
   29d7e:	f7f8 fea7 	bl	22ad0 <z_finalize_fd>
}
   29d82:	4620      	mov	r0, r4
   29d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   29d86:	bf00      	nop
   29d88:	00043a18 	.word	0x00043a18

00029d8c <z_impl_gpio_pin_interrupt_configure>:
	enum gpio_int_trig trig;
	enum gpio_int_mode mode;

	__ASSERT_NO_MSG((flags & GPIO_INT_DEBOUNCE) == 0);

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   29d8c:	f402 43c0 	and.w	r3, r2, #24576	; 0x6000
   29d90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
{
   29d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct gpio_driver_config *const cfg =
   29d98:	e9d0 a801 	ldrd	sl, r8, [r0, #4]
{
   29d9c:	4605      	mov	r5, r0
   29d9e:	460e      	mov	r6, r1
   29da0:	4614      	mov	r4, r2
	const struct gpio_driver_data *const data =
   29da2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE))
   29da6:	d15f      	bne.n	29e68 <z_impl_gpio_pin_interrupt_configure+0xdc>
   29da8:	4937      	ldr	r1, [pc, #220]	; (29e88 <z_impl_gpio_pin_interrupt_configure+0xfc>)
   29daa:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
   29dae:	4a37      	ldr	r2, [pc, #220]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29db0:	4837      	ldr	r0, [pc, #220]	; (29e90 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29db2:	f012 ffe0 	bl	3cd76 <printk>
   29db6:	4837      	ldr	r0, [pc, #220]	; (29e94 <z_impl_gpio_pin_interrupt_configure+0x108>)
   29db8:	f012 ffdd 	bl	3cd76 <printk>
   29dbc:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
		 != (GPIO_INT_DISABLE | GPIO_INT_ENABLE),
		 "Cannot both enable and disable interrupts");

	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   29dc0:	4832      	ldr	r0, [pc, #200]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29dc2:	f013 fa8c 	bl	3d2de <assert_post_action>
		 "Must either enable or disable interrupts");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   29dc6:	f404 23e8 	and.w	r3, r4, #475136	; 0x74000
   29dca:	f5b3 2fc8 	cmp.w	r3, #409600	; 0x64000
   29dce:	d10e      	bne.n	29dee <z_impl_gpio_pin_interrupt_configure+0x62>
   29dd0:	4931      	ldr	r1, [pc, #196]	; (29e98 <z_impl_gpio_pin_interrupt_configure+0x10c>)
   29dd2:	f240 13f1 	movw	r3, #497	; 0x1f1
   29dd6:	4a2d      	ldr	r2, [pc, #180]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29dd8:	482d      	ldr	r0, [pc, #180]	; (29e90 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29dda:	f012 ffcc 	bl	3cd76 <printk>
   29dde:	482f      	ldr	r0, [pc, #188]	; (29e9c <z_impl_gpio_pin_interrupt_configure+0x110>)
   29de0:	f012 ffc9 	bl	3cd76 <printk>
   29de4:	f240 11f1 	movw	r1, #497	; 0x1f1
   29de8:	4828      	ldr	r0, [pc, #160]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29dea:	f013 fa78 	bl	3d2de <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) !=
		  (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)),
		 "Only one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 can be "
		 "enabled for a level interrupt.");

	__ASSERT(((flags & GPIO_INT_ENABLE) == 0) ||
   29dee:	f404 23c8 	and.w	r3, r4, #409600	; 0x64000
   29df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   29df6:	d10e      	bne.n	29e16 <z_impl_gpio_pin_interrupt_configure+0x8a>
   29df8:	4929      	ldr	r1, [pc, #164]	; (29ea0 <z_impl_gpio_pin_interrupt_configure+0x114>)
   29dfa:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   29dfe:	4a23      	ldr	r2, [pc, #140]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e00:	4823      	ldr	r0, [pc, #140]	; (29e90 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e02:	f012 ffb8 	bl	3cd76 <printk>
   29e06:	4827      	ldr	r0, [pc, #156]	; (29ea4 <z_impl_gpio_pin_interrupt_configure+0x118>)
   29e08:	f012 ffb5 	bl	3cd76 <printk>
   29e0c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
   29e10:	481e      	ldr	r0, [pc, #120]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e12:	f013 fa64 	bl	3d2de <assert_post_action>
		 ((flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1)) != 0),
		 "At least one of GPIO_INT_LOW_0, GPIO_INT_HIGH_1 has to be "
		 "enabled.");

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29e16:	2701      	movs	r7, #1
   29e18:	f8da 3000 	ldr.w	r3, [sl]
   29e1c:	40b7      	lsls	r7, r6
   29e1e:	421f      	tst	r7, r3
   29e20:	d10e      	bne.n	29e40 <z_impl_gpio_pin_interrupt_configure+0xb4>
   29e22:	4921      	ldr	r1, [pc, #132]	; (29ea8 <z_impl_gpio_pin_interrupt_configure+0x11c>)
   29e24:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   29e28:	4a18      	ldr	r2, [pc, #96]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e2a:	4819      	ldr	r0, [pc, #100]	; (29e90 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e2c:	f012 ffa3 	bl	3cd76 <printk>
   29e30:	481e      	ldr	r0, [pc, #120]	; (29eac <z_impl_gpio_pin_interrupt_configure+0x120>)
   29e32:	f012 ffa0 	bl	3cd76 <printk>
   29e36:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   29e3a:	4814      	ldr	r0, [pc, #80]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e3c:	f013 fa4f 	bl	3d2de <assert_post_action>
		 "Unsupported pin");

	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29e40:	0423      	lsls	r3, r4, #16
   29e42:	d505      	bpl.n	29e50 <z_impl_gpio_pin_interrupt_configure+0xc4>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   29e44:	f8d9 3000 	ldr.w	r3, [r9]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   29e48:	421f      	tst	r7, r3
		/* Invert signal bits */
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   29e4a:	bf18      	it	ne
   29e4c:	f484 24c0 	eorne.w	r4, r4, #393216	; 0x60000
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e50:	f8d8 7018 	ldr.w	r7, [r8, #24]
   29e54:	4631      	mov	r1, r6
   29e56:	4628      	mov	r0, r5
   29e58:	46bc      	mov	ip, r7
   29e5a:	f404 23c0 	and.w	r3, r4, #393216	; 0x60000
   29e5e:	f404 32b0 	and.w	r2, r4, #90112	; 0x16000
}
   29e62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   29e66:	4760      	bx	ip
	__ASSERT((flags & (GPIO_INT_DISABLE | GPIO_INT_ENABLE)) != 0U,
   29e68:	2b00      	cmp	r3, #0
   29e6a:	d1ac      	bne.n	29dc6 <z_impl_gpio_pin_interrupt_configure+0x3a>
   29e6c:	4910      	ldr	r1, [pc, #64]	; (29eb0 <z_impl_gpio_pin_interrupt_configure+0x124>)
   29e6e:	f44f 73f7 	mov.w	r3, #494	; 0x1ee
   29e72:	4a06      	ldr	r2, [pc, #24]	; (29e8c <z_impl_gpio_pin_interrupt_configure+0x100>)
   29e74:	4806      	ldr	r0, [pc, #24]	; (29e90 <z_impl_gpio_pin_interrupt_configure+0x104>)
   29e76:	f012 ff7e 	bl	3cd76 <printk>
   29e7a:	480e      	ldr	r0, [pc, #56]	; (29eb4 <z_impl_gpio_pin_interrupt_configure+0x128>)
   29e7c:	f012 ff7b 	bl	3cd76 <printk>
   29e80:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
   29e84:	e79c      	b.n	29dc0 <z_impl_gpio_pin_interrupt_configure+0x34>
   29e86:	bf00      	nop
   29e88:	00046cdc 	.word	0x00046cdc
   29e8c:	00046cb2 	.word	0x00046cb2
   29e90:	00044dbf 	.word	0x00044dbf
   29e94:	00046d1d 	.word	0x00046d1d
   29e98:	00046d9e 	.word	0x00046d9e
   29e9c:	00046e1f 	.word	0x00046e1f
   29ea0:	00046e73 	.word	0x00046e73
   29ea4:	00046ebd 	.word	0x00046ebd
   29ea8:	00046f02 	.word	0x00046f02
   29eac:	00046f40 	.word	0x00046f40
   29eb0:	00046d49 	.word	0x00046d49
   29eb4:	00046d73 	.word	0x00046d73

00029eb8 <gpio_pin_configure>:
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_configure(const struct device *port,
				     gpio_pin_t pin,
				     gpio_flags_t flags)
{
   29eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
			| GPIO_OUTPUT_INIT_LOGICAL;
	}

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ebc:	2501      	movs	r5, #1
   29ebe:	6843      	ldr	r3, [r0, #4]
   29ec0:	408d      	lsls	r5, r1
   29ec2:	681b      	ldr	r3, [r3, #0]
{
   29ec4:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ec6:	421d      	tst	r5, r3
{
   29ec8:	460e      	mov	r6, r1
   29eca:	4690      	mov	r8, r2
	struct gpio_driver_data *data =
   29ecc:	68c7      	ldr	r7, [r0, #12]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29ece:	d10e      	bne.n	29eee <gpio_pin_configure+0x36>
   29ed0:	490d      	ldr	r1, [pc, #52]	; (29f08 <gpio_pin_configure+0x50>)
   29ed2:	f44f 7311 	mov.w	r3, #580	; 0x244
   29ed6:	4a0d      	ldr	r2, [pc, #52]	; (29f0c <gpio_pin_configure+0x54>)
   29ed8:	480d      	ldr	r0, [pc, #52]	; (29f10 <gpio_pin_configure+0x58>)
   29eda:	f012 ff4c 	bl	3cd76 <printk>
   29ede:	480d      	ldr	r0, [pc, #52]	; (29f14 <gpio_pin_configure+0x5c>)
   29ee0:	f012 ff49 	bl	3cd76 <printk>
   29ee4:	f44f 7111 	mov.w	r1, #580	; 0x244
   29ee8:	4808      	ldr	r0, [pc, #32]	; (29f0c <gpio_pin_configure+0x54>)
   29eea:	f013 f9f8 	bl	3d2de <assert_post_action>
	return api->pin_configure(port, pin, flags);
   29eee:	68a3      	ldr	r3, [r4, #8]
   29ef0:	4642      	mov	r2, r8
   29ef2:	4631      	mov	r1, r6
   29ef4:	4620      	mov	r0, r4
   29ef6:	681b      	ldr	r3, [r3, #0]
   29ef8:	4798      	blx	r3
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   29efa:	b918      	cbnz	r0, 29f04 <gpio_pin_configure+0x4c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   29efc:	683b      	ldr	r3, [r7, #0]
   29efe:	ea23 0505 	bic.w	r5, r3, r5
   29f02:	603d      	str	r5, [r7, #0]
		flags &= ~GPIO_INT_DEBOUNCE;
		ret = z_impl_gpio_pin_interrupt_configure(port, pin, flags);
	}

	return ret;
}
   29f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29f08:	00046f02 	.word	0x00046f02
   29f0c:	00046cb2 	.word	0x00046cb2
   29f10:	00044dbf 	.word	0x00044dbf
   29f14:	00046f40 	.word	0x00046f40

00029f18 <gpio_pin_set_raw>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set_raw(const struct device *port, gpio_pin_t pin,
				   int value)
{
   29f18:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f1a:	2501      	movs	r5, #1
   29f1c:	6843      	ldr	r3, [r0, #4]
   29f1e:	408d      	lsls	r5, r1
   29f20:	681b      	ldr	r3, [r3, #0]
{
   29f22:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f24:	421d      	tst	r5, r3
{
   29f26:	4616      	mov	r6, r2
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   29f28:	d10e      	bne.n	29f48 <gpio_pin_set_raw+0x30>
   29f2a:	490d      	ldr	r1, [pc, #52]	; (29f60 <gpio_pin_set_raw+0x48>)
   29f2c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
   29f30:	4a0c      	ldr	r2, [pc, #48]	; (29f64 <gpio_pin_set_raw+0x4c>)
   29f32:	480d      	ldr	r0, [pc, #52]	; (29f68 <gpio_pin_set_raw+0x50>)
   29f34:	f012 ff1f 	bl	3cd76 <printk>
   29f38:	480c      	ldr	r0, [pc, #48]	; (29f6c <gpio_pin_set_raw+0x54>)
   29f3a:	f012 ff1c 	bl	3cd76 <printk>
   29f3e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   29f42:	4808      	ldr	r0, [pc, #32]	; (29f64 <gpio_pin_set_raw+0x4c>)
   29f44:	f013 f9cb 	bl	3d2de <assert_post_action>
		 "Unsupported pin");

	if (value != 0)	{
   29f48:	b136      	cbz	r6, 29f58 <gpio_pin_set_raw+0x40>
	return api->port_set_bits_raw(port, pins);
   29f4a:	68a3      	ldr	r3, [r4, #8]
   29f4c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   29f4e:	4629      	mov	r1, r5
   29f50:	4620      	mov	r0, r4
	} else {
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
	}

	return ret;
}
   29f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_clear_bits_raw(port, pins);
   29f56:	4718      	bx	r3
   29f58:	68a3      	ldr	r3, [r4, #8]
   29f5a:	691b      	ldr	r3, [r3, #16]
   29f5c:	e7f7      	b.n	29f4e <gpio_pin_set_raw+0x36>
   29f5e:	bf00      	nop
   29f60:	00046f02 	.word	0x00046f02
   29f64:	00046cb2 	.word	0x00046cb2
   29f68:	00044dbf 	.word	0x00044dbf
   29f6c:	00046f40 	.word	0x00046f40

00029f70 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   29f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29f74:	4606      	mov	r6, r0
   29f76:	460f      	mov	r7, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   29f78:	2400      	movs	r4, #0

			if (IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_LEDS)) {
				val = 1 - val;
			}

			int err = gpio_pin_set_raw(led_devs[i],
   29f7a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 29fd8 <dk_set_leds_state.part.0+0x68>
   29f7e:	f8df 905c 	ldr.w	r9, [pc, #92]	; 29fdc <dk_set_leds_state.part.0+0x6c>
		if ((BIT(i) & leds_on_mask) || (BIT(i) & leds_off_mask)) {
   29f82:	fa26 f204 	lsr.w	r2, r6, r4
   29f86:	fa27 f304 	lsr.w	r3, r7, r4
   29f8a:	4313      	orrs	r3, r2
   29f8c:	07db      	lsls	r3, r3, #31
   29f8e:	d517      	bpl.n	29fc0 <dk_set_leds_state.part.0+0x50>
			int err = gpio_pin_set_raw(led_devs[i],
   29f90:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   29f94:	7919      	ldrb	r1, [r3, #4]
   29f96:	f859 0024 	ldr.w	r0, [r9, r4, lsl #2]
   29f9a:	f002 0201 	and.w	r2, r2, #1
   29f9e:	f7ff ffbb 	bl	29f18 <gpio_pin_set_raw>
						   led_pins[i].number, val);
			if (err) {
   29fa2:	4605      	mov	r5, r0
   29fa4:	b160      	cbz	r0, 29fc0 <dk_set_leds_state.part.0+0x50>
   29fa6:	4809      	ldr	r0, [pc, #36]	; (29fcc <dk_set_leds_state.part.0+0x5c>)
   29fa8:	4b09      	ldr	r3, [pc, #36]	; (29fd0 <dk_set_leds_state.part.0+0x60>)
				LOG_ERR("Cannot write LED gpio");
   29faa:	490a      	ldr	r1, [pc, #40]	; (29fd4 <dk_set_leds_state.part.0+0x64>)
   29fac:	1a1b      	subs	r3, r3, r0
   29fae:	08db      	lsrs	r3, r3, #3
   29fb0:	019b      	lsls	r3, r3, #6
   29fb2:	f043 0001 	orr.w	r0, r3, #1
   29fb6:	f013 f9a3 	bl	3d300 <log_string_sync>
			}
		}
	}

	return 0;
}
   29fba:	4628      	mov	r0, r5
   29fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   29fc0:	3401      	adds	r4, #1
   29fc2:	2c04      	cmp	r4, #4
   29fc4:	d1dd      	bne.n	29f82 <dk_set_leds_state.part.0+0x12>
	return 0;
   29fc6:	2500      	movs	r5, #0
   29fc8:	e7f7      	b.n	29fba <dk_set_leds_state.part.0+0x4a>
   29fca:	bf00      	nop
   29fcc:	0004339c 	.word	0x0004339c
   29fd0:	00043404 	.word	0x00043404
   29fd4:	00046f52 	.word	0x00046f52
   29fd8:	00043a70 	.word	0x00043a70
   29fdc:	20019140 	.word	0x20019140

00029fe0 <button_pressed>:
{
   29fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   29fe2:	f04f 0320 	mov.w	r3, #32
   29fe6:	f3ef 8511 	mrs	r5, BASEPRI
   29fea:	f383 8811 	msr	BASEPRI, r3
   29fee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   29ff2:	4830      	ldr	r0, [pc, #192]	; (2a0b4 <button_pressed+0xd4>)
   29ff4:	f00f fba0 	bl	39738 <z_spin_lock_valid>
   29ff8:	b968      	cbnz	r0, 2a016 <button_pressed+0x36>
   29ffa:	237c      	movs	r3, #124	; 0x7c
   29ffc:	4a2e      	ldr	r2, [pc, #184]	; (2a0b8 <button_pressed+0xd8>)
   29ffe:	492f      	ldr	r1, [pc, #188]	; (2a0bc <button_pressed+0xdc>)
   2a000:	482f      	ldr	r0, [pc, #188]	; (2a0c0 <button_pressed+0xe0>)
   2a002:	f012 feb8 	bl	3cd76 <printk>
   2a006:	492b      	ldr	r1, [pc, #172]	; (2a0b4 <button_pressed+0xd4>)
   2a008:	482e      	ldr	r0, [pc, #184]	; (2a0c4 <button_pressed+0xe4>)
   2a00a:	f012 feb4 	bl	3cd76 <printk>
   2a00e:	217c      	movs	r1, #124	; 0x7c
   2a010:	4829      	ldr	r0, [pc, #164]	; (2a0b8 <button_pressed+0xd8>)
   2a012:	f013 f964 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   2a016:	4827      	ldr	r0, [pc, #156]	; (2a0b4 <button_pressed+0xd4>)
   2a018:	f00f fbac 	bl	39774 <z_spin_lock_set_owner>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a01c:	2400      	movs	r4, #0
   2a01e:	4e2a      	ldr	r6, [pc, #168]	; (2a0c8 <button_pressed+0xe8>)
			err = gpio_pin_interrupt_configure(button_devs[i],
   2a020:	4f2a      	ldr	r7, [pc, #168]	; (2a0cc <button_pressed+0xec>)
   2a022:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   2a026:	f856 0b04 	ldr.w	r0, [r6], #4
   2a02a:	7919      	ldrb	r1, [r3, #4]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
   2a02c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a030:	3401      	adds	r4, #1
   2a032:	f7ff feab 	bl	29d8c <z_impl_gpio_pin_interrupt_configure>
   2a036:	2c04      	cmp	r4, #4
   2a038:	d00c      	beq.n	2a054 <button_pressed+0x74>
   2a03a:	2800      	cmp	r0, #0
   2a03c:	d0f1      	beq.n	2a022 <button_pressed+0x42>
   2a03e:	4b24      	ldr	r3, [pc, #144]	; (2a0d0 <button_pressed+0xf0>)
   2a040:	4824      	ldr	r0, [pc, #144]	; (2a0d4 <button_pressed+0xf4>)
		LOG_ERR("Cannot disable callbacks");
   2a042:	4925      	ldr	r1, [pc, #148]	; (2a0d8 <button_pressed+0xf8>)
   2a044:	1ac0      	subs	r0, r0, r3
   2a046:	08c0      	lsrs	r0, r0, #3
   2a048:	0180      	lsls	r0, r0, #6
   2a04a:	f040 0001 	orr.w	r0, r0, #1
   2a04e:	f013 f957 	bl	3d300 <log_string_sync>
   2a052:	e001      	b.n	2a058 <button_pressed+0x78>
	if (err) {
   2a054:	2800      	cmp	r0, #0
   2a056:	d1f2      	bne.n	2a03e <button_pressed+0x5e>
	switch (state) {
   2a058:	4b20      	ldr	r3, [pc, #128]	; (2a0dc <button_pressed+0xfc>)
   2a05a:	781a      	ldrb	r2, [r3, #0]
   2a05c:	b9f2      	cbnz	r2, 2a09c <button_pressed+0xbc>
		state = STATE_SCANNING;
   2a05e:	2201      	movs	r2, #1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2a060:	491f      	ldr	r1, [pc, #124]	; (2a0e0 <button_pressed+0x100>)
   2a062:	701a      	strb	r2, [r3, #0]
   2a064:	481f      	ldr	r0, [pc, #124]	; (2a0e4 <button_pressed+0x104>)
   2a066:	2221      	movs	r2, #33	; 0x21
   2a068:	2300      	movs	r3, #0
   2a06a:	f00f fbef 	bl	3984c <k_delayed_work_submit_to_queue>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a06e:	4811      	ldr	r0, [pc, #68]	; (2a0b4 <button_pressed+0xd4>)
   2a070:	f00f fb70 	bl	39754 <z_spin_unlock_valid>
   2a074:	b968      	cbnz	r0, 2a092 <button_pressed+0xb2>
   2a076:	23a7      	movs	r3, #167	; 0xa7
   2a078:	4a0f      	ldr	r2, [pc, #60]	; (2a0b8 <button_pressed+0xd8>)
   2a07a:	491b      	ldr	r1, [pc, #108]	; (2a0e8 <button_pressed+0x108>)
   2a07c:	4810      	ldr	r0, [pc, #64]	; (2a0c0 <button_pressed+0xe0>)
   2a07e:	f012 fe7a 	bl	3cd76 <printk>
   2a082:	490c      	ldr	r1, [pc, #48]	; (2a0b4 <button_pressed+0xd4>)
   2a084:	4819      	ldr	r0, [pc, #100]	; (2a0ec <button_pressed+0x10c>)
   2a086:	f012 fe76 	bl	3cd76 <printk>
   2a08a:	21a7      	movs	r1, #167	; 0xa7
   2a08c:	480a      	ldr	r0, [pc, #40]	; (2a0b8 <button_pressed+0xd8>)
   2a08e:	f013 f926 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   2a092:	f385 8811 	msr	BASEPRI, r5
   2a096:	f3bf 8f6f 	isb	sy
}
   2a09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		__ASSERT_NO_MSG(false);
   2a09c:	23eb      	movs	r3, #235	; 0xeb
   2a09e:	4a14      	ldr	r2, [pc, #80]	; (2a0f0 <button_pressed+0x110>)
   2a0a0:	4914      	ldr	r1, [pc, #80]	; (2a0f4 <button_pressed+0x114>)
   2a0a2:	4807      	ldr	r0, [pc, #28]	; (2a0c0 <button_pressed+0xe0>)
   2a0a4:	f012 fe67 	bl	3cd76 <printk>
   2a0a8:	21eb      	movs	r1, #235	; 0xeb
   2a0aa:	4811      	ldr	r0, [pc, #68]	; (2a0f0 <button_pressed+0x110>)
   2a0ac:	f013 f917 	bl	3d2de <assert_post_action>
		break;
   2a0b0:	e7dd      	b.n	2a06e <button_pressed+0x8e>
   2a0b2:	bf00      	nop
   2a0b4:	20019150 	.word	0x20019150
   2a0b8:	00045538 	.word	0x00045538
   2a0bc:	0004555e 	.word	0x0004555e
   2a0c0:	00044dbf 	.word	0x00044dbf
   2a0c4:	00045573 	.word	0x00045573
   2a0c8:	200190fc 	.word	0x200190fc
   2a0cc:	00043a50 	.word	0x00043a50
   2a0d0:	0004339c 	.word	0x0004339c
   2a0d4:	00043404 	.word	0x00043404
   2a0d8:	00046f68 	.word	0x00046f68
   2a0dc:	2001ec9c 	.word	0x2001ec9c
   2a0e0:	200168d0 	.word	0x200168d0
   2a0e4:	20018af0 	.word	0x20018af0
   2a0e8:	0004558b 	.word	0x0004558b
   2a0ec:	000455a2 	.word	0x000455a2
   2a0f0:	00046f81 	.word	0x00046f81
   2a0f4:	0004bcc7 	.word	0x0004bcc7

0002a0f8 <buttons_scan_fn>:
{
   2a0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ret = 0;
   2a0fc:	2400      	movs	r4, #0
   2a0fe:	4e7a      	ldr	r6, [pc, #488]	; (2a2e8 <buttons_scan_fn+0x1f0>)
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a100:	4625      	mov	r5, r4
{
   2a102:	46b2      	mov	sl, r6
		val = gpio_pin_get_raw(button_devs[i], button_pins[i].number);
   2a104:	f8df b208 	ldr.w	fp, [pc, #520]	; 2a310 <buttons_scan_fn+0x218>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   2a108:	4f78      	ldr	r7, [pc, #480]	; (2a2ec <buttons_scan_fn+0x1f4>)
   2a10a:	f04f 0801 	mov.w	r8, #1
   2a10e:	eb0b 03c5 	add.w	r3, fp, r5, lsl #3
   2a112:	791b      	ldrb	r3, [r3, #4]
   2a114:	f85a 9b04 	ldr.w	r9, [sl], #4
   2a118:	fa08 f803 	lsl.w	r8, r8, r3
   2a11c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2a120:	681b      	ldr	r3, [r3, #0]
   2a122:	ea18 0f03 	tst.w	r8, r3
   2a126:	d10e      	bne.n	2a146 <buttons_scan_fn+0x4e>
   2a128:	4971      	ldr	r1, [pc, #452]	; (2a2f0 <buttons_scan_fn+0x1f8>)
   2a12a:	f44f 735e 	mov.w	r3, #888	; 0x378
   2a12e:	463a      	mov	r2, r7
   2a130:	4870      	ldr	r0, [pc, #448]	; (2a2f4 <buttons_scan_fn+0x1fc>)
   2a132:	f012 fe20 	bl	3cd76 <printk>
   2a136:	4870      	ldr	r0, [pc, #448]	; (2a2f8 <buttons_scan_fn+0x200>)
   2a138:	f012 fe1d 	bl	3cd76 <printk>
   2a13c:	f44f 715e 	mov.w	r1, #888	; 0x378
   2a140:	4638      	mov	r0, r7
   2a142:	f013 f8cc 	bl	3d2de <assert_post_action>
	return api->port_get_raw(port, value);
   2a146:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2a14a:	4648      	mov	r0, r9
   2a14c:	685b      	ldr	r3, [r3, #4]
   2a14e:	a901      	add	r1, sp, #4
   2a150:	4798      	blx	r3
	if (ret == 0) {
   2a152:	2800      	cmp	r0, #0
   2a154:	d17c      	bne.n	2a250 <buttons_scan_fn+0x158>
		if ((val && !IS_ENABLED(CONFIG_DK_LIBRARY_INVERT_BUTTONS)) ||
   2a156:	9b01      	ldr	r3, [sp, #4]
   2a158:	ea18 0f03 	tst.w	r8, r3
   2a15c:	d003      	beq.n	2a166 <buttons_scan_fn+0x6e>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a15e:	3501      	adds	r5, #1
   2a160:	2d04      	cmp	r5, #4
   2a162:	d1d2      	bne.n	2a10a <buttons_scan_fn+0x12>
   2a164:	e080      	b.n	2a268 <buttons_scan_fn+0x170>
			ret |= 1U << i;
   2a166:	2301      	movs	r3, #1
   2a168:	40ab      	lsls	r3, r5
   2a16a:	431c      	orrs	r4, r3
   2a16c:	e7f7      	b.n	2a15e <buttons_scan_fn+0x66>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2a16e:	3d04      	subs	r5, #4
   2a170:	2d00      	cmp	r5, #0
   2a172:	f000 809c 	beq.w	2a2ae <buttons_scan_fn+0x1b6>
			handler->cb(button_state, has_changed);
   2a176:	46aa      	mov	sl, r5
   2a178:	f85a 3b04 	ldr.w	r3, [sl], #4
   2a17c:	4641      	mov	r1, r8
   2a17e:	4620      	mov	r0, r4
   2a180:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2a182:	f1ba 0f00 	cmp.w	sl, #0
   2a186:	f000 8092 	beq.w	2a2ae <buttons_scan_fn+0x1b6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2a18a:	686d      	ldr	r5, [r5, #4]
	return node->next;
   2a18c:	e08c      	b.n	2a2a8 <buttons_scan_fn+0x1b0>
		initial_run = false;
   2a18e:	2200      	movs	r2, #0
   2a190:	701a      	strb	r2, [r3, #0]
   2a192:	e08f      	b.n	2a2b4 <buttons_scan_fn+0x1bc>
	__asm__ volatile(
   2a194:	f04f 0320 	mov.w	r3, #32
   2a198:	f3ef 8811 	mrs	r8, BASEPRI
   2a19c:	f383 8811 	msr	BASEPRI, r3
   2a1a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2a1a4:	4855      	ldr	r0, [pc, #340]	; (2a2fc <buttons_scan_fn+0x204>)
   2a1a6:	f00f fac7 	bl	39738 <z_spin_lock_valid>
   2a1aa:	b968      	cbnz	r0, 2a1c8 <buttons_scan_fn+0xd0>
   2a1ac:	237c      	movs	r3, #124	; 0x7c
   2a1ae:	4a54      	ldr	r2, [pc, #336]	; (2a300 <buttons_scan_fn+0x208>)
   2a1b0:	4954      	ldr	r1, [pc, #336]	; (2a304 <buttons_scan_fn+0x20c>)
   2a1b2:	4850      	ldr	r0, [pc, #320]	; (2a2f4 <buttons_scan_fn+0x1fc>)
   2a1b4:	f012 fddf 	bl	3cd76 <printk>
   2a1b8:	4950      	ldr	r1, [pc, #320]	; (2a2fc <buttons_scan_fn+0x204>)
   2a1ba:	4853      	ldr	r0, [pc, #332]	; (2a308 <buttons_scan_fn+0x210>)
   2a1bc:	f012 fddb 	bl	3cd76 <printk>
   2a1c0:	217c      	movs	r1, #124	; 0x7c
   2a1c2:	484f      	ldr	r0, [pc, #316]	; (2a300 <buttons_scan_fn+0x208>)
   2a1c4:	f013 f88b 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   2a1c8:	484c      	ldr	r0, [pc, #304]	; (2a2fc <buttons_scan_fn+0x204>)
   2a1ca:	f00f fad3 	bl	39774 <z_spin_lock_set_owner>
		switch (state) {
   2a1ce:	4b4f      	ldr	r3, [pc, #316]	; (2a30c <buttons_scan_fn+0x214>)
   2a1d0:	781a      	ldrb	r2, [r3, #0]
   2a1d2:	2a01      	cmp	r2, #1
   2a1d4:	d130      	bne.n	2a238 <buttons_scan_fn+0x140>
			state = STATE_WAITING;
   2a1d6:	2200      	movs	r2, #0
   2a1d8:	701a      	strb	r2, [r3, #0]
			err = gpio_pin_interrupt_configure(button_devs[i],
   2a1da:	4b4d      	ldr	r3, [pc, #308]	; (2a310 <buttons_scan_fn+0x218>)
   2a1dc:	f856 0b04 	ldr.w	r0, [r6], #4
   2a1e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   2a1e4:	7919      	ldrb	r1, [r3, #4]
   2a1e6:	f44f 3210 	mov.w	r2, #147456	; 0x24000
   2a1ea:	f7ff fdcf 	bl	29d8c <z_impl_gpio_pin_interrupt_configure>
	for (size_t i = 0; (i < ARRAY_SIZE(button_pins)) && !err; i++) {
   2a1ee:	3401      	adds	r4, #1
   2a1f0:	2c04      	cmp	r4, #4
   2a1f2:	4605      	mov	r5, r0
   2a1f4:	d001      	beq.n	2a1fa <buttons_scan_fn+0x102>
   2a1f6:	2800      	cmp	r0, #0
   2a1f8:	d0ef      	beq.n	2a1da <buttons_scan_fn+0xe2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2a1fa:	4840      	ldr	r0, [pc, #256]	; (2a2fc <buttons_scan_fn+0x204>)
   2a1fc:	f00f faaa 	bl	39754 <z_spin_unlock_valid>
   2a200:	b968      	cbnz	r0, 2a21e <buttons_scan_fn+0x126>
   2a202:	23a7      	movs	r3, #167	; 0xa7
   2a204:	4a3e      	ldr	r2, [pc, #248]	; (2a300 <buttons_scan_fn+0x208>)
   2a206:	4943      	ldr	r1, [pc, #268]	; (2a314 <buttons_scan_fn+0x21c>)
   2a208:	483a      	ldr	r0, [pc, #232]	; (2a2f4 <buttons_scan_fn+0x1fc>)
   2a20a:	f012 fdb4 	bl	3cd76 <printk>
   2a20e:	493b      	ldr	r1, [pc, #236]	; (2a2fc <buttons_scan_fn+0x204>)
   2a210:	4841      	ldr	r0, [pc, #260]	; (2a318 <buttons_scan_fn+0x220>)
   2a212:	f012 fdb0 	bl	3cd76 <printk>
   2a216:	21a7      	movs	r1, #167	; 0xa7
   2a218:	4839      	ldr	r0, [pc, #228]	; (2a300 <buttons_scan_fn+0x208>)
   2a21a:	f013 f860 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   2a21e:	f388 8811 	msr	BASEPRI, r8
   2a222:	f3bf 8f6f 	isb	sy
		if (err) {
   2a226:	2d00      	cmp	r5, #0
   2a228:	d05a      	beq.n	2a2e0 <buttons_scan_fn+0x1e8>
   2a22a:	483c      	ldr	r0, [pc, #240]	; (2a31c <buttons_scan_fn+0x224>)
   2a22c:	4b3c      	ldr	r3, [pc, #240]	; (2a320 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot enable callbacks");
   2a22e:	493d      	ldr	r1, [pc, #244]	; (2a324 <buttons_scan_fn+0x22c>)
   2a230:	1ac0      	subs	r0, r0, r3
   2a232:	08c0      	lsrs	r0, r0, #3
   2a234:	0180      	lsls	r0, r0, #6
   2a236:	e04f      	b.n	2a2d8 <buttons_scan_fn+0x1e0>
			__ASSERT_NO_MSG(false);
   2a238:	23b4      	movs	r3, #180	; 0xb4
   2a23a:	4a3b      	ldr	r2, [pc, #236]	; (2a328 <buttons_scan_fn+0x230>)
   2a23c:	493b      	ldr	r1, [pc, #236]	; (2a32c <buttons_scan_fn+0x234>)
   2a23e:	482d      	ldr	r0, [pc, #180]	; (2a2f4 <buttons_scan_fn+0x1fc>)
   2a240:	f012 fd99 	bl	3cd76 <printk>
   2a244:	21b4      	movs	r1, #180	; 0xb4
   2a246:	4838      	ldr	r0, [pc, #224]	; (2a328 <buttons_scan_fn+0x230>)
   2a248:	f013 f849 	bl	3d2de <assert_post_action>
		int err = 0;
   2a24c:	2500      	movs	r5, #0
			break;
   2a24e:	e7d4      	b.n	2a1fa <buttons_scan_fn+0x102>
		if (val < 0) {
   2a250:	da85      	bge.n	2a15e <buttons_scan_fn+0x66>
   2a252:	4b33      	ldr	r3, [pc, #204]	; (2a320 <buttons_scan_fn+0x228>)
   2a254:	4831      	ldr	r0, [pc, #196]	; (2a31c <buttons_scan_fn+0x224>)
			LOG_ERR("Cannot read gpio pin");
   2a256:	4936      	ldr	r1, [pc, #216]	; (2a330 <buttons_scan_fn+0x238>)
   2a258:	1ac0      	subs	r0, r0, r3
   2a25a:	08c0      	lsrs	r0, r0, #3
   2a25c:	0180      	lsls	r0, r0, #6
   2a25e:	f040 0001 	orr.w	r0, r0, #1
   2a262:	f013 f84d 	bl	3d300 <log_string_sync>
			return 0;
   2a266:	2400      	movs	r4, #0
   2a268:	4b32      	ldr	r3, [pc, #200]	; (2a334 <buttons_scan_fn+0x23c>)
   2a26a:	e8d3 2fef 	ldaex	r2, [r3]
   2a26e:	e8c3 4fe1 	stlex	r1, r4, [r3]
   2a272:	2900      	cmp	r1, #0
   2a274:	d1f9      	bne.n	2a26a <buttons_scan_fn+0x172>
	if (!initial_run) {
   2a276:	4b30      	ldr	r3, [pc, #192]	; (2a338 <buttons_scan_fn+0x240>)
   2a278:	4f30      	ldr	r7, [pc, #192]	; (2a33c <buttons_scan_fn+0x244>)
   2a27a:	781a      	ldrb	r2, [r3, #0]
   2a27c:	2a00      	cmp	r2, #0
   2a27e:	d186      	bne.n	2a18e <buttons_scan_fn+0x96>
		if (button_scan != last_button_scan) {
   2a280:	6839      	ldr	r1, [r7, #0]
   2a282:	42a1      	cmp	r1, r4
   2a284:	d016      	beq.n	2a2b4 <buttons_scan_fn+0x1bc>
	if (button_handler_cb != NULL) {
   2a286:	4b2e      	ldr	r3, [pc, #184]	; (2a340 <buttons_scan_fn+0x248>)
			uint32_t has_changed = (button_scan ^ last_button_scan);
   2a288:	ea81 0804 	eor.w	r8, r1, r4
	if (button_handler_cb != NULL) {
   2a28c:	681b      	ldr	r3, [r3, #0]
   2a28e:	b113      	cbz	r3, 2a296 <buttons_scan_fn+0x19e>
		button_handler_cb(button_state, has_changed);
   2a290:	4641      	mov	r1, r8
   2a292:	4620      	mov	r0, r4
   2a294:	4798      	blx	r3
	return z_impl_k_mutex_lock(mutex, timeout);
   2a296:	f04f 33ff 	mov.w	r3, #4294967295
   2a29a:	f04f 32ff 	mov.w	r2, #4294967295
   2a29e:	4829      	ldr	r0, [pc, #164]	; (2a344 <buttons_scan_fn+0x24c>)
   2a2a0:	f00d fb16 	bl	378d0 <z_impl_k_mutex_lock>
		SYS_SLIST_FOR_EACH_CONTAINER(&button_handlers, handler, node) {
   2a2a4:	4b28      	ldr	r3, [pc, #160]	; (2a348 <buttons_scan_fn+0x250>)
   2a2a6:	681d      	ldr	r5, [r3, #0]
   2a2a8:	2d00      	cmp	r5, #0
   2a2aa:	f47f af60 	bne.w	2a16e <buttons_scan_fn+0x76>
	return z_impl_k_mutex_unlock(mutex);
   2a2ae:	4825      	ldr	r0, [pc, #148]	; (2a344 <buttons_scan_fn+0x24c>)
   2a2b0:	f00d fc08 	bl	37ac4 <z_impl_k_mutex_unlock>
	last_button_scan = button_scan;
   2a2b4:	603c      	str	r4, [r7, #0]
	if (button_scan != 0) {
   2a2b6:	2c00      	cmp	r4, #0
   2a2b8:	f43f af6c 	beq.w	2a194 <buttons_scan_fn+0x9c>
   2a2bc:	f44f 72a4 	mov.w	r2, #328	; 0x148
   2a2c0:	2300      	movs	r3, #0
   2a2c2:	4922      	ldr	r1, [pc, #136]	; (2a34c <buttons_scan_fn+0x254>)
   2a2c4:	4822      	ldr	r0, [pc, #136]	; (2a350 <buttons_scan_fn+0x258>)
   2a2c6:	f00f fac1 	bl	3984c <k_delayed_work_submit_to_queue>
		if (err) {
   2a2ca:	b148      	cbz	r0, 2a2e0 <buttons_scan_fn+0x1e8>
   2a2cc:	4813      	ldr	r0, [pc, #76]	; (2a31c <buttons_scan_fn+0x224>)
   2a2ce:	4b14      	ldr	r3, [pc, #80]	; (2a320 <buttons_scan_fn+0x228>)
			LOG_ERR("Cannot add work to workqueue");
   2a2d0:	4920      	ldr	r1, [pc, #128]	; (2a354 <buttons_scan_fn+0x25c>)
   2a2d2:	1ac0      	subs	r0, r0, r3
   2a2d4:	08c0      	lsrs	r0, r0, #3
   2a2d6:	0180      	lsls	r0, r0, #6
			LOG_ERR("Cannot enable callbacks");
   2a2d8:	f040 0001 	orr.w	r0, r0, #1
   2a2dc:	f013 f810 	bl	3d300 <log_string_sync>
}
   2a2e0:	b003      	add	sp, #12
   2a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2e6:	bf00      	nop
   2a2e8:	200190fc 	.word	0x200190fc
   2a2ec:	00046cb2 	.word	0x00046cb2
   2a2f0:	00046f02 	.word	0x00046f02
   2a2f4:	00044dbf 	.word	0x00044dbf
   2a2f8:	00046f40 	.word	0x00046f40
   2a2fc:	20019150 	.word	0x20019150
   2a300:	00045538 	.word	0x00045538
   2a304:	0004555e 	.word	0x0004555e
   2a308:	00045573 	.word	0x00045573
   2a30c:	2001ec9c 	.word	0x2001ec9c
   2a310:	00043a50 	.word	0x00043a50
   2a314:	0004558b 	.word	0x0004558b
   2a318:	000455a2 	.word	0x000455a2
   2a31c:	00043404 	.word	0x00043404
   2a320:	0004339c 	.word	0x0004339c
   2a324:	00046ff1 	.word	0x00046ff1
   2a328:	00046f81 	.word	0x00046f81
   2a32c:	0004bcc7 	.word	0x0004bcc7
   2a330:	00046fbf 	.word	0x00046fbf
   2a334:	20019154 	.word	0x20019154
   2a338:	20015811 	.word	0x20015811
   2a33c:	20019138 	.word	0x20019138
   2a340:	2001910c 	.word	0x2001910c
   2a344:	20019110 	.word	0x20019110
   2a348:	20019124 	.word	0x20019124
   2a34c:	200168d0 	.word	0x200168d0
   2a350:	20018af0 	.word	0x20018af0
   2a354:	00046fd4 	.word	0x00046fd4

0002a358 <dk_leds_init>:
{
   2a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a35a:	2600      	movs	r6, #0
   2a35c:	4d18      	ldr	r5, [pc, #96]	; (2a3c0 <dk_leds_init+0x68>)
   2a35e:	4f19      	ldr	r7, [pc, #100]	; (2a3c4 <dk_leds_init+0x6c>)
		led_devs[i] = device_get_binding(led_pins[i].port);
   2a360:	6828      	ldr	r0, [r5, #0]
   2a362:	f00c fe7f 	bl	37064 <z_impl_device_get_binding>
   2a366:	f847 0b04 	str.w	r0, [r7], #4
		if (!led_devs[i]) {
   2a36a:	b968      	cbnz	r0, 2a388 <dk_leds_init+0x30>
   2a36c:	4b16      	ldr	r3, [pc, #88]	; (2a3c8 <dk_leds_init+0x70>)
   2a36e:	4817      	ldr	r0, [pc, #92]	; (2a3cc <dk_leds_init+0x74>)
			LOG_ERR("Cannot bind gpio device");
   2a370:	4917      	ldr	r1, [pc, #92]	; (2a3d0 <dk_leds_init+0x78>)
   2a372:	1ac0      	subs	r0, r0, r3
   2a374:	08c0      	lsrs	r0, r0, #3
   2a376:	0180      	lsls	r0, r0, #6
   2a378:	f040 0001 	orr.w	r0, r0, #1
   2a37c:	f012 ffc0 	bl	3d300 <log_string_sync>
			return -ENODEV;
   2a380:	f06f 0412 	mvn.w	r4, #18
}
   2a384:	4620      	mov	r0, r4
   2a386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = gpio_pin_configure(led_devs[i], led_pins[i].number,
   2a388:	f44f 7200 	mov.w	r2, #512	; 0x200
   2a38c:	7929      	ldrb	r1, [r5, #4]
   2a38e:	f7ff fd93 	bl	29eb8 <gpio_pin_configure>
		if (err) {
   2a392:	4604      	mov	r4, r0
   2a394:	b150      	cbz	r0, 2a3ac <dk_leds_init+0x54>
   2a396:	480c      	ldr	r0, [pc, #48]	; (2a3c8 <dk_leds_init+0x70>)
   2a398:	4b0c      	ldr	r3, [pc, #48]	; (2a3cc <dk_leds_init+0x74>)
			LOG_ERR("Cannot configure LED gpio");
   2a39a:	490e      	ldr	r1, [pc, #56]	; (2a3d4 <dk_leds_init+0x7c>)
   2a39c:	1a1b      	subs	r3, r3, r0
   2a39e:	08db      	lsrs	r3, r3, #3
   2a3a0:	019b      	lsls	r3, r3, #6
   2a3a2:	f043 0001 	orr.w	r0, r3, #1
   2a3a6:	f012 ffab 	bl	3d300 <log_string_sync>
			return err;
   2a3aa:	e7eb      	b.n	2a384 <dk_leds_init+0x2c>
	for (size_t i = 0; i < ARRAY_SIZE(led_pins); i++) {
   2a3ac:	3601      	adds	r6, #1
   2a3ae:	2e04      	cmp	r6, #4
   2a3b0:	f105 0508 	add.w	r5, r5, #8
   2a3b4:	d1d4      	bne.n	2a360 <dk_leds_init+0x8>
}
   2a3b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2a3ba:	210f      	movs	r1, #15
   2a3bc:	f7ff bdd8 	b.w	29f70 <dk_set_leds_state.part.0>
   2a3c0:	00043a70 	.word	0x00043a70
   2a3c4:	20019140 	.word	0x20019140
   2a3c8:	0004339c 	.word	0x0004339c
   2a3cc:	00043404 	.word	0x00043404
   2a3d0:	00047009 	.word	0x00047009
   2a3d4:	00047021 	.word	0x00047021

0002a3d8 <dk_read_buttons>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a3d8:	4b05      	ldr	r3, [pc, #20]	; (2a3f0 <dk_read_buttons+0x18>)
   2a3da:	e8d3 3faf 	lda	r3, [r3]
	if (button_state != NULL) {
   2a3de:	b100      	cbz	r0, 2a3e2 <dk_read_buttons+0xa>
		*button_state = current_state;
   2a3e0:	6003      	str	r3, [r0, #0]
	if (has_changed != NULL) {
   2a3e2:	4804      	ldr	r0, [pc, #16]	; (2a3f4 <dk_read_buttons+0x1c>)
   2a3e4:	b111      	cbz	r1, 2a3ec <dk_read_buttons+0x14>
		*has_changed = (current_state ^ last_state);
   2a3e6:	6802      	ldr	r2, [r0, #0]
   2a3e8:	405a      	eors	r2, r3
   2a3ea:	600a      	str	r2, [r1, #0]
	last_state = current_state;
   2a3ec:	6003      	str	r3, [r0, #0]
}
   2a3ee:	4770      	bx	lr
   2a3f0:	20019154 	.word	0x20019154
   2a3f4:	2001913c 	.word	0x2001913c

0002a3f8 <dk_buttons_init>:
{
   2a3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	button_handler_cb = button_handler;
   2a3fc:	4b47      	ldr	r3, [pc, #284]	; (2a51c <__kernel_ram_size+0x124>)
   2a3fe:	6018      	str	r0, [r3, #0]
	return z_impl_k_mutex_init(mutex);
   2a400:	4d47      	ldr	r5, [pc, #284]	; (2a520 <__kernel_ram_size+0x128>)
   2a402:	4f48      	ldr	r7, [pc, #288]	; (2a524 <__kernel_ram_size+0x12c>)
   2a404:	4848      	ldr	r0, [pc, #288]	; (2a528 <__kernel_ram_size+0x130>)
   2a406:	f017 fa78 	bl	418fa <z_impl_k_mutex_init>
   2a40a:	46b9      	mov	r9, r7
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a40c:	2600      	movs	r6, #0
   2a40e:	46a8      	mov	r8, r5
		button_devs[i] = device_get_binding(button_pins[i].port);
   2a410:	6828      	ldr	r0, [r5, #0]
   2a412:	f00c fe27 	bl	37064 <z_impl_device_get_binding>
   2a416:	f849 0b04 	str.w	r0, [r9], #4
		if (!button_devs[i]) {
   2a41a:	b970      	cbnz	r0, 2a43a <dk_buttons_init+0x42>
   2a41c:	4b43      	ldr	r3, [pc, #268]	; (2a52c <__kernel_ram_size+0x134>)
   2a41e:	4844      	ldr	r0, [pc, #272]	; (2a530 <__kernel_ram_size+0x138>)
			LOG_ERR("Cannot bind gpio device");
   2a420:	4944      	ldr	r1, [pc, #272]	; (2a534 <__kernel_ram_size+0x13c>)
   2a422:	1ac0      	subs	r0, r0, r3
   2a424:	08c0      	lsrs	r0, r0, #3
   2a426:	0180      	lsls	r0, r0, #6
   2a428:	f040 0001 	orr.w	r0, r0, #1
   2a42c:	f012 ff68 	bl	3d300 <log_string_sync>
			return -ENODEV;
   2a430:	f06f 0412 	mvn.w	r4, #18
}
   2a434:	4620      	mov	r0, r4
   2a436:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = gpio_pin_configure(button_devs[i], button_pins[i].number,
   2a43a:	f44f 7288 	mov.w	r2, #272	; 0x110
   2a43e:	7929      	ldrb	r1, [r5, #4]
   2a440:	f7ff fd3a 	bl	29eb8 <gpio_pin_configure>
		if (err) {
   2a444:	4604      	mov	r4, r0
   2a446:	b150      	cbz	r0, 2a45e <dk_buttons_init+0x66>
   2a448:	4839      	ldr	r0, [pc, #228]	; (2a530 <__kernel_ram_size+0x138>)
   2a44a:	4b38      	ldr	r3, [pc, #224]	; (2a52c <__kernel_ram_size+0x134>)
			LOG_ERR("Cannot configure button gpio");
   2a44c:	493a      	ldr	r1, [pc, #232]	; (2a538 <__kernel_ram_size+0x140>)
   2a44e:	1ac0      	subs	r0, r0, r3
   2a450:	08c0      	lsrs	r0, r0, #3
   2a452:	0180      	lsls	r0, r0, #6
		LOG_ERR("Cannot add work to workqueue");
   2a454:	f040 0001 	orr.w	r0, r0, #1
   2a458:	f012 ff52 	bl	3d300 <log_string_sync>
		return err;
   2a45c:	e7ea      	b.n	2a434 <dk_buttons_init+0x3c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a45e:	3601      	adds	r6, #1
   2a460:	2e04      	cmp	r6, #4
   2a462:	f105 0508 	add.w	r5, r5, #8
   2a466:	d1d3      	bne.n	2a410 <dk_buttons_init+0x18>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a468:	4605      	mov	r5, r0
	uint32_t pin_mask = 0;
   2a46a:	4681      	mov	r9, r0
		pin_mask |= BIT(button_pins[i].number);
   2a46c:	f04f 0b01 	mov.w	fp, #1
   2a470:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 2a524 <__kernel_ram_size+0x12c>
		err = gpio_pin_interrupt_configure(button_devs[i],
   2a474:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
   2a478:	f85a 0b04 	ldr.w	r0, [sl], #4
   2a47c:	791e      	ldrb	r6, [r3, #4]
   2a47e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   2a482:	4631      	mov	r1, r6
   2a484:	f7ff fc82 	bl	29d8c <z_impl_gpio_pin_interrupt_configure>
		if (err) {
   2a488:	4604      	mov	r4, r0
   2a48a:	b130      	cbz	r0, 2a49a <dk_buttons_init+0xa2>
   2a48c:	4828      	ldr	r0, [pc, #160]	; (2a530 <__kernel_ram_size+0x138>)
   2a48e:	4b27      	ldr	r3, [pc, #156]	; (2a52c <__kernel_ram_size+0x134>)
			LOG_ERR("Cannot disable callbacks()");
   2a490:	492a      	ldr	r1, [pc, #168]	; (2a53c <__kernel_ram_size+0x144>)
   2a492:	1ac0      	subs	r0, r0, r3
   2a494:	08c0      	lsrs	r0, r0, #3
   2a496:	0180      	lsls	r0, r0, #6
   2a498:	e7dc      	b.n	2a454 <dk_buttons_init+0x5c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a49a:	3501      	adds	r5, #1
		pin_mask |= BIT(button_pins[i].number);
   2a49c:	fa0b f606 	lsl.w	r6, fp, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4a0:	2d04      	cmp	r5, #4
		pin_mask |= BIT(button_pins[i].number);
   2a4a2:	ea49 0906 	orr.w	r9, r9, r6
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4a6:	d1e5      	bne.n	2a474 <dk_buttons_init+0x7c>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4a8:	4605      	mov	r5, r0
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   2a4aa:	4e25      	ldr	r6, [pc, #148]	; (2a540 <__kernel_ram_size+0x148>)
   2a4ac:	4b25      	ldr	r3, [pc, #148]	; (2a544 <__kernel_ram_size+0x14c>)
	callback->pin_mask = pin_mask;
   2a4ae:	e9c6 3901 	strd	r3, r9, [r6, #4]
		err = gpio_add_callback(button_devs[i], &gpio_cb);
   2a4b2:	f857 0b04 	ldr.w	r0, [r7], #4
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   2a4b6:	6883      	ldr	r3, [r0, #8]
   2a4b8:	69db      	ldr	r3, [r3, #28]
   2a4ba:	b15b      	cbz	r3, 2a4d4 <dk_buttons_init+0xdc>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   2a4bc:	2201      	movs	r2, #1
   2a4be:	4631      	mov	r1, r6
   2a4c0:	4798      	blx	r3
		if (err) {
   2a4c2:	4604      	mov	r4, r0
   2a4c4:	b148      	cbz	r0, 2a4da <dk_buttons_init+0xe2>
   2a4c6:	481a      	ldr	r0, [pc, #104]	; (2a530 <__kernel_ram_size+0x138>)
   2a4c8:	4b18      	ldr	r3, [pc, #96]	; (2a52c <__kernel_ram_size+0x134>)
			LOG_ERR("Cannot add callback");
   2a4ca:	491f      	ldr	r1, [pc, #124]	; (2a548 <__kernel_ram_size+0x150>)
   2a4cc:	1ac0      	subs	r0, r0, r3
   2a4ce:	08c0      	lsrs	r0, r0, #3
   2a4d0:	0180      	lsls	r0, r0, #6
   2a4d2:	e7bf      	b.n	2a454 <dk_buttons_init+0x5c>
		return -ENOTSUP;
   2a4d4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2a4d8:	e7f5      	b.n	2a4c6 <dk_buttons_init+0xce>
	for (size_t i = 0; i < ARRAY_SIZE(button_pins); i++) {
   2a4da:	3501      	adds	r5, #1
   2a4dc:	2d04      	cmp	r5, #4
   2a4de:	d1e8      	bne.n	2a4b2 <dk_buttons_init+0xba>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   2a4e0:	4d1a      	ldr	r5, [pc, #104]	; (2a54c <__kernel_ram_size+0x154>)
   2a4e2:	4601      	mov	r1, r0
   2a4e4:	2230      	movs	r2, #48	; 0x30
   2a4e6:	4628      	mov	r0, r5
   2a4e8:	f017 fbf9 	bl	41cde <memset>
	state = STATE_SCANNING;
   2a4ec:	2201      	movs	r2, #1
   2a4ee:	4b18      	ldr	r3, [pc, #96]	; (2a550 <__kernel_ram_size+0x158>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2a4f0:	4629      	mov	r1, r5
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   2a4f2:	606b      	str	r3, [r5, #4]
   2a4f4:	4b17      	ldr	r3, [pc, #92]	; (2a554 <__kernel_ram_size+0x15c>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2a4f6:	4818      	ldr	r0, [pc, #96]	; (2a558 <__kernel_ram_size+0x160>)
   2a4f8:	701a      	strb	r2, [r3, #0]
   2a4fa:	2200      	movs	r2, #0
   2a4fc:	2300      	movs	r3, #0
   2a4fe:	f00f f9a5 	bl	3984c <k_delayed_work_submit_to_queue>
	if (err) {
   2a502:	4604      	mov	r4, r0
   2a504:	b130      	cbz	r0, 2a514 <dk_buttons_init+0x11c>
   2a506:	480a      	ldr	r0, [pc, #40]	; (2a530 <__kernel_ram_size+0x138>)
   2a508:	4b08      	ldr	r3, [pc, #32]	; (2a52c <__kernel_ram_size+0x134>)
		LOG_ERR("Cannot add work to workqueue");
   2a50a:	4914      	ldr	r1, [pc, #80]	; (2a55c <__kernel_ram_size+0x164>)
   2a50c:	1ac0      	subs	r0, r0, r3
   2a50e:	08c0      	lsrs	r0, r0, #3
   2a510:	0180      	lsls	r0, r0, #6
   2a512:	e79f      	b.n	2a454 <dk_buttons_init+0x5c>
	dk_read_buttons(NULL, NULL);
   2a514:	4601      	mov	r1, r0
   2a516:	f7ff ff5f 	bl	2a3d8 <dk_read_buttons>
	return 0;
   2a51a:	e78b      	b.n	2a434 <dk_buttons_init+0x3c>
   2a51c:	2001910c 	.word	0x2001910c
   2a520:	00043a50 	.word	0x00043a50
   2a524:	200190fc 	.word	0x200190fc
   2a528:	20019110 	.word	0x20019110
   2a52c:	0004339c 	.word	0x0004339c
   2a530:	00043404 	.word	0x00043404
   2a534:	00047009 	.word	0x00047009
   2a538:	0004703b 	.word	0x0004703b
   2a53c:	00047058 	.word	0x00047058
   2a540:	2001912c 	.word	0x2001912c
   2a544:	00029fe1 	.word	0x00029fe1
   2a548:	00047073 	.word	0x00047073
   2a54c:	200168d0 	.word	0x200168d0
   2a550:	0002a0f9 	.word	0x0002a0f9
   2a554:	2001ec9c 	.word	0x2001ec9c
   2a558:	20018af0 	.word	0x20018af0
   2a55c:	00046fd4 	.word	0x00046fd4

0002a560 <open_socket>:
/* Message queue to return the result in the case of a synchronous call */
K_MSGQ_DEFINE(response_sync, sizeof(struct resp_item), 1, 4);
K_MUTEX_DEFINE(response_sync_get);

static int open_socket(void)
{
   2a560:	b508      	push	{r3, lr}
	return z_impl_zsock_socket(family, type, proto);
   2a562:	f240 2201 	movw	r2, #513	; 0x201
   2a566:	2102      	movs	r1, #2
   2a568:	2066      	movs	r0, #102	; 0x66
   2a56a:	f7fa fac3 	bl	24af4 <z_impl_zsock_socket>
	common_socket_fd = socket(AF_LTE, SOCK_DGRAM, NPROTO_AT);
   2a56e:	4b05      	ldr	r3, [pc, #20]	; (2a584 <open_socket+0x24>)
   2a570:	6018      	str	r0, [r3, #0]

	if (common_socket_fd == -1) {
   2a572:	3001      	adds	r0, #1
   2a574:	d104      	bne.n	2a580 <open_socket+0x20>
		return -errno;
   2a576:	f013 fdb0 	bl	3e0da <__errno>
   2a57a:	6800      	ldr	r0, [r0, #0]
   2a57c:	4240      	negs	r0, r0
	}

	return 0;
}
   2a57e:	bd08      	pop	{r3, pc}
	return 0;
   2a580:	2000      	movs	r0, #0
   2a582:	e7fc      	b.n	2a57e <open_socket+0x1e>
   2a584:	20019158 	.word	0x20019158

0002a588 <at_cmd_driver_init>:
	}
	notification_handler = handler;
}

static int at_cmd_driver_init(const struct device *dev)
{
   2a588:	b530      	push	{r4, r5, lr}
	static bool initialized;

	if (initialized) {
   2a58a:	4d18      	ldr	r5, [pc, #96]	; (2a5ec <at_cmd_driver_init+0x64>)
{
   2a58c:	b089      	sub	sp, #36	; 0x24
	if (initialized) {
   2a58e:	782b      	ldrb	r3, [r5, #0]
   2a590:	bb53      	cbnz	r3, 2a5e8 <at_cmd_driver_init+0x60>

	int err;

	ARG_UNUSED(dev);

	err = open_socket();
   2a592:	f7ff ffe5 	bl	2a560 <open_socket>
	if (err) {
   2a596:	4604      	mov	r4, r0
   2a598:	b168      	cbz	r0, 2a5b6 <at_cmd_driver_init+0x2e>
   2a59a:	4815      	ldr	r0, [pc, #84]	; (2a5f0 <at_cmd_driver_init+0x68>)
   2a59c:	4b15      	ldr	r3, [pc, #84]	; (2a5f4 <at_cmd_driver_init+0x6c>)
		LOG_ERR("Failed to open AT socket (err:%d)", err);
   2a59e:	4622      	mov	r2, r4
   2a5a0:	1ac0      	subs	r0, r0, r3
   2a5a2:	08c0      	lsrs	r0, r0, #3
   2a5a4:	0180      	lsls	r0, r0, #6
   2a5a6:	4914      	ldr	r1, [pc, #80]	; (2a5f8 <at_cmd_driver_init+0x70>)
   2a5a8:	f040 0001 	orr.w	r0, r0, #1
   2a5ac:	f012 fea8 	bl	3d300 <log_string_sync>

	initialized = true;
	LOG_DBG("Common AT socket processing thread created");

	return 0;
}
   2a5b0:	4620      	mov	r0, r4
   2a5b2:	b009      	add	sp, #36	; 0x24
   2a5b4:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2a5b6:	2200      	movs	r2, #0
   2a5b8:	2300      	movs	r3, #0
   2a5ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2a5be:	230a      	movs	r3, #10
   2a5c0:	e9cd 0000 	strd	r0, r0, [sp]
   2a5c4:	e9cd 0302 	strd	r0, r3, [sp, #8]
   2a5c8:	9004      	str	r0, [sp, #16]
   2a5ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2a5ce:	4b0b      	ldr	r3, [pc, #44]	; (2a5fc <at_cmd_driver_init+0x74>)
   2a5d0:	490b      	ldr	r1, [pc, #44]	; (2a600 <at_cmd_driver_init+0x78>)
   2a5d2:	480c      	ldr	r0, [pc, #48]	; (2a604 <at_cmd_driver_init+0x7c>)
   2a5d4:	f00e ffd2 	bl	3957c <z_impl_k_thread_create>
	socket_tid = k_thread_create(&socket_thread, socket_thread_stack,
   2a5d8:	4b0b      	ldr	r3, [pc, #44]	; (2a608 <at_cmd_driver_init+0x80>)
   2a5da:	6018      	str	r0, [r3, #0]
	return z_impl_k_thread_name_set(thread_id, value);
   2a5dc:	490b      	ldr	r1, [pc, #44]	; (2a60c <at_cmd_driver_init+0x84>)
   2a5de:	f017 fa19 	bl	41a14 <z_impl_k_thread_name_set>
	initialized = true;
   2a5e2:	2301      	movs	r3, #1
   2a5e4:	702b      	strb	r3, [r5, #0]
	return 0;
   2a5e6:	e7e3      	b.n	2a5b0 <at_cmd_driver_init+0x28>
		return 0;
   2a5e8:	2400      	movs	r4, #0
   2a5ea:	e7e1      	b.n	2a5b0 <at_cmd_driver_init+0x28>
   2a5ec:	2001f729 	.word	0x2001f729
   2a5f0:	000433b4 	.word	0x000433b4
   2a5f4:	0004339c 	.word	0x0004339c
   2a5f8:	0004709b 	.word	0x0004709b
   2a5fc:	0002a739 	.word	0x0002a739
   2a600:	20021e68 	.word	0x20021e68
   2a604:	20016900 	.word	0x20016900
   2a608:	20019180 	.word	0x20019180
   2a60c:	000470bd 	.word	0x000470bd

0002a610 <complete_cmd>:
{
   2a610:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   2a612:	4c08      	ldr	r4, [pc, #32]	; (2a634 <complete_cmd+0x24>)
   2a614:	f04f 32ff 	mov.w	r2, #4294967295
   2a618:	f04f 33ff 	mov.w	r3, #4294967295
   2a61c:	4620      	mov	r0, r4
   2a61e:	f00d f957 	bl	378d0 <z_impl_k_mutex_lock>
	current_cmd.cmd = NULL;
   2a622:	2200      	movs	r2, #0
   2a624:	4b04      	ldr	r3, [pc, #16]	; (2a638 <complete_cmd+0x28>)
   2a626:	601a      	str	r2, [r3, #0]
	return z_impl_k_mutex_unlock(mutex);
   2a628:	4620      	mov	r0, r4
}
   2a62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a62e:	f00d ba49 	b.w	37ac4 <z_impl_k_mutex_unlock>
   2a632:	bf00      	nop
   2a634:	20015a60 	.word	0x20015a60
   2a638:	2001915c 	.word	0x2001915c

0002a63c <load_cmd_and_write>:
{
   2a63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2a640:	b087      	sub	sp, #28
		if (current_cmd.cmd != NULL ||
   2a642:	4f34      	ldr	r7, [pc, #208]	; (2a714 <load_cmd_and_write+0xd8>)
	return z_impl_k_mutex_lock(mutex, timeout);
   2a644:	f04f 33ff 	mov.w	r3, #4294967295
   2a648:	46b8      	mov	r8, r7
   2a64a:	f04f 32ff 	mov.w	r2, #4294967295
   2a64e:	4832      	ldr	r0, [pc, #200]	; (2a718 <load_cmd_and_write+0xdc>)
   2a650:	f00d f93e 	bl	378d0 <z_impl_k_mutex_lock>
   2a654:	4d31      	ldr	r5, [pc, #196]	; (2a71c <load_cmd_and_write+0xe0>)
   2a656:	4b32      	ldr	r3, [pc, #200]	; (2a720 <load_cmd_and_write+0xe4>)
	return z_impl_k_msgq_get(msgq, data, timeout);
   2a658:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2a734 <load_cmd_and_write+0xf8>
   2a65c:	1aed      	subs	r5, r5, r3
   2a65e:	08ed      	lsrs	r5, r5, #3
   2a660:	683b      	ldr	r3, [r7, #0]
   2a662:	2b00      	cmp	r3, #0
   2a664:	d14f      	bne.n	2a706 <load_cmd_and_write+0xca>
   2a666:	2200      	movs	r2, #0
   2a668:	2300      	movs	r3, #0
   2a66a:	4639      	mov	r1, r7
   2a66c:	4648      	mov	r0, r9
   2a66e:	f00d f881 	bl	37774 <z_impl_k_msgq_get>
   2a672:	4604      	mov	r4, r0
   2a674:	2800      	cmp	r0, #0
   2a676:	d146      	bne.n	2a706 <load_cmd_and_write+0xca>
		ret = at_write(current_cmd.cmd);
   2a678:	6839      	ldr	r1, [r7, #0]
	int bytes_to_send = strlen(cmd);
   2a67a:	4608      	mov	r0, r1
   2a67c:	9103      	str	r1, [sp, #12]
   2a67e:	f7f2 fded 	bl	1d25c <strlen>
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a682:	4b28      	ldr	r3, [pc, #160]	; (2a724 <load_cmd_and_write+0xe8>)
	int bytes_to_send = strlen(cmd);
   2a684:	4606      	mov	r6, r0
	bytes_sent = send(common_socket_fd, cmd, bytes_to_send, 0);
   2a686:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   2a688:	4632      	mov	r2, r6
   2a68a:	9903      	ldr	r1, [sp, #12]
   2a68c:	4623      	mov	r3, r4
   2a68e:	e9cd 4400 	strd	r4, r4, [sp]
   2a692:	f013 f9cd 	bl	3da30 <z_impl_zsock_sendto>
	if (bytes_sent == -1) {
   2a696:	1c41      	adds	r1, r0, #1
   2a698:	4602      	mov	r2, r0
   2a69a:	d129      	bne.n	2a6f0 <load_cmd_and_write+0xb4>
		LOG_ERR("Failed to send AT command (err:%d)", errno);
   2a69c:	f013 fd1d 	bl	3e0da <__errno>
   2a6a0:	01ac      	lsls	r4, r5, #6
   2a6a2:	f044 0401 	orr.w	r4, r4, #1
   2a6a6:	6802      	ldr	r2, [r0, #0]
   2a6a8:	491f      	ldr	r1, [pc, #124]	; (2a728 <load_cmd_and_write+0xec>)
   2a6aa:	4620      	mov	r0, r4
   2a6ac:	f012 fe28 	bl	3d300 <log_string_sync>
		return -errno;
   2a6b0:	f013 fd13 	bl	3e0da <__errno>
   2a6b4:	6804      	ldr	r4, [r0, #0]
   2a6b6:	4264      	negs	r4, r4
		if (current_cmd.flags & AT_CMD_BUF_CMD) {
   2a6b8:	f898 3010 	ldrb.w	r3, [r8, #16]
   2a6bc:	07da      	lsls	r2, r3, #31
   2a6be:	d503      	bpl.n	2a6c8 <load_cmd_and_write+0x8c>
			k_free(current_cmd.cmd);
   2a6c0:	f8d8 0000 	ldr.w	r0, [r8]
   2a6c4:	f017 faa8 	bl	41c18 <k_free>
		if (ret != 0) {
   2a6c8:	b1ec      	cbz	r4, 2a706 <load_cmd_and_write+0xca>
			resp.state = AT_CMD_ERROR_WRITE;
   2a6ca:	2305      	movs	r3, #5
   2a6cc:	f88d 3014 	strb.w	r3, [sp, #20]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a6d0:	f898 3010 	ldrb.w	r3, [r8, #16]
			resp.code = ret;
   2a6d4:	9404      	str	r4, [sp, #16]
			if (current_cmd.flags & AT_CMD_SYNC) {
   2a6d6:	079b      	lsls	r3, r3, #30
   2a6d8:	d507      	bpl.n	2a6ea <load_cmd_and_write+0xae>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a6da:	f04f 32ff 	mov.w	r2, #4294967295
   2a6de:	f04f 33ff 	mov.w	r3, #4294967295
   2a6e2:	4812      	ldr	r0, [pc, #72]	; (2a72c <load_cmd_and_write+0xf0>)
   2a6e4:	a904      	add	r1, sp, #16
   2a6e6:	f00c ffa3 	bl	37630 <z_impl_k_msgq_put>
			complete_cmd();
   2a6ea:	f7ff ff91 	bl	2a610 <complete_cmd>
	} while (ret != 0);
   2a6ee:	e7b7      	b.n	2a660 <load_cmd_and_write+0x24>
	if (bytes_sent != bytes_to_send) {
   2a6f0:	4286      	cmp	r6, r0
   2a6f2:	d0e1      	beq.n	2a6b8 <load_cmd_and_write+0x7c>
		LOG_WRN("Bytes sent (%d) was not the same as expected (%d)",
   2a6f4:	ea4f 1c85 	mov.w	ip, r5, lsl #6
   2a6f8:	4633      	mov	r3, r6
   2a6fa:	490d      	ldr	r1, [pc, #52]	; (2a730 <load_cmd_and_write+0xf4>)
   2a6fc:	f04c 0002 	orr.w	r0, ip, #2
   2a700:	f012 fdfe 	bl	3d300 <log_string_sync>
   2a704:	e7d8      	b.n	2a6b8 <load_cmd_and_write+0x7c>
	return z_impl_k_mutex_unlock(mutex);
   2a706:	4804      	ldr	r0, [pc, #16]	; (2a718 <load_cmd_and_write+0xdc>)
   2a708:	f00d f9dc 	bl	37ac4 <z_impl_k_mutex_unlock>
}
   2a70c:	b007      	add	sp, #28
   2a70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2a712:	bf00      	nop
   2a714:	2001915c 	.word	0x2001915c
   2a718:	20015a60 	.word	0x20015a60
   2a71c:	000433b4 	.word	0x000433b4
   2a720:	0004339c 	.word	0x0004339c
   2a724:	20019158 	.word	0x20019158
   2a728:	000470d2 	.word	0x000470d2
   2a72c:	20015b2c 	.word	0x20015b2c
   2a730:	000470f5 	.word	0x000470f5
   2a734:	20015b00 	.word	0x20015b00

0002a738 <socket_thread_fn>:
{
   2a738:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a73c:	f8df 9260 	ldr.w	r9, [pc, #608]	; 2a9a0 <socket_thread_fn+0x268>
   2a740:	4f83      	ldr	r7, [pc, #524]	; (2a950 <socket_thread_fn+0x218>)
   2a742:	46ca      	mov	sl, r9
   2a744:	4b83      	ldr	r3, [pc, #524]	; (2a954 <socket_thread_fn+0x21c>)
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   2a746:	4e84      	ldr	r6, [pc, #528]	; (2a958 <socket_thread_fn+0x220>)
   2a748:	1aff      	subs	r7, r7, r3
   2a74a:	08ff      	lsrs	r7, r7, #3
		load_cmd_and_write();
   2a74c:	f7ff ff76 	bl	2a63c <load_cmd_and_write>
		bytes_read = recv(common_socket_fd, buf, sizeof(buf), 0);
   2a750:	f8d9 0000 	ldr.w	r0, [r9]
   2a754:	2500      	movs	r5, #0
   2a756:	f640 228c 	movw	r2, #2700	; 0xa8c
   2a75a:	462b      	mov	r3, r5
   2a75c:	e9cd 5500 	strd	r5, r5, [sp]
   2a760:	497d      	ldr	r1, [pc, #500]	; (2a958 <socket_thread_fn+0x220>)
   2a762:	f013 f998 	bl	3da96 <z_impl_zsock_recvfrom>
		ret.code  = 0;
   2a766:	4c7d      	ldr	r4, [pc, #500]	; (2a95c <socket_thread_fn+0x224>)
		if (bytes_read < 0) {
   2a768:	f1b0 0800 	subs.w	r8, r0, #0
		ret.code  = 0;
   2a76c:	6025      	str	r5, [r4, #0]
		ret.state = AT_CMD_OK;
   2a76e:	7125      	strb	r5, [r4, #4]
		if (bytes_read < 0) {
   2a770:	da6c      	bge.n	2a84c <socket_thread_fn+0x114>
			if (errno == EHOSTDOWN) {
   2a772:	f013 fcb2 	bl	3e0da <__errno>
   2a776:	6803      	ldr	r3, [r0, #0]
   2a778:	2b75      	cmp	r3, #117	; 0x75
   2a77a:	d122      	bne.n	2a7c2 <socket_thread_fn+0x8a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a77c:	2301      	movs	r3, #1
   2a77e:	4c78      	ldr	r4, [pc, #480]	; (2a960 <socket_thread_fn+0x228>)
   2a780:	e8d4 2fef 	ldaex	r2, [r4]
   2a784:	e8c4 3fe1 	stlex	r1, r3, [r4]
   2a788:	2900      	cmp	r1, #0
   2a78a:	d1f9      	bne.n	2a780 <socket_thread_fn+0x48>
				close(common_socket_fd);
   2a78c:	f8d9 0000 	ldr.w	r0, [r9]
	return z_impl_zsock_close(sock);
   2a790:	f013 f921 	bl	3d9d6 <z_impl_zsock_close>
				nrf_modem_lib_shutdown_wait();
   2a794:	f7fe fc48 	bl	29028 <nrf_modem_lib_shutdown_wait>
   2a798:	e8d4 3fef 	ldaex	r3, [r4]
   2a79c:	e8c4 5fe2 	stlex	r2, r5, [r4]
   2a7a0:	2a00      	cmp	r2, #0
   2a7a2:	d1f9      	bne.n	2a798 <socket_thread_fn+0x60>
				if (open_socket() != 0) {
   2a7a4:	f7ff fedc 	bl	2a560 <open_socket>
   2a7a8:	2800      	cmp	r0, #0
   2a7aa:	d0cf      	beq.n	2a74c <socket_thread_fn+0x14>
					LOG_ERR("Failed to open AT socket "
   2a7ac:	f013 fc95 	bl	3e0da <__errno>
   2a7b0:	01bc      	lsls	r4, r7, #6
   2a7b2:	f044 0401 	orr.w	r4, r4, #1
   2a7b6:	6802      	ldr	r2, [r0, #0]
   2a7b8:	496a      	ldr	r1, [pc, #424]	; (2a964 <socket_thread_fn+0x22c>)
   2a7ba:	4620      	mov	r0, r4
   2a7bc:	f012 fda0 	bl	3d300 <log_string_sync>
   2a7c0:	e7c4      	b.n	2a74c <socket_thread_fn+0x14>
				LOG_ERR("AT socket recv failed with err %d",
   2a7c2:	f013 fc8a 	bl	3e0da <__errno>
   2a7c6:	01bd      	lsls	r5, r7, #6
   2a7c8:	f045 0801 	orr.w	r8, r5, #1
   2a7cc:	6802      	ldr	r2, [r0, #0]
   2a7ce:	4966      	ldr	r1, [pc, #408]	; (2a968 <socket_thread_fn+0x230>)
   2a7d0:	4640      	mov	r0, r8
   2a7d2:	f012 fd95 	bl	3d300 <log_string_sync>
			if ((close(common_socket_fd) == 0) &&
   2a7d6:	f8d9 0000 	ldr.w	r0, [r9]
   2a7da:	f013 f8fc 	bl	3d9d6 <z_impl_zsock_close>
   2a7de:	bb28      	cbnz	r0, 2a82c <socket_thread_fn+0xf4>
			    (open_socket() == 0)) {
   2a7e0:	f7ff febe 	bl	2a560 <open_socket>
			if ((close(common_socket_fd) == 0) &&
   2a7e4:	bb10      	cbnz	r0, 2a82c <socket_thread_fn+0xf4>
				LOG_INF("AT socket recovered");
   2a7e6:	4961      	ldr	r1, [pc, #388]	; (2a96c <socket_thread_fn+0x234>)
   2a7e8:	f045 0003 	orr.w	r0, r5, #3
   2a7ec:	f012 fd88 	bl	3d300 <log_string_sync>
				ret.state = AT_CMD_ERROR_READ;
   2a7f0:	2306      	movs	r3, #6
   2a7f2:	7123      	strb	r3, [r4, #4]
				ret.code  = -errno;
   2a7f4:	f013 fc71 	bl	3e0da <__errno>
   2a7f8:	6803      	ldr	r3, [r0, #0]
   2a7fa:	425b      	negs	r3, r3
			ret.code  = -EBADMSG;
   2a7fc:	6023      	str	r3, [r4, #0]
		if (current_cmd.cmd != NULL &&
   2a7fe:	4b5c      	ldr	r3, [pc, #368]	; (2a970 <socket_thread_fn+0x238>)
   2a800:	681a      	ldr	r2, [r3, #0]
   2a802:	b16a      	cbz	r2, 2a820 <socket_thread_fn+0xe8>
   2a804:	7c1b      	ldrb	r3, [r3, #16]
   2a806:	079b      	lsls	r3, r3, #30
   2a808:	d50a      	bpl.n	2a820 <socket_thread_fn+0xe8>
		    current_cmd.flags & AT_CMD_SYNC &&
   2a80a:	7923      	ldrb	r3, [r4, #4]
   2a80c:	2b07      	cmp	r3, #7
   2a80e:	d09d      	beq.n	2a74c <socket_thread_fn+0x14>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2a810:	f04f 32ff 	mov.w	r2, #4294967295
   2a814:	f04f 33ff 	mov.w	r3, #4294967295
   2a818:	4950      	ldr	r1, [pc, #320]	; (2a95c <socket_thread_fn+0x224>)
   2a81a:	4856      	ldr	r0, [pc, #344]	; (2a974 <socket_thread_fn+0x23c>)
   2a81c:	f00c ff08 	bl	37630 <z_impl_k_msgq_put>
		if (ret.state != AT_CMD_NOTIFICATION) {
   2a820:	7923      	ldrb	r3, [r4, #4]
   2a822:	2b07      	cmp	r3, #7
   2a824:	d092      	beq.n	2a74c <socket_thread_fn+0x14>
			complete_cmd();
   2a826:	f7ff fef3 	bl	2a610 <complete_cmd>
   2a82a:	e78f      	b.n	2a74c <socket_thread_fn+0x14>
			LOG_ERR("Unrecoverable reception error (err: %d), "
   2a82c:	f013 fc55 	bl	3e0da <__errno>
   2a830:	f045 0501 	orr.w	r5, r5, #1
   2a834:	6802      	ldr	r2, [r0, #0]
   2a836:	4950      	ldr	r1, [pc, #320]	; (2a978 <socket_thread_fn+0x240>)
   2a838:	4628      	mov	r0, r5
   2a83a:	f012 fd61 	bl	3d300 <log_string_sync>
			close(common_socket_fd);
   2a83e:	f8da 0000 	ldr.w	r0, [sl]
}
   2a842:	b002      	add	sp, #8
   2a844:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a848:	f013 b8c5 	b.w	3d9d6 <z_impl_zsock_close>
		} else if (bytes_read == 0) {
   2a84c:	d10a      	bne.n	2a864 <socket_thread_fn+0x12c>
			LOG_ERR("AT message empty");
   2a84e:	01b8      	lsls	r0, r7, #6
   2a850:	494a      	ldr	r1, [pc, #296]	; (2a97c <socket_thread_fn+0x244>)
   2a852:	f040 0001 	orr.w	r0, r0, #1
   2a856:	f012 fd53 	bl	3d300 <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2a85a:	2306      	movs	r3, #6
   2a85c:	7123      	strb	r3, [r4, #4]
			ret.code  = -EBADMSG;
   2a85e:	f06f 034c 	mvn.w	r3, #76	; 0x4c
   2a862:	e7cb      	b.n	2a7fc <socket_thread_fn+0xc4>
		} else if (buf[bytes_read - 1] != '\0') {
   2a864:	eb06 0308 	add.w	r3, r6, r8
   2a868:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2a86c:	b153      	cbz	r3, 2a884 <socket_thread_fn+0x14c>
			LOG_ERR("AT message too large for reception buffer or "
   2a86e:	01b8      	lsls	r0, r7, #6
   2a870:	4943      	ldr	r1, [pc, #268]	; (2a980 <socket_thread_fn+0x248>)
   2a872:	f040 0001 	orr.w	r0, r0, #1
   2a876:	f012 fd43 	bl	3d300 <log_string_sync>
			ret.state = AT_CMD_ERROR_READ;
   2a87a:	2306      	movs	r3, #6
   2a87c:	7123      	strb	r3, [r4, #4]
			ret.code  = -ENOBUFS;
   2a87e:	f06f 0368 	mvn.w	r3, #104	; 0x68
   2a882:	e7bb      	b.n	2a7fc <socket_thread_fn+0xc4>
	ret->state = AT_CMD_NOTIFICATION;
   2a884:	2307      	movs	r3, #7
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a886:	483f      	ldr	r0, [pc, #252]	; (2a984 <socket_thread_fn+0x24c>)
	ret->state = AT_CMD_NOTIFICATION;
   2a888:	7123      	strb	r3, [r4, #4]
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a88a:	f7f2 fce7 	bl	1d25c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_OK_STR);
   2a88e:	f1a8 0505 	sub.w	r5, r8, #5
   2a892:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_OK_STR, strlen(AT_CMD_OK_STR));
   2a894:	4602      	mov	r2, r0
   2a896:	493b      	ldr	r1, [pc, #236]	; (2a984 <socket_thread_fn+0x24c>)
   2a898:	4628      	mov	r0, r5
   2a89a:	f017 fc09 	bl	420b0 <strncmp>
		if (match) {
   2a89e:	b9c0      	cbnz	r0, 2a8d2 <socket_thread_fn+0x19a>
			ret->state = AT_CMD_OK;
   2a8a0:	7120      	strb	r0, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a8a2:	6020      	str	r0, [r4, #0]
		buf[new_len++] = '\0';
   2a8a4:	2300      	movs	r3, #0
		new_len = tmpstr - buf;
   2a8a6:	1baa      	subs	r2, r5, r6
		buf[new_len++] = '\0';
   2a8a8:	3201      	adds	r2, #1
   2a8aa:	702b      	strb	r3, [r5, #0]
		if (current_cmd.cmd != NULL &&
   2a8ac:	4d30      	ldr	r5, [pc, #192]	; (2a970 <socket_thread_fn+0x238>)
   2a8ae:	682b      	ldr	r3, [r5, #0]
   2a8b0:	2b00      	cmp	r3, #0
   2a8b2:	d043      	beq.n	2a93c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   2a8b4:	6868      	ldr	r0, [r5, #4]
		if (current_cmd.cmd != NULL &&
   2a8b6:	2800      	cmp	r0, #0
   2a8b8:	d040      	beq.n	2a93c <socket_thread_fn+0x204>
		    current_cmd.resp != NULL &&
   2a8ba:	7923      	ldrb	r3, [r4, #4]
   2a8bc:	2b07      	cmp	r3, #7
   2a8be:	d12e      	bne.n	2a91e <socket_thread_fn+0x1e6>
		    notification_handler != NULL) {
   2a8c0:	4b31      	ldr	r3, [pc, #196]	; (2a988 <socket_thread_fn+0x250>)
   2a8c2:	681b      	ldr	r3, [r3, #0]
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a8c4:	b913      	cbnz	r3, 2a8cc <socket_thread_fn+0x194>
		} else if (current_cmd.callback != NULL) {
   2a8c6:	68ab      	ldr	r3, [r5, #8]
   2a8c8:	2b00      	cmp	r3, #0
   2a8ca:	d098      	beq.n	2a7fe <socket_thread_fn+0xc6>
			current_cmd.callback(buf);
   2a8cc:	4630      	mov	r0, r6
   2a8ce:	4798      	blx	r3
   2a8d0:	e795      	b.n	2a7fe <socket_thread_fn+0xc6>
		tmpstr = strstr(buf, AT_CMD_CMS_STR);
   2a8d2:	4630      	mov	r0, r6
   2a8d4:	492d      	ldr	r1, [pc, #180]	; (2a98c <socket_thread_fn+0x254>)
   2a8d6:	f017 fc1d 	bl	42114 <strstr>
		if (tmpstr) {
   2a8da:	4605      	mov	r5, r0
   2a8dc:	b128      	cbz	r0, 2a8ea <socket_thread_fn+0x1b2>
			ret->state = AT_CMD_ERROR_CMS;
   2a8de:	2302      	movs	r3, #2
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a8e0:	482b      	ldr	r0, [pc, #172]	; (2a990 <socket_thread_fn+0x258>)
			ret->state = AT_CMD_ERROR_CMS;
   2a8e2:	7123      	strb	r3, [r4, #4]
			ret->code = atoi(&buf[ARRAY_SIZE(AT_CMD_CMS_STR) - 1]);
   2a8e4:	f017 f9bb 	bl	41c5e <atoi>
   2a8e8:	e7db      	b.n	2a8a2 <socket_thread_fn+0x16a>
		tmpstr = strstr(buf, AT_CMD_CME_STR);
   2a8ea:	4630      	mov	r0, r6
   2a8ec:	4929      	ldr	r1, [pc, #164]	; (2a994 <socket_thread_fn+0x25c>)
   2a8ee:	f017 fc11 	bl	42114 <strstr>
		if (tmpstr) {
   2a8f2:	4605      	mov	r5, r0
   2a8f4:	b108      	cbz	r0, 2a8fa <socket_thread_fn+0x1c2>
			ret->state = AT_CMD_ERROR_CME;
   2a8f6:	2303      	movs	r3, #3
   2a8f8:	e7f2      	b.n	2a8e0 <socket_thread_fn+0x1a8>
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a8fa:	4827      	ldr	r0, [pc, #156]	; (2a998 <socket_thread_fn+0x260>)
   2a8fc:	f7f2 fcae 	bl	1d25c <strlen>
		tmpstr = buf + bytes_read - ARRAY_SIZE(AT_CMD_ERROR_STR);
   2a900:	f1a8 0508 	sub.w	r5, r8, #8
   2a904:	4435      	add	r5, r6
		match = !strncmp(tmpstr, AT_CMD_ERROR_STR, strlen(AT_CMD_ERROR_STR));
   2a906:	4602      	mov	r2, r0
   2a908:	4923      	ldr	r1, [pc, #140]	; (2a998 <socket_thread_fn+0x260>)
   2a90a:	4628      	mov	r0, r5
   2a90c:	f017 fbd0 	bl	420b0 <strncmp>
		if (match) {
   2a910:	b9c0      	cbnz	r0, 2a944 <socket_thread_fn+0x20c>
			ret->state = AT_CMD_ERROR;
   2a912:	2301      	movs	r3, #1
   2a914:	7123      	strb	r3, [r4, #4]
			ret->code  = -ENOEXEC;
   2a916:	f06f 0307 	mvn.w	r3, #7
   2a91a:	6023      	str	r3, [r4, #0]
			break;
   2a91c:	e7c2      	b.n	2a8a4 <socket_thread_fn+0x16c>
			if (current_cmd.resp_size < payload_len) {
   2a91e:	68eb      	ldr	r3, [r5, #12]
   2a920:	429a      	cmp	r2, r3
   2a922:	d908      	bls.n	2a936 <socket_thread_fn+0x1fe>
				LOG_ERR("Response buffer not large enough");
   2a924:	01b8      	lsls	r0, r7, #6
   2a926:	491d      	ldr	r1, [pc, #116]	; (2a99c <socket_thread_fn+0x264>)
   2a928:	f040 0001 	orr.w	r0, r0, #1
   2a92c:	f012 fce8 	bl	3d300 <log_string_sync>
				ret.code  = -EMSGSIZE;
   2a930:	f06f 0379 	mvn.w	r3, #121	; 0x79
   2a934:	e762      	b.n	2a7fc <socket_thread_fn+0xc4>
   2a936:	4631      	mov	r1, r6
   2a938:	f017 f9b1 	bl	41c9e <memcpy>
		if (ret.state == AT_CMD_NOTIFICATION &&
   2a93c:	7923      	ldrb	r3, [r4, #4]
   2a93e:	2b07      	cmp	r3, #7
   2a940:	d1c1      	bne.n	2a8c6 <socket_thread_fn+0x18e>
   2a942:	e7bd      	b.n	2a8c0 <socket_thread_fn+0x188>
		new_len = strlen(buf) + 1;
   2a944:	4630      	mov	r0, r6
   2a946:	f7f2 fc89 	bl	1d25c <strlen>
   2a94a:	1c42      	adds	r2, r0, #1
   2a94c:	e7ae      	b.n	2a8ac <socket_thread_fn+0x174>
   2a94e:	bf00      	nop
   2a950:	000433b4 	.word	0x000433b4
   2a954:	0004339c 	.word	0x0004339c
   2a958:	2001ec9d 	.word	0x2001ec9d
   2a95c:	20019174 	.word	0x20019174
   2a960:	2001917c 	.word	0x2001917c
   2a964:	00047127 	.word	0x00047127
   2a968:	00047162 	.word	0x00047162
   2a96c:	00047184 	.word	0x00047184
   2a970:	2001915c 	.word	0x2001915c
   2a974:	20015b2c 	.word	0x20015b2c
   2a978:	00047198 	.word	0x00047198
   2a97c:	000471cf 	.word	0x000471cf
   2a980:	000471e0 	.word	0x000471e0
   2a984:	000446ee 	.word	0x000446ee
   2a988:	20019170 	.word	0x20019170
   2a98c:	0004722b 	.word	0x0004722b
   2a990:	2001eca8 	.word	0x2001eca8
   2a994:	00047237 	.word	0x00047237
   2a998:	00047243 	.word	0x00047243
   2a99c:	0004724b 	.word	0x0004724b
   2a9a0:	20019158 	.word	0x20019158

0002a9a4 <at_cmd_write>:
{
   2a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9a6:	4605      	mov	r5, r0
   2a9a8:	460f      	mov	r7, r1
   2a9aa:	4616      	mov	r6, r2
   2a9ac:	461c      	mov	r4, r3
   2a9ae:	b089      	sub	sp, #36	; 0x24
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a9b0:	4b3b      	ldr	r3, [pc, #236]	; (2aaa0 <at_cmd_write+0xfc>)
   2a9b2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&shutdown_mode) == 1) {
   2a9b6:	2b01      	cmp	r3, #1
   2a9b8:	d06f      	beq.n	2aa9a <at_cmd_write+0xf6>
	return z_impl_k_current_get();
   2a9ba:	f00e fc75 	bl	392a8 <z_impl_k_current_get>
	__ASSERT(k_current_get() != socket_tid,
   2a9be:	4b39      	ldr	r3, [pc, #228]	; (2aaa4 <at_cmd_write+0x100>)
   2a9c0:	681b      	ldr	r3, [r3, #0]
   2a9c2:	4283      	cmp	r3, r0
   2a9c4:	d10e      	bne.n	2a9e4 <at_cmd_write+0x40>
   2a9c6:	4938      	ldr	r1, [pc, #224]	; (2aaa8 <at_cmd_write+0x104>)
   2a9c8:	f44f 73c1 	mov.w	r3, #386	; 0x182
   2a9cc:	4a37      	ldr	r2, [pc, #220]	; (2aaac <at_cmd_write+0x108>)
   2a9ce:	4838      	ldr	r0, [pc, #224]	; (2aab0 <at_cmd_write+0x10c>)
   2a9d0:	f012 f9d1 	bl	3cd76 <printk>
   2a9d4:	4837      	ldr	r0, [pc, #220]	; (2aab4 <at_cmd_write+0x110>)
   2a9d6:	f012 f9ce 	bl	3cd76 <printk>
   2a9da:	f44f 71c1 	mov.w	r1, #386	; 0x182
   2a9de:	4833      	ldr	r0, [pc, #204]	; (2aaac <at_cmd_write+0x108>)
   2a9e0:	f012 fc7d 	bl	3d2de <assert_post_action>
	if (cmd == NULL) {
   2a9e4:	b155      	cbz	r5, 2a9fc <at_cmd_write+0x58>
   2a9e6:	1e6a      	subs	r2, r5, #1
	for (const char *c = cmd; *c != '\0'; c++) {
   2a9e8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   2a9ec:	b9c3      	cbnz	r3, 2aa20 <at_cmd_write+0x7c>
   2a9ee:	4832      	ldr	r0, [pc, #200]	; (2aab8 <at_cmd_write+0x114>)
   2a9f0:	4b32      	ldr	r3, [pc, #200]	; (2aabc <at_cmd_write+0x118>)
		LOG_ERR("Invalid command");
   2a9f2:	4933      	ldr	r1, [pc, #204]	; (2aac0 <at_cmd_write+0x11c>)
   2a9f4:	1ac0      	subs	r0, r0, r3
   2a9f6:	08c0      	lsrs	r0, r0, #3
   2a9f8:	0180      	lsls	r0, r0, #6
   2a9fa:	e005      	b.n	2aa08 <at_cmd_write+0x64>
   2a9fc:	482e      	ldr	r0, [pc, #184]	; (2aab8 <at_cmd_write+0x114>)
   2a9fe:	4b2f      	ldr	r3, [pc, #188]	; (2aabc <at_cmd_write+0x118>)
		LOG_ERR("cmd is NULL");
   2aa00:	4930      	ldr	r1, [pc, #192]	; (2aac4 <at_cmd_write+0x120>)
   2aa02:	1ac0      	subs	r0, r0, r3
   2aa04:	08c0      	lsrs	r0, r0, #3
   2aa06:	0180      	lsls	r0, r0, #6
   2aa08:	f040 0001 	orr.w	r0, r0, #1
   2aa0c:	f012 fc78 	bl	3d300 <log_string_sync>
		if (state) {
   2aa10:	b91c      	cbnz	r4, 2aa1a <at_cmd_write+0x76>
		return -EINVAL;
   2aa12:	f06f 0015 	mvn.w	r0, #21
}
   2aa16:	b009      	add	sp, #36	; 0x24
   2aa18:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*state = AT_CMD_ERROR_QUEUE;
   2aa1a:	2304      	movs	r3, #4
   2aa1c:	7023      	strb	r3, [r4, #0]
   2aa1e:	e7f8      	b.n	2aa12 <at_cmd_write+0x6e>
		if (*c > ' ') {
   2aa20:	2b20      	cmp	r3, #32
   2aa22:	d9e1      	bls.n	2a9e8 <at_cmd_write+0x44>
	command.callback = NULL;
   2aa24:	2300      	movs	r3, #0
   2aa26:	9305      	str	r3, [sp, #20]
	command.flags = AT_CMD_SYNC;
   2aa28:	2302      	movs	r3, #2
	command.resp = buf;
   2aa2a:	e9cd 5703 	strd	r5, r7, [sp, #12]
	command.resp_size = buf_len;
   2aa2e:	9606      	str	r6, [sp, #24]
	command.flags = AT_CMD_SYNC;
   2aa30:	f88d 301c 	strb.w	r3, [sp, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   2aa34:	f04f 32ff 	mov.w	r2, #4294967295
   2aa38:	f04f 33ff 	mov.w	r3, #4294967295
   2aa3c:	4822      	ldr	r0, [pc, #136]	; (2aac8 <at_cmd_write+0x124>)
   2aa3e:	f00c ff47 	bl	378d0 <z_impl_k_mutex_lock>
	return z_impl_k_msgq_put(msgq, data, timeout);
   2aa42:	f04f 32ff 	mov.w	r2, #4294967295
   2aa46:	f04f 33ff 	mov.w	r3, #4294967295
   2aa4a:	4820      	ldr	r0, [pc, #128]	; (2aacc <at_cmd_write+0x128>)
   2aa4c:	a903      	add	r1, sp, #12
   2aa4e:	f00c fdef 	bl	37630 <z_impl_k_msgq_put>
	ret.code = k_msgq_put(&commands, &command, K_FOREVER);
   2aa52:	9001      	str	r0, [sp, #4]
	if (ret.code) {
   2aa54:	b178      	cbz	r0, 2aa76 <at_cmd_write+0xd2>
   2aa56:	4a19      	ldr	r2, [pc, #100]	; (2aabc <at_cmd_write+0x118>)
   2aa58:	4b17      	ldr	r3, [pc, #92]	; (2aab8 <at_cmd_write+0x114>)
		LOG_ERR("Could not enqueue cmd, error %d", ret.code);
   2aa5a:	491d      	ldr	r1, [pc, #116]	; (2aad0 <at_cmd_write+0x12c>)
   2aa5c:	1a9b      	subs	r3, r3, r2
   2aa5e:	08db      	lsrs	r3, r3, #3
   2aa60:	019b      	lsls	r3, r3, #6
   2aa62:	4602      	mov	r2, r0
   2aa64:	f043 0001 	orr.w	r0, r3, #1
   2aa68:	f012 fc4a 	bl	3d300 <log_string_sync>
		if (state) {
   2aa6c:	b10c      	cbz	r4, 2aa72 <at_cmd_write+0xce>
			*state = AT_CMD_ERROR_QUEUE;
   2aa6e:	2304      	movs	r3, #4
		*state = ret.state;
   2aa70:	7023      	strb	r3, [r4, #0]
	return ret.code;
   2aa72:	9801      	ldr	r0, [sp, #4]
   2aa74:	e7cf      	b.n	2aa16 <at_cmd_write+0x72>
	load_cmd_and_write();
   2aa76:	f7ff fde1 	bl	2a63c <load_cmd_and_write>
	return z_impl_k_msgq_get(msgq, data, timeout);
   2aa7a:	f04f 32ff 	mov.w	r2, #4294967295
   2aa7e:	f04f 33ff 	mov.w	r3, #4294967295
   2aa82:	a901      	add	r1, sp, #4
   2aa84:	4813      	ldr	r0, [pc, #76]	; (2aad4 <at_cmd_write+0x130>)
   2aa86:	f00c fe75 	bl	37774 <z_impl_k_msgq_get>
	return z_impl_k_mutex_unlock(mutex);
   2aa8a:	480f      	ldr	r0, [pc, #60]	; (2aac8 <at_cmd_write+0x124>)
   2aa8c:	f00d f81a 	bl	37ac4 <z_impl_k_mutex_unlock>
	if (state) {
   2aa90:	2c00      	cmp	r4, #0
   2aa92:	d0ee      	beq.n	2aa72 <at_cmd_write+0xce>
		*state = ret.state;
   2aa94:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2aa98:	e7ea      	b.n	2aa70 <at_cmd_write+0xcc>
		return -EHOSTDOWN;
   2aa9a:	f06f 0074 	mvn.w	r0, #116	; 0x74
   2aa9e:	e7ba      	b.n	2aa16 <at_cmd_write+0x72>
   2aaa0:	2001917c 	.word	0x2001917c
   2aaa4:	20019180 	.word	0x20019180
   2aaa8:	000472ac 	.word	0x000472ac
   2aaac:	00047288 	.word	0x00047288
   2aab0:	00044dbf 	.word	0x00044dbf
   2aab4:	000472ca 	.word	0x000472ca
   2aab8:	000433b4 	.word	0x000433b4
   2aabc:	0004339c 	.word	0x0004339c
   2aac0:	00047278 	.word	0x00047278
   2aac4:	0004726c 	.word	0x0004726c
   2aac8:	20015ab0 	.word	0x20015ab0
   2aacc:	20015b00 	.word	0x20015b00
   2aad0:	000472fa 	.word	0x000472fa
   2aad4:	20015b2c 	.word	0x20015b2c

0002aad8 <at_cmd_set_notification_handler>:
{
   2aad8:	b538      	push	{r3, r4, r5, lr}
	if (notification_handler != NULL && handler != notification_handler) {
   2aada:	4c09      	ldr	r4, [pc, #36]	; (2ab00 <at_cmd_set_notification_handler+0x28>)
{
   2aadc:	4605      	mov	r5, r0
	if (notification_handler != NULL && handler != notification_handler) {
   2aade:	6822      	ldr	r2, [r4, #0]
   2aae0:	b15a      	cbz	r2, 2aafa <at_cmd_set_notification_handler+0x22>
   2aae2:	4282      	cmp	r2, r0
   2aae4:	d009      	beq.n	2aafa <at_cmd_set_notification_handler+0x22>
   2aae6:	4807      	ldr	r0, [pc, #28]	; (2ab04 <at_cmd_set_notification_handler+0x2c>)
   2aae8:	4b07      	ldr	r3, [pc, #28]	; (2ab08 <at_cmd_set_notification_handler+0x30>)
		LOG_WRN("Forgetting prior notification handler %p",
   2aaea:	4908      	ldr	r1, [pc, #32]	; (2ab0c <at_cmd_set_notification_handler+0x34>)
   2aaec:	1a1b      	subs	r3, r3, r0
   2aaee:	08db      	lsrs	r3, r3, #3
   2aaf0:	019b      	lsls	r3, r3, #6
   2aaf2:	f043 0002 	orr.w	r0, r3, #2
   2aaf6:	f012 fc03 	bl	3d300 <log_string_sync>
	notification_handler = handler;
   2aafa:	6025      	str	r5, [r4, #0]
}
   2aafc:	bd38      	pop	{r3, r4, r5, pc}
   2aafe:	bf00      	nop
   2ab00:	20019170 	.word	0x20019170
   2ab04:	0004339c 	.word	0x0004339c
   2ab08:	000433b4 	.word	0x000433b4
   2ab0c:	0004731a 	.word	0x0004731a

0002ab10 <find_node>:
static struct notif_handler *find_node(struct notif_handler **prev_out,
	void *ctx, at_notif_handler_t handler)
{
	struct notif_handler *prev = NULL, *curr, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ab10:	4b0f      	ldr	r3, [pc, #60]	; (2ab50 <find_node+0x40>)
{
   2ab12:	b570      	push	{r4, r5, r6, lr}
   2ab14:	4604      	mov	r4, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ab16:	6818      	ldr	r0, [r3, #0]
   2ab18:	b170      	cbz	r0, 2ab38 <find_node+0x28>
   2ab1a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ab1c:	4603      	mov	r3, r0
   2ab1e:	2d00      	cmp	r5, #0
   2ab20:	4628      	mov	r0, r5
   2ab22:	bf38      	it	cc
   2ab24:	2000      	movcc	r0, #0
   2ab26:	2500      	movs	r5, #0
		if (curr->ctx == ctx && curr->handler == handler) {
   2ab28:	685e      	ldr	r6, [r3, #4]
   2ab2a:	428e      	cmp	r6, r1
   2ab2c:	d105      	bne.n	2ab3a <find_node+0x2a>
   2ab2e:	689e      	ldr	r6, [r3, #8]
   2ab30:	4296      	cmp	r6, r2
   2ab32:	d102      	bne.n	2ab3a <find_node+0x2a>
			*prev_out = prev;
			return curr;
   2ab34:	4618      	mov	r0, r3
			*prev_out = prev;
   2ab36:	6025      	str	r5, [r4, #0]
		}
		prev = curr;
	}
	return NULL;
}
   2ab38:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2ab3a:	2800      	cmp	r0, #0
   2ab3c:	d0fc      	beq.n	2ab38 <find_node+0x28>
	return node->next;
   2ab3e:	6806      	ldr	r6, [r0, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ab40:	461d      	mov	r5, r3
   2ab42:	2e00      	cmp	r6, #0
   2ab44:	4603      	mov	r3, r0
   2ab46:	4630      	mov	r0, r6
   2ab48:	bf38      	it	cc
   2ab4a:	2000      	movcc	r0, #0
   2ab4c:	e7ec      	b.n	2ab28 <find_node+0x18>
   2ab4e:	bf00      	nop
   2ab50:	20019184 	.word	0x20019184

0002ab54 <module_init>:
{
	ARG_UNUSED(dev);

	static bool initialized;

	if (initialized) {
   2ab54:	4a0c      	ldr	r2, [pc, #48]	; (2ab88 <module_init+0x34>)
{
   2ab56:	b508      	push	{r3, lr}
	if (initialized) {
   2ab58:	7813      	ldrb	r3, [r2, #0]
   2ab5a:	b15b      	cbz	r3, 2ab74 <module_init+0x20>
   2ab5c:	480b      	ldr	r0, [pc, #44]	; (2ab8c <module_init+0x38>)
   2ab5e:	4b0c      	ldr	r3, [pc, #48]	; (2ab90 <module_init+0x3c>)
		LOG_WRN("Already initialized. Nothing to do");
   2ab60:	490c      	ldr	r1, [pc, #48]	; (2ab94 <module_init+0x40>)
   2ab62:	1ac0      	subs	r0, r0, r3
   2ab64:	08c0      	lsrs	r0, r0, #3
   2ab66:	0180      	lsls	r0, r0, #6
   2ab68:	f040 0002 	orr.w	r0, r0, #2
   2ab6c:	f012 fbc8 	bl	3d300 <log_string_sync>

	LOG_DBG("Initialization");
	sys_slist_init(&handler_list);
	at_cmd_set_notification_handler(notif_dispatch);
	return 0;
}
   2ab70:	2000      	movs	r0, #0
   2ab72:	bd08      	pop	{r3, pc}
	initialized = true;
   2ab74:	2101      	movs	r1, #1
   2ab76:	7011      	strb	r1, [r2, #0]
	list->head = NULL;
   2ab78:	4a07      	ldr	r2, [pc, #28]	; (2ab98 <module_init+0x44>)
	at_cmd_set_notification_handler(notif_dispatch);
   2ab7a:	4808      	ldr	r0, [pc, #32]	; (2ab9c <module_init+0x48>)
	list->tail = NULL;
   2ab7c:	e9c2 3300 	strd	r3, r3, [r2]
   2ab80:	f7ff ffaa 	bl	2aad8 <at_cmd_set_notification_handler>
	return 0;
   2ab84:	e7f4      	b.n	2ab70 <module_init+0x1c>
   2ab86:	bf00      	nop
   2ab88:	2001f72a 	.word	0x2001f72a
   2ab8c:	000433c4 	.word	0x000433c4
   2ab90:	0004339c 	.word	0x0004339c
   2ab94:	0004734a 	.word	0x0004734a
   2ab98:	20019184 	.word	0x20019184
   2ab9c:	0002abad 	.word	0x0002abad

0002aba0 <k_mutex_unlock.constprop.0>:
   2aba0:	4801      	ldr	r0, [pc, #4]	; (2aba8 <k_mutex_unlock.constprop.0+0x8>)
   2aba2:	f00c bf8f 	b.w	37ac4 <z_impl_k_mutex_unlock>
   2aba6:	bf00      	nop
   2aba8:	20015a9c 	.word	0x20015a9c

0002abac <notif_dispatch>:
{
   2abac:	b538      	push	{r3, r4, r5, lr}
   2abae:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   2abb0:	f04f 33ff 	mov.w	r3, #4294967295
   2abb4:	f04f 32ff 	mov.w	r2, #4294967295
   2abb8:	480d      	ldr	r0, [pc, #52]	; (2abf0 <notif_dispatch+0x44>)
   2abba:	f00c fe89 	bl	378d0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2abbe:	4b0d      	ldr	r3, [pc, #52]	; (2abf4 <notif_dispatch+0x48>)
   2abc0:	681b      	ldr	r3, [r3, #0]
   2abc2:	b91b      	cbnz	r3, 2abcc <notif_dispatch+0x20>
}
   2abc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_mutex_unlock(&list_mtx);
   2abc8:	f7ff bfea 	b.w	2aba0 <k_mutex_unlock.constprop.0>
	return node->next;
   2abcc:	681c      	ldr	r4, [r3, #0]
   2abce:	2c00      	cmp	r4, #0
   2abd0:	bf38      	it	cc
   2abd2:	2400      	movcc	r4, #0
		curr->handler(curr->ctx, response);
   2abd4:	4629      	mov	r1, r5
   2abd6:	689a      	ldr	r2, [r3, #8]
   2abd8:	6858      	ldr	r0, [r3, #4]
   2abda:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&handler_list, curr, tmp, node) {
   2abdc:	2c00      	cmp	r4, #0
   2abde:	d0f1      	beq.n	2abc4 <notif_dispatch+0x18>
   2abe0:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2abe2:	4623      	mov	r3, r4
   2abe4:	2a00      	cmp	r2, #0
   2abe6:	bf38      	it	cc
   2abe8:	2200      	movcc	r2, #0
   2abea:	4614      	mov	r4, r2
   2abec:	e7f2      	b.n	2abd4 <notif_dispatch+0x28>
   2abee:	bf00      	nop
   2abf0:	20015a9c 	.word	0x20015a9c
   2abf4:	20019184 	.word	0x20019184

0002abf8 <at_notif_register_handler>:
{
	return module_init(NULL);
}

int at_notif_register_handler(void *context, at_notif_handler_t handler)
{
   2abf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2abfa:	4606      	mov	r6, r0
	if (handler == NULL) {
   2abfc:	460d      	mov	r5, r1
   2abfe:	b979      	cbnz	r1, 2ac20 <at_notif_register_handler+0x28>
   2ac00:	481e      	ldr	r0, [pc, #120]	; (2ac7c <at_notif_register_handler+0x84>)
   2ac02:	4c1f      	ldr	r4, [pc, #124]	; (2ac80 <at_notif_register_handler+0x88>)
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2ac04:	460b      	mov	r3, r1
   2ac06:	1a24      	subs	r4, r4, r0
   2ac08:	08e4      	lsrs	r4, r4, #3
   2ac0a:	01a4      	lsls	r4, r4, #6
   2ac0c:	f044 0001 	orr.w	r0, r4, #1
   2ac10:	4632      	mov	r2, r6
   2ac12:	491c      	ldr	r1, [pc, #112]	; (2ac84 <at_notif_register_handler+0x8c>)
   2ac14:	f012 fb74 	bl	3d300 <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2ac18:	f06f 0015 	mvn.w	r0, #21
	}
	return append_notif_handler(context, handler);
}
   2ac1c:	b002      	add	sp, #8
   2ac1e:	bd70      	pop	{r4, r5, r6, pc}
   2ac20:	f04f 32ff 	mov.w	r2, #4294967295
   2ac24:	f04f 33ff 	mov.w	r3, #4294967295
   2ac28:	4817      	ldr	r0, [pc, #92]	; (2ac88 <at_notif_register_handler+0x90>)
   2ac2a:	f00c fe51 	bl	378d0 <z_impl_k_mutex_lock>
	if (find_node(&to_ins, ctx, handler) != NULL) {
   2ac2e:	462a      	mov	r2, r5
   2ac30:	4631      	mov	r1, r6
   2ac32:	a801      	add	r0, sp, #4
   2ac34:	f7ff ff6c 	bl	2ab10 <find_node>
   2ac38:	4604      	mov	r4, r0
   2ac3a:	b118      	cbz	r0, 2ac44 <at_notif_register_handler+0x4c>
		k_mutex_unlock(&list_mtx);
   2ac3c:	f7ff ffb0 	bl	2aba0 <k_mutex_unlock.constprop.0>
		return 0;
   2ac40:	2000      	movs	r0, #0
   2ac42:	e7eb      	b.n	2ac1c <at_notif_register_handler+0x24>
	return k_aligned_alloc(sizeof(void *), size);
   2ac44:	210c      	movs	r1, #12
   2ac46:	2004      	movs	r0, #4
   2ac48:	f00f fe34 	bl	3a8b4 <k_aligned_alloc>
	to_ins = (struct notif_handler *)k_malloc(sizeof(struct notif_handler));
   2ac4c:	9001      	str	r0, [sp, #4]
	if (to_ins == NULL) {
   2ac4e:	b920      	cbnz	r0, 2ac5a <at_notif_register_handler+0x62>
		k_mutex_unlock(&list_mtx);
   2ac50:	f7ff ffa6 	bl	2aba0 <k_mutex_unlock.constprop.0>
		return -ENOBUFS;
   2ac54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ac58:	e7e0      	b.n	2ac1c <at_notif_register_handler+0x24>
__ssp_bos_icheck3(memset, void *, int)
   2ac5a:	6004      	str	r4, [r0, #0]
	to_ins->ctx     = ctx;
   2ac5c:	9b01      	ldr	r3, [sp, #4]
Z_GENLIST_APPEND(slist, snode)
   2ac5e:	4a0b      	ldr	r2, [pc, #44]	; (2ac8c <at_notif_register_handler+0x94>)
   2ac60:	6044      	str	r4, [r0, #4]
   2ac62:	6084      	str	r4, [r0, #8]
	parent->next = child;
   2ac64:	601c      	str	r4, [r3, #0]
Z_GENLIST_APPEND(slist, snode)
   2ac66:	6851      	ldr	r1, [r2, #4]
	to_ins->handler = handler;
   2ac68:	e9c3 6501 	strd	r6, r5, [r3, #4]
   2ac6c:	b911      	cbnz	r1, 2ac74 <at_notif_register_handler+0x7c>
	list->head = node;
   2ac6e:	e9c2 3300 	strd	r3, r3, [r2]
}
   2ac72:	e7e3      	b.n	2ac3c <at_notif_register_handler+0x44>
	parent->next = child;
   2ac74:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2ac76:	6053      	str	r3, [r2, #4]
}
   2ac78:	e7e0      	b.n	2ac3c <at_notif_register_handler+0x44>
   2ac7a:	bf00      	nop
   2ac7c:	0004339c 	.word	0x0004339c
   2ac80:	000433c4 	.word	0x000433c4
   2ac84:	0004736d 	.word	0x0004736d
   2ac88:	20015a9c 	.word	0x20015a9c
   2ac8c:	20019184 	.word	0x20019184

0002ac90 <at_notif_deregister_handler>:

int at_notif_deregister_handler(void *context, at_notif_handler_t handler)
{
   2ac90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2ac92:	4606      	mov	r6, r0
	if (handler == NULL) {
   2ac94:	460d      	mov	r5, r1
   2ac96:	b979      	cbnz	r1, 2acb8 <at_notif_deregister_handler+0x28>
   2ac98:	4820      	ldr	r0, [pc, #128]	; (2ad1c <at_notif_deregister_handler+0x8c>)
   2ac9a:	4c21      	ldr	r4, [pc, #132]	; (2ad20 <at_notif_deregister_handler+0x90>)
		LOG_ERR("Invalid handler (context=0x%08X, handler=0x%08X)",
   2ac9c:	460b      	mov	r3, r1
   2ac9e:	1a24      	subs	r4, r4, r0
   2aca0:	08e4      	lsrs	r4, r4, #3
   2aca2:	01a4      	lsls	r4, r4, #6
   2aca4:	f044 0001 	orr.w	r0, r4, #1
   2aca8:	4632      	mov	r2, r6
   2acaa:	491e      	ldr	r1, [pc, #120]	; (2ad24 <at_notif_deregister_handler+0x94>)
   2acac:	f012 fb28 	bl	3d300 <log_string_sync>
			(uint32_t)context, (uint32_t)handler);
		return -EINVAL;
   2acb0:	f06f 0015 	mvn.w	r0, #21
	}
	return remove_notif_handler(context, handler);
}
   2acb4:	b002      	add	sp, #8
   2acb6:	bd70      	pop	{r4, r5, r6, pc}
	struct notif_handler *curr, *prev = NULL;
   2acb8:	2300      	movs	r3, #0
   2acba:	9301      	str	r3, [sp, #4]
   2acbc:	f04f 32ff 	mov.w	r2, #4294967295
   2acc0:	f04f 33ff 	mov.w	r3, #4294967295
   2acc4:	4818      	ldr	r0, [pc, #96]	; (2ad28 <at_notif_deregister_handler+0x98>)
   2acc6:	f00c fe03 	bl	378d0 <z_impl_k_mutex_lock>
	curr = find_node(&prev, ctx, handler);
   2acca:	462a      	mov	r2, r5
   2accc:	4631      	mov	r1, r6
   2acce:	a801      	add	r0, sp, #4
   2acd0:	f7ff ff1e 	bl	2ab10 <find_node>
	if (curr == NULL) {
   2acd4:	b968      	cbnz	r0, 2acf2 <at_notif_deregister_handler+0x62>
   2acd6:	4812      	ldr	r0, [pc, #72]	; (2ad20 <at_notif_deregister_handler+0x90>)
   2acd8:	4b10      	ldr	r3, [pc, #64]	; (2ad1c <at_notif_deregister_handler+0x8c>)
		LOG_WRN("Handler not registered. Nothing to do");
   2acda:	4914      	ldr	r1, [pc, #80]	; (2ad2c <at_notif_deregister_handler+0x9c>)
   2acdc:	1ac0      	subs	r0, r0, r3
   2acde:	08c0      	lsrs	r0, r0, #3
   2ace0:	0180      	lsls	r0, r0, #6
   2ace2:	f040 0002 	orr.w	r0, r0, #2
   2ace6:	f012 fb0b 	bl	3d300 <log_string_sync>
	k_mutex_unlock(&list_mtx);
   2acea:	f7ff ff59 	bl	2aba0 <k_mutex_unlock.constprop.0>
	return remove_notif_handler(context, handler);
   2acee:	2000      	movs	r0, #0
   2acf0:	e7e0      	b.n	2acb4 <at_notif_deregister_handler+0x24>
	sys_slist_remove(&handler_list, &prev->node, &curr->node);
   2acf2:	9a01      	ldr	r2, [sp, #4]
Z_GENLIST_REMOVE(slist, snode)
   2acf4:	6801      	ldr	r1, [r0, #0]
   2acf6:	4b0e      	ldr	r3, [pc, #56]	; (2ad30 <at_notif_deregister_handler+0xa0>)
   2acf8:	b94a      	cbnz	r2, 2ad0e <at_notif_deregister_handler+0x7e>
   2acfa:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2acfc:	6019      	str	r1, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2acfe:	4290      	cmp	r0, r2
   2ad00:	d100      	bne.n	2ad04 <at_notif_deregister_handler+0x74>
	list->tail = node;
   2ad02:	6059      	str	r1, [r3, #4]
	parent->next = child;
   2ad04:	2300      	movs	r3, #0
   2ad06:	6003      	str	r3, [r0, #0]
	k_free(curr);
   2ad08:	f016 ff86 	bl	41c18 <k_free>
   2ad0c:	e7ed      	b.n	2acea <at_notif_deregister_handler+0x5a>
   2ad0e:	6011      	str	r1, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ad10:	6859      	ldr	r1, [r3, #4]
   2ad12:	4288      	cmp	r0, r1
	list->tail = node;
   2ad14:	bf08      	it	eq
   2ad16:	605a      	streq	r2, [r3, #4]
}
   2ad18:	e7f4      	b.n	2ad04 <at_notif_deregister_handler+0x74>
   2ad1a:	bf00      	nop
   2ad1c:	0004339c 	.word	0x0004339c
   2ad20:	000433c4 	.word	0x000433c4
   2ad24:	0004736d 	.word	0x0004736d
   2ad28:	20015a9c 	.word	0x20015a9c
   2ad2c:	0004739e 	.word	0x0004739e
   2ad30:	20019184 	.word	0x20019184

0002ad34 <write_uart_string>:
static struct k_work cmd_send_work;



static inline void write_uart_string(const char *str)
{
   2ad34:	b538      	push	{r3, r4, r5, lr}
	/* Send characters until, but not including, null */
	for (size_t i = 0; str[i]; i++) {
		uart_poll_out(uart_dev, str[i]);
   2ad36:	4d05      	ldr	r5, [pc, #20]	; (2ad4c <write_uart_string+0x18>)
   2ad38:	1e44      	subs	r4, r0, #1
	for (size_t i = 0; str[i]; i++) {
   2ad3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   2ad3e:	b901      	cbnz	r1, 2ad42 <write_uart_string+0xe>
	}
}
   2ad40:	bd38      	pop	{r3, r4, r5, pc}
		uart_poll_out(uart_dev, str[i]);
   2ad42:	6828      	ldr	r0, [r5, #0]
   2ad44:	6883      	ldr	r3, [r0, #8]
   2ad46:	685b      	ldr	r3, [r3, #4]
   2ad48:	4798      	blx	r3
	for (size_t i = 0; str[i]; i++) {
   2ad4a:	e7f6      	b.n	2ad3a <write_uart_string+0x6>
   2ad4c:	2001919c 	.word	0x2001919c

0002ad50 <cmd_send>:
	/* Forward the data over UART */
	write_uart_string(response);
}

static void cmd_send(struct k_work *work)
{
   2ad50:	b500      	push	{lr}
	enum at_cmd_state state;
	int               err;

	ARG_UNUSED(work);

	err = at_cmd_write(at_buf, at_buf,
   2ad52:	4921      	ldr	r1, [pc, #132]	; (2add8 <cmd_send+0x88>)
{
   2ad54:	b08b      	sub	sp, #44	; 0x2c
	err = at_cmd_write(at_buf, at_buf,
   2ad56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   2ad5a:	4608      	mov	r0, r1
   2ad5c:	f10d 030b 	add.w	r3, sp, #11
   2ad60:	f7ff fe20 	bl	2a9a4 <at_cmd_write>
			   sizeof(at_buf), &state);
	if (err < 0) {
   2ad64:	1e02      	subs	r2, r0, #0
   2ad66:	da0e      	bge.n	2ad86 <cmd_send+0x36>
   2ad68:	481c      	ldr	r0, [pc, #112]	; (2addc <cmd_send+0x8c>)
   2ad6a:	4b1d      	ldr	r3, [pc, #116]	; (2ade0 <cmd_send+0x90>)
		LOG_ERR("Error while processing AT command: %d", err);
   2ad6c:	491d      	ldr	r1, [pc, #116]	; (2ade4 <cmd_send+0x94>)
   2ad6e:	1a1b      	subs	r3, r3, r0
   2ad70:	08db      	lsrs	r3, r3, #3
   2ad72:	019b      	lsls	r3, r3, #6
   2ad74:	f043 0001 	orr.w	r0, r3, #1
   2ad78:	f012 fac2 	bl	3d300 <log_string_sync>
		state = AT_CMD_ERROR;
   2ad7c:	2301      	movs	r3, #1
   2ad7e:	f88d 300b 	strb.w	r3, [sp, #11]
	case AT_CMD_OK:
		write_uart_string(at_buf);
		write_uart_string(OK_STR);
		break;
	case AT_CMD_ERROR:
		write_uart_string(ERROR_STR);
   2ad82:	4819      	ldr	r0, [pc, #100]	; (2ade8 <cmd_send+0x98>)
   2ad84:	e012      	b.n	2adac <cmd_send+0x5c>
	switch (state) {
   2ad86:	f89d 300b 	ldrb.w	r3, [sp, #11]
   2ad8a:	2b03      	cmp	r3, #3
   2ad8c:	d810      	bhi.n	2adb0 <cmd_send+0x60>
   2ad8e:	a101      	add	r1, pc, #4	; (adr r1, 2ad94 <cmd_send+0x44>)
   2ad90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2ad94:	0002ada5 	.word	0x0002ada5
   2ad98:	0002ad83 	.word	0x0002ad83
   2ad9c:	0002adbf 	.word	0x0002adbf
   2ada0:	0002add1 	.word	0x0002add1
		write_uart_string(at_buf);
   2ada4:	480c      	ldr	r0, [pc, #48]	; (2add8 <cmd_send+0x88>)
   2ada6:	f7ff ffc5 	bl	2ad34 <write_uart_string>
		write_uart_string(OK_STR);
   2adaa:	4810      	ldr	r0, [pc, #64]	; (2adec <cmd_send+0x9c>)
		sprintf(str, "+CMS ERROR: %d\r\n", err);
		write_uart_string(str);
		break;
	case AT_CMD_ERROR_CME:
		sprintf(str, "+CME ERROR: %d\r\n", err);
		write_uart_string(str);
   2adac:	f7ff ffc2 	bl	2ad34 <write_uart_string>
		break;
	default:
		break;
	}

	uart_irq_rx_enable(uart_dev);
   2adb0:	4b0f      	ldr	r3, [pc, #60]	; (2adf0 <cmd_send+0xa0>)
   2adb2:	6818      	ldr	r0, [r3, #0]
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_RX_ENABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_rx_enable(dev);
   2adb4:	f014 fe1b 	bl	3f9ee <z_impl_uart_irq_rx_enable>
}
   2adb8:	b00b      	add	sp, #44	; 0x2c
   2adba:	f85d fb04 	ldr.w	pc, [sp], #4
		sprintf(str, "+CMS ERROR: %d\r\n", err);
   2adbe:	4b0d      	ldr	r3, [pc, #52]	; (2adf4 <cmd_send+0xa4>)
   2adc0:	9200      	str	r2, [sp, #0]
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2adc2:	2219      	movs	r2, #25
   2adc4:	2100      	movs	r1, #0
   2adc6:	a803      	add	r0, sp, #12
   2adc8:	f017 f8d3 	bl	41f72 <__sprintf_chk>
		write_uart_string(str);
   2adcc:	a803      	add	r0, sp, #12
   2adce:	e7ed      	b.n	2adac <cmd_send+0x5c>
		sprintf(str, "+CME ERROR: %d\r\n", err);
   2add0:	4b09      	ldr	r3, [pc, #36]	; (2adf8 <cmd_send+0xa8>)
   2add2:	9200      	str	r2, [sp, #0]
   2add4:	e7f5      	b.n	2adc2 <cmd_send+0x72>
   2add6:	bf00      	nop
   2add8:	2001f72b 	.word	0x2001f72b
   2addc:	0004339c 	.word	0x0004339c
   2ade0:	000433bc 	.word	0x000433bc
   2ade4:	000473cd 	.word	0x000473cd
   2ade8:	00047243 	.word	0x00047243
   2adec:	000446ee 	.word	0x000446ee
   2adf0:	2001919c 	.word	0x2001919c
   2adf4:	000473f3 	.word	0x000473f3
   2adf8:	00047404 	.word	0x00047404

0002adfc <isr>:
		k_work_submit_to_queue(&at_host_work_q, &cmd_send_work);
	}
}

static void isr(const struct device *dev, void *user_data)
{
   2adfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2ae00:	4604      	mov	r4, r0
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update) {
   2ae02:	6883      	ldr	r3, [r0, #8]
   2ae04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2ae06:	b103      	cbz	r3, 2ae0a <isr+0xe>
		return api->irq_update(dev);
   2ae08:	4798      	blx	r3
	if (api->irq_rx_ready) {
   2ae0a:	68a3      	ldr	r3, [r4, #8]
   2ae0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2ae0e:	b1bb      	cbz	r3, 2ae40 <isr+0x44>
		return api->irq_rx_ready(dev);
   2ae10:	4620      	mov	r0, r4
   2ae12:	4798      	blx	r3

	uint8_t character;

	uart_irq_update(dev);

	if (!uart_irq_rx_ready(dev)) {
   2ae14:	b1a0      	cbz	r0, 2ae40 <isr+0x44>
   2ae16:	f8df 8140 	ldr.w	r8, [pc, #320]	; 2af58 <isr+0x15c>
   2ae1a:	4e44      	ldr	r6, [pc, #272]	; (2af2c <isr+0x130>)
   2ae1c:	4647      	mov	r7, r8
   2ae1e:	4b44      	ldr	r3, [pc, #272]	; (2af30 <isr+0x134>)
		if (at_cmd_len > 0) {
   2ae20:	4d44      	ldr	r5, [pc, #272]	; (2af34 <isr+0x138>)
   2ae22:	1af6      	subs	r6, r6, r3
   2ae24:	08f6      	lsrs	r6, r6, #3
   2ae26:	e8d8 3faf 	lda	r3, [r8]

	/*
	 * Check that we are not sending data (buffer must be preserved then),
	 * and that a new character is available before handling each character
	 */
	while ((!k_work_pending(&cmd_send_work)) &&
   2ae2a:	07db      	lsls	r3, r3, #31
   2ae2c:	d408      	bmi.n	2ae40 <isr+0x44>
	if (api->fifo_read) {
   2ae2e:	68a3      	ldr	r3, [r4, #8]
   2ae30:	699b      	ldr	r3, [r3, #24]
   2ae32:	b12b      	cbz	r3, 2ae40 <isr+0x44>
		return api->fifo_read(dev, rx_data, size);
   2ae34:	2201      	movs	r2, #1
   2ae36:	4620      	mov	r0, r4
   2ae38:	f10d 0107 	add.w	r1, sp, #7
   2ae3c:	4798      	blx	r3
   2ae3e:	b910      	cbnz	r0, 2ae46 <isr+0x4a>
	       (uart_fifo_read(dev, &character, 1))) {
		uart_rx_handler(character);
	}
}
   2ae40:	b002      	add	sp, #8
   2ae42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uart_rx_handler(character);
   2ae46:	f89d 2007 	ldrb.w	r2, [sp, #7]
	switch (character) {
   2ae4a:	2a08      	cmp	r2, #8
   2ae4c:	d001      	beq.n	2ae52 <isr+0x56>
   2ae4e:	2a7f      	cmp	r2, #127	; 0x7f
   2ae50:	d105      	bne.n	2ae5e <isr+0x62>
		if (at_cmd_len > 0) {
   2ae52:	682b      	ldr	r3, [r5, #0]
   2ae54:	2b00      	cmp	r3, #0
   2ae56:	d0e6      	beq.n	2ae26 <isr+0x2a>
			at_cmd_len--;
   2ae58:	3b01      	subs	r3, #1
   2ae5a:	602b      	str	r3, [r5, #0]
   2ae5c:	e7e3      	b.n	2ae26 <isr+0x2a>
	if (!inside_quotes) {
   2ae5e:	4936      	ldr	r1, [pc, #216]	; (2af38 <isr+0x13c>)
   2ae60:	780b      	ldrb	r3, [r1, #0]
   2ae62:	b993      	cbnz	r3, 2ae8a <isr+0x8e>
		switch (character) {
   2ae64:	2a0a      	cmp	r2, #10
   2ae66:	d01e      	beq.n	2aea6 <isr+0xaa>
   2ae68:	2a0d      	cmp	r2, #13
   2ae6a:	d00a      	beq.n	2ae82 <isr+0x86>
   2ae6c:	b96a      	cbnz	r2, 2ae8a <isr+0x8e>
			if (term_mode == MODE_NULL_TERM) {
   2ae6e:	4b33      	ldr	r3, [pc, #204]	; (2af3c <isr+0x140>)
   2ae70:	781b      	ldrb	r3, [r3, #0]
   2ae72:	b3a3      	cbz	r3, 2aede <isr+0xe2>
			LOG_WRN("Ignored null; would terminate string early.");
   2ae74:	01b0      	lsls	r0, r6, #6
   2ae76:	4932      	ldr	r1, [pc, #200]	; (2af40 <isr+0x144>)
   2ae78:	f040 0002 	orr.w	r0, r0, #2
   2ae7c:	f012 fa40 	bl	3d300 <log_string_sync>
			return;
   2ae80:	e7d1      	b.n	2ae26 <isr+0x2a>
			if (term_mode == MODE_CR) {
   2ae82:	482e      	ldr	r0, [pc, #184]	; (2af3c <isr+0x140>)
   2ae84:	7800      	ldrb	r0, [r0, #0]
   2ae86:	2801      	cmp	r0, #1
			    at_cmd_len > 0 &&
   2ae88:	d029      	beq.n	2aede <isr+0xe2>
	if (at_cmd_len + 1 > sizeof(at_buf) - 1) {
   2ae8a:	f8d5 c000 	ldr.w	ip, [r5]
   2ae8e:	f10c 0001 	add.w	r0, ip, #1
   2ae92:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
   2ae96:	d317      	bcc.n	2aec8 <isr+0xcc>
		LOG_ERR("Buffer overflow, dropping '%c'\n", character);
   2ae98:	01b0      	lsls	r0, r6, #6
   2ae9a:	492a      	ldr	r1, [pc, #168]	; (2af44 <isr+0x148>)
   2ae9c:	f040 0001 	orr.w	r0, r0, #1
   2aea0:	f012 fa2e 	bl	3d300 <log_string_sync>
		return;
   2aea4:	e7bf      	b.n	2ae26 <isr+0x2a>
			if (term_mode == MODE_LF) {
   2aea6:	4825      	ldr	r0, [pc, #148]	; (2af3c <isr+0x140>)
   2aea8:	7800      	ldrb	r0, [r0, #0]
   2aeaa:	2802      	cmp	r0, #2
   2aeac:	d017      	beq.n	2aede <isr+0xe2>
			if (term_mode == MODE_CR_LF &&
   2aeae:	2803      	cmp	r0, #3
   2aeb0:	d1eb      	bne.n	2ae8a <isr+0x8e>
   2aeb2:	f8d5 c000 	ldr.w	ip, [r5]
   2aeb6:	f1bc 0f00 	cmp.w	ip, #0
   2aeba:	d0e6      	beq.n	2ae8a <isr+0x8e>
			    at_buf[at_cmd_len - 1] == '\r') {
   2aebc:	4822      	ldr	r0, [pc, #136]	; (2af48 <isr+0x14c>)
   2aebe:	4460      	add	r0, ip
			    at_cmd_len > 0 &&
   2aec0:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   2aec4:	280d      	cmp	r0, #13
   2aec6:	e7df      	b.n	2ae88 <isr+0x8c>
	at_buf[at_cmd_len] = character;
   2aec8:	f8df e07c 	ldr.w	lr, [pc, #124]	; 2af48 <isr+0x14c>
	if (character == '"') {
   2aecc:	2a22      	cmp	r2, #34	; 0x22
	at_buf[at_cmd_len] = character;
   2aece:	f80e 200c 	strb.w	r2, [lr, ip]
	at_cmd_len++;
   2aed2:	6028      	str	r0, [r5, #0]
	if (character == '"') {
   2aed4:	d1a7      	bne.n	2ae26 <isr+0x2a>
	if (!inside_quotes) {
   2aed6:	f083 0301 	eor.w	r3, r3, #1
		inside_quotes = !inside_quotes;
   2aeda:	700b      	strb	r3, [r1, #0]
   2aedc:	e7a3      	b.n	2ae26 <isr+0x2a>
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2aede:	2200      	movs	r2, #0
   2aee0:	4b19      	ldr	r3, [pc, #100]	; (2af48 <isr+0x14c>)
	inside_quotes = false;
   2aee2:	700a      	strb	r2, [r1, #0]
   2aee4:	4619      	mov	r1, r3
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2aee6:	6828      	ldr	r0, [r5, #0]
	at_cmd_len = 0;
   2aee8:	602a      	str	r2, [r5, #0]
	at_buf[at_cmd_len] = '\0'; /* Terminate the command string */
   2aeea:	541a      	strb	r2, [r3, r0]
		if (*c > ' ') {
   2aeec:	f813 2b01 	ldrb.w	r2, [r3], #1
   2aef0:	2a20      	cmp	r2, #32
   2aef2:	d802      	bhi.n	2aefa <isr+0xfe>
		} else if (*c == '\0') {
   2aef4:	2a00      	cmp	r2, #0
   2aef6:	d1f9      	bne.n	2aeec <isr+0xf0>
   2aef8:	e795      	b.n	2ae26 <isr+0x2a>
	if (at_buf[0]) {
   2aefa:	780b      	ldrb	r3, [r1, #0]
   2aefc:	2b00      	cmp	r3, #0
   2aefe:	d092      	beq.n	2ae26 <isr+0x2a>
		uart_irq_rx_disable(uart_dev); /* Stop UART to protect at_buf */
   2af00:	4b12      	ldr	r3, [pc, #72]	; (2af4c <isr+0x150>)
   2af02:	6818      	ldr	r0, [r3, #0]
	if (api->irq_rx_disable) {
   2af04:	6883      	ldr	r3, [r0, #8]
   2af06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2af08:	b103      	cbz	r3, 2af0c <isr+0x110>
		api->irq_rx_disable(dev);
   2af0a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2af0c:	e8d7 3fef 	ldaex	r3, [r7]
   2af10:	f043 0201 	orr.w	r2, r3, #1
   2af14:	e8c7 2fe1 	stlex	r1, r2, [r7]
   2af18:	2900      	cmp	r1, #0
   2af1a:	d1f7      	bne.n	2af0c <isr+0x110>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2af1c:	07da      	lsls	r2, r3, #31
   2af1e:	d482      	bmi.n	2ae26 <isr+0x2a>
		k_queue_append(&work_q->queue, work);
   2af20:	490b      	ldr	r1, [pc, #44]	; (2af50 <isr+0x154>)
   2af22:	480c      	ldr	r0, [pc, #48]	; (2af54 <isr+0x158>)
   2af24:	f016 fd09 	bl	4193a <k_queue_append>
   2af28:	e77d      	b.n	2ae26 <isr+0x2a>
   2af2a:	bf00      	nop
   2af2c:	000433bc 	.word	0x000433bc
   2af30:	0004339c 	.word	0x0004339c
   2af34:	2001918c 	.word	0x2001918c
   2af38:	2002072b 	.word	0x2002072b
   2af3c:	2002072c 	.word	0x2002072c
   2af40:	00047415 	.word	0x00047415
   2af44:	00047441 	.word	0x00047441
   2af48:	2001f72b 	.word	0x2001f72b
   2af4c:	2001919c 	.word	0x2001919c
   2af50:	20019190 	.word	0x20019190
   2af54:	200169d0 	.word	0x200169d0
   2af58:	20019198 	.word	0x20019198

0002af5c <at_host_init>:
	uart_irq_callback_set(uart_dev, isr);
	return err;
}

static int at_host_init(const struct device *arg)
{
   2af5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}

	ARG_UNUSED(arg);

	/* Choosing the termination mode */
	if (mode < MODE_COUNT) {
		term_mode = mode;
   2af60:	2201      	movs	r2, #1
   2af62:	4b47      	ldr	r3, [pc, #284]	; (2b080 <at_host_init+0x124>)
	default:
		LOG_ERR("Unknown UART instance %d", uart_id);
		return -EINVAL;
	}

	err = at_notif_register_handler(NULL, response_handler);
   2af64:	2000      	movs	r0, #0
   2af66:	4947      	ldr	r1, [pc, #284]	; (2b084 <at_host_init+0x128>)
		term_mode = mode;
   2af68:	701a      	strb	r2, [r3, #0]
	err = at_notif_register_handler(NULL, response_handler);
   2af6a:	f7ff fe45 	bl	2abf8 <at_notif_register_handler>
	if (err != 0) {
   2af6e:	4c46      	ldr	r4, [pc, #280]	; (2b088 <at_host_init+0x12c>)
   2af70:	4b46      	ldr	r3, [pc, #280]	; (2b08c <at_host_init+0x130>)
   2af72:	4606      	mov	r6, r0
   2af74:	1ae4      	subs	r4, r4, r3
   2af76:	08e4      	lsrs	r4, r4, #3
   2af78:	b150      	cbz	r0, 2af90 <at_host_init+0x34>
		LOG_ERR("Can't register handler err=%d", err);
   2af7a:	01a0      	lsls	r0, r4, #6
   2af7c:	4632      	mov	r2, r6
   2af7e:	4944      	ldr	r1, [pc, #272]	; (2b090 <at_host_init+0x134>)
   2af80:	f040 0001 	orr.w	r0, r0, #1
   2af84:	f012 f9bc 	bl	3d300 <log_string_sync>
		       K_THREAD_STACK_SIZEOF(at_host_stack_area),
		       CONFIG_AT_HOST_THREAD_PRIO);
	uart_irq_rx_enable(uart_dev);

	return err;
}
   2af88:	4630      	mov	r0, r6
   2af8a:	b004      	add	sp, #16
   2af8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2af90:	4840      	ldr	r0, [pc, #256]	; (2b094 <at_host_init+0x138>)
   2af92:	f00c f867 	bl	37064 <z_impl_device_get_binding>
	uart_dev = device_get_binding(uart_dev_name);
   2af96:	4d40      	ldr	r5, [pc, #256]	; (2b098 <at_host_init+0x13c>)
   2af98:	6028      	str	r0, [r5, #0]
	if (uart_dev == NULL) {
   2af9a:	b988      	cbnz	r0, 2afc0 <at_host_init+0x64>
		LOG_ERR("Cannot bind %s\n", uart_dev_name);
   2af9c:	01a0      	lsls	r0, r4, #6
   2af9e:	4a3d      	ldr	r2, [pc, #244]	; (2b094 <at_host_init+0x138>)
   2afa0:	493e      	ldr	r1, [pc, #248]	; (2b09c <at_host_init+0x140>)
   2afa2:	f040 0001 	orr.w	r0, r0, #1
   2afa6:	f012 f9ab 	bl	3d300 <log_string_sync>
		return -EINVAL;
   2afaa:	f06f 0215 	mvn.w	r2, #21
		LOG_ERR("UART could not be initialized: %d", err);
   2afae:	01a0      	lsls	r0, r4, #6
   2afb0:	493b      	ldr	r1, [pc, #236]	; (2b0a0 <at_host_init+0x144>)
   2afb2:	f040 0001 	orr.w	r0, r0, #1
   2afb6:	f012 f9a3 	bl	3d300 <log_string_sync>
		return -EFAULT;
   2afba:	f06f 060d 	mvn.w	r6, #13
   2afbe:	e7e3      	b.n	2af88 <at_host_init+0x2c>
	return z_impl_k_uptime_ticks();
   2afc0:	f016 fd8a 	bl	41ad8 <z_impl_k_uptime_ticks>
   2afc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2afc8:	460a      	mov	r2, r1
   2afca:	fba0 0103 	umull	r0, r1, r0, r3
   2afce:	fb03 1102 	mla	r1, r3, r2, r1
   2afd2:	0bc7      	lsrs	r7, r0, #15
   2afd4:	ea4f 1884 	mov.w	r8, r4, lsl #6
			LOG_INF("UART check failed: %d. "
   2afd8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2b0bc <at_host_init+0x160>
   2afdc:	ea47 4741 	orr.w	r7, r7, r1, lsl #17
   2afe0:	f048 0903 	orr.w	r9, r8, #3
		err = uart_err_check(uart_dev);
   2afe4:	6828      	ldr	r0, [r5, #0]
	if (api->err_check != NULL) {
   2afe6:	6883      	ldr	r3, [r0, #8]
   2afe8:	689b      	ldr	r3, [r3, #8]
   2afea:	b383      	cbz	r3, 2b04e <at_host_init+0xf2>
		return api->err_check(dev);
   2afec:	4798      	blx	r3
		if (err) {
   2afee:	9001      	str	r0, [sp, #4]
   2aff0:	b368      	cbz	r0, 2b04e <at_host_init+0xf2>
   2aff2:	f016 fd71 	bl	41ad8 <z_impl_k_uptime_ticks>
   2aff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2affa:	468c      	mov	ip, r1
   2affc:	fba0 0103 	umull	r0, r1, r0, r3
   2b000:	fb03 110c 	mla	r1, r3, ip, r1
   2b004:	0bc3      	lsrs	r3, r0, #15
   2b006:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
			if (k_uptime_get_32() - start_time >
   2b00a:	1bdb      	subs	r3, r3, r7
   2b00c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2b010:	9a01      	ldr	r2, [sp, #4]
   2b012:	d907      	bls.n	2b024 <at_host_init+0xc8>
				LOG_ERR("UART check failed: %d. "
   2b014:	4923      	ldr	r1, [pc, #140]	; (2b0a4 <at_host_init+0x148>)
   2b016:	f048 0001 	orr.w	r0, r8, #1
   2b01a:	f012 f971 	bl	3d300 <log_string_sync>
				return -EIO;
   2b01e:	f06f 0204 	mvn.w	r2, #4
   2b022:	e7c4      	b.n	2afae <at_host_init+0x52>
			LOG_INF("UART check failed: %d. "
   2b024:	4651      	mov	r1, sl
   2b026:	4648      	mov	r0, r9
   2b028:	f012 f96a 	bl	3d300 <log_string_sync>
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2b02c:	6828      	ldr	r0, [r5, #0]
	if (api->fifo_read) {
   2b02e:	6883      	ldr	r3, [r0, #8]
   2b030:	699b      	ldr	r3, [r3, #24]
   2b032:	b92b      	cbnz	r3, 2b040 <at_host_init+0xe4>
	return z_impl_k_sleep(timeout);
   2b034:	2100      	movs	r1, #0
   2b036:	f44f 70a4 	mov.w	r0, #328	; 0x148
   2b03a:	f00e f8fd 	bl	39238 <z_impl_k_sleep>
	} while (err);
   2b03e:	e7d1      	b.n	2afe4 <at_host_init+0x88>
		return api->fifo_read(dev, rx_data, size);
   2b040:	2201      	movs	r2, #1
   2b042:	f10d 010f 	add.w	r1, sp, #15
   2b046:	4798      	blx	r3
			while (uart_fifo_read(uart_dev, &dummy, 1)) {
   2b048:	2800      	cmp	r0, #0
   2b04a:	d1ef      	bne.n	2b02c <at_host_init+0xd0>
   2b04c:	e7f2      	b.n	2b034 <at_host_init+0xd8>
	uart_irq_callback_set(uart_dev, isr);
   2b04e:	6828      	ldr	r0, [r5, #0]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   2b050:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   2b052:	b123      	cbz	r3, 2b05e <at_host_init+0x102>
   2b054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2b056:	b113      	cbz	r3, 2b05e <at_host_init+0x102>
		api->irq_callback_set(dev, cb, user_data);
   2b058:	2200      	movs	r2, #0
   2b05a:	4913      	ldr	r1, [pc, #76]	; (2b0a8 <at_host_init+0x14c>)
   2b05c:	4798      	blx	r3
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2b05e:	2200      	movs	r2, #0
   2b060:	4b12      	ldr	r3, [pc, #72]	; (2b0ac <at_host_init+0x150>)
   2b062:	4913      	ldr	r1, [pc, #76]	; (2b0b0 <at_host_init+0x154>)
   2b064:	601a      	str	r2, [r3, #0]
   2b066:	e9c3 1201 	strd	r1, r2, [r3, #4]
	k_work_q_start(&at_host_work_q, at_host_stack_area,
   2b06a:	4812      	ldr	r0, [pc, #72]	; (2b0b4 <at_host_init+0x158>)
   2b06c:	230a      	movs	r3, #10
   2b06e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2b072:	4911      	ldr	r1, [pc, #68]	; (2b0b8 <at_host_init+0x15c>)
   2b074:	f00e fbc2 	bl	397fc <k_work_q_start>
	uart_irq_rx_enable(uart_dev);
   2b078:	6828      	ldr	r0, [r5, #0]
   2b07a:	f014 fcb8 	bl	3f9ee <z_impl_uart_irq_rx_enable>
	return err;
   2b07e:	e783      	b.n	2af88 <at_host_init+0x2c>
   2b080:	2002072c 	.word	0x2002072c
   2b084:	0003f9f9 	.word	0x0003f9f9
   2b088:	000433bc 	.word	0x000433bc
   2b08c:	0004339c 	.word	0x0004339c
   2b090:	00047461 	.word	0x00047461
   2b094:	00045b4f 	.word	0x00045b4f
   2b098:	2001919c 	.word	0x2001919c
   2b09c:	0004747f 	.word	0x0004747f
   2b0a0:	000474fa 	.word	0x000474fa
   2b0a4:	0004748f 	.word	0x0004748f
   2b0a8:	0002adfd 	.word	0x0002adfd
   2b0ac:	20019190 	.word	0x20019190
   2b0b0:	0002ad51 	.word	0x0002ad51
   2b0b4:	200169d0 	.word	0x200169d0
   2b0b8:	20022268 	.word	0x20022268
   2b0bc:	000474c5 	.word	0x000474c5

0002b0c0 <is_valid_notification_char>:
 * @retval true  If character is valid
 * @retval false If character is not valid
 */
static inline bool is_valid_notification_char(char chr)
{
	chr = toupper((int)chr);
   2b0c0:	4b06      	ldr	r3, [pc, #24]	; (2b0dc <is_valid_notification_char+0x1c>)
   2b0c2:	5cc3      	ldrb	r3, [r0, r3]
   2b0c4:	f003 0303 	and.w	r3, r3, #3
   2b0c8:	2b02      	cmp	r3, #2
   2b0ca:	bf08      	it	eq
   2b0cc:	3820      	subeq	r0, #32

	if ((chr >= 'A') && (chr <= 'Z')) {
   2b0ce:	3841      	subs	r0, #65	; 0x41
   2b0d0:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
   2b0d2:	2819      	cmp	r0, #25
   2b0d4:	bf8c      	ite	hi
   2b0d6:	2000      	movhi	r0, #0
   2b0d8:	2001      	movls	r0, #1
   2b0da:	4770      	bx	lr
   2b0dc:	0004c29f 	.word	0x0004c29f

0002b0e0 <at_parse_process_element>:
	return 0;
}

static int at_parse_process_element(const char **str, int index,
				    struct at_param_list *const list)
{
   2b0e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const char *tmpstr = *str;
   2b0e4:	6805      	ldr	r5, [r0, #0]
{
   2b0e6:	b0a3      	sub	sp, #140	; 0x8c
	const char *tmpstr = *str;
   2b0e8:	9500      	str	r5, [sp, #0]
 * @retval true  If character is 0
 * @retval false If character is not 0
 */
static inline bool is_terminated(char chr)
{
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b0ea:	782b      	ldrb	r3, [r5, #0]
{
   2b0ec:	4680      	mov	r8, r0
   2b0ee:	460f      	mov	r7, r1
   2b0f0:	4616      	mov	r6, r2
   2b0f2:	2b00      	cmp	r3, #0
   2b0f4:	f000 80d3 	beq.w	2b29e <at_parse_process_element+0x1be>

	if (is_terminated(*tmpstr)) {
		return -1;
	}

	if (state == NOTIFICATION) {
   2b0f8:	4b6a      	ldr	r3, [pc, #424]	; (2b2a4 <at_parse_process_element+0x1c4>)
   2b0fa:	781c      	ldrb	r4, [r3, #0]
   2b0fc:	2c06      	cmp	r4, #6
   2b0fe:	d110      	bne.n	2b122 <at_parse_process_element+0x42>
		const char *start_ptr = tmpstr++;
   2b100:	1c6b      	adds	r3, r5, #1
   2b102:	9300      	str	r3, [sp, #0]

		while (is_valid_notification_char(*tmpstr)) {
   2b104:	9a00      	ldr	r2, [sp, #0]
   2b106:	7810      	ldrb	r0, [r2, #0]
   2b108:	f7ff ffda 	bl	2b0c0 <is_valid_notification_char>
   2b10c:	b930      	cbnz	r0, 2b11c <at_parse_process_element+0x3c>
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2b10e:	1b53      	subs	r3, r2, r5

		while (!is_terminated(*tmpstr)) {
			tmpstr++;
		}

		at_params_string_put(list, index, start_ptr,
   2b110:	462a      	mov	r2, r5
   2b112:	4639      	mov	r1, r7
   2b114:	4630      	mov	r0, r6
   2b116:	f014 fceb 	bl	3faf0 <at_params_string_put>
   2b11a:	e028      	b.n	2b16e <at_parse_process_element+0x8e>
			tmpstr++;
   2b11c:	3201      	adds	r2, #1
   2b11e:	9200      	str	r2, [sp, #0]
   2b120:	e7f0      	b.n	2b104 <at_parse_process_element+0x24>
	} else if (state == COMMAND) {
   2b122:	2c07      	cmp	r4, #7
   2b124:	d11e      	bne.n	2b164 <at_parse_process_element+0x84>
		skip_command_prefix(&tmpstr);
   2b126:	4668      	mov	r0, sp
   2b128:	f014 fc72 	bl	3fa10 <skip_command_prefix>
		while (is_valid_notification_char(*tmpstr)) {
   2b12c:	9a00      	ldr	r2, [sp, #0]
   2b12e:	7810      	ldrb	r0, [r2, #0]
   2b130:	f7ff ffc6 	bl	2b0c0 <is_valid_notification_char>
   2b134:	b978      	cbnz	r0, 2b156 <at_parse_process_element+0x76>
		at_params_string_put(list, index, start_ptr,
   2b136:	1b53      	subs	r3, r2, r5
   2b138:	4639      	mov	r1, r7
   2b13a:	462a      	mov	r2, r5
   2b13c:	4630      	mov	r0, r6
   2b13e:	f014 fcd7 	bl	3faf0 <at_params_string_put>
		if ((*tmpstr == AT_CMD_SEPARATOR) &&
   2b142:	9b00      	ldr	r3, [sp, #0]
   2b144:	781a      	ldrb	r2, [r3, #0]
   2b146:	2a3d      	cmp	r2, #61	; 0x3d
   2b148:	d108      	bne.n	2b15c <at_parse_process_element+0x7c>
   2b14a:	785a      	ldrb	r2, [r3, #1]
   2b14c:	2a3f      	cmp	r2, #63	; 0x3f
   2b14e:	d10e      	bne.n	2b16e <at_parse_process_element+0x8e>
			tmpstr += 2;
   2b150:	3302      	adds	r3, #2
		tmpstr++;
   2b152:	9300      	str	r3, [sp, #0]
   2b154:	e00b      	b.n	2b16e <at_parse_process_element+0x8e>
			tmpstr++;
   2b156:	3201      	adds	r2, #1
   2b158:	9200      	str	r2, [sp, #0]
   2b15a:	e7e7      	b.n	2b12c <at_parse_process_element+0x4c>
		} else if (*tmpstr == AT_CMD_READ_TEST_IDENTIFIER) {
   2b15c:	2a3f      	cmp	r2, #63	; 0x3f
   2b15e:	d106      	bne.n	2b16e <at_parse_process_element+0x8e>
		tmpstr++;
   2b160:	3301      	adds	r3, #1
   2b162:	e7f6      	b.n	2b152 <at_parse_process_element+0x72>
	} else if (state == OPTIONAL) {
   2b164:	2c08      	cmp	r4, #8
   2b166:	d109      	bne.n	2b17c <at_parse_process_element+0x9c>
		at_params_empty_put(list, index);
   2b168:	4610      	mov	r0, r2
   2b16a:	f014 fc98 	bl	3fa9e <at_params_empty_put>
				     tmpstr - start_ptr);
	}

	*str = tmpstr;
	return 0;
   2b16e:	2000      	movs	r0, #0
	*str = tmpstr;
   2b170:	9b00      	ldr	r3, [sp, #0]
   2b172:	f8c8 3000 	str.w	r3, [r8]
}
   2b176:	b023      	add	sp, #140	; 0x8c
   2b178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (state == STRING) {
   2b17c:	2c02      	cmp	r4, #2
   2b17e:	d111      	bne.n	2b1a4 <at_parse_process_element+0xc4>
		while (!is_lfcr(*tmpstr) && !is_terminated(*tmpstr)) {
   2b180:	9a00      	ldr	r2, [sp, #0]
   2b182:	7811      	ldrb	r1, [r2, #0]
   2b184:	4608      	mov	r0, r1
   2b186:	f014 fc3a 	bl	3f9fe <is_lfcr>
   2b18a:	b918      	cbnz	r0, 2b194 <at_parse_process_element+0xb4>
   2b18c:	b111      	cbz	r1, 2b194 <at_parse_process_element+0xb4>
			tmpstr++;
   2b18e:	3201      	adds	r2, #1
   2b190:	9200      	str	r2, [sp, #0]
   2b192:	e7f5      	b.n	2b180 <at_parse_process_element+0xa0>
		at_params_string_put(list, index, start_ptr,
   2b194:	1b53      	subs	r3, r2, r5
		at_params_string_put(list, index, start_ptr,
   2b196:	462a      	mov	r2, r5
   2b198:	4639      	mov	r1, r7
   2b19a:	4630      	mov	r0, r6
   2b19c:	f014 fca8 	bl	3faf0 <at_params_string_put>
		tmpstr++;
   2b1a0:	9b00      	ldr	r3, [sp, #0]
   2b1a2:	e7dd      	b.n	2b160 <at_parse_process_element+0x80>
	} else if (state == QUOTED_STRING) {
   2b1a4:	2c03      	cmp	r4, #3
   2b1a6:	d109      	bne.n	2b1bc <at_parse_process_element+0xdc>
		while (!is_dblquote(*tmpstr) && !is_terminated(*tmpstr)) {
   2b1a8:	9b00      	ldr	r3, [sp, #0]
   2b1aa:	781a      	ldrb	r2, [r3, #0]
 * @retval true  If character is "
 * @retval false If character is something else
 */
static inline bool is_dblquote(char chr)
{
	if (chr == '"') {
   2b1ac:	2a22      	cmp	r2, #34	; 0x22
   2b1ae:	d003      	beq.n	2b1b8 <at_parse_process_element+0xd8>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b1b0:	b112      	cbz	r2, 2b1b8 <at_parse_process_element+0xd8>
			tmpstr++;
   2b1b2:	3301      	adds	r3, #1
   2b1b4:	9300      	str	r3, [sp, #0]
   2b1b6:	e7f7      	b.n	2b1a8 <at_parse_process_element+0xc8>
		at_params_string_put(list, index, start_ptr,
   2b1b8:	1b5b      	subs	r3, r3, r5
   2b1ba:	e7ec      	b.n	2b196 <at_parse_process_element+0xb6>
	} else if (state == ARRAY) {
   2b1bc:	2c01      	cmp	r4, #1
   2b1be:	d13c      	bne.n	2b23a <at_parse_process_element+0x15a>
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2b1c0:	4628      	mov	r0, r5
   2b1c2:	220a      	movs	r2, #10
   2b1c4:	a901      	add	r1, sp, #4
   2b1c6:	f010 fb19 	bl	3b7fc <strtoul>
		tmpstr = next;
   2b1ca:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b1cc:	4d36      	ldr	r5, [pc, #216]	; (2b2a8 <at_parse_process_element+0x1c8>)
		tmparray[i++] = (uint32_t)strtoul(tmpstr, &next, 10);
   2b1ce:	9002      	str	r0, [sp, #8]
		tmpstr = next;
   2b1d0:	9300      	str	r3, [sp, #0]
		while (!is_array_stop(*tmpstr) && !is_terminated(*tmpstr)) {
   2b1d2:	9800      	ldr	r0, [sp, #0]
   2b1d4:	7803      	ldrb	r3, [r0, #0]
 * @retval true  If character is )
 * @retval false If character is something else
 */
static inline bool is_array_stop(char chr)
{
	if (chr == ')') {
   2b1d6:	2b29      	cmp	r3, #41	; 0x29
   2b1d8:	d028      	beq.n	2b22c <at_parse_process_element+0x14c>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b1da:	b33b      	cbz	r3, 2b22c <at_parse_process_element+0x14c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b1dc:	3b2c      	subs	r3, #44	; 0x2c
   2b1de:	b2db      	uxtb	r3, r3
   2b1e0:	3001      	adds	r0, #1
   2b1e2:	2b11      	cmp	r3, #17
				tmparray[i++] =
   2b1e4:	9000      	str	r0, [sp, #0]
   2b1e6:	d803      	bhi.n	2b1f0 <at_parse_process_element+0x110>
   2b1e8:	fa25 f303 	lsr.w	r3, r5, r3
   2b1ec:	07db      	lsls	r3, r3, #31
   2b1ee:	d408      	bmi.n	2b202 <at_parse_process_element+0x122>
				tmpstr++;
   2b1f0:	46a1      	mov	r9, r4
   2b1f2:	e004      	b.n	2b1fe <at_parse_process_element+0x11e>
					tmpstr = next;
   2b1f4:	9b01      	ldr	r3, [sp, #4]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2b1f6:	f1b9 0f20 	cmp.w	r9, #32
					tmpstr = next;
   2b1fa:	9300      	str	r3, [sp, #0]
			if (i == AT_CMD_MAX_ARRAY_SIZE) {
   2b1fc:	d015      	beq.n	2b22a <at_parse_process_element+0x14a>
				tmpstr++;
   2b1fe:	464c      	mov	r4, r9
   2b200:	e7e7      	b.n	2b1d2 <at_parse_process_element+0xf2>
					(uint32_t)strtoul(++tmpstr, &next, 10);
   2b202:	220a      	movs	r2, #10
   2b204:	a901      	add	r1, sp, #4
   2b206:	f010 faf9 	bl	3b7fc <strtoul>
				tmparray[i++] =
   2b20a:	ab22      	add	r3, sp, #136	; 0x88
   2b20c:	f104 0901 	add.w	r9, r4, #1
   2b210:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   2b214:	f844 0c80 	str.w	r0, [r4, #-128]
				if (strlen(tmpstr) == strlen(next)) {
   2b218:	9800      	ldr	r0, [sp, #0]
   2b21a:	f7f2 f81f 	bl	1d25c <strlen>
   2b21e:	4604      	mov	r4, r0
   2b220:	9801      	ldr	r0, [sp, #4]
   2b222:	f7f2 f81b 	bl	1d25c <strlen>
   2b226:	4284      	cmp	r4, r0
   2b228:	d1e4      	bne.n	2b1f4 <at_parse_process_element+0x114>
   2b22a:	464c      	mov	r4, r9
		at_params_array_put(list, index, tmparray, i * sizeof(uint32_t));
   2b22c:	4639      	mov	r1, r7
   2b22e:	4630      	mov	r0, r6
   2b230:	00a3      	lsls	r3, r4, #2
   2b232:	aa02      	add	r2, sp, #8
   2b234:	f014 fc83 	bl	3fb3e <at_params_array_put>
   2b238:	e7b2      	b.n	2b1a0 <at_parse_process_element+0xc0>
	} else if (state == NUMBER) {
   2b23a:	2c04      	cmp	r4, #4
   2b23c:	d117      	bne.n	2b26e <at_parse_process_element+0x18e>
		int32_t value = (int32_t)strtol(tmpstr, &next, 10);
   2b23e:	220a      	movs	r2, #10
   2b240:	4628      	mov	r0, r5
   2b242:	a902      	add	r1, sp, #8
   2b244:	f010 fa56 	bl	3b6f4 <strtol>
		tmpstr = next;
   2b248:	9b02      	ldr	r3, [sp, #8]
		int32_t value = (int32_t)strtol(tmpstr, &next, 10);
   2b24a:	4602      	mov	r2, r0
		tmpstr = next;
   2b24c:	9300      	str	r3, [sp, #0]
		if ((value <= SHRT_MAX) && (value >= SHRT_MIN)) {
   2b24e:	f500 4300 	add.w	r3, r0, #32768	; 0x8000
   2b252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   2b256:	d205      	bcs.n	2b264 <at_parse_process_element+0x184>
			at_params_short_put(list, index, (int16_t)value);
   2b258:	b202      	sxth	r2, r0
   2b25a:	4639      	mov	r1, r7
   2b25c:	4630      	mov	r0, r6
   2b25e:	f014 fc09 	bl	3fa74 <at_params_short_put>
   2b262:	e784      	b.n	2b16e <at_parse_process_element+0x8e>
			at_params_int_put(list, index, value);
   2b264:	4639      	mov	r1, r7
   2b266:	4630      	mov	r0, r6
   2b268:	f014 fc2d 	bl	3fac6 <at_params_int_put>
   2b26c:	e77f      	b.n	2b16e <at_parse_process_element+0x8e>
	} else if (state == SMS_PDU) {
   2b26e:	2c05      	cmp	r4, #5
   2b270:	d10b      	bne.n	2b28a <at_parse_process_element+0x1aa>
		while (isxdigit((int)*tmpstr)) {
   2b272:	490e      	ldr	r1, [pc, #56]	; (2b2ac <at_parse_process_element+0x1cc>)
   2b274:	9b00      	ldr	r3, [sp, #0]
   2b276:	781a      	ldrb	r2, [r3, #0]
   2b278:	5c52      	ldrb	r2, [r2, r1]
   2b27a:	f012 0f44 	tst.w	r2, #68	; 0x44
   2b27e:	d101      	bne.n	2b284 <at_parse_process_element+0x1a4>
		at_params_string_put(list, index, start_ptr,
   2b280:	1b5b      	subs	r3, r3, r5
   2b282:	e745      	b.n	2b110 <at_parse_process_element+0x30>
			tmpstr++;
   2b284:	3301      	adds	r3, #1
   2b286:	9300      	str	r3, [sp, #0]
   2b288:	e7f4      	b.n	2b274 <at_parse_process_element+0x194>
	} else if (state == CLAC) {
   2b28a:	2c09      	cmp	r4, #9
   2b28c:	f47f af6f 	bne.w	2b16e <at_parse_process_element+0x8e>
		while (!is_terminated(*tmpstr)) {
   2b290:	9b00      	ldr	r3, [sp, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b292:	781a      	ldrb	r2, [r3, #0]
   2b294:	2a00      	cmp	r2, #0
   2b296:	d0f3      	beq.n	2b280 <at_parse_process_element+0x1a0>
			tmpstr++;
   2b298:	3301      	adds	r3, #1
   2b29a:	9300      	str	r3, [sp, #0]
   2b29c:	e7f8      	b.n	2b290 <at_parse_process_element+0x1b0>
		return -1;
   2b29e:	f04f 30ff 	mov.w	r0, #4294967295
   2b2a2:	e768      	b.n	2b176 <at_parse_process_element+0x96>
   2b2a4:	2002072e 	.word	0x2002072e
   2b2a8:	00024001 	.word	0x00024001
   2b2ac:	0004c29f 	.word	0x0004c29f

0002b2b0 <is_command>:
 *
 * @retval true  If the string is an AT command
 * @retval false Otherwise
 */
static inline bool is_command(const char *str)
{
   2b2b0:	b510      	push	{r4, lr}
   2b2b2:	4604      	mov	r4, r0
	if (strlen(str) < 2) {
   2b2b4:	f7f1 ffd2 	bl	1d25c <strlen>
   2b2b8:	2801      	cmp	r0, #1
   2b2ba:	d922      	bls.n	2b302 <is_command+0x52>
		return false;
	}

	if ((toupper((int)str[0]) != 'A') || (toupper((int)str[1]) != 'T')) {
   2b2bc:	7821      	ldrb	r1, [r4, #0]
   2b2be:	4b13      	ldr	r3, [pc, #76]	; (2b30c <is_command+0x5c>)
   2b2c0:	5cca      	ldrb	r2, [r1, r3]
   2b2c2:	f002 0203 	and.w	r2, r2, #3
   2b2c6:	2a02      	cmp	r2, #2
   2b2c8:	bf08      	it	eq
   2b2ca:	3920      	subeq	r1, #32
   2b2cc:	2941      	cmp	r1, #65	; 0x41
   2b2ce:	461a      	mov	r2, r3
   2b2d0:	d117      	bne.n	2b302 <is_command+0x52>
   2b2d2:	7863      	ldrb	r3, [r4, #1]
   2b2d4:	5cd2      	ldrb	r2, [r2, r3]
   2b2d6:	f002 0203 	and.w	r2, r2, #3
   2b2da:	2a02      	cmp	r2, #2
   2b2dc:	bf08      	it	eq
   2b2de:	3b20      	subeq	r3, #32
   2b2e0:	2b54      	cmp	r3, #84	; 0x54
   2b2e2:	d10e      	bne.n	2b302 <is_command+0x52>
	}

	/* Third character has be one of the command special characters.
	 * The special case is a lone "AT" command.
	 */
	if ((str[2] == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b2e4:	78a2      	ldrb	r2, [r4, #2]
   2b2e6:	2a25      	cmp	r2, #37	; 0x25
   2b2e8:	d00d      	beq.n	2b306 <is_command+0x56>
	    (str[2] == AT_PROP_NOTIFICATION_PREFX) ||
   2b2ea:	f002 03f7 	and.w	r3, r2, #247	; 0xf7
   2b2ee:	2b23      	cmp	r3, #35	; 0x23
   2b2f0:	d009      	beq.n	2b306 <is_command+0x56>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
	    is_lfcr(str[2]) || is_terminated(str[2])) {
   2b2f2:	4610      	mov	r0, r2
   2b2f4:	f014 fb83 	bl	3f9fe <is_lfcr>
	    (str[2] == AT_CUSTOM_COMMAND_PREFX) ||
   2b2f8:	b910      	cbnz	r0, 2b300 <is_command+0x50>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b2fa:	fab2 f082 	clz	r0, r2
   2b2fe:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   2b300:	bd10      	pop	{r4, pc}
		return false;
   2b302:	2000      	movs	r0, #0
   2b304:	e7fc      	b.n	2b300 <is_command+0x50>
		return true;
   2b306:	2001      	movs	r0, #1
   2b308:	e7fa      	b.n	2b300 <is_command+0x50>
   2b30a:	bf00      	nop
   2b30c:	0004c29f 	.word	0x0004c29f

0002b310 <at_parse_detect_type>:
{
   2b310:	b570      	push	{r4, r5, r6, lr}
   2b312:	4605      	mov	r5, r0
	const char *tmpstr = *str;
   2b314:	6804      	ldr	r4, [r0, #0]
	if ((index == 0) && is_notification(*tmpstr)) {
   2b316:	4e5e      	ldr	r6, [pc, #376]	; (2b490 <at_parse_detect_type+0x180>)
   2b318:	2900      	cmp	r1, #0
   2b31a:	d137      	bne.n	2b38c <at_parse_detect_type+0x7c>
   2b31c:	7823      	ldrb	r3, [r4, #0]
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b31e:	2b2b      	cmp	r3, #43	; 0x2b
   2b320:	d001      	beq.n	2b326 <at_parse_detect_type+0x16>
   2b322:	2b25      	cmp	r3, #37	; 0x25
   2b324:	d132      	bne.n	2b38c <at_parse_detect_type+0x7c>
	state = new_state;
   2b326:	2206      	movs	r2, #6
   2b328:	4b5a      	ldr	r3, [pc, #360]	; (2b494 <at_parse_detect_type+0x184>)
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2b32a:	4620      	mov	r0, r4
	state = new_state;
   2b32c:	701a      	strb	r2, [r3, #0]
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2b32e:	495a      	ldr	r1, [pc, #360]	; (2b498 <at_parse_detect_type+0x188>)
   2b330:	2205      	movs	r2, #5
   2b332:	f016 febd 	bl	420b0 <strncmp>
   2b336:	b920      	cbnz	r0, 2b342 <at_parse_detect_type+0x32>
			retval = true;
   2b338:	2301      	movs	r3, #1
	state = new_state;
   2b33a:	7033      	strb	r3, [r6, #0]
	return 0;
   2b33c:	2000      	movs	r0, #0
	*str = tmpstr;
   2b33e:	602c      	str	r4, [r5, #0]
}
   2b340:	bd70      	pop	{r4, r5, r6, pc}
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2b342:	2205      	movs	r2, #5
   2b344:	4620      	mov	r0, r4
   2b346:	4955      	ldr	r1, [pc, #340]	; (2b49c <at_parse_detect_type+0x18c>)
   2b348:	f016 feb2 	bl	420b0 <strncmp>
	if (!strncmp(tmpstr, "+CGEV", AT_CMD_CGEV_LEN) ||
   2b34c:	2800      	cmp	r0, #0
   2b34e:	d0f3      	beq.n	2b338 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2b350:	220b      	movs	r2, #11
   2b352:	4620      	mov	r0, r4
   2b354:	4952      	ldr	r1, [pc, #328]	; (2b4a0 <at_parse_detect_type+0x190>)
   2b356:	f016 feab 	bl	420b0 <strncmp>
	    !strncmp(tmpstr, "+CPIN", AT_CMD_CPIN_LEN) ||
   2b35a:	2800      	cmp	r0, #0
   2b35c:	d0ec      	beq.n	2b338 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2b35e:	220a      	movs	r2, #10
   2b360:	4620      	mov	r0, r4
   2b362:	4950      	ldr	r1, [pc, #320]	; (2b4a4 <at_parse_detect_type+0x194>)
   2b364:	f016 fea4 	bl	420b0 <strncmp>
	    !strncmp(tmpstr, "%SHORTSWVER", AT_CMD_SHORTSWVER_LEN) ||
   2b368:	2800      	cmp	r0, #0
   2b36a:	d0e5      	beq.n	2b338 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   2b36c:	220b      	movs	r2, #11
   2b36e:	4620      	mov	r0, r4
   2b370:	494d      	ldr	r1, [pc, #308]	; (2b4a8 <at_parse_detect_type+0x198>)
   2b372:	f016 fe9d 	bl	420b0 <strncmp>
	    !strncmp(tmpstr, "%HWVERSION", AT_CMD_HWVERSION_LEN) ||
   2b376:	2800      	cmp	r0, #0
   2b378:	d0de      	beq.n	2b338 <at_parse_detect_type+0x28>
	    !strncmp(tmpstr, "%XICCID", AT_CMD_XICCID_LEN)) {
   2b37a:	2207      	movs	r2, #7
   2b37c:	4620      	mov	r0, r4
   2b37e:	494b      	ldr	r1, [pc, #300]	; (2b4ac <at_parse_detect_type+0x19c>)
   2b380:	f016 fe96 	bl	420b0 <strncmp>
	    !strncmp(tmpstr, "%XMODEMUUID", AT_CMD_XMODEMUUID_LEN) ||
   2b384:	fab0 f380 	clz	r3, r0
   2b388:	095b      	lsrs	r3, r3, #5
	return retval;
   2b38a:	e7d6      	b.n	2b33a <at_parse_detect_type+0x2a>
	} else if (set_type_string) {
   2b38c:	7833      	ldrb	r3, [r6, #0]
   2b38e:	b11b      	cbz	r3, 2b398 <at_parse_detect_type+0x88>
	state = new_state;
   2b390:	2202      	movs	r2, #2
   2b392:	4b40      	ldr	r3, [pc, #256]	; (2b494 <at_parse_detect_type+0x184>)
   2b394:	701a      	strb	r2, [r3, #0]
}
   2b396:	e7d1      	b.n	2b33c <at_parse_detect_type+0x2c>
	} else if ((index == 0) && is_clac(tmpstr)) {
   2b398:	2900      	cmp	r1, #0
   2b39a:	d168      	bne.n	2b46e <at_parse_detect_type+0x15e>
 * @retval true  If the string is a CLAC response
 * @retval false Otherwise
 */
static bool is_clac(const char *str)
{
	if (strlen(str) < 4) {
   2b39c:	4620      	mov	r0, r4
   2b39e:	f7f1 ff5d 	bl	1d25c <strlen>
   2b3a2:	2803      	cmp	r0, #3
   2b3a4:	4e3b      	ldr	r6, [pc, #236]	; (2b494 <at_parse_detect_type+0x184>)
   2b3a6:	d95b      	bls.n	2b460 <at_parse_detect_type+0x150>
		return false;
	}

	if ((toupper(str[0]) != 'A') || (toupper(str[1]) != 'T')) {
   2b3a8:	7822      	ldrb	r2, [r4, #0]
   2b3aa:	4b41      	ldr	r3, [pc, #260]	; (2b4b0 <at_parse_detect_type+0x1a0>)
   2b3ac:	5cd1      	ldrb	r1, [r2, r3]
   2b3ae:	f001 0103 	and.w	r1, r1, #3
   2b3b2:	2902      	cmp	r1, #2
   2b3b4:	bf08      	it	eq
   2b3b6:	3a20      	subeq	r2, #32
   2b3b8:	2a41      	cmp	r2, #65	; 0x41
   2b3ba:	d151      	bne.n	2b460 <at_parse_detect_type+0x150>
   2b3bc:	7862      	ldrb	r2, [r4, #1]
   2b3be:	5c99      	ldrb	r1, [r3, r2]
   2b3c0:	f001 0103 	and.w	r1, r1, #3
   2b3c4:	2902      	cmp	r1, #2
   2b3c6:	bf08      	it	eq
   2b3c8:	3a20      	subeq	r2, #32
   2b3ca:	2a54      	cmp	r2, #84	; 0x54
   2b3cc:	d148      	bne.n	2b460 <at_parse_detect_type+0x150>
		/* Not an AT command */
		return false;
	}

	if ((toupper(str[2]) != '+') && (toupper(str[2]) != '%')) {
   2b3ce:	78a2      	ldrb	r2, [r4, #2]
   2b3d0:	5c99      	ldrb	r1, [r3, r2]
   2b3d2:	f001 0103 	and.w	r1, r1, #3
   2b3d6:	2902      	cmp	r1, #2
   2b3d8:	bf08      	it	eq
   2b3da:	3a20      	subeq	r2, #32
   2b3dc:	2a2b      	cmp	r2, #43	; 0x2b
   2b3de:	d00a      	beq.n	2b3f6 <at_parse_detect_type+0xe6>
   2b3e0:	2a25      	cmp	r2, #37	; 0x25
   2b3e2:	d13d      	bne.n	2b460 <at_parse_detect_type+0x150>
		/* Neither AT+ nor AT% */
		return false;
	}

	if ((toupper(str[2]) == '%') && (toupper(str[3]) == 'X')) {
   2b3e4:	78e2      	ldrb	r2, [r4, #3]
   2b3e6:	5c9b      	ldrb	r3, [r3, r2]
   2b3e8:	f003 0303 	and.w	r3, r3, #3
   2b3ec:	2b02      	cmp	r3, #2
   2b3ee:	bf08      	it	eq
   2b3f0:	3a20      	subeq	r2, #32
   2b3f2:	2a58      	cmp	r2, #88	; 0x58
   2b3f4:	d034      	beq.n	2b460 <at_parse_detect_type+0x150>
	state = new_state;
   2b3f6:	2309      	movs	r3, #9
   2b3f8:	e79f      	b.n	2b33a <at_parse_detect_type+0x2a>
   2b3fa:	2307      	movs	r3, #7
   2b3fc:	e79d      	b.n	2b33a <at_parse_detect_type+0x2a>
	if (chr == '"') {
   2b3fe:	2a22      	cmp	r2, #34	; 0x22
   2b400:	d006      	beq.n	2b410 <at_parse_detect_type+0x100>
	if (chr == '(') {
   2b402:	2a28      	cmp	r2, #40	; 0x28
   2b404:	d109      	bne.n	2b41a <at_parse_detect_type+0x10a>
   2b406:	2201      	movs	r2, #1
   2b408:	4b22      	ldr	r3, [pc, #136]	; (2b494 <at_parse_detect_type+0x184>)
		tmpstr++;
   2b40a:	4414      	add	r4, r2
	state = new_state;
   2b40c:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2b40e:	e795      	b.n	2b33c <at_parse_detect_type+0x2c>
	state = new_state;
   2b410:	2203      	movs	r2, #3
   2b412:	4b20      	ldr	r3, [pc, #128]	; (2b494 <at_parse_detect_type+0x184>)
		tmpstr++;
   2b414:	3401      	adds	r4, #1
	state = new_state;
   2b416:	701a      	strb	r2, [r3, #0]
		tmpstr++;
   2b418:	e790      	b.n	2b33c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == NUMBER)) {
   2b41a:	4610      	mov	r0, r2
   2b41c:	f014 faef 	bl	3f9fe <is_lfcr>
   2b420:	b178      	cbz	r0, 2b442 <at_parse_detect_type+0x132>
   2b422:	491c      	ldr	r1, [pc, #112]	; (2b494 <at_parse_detect_type+0x184>)
   2b424:	7808      	ldrb	r0, [r1, #0]
   2b426:	2804      	cmp	r0, #4
   2b428:	d108      	bne.n	2b43c <at_parse_detect_type+0x12c>
		while (is_lfcr(*tmpstr)) {
   2b42a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2b42e:	f014 fae6 	bl	3f9fe <is_lfcr>
   2b432:	2800      	cmp	r0, #0
   2b434:	d1f9      	bne.n	2b42a <at_parse_detect_type+0x11a>
	state = new_state;
   2b436:	2305      	movs	r3, #5
   2b438:	700b      	strb	r3, [r1, #0]
}
   2b43a:	e77f      	b.n	2b33c <at_parse_detect_type+0x2c>
	} else if (is_lfcr(*tmpstr) && (state == OPTIONAL)) {
   2b43c:	2808      	cmp	r0, #8
   2b43e:	f43f af7d 	beq.w	2b33c <at_parse_detect_type+0x2c>
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b442:	3a2c      	subs	r2, #44	; 0x2c
   2b444:	b2d2      	uxtb	r2, r2
   2b446:	2a11      	cmp	r2, #17
   2b448:	d807      	bhi.n	2b45a <at_parse_detect_type+0x14a>
   2b44a:	4b1a      	ldr	r3, [pc, #104]	; (2b4b4 <at_parse_detect_type+0x1a4>)
   2b44c:	fa23 f202 	lsr.w	r2, r3, r2
   2b450:	07d3      	lsls	r3, r2, #31
   2b452:	d502      	bpl.n	2b45a <at_parse_detect_type+0x14a>
	state = new_state;
   2b454:	2208      	movs	r2, #8
   2b456:	4b0f      	ldr	r3, [pc, #60]	; (2b494 <at_parse_detect_type+0x184>)
   2b458:	e79c      	b.n	2b394 <at_parse_detect_type+0x84>
		return -1;
   2b45a:	f04f 30ff 	mov.w	r0, #4294967295
   2b45e:	e76f      	b.n	2b340 <at_parse_detect_type+0x30>
	} else if ((index == 0) && is_command(tmpstr)) {
   2b460:	4620      	mov	r0, r4
   2b462:	f7ff ff25 	bl	2b2b0 <is_command>
   2b466:	2800      	cmp	r0, #0
   2b468:	d1c7      	bne.n	2b3fa <at_parse_detect_type+0xea>
	state = new_state;
   2b46a:	2302      	movs	r3, #2
   2b46c:	e765      	b.n	2b33a <at_parse_detect_type+0x2a>
	} else if ((index > 0) && is_notification(*tmpstr)) {
   2b46e:	7822      	ldrb	r2, [r4, #0]
   2b470:	dd03      	ble.n	2b47a <at_parse_detect_type+0x16a>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b472:	2a2b      	cmp	r2, #43	; 0x2b
   2b474:	d0f1      	beq.n	2b45a <at_parse_detect_type+0x14a>
   2b476:	2a25      	cmp	r2, #37	; 0x25
   2b478:	d0ef      	beq.n	2b45a <at_parse_detect_type+0x14a>
	if (isdigit((int)chr) || (chr == '-') || (chr == '+')) {
   2b47a:	4b0d      	ldr	r3, [pc, #52]	; (2b4b0 <at_parse_detect_type+0x1a0>)
   2b47c:	5cd3      	ldrb	r3, [r2, r3]
   2b47e:	0759      	lsls	r1, r3, #29
   2b480:	d403      	bmi.n	2b48a <at_parse_detect_type+0x17a>
   2b482:	2a2d      	cmp	r2, #45	; 0x2d
   2b484:	d001      	beq.n	2b48a <at_parse_detect_type+0x17a>
   2b486:	2a2b      	cmp	r2, #43	; 0x2b
   2b488:	d1b9      	bne.n	2b3fe <at_parse_detect_type+0xee>
	state = new_state;
   2b48a:	2204      	movs	r2, #4
   2b48c:	4b01      	ldr	r3, [pc, #4]	; (2b494 <at_parse_detect_type+0x184>)
   2b48e:	e781      	b.n	2b394 <at_parse_detect_type+0x84>
   2b490:	2002072d 	.word	0x2002072d
   2b494:	2002072e 	.word	0x2002072e
   2b498:	00047524 	.word	0x00047524
   2b49c:	0004752a 	.word	0x0004752a
   2b4a0:	00047530 	.word	0x00047530
   2b4a4:	0004753c 	.word	0x0004753c
   2b4a8:	00047547 	.word	0x00047547
   2b4ac:	00047553 	.word	0x00047553
   2b4b0:	0004c29f 	.word	0x0004c29f
   2b4b4:	00024001 	.word	0x00024001

0002b4b8 <at_parser_max_params_from_str>:

int at_parser_max_params_from_str(const char *at_params_str,
				  char **next_param_str,
				  struct at_param_list *const list,
				  size_t max_params_count)
{
   2b4b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b4bc:	4688      	mov	r8, r1
   2b4be:	4616      	mov	r6, r2
   2b4c0:	461f      	mov	r7, r3
	int err = 0;

	if (at_params_str == NULL || list == NULL || list->params == NULL) {
   2b4c2:	4604      	mov	r4, r0
   2b4c4:	2800      	cmp	r0, #0
   2b4c6:	f000 8081 	beq.w	2b5cc <at_parser_max_params_from_str+0x114>
   2b4ca:	2a00      	cmp	r2, #0
   2b4cc:	d07e      	beq.n	2b5cc <at_parser_max_params_from_str+0x114>
   2b4ce:	6853      	ldr	r3, [r2, #4]
   2b4d0:	2b00      	cmp	r3, #0
   2b4d2:	d07b      	beq.n	2b5cc <at_parser_max_params_from_str+0x114>
	state = IDLE;
   2b4d4:	2500      	movs	r5, #0
		return -EINVAL;
	}

	at_params_list_clear(list);
   2b4d6:	4610      	mov	r0, r2
   2b4d8:	f000 f8f0 	bl	2b6bc <at_params_list_clear>
	const char *str = *at_params_str;
   2b4dc:	9401      	str	r4, [sp, #4]
	int index = 0;
   2b4de:	462c      	mov	r4, r5

	max_params_count = MIN(max_params_count, list->param_count);
   2b4e0:	6833      	ldr	r3, [r6, #0]
		if (isspace((int)*str)) {
   2b4e2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 2b5dc <at_parser_max_params_from_str+0x124>
	max_params_count = MIN(max_params_count, list->param_count);
   2b4e6:	429f      	cmp	r7, r3
   2b4e8:	bf28      	it	cs
   2b4ea:	461f      	movcs	r7, r3
	state = IDLE;
   2b4ec:	4b39      	ldr	r3, [pc, #228]	; (2b5d4 <at_parser_max_params_from_str+0x11c>)
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b4ee:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2b5e0 <at_parser_max_params_from_str+0x128>
   2b4f2:	701d      	strb	r5, [r3, #0]
	set_type_string = false;
   2b4f4:	4b38      	ldr	r3, [pc, #224]	; (2b5d8 <at_parser_max_params_from_str+0x120>)
   2b4f6:	701d      	strb	r5, [r3, #0]
	while ((!is_terminated(*str)) && (index < max_params)) {
   2b4f8:	9b01      	ldr	r3, [sp, #4]
   2b4fa:	781a      	ldrb	r2, [r3, #0]
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b4fc:	2a00      	cmp	r2, #0
   2b4fe:	d04b      	beq.n	2b598 <at_parser_max_params_from_str+0xe0>
   2b500:	42a7      	cmp	r7, r4
   2b502:	d949      	bls.n	2b598 <at_parser_max_params_from_str+0xe0>
		if (isspace((int)*str)) {
   2b504:	f812 2009 	ldrb.w	r2, [r2, r9]
		if (at_parse_detect_type(&str, index) == -1) {
   2b508:	a801      	add	r0, sp, #4
		if (isspace((int)*str)) {
   2b50a:	0711      	lsls	r1, r2, #28
			str++;
   2b50c:	bf48      	it	mi
   2b50e:	3301      	addmi	r3, #1
		if (at_parse_detect_type(&str, index) == -1) {
   2b510:	4621      	mov	r1, r4
			str++;
   2b512:	bf48      	it	mi
   2b514:	9301      	strmi	r3, [sp, #4]
		if (at_parse_detect_type(&str, index) == -1) {
   2b516:	f7ff fefb 	bl	2b310 <at_parse_detect_type>
   2b51a:	1c42      	adds	r2, r0, #1
   2b51c:	d03c      	beq.n	2b598 <at_parser_max_params_from_str+0xe0>
		if (at_parse_process_element(&str, index, list) == -1) {
   2b51e:	4632      	mov	r2, r6
   2b520:	4621      	mov	r1, r4
   2b522:	a801      	add	r0, sp, #4
   2b524:	f7ff fddc 	bl	2b0e0 <at_parse_process_element>
   2b528:	1c43      	adds	r3, r0, #1
   2b52a:	d035      	beq.n	2b598 <at_parser_max_params_from_str+0xe0>
		if (is_separator(*str)) {
   2b52c:	9b01      	ldr	r3, [sp, #4]
	if ((chr == AT_PARAM_SEPARATOR) || (chr == AT_RSP_SEPARATOR) ||
   2b52e:	781a      	ldrb	r2, [r3, #0]
   2b530:	3a2c      	subs	r2, #44	; 0x2c
   2b532:	b2d2      	uxtb	r2, r2
   2b534:	2a11      	cmp	r2, #17
   2b536:	d81a      	bhi.n	2b56e <at_parser_max_params_from_str+0xb6>
   2b538:	fa2a f202 	lsr.w	r2, sl, r2
   2b53c:	07d1      	lsls	r1, r2, #31
   2b53e:	d516      	bpl.n	2b56e <at_parser_max_params_from_str+0xb6>
			if (is_lfcr(*(str + 1))) {
   2b540:	7858      	ldrb	r0, [r3, #1]
   2b542:	f014 fa5c 	bl	3f9fe <is_lfcr>
   2b546:	b178      	cbz	r0, 2b568 <at_parser_max_params_from_str+0xb0>
				index++;
   2b548:	3401      	adds	r4, #1
				if (index == max_params) {
   2b54a:	42bc      	cmp	r4, r7
   2b54c:	d039      	beq.n	2b5c2 <at_parser_max_params_from_str+0x10a>
				if (at_parse_detect_type(&str, index) == -1) {
   2b54e:	4621      	mov	r1, r4
   2b550:	a801      	add	r0, sp, #4
   2b552:	f7ff fedd 	bl	2b310 <at_parse_detect_type>
   2b556:	1c42      	adds	r2, r0, #1
   2b558:	d01e      	beq.n	2b598 <at_parser_max_params_from_str+0xe0>
				if (at_parse_process_element(&str, index,
   2b55a:	4632      	mov	r2, r6
   2b55c:	4621      	mov	r1, r4
   2b55e:	a801      	add	r0, sp, #4
   2b560:	f7ff fdbe 	bl	2b0e0 <at_parse_process_element>
   2b564:	1c43      	adds	r3, r0, #1
   2b566:	d017      	beq.n	2b598 <at_parser_max_params_from_str+0xe0>
			str++;
   2b568:	9b01      	ldr	r3, [sp, #4]
   2b56a:	3301      	adds	r3, #1
   2b56c:	9301      	str	r3, [sp, #4]
		if (is_lfcr(*str)) {
   2b56e:	9a01      	ldr	r2, [sp, #4]
   2b570:	7810      	ldrb	r0, [r2, #0]
   2b572:	f014 fa44 	bl	3f9fe <is_lfcr>
   2b576:	b1f8      	cbz	r0, 2b5b8 <at_parser_max_params_from_str+0x100>
   2b578:	3201      	adds	r2, #1
			while (is_lfcr(str[++i])) {
   2b57a:	7811      	ldrb	r1, [r2, #0]
   2b57c:	4693      	mov	fp, r2
   2b57e:	4608      	mov	r0, r1
   2b580:	3201      	adds	r2, #1
   2b582:	f014 fa3c 	bl	3f9fe <is_lfcr>
   2b586:	2800      	cmp	r0, #0
   2b588:	d1f7      	bne.n	2b57a <at_parser_max_params_from_str+0xc2>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b58a:	b119      	cbz	r1, 2b594 <at_parser_max_params_from_str+0xdc>
	if ((chr == AT_STANDARD_NOTIFICATION_PREFIX) ||
   2b58c:	292b      	cmp	r1, #43	; 0x2b
   2b58e:	d001      	beq.n	2b594 <at_parser_max_params_from_str+0xdc>
   2b590:	2925      	cmp	r1, #37	; 0x25
   2b592:	d111      	bne.n	2b5b8 <at_parser_max_params_from_str+0x100>
				str += i;
   2b594:	f8cd b004 	str.w	fp, [sp, #4]
	*at_params_str = str;
   2b598:	9b01      	ldr	r3, [sp, #4]
	if (oversized) {
   2b59a:	b9a5      	cbnz	r5, 2b5c6 <at_parser_max_params_from_str+0x10e>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   2b59c:	781a      	ldrb	r2, [r3, #0]
		return -EAGAIN;
   2b59e:	2a00      	cmp	r2, #0
   2b5a0:	bf0c      	ite	eq
   2b5a2:	2000      	moveq	r0, #0
   2b5a4:	f06f 000a 	mvnne.w	r0, #10

	err = at_parse_param(&at_params_str, list, max_params_count);

	if (next_param_str) {
   2b5a8:	f1b8 0f00 	cmp.w	r8, #0
   2b5ac:	d001      	beq.n	2b5b2 <at_parser_max_params_from_str+0xfa>
		*next_param_str = (char *)at_params_str;
   2b5ae:	f8c8 3000 	str.w	r3, [r8]
	}

	return err;
}
   2b5b2:	b003      	add	sp, #12
   2b5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		index++;
   2b5b8:	3401      	adds	r4, #1
			oversized = true;
   2b5ba:	42bc      	cmp	r4, r7
   2b5bc:	bf08      	it	eq
   2b5be:	2501      	moveq	r5, #1
   2b5c0:	e79a      	b.n	2b4f8 <at_parser_max_params_from_str+0x40>
					oversized = true;
   2b5c2:	4605      	mov	r5, r0
   2b5c4:	e7e8      	b.n	2b598 <at_parser_max_params_from_str+0xe0>
		return -E2BIG;
   2b5c6:	f06f 0006 	mvn.w	r0, #6
   2b5ca:	e7ed      	b.n	2b5a8 <at_parser_max_params_from_str+0xf0>
		return -EINVAL;
   2b5cc:	f06f 0015 	mvn.w	r0, #21
   2b5d0:	e7ef      	b.n	2b5b2 <at_parser_max_params_from_str+0xfa>
   2b5d2:	bf00      	nop
   2b5d4:	2002072e 	.word	0x2002072e
   2b5d8:	2002072d 	.word	0x2002072d
   2b5dc:	0004c29f 	.word	0x0004c29f
   2b5e0:	00024001 	.word	0x00024001

0002b5e4 <at_params_get>:
}

/* Internal function. Parameter cannot be null. */
static struct at_param *at_params_get(const struct at_param_list *list,
				      size_t index)
{
   2b5e4:	b538      	push	{r3, r4, r5, lr}
   2b5e6:	460c      	mov	r4, r1
	__ASSERT(list != NULL, "Parameter list cannot be NULL.");
   2b5e8:	4605      	mov	r5, r0
   2b5ea:	b960      	cbnz	r0, 2b606 <at_params_get+0x22>
   2b5ec:	490a      	ldr	r1, [pc, #40]	; (2b618 <at_params_get+0x34>)
   2b5ee:	232b      	movs	r3, #43	; 0x2b
   2b5f0:	4a0a      	ldr	r2, [pc, #40]	; (2b61c <at_params_get+0x38>)
   2b5f2:	480b      	ldr	r0, [pc, #44]	; (2b620 <at_params_get+0x3c>)
   2b5f4:	f011 fbbf 	bl	3cd76 <printk>
   2b5f8:	480a      	ldr	r0, [pc, #40]	; (2b624 <at_params_get+0x40>)
   2b5fa:	f011 fbbc 	bl	3cd76 <printk>
   2b5fe:	212b      	movs	r1, #43	; 0x2b
   2b600:	4806      	ldr	r0, [pc, #24]	; (2b61c <at_params_get+0x38>)
   2b602:	f011 fe6c 	bl	3d2de <assert_post_action>

	if (index >= list->param_count) {
   2b606:	682b      	ldr	r3, [r5, #0]
   2b608:	42a3      	cmp	r3, r4
		return NULL;
	}

	struct at_param *param = list->params;

	return &param[index];
   2b60a:	bf85      	ittet	hi
   2b60c:	210c      	movhi	r1, #12
   2b60e:	6868      	ldrhi	r0, [r5, #4]
		return NULL;
   2b610:	2000      	movls	r0, #0
	return &param[index];
   2b612:	fb01 0004 	mlahi	r0, r1, r4, r0
}
   2b616:	bd38      	pop	{r3, r4, r5, pc}
   2b618:	00047589 	.word	0x00047589
   2b61c:	0004755b 	.word	0x0004755b
   2b620:	00044dbf 	.word	0x00044dbf
   2b624:	0004759d 	.word	0x0004759d

0002b628 <at_param_size>:

/* Internal function. Parameter cannot be null. */
static size_t at_param_size(const struct at_param *param)
{
   2b628:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b62a:	4604      	mov	r4, r0
   2b62c:	b960      	cbnz	r0, 2b648 <at_param_size+0x20>
   2b62e:	490e      	ldr	r1, [pc, #56]	; (2b668 <at_param_size+0x40>)
   2b630:	2339      	movs	r3, #57	; 0x39
   2b632:	4a0e      	ldr	r2, [pc, #56]	; (2b66c <at_param_size+0x44>)
   2b634:	480e      	ldr	r0, [pc, #56]	; (2b670 <at_param_size+0x48>)
   2b636:	f011 fb9e 	bl	3cd76 <printk>
   2b63a:	480e      	ldr	r0, [pc, #56]	; (2b674 <at_param_size+0x4c>)
   2b63c:	f011 fb9b 	bl	3cd76 <printk>
   2b640:	2139      	movs	r1, #57	; 0x39
   2b642:	480a      	ldr	r0, [pc, #40]	; (2b66c <at_param_size+0x44>)
   2b644:	f011 fe4b 	bl	3d2de <assert_post_action>

	if (param->type == AT_PARAM_TYPE_NUM_SHORT) {
   2b648:	7823      	ldrb	r3, [r4, #0]
   2b64a:	2b01      	cmp	r3, #1
   2b64c:	d006      	beq.n	2b65c <at_param_size+0x34>
		return sizeof(uint16_t);
	} else if (param->type == AT_PARAM_TYPE_NUM_INT) {
   2b64e:	2b02      	cmp	r3, #2
   2b650:	d006      	beq.n	2b660 <at_param_size+0x38>
		return sizeof(uint32_t);
	} else if ((param->type == AT_PARAM_TYPE_STRING) ||
   2b652:	3b03      	subs	r3, #3
   2b654:	2b01      	cmp	r3, #1
   2b656:	d805      	bhi.n	2b664 <at_param_size+0x3c>
		   (param->type == AT_PARAM_TYPE_ARRAY)) {
		return param->size;
   2b658:	6860      	ldr	r0, [r4, #4]
	}

	return 0;
}
   2b65a:	bd10      	pop	{r4, pc}
		return sizeof(uint16_t);
   2b65c:	2002      	movs	r0, #2
   2b65e:	e7fc      	b.n	2b65a <at_param_size+0x32>
		return sizeof(uint32_t);
   2b660:	2004      	movs	r0, #4
   2b662:	e7fa      	b.n	2b65a <at_param_size+0x32>
	return 0;
   2b664:	2000      	movs	r0, #0
   2b666:	e7f8      	b.n	2b65a <at_param_size+0x32>
   2b668:	000475be 	.word	0x000475be
   2b66c:	0004755b 	.word	0x0004755b
   2b670:	00044dbf 	.word	0x00044dbf
   2b674:	000475d3 	.word	0x000475d3

0002b678 <at_param_clear>:
{
   2b678:	b510      	push	{r4, lr}
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b67a:	4604      	mov	r4, r0
   2b67c:	b960      	cbnz	r0, 2b698 <at_param_clear+0x20>
   2b67e:	490b      	ldr	r1, [pc, #44]	; (2b6ac <at_param_clear+0x34>)
   2b680:	231d      	movs	r3, #29
   2b682:	4a0b      	ldr	r2, [pc, #44]	; (2b6b0 <at_param_clear+0x38>)
   2b684:	480b      	ldr	r0, [pc, #44]	; (2b6b4 <at_param_clear+0x3c>)
   2b686:	f011 fb76 	bl	3cd76 <printk>
   2b68a:	480b      	ldr	r0, [pc, #44]	; (2b6b8 <at_param_clear+0x40>)
   2b68c:	f011 fb73 	bl	3cd76 <printk>
   2b690:	211d      	movs	r1, #29
   2b692:	4807      	ldr	r0, [pc, #28]	; (2b6b0 <at_param_clear+0x38>)
   2b694:	f011 fe23 	bl	3d2de <assert_post_action>
	if ((param->type == AT_PARAM_TYPE_STRING) ||
   2b698:	7823      	ldrb	r3, [r4, #0]
   2b69a:	3b03      	subs	r3, #3
   2b69c:	2b01      	cmp	r3, #1
   2b69e:	d802      	bhi.n	2b6a6 <at_param_clear+0x2e>
		k_free(param->value.str_val);
   2b6a0:	68a0      	ldr	r0, [r4, #8]
   2b6a2:	f016 fab9 	bl	41c18 <k_free>
	param->value.int_val = 0;
   2b6a6:	2300      	movs	r3, #0
   2b6a8:	60a3      	str	r3, [r4, #8]
}
   2b6aa:	bd10      	pop	{r4, pc}
   2b6ac:	000475be 	.word	0x000475be
   2b6b0:	0004755b 	.word	0x0004755b
   2b6b4:	00044dbf 	.word	0x00044dbf
   2b6b8:	000475d3 	.word	0x000475d3

0002b6bc <at_params_list_clear>:
	list->param_count = max_params_count;
	return 0;
}

void at_params_list_clear(struct at_param_list *list)
{
   2b6bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (list == NULL || list->params == NULL) {
   2b6c0:	4604      	mov	r4, r0
   2b6c2:	b158      	cbz	r0, 2b6dc <at_params_list_clear+0x20>
   2b6c4:	6843      	ldr	r3, [r0, #4]
   2b6c6:	b14b      	cbz	r3, 2b6dc <at_params_list_clear+0x20>
		return;
	}

	for (size_t i = 0; i < list->param_count; ++i) {
   2b6c8:	2500      	movs	r5, #0
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b6ca:	f8df b054 	ldr.w	fp, [pc, #84]	; 2b720 <at_params_list_clear+0x64>
   2b6ce:	f8df 9054 	ldr.w	r9, [pc, #84]	; 2b724 <at_params_list_clear+0x68>
   2b6d2:	f8df a054 	ldr.w	sl, [pc, #84]	; 2b728 <at_params_list_clear+0x6c>
	for (size_t i = 0; i < list->param_count; ++i) {
   2b6d6:	6823      	ldr	r3, [r4, #0]
   2b6d8:	429d      	cmp	r5, r3
   2b6da:	d301      	bcc.n	2b6e0 <at_params_list_clear+0x24>
		struct at_param *params = list->params;

		at_param_clear(&params[i]);
		at_param_init(&params[i]);
	}
}
   2b6dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		at_param_clear(&params[i]);
   2b6e0:	270c      	movs	r7, #12
   2b6e2:	436f      	muls	r7, r5
   2b6e4:	f8d4 8004 	ldr.w	r8, [r4, #4]
   2b6e8:	eb08 0607 	add.w	r6, r8, r7
   2b6ec:	4630      	mov	r0, r6
   2b6ee:	f7ff ffc3 	bl	2b678 <at_param_clear>
	__ASSERT(param != NULL, "Parameter cannot be NULL.");
   2b6f2:	b966      	cbnz	r6, 2b70e <at_params_list_clear+0x52>
   2b6f4:	4649      	mov	r1, r9
   2b6f6:	2314      	movs	r3, #20
   2b6f8:	465a      	mov	r2, fp
   2b6fa:	4650      	mov	r0, sl
   2b6fc:	f011 fb3b 	bl	3cd76 <printk>
   2b700:	4806      	ldr	r0, [pc, #24]	; (2b71c <at_params_list_clear+0x60>)
   2b702:	f011 fb38 	bl	3cd76 <printk>
   2b706:	2114      	movs	r1, #20
   2b708:	4658      	mov	r0, fp
   2b70a:	f011 fde8 	bl	3d2de <assert_post_action>
   2b70e:	2300      	movs	r3, #0
	for (size_t i = 0; i < list->param_count; ++i) {
   2b710:	3501      	adds	r5, #1
   2b712:	f848 3007 	str.w	r3, [r8, r7]
   2b716:	6073      	str	r3, [r6, #4]
   2b718:	60b3      	str	r3, [r6, #8]
   2b71a:	e7dc      	b.n	2b6d6 <at_params_list_clear+0x1a>
   2b71c:	000475d3 	.word	0x000475d3
   2b720:	0004755b 	.word	0x0004755b
   2b724:	000475be 	.word	0x000475be
   2b728:	00044dbf 	.word	0x00044dbf

0002b72c <parse_psm_cfg>:
	char timer_str[9] = {0};
   2b72c:	2300      	movs	r3, #0
{
   2b72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b732:	b086      	sub	sp, #24
	char timer_str[9] = {0};
   2b734:	e9cd 3303 	strd	r3, r3, [sp, #12]
   2b738:	f88d 3014 	strb.w	r3, [sp, #20]
	char unit_str[4] = {0};
   2b73c:	9301      	str	r3, [sp, #4]
	size_t timer_str_len = sizeof(timer_str) - 1;
   2b73e:	2308      	movs	r3, #8
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2b740:	2900      	cmp	r1, #0
	size_t timer_str_len = sizeof(timer_str) - 1;
   2b742:	9302      	str	r3, [sp, #8]
{
   2b744:	4616      	mov	r6, r2
	err = at_params_string_get(at_params,
   2b746:	bf14      	ite	ne
   2b748:	2108      	movne	r1, #8
   2b74a:	2109      	moveq	r1, #9
   2b74c:	446b      	add	r3, sp
   2b74e:	aa03      	add	r2, sp, #12
{
   2b750:	4607      	mov	r7, r0
	size_t tau_idx = is_notif ? AT_CEREG_TAU_INDEX :
   2b752:	bf14      	ite	ne
   2b754:	f04f 0807 	movne.w	r8, #7
   2b758:	f04f 0808 	moveq.w	r8, #8
	err = at_params_string_get(at_params,
   2b75c:	f014 fa43 	bl	3fbe6 <at_params_string_get>
	if (err) {
   2b760:	4604      	mov	r4, r0
   2b762:	b170      	cbz	r0, 2b782 <parse_psm_cfg+0x56>
   2b764:	4832      	ldr	r0, [pc, #200]	; (2b830 <parse_psm_cfg+0x104>)
   2b766:	4b33      	ldr	r3, [pc, #204]	; (2b834 <parse_psm_cfg+0x108>)
		LOG_ERR("Could not get TAU, error: %d", err);
   2b768:	4622      	mov	r2, r4
   2b76a:	1ac0      	subs	r0, r0, r3
   2b76c:	08c0      	lsrs	r0, r0, #3
   2b76e:	0180      	lsls	r0, r0, #6
   2b770:	4931      	ldr	r1, [pc, #196]	; (2b838 <parse_psm_cfg+0x10c>)
   2b772:	f040 0001 	orr.w	r0, r0, #1
   2b776:	f011 fdc3 	bl	3d300 <log_string_sync>
}
   2b77a:	4620      	mov	r0, r4
   2b77c:	b006      	add	sp, #24
   2b77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(unit_str, timer_str, unit_str_len);
   2b782:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b784:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2b786:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b78a:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2b78c:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2b78e:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2b790:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b794:	f010 f832 	bl	3b7fc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3412_lookup) - 1)) {
   2b798:	2807      	cmp	r0, #7
   2b79a:	d90c      	bls.n	2b7b6 <parse_psm_cfg+0x8a>
   2b79c:	4824      	ldr	r0, [pc, #144]	; (2b830 <parse_psm_cfg+0x104>)
   2b79e:	4b25      	ldr	r3, [pc, #148]	; (2b834 <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse periodic TAU string");
   2b7a0:	4926      	ldr	r1, [pc, #152]	; (2b83c <parse_psm_cfg+0x110>)
   2b7a2:	1ac0      	subs	r0, r0, r3
   2b7a4:	08c0      	lsrs	r0, r0, #3
   2b7a6:	0180      	lsls	r0, r0, #6
		LOG_ERR("Unable to parse active time string");
   2b7a8:	f040 0001 	orr.w	r0, r0, #1
   2b7ac:	f011 fda8 	bl	3d300 <log_string_sync>
		return err;
   2b7b0:	f06f 0415 	mvn.w	r4, #21
   2b7b4:	e7e1      	b.n	2b77a <parse_psm_cfg+0x4e>
	timer_unit = t3412_lookup[lut_idx];
   2b7b6:	4b22      	ldr	r3, [pc, #136]	; (2b840 <parse_psm_cfg+0x114>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b7b8:	2202      	movs	r2, #2
	timer_unit = t3412_lookup[lut_idx];
   2b7ba:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b7be:	4621      	mov	r1, r4
   2b7c0:	f10d 000f 	add.w	r0, sp, #15
   2b7c4:	f010 f81a 	bl	3b7fc <strtoul>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b7c8:	b1f5      	cbz	r5, 2b808 <parse_psm_cfg+0xdc>
   2b7ca:	4345      	muls	r5, r0
	err = at_params_string_get(at_params,
   2b7cc:	4641      	mov	r1, r8
   2b7ce:	4638      	mov	r0, r7
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b7d0:	6035      	str	r5, [r6, #0]
	err = at_params_string_get(at_params,
   2b7d2:	ab02      	add	r3, sp, #8
   2b7d4:	aa03      	add	r2, sp, #12
   2b7d6:	f014 fa06 	bl	3fbe6 <at_params_string_get>
	if (err) {
   2b7da:	4604      	mov	r4, r0
   2b7dc:	2800      	cmp	r0, #0
   2b7de:	d1c1      	bne.n	2b764 <parse_psm_cfg+0x38>
	memcpy(unit_str, timer_str, unit_str_len);
   2b7e0:	9b03      	ldr	r3, [sp, #12]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7e2:	4601      	mov	r1, r0
	memcpy(unit_str, timer_str, unit_str_len);
   2b7e4:	f8ad 3004 	strh.w	r3, [sp, #4]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7e8:	2202      	movs	r2, #2
	memcpy(unit_str, timer_str, unit_str_len);
   2b7ea:	0c1b      	lsrs	r3, r3, #16
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7ec:	a801      	add	r0, sp, #4
	memcpy(unit_str, timer_str, unit_str_len);
   2b7ee:	f88d 3006 	strb.w	r3, [sp, #6]
	lut_idx = strtoul(unit_str, NULL, 2);
   2b7f2:	f010 f803 	bl	3b7fc <strtoul>
	if (lut_idx > (ARRAY_SIZE(t3324_lookup) - 1)) {
   2b7f6:	2807      	cmp	r0, #7
   2b7f8:	d909      	bls.n	2b80e <parse_psm_cfg+0xe2>
   2b7fa:	480d      	ldr	r0, [pc, #52]	; (2b830 <parse_psm_cfg+0x104>)
   2b7fc:	4b0d      	ldr	r3, [pc, #52]	; (2b834 <parse_psm_cfg+0x108>)
		LOG_ERR("Unable to parse active time string");
   2b7fe:	4911      	ldr	r1, [pc, #68]	; (2b844 <parse_psm_cfg+0x118>)
   2b800:	1ac0      	subs	r0, r0, r3
   2b802:	08c0      	lsrs	r0, r0, #3
   2b804:	0180      	lsls	r0, r0, #6
   2b806:	e7cf      	b.n	2b7a8 <parse_psm_cfg+0x7c>
	psm_cfg->tau = timer_unit ? timer_unit * timer_value : -1;
   2b808:	f04f 35ff 	mov.w	r5, #4294967295
   2b80c:	e7de      	b.n	2b7cc <parse_psm_cfg+0xa0>
	timer_unit = t3324_lookup[lut_idx];
   2b80e:	4b0e      	ldr	r3, [pc, #56]	; (2b848 <parse_psm_cfg+0x11c>)
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b810:	2202      	movs	r2, #2
	timer_unit = t3324_lookup[lut_idx];
   2b812:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
	timer_value = strtoul(timer_str + unit_str_len, NULL, 2);
   2b816:	4621      	mov	r1, r4
   2b818:	f10d 000f 	add.w	r0, sp, #15
   2b81c:	f00f ffee 	bl	3b7fc <strtoul>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2b820:	b115      	cbz	r5, 2b828 <parse_psm_cfg+0xfc>
   2b822:	4368      	muls	r0, r5
   2b824:	6070      	str	r0, [r6, #4]
	return 0;
   2b826:	e7a8      	b.n	2b77a <parse_psm_cfg+0x4e>
	psm_cfg->active_time = timer_unit ? timer_unit * timer_value : -1;
   2b828:	f04f 30ff 	mov.w	r0, #4294967295
   2b82c:	e7fa      	b.n	2b824 <parse_psm_cfg+0xf8>
   2b82e:	bf00      	nop
   2b830:	0004343c 	.word	0x0004343c
   2b834:	0004339c 	.word	0x0004339c
   2b838:	000475ef 	.word	0x000475ef
   2b83c:	0004760c 	.word	0x0004760c
   2b840:	00043ad4 	.word	0x00043ad4
   2b844:	00047630 	.word	0x00047630
   2b848:	00043ab4 	.word	0x00043ab4

0002b84c <lte_lc_register_handler>:
{
   2b84c:	b538      	push	{r3, r4, r5, lr}
	if (handler == NULL) {
   2b84e:	4604      	mov	r4, r0
   2b850:	4d0f      	ldr	r5, [pc, #60]	; (2b890 <lte_lc_register_handler+0x44>)
   2b852:	b968      	cbnz	r0, 2b870 <lte_lc_register_handler+0x24>
   2b854:	4b0f      	ldr	r3, [pc, #60]	; (2b894 <lte_lc_register_handler+0x48>)
		evt_handler = NULL;
   2b856:	6028      	str	r0, [r5, #0]
   2b858:	480f      	ldr	r0, [pc, #60]	; (2b898 <lte_lc_register_handler+0x4c>)
		LOG_INF("Previously registered handler (%p) deregistered",
   2b85a:	4622      	mov	r2, r4
   2b85c:	1ac0      	subs	r0, r0, r3
   2b85e:	08c0      	lsrs	r0, r0, #3
   2b860:	0180      	lsls	r0, r0, #6
   2b862:	490e      	ldr	r1, [pc, #56]	; (2b89c <lte_lc_register_handler+0x50>)
   2b864:	f040 0003 	orr.w	r0, r0, #3
}
   2b868:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		LOG_INF("Previously registered handler (%p) deregistered",
   2b86c:	f011 bd48 	b.w	3d300 <log_string_sync>
	if (evt_handler) {
   2b870:	682a      	ldr	r2, [r5, #0]
   2b872:	b152      	cbz	r2, 2b88a <lte_lc_register_handler+0x3e>
   2b874:	4b07      	ldr	r3, [pc, #28]	; (2b894 <lte_lc_register_handler+0x48>)
   2b876:	4808      	ldr	r0, [pc, #32]	; (2b898 <lte_lc_register_handler+0x4c>)
		LOG_WRN("Replacing previously registered handler (%p) with %p",
   2b878:	4909      	ldr	r1, [pc, #36]	; (2b8a0 <lte_lc_register_handler+0x54>)
   2b87a:	1ac0      	subs	r0, r0, r3
   2b87c:	08c0      	lsrs	r0, r0, #3
   2b87e:	0180      	lsls	r0, r0, #6
   2b880:	4623      	mov	r3, r4
   2b882:	f040 0002 	orr.w	r0, r0, #2
   2b886:	f011 fd3b 	bl	3d300 <log_string_sync>
	evt_handler = handler;
   2b88a:	602c      	str	r4, [r5, #0]
}
   2b88c:	bd38      	pop	{r3, r4, r5, pc}
   2b88e:	bf00      	nop
   2b890:	200191a0 	.word	0x200191a0
   2b894:	0004339c 	.word	0x0004339c
   2b898:	0004343c 	.word	0x0004343c
   2b89c:	00047943 	.word	0x00047943
   2b8a0:	00047973 	.word	0x00047973

0002b8a4 <lte_lc_offline>:
{
   2b8a4:	b508      	push	{r3, lr}
	if (at_cmd_write(offline, NULL, 0, NULL) != 0) {
   2b8a6:	2300      	movs	r3, #0
   2b8a8:	4804      	ldr	r0, [pc, #16]	; (2b8bc <lte_lc_offline+0x18>)
   2b8aa:	461a      	mov	r2, r3
   2b8ac:	4619      	mov	r1, r3
   2b8ae:	f7ff f879 	bl	2a9a4 <at_cmd_write>
   2b8b2:	2800      	cmp	r0, #0
}
   2b8b4:	bf18      	it	ne
   2b8b6:	f06f 0004 	mvnne.w	r0, #4
   2b8ba:	bd08      	pop	{r3, pc}
   2b8bc:	00047e52 	.word	0x00047e52

0002b8c0 <lte_lc_power_off>:
{
   2b8c0:	b508      	push	{r3, lr}
	if (at_cmd_write(power_off, NULL, 0, NULL) != 0) {
   2b8c2:	2300      	movs	r3, #0
   2b8c4:	4804      	ldr	r0, [pc, #16]	; (2b8d8 <lte_lc_power_off+0x18>)
   2b8c6:	461a      	mov	r2, r3
   2b8c8:	4619      	mov	r1, r3
   2b8ca:	f7ff f86b 	bl	2a9a4 <at_cmd_write>
   2b8ce:	2800      	cmp	r0, #0
}
   2b8d0:	bf18      	it	ne
   2b8d2:	f06f 0004 	mvnne.w	r0, #4
   2b8d6:	bd08      	pop	{r3, pc}
   2b8d8:	00047e5c 	.word	0x00047e5c

0002b8dc <lte_lc_deinit>:
{
   2b8dc:	b508      	push	{r3, lr}
	if (is_initialized) {
   2b8de:	4b06      	ldr	r3, [pc, #24]	; (2b8f8 <lte_lc_deinit+0x1c>)
   2b8e0:	7818      	ldrb	r0, [r3, #0]
   2b8e2:	b140      	cbz	r0, 2b8f6 <lte_lc_deinit+0x1a>
		is_initialized = false;
   2b8e4:	2000      	movs	r0, #0
		at_notif_deregister_handler(NULL, at_handler);
   2b8e6:	4905      	ldr	r1, [pc, #20]	; (2b8fc <lte_lc_deinit+0x20>)
		is_initialized = false;
   2b8e8:	7018      	strb	r0, [r3, #0]
		at_notif_deregister_handler(NULL, at_handler);
   2b8ea:	f7ff f9d1 	bl	2ac90 <at_notif_deregister_handler>
}
   2b8ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return lte_lc_power_off();
   2b8f2:	f7ff bfe5 	b.w	2b8c0 <lte_lc_power_off>
}
   2b8f6:	bd08      	pop	{r3, pc}
   2b8f8:	2002072f 	.word	0x2002072f
   2b8fc:	0001da59 	.word	0x0001da59

0002b900 <lte_lc_normal>:
{
   2b900:	b508      	push	{r3, lr}
	if (at_cmd_write(normal, NULL, 0, NULL) != 0) {
   2b902:	2300      	movs	r3, #0
   2b904:	4804      	ldr	r0, [pc, #16]	; (2b918 <lte_lc_normal+0x18>)
   2b906:	461a      	mov	r2, r3
   2b908:	4619      	mov	r1, r3
   2b90a:	f7ff f84b 	bl	2a9a4 <at_cmd_write>
   2b90e:	2800      	cmp	r0, #0
}
   2b910:	bf18      	it	ne
   2b912:	f06f 0004 	mvnne.w	r0, #4
   2b916:	bd08      	pop	{r3, pc}
   2b918:	00047e48 	.word	0x00047e48

0002b91c <lte_lc_psm_req>:
{
   2b91c:	b510      	push	{r4, lr}
	if (enable) {
   2b91e:	4603      	mov	r3, r0
{
   2b920:	b08c      	sub	sp, #48	; 0x30
	if (enable) {
   2b922:	2800      	cmp	r0, #0
   2b924:	d036      	beq.n	2b994 <lte_lc_psm_req+0x78>
		if (strlen(psm_param_rptau) == 8 &&
   2b926:	481d      	ldr	r0, [pc, #116]	; (2b99c <lte_lc_psm_req+0x80>)
   2b928:	f7f1 fc98 	bl	1d25c <strlen>
   2b92c:	2808      	cmp	r0, #8
   2b92e:	d118      	bne.n	2b962 <lte_lc_psm_req+0x46>
		    strlen(psm_param_rat) == 8) {
   2b930:	4c1b      	ldr	r4, [pc, #108]	; (2b9a0 <lte_lc_psm_req+0x84>)
   2b932:	4620      	mov	r0, r4
   2b934:	f7f1 fc92 	bl	1d25c <strlen>
		if (strlen(psm_param_rptau) == 8 &&
   2b938:	2808      	cmp	r0, #8
   2b93a:	d112      	bne.n	2b962 <lte_lc_psm_req+0x46>
			snprintf(psm_req, sizeof(psm_req),
   2b93c:	2128      	movs	r1, #40	; 0x28
   2b93e:	4b17      	ldr	r3, [pc, #92]	; (2b99c <lte_lc_psm_req+0x80>)
   2b940:	4a18      	ldr	r2, [pc, #96]	; (2b9a4 <lte_lc_psm_req+0x88>)
   2b942:	9400      	str	r4, [sp, #0]
   2b944:	a802      	add	r0, sp, #8
   2b946:	f00f fdf1 	bl	3b52c <sniprintf>
		err = at_cmd_write(psm_req, NULL, 0, NULL);
   2b94a:	2300      	movs	r3, #0
   2b94c:	461a      	mov	r2, r3
   2b94e:	4619      	mov	r1, r3
   2b950:	a802      	add	r0, sp, #8
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2b952:	f7ff f827 	bl	2a9a4 <at_cmd_write>
		return -EIO;
   2b956:	2800      	cmp	r0, #0
}
   2b958:	bf18      	it	ne
   2b95a:	f06f 0004 	mvnne.w	r0, #4
   2b95e:	b00c      	add	sp, #48	; 0x30
   2b960:	bd10      	pop	{r4, pc}
		} else if (strlen(psm_param_rptau) == 8) {
   2b962:	480e      	ldr	r0, [pc, #56]	; (2b99c <lte_lc_psm_req+0x80>)
   2b964:	f7f1 fc7a 	bl	1d25c <strlen>
   2b968:	2808      	cmp	r0, #8
   2b96a:	d106      	bne.n	2b97a <lte_lc_psm_req+0x5e>
			snprintf(psm_req, sizeof(psm_req),
   2b96c:	4b0b      	ldr	r3, [pc, #44]	; (2b99c <lte_lc_psm_req+0x80>)
   2b96e:	4a0e      	ldr	r2, [pc, #56]	; (2b9a8 <lte_lc_psm_req+0x8c>)
			snprintf(psm_req, sizeof(psm_req),
   2b970:	2128      	movs	r1, #40	; 0x28
   2b972:	a802      	add	r0, sp, #8
   2b974:	f00f fdda 	bl	3b52c <sniprintf>
   2b978:	e7e7      	b.n	2b94a <lte_lc_psm_req+0x2e>
		} else if (strlen(psm_param_rat) == 8) {
   2b97a:	4809      	ldr	r0, [pc, #36]	; (2b9a0 <lte_lc_psm_req+0x84>)
   2b97c:	f7f1 fc6e 	bl	1d25c <strlen>
   2b980:	2808      	cmp	r0, #8
   2b982:	d102      	bne.n	2b98a <lte_lc_psm_req+0x6e>
			snprintf(psm_req, sizeof(psm_req),
   2b984:	4b06      	ldr	r3, [pc, #24]	; (2b9a0 <lte_lc_psm_req+0x84>)
   2b986:	4a09      	ldr	r2, [pc, #36]	; (2b9ac <lte_lc_psm_req+0x90>)
   2b988:	e7f2      	b.n	2b970 <lte_lc_psm_req+0x54>
			snprintf(psm_req, sizeof(psm_req),
   2b98a:	4909      	ldr	r1, [pc, #36]	; (2b9b0 <lte_lc_psm_req+0x94>)
   2b98c:	a802      	add	r0, sp, #8
   2b98e:	f016 fb6b 	bl	42068 <strcpy>
   2b992:	e7da      	b.n	2b94a <lte_lc_psm_req+0x2e>
		err = at_cmd_write(psm_disable, NULL, 0, NULL);
   2b994:	4602      	mov	r2, r0
   2b996:	4601      	mov	r1, r0
   2b998:	4806      	ldr	r0, [pc, #24]	; (2b9b4 <lte_lc_psm_req+0x98>)
   2b99a:	e7da      	b.n	2b952 <lte_lc_psm_req+0x36>
   2b99c:	200158e6 	.word	0x200158e6
   2b9a0:	200158dd 	.word	0x200158dd
   2b9a4:	000479a8 	.word	0x000479a8
   2b9a8:	000479bf 	.word	0x000479bf
   2b9ac:	000479d1 	.word	0x000479d1
   2b9b0:	000479e4 	.word	0x000479e4
   2b9b4:	00047e66 	.word	0x00047e66

0002b9b8 <lte_lc_system_mode_set>:

	return err;
}

int lte_lc_system_mode_set(enum lte_lc_system_mode mode)
{
   2b9b8:	b530      	push	{r4, r5, lr}
	int err, len;
	char cmd[50];

	switch (mode) {
   2b9ba:	4605      	mov	r5, r0
{
   2b9bc:	b08f      	sub	sp, #60	; 0x3c
	switch (mode) {
   2b9be:	2800      	cmp	r0, #0
   2b9c0:	d040      	beq.n	2ba44 <lte_lc_system_mode_set+0x8c>
   2b9c2:	1e43      	subs	r3, r0, #1
   2b9c4:	2b04      	cmp	r3, #4
   2b9c6:	d90e      	bls.n	2b9e6 <lte_lc_system_mode_set+0x2e>
   2b9c8:	4b1f      	ldr	r3, [pc, #124]	; (2ba48 <lte_lc_system_mode_set+0x90>)
   2b9ca:	4820      	ldr	r0, [pc, #128]	; (2ba4c <lte_lc_system_mode_set+0x94>)
	case LTE_LC_SYSTEM_MODE_NBIOT:
	case LTE_LC_SYSTEM_MODE_NBIOT_GPS:
	case LTE_LC_SYSTEM_MODE_GPS:
		break;
	default:
		LOG_ERR("Invalid system mode requested");
   2b9cc:	4920      	ldr	r1, [pc, #128]	; (2ba50 <lte_lc_system_mode_set+0x98>)
   2b9ce:	1ac0      	subs	r0, r0, r3
   2b9d0:	08c0      	lsrs	r0, r0, #3
   2b9d2:	0180      	lsls	r0, r0, #6
   2b9d4:	f040 0001 	orr.w	r0, r0, #1
   2b9d8:	f011 fc92 	bl	3d300 <log_string_sync>
		return -EINVAL;
   2b9dc:	f06f 0415 	mvn.w	r4, #21

	sys_mode_current = mode;
	sys_mode_target = mode;

	return err;
}
   2b9e0:	4620      	mov	r0, r4
   2b9e2:	b00f      	add	sp, #60	; 0x3c
   2b9e4:	bd30      	pop	{r4, r5, pc}
	len = snprintk(cmd, sizeof(cmd), "AT%%XSYSTEMMODE=%s",
   2b9e6:	4b1b      	ldr	r3, [pc, #108]	; (2ba54 <lte_lc_system_mode_set+0x9c>)
   2b9e8:	2132      	movs	r1, #50	; 0x32
   2b9ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   2b9ee:	4a1a      	ldr	r2, [pc, #104]	; (2ba58 <lte_lc_system_mode_set+0xa0>)
   2b9f0:	a801      	add	r0, sp, #4
   2b9f2:	f011 f9cd 	bl	3cd90 <snprintk>
	if (len < 0) {
   2b9f6:	2800      	cmp	r0, #0
   2b9f8:	da0c      	bge.n	2ba14 <lte_lc_system_mode_set+0x5c>
   2b9fa:	4b13      	ldr	r3, [pc, #76]	; (2ba48 <lte_lc_system_mode_set+0x90>)
   2b9fc:	4813      	ldr	r0, [pc, #76]	; (2ba4c <lte_lc_system_mode_set+0x94>)
		LOG_ERR("Could not construct system mode command");
   2b9fe:	4917      	ldr	r1, [pc, #92]	; (2ba5c <lte_lc_system_mode_set+0xa4>)
   2ba00:	1ac0      	subs	r0, r0, r3
   2ba02:	08c0      	lsrs	r0, r0, #3
   2ba04:	0180      	lsls	r0, r0, #6
   2ba06:	f040 0001 	orr.w	r0, r0, #1
   2ba0a:	f011 fc79 	bl	3d300 <log_string_sync>
		return -EFAULT;
   2ba0e:	f06f 040d 	mvn.w	r4, #13
   2ba12:	e7e5      	b.n	2b9e0 <lte_lc_system_mode_set+0x28>
	err = at_cmd_write(cmd, NULL, 0, NULL);
   2ba14:	2300      	movs	r3, #0
   2ba16:	a801      	add	r0, sp, #4
   2ba18:	461a      	mov	r2, r3
   2ba1a:	4619      	mov	r1, r3
   2ba1c:	f7fe ffc2 	bl	2a9a4 <at_cmd_write>
	if (err) {
   2ba20:	4604      	mov	r4, r0
   2ba22:	b150      	cbz	r0, 2ba3a <lte_lc_system_mode_set+0x82>
   2ba24:	4809      	ldr	r0, [pc, #36]	; (2ba4c <lte_lc_system_mode_set+0x94>)
   2ba26:	4b08      	ldr	r3, [pc, #32]	; (2ba48 <lte_lc_system_mode_set+0x90>)
		LOG_ERR("Could not send AT command, error: %d", err);
   2ba28:	4622      	mov	r2, r4
   2ba2a:	1ac0      	subs	r0, r0, r3
   2ba2c:	08c0      	lsrs	r0, r0, #3
   2ba2e:	0180      	lsls	r0, r0, #6
   2ba30:	490b      	ldr	r1, [pc, #44]	; (2ba60 <lte_lc_system_mode_set+0xa8>)
   2ba32:	f040 0001 	orr.w	r0, r0, #1
   2ba36:	f011 fc63 	bl	3d300 <log_string_sync>
	sys_mode_current = mode;
   2ba3a:	4b0a      	ldr	r3, [pc, #40]	; (2ba64 <lte_lc_system_mode_set+0xac>)
   2ba3c:	701d      	strb	r5, [r3, #0]
	sys_mode_target = mode;
   2ba3e:	4b0a      	ldr	r3, [pc, #40]	; (2ba68 <lte_lc_system_mode_set+0xb0>)
   2ba40:	701d      	strb	r5, [r3, #0]
	return err;
   2ba42:	e7cd      	b.n	2b9e0 <lte_lc_system_mode_set+0x28>
	switch (mode) {
   2ba44:	4604      	mov	r4, r0
   2ba46:	e7cb      	b.n	2b9e0 <lte_lc_system_mode_set+0x28>
   2ba48:	0004339c 	.word	0x0004339c
   2ba4c:	0004343c 	.word	0x0004343c
   2ba50:	00047a9b 	.word	0x00047a9b
   2ba54:	00043a9c 	.word	0x00043a9c
   2ba58:	00047ab9 	.word	0x00047ab9
   2ba5c:	00047acc 	.word	0x00047acc
   2ba60:	00047af4 	.word	0x00047af4
   2ba64:	20020731 	.word	0x20020731
   2ba68:	200158ef 	.word	0x200158ef

0002ba6c <w_lte_lc_connect>:
{
   2ba6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!is_initialized) {
   2ba70:	4b23      	ldr	r3, [pc, #140]	; (2bb00 <w_lte_lc_connect+0x94>)
{
   2ba72:	4605      	mov	r5, r0
   2ba74:	4c23      	ldr	r4, [pc, #140]	; (2bb04 <w_lte_lc_connect+0x98>)
   2ba76:	4824      	ldr	r0, [pc, #144]	; (2bb08 <w_lte_lc_connect+0x9c>)
	if (!is_initialized) {
   2ba78:	781b      	ldrb	r3, [r3, #0]
   2ba7a:	1a24      	subs	r4, r4, r0
   2ba7c:	08e4      	lsrs	r4, r4, #3
   2ba7e:	b94b      	cbnz	r3, 2ba94 <w_lte_lc_connect+0x28>
		LOG_ERR("The LTE link controller is not initialized");
   2ba80:	01a0      	lsls	r0, r4, #6
   2ba82:	f040 0001 	orr.w	r0, r0, #1
   2ba86:	4921      	ldr	r1, [pc, #132]	; (2bb0c <w_lte_lc_connect+0xa0>)
   2ba88:	f011 fc3a 	bl	3d300 <log_string_sync>
		return -EPERM;
   2ba8c:	f04f 30ff 	mov.w	r0, #4294967295
}
   2ba90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   2ba94:	2201      	movs	r2, #1
   2ba96:	2100      	movs	r1, #0
   2ba98:	481d      	ldr	r0, [pc, #116]	; (2bb10 <w_lte_lc_connect+0xa4>)
   2ba9a:	f015 ffa1 	bl	419e0 <z_impl_k_sem_init>
		err = lte_lc_system_mode_set(sys_mode_target);
   2ba9e:	4e1d      	ldr	r6, [pc, #116]	; (2bb14 <w_lte_lc_connect+0xa8>)
	return z_impl_k_sem_take(sem, timeout);
   2baa0:	4f1b      	ldr	r7, [pc, #108]	; (2bb10 <w_lte_lc_connect+0xa4>)
			LOG_INF("Network connection attempt timed out");
   2baa2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2bb1c <w_lte_lc_connect+0xb0>
		err = lte_lc_system_mode_set(sys_mode_target);
   2baa6:	7830      	ldrb	r0, [r6, #0]
   2baa8:	f7ff ff86 	bl	2b9b8 <lte_lc_system_mode_set>
		if (err) {
   2baac:	2800      	cmp	r0, #0
   2baae:	d1ef      	bne.n	2ba90 <w_lte_lc_connect+0x24>
		err = lte_lc_normal();
   2bab0:	f7ff ff26 	bl	2b900 <lte_lc_normal>
		if (err || !blocking) {
   2bab4:	2800      	cmp	r0, #0
   2bab6:	d1eb      	bne.n	2ba90 <w_lte_lc_connect+0x24>
   2bab8:	2d00      	cmp	r5, #0
   2baba:	d0e9      	beq.n	2ba90 <w_lte_lc_connect+0x24>
   2babc:	f04f 7296 	mov.w	r2, #19660800	; 0x12c0000
   2bac0:	2300      	movs	r3, #0
   2bac2:	4638      	mov	r0, r7
   2bac4:	f00d fc3a 	bl	3933c <z_impl_k_sem_take>
		if (err == -EAGAIN) {
   2bac8:	f110 0f0b 	cmn.w	r0, #11
   2bacc:	d1e0      	bne.n	2ba90 <w_lte_lc_connect+0x24>
			LOG_INF("Network connection attempt timed out");
   2bace:	ea4f 1984 	mov.w	r9, r4, lsl #6
   2bad2:	f049 0903 	orr.w	r9, r9, #3
   2bad6:	4641      	mov	r1, r8
   2bad8:	4648      	mov	r0, r9
   2bada:	f011 fc11 	bl	3d300 <log_string_sync>
			if (IS_ENABLED(CONFIG_LTE_NETWORK_USE_FALLBACK) &&
   2bade:	7833      	ldrb	r3, [r6, #0]
   2bae0:	2b04      	cmp	r3, #4
   2bae2:	d10a      	bne.n	2bafa <w_lte_lc_connect+0x8e>
				sys_mode_target = sys_mode_fallback;
   2bae4:	2305      	movs	r3, #5
   2bae6:	7033      	strb	r3, [r6, #0]
				err = lte_lc_offline();
   2bae8:	f7ff fedc 	bl	2b8a4 <lte_lc_offline>
				if (err) {
   2baec:	2800      	cmp	r0, #0
   2baee:	d1cf      	bne.n	2ba90 <w_lte_lc_connect+0x24>
				LOG_INF("Using fallback network mode");
   2baf0:	4648      	mov	r0, r9
   2baf2:	4909      	ldr	r1, [pc, #36]	; (2bb18 <w_lte_lc_connect+0xac>)
   2baf4:	f011 fc04 	bl	3d300 <log_string_sync>
	} while (retry);
   2baf8:	e7d5      	b.n	2baa6 <w_lte_lc_connect+0x3a>
				err = -ETIMEDOUT;
   2bafa:	f06f 0073 	mvn.w	r0, #115	; 0x73
   2bafe:	e7c7      	b.n	2ba90 <w_lte_lc_connect+0x24>
   2bb00:	2002072f 	.word	0x2002072f
   2bb04:	0004343c 	.word	0x0004343c
   2bb08:	0004339c 	.word	0x0004339c
   2bb0c:	00047b19 	.word	0x00047b19
   2bb10:	200191a4 	.word	0x200191a4
   2bb14:	200158ef 	.word	0x200158ef
   2bb18:	00047b69 	.word	0x00047b69
   2bb1c:	00047b44 	.word	0x00047b44

0002bb20 <lte_lc_system_mode_get>:

int lte_lc_system_mode_get(enum lte_lc_system_mode *mode)
{
   2bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err, bitmask = 0;
	struct at_param_list resp_list = {0};
   2bb24:	2400      	movs	r4, #0
{
   2bb26:	b090      	sub	sp, #64	; 0x40
   2bb28:	4605      	mov	r5, r0
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2bb2a:	221a      	movs	r2, #26
   2bb2c:	4621      	mov	r1, r4
   2bb2e:	a809      	add	r0, sp, #36	; 0x24
	struct at_param_list resp_list = {0};
   2bb30:	e9cd 4402 	strd	r4, r4, [sp, #8]
	char response[AT_XSYSTEMMODE_RESPONSE_MAX_LEN] = {0};
   2bb34:	9408      	str	r4, [sp, #32]
   2bb36:	f016 f8d2 	bl	41cde <memset>
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2bb3a:	230d      	movs	r3, #13
	char response_prefix[sizeof(AT_XSYSTEMMODE_RESPONSE_PREFIX)] = {0};
   2bb3c:	e9cd 4404 	strd	r4, r4, [sp, #16]
   2bb40:	9406      	str	r4, [sp, #24]
   2bb42:	f88d 401c 	strb.w	r4, [sp, #28]
	size_t response_prefix_len = sizeof(response_prefix);
   2bb46:	9300      	str	r3, [sp, #0]

	if (mode == NULL) {
   2bb48:	2d00      	cmp	r5, #0
   2bb4a:	f000 80ab 	beq.w	2bca4 <lte_lc_system_mode_get+0x184>
		return -EINVAL;
	}

	err = at_cmd_write(AT_XSYSTEMMODE_READ, response, sizeof(response),
   2bb4e:	4623      	mov	r3, r4
   2bb50:	221e      	movs	r2, #30
   2bb52:	4856      	ldr	r0, [pc, #344]	; (2bcac <lte_lc_system_mode_get+0x18c>)
   2bb54:	a908      	add	r1, sp, #32
   2bb56:	f7fe ff25 	bl	2a9a4 <at_cmd_write>
			   NULL);
	if (err) {
   2bb5a:	4604      	mov	r4, r0
   2bb5c:	b168      	cbz	r0, 2bb7a <lte_lc_system_mode_get+0x5a>
   2bb5e:	4854      	ldr	r0, [pc, #336]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
   2bb60:	4b54      	ldr	r3, [pc, #336]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
		LOG_ERR("Could not send AT command");
   2bb62:	4955      	ldr	r1, [pc, #340]	; (2bcb8 <lte_lc_system_mode_get+0x198>)
   2bb64:	1ac0      	subs	r0, r0, r3
   2bb66:	08c0      	lsrs	r0, r0, #3
   2bb68:	0180      	lsls	r0, r0, #6
   2bb6a:	f040 0001 	orr.w	r0, r0, #1
   2bb6e:	f011 fbc7 	bl	3d300 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2bb72:	4620      	mov	r0, r4
   2bb74:	b010      	add	sp, #64	; 0x40
   2bb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = at_params_list_init(&resp_list, AT_XSYSTEMMODE_PARAMS_COUNT);
   2bb7a:	2105      	movs	r1, #5
   2bb7c:	a802      	add	r0, sp, #8
   2bb7e:	f013 ff58 	bl	3fa32 <at_params_list_init>
	if (err) {
   2bb82:	4604      	mov	r4, r0
   2bb84:	b158      	cbz	r0, 2bb9e <lte_lc_system_mode_get+0x7e>
   2bb86:	4b4b      	ldr	r3, [pc, #300]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
   2bb88:	4849      	ldr	r0, [pc, #292]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Could init AT params list, error: %d", err);
   2bb8a:	4622      	mov	r2, r4
   2bb8c:	1ac0      	subs	r0, r0, r3
   2bb8e:	08c0      	lsrs	r0, r0, #3
   2bb90:	0180      	lsls	r0, r0, #6
   2bb92:	494a      	ldr	r1, [pc, #296]	; (2bcbc <lte_lc_system_mode_get+0x19c>)
   2bb94:	f040 0001 	orr.w	r0, r0, #1
   2bb98:	f011 fbb2 	bl	3d300 <log_string_sync>
		return err;
   2bb9c:	e7e9      	b.n	2bb72 <lte_lc_system_mode_get+0x52>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2bb9e:	4601      	mov	r1, r0
   2bba0:	2305      	movs	r3, #5
   2bba2:	aa02      	add	r2, sp, #8
   2bba4:	a808      	add	r0, sp, #32
   2bba6:	f7ff fc87 	bl	2b4b8 <at_parser_max_params_from_str>
	if (err) {
   2bbaa:	4604      	mov	r4, r0
   2bbac:	b158      	cbz	r0, 2bbc6 <lte_lc_system_mode_get+0xa6>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2bbae:	4622      	mov	r2, r4
   2bbb0:	483f      	ldr	r0, [pc, #252]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
   2bbb2:	4b40      	ldr	r3, [pc, #256]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
   2bbb4:	4942      	ldr	r1, [pc, #264]	; (2bcc0 <lte_lc_system_mode_get+0x1a0>)
   2bbb6:	1ac0      	subs	r0, r0, r3
   2bbb8:	08c0      	lsrs	r0, r0, #3
   2bbba:	0180      	lsls	r0, r0, #6
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bbbc:	f040 0001 	orr.w	r0, r0, #1
   2bbc0:	f011 fb9e 	bl	3d300 <log_string_sync>
			goto clean_exit;
   2bbc4:	e013      	b.n	2bbee <lte_lc_system_mode_get+0xce>
	err = at_params_string_get(&resp_list,
   2bbc6:	4601      	mov	r1, r0
   2bbc8:	466b      	mov	r3, sp
   2bbca:	aa04      	add	r2, sp, #16
   2bbcc:	a802      	add	r0, sp, #8
   2bbce:	f014 f80a 	bl	3fbe6 <at_params_string_get>
	if (err) {
   2bbd2:	4606      	mov	r6, r0
   2bbd4:	b178      	cbz	r0, 2bbf6 <lte_lc_system_mode_get+0xd6>
   2bbd6:	4b37      	ldr	r3, [pc, #220]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
   2bbd8:	4835      	ldr	r0, [pc, #212]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bbda:	4632      	mov	r2, r6
   2bbdc:	1ac0      	subs	r0, r0, r3
   2bbde:	08c0      	lsrs	r0, r0, #3
   2bbe0:	0180      	lsls	r0, r0, #6
   2bbe2:	4938      	ldr	r1, [pc, #224]	; (2bcc4 <lte_lc_system_mode_get+0x1a4>)
   2bbe4:	f040 0001 	orr.w	r0, r0, #1
   2bbe8:	f011 fb8a 	bl	3d300 <log_string_sync>
		goto clean_exit;
   2bbec:	4634      	mov	r4, r6
	at_params_list_free(&resp_list);
   2bbee:	a802      	add	r0, sp, #8
   2bbf0:	f013 ff32 	bl	3fa58 <at_params_list_free>
	return err;
   2bbf4:	e7bd      	b.n	2bb72 <lte_lc_system_mode_get+0x52>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2bbf6:	4a34      	ldr	r2, [pc, #208]	; (2bcc8 <lte_lc_system_mode_get+0x1a8>)
   2bbf8:	9900      	ldr	r1, [sp, #0]
   2bbfa:	a804      	add	r0, sp, #16
   2bbfc:	f014 f831 	bl	3fc62 <response_is_valid>
   2bc00:	b960      	cbnz	r0, 2bc1c <lte_lc_system_mode_get+0xfc>
   2bc02:	4b2c      	ldr	r3, [pc, #176]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
   2bc04:	482a      	ldr	r0, [pc, #168]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Invalid XSYSTEMMODE response");
   2bc06:	4931      	ldr	r1, [pc, #196]	; (2bccc <lte_lc_system_mode_get+0x1ac>)
   2bc08:	1ac0      	subs	r0, r0, r3
   2bc0a:	08c0      	lsrs	r0, r0, #3
   2bc0c:	0180      	lsls	r0, r0, #6
   2bc0e:	f040 0001 	orr.w	r0, r0, #1
   2bc12:	f011 fb75 	bl	3d300 <log_string_sync>
		err = -EIO;
   2bc16:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2bc1a:	e7e8      	b.n	2bbee <lte_lc_system_mode_get+0xce>
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   2bc1c:	2701      	movs	r7, #1
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2bc1e:	46b8      	mov	r8, r7
		err = at_params_int_get(&resp_list, i, &param);
   2bc20:	4639      	mov	r1, r7
   2bc22:	aa01      	add	r2, sp, #4
   2bc24:	a802      	add	r0, sp, #8
   2bc26:	f013 ffc7 	bl	3fbb8 <at_params_int_get>
		if (err) {
   2bc2a:	4604      	mov	r4, r0
   2bc2c:	b138      	cbz	r0, 2bc3e <lte_lc_system_mode_get+0x11e>
   2bc2e:	4820      	ldr	r0, [pc, #128]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
   2bc30:	4b20      	ldr	r3, [pc, #128]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
			LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bc32:	4622      	mov	r2, r4
   2bc34:	1ac0      	subs	r0, r0, r3
   2bc36:	08c0      	lsrs	r0, r0, #3
   2bc38:	4925      	ldr	r1, [pc, #148]	; (2bcd0 <lte_lc_system_mode_get+0x1b0>)
   2bc3a:	0180      	lsls	r0, r0, #6
   2bc3c:	e7be      	b.n	2bbbc <lte_lc_system_mode_get+0x9c>
		bitmask = param ? bitmask | BIT(i) : bitmask;
   2bc3e:	9b01      	ldr	r3, [sp, #4]
   2bc40:	b113      	cbz	r3, 2bc48 <lte_lc_system_mode_get+0x128>
   2bc42:	fa08 f307 	lsl.w	r3, r8, r7
   2bc46:	431e      	orrs	r6, r3
	for (size_t i = 1; i < AT_XSYSTEMMODE_PARAMS_COUNT - 1; i++) {
   2bc48:	3701      	adds	r7, #1
   2bc4a:	2f04      	cmp	r7, #4
   2bc4c:	d1e8      	bne.n	2bc20 <lte_lc_system_mode_get+0x100>
	switch (bitmask) {
   2bc4e:	2e0c      	cmp	r6, #12
   2bc50:	d81b      	bhi.n	2bc8a <lte_lc_system_mode_get+0x16a>
   2bc52:	e8df f006 	tbb	[pc, r6]
   2bc56:	1a07      	.short	0x1a07
   2bc58:	1a121a10 	.word	0x1a121a10
   2bc5c:	1a141a1a 	.word	0x1a141a1a
   2bc60:	1a16      	.short	0x1a16
   2bc62:	18          	.byte	0x18
   2bc63:	00          	.byte	0x00
		*mode = LTE_LC_SYSTEM_MODE_NONE;
   2bc64:	2300      	movs	r3, #0
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2bc66:	702b      	strb	r3, [r5, #0]
	if (sys_mode_current != *mode) {
   2bc68:	4b1a      	ldr	r3, [pc, #104]	; (2bcd4 <lte_lc_system_mode_get+0x1b4>)
   2bc6a:	782a      	ldrb	r2, [r5, #0]
   2bc6c:	7819      	ldrb	r1, [r3, #0]
   2bc6e:	4291      	cmp	r1, r2
		sys_mode_current = *mode;
   2bc70:	bf18      	it	ne
   2bc72:	701a      	strbne	r2, [r3, #0]
   2bc74:	e7bb      	b.n	2bbee <lte_lc_system_mode_get+0xce>
		*mode = LTE_LC_SYSTEM_MODE_LTEM;
   2bc76:	2301      	movs	r3, #1
   2bc78:	e7f5      	b.n	2bc66 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT;
   2bc7a:	2302      	movs	r3, #2
   2bc7c:	e7f3      	b.n	2bc66 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_GPS;
   2bc7e:	2303      	movs	r3, #3
   2bc80:	e7f1      	b.n	2bc66 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   2bc82:	2304      	movs	r3, #4
   2bc84:	e7ef      	b.n	2bc66 <lte_lc_system_mode_get+0x146>
		*mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   2bc86:	2305      	movs	r3, #5
   2bc88:	e7ed      	b.n	2bc66 <lte_lc_system_mode_get+0x146>
   2bc8a:	4b0a      	ldr	r3, [pc, #40]	; (2bcb4 <lte_lc_system_mode_get+0x194>)
   2bc8c:	4808      	ldr	r0, [pc, #32]	; (2bcb0 <lte_lc_system_mode_get+0x190>)
		LOG_ERR("Invalid system mode, assuming parsing error");
   2bc8e:	4912      	ldr	r1, [pc, #72]	; (2bcd8 <lte_lc_system_mode_get+0x1b8>)
   2bc90:	1ac0      	subs	r0, r0, r3
   2bc92:	08c0      	lsrs	r0, r0, #3
   2bc94:	0180      	lsls	r0, r0, #6
   2bc96:	f040 0001 	orr.w	r0, r0, #1
   2bc9a:	f011 fb31 	bl	3d300 <log_string_sync>
		err = -EFAULT;
   2bc9e:	f06f 040d 	mvn.w	r4, #13
		goto clean_exit;
   2bca2:	e7a4      	b.n	2bbee <lte_lc_system_mode_get+0xce>
		return -EINVAL;
   2bca4:	f06f 0415 	mvn.w	r4, #21
   2bca8:	e763      	b.n	2bb72 <lte_lc_system_mode_get+0x52>
   2bcaa:	bf00      	nop
   2bcac:	00047b85 	.word	0x00047b85
   2bcb0:	0004343c 	.word	0x0004343c
   2bcb4:	0004339c 	.word	0x0004339c
   2bcb8:	00047b95 	.word	0x00047b95
   2bcbc:	00047baf 	.word	0x00047baf
   2bcc0:	00047bd4 	.word	0x00047bd4
   2bcc4:	00047a16 	.word	0x00047a16
   2bcc8:	00047bfb 	.word	0x00047bfb
   2bccc:	00047c08 	.word	0x00047c08
   2bcd0:	00047c25 	.word	0x00047c25
   2bcd4:	20020731 	.word	0x20020731
   2bcd8:	00047c4d 	.word	0x00047c4d

0002bcdc <w_lte_lc_init>:
{
   2bcdc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (is_initialized) {
   2bcde:	4e50      	ldr	r6, [pc, #320]	; (2be20 <w_lte_lc_init+0x144>)
{
   2bce0:	b08f      	sub	sp, #60	; 0x3c
	if (is_initialized) {
   2bce2:	7831      	ldrb	r1, [r6, #0]
   2bce4:	2900      	cmp	r1, #0
   2bce6:	f040 8097 	bne.w	2be18 <w_lte_lc_init+0x13c>
	err = lte_lc_system_mode_get(&sys_mode_current);
   2bcea:	4d4e      	ldr	r5, [pc, #312]	; (2be24 <w_lte_lc_init+0x148>)
	return z_impl_k_sem_init(sem, initial_count, limit);
   2bcec:	2201      	movs	r2, #1
   2bcee:	484e      	ldr	r0, [pc, #312]	; (2be28 <w_lte_lc_init+0x14c>)
   2bcf0:	f015 fe76 	bl	419e0 <z_impl_k_sem_init>
   2bcf4:	4628      	mov	r0, r5
   2bcf6:	f7ff ff13 	bl	2bb20 <lte_lc_system_mode_get>
	if (err) {
   2bcfa:	4604      	mov	r4, r0
   2bcfc:	b168      	cbz	r0, 2bd1a <w_lte_lc_init+0x3e>
		LOG_ERR("Could not get current system mode, error: %d", err);
   2bcfe:	4622      	mov	r2, r4
   2bd00:	484a      	ldr	r0, [pc, #296]	; (2be2c <w_lte_lc_init+0x150>)
   2bd02:	4b4b      	ldr	r3, [pc, #300]	; (2be30 <w_lte_lc_init+0x154>)
   2bd04:	494b      	ldr	r1, [pc, #300]	; (2be34 <w_lte_lc_init+0x158>)
   2bd06:	1ac0      	subs	r0, r0, r3
   2bd08:	08c0      	lsrs	r0, r0, #3
   2bd0a:	0180      	lsls	r0, r0, #6
		LOG_ERR("Can't register AT handler, error: %d", err);
   2bd0c:	f040 0001 	orr.w	r0, r0, #1
   2bd10:	f011 faf6 	bl	3d300 <log_string_sync>
}
   2bd14:	4620      	mov	r0, r4
   2bd16:	b00f      	add	sp, #60	; 0x3c
   2bd18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = at_notif_register_handler(NULL, at_handler);
   2bd1a:	4947      	ldr	r1, [pc, #284]	; (2be38 <w_lte_lc_init+0x15c>)
   2bd1c:	f7fe ff6c 	bl	2abf8 <at_notif_register_handler>
	if (err) {
   2bd20:	4604      	mov	r4, r0
   2bd22:	b138      	cbz	r0, 2bd34 <w_lte_lc_init+0x58>
   2bd24:	4841      	ldr	r0, [pc, #260]	; (2be2c <w_lte_lc_init+0x150>)
   2bd26:	4b42      	ldr	r3, [pc, #264]	; (2be30 <w_lte_lc_init+0x154>)
		LOG_ERR("Can't register AT handler, error: %d", err);
   2bd28:	4622      	mov	r2, r4
   2bd2a:	1ac0      	subs	r0, r0, r3
   2bd2c:	08c0      	lsrs	r0, r0, #3
   2bd2e:	4943      	ldr	r1, [pc, #268]	; (2be3c <w_lte_lc_init+0x160>)
   2bd30:	0180      	lsls	r0, r0, #6
   2bd32:	e7eb      	b.n	2bd0c <w_lte_lc_init+0x30>
	if (sys_mode_current != sys_mode_target) {
   2bd34:	4b42      	ldr	r3, [pc, #264]	; (2be40 <w_lte_lc_init+0x164>)
   2bd36:	7818      	ldrb	r0, [r3, #0]
   2bd38:	782b      	ldrb	r3, [r5, #0]
   2bd3a:	4283      	cmp	r3, r0
   2bd3c:	d00b      	beq.n	2bd56 <w_lte_lc_init+0x7a>
		err = lte_lc_system_mode_set(sys_mode_target);
   2bd3e:	f7ff fe3b 	bl	2b9b8 <lte_lc_system_mode_set>
		if (err) {
   2bd42:	4604      	mov	r4, r0
   2bd44:	b138      	cbz	r0, 2bd56 <w_lte_lc_init+0x7a>
   2bd46:	4839      	ldr	r0, [pc, #228]	; (2be2c <w_lte_lc_init+0x150>)
   2bd48:	4b39      	ldr	r3, [pc, #228]	; (2be30 <w_lte_lc_init+0x154>)
			LOG_ERR("Could not set system mode, error: %d", err);
   2bd4a:	4622      	mov	r2, r4
   2bd4c:	1ac0      	subs	r0, r0, r3
   2bd4e:	08c0      	lsrs	r0, r0, #3
   2bd50:	493c      	ldr	r1, [pc, #240]	; (2be44 <w_lte_lc_init+0x168>)
   2bd52:	0180      	lsls	r0, r0, #6
   2bd54:	e7da      	b.n	2bd0c <w_lte_lc_init+0x30>
	if (at_cmd_write(cereg_5_subscribe, NULL, 0, NULL) != 0) {
   2bd56:	2300      	movs	r3, #0
   2bd58:	483b      	ldr	r0, [pc, #236]	; (2be48 <w_lte_lc_init+0x16c>)
   2bd5a:	461a      	mov	r2, r3
   2bd5c:	4619      	mov	r1, r3
   2bd5e:	f7fe fe21 	bl	2a9a4 <at_cmd_write>
   2bd62:	4603      	mov	r3, r0
   2bd64:	b110      	cbz	r0, 2bd6c <w_lte_lc_init+0x90>
		return -EIO;
   2bd66:	f06f 0404 	mvn.w	r4, #4
   2bd6a:	e7d3      	b.n	2bd14 <w_lte_lc_init+0x38>
	if (at_cmd_write(lock_bands, NULL, 0, NULL) != 0) {
   2bd6c:	4602      	mov	r2, r0
   2bd6e:	4601      	mov	r1, r0
   2bd70:	4836      	ldr	r0, [pc, #216]	; (2be4c <w_lte_lc_init+0x170>)
   2bd72:	f7fe fe17 	bl	2a9a4 <at_cmd_write>
   2bd76:	4603      	mov	r3, r0
   2bd78:	2800      	cmp	r0, #0
   2bd7a:	d1f4      	bne.n	2bd66 <w_lte_lc_init+0x8a>
	if (at_cmd_write(cgdcont, NULL, 0, NULL) != 0) {
   2bd7c:	4602      	mov	r2, r0
   2bd7e:	4601      	mov	r1, r0
   2bd80:	4833      	ldr	r0, [pc, #204]	; (2be50 <w_lte_lc_init+0x174>)
   2bd82:	f7fe fe0f 	bl	2a9a4 <at_cmd_write>
   2bd86:	4604      	mov	r4, r0
   2bd88:	2800      	cmp	r0, #0
   2bd8a:	d1ec      	bne.n	2bd66 <w_lte_lc_init+0x8a>
   2bd8c:	4b28      	ldr	r3, [pc, #160]	; (2be30 <w_lte_lc_init+0x154>)
   2bd8e:	4d27      	ldr	r5, [pc, #156]	; (2be2c <w_lte_lc_init+0x150>)
	LOG_INF("PDP Context: %s", log_strdup(cgdcont));
   2bd90:	482f      	ldr	r0, [pc, #188]	; (2be50 <w_lte_lc_init+0x174>)
   2bd92:	1aed      	subs	r5, r5, r3
   2bd94:	f011 fac7 	bl	3d326 <log_strdup>
   2bd98:	08ed      	lsrs	r5, r5, #3
   2bd9a:	01ad      	lsls	r5, r5, #6
   2bd9c:	f045 0703 	orr.w	r7, r5, #3
   2bda0:	4602      	mov	r2, r0
   2bda2:	492c      	ldr	r1, [pc, #176]	; (2be54 <w_lte_lc_init+0x178>)
   2bda4:	4638      	mov	r0, r7
   2bda6:	f011 faab 	bl	3d300 <log_string_sync>
	if (at_cmd_write(cgauth, NULL, 0, NULL) != 0) {
   2bdaa:	4623      	mov	r3, r4
   2bdac:	4622      	mov	r2, r4
   2bdae:	4621      	mov	r1, r4
   2bdb0:	4829      	ldr	r0, [pc, #164]	; (2be58 <w_lte_lc_init+0x17c>)
   2bdb2:	f7fe fdf7 	bl	2a9a4 <at_cmd_write>
   2bdb6:	4604      	mov	r4, r0
   2bdb8:	2800      	cmp	r0, #0
   2bdba:	d1d4      	bne.n	2bd66 <w_lte_lc_init+0x8a>
	LOG_INF("PDN Auth: %s", log_strdup(cgauth));
   2bdbc:	4826      	ldr	r0, [pc, #152]	; (2be58 <w_lte_lc_init+0x17c>)
   2bdbe:	f011 fab2 	bl	3d326 <log_strdup>
   2bdc2:	4926      	ldr	r1, [pc, #152]	; (2be5c <w_lte_lc_init+0x180>)
   2bdc4:	4602      	mov	r2, r0
   2bdc6:	4638      	mov	r0, r7
   2bdc8:	f011 fa9a 	bl	3d300 <log_string_sync>
	err = at_cmd_write(cscon, NULL, 0, NULL);
   2bdcc:	4623      	mov	r3, r4
   2bdce:	4622      	mov	r2, r4
   2bdd0:	4621      	mov	r1, r4
   2bdd2:	4823      	ldr	r0, [pc, #140]	; (2be60 <w_lte_lc_init+0x184>)
   2bdd4:	f7fe fde6 	bl	2a9a4 <at_cmd_write>
	if (err) {
   2bdd8:	4603      	mov	r3, r0
   2bdda:	b1d0      	cbz	r0, 2be12 <w_lte_lc_init+0x136>
		LOG_WRN("%s failed (%d), RRC notifications are not enabled",
   2bddc:	f045 0502 	orr.w	r5, r5, #2
   2bde0:	4628      	mov	r0, r5
   2bde2:	4a1f      	ldr	r2, [pc, #124]	; (2be60 <w_lte_lc_init+0x184>)
   2bde4:	491f      	ldr	r1, [pc, #124]	; (2be64 <w_lte_lc_init+0x188>)
   2bde6:	f011 fa8b 	bl	3d300 <log_string_sync>
		LOG_WRN("%s is supported in nRF9160 modem >= v1.1.0", cscon);
   2bdea:	4628      	mov	r0, r5
   2bdec:	4a1c      	ldr	r2, [pc, #112]	; (2be60 <w_lte_lc_init+0x184>)
   2bdee:	491e      	ldr	r1, [pc, #120]	; (2be68 <w_lte_lc_init+0x18c>)
   2bdf0:	f011 fa86 	bl	3d300 <log_string_sync>
		err = at_cmd_write("AT+CGMR", buf, sizeof(buf), NULL);
   2bdf4:	4623      	mov	r3, r4
   2bdf6:	2232      	movs	r2, #50	; 0x32
   2bdf8:	481c      	ldr	r0, [pc, #112]	; (2be6c <w_lte_lc_init+0x190>)
   2bdfa:	a901      	add	r1, sp, #4
   2bdfc:	f7fe fdd2 	bl	2a9a4 <at_cmd_write>
		if (err == 0) {
   2be00:	b938      	cbnz	r0, 2be12 <w_lte_lc_init+0x136>
			LOG_WRN("Current modem firmware version: %s",
   2be02:	a801      	add	r0, sp, #4
   2be04:	f011 fa8f 	bl	3d326 <log_strdup>
   2be08:	4919      	ldr	r1, [pc, #100]	; (2be70 <w_lte_lc_init+0x194>)
   2be0a:	4602      	mov	r2, r0
   2be0c:	4628      	mov	r0, r5
   2be0e:	f011 fa77 	bl	3d300 <log_string_sync>
	is_initialized = true;
   2be12:	2301      	movs	r3, #1
   2be14:	7033      	strb	r3, [r6, #0]
	return 0;
   2be16:	e77d      	b.n	2bd14 <w_lte_lc_init+0x38>
		return -EALREADY;
   2be18:	f06f 0477 	mvn.w	r4, #119	; 0x77
   2be1c:	e77a      	b.n	2bd14 <w_lte_lc_init+0x38>
   2be1e:	bf00      	nop
   2be20:	2002072f 	.word	0x2002072f
   2be24:	20020731 	.word	0x20020731
   2be28:	200191a4 	.word	0x200191a4
   2be2c:	0004343c 	.word	0x0004343c
   2be30:	0004339c 	.word	0x0004339c
   2be34:	00047c79 	.word	0x00047c79
   2be38:	0001da59 	.word	0x0001da59
   2be3c:	00047ca6 	.word	0x00047ca6
   2be40:	200158ef 	.word	0x200158ef
   2be44:	00047ccb 	.word	0x00047ccb
   2be48:	00047e04 	.word	0x00047e04
   2be4c:	00047e1a 	.word	0x00047e1a
   2be50:	2001584d 	.word	0x2001584d
   2be54:	00047cf0 	.word	0x00047cf0
   2be58:	20015812 	.word	0x20015812
   2be5c:	00047d00 	.word	0x00047d00
   2be60:	00047e0f 	.word	0x00047e0f
   2be64:	00047d0d 	.word	0x00047d0d
   2be68:	00047d3f 	.word	0x00047d3f
   2be6c:	00047d6a 	.word	0x00047d6a
   2be70:	00047d72 	.word	0x00047d72

0002be74 <lte_lc_func_mode_get>:

int lte_lc_func_mode_get(enum lte_lc_func_mode *mode)
{
   2be74:	b530      	push	{r4, r5, lr}
	int err, resp_mode;
	struct at_param_list resp_list = {0};
   2be76:	2400      	movs	r4, #0
{
   2be78:	b08d      	sub	sp, #52	; 0x34
   2be7a:	4605      	mov	r5, r0
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2be7c:	2210      	movs	r2, #16
   2be7e:	4621      	mov	r1, r4
   2be80:	a808      	add	r0, sp, #32
	struct at_param_list resp_list = {0};
   2be82:	e9cd 4405 	strd	r4, r4, [sp, #20]
	char response[AT_CFUN_RESPONSE_MAX_LEN] = {0};
   2be86:	9407      	str	r4, [sp, #28]
   2be88:	f015 ff29 	bl	41cde <memset>
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
	size_t response_prefix_len = sizeof(response_prefix);
   2be8c:	2306      	movs	r3, #6
	char response_prefix[sizeof(AT_CFUN_RESPONSE_PREFIX)] = {0};
   2be8e:	9403      	str	r4, [sp, #12]
   2be90:	f8ad 4010 	strh.w	r4, [sp, #16]
	size_t response_prefix_len = sizeof(response_prefix);
   2be94:	9302      	str	r3, [sp, #8]

	if (mode == NULL) {
   2be96:	2d00      	cmp	r5, #0
   2be98:	d072      	beq.n	2bf80 <lte_lc_func_mode_get+0x10c>
		return -EINVAL;
	}

	err = at_cmd_write(AT_CFUN_READ, response, sizeof(response), NULL);
   2be9a:	4623      	mov	r3, r4
   2be9c:	2214      	movs	r2, #20
   2be9e:	483a      	ldr	r0, [pc, #232]	; (2bf88 <lte_lc_func_mode_get+0x114>)
   2bea0:	a907      	add	r1, sp, #28
   2bea2:	f7fe fd7f 	bl	2a9a4 <at_cmd_write>
	if (err) {
   2bea6:	4604      	mov	r4, r0
   2bea8:	b160      	cbz	r0, 2bec4 <lte_lc_func_mode_get+0x50>
   2beaa:	4838      	ldr	r0, [pc, #224]	; (2bf8c <lte_lc_func_mode_get+0x118>)
   2beac:	4b38      	ldr	r3, [pc, #224]	; (2bf90 <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not send AT command");
   2beae:	4939      	ldr	r1, [pc, #228]	; (2bf94 <lte_lc_func_mode_get+0x120>)
   2beb0:	1ac0      	subs	r0, r0, r3
   2beb2:	08c0      	lsrs	r0, r0, #3
   2beb4:	0180      	lsls	r0, r0, #6
   2beb6:	f040 0001 	orr.w	r0, r0, #1
   2beba:	f011 fa21 	bl	3d300 <log_string_sync>

clean_exit:
	at_params_list_free(&resp_list);

	return err;
}
   2bebe:	4620      	mov	r0, r4
   2bec0:	b00d      	add	sp, #52	; 0x34
   2bec2:	bd30      	pop	{r4, r5, pc}
	err = at_params_list_init(&resp_list, AT_CFUN_PARAMS_COUNT);
   2bec4:	2102      	movs	r1, #2
   2bec6:	a805      	add	r0, sp, #20
   2bec8:	f013 fdb3 	bl	3fa32 <at_params_list_init>
	if (err) {
   2becc:	4604      	mov	r4, r0
   2bece:	b158      	cbz	r0, 2bee8 <lte_lc_func_mode_get+0x74>
   2bed0:	4b2f      	ldr	r3, [pc, #188]	; (2bf90 <lte_lc_func_mode_get+0x11c>)
   2bed2:	482e      	ldr	r0, [pc, #184]	; (2bf8c <lte_lc_func_mode_get+0x118>)
		LOG_ERR("Could init AT params list, error: %d", err);
   2bed4:	4622      	mov	r2, r4
   2bed6:	1ac0      	subs	r0, r0, r3
   2bed8:	08c0      	lsrs	r0, r0, #3
   2beda:	0180      	lsls	r0, r0, #6
   2bedc:	492e      	ldr	r1, [pc, #184]	; (2bf98 <lte_lc_func_mode_get+0x124>)
   2bede:	f040 0001 	orr.w	r0, r0, #1
   2bee2:	f011 fa0d 	bl	3d300 <log_string_sync>
		return err;
   2bee6:	e7ea      	b.n	2bebe <lte_lc_func_mode_get+0x4a>
	err = at_parser_max_params_from_str(response, NULL, &resp_list,
   2bee8:	4601      	mov	r1, r0
   2beea:	2302      	movs	r3, #2
   2beec:	aa05      	add	r2, sp, #20
   2beee:	a807      	add	r0, sp, #28
   2bef0:	f7ff fae2 	bl	2b4b8 <at_parser_max_params_from_str>
	if (err) {
   2bef4:	4604      	mov	r4, r0
   2bef6:	b170      	cbz	r0, 2bf16 <lte_lc_func_mode_get+0xa2>
		LOG_ERR("Could not parse AT response, error: %d", err);
   2bef8:	4622      	mov	r2, r4
   2befa:	4824      	ldr	r0, [pc, #144]	; (2bf8c <lte_lc_func_mode_get+0x118>)
   2befc:	4b24      	ldr	r3, [pc, #144]	; (2bf90 <lte_lc_func_mode_get+0x11c>)
   2befe:	4927      	ldr	r1, [pc, #156]	; (2bf9c <lte_lc_func_mode_get+0x128>)
   2bf00:	1ac0      	subs	r0, r0, r3
   2bf02:	08c0      	lsrs	r0, r0, #3
   2bf04:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bf06:	f040 0001 	orr.w	r0, r0, #1
   2bf0a:	f011 f9f9 	bl	3d300 <log_string_sync>
	at_params_list_free(&resp_list);
   2bf0e:	a805      	add	r0, sp, #20
   2bf10:	f013 fda2 	bl	3fa58 <at_params_list_free>
	return err;
   2bf14:	e7d3      	b.n	2bebe <lte_lc_func_mode_get+0x4a>
	err = at_params_string_get(&resp_list,
   2bf16:	4601      	mov	r1, r0
   2bf18:	ab02      	add	r3, sp, #8
   2bf1a:	aa03      	add	r2, sp, #12
   2bf1c:	a805      	add	r0, sp, #20
   2bf1e:	f013 fe62 	bl	3fbe6 <at_params_string_get>
	if (err) {
   2bf22:	4604      	mov	r4, r0
   2bf24:	b138      	cbz	r0, 2bf36 <lte_lc_func_mode_get+0xc2>
   2bf26:	4819      	ldr	r0, [pc, #100]	; (2bf8c <lte_lc_func_mode_get+0x118>)
   2bf28:	4b19      	ldr	r3, [pc, #100]	; (2bf90 <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not get response prefix, error: %d", err);
   2bf2a:	4622      	mov	r2, r4
   2bf2c:	1ac0      	subs	r0, r0, r3
   2bf2e:	08c0      	lsrs	r0, r0, #3
   2bf30:	491b      	ldr	r1, [pc, #108]	; (2bfa0 <lte_lc_func_mode_get+0x12c>)
   2bf32:	0180      	lsls	r0, r0, #6
   2bf34:	e7e7      	b.n	2bf06 <lte_lc_func_mode_get+0x92>
	if (!response_is_valid(response_prefix, response_prefix_len,
   2bf36:	4a1b      	ldr	r2, [pc, #108]	; (2bfa4 <lte_lc_func_mode_get+0x130>)
   2bf38:	9902      	ldr	r1, [sp, #8]
   2bf3a:	a803      	add	r0, sp, #12
   2bf3c:	f013 fe91 	bl	3fc62 <response_is_valid>
   2bf40:	b960      	cbnz	r0, 2bf5c <lte_lc_func_mode_get+0xe8>
   2bf42:	4b13      	ldr	r3, [pc, #76]	; (2bf90 <lte_lc_func_mode_get+0x11c>)
   2bf44:	4811      	ldr	r0, [pc, #68]	; (2bf8c <lte_lc_func_mode_get+0x118>)
		LOG_ERR("Invalid CFUN response");
   2bf46:	4918      	ldr	r1, [pc, #96]	; (2bfa8 <lte_lc_func_mode_get+0x134>)
   2bf48:	1ac0      	subs	r0, r0, r3
   2bf4a:	08c0      	lsrs	r0, r0, #3
   2bf4c:	0180      	lsls	r0, r0, #6
   2bf4e:	f040 0001 	orr.w	r0, r0, #1
   2bf52:	f011 f9d5 	bl	3d300 <log_string_sync>
		err = -EIO;
   2bf56:	f06f 0404 	mvn.w	r4, #4
		goto clean_exit;
   2bf5a:	e7d8      	b.n	2bf0e <lte_lc_func_mode_get+0x9a>
	err = at_params_int_get(&resp_list, AT_CFUN_MODE_INDEX, &resp_mode);
   2bf5c:	2101      	movs	r1, #1
   2bf5e:	aa01      	add	r2, sp, #4
   2bf60:	a805      	add	r0, sp, #20
   2bf62:	f013 fe29 	bl	3fbb8 <at_params_int_get>
	if (err) {
   2bf66:	4604      	mov	r4, r0
   2bf68:	b138      	cbz	r0, 2bf7a <lte_lc_func_mode_get+0x106>
   2bf6a:	4808      	ldr	r0, [pc, #32]	; (2bf8c <lte_lc_func_mode_get+0x118>)
   2bf6c:	4b08      	ldr	r3, [pc, #32]	; (2bf90 <lte_lc_func_mode_get+0x11c>)
		LOG_ERR("Could not parse mode parameter, err: %d", err);
   2bf6e:	4622      	mov	r2, r4
   2bf70:	1ac0      	subs	r0, r0, r3
   2bf72:	08c0      	lsrs	r0, r0, #3
   2bf74:	490d      	ldr	r1, [pc, #52]	; (2bfac <lte_lc_func_mode_get+0x138>)
   2bf76:	0180      	lsls	r0, r0, #6
   2bf78:	e7c5      	b.n	2bf06 <lte_lc_func_mode_get+0x92>
	*mode = resp_mode;
   2bf7a:	9b01      	ldr	r3, [sp, #4]
   2bf7c:	702b      	strb	r3, [r5, #0]
   2bf7e:	e7c6      	b.n	2bf0e <lte_lc_func_mode_get+0x9a>
		return -EINVAL;
   2bf80:	f06f 0415 	mvn.w	r4, #21
   2bf84:	e79b      	b.n	2bebe <lte_lc_func_mode_get+0x4a>
   2bf86:	bf00      	nop
   2bf88:	00047d95 	.word	0x00047d95
   2bf8c:	0004343c 	.word	0x0004343c
   2bf90:	0004339c 	.word	0x0004339c
   2bf94:	00047b95 	.word	0x00047b95
   2bf98:	00047baf 	.word	0x00047baf
   2bf9c:	00047bd4 	.word	0x00047bd4
   2bfa0:	00047a16 	.word	0x00047a16
   2bfa4:	00047d9e 	.word	0x00047d9e
   2bfa8:	00047da4 	.word	0x00047da4
   2bfac:	00047c25 	.word	0x00047c25

0002bfb0 <modem_info_parse.isra.0>:
		buf[i] = next_char;
		buf[i + 1] = current_char;
	}
}

static int modem_info_parse(const struct modem_info_data *modem_data,
   2bfb0:	b510      	push	{r4, lr}
   2bfb2:	4604      	mov	r4, r0
			    const char *buf)
{
	int err;
	uint32_t param_index;

	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2bfb4:	4a09      	ldr	r2, [pc, #36]	; (2bfdc <modem_info_parse.isra.0+0x2c>)
static int modem_info_parse(const struct modem_info_data *modem_data,
   2bfb6:	4608      	mov	r0, r1
	err = at_parser_max_params_from_str(buf, NULL, &m_param_list,
   2bfb8:	7823      	ldrb	r3, [r4, #0]
   2bfba:	2100      	movs	r1, #0
   2bfbc:	f7ff fa7c 	bl	2b4b8 <at_parser_max_params_from_str>
					    modem_data->param_count);

	if (err == -EAGAIN) {
   2bfc0:	f110 0f0b 	cmn.w	r0, #11
   2bfc4:	d000      	beq.n	2bfc8 <modem_info_parse.isra.0+0x18>
		LOG_DBG("More items exist to parse for: %s",
			modem_data->data_name);
		err = 0;
	} else if (err != 0) {
   2bfc6:	b940      	cbnz	r0, 2bfda <modem_info_parse.isra.0+0x2a>
		return err;
	}

	param_index = at_params_valid_count_get(&m_param_list);
   2bfc8:	4804      	ldr	r0, [pc, #16]	; (2bfdc <modem_info_parse.isra.0+0x2c>)
   2bfca:	f013 fe33 	bl	3fc34 <at_params_valid_count_get>
	if (param_index > modem_data->param_count) {
   2bfce:	7823      	ldrb	r3, [r4, #0]
		return -EAGAIN;
   2bfd0:	4298      	cmp	r0, r3
   2bfd2:	bf94      	ite	ls
   2bfd4:	2000      	movls	r0, #0
   2bfd6:	f06f 000a 	mvnhi.w	r0, #10
	}

	return err;
}
   2bfda:	bd10      	pop	{r4, pc}
   2bfdc:	200191cc 	.word	0x200191cc

0002bfe0 <modem_info_rsrp_subscribe_handler>:

	return len <= 0 ? -ENOTSUP : len;
}

static void modem_info_rsrp_subscribe_handler(void *context, const char *response)
{
   2bfe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2bfe2:	460c      	mov	r4, r1
	ARG_UNUSED(context);

	uint16_t param_value;
	int err;

	if (!is_cesq_notification(response, strlen(response))) {
   2bfe4:	4608      	mov	r0, r1
   2bfe6:	f7f1 f939 	bl	1d25c <strlen>
	return strstr(buf, AT_CMD_CESQ_RESP) ? true : false;
   2bfea:	4620      	mov	r0, r4
   2bfec:	4919      	ldr	r1, [pc, #100]	; (2c054 <modem_info_rsrp_subscribe_handler+0x74>)
   2bfee:	f016 f891 	bl	42114 <strstr>
	if (!is_cesq_notification(response, strlen(response))) {
   2bff2:	b1b0      	cbz	r0, 2c022 <modem_info_rsrp_subscribe_handler+0x42>
		return;
	}

	const struct modem_info_data rsrp_notify_data = {
   2bff4:	4b18      	ldr	r3, [pc, #96]	; (2c058 <modem_info_rsrp_subscribe_handler+0x78>)
   2bff6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   2bffa:	ab04      	add	r3, sp, #16
   2bffc:	e903 0007 	stmdb	r3, {r0, r1, r2}
		.param_index	= RSRP_NOTIFY_PARAM_INDEX,
		.param_count	= RSRP_NOTIFY_PARAM_COUNT,
		.data_type	= AT_PARAM_TYPE_NUM_SHORT,
	};

	err = modem_info_parse(&rsrp_notify_data, response);
   2c000:	4621      	mov	r1, r4
   2c002:	f10d 000d 	add.w	r0, sp, #13
   2c006:	f7ff ffd3 	bl	2bfb0 <modem_info_parse.isra.0>
	if (err != 0) {
   2c00a:	b160      	cbz	r0, 2c026 <modem_info_rsrp_subscribe_handler+0x46>
   2c00c:	4a13      	ldr	r2, [pc, #76]	; (2c05c <modem_info_rsrp_subscribe_handler+0x7c>)
   2c00e:	4b14      	ldr	r3, [pc, #80]	; (2c060 <modem_info_rsrp_subscribe_handler+0x80>)
		LOG_ERR("modem_info_parse failed to parse "
   2c010:	4914      	ldr	r1, [pc, #80]	; (2c064 <modem_info_rsrp_subscribe_handler+0x84>)
   2c012:	1a9b      	subs	r3, r3, r2
   2c014:	4602      	mov	r2, r0
   2c016:	08db      	lsrs	r3, r3, #3
   2c018:	019b      	lsls	r3, r3, #6

	err = at_params_short_get(&m_param_list,
				  rsrp_notify_data.param_index,
				  &param_value);
	if (err != 0) {
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2c01a:	f043 0001 	orr.w	r0, r3, #1
   2c01e:	f011 f96f 	bl	3d300 <log_string_sync>
		return;
	}

	modem_info_rsrp_cb(param_value);
}
   2c022:	b004      	add	sp, #16
   2c024:	bd10      	pop	{r4, pc}
	err = at_params_short_get(&m_param_list,
   2c026:	f89d 100c 	ldrb.w	r1, [sp, #12]
   2c02a:	480f      	ldr	r0, [pc, #60]	; (2c068 <modem_info_rsrp_subscribe_handler+0x88>)
   2c02c:	f10d 0202 	add.w	r2, sp, #2
   2c030:	f013 fdac 	bl	3fb8c <at_params_short_get>
	if (err != 0) {
   2c034:	b138      	cbz	r0, 2c046 <modem_info_rsrp_subscribe_handler+0x66>
   2c036:	4a09      	ldr	r2, [pc, #36]	; (2c05c <modem_info_rsrp_subscribe_handler+0x7c>)
   2c038:	4b09      	ldr	r3, [pc, #36]	; (2c060 <modem_info_rsrp_subscribe_handler+0x80>)
		LOG_ERR("Failed to obtain RSRP value, %d", err);
   2c03a:	490c      	ldr	r1, [pc, #48]	; (2c06c <modem_info_rsrp_subscribe_handler+0x8c>)
   2c03c:	1a9b      	subs	r3, r3, r2
   2c03e:	08db      	lsrs	r3, r3, #3
   2c040:	4602      	mov	r2, r0
   2c042:	019b      	lsls	r3, r3, #6
   2c044:	e7e9      	b.n	2c01a <modem_info_rsrp_subscribe_handler+0x3a>
	modem_info_rsrp_cb(param_value);
   2c046:	4b0a      	ldr	r3, [pc, #40]	; (2c070 <modem_info_rsrp_subscribe_handler+0x90>)
   2c048:	f89d 0002 	ldrb.w	r0, [sp, #2]
   2c04c:	681b      	ldr	r3, [r3, #0]
   2c04e:	4798      	blx	r3
   2c050:	e7e7      	b.n	2c022 <modem_info_rsrp_subscribe_handler+0x42>
   2c052:	bf00      	nop
   2c054:	00047fc6 	.word	0x00047fc6
   2c058:	00043558 	.word	0x00043558
   2c05c:	0004339c 	.word	0x0004339c
   2c060:	0004344c 	.word	0x0004344c
   2c064:	00047fcc 	.word	0x00047fcc
   2c068:	200191cc 	.word	0x200191cc
   2c06c:	00048003 	.word	0x00048003
   2c070:	200191d4 	.word	0x200191d4

0002c074 <modem_info_type_get>:
	if (info_type >= MODEM_INFO_COUNT) {
   2c074:	2815      	cmp	r0, #21
	return modem_data[info_type]->data_type;
   2c076:	bf9d      	ittte	ls
   2c078:	4b02      	ldrls	r3, [pc, #8]	; (2c084 <modem_info_type_get+0x10>)
   2c07a:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
   2c07e:	7a98      	ldrbls	r0, [r3, #10]
		return -EINVAL;
   2c080:	20ea      	movhi	r0, #234	; 0xea
}
   2c082:	4770      	bx	lr
   2c084:	00043bc0 	.word	0x00043bc0

0002c088 <modem_info_name_get>:
{
   2c088:	b570      	push	{r4, r5, r6, lr}
	if (name == NULL) {
   2c08a:	460d      	mov	r5, r1
   2c08c:	b919      	cbnz	r1, 2c096 <modem_info_name_get+0xe>
		return -EINVAL;
   2c08e:	f06f 0415 	mvn.w	r4, #21
}
   2c092:	4620      	mov	r0, r4
   2c094:	bd70      	pop	{r4, r5, r6, pc}
	len = strlen(modem_data[info]->data_name);
   2c096:	4b07      	ldr	r3, [pc, #28]	; (2c0b4 <modem_info_name_get+0x2c>)
   2c098:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2c09c:	6870      	ldr	r0, [r6, #4]
   2c09e:	f7f1 f8dd 	bl	1d25c <strlen>
	if (len <= 0) {
   2c0a2:	1e04      	subs	r4, r0, #0
   2c0a4:	ddf3      	ble.n	2c08e <modem_info_name_get+0x6>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c0a6:	4622      	mov	r2, r4
   2c0a8:	4628      	mov	r0, r5
   2c0aa:	6871      	ldr	r1, [r6, #4]
   2c0ac:	f015 fdf7 	bl	41c9e <memcpy>
   2c0b0:	e7ef      	b.n	2c092 <modem_info_name_get+0xa>
   2c0b2:	bf00      	nop
   2c0b4:	00043bc0 	.word	0x00043bc0

0002c0b8 <modem_info_short_get>:
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c0b8:	2300      	movs	r3, #0
{
   2c0ba:	b530      	push	{r4, r5, lr}
   2c0bc:	460d      	mov	r5, r1
   2c0be:	b0a1      	sub	sp, #132	; 0x84
   2c0c0:	4604      	mov	r4, r0
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c0c2:	227c      	movs	r2, #124	; 0x7c
   2c0c4:	4619      	mov	r1, r3
   2c0c6:	a801      	add	r0, sp, #4
   2c0c8:	9300      	str	r3, [sp, #0]
   2c0ca:	f015 fe08 	bl	41cde <memset>
	if (buf == NULL) {
   2c0ce:	b1e5      	cbz	r5, 2c10a <modem_info_short_get+0x52>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2c0d0:	4a11      	ldr	r2, [pc, #68]	; (2c118 <modem_info_short_get+0x60>)
   2c0d2:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
   2c0d6:	7aa2      	ldrb	r2, [r4, #10]
   2c0d8:	2a03      	cmp	r2, #3
   2c0da:	d016      	beq.n	2c10a <modem_info_short_get+0x52>
	err = at_cmd_write(modem_data[info]->cmd,
   2c0dc:	2300      	movs	r3, #0
   2c0de:	2280      	movs	r2, #128	; 0x80
   2c0e0:	4669      	mov	r1, sp
   2c0e2:	6820      	ldr	r0, [r4, #0]
   2c0e4:	f7fe fc5e 	bl	2a9a4 <at_cmd_write>
	if (err != 0) {
   2c0e8:	b990      	cbnz	r0, 2c110 <modem_info_short_get+0x58>
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_length]);
   2c0ea:	4669      	mov	r1, sp
   2c0ec:	f104 0009 	add.w	r0, r4, #9
   2c0f0:	f7ff ff5e 	bl	2bfb0 <modem_info_parse.isra.0>
	if (err) {
   2c0f4:	b938      	cbnz	r0, 2c106 <modem_info_short_get+0x4e>
	err = at_params_short_get(&m_param_list,
   2c0f6:	462a      	mov	r2, r5
   2c0f8:	7a21      	ldrb	r1, [r4, #8]
   2c0fa:	4808      	ldr	r0, [pc, #32]	; (2c11c <modem_info_short_get+0x64>)
   2c0fc:	f013 fd46 	bl	3fb8c <at_params_short_get>
	return sizeof(uint16_t);
   2c100:	2800      	cmp	r0, #0
   2c102:	bf08      	it	eq
   2c104:	2002      	moveq	r0, #2
}
   2c106:	b021      	add	sp, #132	; 0x84
   2c108:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   2c10a:	f06f 0015 	mvn.w	r0, #21
   2c10e:	e7fa      	b.n	2c106 <modem_info_short_get+0x4e>
		return -EIO;
   2c110:	f06f 0004 	mvn.w	r0, #4
   2c114:	e7f7      	b.n	2c106 <modem_info_short_get+0x4e>
   2c116:	bf00      	nop
   2c118:	00043bc0 	.word	0x00043bc0
   2c11c:	200191cc 	.word	0x200191cc

0002c120 <modem_info_string_get>:
{
   2c120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c124:	2500      	movs	r5, #0
{
   2c126:	460e      	mov	r6, r1
   2c128:	b0a5      	sub	sp, #148	; 0x94
   2c12a:	4680      	mov	r8, r0
   2c12c:	4691      	mov	r9, r2
	char recv_buf[CONFIG_MODEM_INFO_BUFFER_SIZE] = {0};
   2c12e:	4629      	mov	r1, r5
   2c130:	227c      	movs	r2, #124	; 0x7c
   2c132:	a805      	add	r0, sp, #20
   2c134:	9504      	str	r5, [sp, #16]
   2c136:	f015 fdd2 	bl	41cde <memset>
	size_t len = 0;
   2c13a:	9503      	str	r5, [sp, #12]
	if ((buf == NULL) || (buf_size == 0)) {
   2c13c:	2e00      	cmp	r6, #0
   2c13e:	f000 80e3 	beq.w	2c308 <modem_info_string_get+0x1e8>
   2c142:	f1b9 0f00 	cmp.w	r9, #0
   2c146:	f000 80df 	beq.w	2c308 <modem_info_string_get+0x1e8>
	err = at_cmd_write(modem_data[info]->cmd,
   2c14a:	4b74      	ldr	r3, [pc, #464]	; (2c31c <modem_info_string_get+0x1fc>)
   2c14c:	2280      	movs	r2, #128	; 0x80
   2c14e:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2c152:	a904      	add	r1, sp, #16
   2c154:	462b      	mov	r3, r5
   2c156:	f8da 0000 	ldr.w	r0, [sl]
   2c15a:	f7fe fc23 	bl	2a9a4 <at_cmd_write>
	if (info == MODEM_INFO_SUP_BAND) {
   2c15e:	f1b8 0f02 	cmp.w	r8, #2
	err = at_cmd_write(modem_data[info]->cmd,
   2c162:	4604      	mov	r4, r0
	if (info == MODEM_INFO_SUP_BAND) {
   2c164:	d10c      	bne.n	2c180 <modem_info_string_get+0x60>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2c166:	f10d 0119 	add.w	r1, sp, #25
   2c16a:	4630      	mov	r0, r6
   2c16c:	f015 ff7c 	bl	42068 <strcpy>
		return strlen(buf);
   2c170:	4630      	mov	r0, r6
   2c172:	f7f1 f873 	bl	1d25c <strlen>
   2c176:	4602      	mov	r2, r0
}
   2c178:	4610      	mov	r0, r2
   2c17a:	b025      	add	sp, #148	; 0x94
   2c17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (info == MODEM_INFO_IP_ADDRESS) {
   2c180:	f1b8 0f09 	cmp.w	r8, #9
   2c184:	d038      	beq.n	2c1f8 <modem_info_string_get+0xd8>
	if (err != 0) {
   2c186:	2c00      	cmp	r4, #0
   2c188:	f040 80c1 	bne.w	2c30e <modem_info_string_get+0x1ee>
	size_t ip_str_len = 0;
   2c18c:	4627      	mov	r7, r4
		err = at_params_string_get(&m_param_list,
   2c18e:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 2c340 <modem_info_string_get+0x220>
	size_t cmd_rsp_idx = 0;
   2c192:	9400      	str	r4, [sp, #0]
	if (info == MODEM_INFO_IP_ADDRESS) {
   2c194:	9a00      	ldr	r2, [sp, #0]
   2c196:	ab04      	add	r3, sp, #16
   2c198:	f1b8 0f09 	cmp.w	r8, #9
   2c19c:	4413      	add	r3, r2
   2c19e:	d10f      	bne.n	2c1c0 <modem_info_string_get+0xa0>
		ip_str_end = strstr(&recv_buf[cmd_rsp_idx], AT_CMD_RSP_DELIM);
   2c1a0:	4618      	mov	r0, r3
   2c1a2:	495f      	ldr	r1, [pc, #380]	; (2c320 <modem_info_string_get+0x200>)
   2c1a4:	9301      	str	r3, [sp, #4]
   2c1a6:	f015 ffb5 	bl	42114 <strstr>
		if (ip_str_end == NULL) {
   2c1aa:	2800      	cmp	r0, #0
   2c1ac:	f000 80b2 	beq.w	2c314 <modem_info_string_get+0x1f4>
		recv_buf[++ip_str_len] = 0;
   2c1b0:	2100      	movs	r1, #0
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2c1b2:	9b01      	ldr	r3, [sp, #4]
		recv_buf[++ip_str_len] = 0;
   2c1b4:	aa24      	add	r2, sp, #144	; 0x90
		ip_str_len = ip_str_end - &recv_buf[cmd_rsp_idx];
   2c1b6:	1ac0      	subs	r0, r0, r3
		recv_buf[++ip_str_len] = 0;
   2c1b8:	1c47      	adds	r7, r0, #1
   2c1ba:	443a      	add	r2, r7
   2c1bc:	f802 1c80 	strb.w	r1, [r2, #-128]
	err = modem_info_parse(modem_data[info], &recv_buf[cmd_rsp_idx]);
   2c1c0:	4619      	mov	r1, r3
   2c1c2:	f10a 0009 	add.w	r0, sl, #9
   2c1c6:	f7ff fef3 	bl	2bfb0 <modem_info_parse.isra.0>
	if (err) {
   2c1ca:	4602      	mov	r2, r0
   2c1cc:	b1b8      	cbz	r0, 2c1fe <modem_info_string_get+0xde>
   2c1ce:	4855      	ldr	r0, [pc, #340]	; (2c324 <modem_info_string_get+0x204>)
   2c1d0:	4b55      	ldr	r3, [pc, #340]	; (2c328 <modem_info_string_get+0x208>)
		LOG_ERR("Unable to parse data: %d", err);
   2c1d2:	4956      	ldr	r1, [pc, #344]	; (2c32c <modem_info_string_get+0x20c>)
   2c1d4:	1ac0      	subs	r0, r0, r3
   2c1d6:	08c0      	lsrs	r0, r0, #3
   2c1d8:	0180      	lsls	r0, r0, #6
   2c1da:	9200      	str	r2, [sp, #0]
			LOG_ERR("Unable to obtain short: %d", err);
   2c1dc:	f040 0001 	orr.w	r0, r0, #1
   2c1e0:	f011 f88e 	bl	3d300 <log_string_sync>
			return err;
   2c1e4:	9a00      	ldr	r2, [sp, #0]
   2c1e6:	e7c7      	b.n	2c178 <modem_info_string_get+0x58>
			++ip_str_end;
   2c1e8:	3001      	adds	r0, #1
			++ip_cnt;
   2c1ea:	3501      	adds	r5, #1
		while ((ip_str_end = strstr(ip_str_end, AT_CMD_RSP_DELIM))
   2c1ec:	4639      	mov	r1, r7
   2c1ee:	f015 ff91 	bl	42114 <strstr>
   2c1f2:	2800      	cmp	r0, #0
   2c1f4:	d1f8      	bne.n	2c1e8 <modem_info_string_get+0xc8>
   2c1f6:	e7c6      	b.n	2c186 <modem_info_string_get+0x66>
   2c1f8:	4f49      	ldr	r7, [pc, #292]	; (2c320 <modem_info_string_get+0x200>)
	char *ip_str_end = recv_buf;
   2c1fa:	a804      	add	r0, sp, #16
   2c1fc:	e7f6      	b.n	2c1ec <modem_info_string_get+0xcc>
	if (modem_data[info]->data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2c1fe:	f89a 300a 	ldrb.w	r3, [sl, #10]
   2c202:	2b01      	cmp	r3, #1
   2c204:	d11d      	bne.n	2c242 <modem_info_string_get+0x122>
		err = at_params_short_get(&m_param_list,
   2c206:	f10d 020a 	add.w	r2, sp, #10
   2c20a:	4658      	mov	r0, fp
   2c20c:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2c210:	f013 fcbc 	bl	3fb8c <at_params_short_get>
		if (err) {
   2c214:	4602      	mov	r2, r0
   2c216:	b138      	cbz	r0, 2c228 <modem_info_string_get+0x108>
   2c218:	4842      	ldr	r0, [pc, #264]	; (2c324 <modem_info_string_get+0x204>)
   2c21a:	4b43      	ldr	r3, [pc, #268]	; (2c328 <modem_info_string_get+0x208>)
			LOG_ERR("Unable to obtain short: %d", err);
   2c21c:	4944      	ldr	r1, [pc, #272]	; (2c330 <modem_info_string_get+0x210>)
   2c21e:	1ac0      	subs	r0, r0, r3
   2c220:	08c0      	lsrs	r0, r0, #3
   2c222:	0180      	lsls	r0, r0, #6
   2c224:	9200      	str	r2, [sp, #0]
   2c226:	e7d9      	b.n	2c1dc <modem_info_string_get+0xbc>
		len = snprintf(buf, buf_size, "%d", param_value);
   2c228:	4649      	mov	r1, r9
   2c22a:	4630      	mov	r0, r6
   2c22c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2c230:	4a40      	ldr	r2, [pc, #256]	; (2c334 <modem_info_string_get+0x214>)
   2c232:	f00f f97b 	bl	3b52c <sniprintf>
		if ((len <= 0) || (len > buf_size)) {
   2c236:	4548      	cmp	r0, r9
		len = snprintf(buf, buf_size, "%d", param_value);
   2c238:	9003      	str	r0, [sp, #12]
		if ((len <= 0) || (len > buf_size)) {
   2c23a:	d915      	bls.n	2c268 <modem_info_string_get+0x148>
			return -EMSGSIZE;
   2c23c:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2c240:	e79a      	b.n	2c178 <modem_info_string_get+0x58>
	} else if (modem_data[info]->data_type == AT_PARAM_TYPE_STRING) {
   2c242:	2b03      	cmp	r3, #3
   2c244:	d110      	bne.n	2c268 <modem_info_string_get+0x148>
		len = buf_size - out_buf_len;
   2c246:	eba9 0304 	sub.w	r3, r9, r4
   2c24a:	9303      	str	r3, [sp, #12]
		err = at_params_string_get(&m_param_list,
   2c24c:	1932      	adds	r2, r6, r4
   2c24e:	4658      	mov	r0, fp
   2c250:	f89a 1008 	ldrb.w	r1, [sl, #8]
   2c254:	ab03      	add	r3, sp, #12
   2c256:	f013 fcc6 	bl	3fbe6 <at_params_string_get>
		if (err != 0) {
   2c25a:	4602      	mov	r2, r0
   2c25c:	2800      	cmp	r0, #0
   2c25e:	d18b      	bne.n	2c178 <modem_info_string_get+0x58>
		} else if (len >= buf_size) {
   2c260:	9b03      	ldr	r3, [sp, #12]
   2c262:	454b      	cmp	r3, r9
   2c264:	d2ea      	bcs.n	2c23c <modem_info_string_get+0x11c>
		buf[len] = 0;
   2c266:	54f0      	strb	r0, [r6, r3]
	if (info == MODEM_INFO_ICCID) {
   2c268:	f1b8 0f0e 	cmp.w	r8, #14
   2c26c:	d121      	bne.n	2c2b2 <modem_info_string_get+0x192>
   2c26e:	4634      	mov	r4, r6
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2c270:	4630      	mov	r0, r6
   2c272:	f7f0 fff3 	bl	1d25c <strlen>
   2c276:	1ca3      	adds	r3, r4, #2
   2c278:	1ba4      	subs	r4, r4, r6
   2c27a:	42a0      	cmp	r0, r4
   2c27c:	d80f      	bhi.n	2c29e <modem_info_string_get+0x17e>
		if ((len == ICCID_LEN) &&
   2c27e:	9b03      	ldr	r3, [sp, #12]
   2c280:	2b14      	cmp	r3, #20
   2c282:	d106      	bne.n	2c292 <modem_info_string_get+0x172>
   2c284:	7cf3      	ldrb	r3, [r6, #19]
   2c286:	2b46      	cmp	r3, #70	; 0x46
   2c288:	d103      	bne.n	2c292 <modem_info_string_get+0x172>
			buf[len - 1] = '\0';
   2c28a:	2300      	movs	r3, #0
   2c28c:	74f3      	strb	r3, [r6, #19]
			--len;
   2c28e:	2313      	movs	r3, #19
   2c290:	9303      	str	r3, [sp, #12]
	return len <= 0 ? -ENOTSUP : len;
   2c292:	9a03      	ldr	r2, [sp, #12]
   2c294:	2a00      	cmp	r2, #0
   2c296:	bf08      	it	eq
   2c298:	f06f 0285 	mvneq.w	r2, #133	; 0x85
   2c29c:	e76c      	b.n	2c178 <modem_info_string_get+0x58>
		current_char = buf[i];
   2c29e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
		buf[i] = next_char;
   2c2a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
		buf[i + 1] = current_char;
   2c2a6:	461c      	mov	r4, r3
		buf[i] = next_char;
   2c2a8:	f803 1c02 	strb.w	r1, [r3, #-2]
		buf[i + 1] = current_char;
   2c2ac:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (size_t i = 0; i < strlen(buf); i = i + 2) {
   2c2b0:	e7de      	b.n	2c270 <modem_info_string_get+0x150>
	if ((info == MODEM_INFO_IP_ADDRESS) && (ip_cnt > 0)) {
   2c2b2:	f1b8 0f09 	cmp.w	r8, #9
   2c2b6:	d1ec      	bne.n	2c292 <modem_info_string_get+0x172>
   2c2b8:	2d00      	cmp	r5, #0
   2c2ba:	ddea      	ble.n	2c292 <modem_info_string_get+0x172>
		char *ip_v6_str = strstr(&buf[out_buf_len], " ");
   2c2bc:	1933      	adds	r3, r6, r4
   2c2be:	4618      	mov	r0, r3
   2c2c0:	491d      	ldr	r1, [pc, #116]	; (2c338 <modem_info_string_get+0x218>)
   2c2c2:	9301      	str	r3, [sp, #4]
   2c2c4:	f015 ff26 	bl	42114 <strstr>
		if (ip_v6_str) {
   2c2c8:	b130      	cbz	r0, 2c2d8 <modem_info_string_get+0x1b8>
			*ip_v6_str = 0;
   2c2ca:	2200      	movs	r2, #0
			len = strlen(&buf[out_buf_len]);
   2c2cc:	9b01      	ldr	r3, [sp, #4]
			*ip_v6_str = 0;
   2c2ce:	7002      	strb	r2, [r0, #0]
			len = strlen(&buf[out_buf_len]);
   2c2d0:	4618      	mov	r0, r3
   2c2d2:	f7f0 ffc3 	bl	1d25c <strlen>
   2c2d6:	9003      	str	r0, [sp, #12]
		out_buf_len += len;
   2c2d8:	9b03      	ldr	r3, [sp, #12]
		if (ip_cnt > 1) {
   2c2da:	2d01      	cmp	r5, #1
		out_buf_len += len;
   2c2dc:	441c      	add	r4, r3
		if (ip_cnt > 1) {
   2c2de:	d00e      	beq.n	2c2fe <modem_info_string_get+0x1de>
			err = snprintf(&buf[out_buf_len],
   2c2e0:	eba9 0104 	sub.w	r1, r9, r4
   2c2e4:	4a15      	ldr	r2, [pc, #84]	; (2c33c <modem_info_string_get+0x21c>)
   2c2e6:	1930      	adds	r0, r6, r4
   2c2e8:	9100      	str	r1, [sp, #0]
   2c2ea:	f00f f91f 	bl	3b52c <sniprintf>
			if ((err <= 0) || (err > (buf_size - out_buf_len))) {
   2c2ee:	2800      	cmp	r0, #0
   2c2f0:	dda4      	ble.n	2c23c <modem_info_string_get+0x11c>
   2c2f2:	9900      	ldr	r1, [sp, #0]
   2c2f4:	4281      	cmp	r1, r0
   2c2f6:	d3a1      	bcc.n	2c23c <modem_info_string_get+0x11c>
			cmd_rsp_idx = ip_str_len + 1;
   2c2f8:	1c7b      	adds	r3, r7, #1
			out_buf_len += IP_ADDR_SEPARATOR_LEN;
   2c2fa:	3402      	adds	r4, #2
			cmd_rsp_idx = ip_str_len + 1;
   2c2fc:	9300      	str	r3, [sp, #0]
		if (--ip_cnt) {
   2c2fe:	3d01      	subs	r5, #1
   2c300:	f47f af48 	bne.w	2c194 <modem_info_string_get+0x74>
			len = out_buf_len;
   2c304:	9403      	str	r4, [sp, #12]
   2c306:	e7c4      	b.n	2c292 <modem_info_string_get+0x172>
		return -EINVAL;
   2c308:	f06f 0215 	mvn.w	r2, #21
   2c30c:	e734      	b.n	2c178 <modem_info_string_get+0x58>
		return -EIO;
   2c30e:	f06f 0204 	mvn.w	r2, #4
   2c312:	e731      	b.n	2c178 <modem_info_string_get+0x58>
			return -EFAULT;
   2c314:	f06f 020d 	mvn.w	r2, #13
   2c318:	e72e      	b.n	2c178 <modem_info_string_get+0x58>
   2c31a:	bf00      	nop
   2c31c:	00043bc0 	.word	0x00043bc0
   2c320:	0004a585 	.word	0x0004a585
   2c324:	0004344c 	.word	0x0004344c
   2c328:	0004339c 	.word	0x0004339c
   2c32c:	00048023 	.word	0x00048023
   2c330:	0004803c 	.word	0x0004803c
   2c334:	00048e4c 	.word	0x00048e4c
   2c338:	00045ae6 	.word	0x00045ae6
   2c33c:	00045486 	.word	0x00045486
   2c340:	200191cc 	.word	0x200191cc

0002c344 <modem_info_rsrp_register>:

int modem_info_rsrp_register(rsrp_cb_t cb)
{
	modem_info_rsrp_cb = cb;
   2c344:	4b10      	ldr	r3, [pc, #64]	; (2c388 <modem_info_rsrp_register+0x44>)
{
   2c346:	b510      	push	{r4, lr}

	int rc = at_notif_register_handler(NULL,
   2c348:	4910      	ldr	r1, [pc, #64]	; (2c38c <modem_info_rsrp_register+0x48>)
	modem_info_rsrp_cb = cb;
   2c34a:	6018      	str	r0, [r3, #0]
	int rc = at_notif_register_handler(NULL,
   2c34c:	2000      	movs	r0, #0
   2c34e:	f7fe fc53 	bl	2abf8 <at_notif_register_handler>
		modem_info_rsrp_subscribe_handler);
	if (rc != 0) {
   2c352:	4604      	mov	r4, r0
   2c354:	b160      	cbz	r0, 2c370 <modem_info_rsrp_register+0x2c>
   2c356:	480e      	ldr	r0, [pc, #56]	; (2c390 <modem_info_rsrp_register+0x4c>)
   2c358:	4b0e      	ldr	r3, [pc, #56]	; (2c394 <modem_info_rsrp_register+0x50>)
		LOG_ERR("Can't register handler rc=%d", rc);
   2c35a:	4622      	mov	r2, r4
   2c35c:	1ac0      	subs	r0, r0, r3
   2c35e:	08c0      	lsrs	r0, r0, #3
   2c360:	0180      	lsls	r0, r0, #6
   2c362:	490d      	ldr	r1, [pc, #52]	; (2c398 <modem_info_rsrp_register+0x54>)
   2c364:	f040 0001 	orr.w	r0, r0, #1
   2c368:	f010 ffca 	bl	3d300 <log_string_sync>
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
		return -EIO;
	}

	return 0;
}
   2c36c:	4620      	mov	r0, r4
   2c36e:	bd10      	pop	{r4, pc}
	if (at_cmd_write(AT_CMD_CESQ_ON, NULL, 0, NULL) != 0) {
   2c370:	4603      	mov	r3, r0
   2c372:	4602      	mov	r2, r0
   2c374:	4601      	mov	r1, r0
   2c376:	4809      	ldr	r0, [pc, #36]	; (2c39c <modem_info_rsrp_register+0x58>)
   2c378:	f7fe fb14 	bl	2a9a4 <at_cmd_write>
   2c37c:	1e04      	subs	r4, r0, #0
		return -EIO;
   2c37e:	bf18      	it	ne
   2c380:	f06f 0404 	mvnne.w	r4, #4
   2c384:	e7f2      	b.n	2c36c <modem_info_rsrp_register+0x28>
   2c386:	bf00      	nop
   2c388:	200191d4 	.word	0x200191d4
   2c38c:	0002bfe1 	.word	0x0002bfe1
   2c390:	0004344c 	.word	0x0004344c
   2c394:	0004339c 	.word	0x0004339c
   2c398:	00048057 	.word	0x00048057
   2c39c:	00048074 	.word	0x00048074

0002c3a0 <modem_info_init>:

int modem_info_init(void)
{
	/* Init at_cmd_parser storage module */
	int err = at_params_list_init(&m_param_list,
   2c3a0:	210a      	movs	r1, #10
   2c3a2:	4801      	ldr	r0, [pc, #4]	; (2c3a8 <modem_info_init+0x8>)
   2c3a4:	f013 bb45 	b.w	3fa32 <at_params_list_init>
   2c3a8:	200191cc 	.word	0x200191cc

0002c3ac <modem_data_get>:

	return 0;
}

static int modem_data_get(struct lte_param *param)
{
   2c3ac:	b538      	push	{r3, r4, r5, lr}
   2c3ae:	4605      	mov	r5, r0
	enum at_param_type data_type;
	int ret;

	data_type = modem_info_type_get(param->type);
   2c3b0:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
   2c3b4:	f7ff fe5e 	bl	2c074 <modem_info_type_get>

	if (data_type < 0) {
		return -EINVAL;
	}

	if (data_type == AT_PARAM_TYPE_STRING) {
   2c3b8:	2803      	cmp	r0, #3
   2c3ba:	d118      	bne.n	2c3ee <modem_data_get+0x42>
		ret = modem_info_string_get(param->type,
   2c3bc:	2264      	movs	r2, #100	; 0x64
   2c3be:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2c3c2:	1ca9      	adds	r1, r5, #2
   2c3c4:	f7ff feac 	bl	2c120 <modem_info_string_get>
				param->value_string,
				sizeof(param->value_string));
		if (ret < 0) {
   2c3c8:	1e04      	subs	r4, r0, #0
   2c3ca:	db02      	blt.n	2c3d2 <modem_data_get+0x26>
			LOG_ERR("Link data not obtained: %d", ret);
			return ret;
		}
	}

	return 0;
   2c3cc:	2400      	movs	r4, #0
}
   2c3ce:	4620      	mov	r0, r4
   2c3d0:	bd38      	pop	{r3, r4, r5, pc}
   2c3d2:	4b11      	ldr	r3, [pc, #68]	; (2c418 <modem_data_get+0x6c>)
   2c3d4:	4811      	ldr	r0, [pc, #68]	; (2c41c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d %d", param->type, ret);
   2c3d6:	f895 206c 	ldrb.w	r2, [r5, #108]	; 0x6c
   2c3da:	1ac0      	subs	r0, r0, r3
   2c3dc:	08c0      	lsrs	r0, r0, #3
   2c3de:	0180      	lsls	r0, r0, #6
   2c3e0:	4623      	mov	r3, r4
   2c3e2:	490f      	ldr	r1, [pc, #60]	; (2c420 <modem_data_get+0x74>)
   2c3e4:	f040 0001 	orr.w	r0, r0, #1
   2c3e8:	f010 ff8a 	bl	3d300 <log_string_sync>
			return ret;
   2c3ec:	e7ef      	b.n	2c3ce <modem_data_get+0x22>
	} else if (data_type == AT_PARAM_TYPE_NUM_SHORT) {
   2c3ee:	2801      	cmp	r0, #1
   2c3f0:	d1ec      	bne.n	2c3cc <modem_data_get+0x20>
		ret = modem_info_short_get(param->type, &param->value);
   2c3f2:	4629      	mov	r1, r5
   2c3f4:	f895 006c 	ldrb.w	r0, [r5, #108]	; 0x6c
   2c3f8:	f7ff fe5e 	bl	2c0b8 <modem_info_short_get>
		if (ret < 0) {
   2c3fc:	1e04      	subs	r4, r0, #0
   2c3fe:	dae5      	bge.n	2c3cc <modem_data_get+0x20>
   2c400:	4b05      	ldr	r3, [pc, #20]	; (2c418 <modem_data_get+0x6c>)
   2c402:	4806      	ldr	r0, [pc, #24]	; (2c41c <modem_data_get+0x70>)
			LOG_ERR("Link data not obtained: %d", ret);
   2c404:	4622      	mov	r2, r4
   2c406:	1ac0      	subs	r0, r0, r3
   2c408:	08c0      	lsrs	r0, r0, #3
   2c40a:	0180      	lsls	r0, r0, #6
   2c40c:	4905      	ldr	r1, [pc, #20]	; (2c424 <modem_data_get+0x78>)
   2c40e:	f040 0001 	orr.w	r0, r0, #1
   2c412:	f010 ff75 	bl	3d300 <log_string_sync>
			return ret;
   2c416:	e7da      	b.n	2c3ce <modem_data_get+0x22>
   2c418:	0004339c 	.word	0x0004339c
   2c41c:	0004345c 	.word	0x0004345c
   2c420:	0004807e 	.word	0x0004807e
   2c424:	0004809c 	.word	0x0004809c

0002c428 <modem_info_params_init>:
	if (modem == NULL) {
   2c428:	2800      	cmp	r0, #0
   2c42a:	d046      	beq.n	2c4ba <modem_info_params_init+0x92>
	modem->network.current_band.type	= MODEM_INFO_CUR_BAND;
   2c42c:	2301      	movs	r3, #1
   2c42e:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
	modem->network.sup_band.type		= MODEM_INFO_SUP_BAND;
   2c432:	2302      	movs	r3, #2
   2c434:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
	modem->network.area_code.type		= MODEM_INFO_AREA_CODE;
   2c438:	2303      	movs	r3, #3
   2c43a:	f880 314c 	strb.w	r3, [r0, #332]	; 0x14c
	modem->network.current_operator.type	= MODEM_INFO_OPERATOR;
   2c43e:	2305      	movs	r3, #5
   2c440:	f880 31bc 	strb.w	r3, [r0, #444]	; 0x1bc
	modem->network.mcc.type			= MODEM_INFO_MCC;
   2c444:	2306      	movs	r3, #6
   2c446:	f880 322c 	strb.w	r3, [r0, #556]	; 0x22c
	modem->network.mnc.type			= MODEM_INFO_MNC;
   2c44a:	2307      	movs	r3, #7
   2c44c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
	modem->network.cellid_hex.type		= MODEM_INFO_CELLID;
   2c450:	2308      	movs	r3, #8
   2c452:	f880 330c 	strb.w	r3, [r0, #780]	; 0x30c
	modem->network.ip_address.type		= MODEM_INFO_IP_ADDRESS;
   2c456:	2309      	movs	r3, #9
   2c458:	f880 337c 	strb.w	r3, [r0, #892]	; 0x37c
	modem->network.ue_mode.type		= MODEM_INFO_UE_MODE;
   2c45c:	2304      	movs	r3, #4
   2c45e:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
	modem->network.lte_mode.type		= MODEM_INFO_LTE_MODE;
   2c462:	230f      	movs	r3, #15
   2c464:	f880 345c 	strb.w	r3, [r0, #1116]	; 0x45c
	modem->network.nbiot_mode.type		= MODEM_INFO_NBIOT_MODE;
   2c468:	2310      	movs	r3, #16
   2c46a:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
	modem->network.gps_mode.type		= MODEM_INFO_GPS_MODE;
   2c46e:	2311      	movs	r3, #17
   2c470:	f880 353c 	strb.w	r3, [r0, #1340]	; 0x53c
	modem->network.date_time.type		= MODEM_INFO_DATE_TIME;
   2c474:	2314      	movs	r3, #20
   2c476:	f880 35ac 	strb.w	r3, [r0, #1452]	; 0x5ac
	modem->network.apn.type			= MODEM_INFO_APN;
   2c47a:	2315      	movs	r3, #21
   2c47c:	f880 361c 	strb.w	r3, [r0, #1564]	; 0x61c
	modem->sim.uicc.type			= MODEM_INFO_UICC;
   2c480:	230a      	movs	r3, #10
   2c482:	f880 36a4 	strb.w	r3, [r0, #1700]	; 0x6a4
	modem->sim.iccid.type			= MODEM_INFO_ICCID;
   2c486:	230e      	movs	r3, #14
   2c488:	f880 3714 	strb.w	r3, [r0, #1812]	; 0x714
	modem->sim.imsi.type		        = MODEM_INFO_IMSI;
   2c48c:	2312      	movs	r3, #18
   2c48e:	f880 3784 	strb.w	r3, [r0, #1924]	; 0x784
	modem->device.modem_fw.type		= MODEM_INFO_FW_VERSION;
   2c492:	230d      	movs	r3, #13
   2c494:	f880 37f4 	strb.w	r3, [r0, #2036]	; 0x7f4
	modem->device.battery.type		= MODEM_INFO_BATTERY;
   2c498:	230b      	movs	r3, #11
   2c49a:	f880 3864 	strb.w	r3, [r0, #2148]	; 0x864
	modem->device.imei.type			= MODEM_INFO_IMEI;
   2c49e:	2313      	movs	r3, #19
   2c4a0:	f880 38d4 	strb.w	r3, [r0, #2260]	; 0x8d4
	modem->device.board			= CONFIG_BOARD;
   2c4a4:	4b06      	ldr	r3, [pc, #24]	; (2c4c0 <modem_info_params_init+0x98>)
   2c4a6:	f8c0 38d8 	str.w	r3, [r0, #2264]	; 0x8d8
	modem->device.app_version		= STRINGIFY(APP_VERSION);
   2c4aa:	4b06      	ldr	r3, [pc, #24]	; (2c4c4 <modem_info_params_init+0x9c>)
   2c4ac:	f8c0 38dc 	str.w	r3, [r0, #2268]	; 0x8dc
	modem->device.app_name			= STRINGIFY(PROJECT_NAME);
   2c4b0:	4b05      	ldr	r3, [pc, #20]	; (2c4c8 <modem_info_params_init+0xa0>)
   2c4b2:	f8c0 38e0 	str.w	r3, [r0, #2272]	; 0x8e0
	return 0;
   2c4b6:	2000      	movs	r0, #0
   2c4b8:	4770      	bx	lr
		return -EINVAL;
   2c4ba:	f06f 0015 	mvn.w	r0, #21
}
   2c4be:	4770      	bx	lr
   2c4c0:	000480b7 	.word	0x000480b7
   2c4c4:	000480c9 	.word	0x000480c9
   2c4c8:	0004420b 	.word	0x0004420b

0002c4cc <modem_info_params_get>:

int modem_info_params_get(struct modem_param_info *modem)
{
   2c4cc:	e92d 4477 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, sl, lr}
	int ret;

	if (modem == NULL) {
   2c4d0:	4604      	mov	r4, r0
   2c4d2:	2800      	cmp	r0, #0
   2c4d4:	f000 80c7 	beq.w	2c666 <modem_info_params_get+0x19a>
		return -EINVAL;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK)) {
		ret = modem_data_get(&modem->network.current_band);
   2c4d8:	f7ff ff68 	bl	2c3ac <modem_data_get>
   2c4dc:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->network.sup_band);
   2c4de:	f104 0070 	add.w	r0, r4, #112	; 0x70
   2c4e2:	f7ff ff63 	bl	2c3ac <modem_data_get>
   2c4e6:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ip_address);
   2c4e8:	f504 7044 	add.w	r0, r4, #784	; 0x310
   2c4ec:	f7ff ff5e 	bl	2c3ac <modem_data_get>
   2c4f0:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.ue_mode);
   2c4f2:	f504 7060 	add.w	r0, r4, #896	; 0x380
   2c4f6:	f7ff ff59 	bl	2c3ac <modem_data_get>
		ret += modem_data_get(&modem->network.current_operator);
   2c4fa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		ret += modem_data_get(&modem->network.ue_mode);
   2c4fe:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.current_operator);
   2c500:	4618      	mov	r0, r3
   2c502:	9301      	str	r3, [sp, #4]
   2c504:	f7ff ff52 	bl	2c3ac <modem_data_get>
   2c508:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.cellid_hex);
   2c50a:	f504 7028 	add.w	r0, r4, #672	; 0x2a0
   2c50e:	f7ff ff4d 	bl	2c3ac <modem_data_get>
		ret += modem_data_get(&modem->network.area_code);
   2c512:	f104 0ae0 	add.w	sl, r4, #224	; 0xe0
		ret += modem_data_get(&modem->network.cellid_hex);
   2c516:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.area_code);
   2c518:	4650      	mov	r0, sl
   2c51a:	f7ff ff47 	bl	2c3ac <modem_data_get>
   2c51e:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.lte_mode);
   2c520:	f504 707c 	add.w	r0, r4, #1008	; 0x3f0
   2c524:	f7ff ff42 	bl	2c3ac <modem_data_get>
   2c528:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.nbiot_mode);
   2c52a:	f504 608c 	add.w	r0, r4, #1120	; 0x460
   2c52e:	f7ff ff3d 	bl	2c3ac <modem_data_get>
   2c532:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.gps_mode);
   2c534:	f504 609a 	add.w	r0, r4, #1232	; 0x4d0
   2c538:	f7ff ff38 	bl	2c3ac <modem_data_get>
   2c53c:	4405      	add	r5, r0
		ret += modem_data_get(&modem->network.apn);
   2c53e:	f504 60b6 	add.w	r0, r4, #1456	; 0x5b0
   2c542:	f7ff ff33 	bl	2c3ac <modem_data_get>
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   2c546:	9b01      	ldr	r3, [sp, #4]
		ret += modem_data_get(&modem->network.apn);
   2c548:	4405      	add	r5, r0

		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DATE_TIME)) {
			ret += modem_data_get(&modem->network.date_time);
		}

		ret += mcc_mnc_parse(&modem->network.current_operator,
   2c54a:	f504 71e0 	add.w	r1, r4, #448	; 0x1c0
   2c54e:	f504 720c 	add.w	r2, r4, #560	; 0x230
	if (current_operator == NULL || mcc == NULL || mnc == NULL) {
   2c552:	2b00      	cmp	r3, #0
   2c554:	d050      	beq.n	2c5f8 <modem_info_params_get+0x12c>
   2c556:	2900      	cmp	r1, #0
   2c558:	d04e      	beq.n	2c5f8 <modem_info_params_get+0x12c>
   2c55a:	2a00      	cmp	r2, #0
   2c55c:	d04c      	beq.n	2c5f8 <modem_info_params_get+0x12c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c55e:	f8b4 3152 	ldrh.w	r3, [r4, #338]	; 0x152
	memcpy(mcc->value_string, current_operator->value_string, 3);
   2c562:	f504 70e1 	add.w	r0, r4, #450	; 0x1c2
   2c566:	f8a4 31c2 	strh.w	r3, [r4, #450]	; 0x1c2
   2c56a:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c56e:	220a      	movs	r2, #10
   2c570:	7083      	strb	r3, [r0, #2]
   2c572:	f8b4 3155 	ldrh.w	r3, [r4, #341]	; 0x155
   2c576:	2100      	movs	r1, #0
   2c578:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
   2c57c:	f894 3157 	ldrb.w	r3, [r4, #343]	; 0x157
		memcpy(&mnc->value_string, &current_operator->value_string[3], 3);
   2c580:	f204 2632 	addw	r6, r4, #562	; 0x232
   2c584:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c588:	f00f f8b4 	bl	3b6f4 <strtol>
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c58c:	220a      	movs	r2, #10
	mcc->value = (double)strtol(mcc->value_string, NULL, 10);
   2c58e:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c592:	2100      	movs	r1, #0
   2c594:	4630      	mov	r0, r6
   2c596:	f00f f8ad 	bl	3b6f4 <strtol>
	return 0;
   2c59a:	2200      	movs	r2, #0
	mnc->value = (double)strtol(mnc->value_string, NULL, 10);
   2c59c:	f8a4 0230 	strh.w	r0, [r4, #560]	; 0x230
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2c5a0:	2100      	movs	r1, #0
		ret += mcc_mnc_parse(&modem->network.current_operator,
   2c5a2:	4415      	add	r5, r2
	*cellID_dec = (double)strtol(cellID->value_string, NULL, 16);
   2c5a4:	f204 20a2 	addw	r0, r4, #674	; 0x2a2
   2c5a8:	2210      	movs	r2, #16
   2c5aa:	f00f f8a3 	bl	3b6f4 <strtol>
   2c5ae:	f7f0 f899 	bl	1c6e4 <__aeabi_i2d>
   2c5b2:	f504 66c4 	add.w	r6, r4, #1568	; 0x620
   2c5b6:	e9c6 0100 	strd	r0, r1, [r6]
	if (area_code == NULL) {
   2c5ba:	f1ba 0f00 	cmp.w	sl, #0
   2c5be:	d01e      	beq.n	2c5fe <modem_info_params_get+0x132>
	area_code->value_string[4] = '\0';
   2c5c0:	2600      	movs	r6, #0
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2c5c2:	2210      	movs	r2, #16
   2c5c4:	4631      	mov	r1, r6
	area_code->value_string[4] = '\0';
   2c5c6:	f884 60e6 	strb.w	r6, [r4, #230]	; 0xe6
	area_code->value = strtol(area_code->value_string, NULL, 16);
   2c5ca:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
   2c5ce:	f00f f891 	bl	3b6f4 <strtol>
   2c5d2:	f8a4 00e0 	strh.w	r0, [r4, #224]	; 0xe0
				&modem->network.mcc,
				&modem->network.mnc);
		ret += cellid_to_dec(&modem->network.cellid_hex,
				&modem->network.cellid_dec);
		ret += area_code_parse(&modem->network.area_code);
		if (ret) {
   2c5d6:	19aa      	adds	r2, r5, r6
   2c5d8:	d014      	beq.n	2c604 <modem_info_params_get+0x138>
   2c5da:	4824      	ldr	r0, [pc, #144]	; (2c66c <modem_info_params_get+0x1a0>)
   2c5dc:	4b24      	ldr	r3, [pc, #144]	; (2c670 <modem_info_params_get+0x1a4>)
			LOG_ERR("Network data not obtained: %d", ret);
   2c5de:	4925      	ldr	r1, [pc, #148]	; (2c674 <modem_info_params_get+0x1a8>)
   2c5e0:	1ac0      	subs	r0, r0, r3
   2c5e2:	08c0      	lsrs	r0, r0, #3
   2c5e4:	0180      	lsls	r0, r0, #6
		}
		if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM_IMSI)) {
			ret += modem_data_get(&modem->sim.imsi);
		}
		if (ret) {
			LOG_ERR("Sim data not obtained: %d", ret);
   2c5e6:	f040 0001 	orr.w	r0, r0, #1
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE)) {
		ret = modem_data_get(&modem->device.modem_fw);
		ret += modem_data_get(&modem->device.battery);
		ret += modem_data_get(&modem->device.imei);
		if (ret) {
			LOG_ERR("Device data not obtained: %d", ret);
   2c5ea:	f010 fe89 	bl	3d300 <log_string_sync>
			return -EAGAIN;
   2c5ee:	f06f 000a 	mvn.w	r0, #10
		}
	}

	return 0;
}
   2c5f2:	b003      	add	sp, #12
   2c5f4:	e8bd 8470 	ldmia.w	sp!, {r4, r5, r6, sl, pc}
		return -EINVAL;
   2c5f8:	f06f 0215 	mvn.w	r2, #21
   2c5fc:	e7d0      	b.n	2c5a0 <modem_info_params_get+0xd4>
		return -EINVAL;
   2c5fe:	f06f 0615 	mvn.w	r6, #21
   2c602:	e7e8      	b.n	2c5d6 <modem_info_params_get+0x10a>
		ret = modem_data_get(&modem->sim.uicc);
   2c604:	f504 60c7 	add.w	r0, r4, #1592	; 0x638
   2c608:	f7ff fed0 	bl	2c3ac <modem_data_get>
   2c60c:	4605      	mov	r5, r0
			ret += modem_data_get(&modem->sim.iccid);
   2c60e:	f504 60d5 	add.w	r0, r4, #1704	; 0x6a8
   2c612:	f7ff fecb 	bl	2c3ac <modem_data_get>
   2c616:	4405      	add	r5, r0
			ret += modem_data_get(&modem->sim.imsi);
   2c618:	f504 60e3 	add.w	r0, r4, #1816	; 0x718
   2c61c:	f7ff fec6 	bl	2c3ac <modem_data_get>
		if (ret) {
   2c620:	182a      	adds	r2, r5, r0
   2c622:	d006      	beq.n	2c632 <modem_info_params_get+0x166>
   2c624:	4811      	ldr	r0, [pc, #68]	; (2c66c <modem_info_params_get+0x1a0>)
   2c626:	4b12      	ldr	r3, [pc, #72]	; (2c670 <modem_info_params_get+0x1a4>)
			LOG_ERR("Sim data not obtained: %d", ret);
   2c628:	4913      	ldr	r1, [pc, #76]	; (2c678 <modem_info_params_get+0x1ac>)
   2c62a:	1ac0      	subs	r0, r0, r3
   2c62c:	08c0      	lsrs	r0, r0, #3
   2c62e:	0180      	lsls	r0, r0, #6
   2c630:	e7d9      	b.n	2c5e6 <modem_info_params_get+0x11a>
		ret = modem_data_get(&modem->device.modem_fw);
   2c632:	f504 60f1 	add.w	r0, r4, #1928	; 0x788
   2c636:	f7ff feb9 	bl	2c3ac <modem_data_get>
   2c63a:	4605      	mov	r5, r0
		ret += modem_data_get(&modem->device.battery);
   2c63c:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
   2c640:	f7ff feb4 	bl	2c3ac <modem_data_get>
   2c644:	4405      	add	r5, r0
		ret += modem_data_get(&modem->device.imei);
   2c646:	f604 0068 	addw	r0, r4, #2152	; 0x868
   2c64a:	f7ff feaf 	bl	2c3ac <modem_data_get>
		if (ret) {
   2c64e:	1828      	adds	r0, r5, r0
   2c650:	d0cf      	beq.n	2c5f2 <modem_info_params_get+0x126>
   2c652:	4a07      	ldr	r2, [pc, #28]	; (2c670 <modem_info_params_get+0x1a4>)
   2c654:	4b05      	ldr	r3, [pc, #20]	; (2c66c <modem_info_params_get+0x1a0>)
			LOG_ERR("Device data not obtained: %d", ret);
   2c656:	4909      	ldr	r1, [pc, #36]	; (2c67c <modem_info_params_get+0x1b0>)
   2c658:	1a9b      	subs	r3, r3, r2
   2c65a:	08db      	lsrs	r3, r3, #3
   2c65c:	019b      	lsls	r3, r3, #6
   2c65e:	4602      	mov	r2, r0
   2c660:	f043 0001 	orr.w	r0, r3, #1
   2c664:	e7c1      	b.n	2c5ea <modem_info_params_get+0x11e>
		return -EINVAL;
   2c666:	f06f 0015 	mvn.w	r0, #21
   2c66a:	e7c2      	b.n	2c5f2 <modem_info_params_get+0x126>
   2c66c:	0004345c 	.word	0x0004345c
   2c670:	0004339c 	.word	0x0004339c
   2c674:	000480d0 	.word	0x000480d0
   2c678:	000480ee 	.word	0x000480ee
   2c67c:	00048108 	.word	0x00048108

0002c680 <network_data_add>:

	return total_len;
}

static int network_data_add(struct network_param *network, cJSON *json_obj)
{
   2c680:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   2c684:	460c      	mov	r4, r1

	static const char lte_string[]	 = "LTE-M";
	static const char nbiot_string[] = "NB-IoT";
	static const char gps_string[]	 = " GPS";

	if (network == NULL || json_obj == NULL) {
   2c686:	4681      	mov	r9, r0
{
   2c688:	b09a      	sub	sp, #104	; 0x68
	if (network == NULL || json_obj == NULL) {
   2c68a:	2800      	cmp	r0, #0
   2c68c:	d066      	beq.n	2c75c <network_data_add+0xdc>
   2c68e:	2900      	cmp	r1, #0
   2c690:	d064      	beq.n	2c75c <network_data_add+0xdc>
		return -EINVAL;
	}

	total_len = json_add_data(&network->current_band, json_obj);
   2c692:	f013 fb1c 	bl	3fcce <json_add_data>
	total_len += json_add_data(&network->sup_band, json_obj);
   2c696:	4621      	mov	r1, r4
	total_len = json_add_data(&network->current_band, json_obj);
   2c698:	4605      	mov	r5, r0
	total_len += json_add_data(&network->sup_band, json_obj);
   2c69a:	f109 0070 	add.w	r0, r9, #112	; 0x70
   2c69e:	f013 fb16 	bl	3fcce <json_add_data>
	total_len += json_add_data(&network->area_code, json_obj);
   2c6a2:	4621      	mov	r1, r4
	total_len += json_add_data(&network->sup_band, json_obj);
   2c6a4:	4405      	add	r5, r0
	total_len += json_add_data(&network->area_code, json_obj);
   2c6a6:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   2c6aa:	f013 fb10 	bl	3fcce <json_add_data>
	total_len += json_add_data(&network->current_operator, json_obj);
   2c6ae:	4621      	mov	r1, r4
	total_len += json_add_data(&network->area_code, json_obj);
   2c6b0:	4405      	add	r5, r0
	total_len += json_add_data(&network->current_operator, json_obj);
   2c6b2:	f509 70a8 	add.w	r0, r9, #336	; 0x150
   2c6b6:	f013 fb0a 	bl	3fcce <json_add_data>
	total_len += json_add_data(&network->ip_address, json_obj);
   2c6ba:	4621      	mov	r1, r4
	total_len += json_add_data(&network->current_operator, json_obj);
   2c6bc:	4405      	add	r5, r0
	total_len += json_add_data(&network->ip_address, json_obj);
   2c6be:	f509 7044 	add.w	r0, r9, #784	; 0x310
   2c6c2:	f013 fb04 	bl	3fcce <json_add_data>
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c6c6:	4621      	mov	r1, r4
	total_len += json_add_data(&network->ip_address, json_obj);
   2c6c8:	4405      	add	r5, r0
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c6ca:	f509 7060 	add.w	r0, r9, #896	; 0x380
   2c6ce:	f013 fafe 	bl	3fcce <json_add_data>

	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2c6d2:	a901      	add	r1, sp, #4
	total_len += json_add_data(&network->ue_mode, json_obj);
   2c6d4:	4405      	add	r5, r0
	len = modem_info_name_get(network->cellid_hex.type, data_name);
   2c6d6:	f899 030c 	ldrb.w	r0, [r9, #780]	; 0x30c
   2c6da:	f7ff fcd5 	bl	2c088 <modem_info_name_get>
	data_name[len] =  '\0';
   2c6de:	ab1a      	add	r3, sp, #104	; 0x68
   2c6e0:	4418      	add	r0, r3
   2c6e2:	2300      	movs	r3, #0
   2c6e4:	f800 3c64 	strb.w	r3, [r0, #-100]
	ret = json_add_num(json_obj, data_name, network->cellid_dec);
   2c6e8:	f509 63c4 	add.w	r3, r9, #1568	; 0x620
	json_num = cJSON_CreateNumber(num);
   2c6ec:	ed93 0b00 	vldr	d0, [r3]
   2c6f0:	f7f1 f97e 	bl	1d9f0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   2c6f4:	4602      	mov	r2, r0
   2c6f6:	b120      	cbz	r0, 2c702 <network_data_add+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2c6f8:	4620      	mov	r0, r4
   2c6fa:	a901      	add	r1, sp, #4
   2c6fc:	f012 fe71 	bl	3f3e2 <cJSON_AddItemToObject>

	if (ret) {
		LOG_DBG("Unable to add the cell ID.");
	} else {
		total_len += sizeof(double);
   2c700:	3508      	adds	r5, #8
	}

	if (network->lte_mode.value == 1) {
   2c702:	f8b9 33f0 	ldrh.w	r3, [r9, #1008]	; 0x3f0
   2c706:	f509 62c5 	add.w	r2, r9, #1576	; 0x628
   2c70a:	2b01      	cmp	r3, #1
   2c70c:	d11b      	bne.n	2c746 <network_data_add+0xc6>
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
   2c70e:	4610      	mov	r0, r2
   2c710:	4914      	ldr	r1, [pc, #80]	; (2c764 <network_data_add+0xe4>)
   2c712:	f015 fc8d 	bl	42030 <strcat>
   2c716:	4602      	mov	r2, r0
		strcat(network->network_mode, lte_string);
		total_len += sizeof(lte_string);
   2c718:	3506      	adds	r5, #6
	} else if (network->nbiot_mode.value == 1) {
		strcat(network->network_mode, nbiot_string);
		total_len += sizeof(nbiot_string);
	}

	if (network->gps_mode.value == 1) {
   2c71a:	f8b9 34d0 	ldrh.w	r3, [r9, #1232]	; 0x4d0
   2c71e:	2b01      	cmp	r3, #1
   2c720:	d105      	bne.n	2c72e <network_data_add+0xae>
   2c722:	4610      	mov	r0, r2
   2c724:	4910      	ldr	r1, [pc, #64]	; (2c768 <network_data_add+0xe8>)
   2c726:	f015 fc83 	bl	42030 <strcat>
   2c72a:	4602      	mov	r2, r0
		strcat(network->network_mode, gps_string);
		total_len += sizeof(gps_string);
   2c72c:	3505      	adds	r5, #5
	}

	ret = json_add_str(json_obj, "networkMode", network->network_mode);
   2c72e:	4620      	mov	r0, r4
   2c730:	490e      	ldr	r1, [pc, #56]	; (2c76c <network_data_add+0xec>)
   2c732:	f013 fab5 	bl	3fca0 <json_add_str>

	if (ret) {
   2c736:	b110      	cbz	r0, 2c73e <network_data_add+0xbe>
		printk("Unable to add the network mode");
   2c738:	480d      	ldr	r0, [pc, #52]	; (2c770 <network_data_add+0xf0>)
   2c73a:	f010 fb1c 	bl	3cd76 <printk>
	}

	return total_len;
}
   2c73e:	4628      	mov	r0, r5
   2c740:	b01a      	add	sp, #104	; 0x68
   2c742:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
	} else if (network->nbiot_mode.value == 1) {
   2c746:	f8b9 3460 	ldrh.w	r3, [r9, #1120]	; 0x460
   2c74a:	2b01      	cmp	r3, #1
   2c74c:	d1e5      	bne.n	2c71a <network_data_add+0x9a>
   2c74e:	4610      	mov	r0, r2
   2c750:	4908      	ldr	r1, [pc, #32]	; (2c774 <network_data_add+0xf4>)
   2c752:	f015 fc6d 	bl	42030 <strcat>
		total_len += sizeof(nbiot_string);
   2c756:	3507      	adds	r5, #7
   2c758:	4602      	mov	r2, r0
   2c75a:	e7de      	b.n	2c71a <network_data_add+0x9a>
		return -EINVAL;
   2c75c:	f06f 0515 	mvn.w	r5, #21
   2c760:	e7ed      	b.n	2c73e <network_data_add+0xbe>
   2c762:	bf00      	nop
   2c764:	000481af 	.word	0x000481af
   2c768:	000481aa 	.word	0x000481aa
   2c76c:	00048137 	.word	0x00048137
   2c770:	00048143 	.word	0x00048143
   2c774:	000481b5 	.word	0x000481b5

0002c778 <device_data_add>:

	return total_len;
}

static int device_data_add(struct device_param *device, cJSON *json_obj)
{
   2c778:	e92d 4230 	stmdb	sp!, {r4, r5, r9, lr}
   2c77c:	460c      	mov	r4, r1
	int total_len;

	if (device == NULL || json_obj == NULL) {
   2c77e:	4681      	mov	r9, r0
   2c780:	b330      	cbz	r0, 2c7d0 <device_data_add+0x58>
   2c782:	b329      	cbz	r1, 2c7d0 <device_data_add+0x58>
		return -EINVAL;
	}

	total_len = json_add_data(&device->modem_fw, json_obj);
   2c784:	f013 faa3 	bl	3fcce <json_add_data>
	total_len += json_add_data(&device->battery, json_obj);
   2c788:	4621      	mov	r1, r4
	total_len = json_add_data(&device->modem_fw, json_obj);
   2c78a:	4605      	mov	r5, r0
	total_len += json_add_data(&device->battery, json_obj);
   2c78c:	f109 0070 	add.w	r0, r9, #112	; 0x70
   2c790:	f013 fa9d 	bl	3fcce <json_add_data>
	total_len += json_add_data(&device->imei, json_obj);
   2c794:	4621      	mov	r1, r4
	total_len += json_add_data(&device->battery, json_obj);
   2c796:	4405      	add	r5, r0
	total_len += json_add_data(&device->imei, json_obj);
   2c798:	f109 00e0 	add.w	r0, r9, #224	; 0xe0
   2c79c:	f013 fa97 	bl	3fcce <json_add_data>
	total_len += json_add_str(json_obj, "board", device->board);
   2c7a0:	f8d9 2150 	ldr.w	r2, [r9, #336]	; 0x150
   2c7a4:	490c      	ldr	r1, [pc, #48]	; (2c7d8 <device_data_add+0x60>)
	total_len += json_add_data(&device->imei, json_obj);
   2c7a6:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "board", device->board);
   2c7a8:	4620      	mov	r0, r4
   2c7aa:	f013 fa79 	bl	3fca0 <json_add_str>
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c7ae:	f8d9 2154 	ldr.w	r2, [r9, #340]	; 0x154
   2c7b2:	490a      	ldr	r1, [pc, #40]	; (2c7dc <device_data_add+0x64>)
	total_len += json_add_str(json_obj, "board", device->board);
   2c7b4:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c7b6:	4620      	mov	r0, r4
   2c7b8:	f013 fa72 	bl	3fca0 <json_add_str>
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2c7bc:	f8d9 2158 	ldr.w	r2, [r9, #344]	; 0x158
	total_len += json_add_str(json_obj, "appVersion", device->app_version);
   2c7c0:	4405      	add	r5, r0
	total_len += json_add_str(json_obj, "appName", device->app_name);
   2c7c2:	4907      	ldr	r1, [pc, #28]	; (2c7e0 <device_data_add+0x68>)
   2c7c4:	4620      	mov	r0, r4
   2c7c6:	f013 fa6b 	bl	3fca0 <json_add_str>
   2c7ca:	4428      	add	r0, r5

	return total_len;
}
   2c7cc:	e8bd 8230 	ldmia.w	sp!, {r4, r5, r9, pc}
		return -EINVAL;
   2c7d0:	f06f 0015 	mvn.w	r0, #21
   2c7d4:	e7fa      	b.n	2c7cc <device_data_add+0x54>
   2c7d6:	bf00      	nop
   2c7d8:	00048162 	.word	0x00048162
   2c7dc:	00048168 	.word	0x00048168
   2c7e0:	00048173 	.word	0x00048173

0002c7e4 <modem_info_json_object_encode>:

int modem_info_json_object_encode(struct modem_param_info *modem,
				  cJSON *root_obj)
{
   2c7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c7e8:	4681      	mov	r9, r0
	if (root_obj == NULL || modem == NULL) {
   2c7ea:	460d      	mov	r5, r1
   2c7ec:	2900      	cmp	r1, #0
   2c7ee:	d04f      	beq.n	2c890 <modem_info_json_object_encode+0xac>
   2c7f0:	2800      	cmp	r0, #0
   2c7f2:	d04d      	beq.n	2c890 <modem_info_json_object_encode+0xac>
		return -EINVAL;
	}

	int obj_count = cJSON_GetArraySize(root_obj);
   2c7f4:	4608      	mov	r0, r1
   2c7f6:	f012 fdda 	bl	3f3ae <cJSON_GetArraySize>
   2c7fa:	4604      	mov	r4, r0

	cJSON *network_obj	= cJSON_CreateObject();
   2c7fc:	f7fc fbb6 	bl	28f6c <cJSON_CreateObject>
   2c800:	4680      	mov	r8, r0
	cJSON *sim_obj		= cJSON_CreateObject();
   2c802:	f7fc fbb3 	bl	28f6c <cJSON_CreateObject>
   2c806:	4607      	mov	r7, r0
	cJSON *device_obj	= cJSON_CreateObject();
   2c808:	f7fc fbb0 	bl	28f6c <cJSON_CreateObject>
   2c80c:	4606      	mov	r6, r0

	if (network_obj == NULL || sim_obj == NULL || device_obj == NULL) {
   2c80e:	f1b8 0f00 	cmp.w	r8, #0
   2c812:	d03a      	beq.n	2c88a <modem_info_json_object_encode+0xa6>
   2c814:	b3cf      	cbz	r7, 2c88a <modem_info_json_object_encode+0xa6>
   2c816:	b3c0      	cbz	r0, 2c88a <modem_info_json_object_encode+0xa6>
		obj_count = -ENOMEM;
		goto delete_object;
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
	    (network_data_add(&modem->network, network_obj) > 0)) {
   2c818:	4641      	mov	r1, r8
   2c81a:	4648      	mov	r0, r9
   2c81c:	f7ff ff30 	bl	2c680 <network_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_NETWORK) &&
   2c820:	2800      	cmp	r0, #0
   2c822:	dd06      	ble.n	2c832 <modem_info_json_object_encode+0x4e>
	cJSON_AddItemToObject(parent, str, item);
   2c824:	4642      	mov	r2, r8
   2c826:	4628      	mov	r0, r5
   2c828:	491b      	ldr	r1, [pc, #108]	; (2c898 <modem_info_json_object_encode+0xb4>)
   2c82a:	f012 fdda 	bl	3f3e2 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "networkInfo", network_obj);
		network_obj = NULL;
   2c82e:	f04f 0800 	mov.w	r8, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
	    (sim_data_add(&modem->sim, sim_obj) > 0)) {
   2c832:	4639      	mov	r1, r7
   2c834:	f509 60c7 	add.w	r0, r9, #1592	; 0x638
   2c838:	f013 fa90 	bl	3fd5c <sim_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_SIM) &&
   2c83c:	2800      	cmp	r0, #0
   2c83e:	dd05      	ble.n	2c84c <modem_info_json_object_encode+0x68>
	cJSON_AddItemToObject(parent, str, item);
   2c840:	463a      	mov	r2, r7
   2c842:	4628      	mov	r0, r5
   2c844:	4915      	ldr	r1, [pc, #84]	; (2c89c <modem_info_json_object_encode+0xb8>)
   2c846:	f012 fdcc 	bl	3f3e2 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "simInfo", sim_obj);
		sim_obj = NULL;
   2c84a:	2700      	movs	r7, #0
	}

	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
	    (device_data_add(&modem->device, device_obj) > 0)) {
   2c84c:	4631      	mov	r1, r6
   2c84e:	f509 60f1 	add.w	r0, r9, #1928	; 0x788
   2c852:	f7ff ff91 	bl	2c778 <device_data_add>
	if (IS_ENABLED(CONFIG_MODEM_INFO_ADD_DEVICE) &&
   2c856:	2800      	cmp	r0, #0
   2c858:	dd05      	ble.n	2c866 <modem_info_json_object_encode+0x82>
	cJSON_AddItemToObject(parent, str, item);
   2c85a:	4632      	mov	r2, r6
   2c85c:	4628      	mov	r0, r5
   2c85e:	4910      	ldr	r1, [pc, #64]	; (2c8a0 <modem_info_json_object_encode+0xbc>)
   2c860:	f012 fdbf 	bl	3f3e2 <cJSON_AddItemToObject>

		json_add_obj(root_obj, "deviceInfo", device_obj);
		device_obj = NULL;
   2c864:	2600      	movs	r6, #0
	}

delete_object:
	cJSON_Delete(network_obj);
   2c866:	4640      	mov	r0, r8
   2c868:	f7fc faac 	bl	28dc4 <cJSON_Delete>
	cJSON_Delete(sim_obj);
   2c86c:	4638      	mov	r0, r7
   2c86e:	f7fc faa9 	bl	28dc4 <cJSON_Delete>
	cJSON_Delete(device_obj);
   2c872:	4630      	mov	r0, r6
   2c874:	f7fc faa6 	bl	28dc4 <cJSON_Delete>

	if (obj_count >= 0) {
   2c878:	2c00      	cmp	r4, #0
   2c87a:	db03      	blt.n	2c884 <modem_info_json_object_encode+0xa0>
		obj_count = cJSON_GetArraySize(root_obj) - obj_count;
   2c87c:	4628      	mov	r0, r5
   2c87e:	f012 fd96 	bl	3f3ae <cJSON_GetArraySize>
   2c882:	1b04      	subs	r4, r0, r4
	}

	return obj_count;
}
   2c884:	4620      	mov	r0, r4
   2c886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		obj_count = -ENOMEM;
   2c88a:	f06f 040b 	mvn.w	r4, #11
   2c88e:	e7ea      	b.n	2c866 <modem_info_json_object_encode+0x82>
		return -EINVAL;
   2c890:	f06f 0415 	mvn.w	r4, #21
   2c894:	e7f6      	b.n	2c884 <modem_info_json_object_encode+0xa0>
   2c896:	bf00      	nop
   2c898:	0004817b 	.word	0x0004817b
   2c89c:	00048187 	.word	0x00048187
   2c8a0:	0004818f 	.word	0x0004818f

0002c8a4 <date_time_notify_event.constprop.0>:

static void date_time_notify_event(const struct date_time_evt *evt)
{
	__ASSERT(evt != NULL, "Library event not found");

	if (app_evt_handler != NULL) {
   2c8a4:	4b02      	ldr	r3, [pc, #8]	; (2c8b0 <date_time_notify_event.constprop.0+0xc>)
   2c8a6:	681b      	ldr	r3, [r3, #0]
   2c8a8:	b10b      	cbz	r3, 2c8ae <date_time_notify_event.constprop.0+0xa>
		app_evt_handler(evt);
   2c8aa:	4802      	ldr	r0, [pc, #8]	; (2c8b4 <date_time_notify_event.constprop.0+0x10>)
   2c8ac:	4718      	bx	r3
	}
}
   2c8ae:	4770      	bx	lr
   2c8b0:	200191d8 	.word	0x200191d8
   2c8b4:	20020732 	.word	0x20020732

0002c8b8 <new_date_time_get>:

	return 0;
}

static void new_date_time_get(void)
{
   2c8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (time_aux.last_date_time_update == 0 ||
   2c8bc:	4e77      	ldr	r6, [pc, #476]	; (2ca9c <new_date_time_get+0x1e4>)
   2c8be:	4c78      	ldr	r4, [pc, #480]	; (2caa0 <new_date_time_get+0x1e8>)
   2c8c0:	4637      	mov	r7, r6
   2c8c2:	4b78      	ldr	r3, [pc, #480]	; (2caa4 <new_date_time_get+0x1ec>)
{
   2c8c4:	b095      	sub	sp, #84	; 0x54
   2c8c6:	1ae4      	subs	r4, r4, r3
   2c8c8:	08e4      	lsrs	r4, r4, #3
	return z_impl_k_sem_take(sem, timeout);
   2c8ca:	f04f 33ff 	mov.w	r3, #4294967295
   2c8ce:	f04f 32ff 	mov.w	r2, #4294967295
   2c8d2:	4875      	ldr	r0, [pc, #468]	; (2caa8 <new_date_time_get+0x1f0>)
   2c8d4:	f00c fd32 	bl	3933c <z_impl_k_sem_take>
	if (time_aux.last_date_time_update == 0 ||
   2c8d8:	68b3      	ldr	r3, [r6, #8]
   2c8da:	2b00      	cmp	r3, #0
   2c8dc:	f040 808c 	bne.w	2c9f8 <new_date_time_get+0x140>
{
   2c8e0:	f04f 0900 	mov.w	r9, #0
   2c8e4:	4d71      	ldr	r5, [pc, #452]	; (2caac <new_date_time_get+0x1f4>)
		hints.ai_family = AF_INET;
   2c8e6:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 2cad8 <new_date_time_get+0x220>
	err = sntp_query(&sntp_ctx, timeout, time);
   2c8ea:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 2cad0 <new_date_time_get+0x218>
	hints.ai_socktype = SOCK_DGRAM;
   2c8ee:	2302      	movs	r3, #2
   2c8f0:	2201      	movs	r2, #1
   2c8f2:	e9c8 2302 	strd	r2, r3, [r8, #8]
	hints.ai_protocol = 0;
   2c8f6:	2300      	movs	r3, #0
   2c8f8:	f8c8 3010 	str.w	r3, [r8, #16]
	if (server->addr == NULL) {
   2c8fc:	686b      	ldr	r3, [r5, #4]
   2c8fe:	2b00      	cmp	r3, #0
   2c900:	f040 808f 	bne.w	2ca22 <new_date_time_get+0x16a>

static inline int getaddrinfo(const char *host, const char *service,
			      const struct zsock_addrinfo *hints,
			      struct zsock_addrinfo **res)
{
	return zsock_getaddrinfo(host, service, hints, res);
   2c904:	4642      	mov	r2, r8
   2c906:	496a      	ldr	r1, [pc, #424]	; (2cab0 <new_date_time_get+0x1f8>)
   2c908:	6828      	ldr	r0, [r5, #0]
   2c90a:	1d2b      	adds	r3, r5, #4
   2c90c:	f011 f850 	bl	3d9b0 <zsock_getaddrinfo>
		if (err) {
   2c910:	4602      	mov	r2, r0
   2c912:	2800      	cmp	r0, #0
   2c914:	f000 8085 	beq.w	2ca22 <new_date_time_get+0x16a>
			LOG_WRN("getaddrinfo, error: %d", err);
   2c918:	01a0      	lsls	r0, r4, #6
   2c91a:	4966      	ldr	r1, [pc, #408]	; (2cab4 <new_date_time_get+0x1fc>)
   2c91c:	f040 0002 	orr.w	r0, r0, #2
   2c920:	f010 fcee 	bl	3d300 <log_string_sync>
	for (int i = 0; i < ARRAY_SIZE(servers); i++) {
   2c924:	f109 0901 	add.w	r9, r9, #1
   2c928:	f1b9 0f05 	cmp.w	r9, #5
   2c92c:	f105 0508 	add.w	r5, r5, #8
   2c930:	d1dd      	bne.n	2c8ee <new_date_time_get+0x36>
	LOG_WRN("Not getting time from any NTP server");
   2c932:	01a0      	lsls	r0, r4, #6
   2c934:	4960      	ldr	r1, [pc, #384]	; (2cab8 <new_date_time_get+0x200>)
   2c936:	f040 0002 	orr.w	r0, r0, #2
   2c93a:	f010 fce1 	bl	3d300 <log_string_sync>
	err = at_cmd_write(AT_CMD_MODEM_DATE_TIME, buf, sizeof(buf), NULL);
   2c93e:	2300      	movs	r3, #0
   2c940:	2221      	movs	r2, #33	; 0x21
   2c942:	485e      	ldr	r0, [pc, #376]	; (2cabc <new_date_time_get+0x204>)
   2c944:	a902      	add	r1, sp, #8
   2c946:	f7fe f82d 	bl	2a9a4 <at_cmd_write>
	if (err) {
   2c94a:	2800      	cmp	r0, #0
   2c94c:	f040 80a2 	bne.w	2ca94 <new_date_time_get+0x1dc>
	buf[AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN - 4] = '\0';
   2c950:	2520      	movs	r5, #32
   2c952:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2c956:	f244 0109 	movw	r1, #16393	; 0x4009
			buf[i] = ' ';
   2c95a:	4628      	mov	r0, r5
   2c95c:	aa02      	add	r2, sp, #8
		if (buf[i] == '/' || buf[i] == ',' || buf[i] == ':') {
   2c95e:	f812 3b01 	ldrb.w	r3, [r2], #1
   2c962:	3b2c      	subs	r3, #44	; 0x2c
   2c964:	b2db      	uxtb	r3, r3
   2c966:	2b0e      	cmp	r3, #14
   2c968:	d805      	bhi.n	2c976 <new_date_time_get+0xbe>
   2c96a:	fa21 f303 	lsr.w	r3, r1, r3
   2c96e:	07db      	lsls	r3, r3, #31
			buf[i] = ' ';
   2c970:	bf48      	it	mi
   2c972:	f802 0c01 	strbmi.w	r0, [r2, #-1]
	for (int i = 0; i < AT_CMD_MODEM_DATE_TIME_RESPONSE_LEN; i++) {
   2c976:	3d01      	subs	r5, #1
   2c978:	d1f1      	bne.n	2c95e <new_date_time_get+0xa6>
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c97a:	220a      	movs	r2, #10
	char *ptr_index = &buf[8];
   2c97c:	a804      	add	r0, sp, #16
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c97e:	a901      	add	r1, sp, #4
	char *ptr_index = &buf[8];
   2c980:	9001      	str	r0, [sp, #4]
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c982:	f00e feb7 	bl	3b6f4 <strtol>
   2c986:	3064      	adds	r0, #100	; 0x64
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2c988:	220a      	movs	r2, #10
	date_time.tm_year = strtol(ptr_index, &ptr_index, base) + 2000 - 1900;
   2c98a:	9010      	str	r0, [sp, #64]	; 0x40
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2c98c:	a901      	add	r1, sp, #4
   2c98e:	9801      	ldr	r0, [sp, #4]
   2c990:	f00e feb0 	bl	3b6f4 <strtol>
   2c994:	3801      	subs	r0, #1
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2c996:	220a      	movs	r2, #10
	date_time.tm_mon = strtol(ptr_index, &ptr_index, base) - 1;
   2c998:	900f      	str	r0, [sp, #60]	; 0x3c
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2c99a:	a901      	add	r1, sp, #4
   2c99c:	9801      	ldr	r0, [sp, #4]
   2c99e:	f00e fea9 	bl	3b6f4 <strtol>
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2c9a2:	220a      	movs	r2, #10
	date_time.tm_mday = strtol(ptr_index, &ptr_index, base);
   2c9a4:	900e      	str	r0, [sp, #56]	; 0x38
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2c9a6:	a901      	add	r1, sp, #4
   2c9a8:	9801      	ldr	r0, [sp, #4]
   2c9aa:	f00e fea3 	bl	3b6f4 <strtol>
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2c9ae:	220a      	movs	r2, #10
	date_time.tm_hour = strtol(ptr_index, &ptr_index, base);
   2c9b0:	900d      	str	r0, [sp, #52]	; 0x34
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2c9b2:	a901      	add	r1, sp, #4
   2c9b4:	9801      	ldr	r0, [sp, #4]
   2c9b6:	f00e fe9d 	bl	3b6f4 <strtol>
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2c9ba:	220a      	movs	r2, #10
	date_time.tm_min = strtol(ptr_index, &ptr_index, base);
   2c9bc:	900c      	str	r0, [sp, #48]	; 0x30
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2c9be:	a901      	add	r1, sp, #4
   2c9c0:	9801      	ldr	r0, [sp, #4]
   2c9c2:	f00e fe97 	bl	3b6f4 <strtol>
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2c9c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	date_time.tm_sec = strtol(ptr_index, &ptr_index, base);
   2c9c8:	900b      	str	r0, [sp, #44]	; 0x2c
	if (date_time.tm_year == MODEM_TIME_DEFAULT) {
   2c9ca:	2b73      	cmp	r3, #115	; 0x73
   2c9cc:	d062      	beq.n	2ca94 <new_date_time_get+0x1dc>
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(&date_time) * 1000;
   2c9ce:	a80b      	add	r0, sp, #44	; 0x2c
   2c9d0:	f7f6 fbd8 	bl	23184 <timeutil_timegm64>
   2c9d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2c9d8:	460a      	mov	r2, r1
   2c9da:	fba0 0103 	umull	r0, r1, r0, r3
   2c9de:	fb03 1102 	mla	r1, r3, r2, r1
   2c9e2:	e9c7 0100 	strd	r0, r1, [r7]
	time_aux.last_date_time_update = k_uptime_get();
   2c9e6:	f013 f9d1 	bl	3fd8c <k_uptime_get>
		LOG_DBG("Fallback on cellular network time");

		err = time_modem_get();
		if (err == 0) {
			LOG_DBG("Time from cellular network obtained");
			initial_valid_time = true;
   2c9ea:	2201      	movs	r2, #1
   2c9ec:	4b34      	ldr	r3, [pc, #208]	; (2cac0 <new_date_time_get+0x208>)
	time_aux.last_date_time_update = k_uptime_get();
   2c9ee:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   2c9f0:	701a      	strb	r2, [r3, #0]
			evt.type = DATE_TIME_OBTAINED_MODEM;
   2c9f2:	4b34      	ldr	r3, [pc, #208]	; (2cac4 <new_date_time_get+0x20c>)
   2c9f4:	701d      	strb	r5, [r3, #0]
			date_time_notify_event(&evt);
   2c9f6:	e03d      	b.n	2ca74 <new_date_time_get+0x1bc>
	if (time_aux.last_date_time_update == 0 ||
   2c9f8:	e9d6 2300 	ldrd	r2, r3, [r6]
   2c9fc:	4313      	orrs	r3, r2
   2c9fe:	f43f af6f 	beq.w	2c8e0 <new_date_time_get+0x28>
	if ((k_uptime_get() - time_aux.last_date_time_update) >
   2ca02:	f013 f9c3 	bl	3fd8c <k_uptime_get>
   2ca06:	68b3      	ldr	r3, [r6, #8]
   2ca08:	4a2f      	ldr	r2, [pc, #188]	; (2cac8 <new_date_time_get+0x210>)
   2ca0a:	1ac0      	subs	r0, r0, r3
   2ca0c:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   2ca10:	2300      	movs	r3, #0
   2ca12:	4282      	cmp	r2, r0
   2ca14:	418b      	sbcs	r3, r1
   2ca16:	f6ff af63 	blt.w	2c8e0 <new_date_time_get+0x28>
			initial_valid_time = true;
   2ca1a:	2201      	movs	r2, #1
   2ca1c:	4b28      	ldr	r3, [pc, #160]	; (2cac0 <new_date_time_get+0x208>)

		LOG_DBG("Not getting cellular network time");
#endif
		LOG_DBG("Not getting time from any time source");

		evt.type = DATE_TIME_NOT_OBTAINED;
   2ca1e:	701a      	strb	r2, [r3, #0]
   2ca20:	e028      	b.n	2ca74 <new_date_time_get+0x1bc>
	err = sntp_init(&sntp_ctx, server->addr->ai_addr,
   2ca22:	686b      	ldr	r3, [r5, #4]
   2ca24:	a80b      	add	r0, sp, #44	; 0x2c
   2ca26:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   2ca2a:	f010 ff8d 	bl	3d948 <sntp_init>
	if (err) {
   2ca2e:	4682      	mov	sl, r0
   2ca30:	b318      	cbz	r0, 2ca7a <new_date_time_get+0x1c2>
		LOG_WRN("sntp_init, error: %d", err);
   2ca32:	4652      	mov	r2, sl
   2ca34:	4925      	ldr	r1, [pc, #148]	; (2cacc <new_date_time_get+0x214>)
   2ca36:	01a0      	lsls	r0, r4, #6
		LOG_WRN("sntp_query, error: %d", err);
   2ca38:	f040 0002 	orr.w	r0, r0, #2
   2ca3c:	f010 fc60 	bl	3d300 <log_string_sync>
	sntp_close(&sntp_ctx);
   2ca40:	a80b      	add	r0, sp, #44	; 0x2c
   2ca42:	f010 ffb0 	bl	3d9a6 <sntp_close>
		if (err) {
   2ca46:	f1ba 0f00 	cmp.w	sl, #0
   2ca4a:	f47f af6b 	bne.w	2c924 <new_date_time_get+0x6c>
		time_aux.date_time_utc = (int64_t)sntp_time.seconds * 1000;
   2ca4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2ca52:	4b1f      	ldr	r3, [pc, #124]	; (2cad0 <new_date_time_get+0x218>)
   2ca54:	681a      	ldr	r2, [r3, #0]
   2ca56:	6858      	ldr	r0, [r3, #4]
   2ca58:	fba2 2301 	umull	r2, r3, r2, r1
   2ca5c:	fb01 3300 	mla	r3, r1, r0, r3
   2ca60:	e9c7 2300 	strd	r2, r3, [r7]
		time_aux.last_date_time_update = k_uptime_get();
   2ca64:	f013 f992 	bl	3fd8c <k_uptime_get>
			initial_valid_time = true;
   2ca68:	2301      	movs	r3, #1
   2ca6a:	4a15      	ldr	r2, [pc, #84]	; (2cac0 <new_date_time_get+0x208>)
		time_aux.last_date_time_update = k_uptime_get();
   2ca6c:	60b8      	str	r0, [r7, #8]
			initial_valid_time = true;
   2ca6e:	7013      	strb	r3, [r2, #0]
			evt.type = DATE_TIME_OBTAINED_NTP;
   2ca70:	4a14      	ldr	r2, [pc, #80]	; (2cac4 <new_date_time_get+0x20c>)
   2ca72:	7013      	strb	r3, [r2, #0]
		date_time_notify_event(&evt);
   2ca74:	f7ff ff16 	bl	2c8a4 <date_time_notify_event.constprop.0>
   2ca78:	e727      	b.n	2c8ca <new_date_time_get+0x12>
	err = sntp_query(&sntp_ctx, timeout, time);
   2ca7a:	465a      	mov	r2, fp
   2ca7c:	f241 3188 	movw	r1, #5000	; 0x1388
   2ca80:	a80b      	add	r0, sp, #44	; 0x2c
   2ca82:	f7f0 fd89 	bl	1d598 <sntp_query>
	if (err) {
   2ca86:	4682      	mov	sl, r0
   2ca88:	2800      	cmp	r0, #0
   2ca8a:	d0d9      	beq.n	2ca40 <new_date_time_get+0x188>
		LOG_WRN("sntp_query, error: %d", err);
   2ca8c:	4652      	mov	r2, sl
   2ca8e:	4911      	ldr	r1, [pc, #68]	; (2cad4 <new_date_time_get+0x21c>)
   2ca90:	01a0      	lsls	r0, r4, #6
   2ca92:	e7d1      	b.n	2ca38 <new_date_time_get+0x180>
		evt.type = DATE_TIME_NOT_OBTAINED;
   2ca94:	2203      	movs	r2, #3
   2ca96:	4b0b      	ldr	r3, [pc, #44]	; (2cac4 <new_date_time_get+0x20c>)
   2ca98:	e7c1      	b.n	2ca1e <new_date_time_get+0x166>
   2ca9a:	bf00      	nop
   2ca9c:	20016ba0 	.word	0x20016ba0
   2caa0:	000433dc 	.word	0x000433dc
   2caa4:	0004339c 	.word	0x0004339c
   2caa8:	20015bd0 	.word	0x20015bd0
   2caac:	200155bc 	.word	0x200155bc
   2cab0:	000481bc 	.word	0x000481bc
   2cab4:	000481c0 	.word	0x000481c0
   2cab8:	00048202 	.word	0x00048202
   2cabc:	00047e8d 	.word	0x00047e8d
   2cac0:	20020733 	.word	0x20020733
   2cac4:	20020732 	.word	0x20020732
   2cac8:	0036ee80 	.word	0x0036ee80
   2cacc:	000481d7 	.word	0x000481d7
   2cad0:	20016b90 	.word	0x20016b90
   2cad4:	000481ec 	.word	0x000481ec
   2cad8:	200191dc 	.word	0x200191dc

0002cadc <date_time_init>:
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));
	}
}

static int date_time_init(const struct device *unused)
{
   2cadc:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   2cade:	4c08      	ldr	r4, [pc, #32]	; (2cb00 <date_time_init+0x24>)
   2cae0:	2230      	movs	r2, #48	; 0x30
   2cae2:	2100      	movs	r1, #0
   2cae4:	4620      	mov	r0, r4
   2cae6:	f015 f8fa 	bl	41cde <memset>
   2caea:	4b06      	ldr	r3, [pc, #24]	; (2cb04 <date_time_init+0x28>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2caec:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   2caf0:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   2caf2:	4621      	mov	r1, r4
   2caf4:	2300      	movs	r3, #0
   2caf6:	4804      	ldr	r0, [pc, #16]	; (2cb08 <date_time_init+0x2c>)
   2caf8:	f00c fea8 	bl	3984c <k_delayed_work_submit_to_queue>
	k_delayed_work_init(&time_work, date_time_handler);
	k_delayed_work_submit(&time_work,
			K_SECONDS(CONFIG_DATE_TIME_UPDATE_INTERVAL_SECONDS));

	return 0;
}
   2cafc:	2000      	movs	r0, #0
   2cafe:	bd10      	pop	{r4, pc}
   2cb00:	20016bb0 	.word	0x20016bb0
   2cb04:	0002cb0d 	.word	0x0002cb0d
   2cb08:	20018af0 	.word	0x20018af0

0002cb0c <date_time_handler>:
{
   2cb0c:	b510      	push	{r4, lr}
	z_impl_k_sem_give(sem);
   2cb0e:	4806      	ldr	r0, [pc, #24]	; (2cb28 <date_time_handler+0x1c>)
   2cb10:	f00c fbd0 	bl	392b4 <z_impl_k_sem_give>
}
   2cb14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb18:	f04f 62e1 	mov.w	r2, #117964800	; 0x7080000
   2cb1c:	2300      	movs	r3, #0
   2cb1e:	4903      	ldr	r1, [pc, #12]	; (2cb2c <date_time_handler+0x20>)
   2cb20:	4803      	ldr	r0, [pc, #12]	; (2cb30 <date_time_handler+0x24>)
   2cb22:	f00c be93 	b.w	3984c <k_delayed_work_submit_to_queue>
   2cb26:	bf00      	nop
   2cb28:	20015bd0 	.word	0x20015bd0
   2cb2c:	20016bb0 	.word	0x20016bb0
   2cb30:	20018af0 	.word	0x20018af0

0002cb34 <date_time_set>:

	/** Seconds after the minute. tm_sec is generally 0-59.
	 *  The extra range is to accommodate for leap seconds
	 *  in certain systems.
	 */
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2cb34:	6803      	ldr	r3, [r0, #0]
{
   2cb36:	b570      	push	{r4, r5, r6, lr}
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2cb38:	2b3d      	cmp	r3, #61	; 0x3d
{
   2cb3a:	4604      	mov	r4, r0
	if (new_date_time->tm_sec < 0 || new_date_time->tm_sec > 61) {
   2cb3c:	d97b      	bls.n	2cc36 <date_time_set+0x102>
   2cb3e:	4b4c      	ldr	r3, [pc, #304]	; (2cc70 <date_time_set+0x13c>)
   2cb40:	484c      	ldr	r0, [pc, #304]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Seconds in time structure not in correct format");
   2cb42:	494d      	ldr	r1, [pc, #308]	; (2cc78 <date_time_set+0x144>)
   2cb44:	1ac0      	subs	r0, r0, r3
   2cb46:	08c0      	lsrs	r0, r0, #3
   2cb48:	0180      	lsls	r0, r0, #6
   2cb4a:	f040 0001 	orr.w	r0, r0, #1
   2cb4e:	f010 fbd7 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cb52:	f06f 0515 	mvn.w	r5, #21
	}

	/** Minutes after the hour. */
	if (new_date_time->tm_min < 0 || new_date_time->tm_min > 59) {
   2cb56:	6863      	ldr	r3, [r4, #4]
   2cb58:	2b3b      	cmp	r3, #59	; 0x3b
   2cb5a:	d90b      	bls.n	2cb74 <date_time_set+0x40>
   2cb5c:	4b44      	ldr	r3, [pc, #272]	; (2cc70 <date_time_set+0x13c>)
   2cb5e:	4845      	ldr	r0, [pc, #276]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Minutes in time structure not in correct format");
   2cb60:	4946      	ldr	r1, [pc, #280]	; (2cc7c <date_time_set+0x148>)
   2cb62:	1ac0      	subs	r0, r0, r3
   2cb64:	08c0      	lsrs	r0, r0, #3
   2cb66:	0180      	lsls	r0, r0, #6
   2cb68:	f040 0001 	orr.w	r0, r0, #1
   2cb6c:	f010 fbc8 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cb70:	f06f 0515 	mvn.w	r5, #21
	}

	/** Hours since midnight. */
	if (new_date_time->tm_hour < 0 || new_date_time->tm_hour > 23) {
   2cb74:	68a3      	ldr	r3, [r4, #8]
   2cb76:	2b17      	cmp	r3, #23
   2cb78:	d90b      	bls.n	2cb92 <date_time_set+0x5e>
   2cb7a:	4b3d      	ldr	r3, [pc, #244]	; (2cc70 <date_time_set+0x13c>)
   2cb7c:	483d      	ldr	r0, [pc, #244]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Hours in time structure not in correct format");
   2cb7e:	4940      	ldr	r1, [pc, #256]	; (2cc80 <date_time_set+0x14c>)
   2cb80:	1ac0      	subs	r0, r0, r3
   2cb82:	08c0      	lsrs	r0, r0, #3
   2cb84:	0180      	lsls	r0, r0, #6
   2cb86:	f040 0001 	orr.w	r0, r0, #1
   2cb8a:	f010 fbb9 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cb8e:	f06f 0515 	mvn.w	r5, #21
	}

	/** Day of the month. */
	if (new_date_time->tm_mday < 1 || new_date_time->tm_mday > 31) {
   2cb92:	68e3      	ldr	r3, [r4, #12]
   2cb94:	3b01      	subs	r3, #1
   2cb96:	2b1e      	cmp	r3, #30
   2cb98:	d90b      	bls.n	2cbb2 <date_time_set+0x7e>
   2cb9a:	4b35      	ldr	r3, [pc, #212]	; (2cc70 <date_time_set+0x13c>)
   2cb9c:	4835      	ldr	r0, [pc, #212]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Day in time structure not in correct format");
   2cb9e:	4939      	ldr	r1, [pc, #228]	; (2cc84 <date_time_set+0x150>)
   2cba0:	1ac0      	subs	r0, r0, r3
   2cba2:	08c0      	lsrs	r0, r0, #3
   2cba4:	0180      	lsls	r0, r0, #6
   2cba6:	f040 0001 	orr.w	r0, r0, #1
   2cbaa:	f010 fba9 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cbae:	f06f 0515 	mvn.w	r5, #21
	}

	/** Months since January. */
	if (new_date_time->tm_mon < 0 || new_date_time->tm_mon > 11) {
   2cbb2:	6923      	ldr	r3, [r4, #16]
   2cbb4:	2b0b      	cmp	r3, #11
   2cbb6:	d90b      	bls.n	2cbd0 <date_time_set+0x9c>
   2cbb8:	4b2d      	ldr	r3, [pc, #180]	; (2cc70 <date_time_set+0x13c>)
   2cbba:	482e      	ldr	r0, [pc, #184]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Month in time structure not in correct format");
   2cbbc:	4932      	ldr	r1, [pc, #200]	; (2cc88 <date_time_set+0x154>)
   2cbbe:	1ac0      	subs	r0, r0, r3
   2cbc0:	08c0      	lsrs	r0, r0, #3
   2cbc2:	0180      	lsls	r0, r0, #6
   2cbc4:	f040 0001 	orr.w	r0, r0, #1
   2cbc8:	f010 fb9a 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cbcc:	f06f 0515 	mvn.w	r5, #21
	}

	/** Years since 1900. 115 corresponds to the year 2015. */
	if (new_date_time->tm_year < 115 || new_date_time->tm_year > 1900) {
   2cbd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
   2cbd4:	6963      	ldr	r3, [r4, #20]
   2cbd6:	3b73      	subs	r3, #115	; 0x73
   2cbd8:	4293      	cmp	r3, r2
   2cbda:	d90b      	bls.n	2cbf4 <date_time_set+0xc0>
   2cbdc:	4b24      	ldr	r3, [pc, #144]	; (2cc70 <date_time_set+0x13c>)
   2cbde:	4825      	ldr	r0, [pc, #148]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Year in time structure not in correct format");
   2cbe0:	492a      	ldr	r1, [pc, #168]	; (2cc8c <date_time_set+0x158>)
   2cbe2:	1ac0      	subs	r0, r0, r3
   2cbe4:	08c0      	lsrs	r0, r0, #3
   2cbe6:	0180      	lsls	r0, r0, #6
   2cbe8:	f040 0001 	orr.w	r0, r0, #1
   2cbec:	f010 fb88 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cbf0:	f06f 0515 	mvn.w	r5, #21
	}

	/** Days since Sunday. */
	if (new_date_time->tm_wday < 0 || new_date_time->tm_wday > 6) {
   2cbf4:	69a3      	ldr	r3, [r4, #24]
   2cbf6:	2b06      	cmp	r3, #6
   2cbf8:	d90b      	bls.n	2cc12 <date_time_set+0xde>
   2cbfa:	4b1d      	ldr	r3, [pc, #116]	; (2cc70 <date_time_set+0x13c>)
   2cbfc:	481d      	ldr	r0, [pc, #116]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Week day in time structure not in correct format");
   2cbfe:	4924      	ldr	r1, [pc, #144]	; (2cc90 <date_time_set+0x15c>)
   2cc00:	1ac0      	subs	r0, r0, r3
   2cc02:	08c0      	lsrs	r0, r0, #3
   2cc04:	0180      	lsls	r0, r0, #6
   2cc06:	f040 0001 	orr.w	r0, r0, #1
   2cc0a:	f010 fb79 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cc0e:	f06f 0515 	mvn.w	r5, #21
	}

	/** Days since January 1. */
	if (new_date_time->tm_yday < 0 || new_date_time->tm_yday > 365) {
   2cc12:	69e3      	ldr	r3, [r4, #28]
   2cc14:	f5b3 7fb7 	cmp.w	r3, #366	; 0x16e
   2cc18:	d30f      	bcc.n	2cc3a <date_time_set+0x106>
   2cc1a:	4b15      	ldr	r3, [pc, #84]	; (2cc70 <date_time_set+0x13c>)
   2cc1c:	4815      	ldr	r0, [pc, #84]	; (2cc74 <date_time_set+0x140>)
		LOG_ERR("Year day in time structure not in correct format");
   2cc1e:	491d      	ldr	r1, [pc, #116]	; (2cc94 <date_time_set+0x160>)
   2cc20:	1ac0      	subs	r0, r0, r3
   2cc22:	08c0      	lsrs	r0, r0, #3
   2cc24:	0180      	lsls	r0, r0, #6
   2cc26:	f040 0001 	orr.w	r0, r0, #1
   2cc2a:	f010 fb69 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   2cc2e:	f06f 0515 	mvn.w	r5, #21

	evt.type = DATE_TIME_OBTAINED_EXT;
	date_time_notify_event(&evt);

	return 0;
}
   2cc32:	4628      	mov	r0, r5
   2cc34:	bd70      	pop	{r4, r5, r6, pc}
	int err = 0;
   2cc36:	2500      	movs	r5, #0
   2cc38:	e78d      	b.n	2cb56 <date_time_set+0x22>
	if (err) {
   2cc3a:	2d00      	cmp	r5, #0
   2cc3c:	d1f9      	bne.n	2cc32 <date_time_set+0xfe>
	initial_valid_time = true;
   2cc3e:	2201      	movs	r2, #1
   2cc40:	4b15      	ldr	r3, [pc, #84]	; (2cc98 <date_time_set+0x164>)
	time_aux.last_date_time_update = k_uptime_get();
   2cc42:	4e16      	ldr	r6, [pc, #88]	; (2cc9c <date_time_set+0x168>)
	initial_valid_time = true;
   2cc44:	701a      	strb	r2, [r3, #0]
	time_aux.last_date_time_update = k_uptime_get();
   2cc46:	f013 f8a1 	bl	3fd8c <k_uptime_get>
   2cc4a:	60b0      	str	r0, [r6, #8]
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(new_date_time) * 1000;
   2cc4c:	4620      	mov	r0, r4
   2cc4e:	f7f6 fa99 	bl	23184 <timeutil_timegm64>
   2cc52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2cc56:	460a      	mov	r2, r1
   2cc58:	fba0 0103 	umull	r0, r1, r0, r3
   2cc5c:	fb03 1102 	mla	r1, r3, r2, r1
	evt.type = DATE_TIME_OBTAINED_EXT;
   2cc60:	2202      	movs	r2, #2
   2cc62:	4b0f      	ldr	r3, [pc, #60]	; (2cca0 <date_time_set+0x16c>)
	time_aux.date_time_utc = (int64_t)timeutil_timegm64(new_date_time) * 1000;
   2cc64:	e9c6 0100 	strd	r0, r1, [r6]
	evt.type = DATE_TIME_OBTAINED_EXT;
   2cc68:	701a      	strb	r2, [r3, #0]
	date_time_notify_event(&evt);
   2cc6a:	f7ff fe1b 	bl	2c8a4 <date_time_notify_event.constprop.0>
	return 0;
   2cc6e:	e7e0      	b.n	2cc32 <date_time_set+0xfe>
   2cc70:	0004339c 	.word	0x0004339c
   2cc74:	000433dc 	.word	0x000433dc
   2cc78:	00048227 	.word	0x00048227
   2cc7c:	00048257 	.word	0x00048257
   2cc80:	00048287 	.word	0x00048287
   2cc84:	000482b5 	.word	0x000482b5
   2cc88:	000482e1 	.word	0x000482e1
   2cc8c:	0004830f 	.word	0x0004830f
   2cc90:	0004833c 	.word	0x0004833c
   2cc94:	0004836d 	.word	0x0004836d
   2cc98:	20020733 	.word	0x20020733
   2cc9c:	20016ba0 	.word	0x20016ba0
   2cca0:	20020732 	.word	0x20020732

0002cca4 <date_time_uptime_to_unix_time_ms>:

int date_time_uptime_to_unix_time_ms(int64_t *uptime)
{
   2cca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t uptime_prev = *uptime;
   2cca8:	6803      	ldr	r3, [r0, #0]
{
   2ccaa:	4604      	mov	r4, r0
	int64_t uptime_prev = *uptime;
   2ccac:	9300      	str	r3, [sp, #0]
   2ccae:	6843      	ldr	r3, [r0, #4]
   2ccb0:	9301      	str	r3, [sp, #4]

	if (!initial_valid_time) {
   2ccb2:	4b23      	ldr	r3, [pc, #140]	; (2cd40 <date_time_uptime_to_unix_time_ms+0x9c>)
   2ccb4:	781b      	ldrb	r3, [r3, #0]
   2ccb6:	b973      	cbnz	r3, 2ccd6 <date_time_uptime_to_unix_time_ms+0x32>
   2ccb8:	4b22      	ldr	r3, [pc, #136]	; (2cd44 <date_time_uptime_to_unix_time_ms+0xa0>)
   2ccba:	4823      	ldr	r0, [pc, #140]	; (2cd48 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Valid time not currently available");
   2ccbc:	4923      	ldr	r1, [pc, #140]	; (2cd4c <date_time_uptime_to_unix_time_ms+0xa8>)
   2ccbe:	1ac0      	subs	r0, r0, r3
   2ccc0:	08c0      	lsrs	r0, r0, #3
   2ccc2:	0180      	lsls	r0, r0, #6
   2ccc4:	f040 0002 	orr.w	r0, r0, #2
   2ccc8:	f010 fb1a 	bl	3d300 <log_string_sync>
		return -ENODATA;
   2cccc:	f06f 003c 	mvn.w	r0, #60	; 0x3c
		*uptime = uptime_prev;
		return -EINVAL;
	}

	return 0;
}
   2ccd0:	b003      	add	sp, #12
   2ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*uptime += time_aux.date_time_utc - time_aux.last_date_time_update;
   2ccd6:	4d1e      	ldr	r5, [pc, #120]	; (2cd50 <date_time_uptime_to_unix_time_ms+0xac>)
   2ccd8:	68a9      	ldr	r1, [r5, #8]
   2ccda:	e9d5 6700 	ldrd	r6, r7, [r5]
   2ccde:	1a72      	subs	r2, r6, r1
   2cce0:	eb67 73e1 	sbc.w	r3, r7, r1, asr #31
   2cce4:	9900      	ldr	r1, [sp, #0]
   2cce6:	eb12 0801 	adds.w	r8, r2, r1
   2ccea:	9901      	ldr	r1, [sp, #4]
   2ccec:	eb43 0901 	adc.w	r9, r3, r1
   2ccf0:	e9c0 8900 	strd	r8, r9, [r0]
	    (k_uptime_get() - time_aux.last_date_time_update)) {
   2ccf4:	f013 f84a 	bl	3fd8c <k_uptime_get>
   2ccf8:	68ab      	ldr	r3, [r5, #8]
	if (*uptime > time_aux.date_time_utc +
   2ccfa:	1af6      	subs	r6, r6, r3
   2ccfc:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
   2cd00:	eb16 0a00 	adds.w	sl, r6, r0
   2cd04:	eb47 0b01 	adc.w	fp, r7, r1
   2cd08:	45c2      	cmp	sl, r8
   2cd0a:	eb7b 0309 	sbcs.w	r3, fp, r9
   2cd0e:	da15      	bge.n	2cd3c <date_time_uptime_to_unix_time_ms+0x98>
   2cd10:	4b0c      	ldr	r3, [pc, #48]	; (2cd44 <date_time_uptime_to_unix_time_ms+0xa0>)
   2cd12:	4d0d      	ldr	r5, [pc, #52]	; (2cd48 <date_time_uptime_to_unix_time_ms+0xa4>)
		LOG_WRN("Uptime to large or previously converted");
   2cd14:	490f      	ldr	r1, [pc, #60]	; (2cd54 <date_time_uptime_to_unix_time_ms+0xb0>)
   2cd16:	1aed      	subs	r5, r5, r3
   2cd18:	08ed      	lsrs	r5, r5, #3
   2cd1a:	01ad      	lsls	r5, r5, #6
   2cd1c:	f045 0502 	orr.w	r5, r5, #2
   2cd20:	4628      	mov	r0, r5
   2cd22:	f010 faed 	bl	3d300 <log_string_sync>
		LOG_WRN("Clear variable or set a new uptime");
   2cd26:	4628      	mov	r0, r5
   2cd28:	490b      	ldr	r1, [pc, #44]	; (2cd58 <date_time_uptime_to_unix_time_ms+0xb4>)
   2cd2a:	f010 fae9 	bl	3d300 <log_string_sync>
		*uptime = uptime_prev;
   2cd2e:	9b00      	ldr	r3, [sp, #0]
		return -EINVAL;
   2cd30:	f06f 0015 	mvn.w	r0, #21
		*uptime = uptime_prev;
   2cd34:	6023      	str	r3, [r4, #0]
   2cd36:	9b01      	ldr	r3, [sp, #4]
   2cd38:	6063      	str	r3, [r4, #4]
		return -EINVAL;
   2cd3a:	e7c9      	b.n	2ccd0 <date_time_uptime_to_unix_time_ms+0x2c>
	return 0;
   2cd3c:	2000      	movs	r0, #0
   2cd3e:	e7c7      	b.n	2ccd0 <date_time_uptime_to_unix_time_ms+0x2c>
   2cd40:	20020733 	.word	0x20020733
   2cd44:	0004339c 	.word	0x0004339c
   2cd48:	000433dc 	.word	0x000433dc
   2cd4c:	0004839e 	.word	0x0004839e
   2cd50:	20016ba0 	.word	0x20016ba0
   2cd54:	000483c1 	.word	0x000483c1
   2cd58:	000483e9 	.word	0x000483e9

0002cd5c <date_time_update_async>:

	app_evt_handler = evt_handler;
}

int date_time_update_async(date_time_evt_handler_t evt_handler)
{
   2cd5c:	b508      	push	{r3, lr}
	if (evt_handler) {
   2cd5e:	b108      	cbz	r0, 2cd64 <date_time_update_async+0x8>
		app_evt_handler = evt_handler;
   2cd60:	4b03      	ldr	r3, [pc, #12]	; (2cd70 <date_time_update_async+0x14>)
   2cd62:	6018      	str	r0, [r3, #0]
   2cd64:	4803      	ldr	r0, [pc, #12]	; (2cd74 <date_time_update_async+0x18>)
   2cd66:	f00c faa5 	bl	392b4 <z_impl_k_sem_give>
	}

	k_sem_give(&time_fetch_sem);

	return 0;
}
   2cd6a:	2000      	movs	r0, #0
   2cd6c:	bd08      	pop	{r3, pc}
   2cd6e:	bf00      	nop
   2cd70:	200191d8 	.word	0x200191d8
   2cd74:	20015bd0 	.word	0x20015bd0

0002cd78 <cloud_get_binding>:

extern struct cloud_backend __cloud_backends_start[0];
extern struct cloud_backend __cloud_backends_end[0];

struct cloud_backend *cloud_get_binding(const char *name)
{
   2cd78:	b570      	push	{r4, r5, r6, lr}
   2cd7a:	4605      	mov	r5, r0
	struct cloud_backend *info;

	for (info = __cloud_backends_start; info != __cloud_backends_end;
   2cd7c:	4c09      	ldr	r4, [pc, #36]	; (2cda4 <cloud_get_binding+0x2c>)
   2cd7e:	4e0a      	ldr	r6, [pc, #40]	; (2cda8 <cloud_get_binding+0x30>)
   2cd80:	42b4      	cmp	r4, r6
   2cd82:	d101      	bne.n	2cd88 <cloud_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
   2cd84:	2400      	movs	r4, #0
   2cd86:	e00a      	b.n	2cd9e <cloud_get_binding+0x26>
		if (info->api == NULL) {
   2cd88:	6823      	ldr	r3, [r4, #0]
   2cd8a:	b90b      	cbnz	r3, 2cd90 <cloud_get_binding+0x18>
	     info++) {
   2cd8c:	3408      	adds	r4, #8
   2cd8e:	e7f7      	b.n	2cd80 <cloud_get_binding+0x8>
		if (strcmp(name, info->config->name) == 0) {
   2cd90:	6863      	ldr	r3, [r4, #4]
   2cd92:	4628      	mov	r0, r5
   2cd94:	6819      	ldr	r1, [r3, #0]
   2cd96:	f7f0 fa57 	bl	1d248 <strcmp>
   2cd9a:	2800      	cmp	r0, #0
   2cd9c:	d1f6      	bne.n	2cd8c <cloud_get_binding+0x14>
}
   2cd9e:	4620      	mov	r0, r4
   2cda0:	bd70      	pop	{r4, r5, r6, pc}
   2cda2:	bf00      	nop
   2cda4:	0004db30 	.word	0x0004db30
   2cda8:	0004db38 	.word	0x0004db38

0002cdac <api_uninit>:

	return nrf_cloud_init(&params);
}

static int api_uninit(const struct cloud_backend *const backend)
{
   2cdac:	b508      	push	{r3, lr}
   2cdae:	4806      	ldr	r0, [pc, #24]	; (2cdc8 <api_uninit+0x1c>)
   2cdb0:	4b06      	ldr	r3, [pc, #24]	; (2cdcc <api_uninit+0x20>)
	LOG_INF("uninit() is not implemented");
   2cdb2:	4907      	ldr	r1, [pc, #28]	; (2cdd0 <api_uninit+0x24>)
   2cdb4:	1ac0      	subs	r0, r0, r3
   2cdb6:	08c0      	lsrs	r0, r0, #3
   2cdb8:	0180      	lsls	r0, r0, #6
   2cdba:	f040 0003 	orr.w	r0, r0, #3
   2cdbe:	f010 fa9f 	bl	3d300 <log_string_sync>

	return 0;
}
   2cdc2:	2000      	movs	r0, #0
   2cdc4:	bd08      	pop	{r3, pc}
   2cdc6:	bf00      	nop
   2cdc8:	00043484 	.word	0x00043484
   2cdcc:	0004339c 	.word	0x0004339c
   2cdd0:	00048471 	.word	0x00048471

0002cdd4 <api_connect_error_translate.part.0>:
static int connect_error_translate(const int err)
   2cdd4:	4602      	mov	r2, r0
   2cdd6:	b508      	push	{r3, lr}
   2cdd8:	4806      	ldr	r0, [pc, #24]	; (2cdf4 <api_connect_error_translate.part.0+0x20>)
   2cdda:	4b07      	ldr	r3, [pc, #28]	; (2cdf8 <api_connect_error_translate.part.0+0x24>)
		LOG_ERR("nRF cloud connect failed %d", err);
   2cddc:	4907      	ldr	r1, [pc, #28]	; (2cdfc <api_connect_error_translate.part.0+0x28>)
   2cdde:	1a1b      	subs	r3, r3, r0
   2cde0:	08db      	lsrs	r3, r3, #3
   2cde2:	019b      	lsls	r3, r3, #6
   2cde4:	f043 0001 	orr.w	r0, r3, #1
   2cde8:	f010 fa8a 	bl	3d300 <log_string_sync>
}
   2cdec:	f06f 0004 	mvn.w	r0, #4
   2cdf0:	bd08      	pop	{r3, pc}
   2cdf2:	bf00      	nop
   2cdf4:	0004339c 	.word	0x0004339c
   2cdf8:	00043484 	.word	0x00043484
   2cdfc:	0004848d 	.word	0x0004848d

0002ce00 <connect_error_translate>:
	switch (err) {
   2ce00:	2800      	cmp	r0, #0
   2ce02:	dc0e      	bgt.n	2ce22 <connect_error_translate+0x22>
   2ce04:	f110 0f0d 	cmn.w	r0, #13
   2ce08:	da0d      	bge.n	2ce26 <connect_error_translate+0x26>
   2ce0a:	f110 0f6f 	cmn.w	r0, #111	; 0x6f
   2ce0e:	d042      	beq.n	2ce96 <connect_error_translate+0x96>
   2ce10:	f110 0f6e 	cmn.w	r0, #110	; 0x6e
   2ce14:	da2d      	bge.n	2ce72 <connect_error_translate+0x72>
   2ce16:	f110 0f77 	cmn.w	r0, #119	; 0x77
   2ce1a:	d03f      	beq.n	2ce9c <connect_error_translate+0x9c>
   2ce1c:	f110 0f74 	cmn.w	r0, #116	; 0x74
   2ce20:	d03f      	beq.n	2cea2 <connect_error_translate+0xa2>
   2ce22:	f7ff bfd7 	b.w	2cdd4 <api_connect_error_translate.part.0>
   2ce26:	f100 030d 	add.w	r3, r0, #13
   2ce2a:	2b0d      	cmp	r3, #13
   2ce2c:	d8f9      	bhi.n	2ce22 <connect_error_translate+0x22>
   2ce2e:	a201      	add	r2, pc, #4	; (adr r2, 2ce34 <connect_error_translate+0x34>)
   2ce30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2ce34:	0002ce85 	.word	0x0002ce85
   2ce38:	0002ce91 	.word	0x0002ce91
   2ce3c:	0002ce23 	.word	0x0002ce23
   2ce40:	0002ce6d 	.word	0x0002ce6d
   2ce44:	0002ce23 	.word	0x0002ce23
   2ce48:	0002ce8b 	.word	0x0002ce8b
   2ce4c:	0002ce23 	.word	0x0002ce23
   2ce50:	0002ce23 	.word	0x0002ce23
   2ce54:	0002ce23 	.word	0x0002ce23
   2ce58:	0002ce23 	.word	0x0002ce23
   2ce5c:	0002ce23 	.word	0x0002ce23
   2ce60:	0002ce23 	.word	0x0002ce23
   2ce64:	0002ce23 	.word	0x0002ce23
   2ce68:	0002ce83 	.word	0x0002ce83
   2ce6c:	f06f 0002 	mvn.w	r0, #2
   2ce70:	4770      	bx	lr
   2ce72:	f110 0f5f 	cmn.w	r0, #95	; 0x5f
   2ce76:	d017      	beq.n	2cea8 <connect_error_translate+0xa8>
   2ce78:	f110 0f16 	cmn.w	r0, #22
   2ce7c:	d1d1      	bne.n	2ce22 <connect_error_translate+0x22>
		return NRF_CLOUD_CONNECT_RES_ERR_PRV_KEY;
   2ce7e:	f06f 0006 	mvn.w	r0, #6
}
   2ce82:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_NOT_INITD;
   2ce84:	f04f 30ff 	mov.w	r0, #4294967295
   2ce88:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_BACKEND;
   2ce8a:	f06f 0003 	mvn.w	r0, #3
   2ce8e:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_NO_MEM;
   2ce90:	f06f 0005 	mvn.w	r0, #5
   2ce94:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_CERT_MISC;
   2ce96:	f06f 0008 	mvn.w	r0, #8
   2ce9a:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_ALREADY_CONNECTED;
   2ce9c:	f06f 000a 	mvn.w	r0, #10
   2cea0:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_TIMEOUT_NO_DATA;
   2cea2:	f06f 0009 	mvn.w	r0, #9
   2cea6:	4770      	bx	lr
		return NRF_CLOUD_CONNECT_RES_ERR_CERT;
   2cea8:	f06f 0007 	mvn.w	r0, #7
   2ceac:	4770      	bx	lr
   2ceae:	bf00      	nop

0002ceb0 <api_event_handler>:
{
   2ceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ceb4:	4605      	mov	r5, r0
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2ceb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2d060 <api_event_handler+0x1b0>
{
   2ceba:	b088      	sub	sp, #32
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2cebc:	f8d8 3000 	ldr.w	r3, [r8]
	struct cloud_event evt = { 0 };
   2cec0:	221c      	movs	r2, #28
   2cec2:	2100      	movs	r1, #0
   2cec4:	a801      	add	r0, sp, #4
	struct cloud_backend_config *config = nrf_cloud_backend->config;
   2cec6:	685e      	ldr	r6, [r3, #4]
	struct cloud_event evt = { 0 };
   2cec8:	4c55      	ldr	r4, [pc, #340]	; (2d020 <api_event_handler+0x170>)
   2ceca:	f014 ff08 	bl	41cde <memset>
	switch (nrf_cloud_evt->type) {
   2cece:	4855      	ldr	r0, [pc, #340]	; (2d024 <api_event_handler+0x174>)
   2ced0:	782b      	ldrb	r3, [r5, #0]
   2ced2:	1a24      	subs	r4, r4, r0
   2ced4:	08e4      	lsrs	r4, r4, #3
   2ced6:	2b0a      	cmp	r3, #10
   2ced8:	4647      	mov	r7, r8
   2ceda:	ea4f 1084 	mov.w	r0, r4, lsl #6
   2cede:	d80a      	bhi.n	2cef6 <api_event_handler+0x46>
   2cee0:	b15b      	cbz	r3, 2cefa <api_event_handler+0x4a>
   2cee2:	3b02      	subs	r3, #2
   2cee4:	2b08      	cmp	r3, #8
   2cee6:	d80f      	bhi.n	2cf08 <api_event_handler+0x58>
   2cee8:	e8df f003 	tbb	[pc, r3]
   2ceec:	41392f21 	.word	0x41392f21
   2cef0:	5a527d49 	.word	0x5a527d49
   2cef4:	92          	.byte	0x92
   2cef5:	00          	.byte	0x00
   2cef6:	2bff      	cmp	r3, #255	; 0xff
   2cef8:	d063      	beq.n	2cfc2 <api_event_handler+0x112>
		LOG_DBG("Unknown event type: %d", nrf_cloud_evt->type);
   2cefa:	4a4b      	ldr	r2, [pc, #300]	; (2d028 <api_event_handler+0x178>)
   2cefc:	494b      	ldr	r1, [pc, #300]	; (2d02c <api_event_handler+0x17c>)
   2cefe:	f040 0004 	orr.w	r0, r0, #4
   2cf02:	f010 f9fd 	bl	3d300 <log_string_sync>
}
   2cf06:	e040      	b.n	2cf8a <api_event_handler+0xda>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTED");
   2cf08:	4a47      	ldr	r2, [pc, #284]	; (2d028 <api_event_handler+0x178>)
   2cf0a:	4949      	ldr	r1, [pc, #292]	; (2d030 <api_event_handler+0x180>)
   2cf0c:	f040 0004 	orr.w	r0, r0, #4
   2cf10:	f010 f9f6 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTED;
   2cf14:	2301      	movs	r3, #1
   2cf16:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.persistent_session = (nrf_cloud_evt->status != 0);
   2cf1a:	686b      	ldr	r3, [r5, #4]
   2cf1c:	3b00      	subs	r3, #0
   2cf1e:	bf18      	it	ne
   2cf20:	2301      	movne	r3, #1
   2cf22:	f88d 3008 	strb.w	r3, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2cf26:	68f2      	ldr	r2, [r6, #12]
   2cf28:	6838      	ldr	r0, [r7, #0]
   2cf2a:	a901      	add	r1, sp, #4
   2cf2c:	e058      	b.n	2cfe0 <api_event_handler+0x130>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_CONNECTING");
   2cf2e:	4a3e      	ldr	r2, [pc, #248]	; (2d028 <api_event_handler+0x178>)
   2cf30:	4940      	ldr	r1, [pc, #256]	; (2d034 <api_event_handler+0x184>)
   2cf32:	f040 0004 	orr.w	r0, r0, #4
   2cf36:	f010 f9e3 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_CONNECTING;
   2cf3a:	2300      	movs	r3, #0
			api_connect_error_translate(nrf_cloud_evt->status);
   2cf3c:	6868      	ldr	r0, [r5, #4]
		evt.type = CLOUD_EVT_CONNECTING;
   2cf3e:	f88d 3004 	strb.w	r3, [sp, #4]
			api_connect_error_translate(nrf_cloud_evt->status);
   2cf42:	f012 ff53 	bl	3fdec <api_connect_error_translate>
		evt.data.err =
   2cf46:	9002      	str	r0, [sp, #8]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2cf48:	e7ed      	b.n	2cf26 <api_event_handler+0x76>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATION_REQUEST");
   2cf4a:	4a37      	ldr	r2, [pc, #220]	; (2d028 <api_event_handler+0x178>)
   2cf4c:	493a      	ldr	r1, [pc, #232]	; (2d038 <api_event_handler+0x188>)
   2cf4e:	f040 0004 	orr.w	r0, r0, #4
   2cf52:	f010 f9d5 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_REQUEST;
   2cf56:	2307      	movs	r3, #7
		evt.type = CLOUD_EVT_FOTA_DONE;
   2cf58:	f88d 3004 	strb.w	r3, [sp, #4]
   2cf5c:	e7e3      	b.n	2cf26 <api_event_handler+0x76>
		LOG_DBG("NRF_CLOUD_EVT_USER_ASSOCIATED");
   2cf5e:	4a32      	ldr	r2, [pc, #200]	; (2d028 <api_event_handler+0x178>)
   2cf60:	4936      	ldr	r1, [pc, #216]	; (2d03c <api_event_handler+0x18c>)
   2cf62:	f040 0004 	orr.w	r0, r0, #4
   2cf66:	f010 f9cb 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_PAIR_DONE;
   2cf6a:	2308      	movs	r3, #8
   2cf6c:	e7f4      	b.n	2cf58 <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_READY");
   2cf6e:	4a2e      	ldr	r2, [pc, #184]	; (2d028 <api_event_handler+0x178>)
   2cf70:	4933      	ldr	r1, [pc, #204]	; (2d040 <api_event_handler+0x190>)
   2cf72:	f040 0004 	orr.w	r0, r0, #4
   2cf76:	f010 f9c3 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_READY;
   2cf7a:	2303      	movs	r3, #3
   2cf7c:	e7ec      	b.n	2cf58 <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_ATTACHED");
   2cf7e:	4a2a      	ldr	r2, [pc, #168]	; (2d028 <api_event_handler+0x178>)
   2cf80:	4930      	ldr	r1, [pc, #192]	; (2d044 <api_event_handler+0x194>)
   2cf82:	f040 0004 	orr.w	r0, r0, #4
   2cf86:	f010 f9bb 	bl	3d300 <log_string_sync>
}
   2cf8a:	b008      	add	sp, #32
   2cf8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_DBG("NRF_CLOUD_EVT_SENSOR_DATA_ACK");
   2cf90:	4a25      	ldr	r2, [pc, #148]	; (2d028 <api_event_handler+0x178>)
   2cf92:	492d      	ldr	r1, [pc, #180]	; (2d048 <api_event_handler+0x198>)
   2cf94:	f040 0004 	orr.w	r0, r0, #4
   2cf98:	f010 f9b2 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_SENT;
   2cf9c:	2305      	movs	r3, #5
   2cf9e:	e7db      	b.n	2cf58 <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED");
   2cfa0:	4a21      	ldr	r2, [pc, #132]	; (2d028 <api_event_handler+0x178>)
   2cfa2:	492a      	ldr	r1, [pc, #168]	; (2d04c <api_event_handler+0x19c>)
   2cfa4:	f040 0004 	orr.w	r0, r0, #4
   2cfa8:	f010 f9aa 	bl	3d300 <log_string_sync>
		atomic_set(&transport_disconnected, 1);
   2cfac:	2101      	movs	r1, #1
   2cfae:	4828      	ldr	r0, [pc, #160]	; (2d050 <api_event_handler+0x1a0>)
   2cfb0:	f012 ff0d 	bl	3fdce <atomic_set>
			api_disconnect_status_translate(nrf_cloud_evt->status);
   2cfb4:	792b      	ldrb	r3, [r5, #4]
   2cfb6:	2b03      	cmp	r3, #3
   2cfb8:	bf28      	it	cs
   2cfba:	2303      	movcs	r3, #3
   2cfbc:	9302      	str	r3, [sp, #8]
		evt.type = CLOUD_EVT_DISCONNECTED;
   2cfbe:	2302      	movs	r3, #2
   2cfc0:	e7ca      	b.n	2cf58 <api_event_handler+0xa8>
		LOG_DBG("NRF_CLOUD_EVT_ERROR: %d", nrf_cloud_evt->status);
   2cfc2:	686b      	ldr	r3, [r5, #4]
   2cfc4:	4a18      	ldr	r2, [pc, #96]	; (2d028 <api_event_handler+0x178>)
   2cfc6:	4923      	ldr	r1, [pc, #140]	; (2d054 <api_event_handler+0x1a4>)
   2cfc8:	f040 0004 	orr.w	r0, r0, #4
   2cfcc:	f010 f998 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_ERROR;
   2cfd0:	2304      	movs	r3, #4
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2cfd2:	68f2      	ldr	r2, [r6, #12]
   2cfd4:	f8d8 0000 	ldr.w	r0, [r8]
		evt.type = CLOUD_EVT_ERROR;
   2cfd8:	f88d 3004 	strb.w	r3, [sp, #4]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2cfdc:	eb0d 0103 	add.w	r1, sp, r3
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2cfe0:	f012 feec 	bl	3fdbc <cloud_notify_event>
		break;
   2cfe4:	e7d1      	b.n	2cf8a <api_event_handler+0xda>
		LOG_DBG("NRF_CLOUD_EVT_RX_DATA");
   2cfe6:	4a10      	ldr	r2, [pc, #64]	; (2d028 <api_event_handler+0x178>)
   2cfe8:	491b      	ldr	r1, [pc, #108]	; (2d058 <api_event_handler+0x1a8>)
   2cfea:	f040 0004 	orr.w	r0, r0, #4
   2cfee:	f010 f987 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_DATA_RECEIVED;
   2cff2:	2306      	movs	r3, #6
   2cff4:	f88d 3004 	strb.w	r3, [sp, #4]
		evt.data.msg.buf = (char *)nrf_cloud_evt->data.ptr;
   2cff8:	68eb      	ldr	r3, [r5, #12]
   2cffa:	9302      	str	r3, [sp, #8]
		evt.data.msg.len = nrf_cloud_evt->data.len;
   2cffc:	68ab      	ldr	r3, [r5, #8]
   2cffe:	9303      	str	r3, [sp, #12]
		evt.data.msg.endpoint.type = CLOUD_EP_MSG;
   2d000:	2300      	movs	r3, #0
   2d002:	f8ad 3014 	strh.w	r3, [sp, #20]
		evt.data.msg.endpoint.str =
   2d006:	696b      	ldr	r3, [r5, #20]
   2d008:	9306      	str	r3, [sp, #24]
		evt.data.msg.endpoint.len = nrf_cloud_evt->topic.len;
   2d00a:	692b      	ldr	r3, [r5, #16]
   2d00c:	9307      	str	r3, [sp, #28]
		cloud_notify_event(nrf_cloud_backend, &evt, config->user_data);
   2d00e:	e78a      	b.n	2cf26 <api_event_handler+0x76>
		LOG_DBG("NRF_CLOUD_EVT_FOTA_DONE");
   2d010:	4a05      	ldr	r2, [pc, #20]	; (2d028 <api_event_handler+0x178>)
   2d012:	4912      	ldr	r1, [pc, #72]	; (2d05c <api_event_handler+0x1ac>)
   2d014:	f040 0004 	orr.w	r0, r0, #4
   2d018:	f010 f972 	bl	3d300 <log_string_sync>
		evt.type = CLOUD_EVT_FOTA_DONE;
   2d01c:	230a      	movs	r3, #10
   2d01e:	e79b      	b.n	2cf58 <api_event_handler+0xa8>
   2d020:	00043484 	.word	0x00043484
   2d024:	0004339c 	.word	0x0004339c
   2d028:	00048895 	.word	0x00048895
   2d02c:	0004861a 	.word	0x0004861a
   2d030:	000484a9 	.word	0x000484a9
   2d034:	000484cf 	.word	0x000484cf
   2d038:	000484f6 	.word	0x000484f6
   2d03c:	00048521 	.word	0x00048521
   2d040:	00048543 	.word	0x00048543
   2d044:	0004855b 	.word	0x0004855b
   2d048:	0004857d 	.word	0x0004857d
   2d04c:	0004859f 	.word	0x0004859f
   2d050:	2001923c 	.word	0x2001923c
   2d054:	000485c8 	.word	0x000485c8
   2d058:	000485e4 	.word	0x000485e4
   2d05c:	000485fe 	.word	0x000485fe
   2d060:	20019238 	.word	0x20019238

0002d064 <nfsm_get_current_state>:
	return current_state;
   2d064:	4b01      	ldr	r3, [pc, #4]	; (2d06c <nfsm_get_current_state+0x8>)
   2d066:	7818      	ldrb	r0, [r3, #0]
}
   2d068:	4770      	bx	lr
   2d06a:	bf00      	nop
   2d06c:	20020734 	.word	0x20020734

0002d070 <nfsm_set_current_state_and_notify>:
{
   2d070:	b570      	push	{r4, r5, r6, lr}
   2d072:	4606      	mov	r6, r0
   2d074:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   2d076:	f04f 32ff 	mov.w	r2, #4294967295
   2d07a:	f04f 33ff 	mov.w	r3, #4294967295
   2d07e:	4812      	ldr	r0, [pc, #72]	; (2d0c8 <nfsm_set_current_state_and_notify+0x58>)
   2d080:	f00a fc26 	bl	378d0 <z_impl_k_mutex_lock>
   2d084:	4c11      	ldr	r4, [pc, #68]	; (2d0cc <nfsm_set_current_state_and_notify+0x5c>)
   2d086:	4812      	ldr	r0, [pc, #72]	; (2d0d0 <nfsm_set_current_state_and_notify+0x60>)
	LOG_DBG("state: %d", state);
   2d088:	4633      	mov	r3, r6
   2d08a:	1a24      	subs	r4, r4, r0
   2d08c:	08e4      	lsrs	r4, r4, #3
   2d08e:	01a4      	lsls	r4, r4, #6
   2d090:	4a10      	ldr	r2, [pc, #64]	; (2d0d4 <nfsm_set_current_state_and_notify+0x64>)
   2d092:	4911      	ldr	r1, [pc, #68]	; (2d0d8 <nfsm_set_current_state_and_notify+0x68>)
   2d094:	f044 0004 	orr.w	r0, r4, #4
   2d098:	f010 f932 	bl	3d300 <log_string_sync>
	current_state = state;
   2d09c:	4b0f      	ldr	r3, [pc, #60]	; (2d0dc <nfsm_set_current_state_and_notify+0x6c>)
   2d09e:	701e      	strb	r6, [r3, #0]
	if ((evt != NULL) &&
   2d0a0:	b135      	cbz	r5, 2d0b0 <nfsm_set_current_state_and_notify+0x40>
   2d0a2:	782b      	ldrb	r3, [r5, #0]
   2d0a4:	2b09      	cmp	r3, #9
   2d0a6:	d103      	bne.n	2d0b0 <nfsm_set_current_state_and_notify+0x40>
		atomic_set(&transport_disconnected, 1);
   2d0a8:	2101      	movs	r1, #1
   2d0aa:	480d      	ldr	r0, [pc, #52]	; (2d0e0 <nfsm_set_current_state_and_notify+0x70>)
   2d0ac:	f012 fe8f 	bl	3fdce <atomic_set>
	if ((app_event_handler != NULL) && (evt != NULL)) {
   2d0b0:	4b0c      	ldr	r3, [pc, #48]	; (2d0e4 <nfsm_set_current_state_and_notify+0x74>)
   2d0b2:	681b      	ldr	r3, [r3, #0]
   2d0b4:	b113      	cbz	r3, 2d0bc <nfsm_set_current_state_and_notify+0x4c>
   2d0b6:	b10d      	cbz	r5, 2d0bc <nfsm_set_current_state_and_notify+0x4c>
		app_event_handler(evt);
   2d0b8:	4628      	mov	r0, r5
   2d0ba:	4798      	blx	r3
}
   2d0bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_impl_k_mutex_unlock(mutex);
   2d0c0:	4801      	ldr	r0, [pc, #4]	; (2d0c8 <nfsm_set_current_state_and_notify+0x58>)
   2d0c2:	f00a bcff 	b.w	37ac4 <z_impl_k_mutex_unlock>
   2d0c6:	bf00      	nop
   2d0c8:	20015aec 	.word	0x20015aec
   2d0cc:	00043484 	.word	0x00043484
   2d0d0:	0004339c 	.word	0x0004339c
   2d0d4:	0004884f 	.word	0x0004884f
   2d0d8:	00048635 	.word	0x00048635
   2d0dc:	20020734 	.word	0x20020734
   2d0e0:	2001923c 	.word	0x2001923c
   2d0e4:	2001922c 	.word	0x2001922c

0002d0e8 <nfsm_get_disconnect_requested>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2d0e8:	4b03      	ldr	r3, [pc, #12]	; (2d0f8 <nfsm_get_disconnect_requested+0x10>)
   2d0ea:	e8d3 0faf 	lda	r0, [r3]
}
   2d0ee:	3800      	subs	r0, #0
   2d0f0:	bf18      	it	ne
   2d0f2:	2001      	movne	r0, #1
   2d0f4:	4770      	bx	lr
   2d0f6:	bf00      	nop
   2d0f8:	20019234 	.word	0x20019234

0002d0fc <nrf_cloud_init>:
{
   2d0fc:	b538      	push	{r3, r4, r5, lr}
	if (current_state != STATE_IDLE) {
   2d0fe:	4d0d      	ldr	r5, [pc, #52]	; (2d134 <nrf_cloud_init+0x38>)
{
   2d100:	4604      	mov	r4, r0
	if (current_state != STATE_IDLE) {
   2d102:	782b      	ldrb	r3, [r5, #0]
   2d104:	b983      	cbnz	r3, 2d128 <nrf_cloud_init+0x2c>
	if (param->event_handler == NULL) {
   2d106:	6803      	ldr	r3, [r0, #0]
   2d108:	b18b      	cbz	r3, 2d12e <nrf_cloud_init+0x32>
	err = nfsm_init();
   2d10a:	f000 fdd1 	bl	2dcb0 <nfsm_init>
	if (err) {
   2d10e:	b950      	cbnz	r0, 2d126 <nrf_cloud_init+0x2a>
	err = nrf_codec_init();
   2d110:	f012 fed9 	bl	3fec6 <nrf_codec_init>
	if (err) {
   2d114:	b938      	cbnz	r0, 2d126 <nrf_cloud_init+0x2a>
	err = nct_init();
   2d116:	f001 f973 	bl	2e400 <nct_init>
	if (err) {
   2d11a:	b920      	cbnz	r0, 2d126 <nrf_cloud_init+0x2a>
	app_event_handler = param->event_handler;
   2d11c:	4b06      	ldr	r3, [pc, #24]	; (2d138 <nrf_cloud_init+0x3c>)
   2d11e:	6822      	ldr	r2, [r4, #0]
   2d120:	601a      	str	r2, [r3, #0]
	current_state = STATE_INITIALIZED;
   2d122:	2301      	movs	r3, #1
   2d124:	702b      	strb	r3, [r5, #0]
}
   2d126:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
   2d128:	f06f 000c 	mvn.w	r0, #12
   2d12c:	e7fb      	b.n	2d126 <nrf_cloud_init+0x2a>
		return -EINVAL;
   2d12e:	f06f 0015 	mvn.w	r0, #21
   2d132:	e7f8      	b.n	2d126 <nrf_cloud_init+0x2a>
   2d134:	20020734 	.word	0x20020734
   2d138:	2001922c 	.word	0x2001922c

0002d13c <api_init>:
{
   2d13c:	b507      	push	{r0, r1, r2, lr}
	const struct nrf_cloud_init_param params = {
   2d13e:	4b06      	ldr	r3, [pc, #24]	; (2d158 <api_init+0x1c>)
   2d140:	9301      	str	r3, [sp, #4]
	backend->config->handler = handler;
   2d142:	6843      	ldr	r3, [r0, #4]
   2d144:	6059      	str	r1, [r3, #4]
	nrf_cloud_backend = (struct cloud_backend *)backend;
   2d146:	4b05      	ldr	r3, [pc, #20]	; (2d15c <api_init+0x20>)
   2d148:	6018      	str	r0, [r3, #0]
	return nrf_cloud_init(&params);
   2d14a:	a801      	add	r0, sp, #4
   2d14c:	f7ff ffd6 	bl	2d0fc <nrf_cloud_init>
}
   2d150:	b003      	add	sp, #12
   2d152:	f85d fb04 	ldr.w	pc, [sp], #4
   2d156:	bf00      	nop
   2d158:	0002ceb1 	.word	0x0002ceb1
   2d15c:	20019238 	.word	0x20019238

0002d160 <nrf_cloud_connect>:
{
   2d160:	b510      	push	{r4, lr}
	if (NOT_VALID_STATE(STATE_INITIALIZED)) {
   2d162:	4b15      	ldr	r3, [pc, #84]	; (2d1b8 <nrf_cloud_connect+0x58>)
   2d164:	781a      	ldrb	r2, [r3, #0]
   2d166:	2a01      	cmp	r2, #1
   2d168:	d822      	bhi.n	2d1b0 <nrf_cloud_connect+0x50>
	if (current_state == STATE_IDLE) {
   2d16a:	781b      	ldrb	r3, [r3, #0]
   2d16c:	b1eb      	cbz	r3, 2d1aa <nrf_cloud_connect+0x4a>
   2d16e:	4b13      	ldr	r3, [pc, #76]	; (2d1bc <nrf_cloud_connect+0x5c>)
   2d170:	e8d3 4faf 	lda	r4, [r3]
	if (atomic_get(&connection_poll_active)) {
   2d174:	b184      	cbz	r4, 2d198 <nrf_cloud_connect+0x38>
   2d176:	4b12      	ldr	r3, [pc, #72]	; (2d1c0 <nrf_cloud_connect+0x60>)
   2d178:	4812      	ldr	r0, [pc, #72]	; (2d1c4 <nrf_cloud_connect+0x64>)
		LOG_DBG("Connection poll in progress");
   2d17a:	4a13      	ldr	r2, [pc, #76]	; (2d1c8 <nrf_cloud_connect+0x68>)
   2d17c:	1ac0      	subs	r0, r0, r3
   2d17e:	08c0      	lsrs	r0, r0, #3
   2d180:	0180      	lsls	r0, r0, #6
   2d182:	f040 0004 	orr.w	r0, r0, #4
   2d186:	4911      	ldr	r1, [pc, #68]	; (2d1cc <nrf_cloud_connect+0x6c>)
   2d188:	f010 f8ba 	bl	3d300 <log_string_sync>
		return -EINPROGRESS;
   2d18c:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   2d190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return connect_error_translate(err);
   2d194:	f7ff be34 	b.w	2ce00 <connect_error_translate>
	atomic_set(&disconnect_requested, 0);
   2d198:	4621      	mov	r1, r4
   2d19a:	480d      	ldr	r0, [pc, #52]	; (2d1d0 <nrf_cloud_connect+0x70>)
   2d19c:	f012 fe17 	bl	3fdce <atomic_set>
	z_impl_k_sem_give(sem);
   2d1a0:	480c      	ldr	r0, [pc, #48]	; (2d1d4 <nrf_cloud_connect+0x74>)
   2d1a2:	f00c f887 	bl	392b4 <z_impl_k_sem_give>
	return 0;
   2d1a6:	4620      	mov	r0, r4
}
   2d1a8:	e7f2      	b.n	2d190 <nrf_cloud_connect+0x30>
		return -EACCES;
   2d1aa:	f06f 000c 	mvn.w	r0, #12
   2d1ae:	e7ef      	b.n	2d190 <nrf_cloud_connect+0x30>
}
   2d1b0:	f04f 30ff 	mov.w	r0, #4294967295
   2d1b4:	bd10      	pop	{r4, pc}
   2d1b6:	bf00      	nop
   2d1b8:	20020734 	.word	0x20020734
   2d1bc:	20019230 	.word	0x20019230
   2d1c0:	0004339c 	.word	0x0004339c
   2d1c4:	00043484 	.word	0x00043484
   2d1c8:	00048871 	.word	0x00048871
   2d1cc:	00048643 	.word	0x00048643
   2d1d0:	20019234 	.word	0x20019234
   2d1d4:	20015b70 	.word	0x20015b70

0002d1d8 <nrf_cloud_disconnect>:
{
   2d1d8:	b508      	push	{r3, lr}
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2d1da:	4b09      	ldr	r3, [pc, #36]	; (2d200 <nrf_cloud_disconnect+0x28>)
   2d1dc:	781a      	ldrb	r2, [r3, #0]
   2d1de:	2a09      	cmp	r2, #9
   2d1e0:	d902      	bls.n	2d1e8 <nrf_cloud_disconnect+0x10>
	    NOT_VALID_STATE(STATE_CC_CONNECTED)) {
   2d1e2:	781b      	ldrb	r3, [r3, #0]
	if (NOT_VALID_STATE(STATE_DC_CONNECTED) &&
   2d1e4:	2b04      	cmp	r3, #4
   2d1e6:	d807      	bhi.n	2d1f8 <nrf_cloud_disconnect+0x20>
	atomic_set(&disconnect_requested, 1);
   2d1e8:	2101      	movs	r1, #1
   2d1ea:	4806      	ldr	r0, [pc, #24]	; (2d204 <nrf_cloud_disconnect+0x2c>)
   2d1ec:	f012 fdef 	bl	3fdce <atomic_set>
}
   2d1f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return nct_disconnect();
   2d1f4:	f001 bbca 	b.w	2e98c <nct_disconnect>
}
   2d1f8:	f06f 000c 	mvn.w	r0, #12
   2d1fc:	bd08      	pop	{r3, pc}
   2d1fe:	bf00      	nop
   2d200:	20020734 	.word	0x20020734
   2d204:	20019234 	.word	0x20019234

0002d208 <nrf_cloud_run>:
{
   2d208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2d20c:	f04f 0900 	mov.w	r9, #0
   2d210:	4d54      	ldr	r5, [pc, #336]	; (2d364 <nrf_cloud_run+0x15c>)
   2d212:	4b55      	ldr	r3, [pc, #340]	; (2d368 <nrf_cloud_run+0x160>)
	return z_impl_k_sem_take(sem, timeout);
   2d214:	4f55      	ldr	r7, [pc, #340]	; (2d36c <nrf_cloud_run+0x164>)
   2d216:	1aed      	subs	r5, r5, r3
	atomic_set(&connection_poll_active, 1);
   2d218:	f8df 8188 	ldr.w	r8, [pc, #392]	; 2d3a4 <nrf_cloud_run+0x19c>
{
   2d21c:	b088      	sub	sp, #32
   2d21e:	08ed      	lsrs	r5, r5, #3
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2d220:	2402      	movs	r4, #2
   2d222:	f04f 32ff 	mov.w	r2, #4294967295
   2d226:	f04f 33ff 	mov.w	r3, #4294967295
   2d22a:	4638      	mov	r0, r7
	app_event_handler(&evt);
   2d22c:	4e50      	ldr	r6, [pc, #320]	; (2d370 <nrf_cloud_run+0x168>)
   2d22e:	f00c f885 	bl	3933c <z_impl_k_sem_take>
	atomic_set(&connection_poll_active, 1);
   2d232:	2101      	movs	r1, #1
   2d234:	4640      	mov	r0, r8
   2d236:	f012 fdca 	bl	3fdce <atomic_set>
	app_event_handler(&evt);
   2d23a:	6833      	ldr	r3, [r6, #0]
   2d23c:	a802      	add	r0, sp, #8
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2d23e:	f88d 4008 	strb.w	r4, [sp, #8]
	evt.status = NRF_CLOUD_CONNECT_RES_SUCCESS;
   2d242:	f8cd 900c 	str.w	r9, [sp, #12]
	app_event_handler(&evt);
   2d246:	4798      	blx	r3
	atomic_set(&disconnect_requested, 0);
   2d248:	2100      	movs	r1, #0
   2d24a:	484a      	ldr	r0, [pc, #296]	; (2d374 <nrf_cloud_run+0x16c>)
   2d24c:	f012 fdbf 	bl	3fdce <atomic_set>
	return nct_connect();
   2d250:	f001 f9d6 	bl	2e600 <nct_connect>
	ret = connect_error_translate(ret);
   2d254:	f7ff fdd4 	bl	2ce00 <connect_error_translate>
	if (ret != NRF_CLOUD_CONNECT_RES_SUCCESS) {
   2d258:	4682      	mov	sl, r0
   2d25a:	b178      	cbz	r0, 2d27c <nrf_cloud_run+0x74>
		evt.status = ret;
   2d25c:	9003      	str	r0, [sp, #12]
		app_event_handler(&evt);
   2d25e:	6833      	ldr	r3, [r6, #0]
		evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTING;
   2d260:	f88d 4008 	strb.w	r4, [sp, #8]
		app_event_handler(&evt);
   2d264:	a802      	add	r0, sp, #8
   2d266:	4798      	blx	r3
	atomic_set(&connection_poll_active, 0);
   2d268:	2100      	movs	r1, #0
   2d26a:	4640      	mov	r0, r8
   2d26c:	f012 fdaf 	bl	3fdce <atomic_set>
   2d270:	2200      	movs	r2, #0
   2d272:	2300      	movs	r3, #0
   2d274:	4638      	mov	r0, r7
   2d276:	f00c f861 	bl	3933c <z_impl_k_sem_take>
	goto start;
   2d27a:	e7d1      	b.n	2d220 <nrf_cloud_run+0x18>
		LOG_DBG("Cloud connection request sent.");
   2d27c:	01ac      	lsls	r4, r5, #6
   2d27e:	4a3e      	ldr	r2, [pc, #248]	; (2d378 <nrf_cloud_run+0x170>)
   2d280:	493e      	ldr	r1, [pc, #248]	; (2d37c <nrf_cloud_run+0x174>)
   2d282:	f044 0004 	orr.w	r0, r4, #4
   2d286:	f010 f83b 	bl	3d300 <log_string_sync>
	fds[0].fd = nct_socket_get();
   2d28a:	f001 fbaf 	bl	2e9ec <nct_socket_get>
	fds[0].events = POLLIN;
   2d28e:	2301      	movs	r3, #1
   2d290:	f8ad 3004 	strh.w	r3, [sp, #4]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2d294:	2309      	movs	r3, #9
	atomic_set(&transport_disconnected, 0);
   2d296:	4651      	mov	r1, sl
	fds[0].fd = nct_socket_get();
   2d298:	9000      	str	r0, [sp, #0]
	atomic_set(&transport_disconnected, 0);
   2d29a:	4839      	ldr	r0, [pc, #228]	; (2d380 <nrf_cloud_run+0x178>)
	evt.type = NRF_CLOUD_EVT_TRANSPORT_DISCONNECTED;
   2d29c:	f88d 3008 	strb.w	r3, [sp, #8]
	atomic_set(&transport_disconnected, 0);
   2d2a0:	f012 fd95 	bl	3fdce <atomic_set>
   2d2a4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 2d380 <nrf_cloud_run+0x178>
		ret = poll(fds, ARRAY_SIZE(fds), nct_keepalive_time_left());
   2d2a8:	f001 fb9a 	bl	2e9e0 <nct_keepalive_time_left>
   2d2ac:	4602      	mov	r2, r0
	return z_impl_zsock_poll(fds, nfds, timeout);
   2d2ae:	2101      	movs	r1, #1
   2d2b0:	4668      	mov	r0, sp
   2d2b2:	f7f7 fc75 	bl	24ba0 <z_impl_zsock_poll>
		if (ret == 0) {
   2d2b6:	4602      	mov	r2, r0
   2d2b8:	b910      	cbnz	r0, 2d2c0 <nrf_cloud_run+0xb8>
	nct_process();
   2d2ba:	f001 fb85 	bl	2e9c8 <nct_process>
			continue;
   2d2be:	e7f3      	b.n	2d2a8 <nrf_cloud_run+0xa0>
		if ((fds[0].revents & POLLIN) == POLLIN) {
   2d2c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2d2c4:	07d8      	lsls	r0, r3, #31
   2d2c6:	d516      	bpl.n	2d2f6 <nrf_cloud_run+0xee>
	nct_process();
   2d2c8:	f001 fb7e 	bl	2e9c8 <nct_process>
   2d2cc:	e8da 3faf 	lda	r3, [sl]
			if (atomic_get(&transport_disconnected) == 1) {
   2d2d0:	2b01      	cmp	r3, #1
   2d2d2:	d1e9      	bne.n	2d2a8 <nrf_cloud_run+0xa0>
				LOG_DBG("The cloud socket is already closed.");
   2d2d4:	4a28      	ldr	r2, [pc, #160]	; (2d378 <nrf_cloud_run+0x170>)
   2d2d6:	492b      	ldr	r1, [pc, #172]	; (2d384 <nrf_cloud_run+0x17c>)
   2d2d8:	f044 0004 	orr.w	r0, r4, #4
   2d2dc:	f010 f810 	bl	3d300 <log_string_sync>
   2d2e0:	4b27      	ldr	r3, [pc, #156]	; (2d380 <nrf_cloud_run+0x178>)
   2d2e2:	e8d3 3faf 	lda	r3, [r3]
	if (atomic_get(&transport_disconnected) == 0) {
   2d2e6:	2b00      	cmp	r3, #0
   2d2e8:	d1be      	bne.n	2d268 <nrf_cloud_run+0x60>
		app_event_handler(&evt);
   2d2ea:	6833      	ldr	r3, [r6, #0]
   2d2ec:	a802      	add	r0, sp, #8
   2d2ee:	4798      	blx	r3
		nrf_cloud_disconnect();
   2d2f0:	f7ff ff72 	bl	2d1d8 <nrf_cloud_disconnect>
   2d2f4:	e7b8      	b.n	2d268 <nrf_cloud_run+0x60>
		if (ret < 0) {
   2d2f6:	2a00      	cmp	r2, #0
   2d2f8:	da06      	bge.n	2d308 <nrf_cloud_run+0x100>
			LOG_ERR("poll() returned an error: %d", ret);
   2d2fa:	4923      	ldr	r1, [pc, #140]	; (2d388 <nrf_cloud_run+0x180>)
   2d2fc:	f044 0001 	orr.w	r0, r4, #1
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2d300:	f00f fffe 	bl	3d300 <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2d304:	2303      	movs	r3, #3
   2d306:	e00e      	b.n	2d326 <nrf_cloud_run+0x11e>
		if ((fds[0].revents & POLLNVAL) == POLLNVAL) {
   2d308:	0699      	lsls	r1, r3, #26
   2d30a:	d50e      	bpl.n	2d32a <nrf_cloud_run+0x122>
			LOG_DBG("Socket error: POLLNVAL");
   2d30c:	f044 0404 	orr.w	r4, r4, #4
   2d310:	4620      	mov	r0, r4
   2d312:	4a19      	ldr	r2, [pc, #100]	; (2d378 <nrf_cloud_run+0x170>)
   2d314:	491d      	ldr	r1, [pc, #116]	; (2d38c <nrf_cloud_run+0x184>)
   2d316:	f00f fff3 	bl	3d300 <log_string_sync>
			LOG_DBG("The cloud socket was unexpectedly closed.");
   2d31a:	4620      	mov	r0, r4
   2d31c:	4a16      	ldr	r2, [pc, #88]	; (2d378 <nrf_cloud_run+0x170>)
   2d31e:	491c      	ldr	r1, [pc, #112]	; (2d390 <nrf_cloud_run+0x188>)
   2d320:	f00f ffee 	bl	3d300 <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_INVALID_REQUEST;
   2d324:	2302      	movs	r3, #2
			evt.status = NRF_CLOUD_DISCONNECT_MISC;
   2d326:	9303      	str	r3, [sp, #12]
			break;
   2d328:	e7da      	b.n	2d2e0 <nrf_cloud_run+0xd8>
		if ((fds[0].revents & POLLHUP) == POLLHUP) {
   2d32a:	06da      	lsls	r2, r3, #27
   2d32c:	d50d      	bpl.n	2d34a <nrf_cloud_run+0x142>
			LOG_DBG("Socket error: POLLHUP");
   2d32e:	f044 0404 	orr.w	r4, r4, #4
   2d332:	4620      	mov	r0, r4
   2d334:	4a10      	ldr	r2, [pc, #64]	; (2d378 <nrf_cloud_run+0x170>)
   2d336:	4917      	ldr	r1, [pc, #92]	; (2d394 <nrf_cloud_run+0x18c>)
   2d338:	f00f ffe2 	bl	3d300 <log_string_sync>
			LOG_DBG("Connection was closed by the cloud.");
   2d33c:	4620      	mov	r0, r4
   2d33e:	4a0e      	ldr	r2, [pc, #56]	; (2d378 <nrf_cloud_run+0x170>)
   2d340:	4915      	ldr	r1, [pc, #84]	; (2d398 <nrf_cloud_run+0x190>)
   2d342:	f00f ffdd 	bl	3d300 <log_string_sync>
			evt.status = NRF_CLOUD_DISCONNECT_CLOSED_BY_REMOTE;
   2d346:	2301      	movs	r3, #1
   2d348:	e7ed      	b.n	2d326 <nrf_cloud_run+0x11e>
		if ((fds[0].revents & POLLERR) == POLLERR) {
   2d34a:	071b      	lsls	r3, r3, #28
   2d34c:	d5ac      	bpl.n	2d2a8 <nrf_cloud_run+0xa0>
			LOG_DBG("Socket error: POLLERR");
   2d34e:	f044 0404 	orr.w	r4, r4, #4
   2d352:	4620      	mov	r0, r4
   2d354:	4a08      	ldr	r2, [pc, #32]	; (2d378 <nrf_cloud_run+0x170>)
   2d356:	4911      	ldr	r1, [pc, #68]	; (2d39c <nrf_cloud_run+0x194>)
   2d358:	f00f ffd2 	bl	3d300 <log_string_sync>
			LOG_DBG("Cloud connection was unexpectedly closed.");
   2d35c:	4620      	mov	r0, r4
   2d35e:	4a06      	ldr	r2, [pc, #24]	; (2d378 <nrf_cloud_run+0x170>)
   2d360:	490f      	ldr	r1, [pc, #60]	; (2d3a0 <nrf_cloud_run+0x198>)
   2d362:	e7cd      	b.n	2d300 <nrf_cloud_run+0xf8>
   2d364:	00043484 	.word	0x00043484
   2d368:	0004339c 	.word	0x0004339c
   2d36c:	20015b70 	.word	0x20015b70
   2d370:	2001922c 	.word	0x2001922c
   2d374:	20019234 	.word	0x20019234
   2d378:	00048887 	.word	0x00048887
   2d37c:	00048663 	.word	0x00048663
   2d380:	2001923c 	.word	0x2001923c
   2d384:	00048686 	.word	0x00048686
   2d388:	000486ae 	.word	0x000486ae
   2d38c:	000486cb 	.word	0x000486cb
   2d390:	000486e6 	.word	0x000486e6
   2d394:	00048714 	.word	0x00048714
   2d398:	0004872e 	.word	0x0004872e
   2d39c:	00048756 	.word	0x00048756
   2d3a0:	00048770 	.word	0x00048770
   2d3a4:	20019230 	.word	0x20019230

0002d3a8 <nrf_cloud_send>:
{
   2d3a8:	b530      	push	{r4, r5, lr}
	switch (msg->topic_type) {
   2d3aa:	7a05      	ldrb	r5, [r0, #8]
{
   2d3ac:	4604      	mov	r4, r0
	switch (msg->topic_type) {
   2d3ae:	2d01      	cmp	r5, #1
{
   2d3b0:	b087      	sub	sp, #28
	switch (msg->topic_type) {
   2d3b2:	d00e      	beq.n	2d3d2 <nrf_cloud_send+0x2a>
   2d3b4:	2d02      	cmp	r5, #2
   2d3b6:	d02a      	beq.n	2d40e <nrf_cloud_send+0x66>
   2d3b8:	4b26      	ldr	r3, [pc, #152]	; (2d454 <nrf_cloud_send+0xac>)
   2d3ba:	4827      	ldr	r0, [pc, #156]	; (2d458 <nrf_cloud_send+0xb0>)
		LOG_ERR("Unknown topic type");
   2d3bc:	4927      	ldr	r1, [pc, #156]	; (2d45c <nrf_cloud_send+0xb4>)
   2d3be:	1ac0      	subs	r0, r0, r3
   2d3c0:	08c0      	lsrs	r0, r0, #3
   2d3c2:	0180      	lsls	r0, r0, #6
   2d3c4:	f040 0001 	orr.w	r0, r0, #1
   2d3c8:	f00f ff9a 	bl	3d300 <log_string_sync>
		return -ENODATA;
   2d3cc:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2d3d0:	e01a      	b.n	2d408 <nrf_cloud_send+0x60>
		const struct nct_cc_data shadow_data = {
   2d3d2:	2210      	movs	r2, #16
   2d3d4:	2100      	movs	r1, #0
   2d3d6:	a802      	add	r0, sp, #8
   2d3d8:	f014 fc81 	bl	41cde <memset>
   2d3dc:	6823      	ldr	r3, [r4, #0]
		err = nct_cc_send(&shadow_data);
   2d3de:	4668      	mov	r0, sp
		const struct nct_cc_data shadow_data = {
   2d3e0:	9300      	str	r3, [sp, #0]
   2d3e2:	6863      	ldr	r3, [r4, #4]
   2d3e4:	f88d 5014 	strb.w	r5, [sp, #20]
   2d3e8:	9301      	str	r3, [sp, #4]
		err = nct_cc_send(&shadow_data);
   2d3ea:	f001 f99b 	bl	2e724 <nct_cc_send>
		if (err) {
   2d3ee:	4604      	mov	r4, r0
   2d3f0:	b150      	cbz	r0, 2d408 <nrf_cloud_send+0x60>
   2d3f2:	4819      	ldr	r0, [pc, #100]	; (2d458 <nrf_cloud_send+0xb0>)
   2d3f4:	4b17      	ldr	r3, [pc, #92]	; (2d454 <nrf_cloud_send+0xac>)
			LOG_ERR("nct_cc_send failed, error: %d\n", err);
   2d3f6:	4622      	mov	r2, r4
   2d3f8:	1ac0      	subs	r0, r0, r3
   2d3fa:	08c0      	lsrs	r0, r0, #3
   2d3fc:	0180      	lsls	r0, r0, #6
   2d3fe:	4918      	ldr	r1, [pc, #96]	; (2d460 <nrf_cloud_send+0xb8>)
   2d400:	f040 0001 	orr.w	r0, r0, #1
   2d404:	f00f ff7c 	bl	3d300 <log_string_sync>
}
   2d408:	4620      	mov	r0, r4
   2d40a:	b007      	add	sp, #28
   2d40c:	bd30      	pop	{r4, r5, pc}
		const struct nct_dc_data buf = {
   2d40e:	2300      	movs	r3, #0
   2d410:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2d414:	9304      	str	r3, [sp, #16]
   2d416:	6803      	ldr	r3, [r0, #0]
   2d418:	9300      	str	r3, [sp, #0]
   2d41a:	6843      	ldr	r3, [r0, #4]
   2d41c:	9301      	str	r3, [sp, #4]
		if (msg->qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2d41e:	7a43      	ldrb	r3, [r0, #9]
   2d420:	b923      	cbnz	r3, 2d42c <nrf_cloud_send+0x84>
			err = nct_dc_stream(&buf);
   2d422:	4668      	mov	r0, sp
   2d424:	f012 fdae 	bl	3ff84 <nct_dc_stream>
	return 0;
   2d428:	2400      	movs	r4, #0
   2d42a:	e7ed      	b.n	2d408 <nrf_cloud_send+0x60>
		} else if (msg->qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2d42c:	2b01      	cmp	r3, #1
   2d42e:	d103      	bne.n	2d438 <nrf_cloud_send+0x90>
			err = nct_dc_send(&buf);
   2d430:	4668      	mov	r0, sp
   2d432:	f012 fda4 	bl	3ff7e <nct_dc_send>
   2d436:	e7f7      	b.n	2d428 <nrf_cloud_send+0x80>
   2d438:	4b06      	ldr	r3, [pc, #24]	; (2d454 <nrf_cloud_send+0xac>)
   2d43a:	4807      	ldr	r0, [pc, #28]	; (2d458 <nrf_cloud_send+0xb0>)
			LOG_ERR("Unsupported QoS setting.");
   2d43c:	4909      	ldr	r1, [pc, #36]	; (2d464 <nrf_cloud_send+0xbc>)
   2d43e:	1ac0      	subs	r0, r0, r3
   2d440:	08c0      	lsrs	r0, r0, #3
   2d442:	0180      	lsls	r0, r0, #6
   2d444:	f040 0001 	orr.w	r0, r0, #1
   2d448:	f00f ff5a 	bl	3d300 <log_string_sync>
			return err;
   2d44c:	f06f 0415 	mvn.w	r4, #21
   2d450:	e7da      	b.n	2d408 <nrf_cloud_send+0x60>
   2d452:	bf00      	nop
   2d454:	0004339c 	.word	0x0004339c
   2d458:	00043484 	.word	0x00043484
   2d45c:	000487d6 	.word	0x000487d6
   2d460:	0004879e 	.word	0x0004879e
   2d464:	000487bd 	.word	0x000487bd

0002d468 <api_send>:
	return nrf_cloud_disconnect();
}

static int api_send(const struct cloud_backend *const backend,
		const struct cloud_msg *const msg)
{
   2d468:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err = 0;

	if (msg->endpoint.len != 0) {
   2d46a:	694c      	ldr	r4, [r1, #20]
   2d46c:	2c00      	cmp	r4, #0
   2d46e:	d14b      	bne.n	2d508 <api_send+0xa0>
		/* Unsupported case where topic is not the default. */
		return -ENOTSUP;
	}

	switch (msg->endpoint.type) {
   2d470:	898b      	ldrh	r3, [r1, #12]
   2d472:	b16b      	cbz	r3, 2d490 <api_send+0x28>
   2d474:	2b01      	cmp	r3, #1
   2d476:	d03c      	beq.n	2d4f2 <api_send+0x8a>
   2d478:	4a25      	ldr	r2, [pc, #148]	; (2d510 <api_send+0xa8>)
   2d47a:	4826      	ldr	r0, [pc, #152]	; (2d514 <api_send+0xac>)
		}

		break;
	}
	default:
		LOG_DBG("Unknown cloud endpoint type: %d", msg->endpoint.type);
   2d47c:	4926      	ldr	r1, [pc, #152]	; (2d518 <api_send+0xb0>)
   2d47e:	1a80      	subs	r0, r0, r2
   2d480:	08c0      	lsrs	r0, r0, #3
   2d482:	0180      	lsls	r0, r0, #6
   2d484:	4a25      	ldr	r2, [pc, #148]	; (2d51c <api_send+0xb4>)
   2d486:	f040 0004 	orr.w	r0, r0, #4
   2d48a:	f00f ff39 	bl	3d300 <log_string_sync>
		break;
	}

	if (err) {
   2d48e:	e02d      	b.n	2d4ec <api_send+0x84>
		struct nrf_cloud_tx_data buf = {
   2d490:	f8ad 300d 	strh.w	r3, [sp, #13]
   2d494:	f88d 300f 	strb.w	r3, [sp, #15]
   2d498:	684b      	ldr	r3, [r1, #4]
   2d49a:	9301      	str	r3, [sp, #4]
   2d49c:	680b      	ldr	r3, [r1, #0]
   2d49e:	9302      	str	r3, [sp, #8]
   2d4a0:	2302      	movs	r3, #2
   2d4a2:	f88d 300c 	strb.w	r3, [sp, #12]
		if (msg->qos == CLOUD_QOS_AT_MOST_ONCE) {
   2d4a6:	7a0b      	ldrb	r3, [r1, #8]
   2d4a8:	b993      	cbnz	r3, 2d4d0 <api_send+0x68>
			buf.qos = MQTT_QOS_1_AT_LEAST_ONCE;
   2d4aa:	f88d 300d 	strb.w	r3, [sp, #13]
		err = nrf_cloud_send(&shadow_data);
   2d4ae:	a801      	add	r0, sp, #4
   2d4b0:	f7ff ff7a 	bl	2d3a8 <nrf_cloud_send>
		if (err) {
   2d4b4:	4604      	mov	r4, r0
   2d4b6:	b1c8      	cbz	r0, 2d4ec <api_send+0x84>
   2d4b8:	4b15      	ldr	r3, [pc, #84]	; (2d510 <api_send+0xa8>)
   2d4ba:	4816      	ldr	r0, [pc, #88]	; (2d514 <api_send+0xac>)
			LOG_ERR("nrf_cloud_send failed, error: %d", err);
   2d4bc:	4622      	mov	r2, r4
   2d4be:	1ac0      	subs	r0, r0, r3
   2d4c0:	08c0      	lsrs	r0, r0, #3
   2d4c2:	0180      	lsls	r0, r0, #6
   2d4c4:	4916      	ldr	r1, [pc, #88]	; (2d520 <api_send+0xb8>)
   2d4c6:	f040 0001 	orr.w	r0, r0, #1
   2d4ca:	f00f ff19 	bl	3d300 <log_string_sync>
			return err;
   2d4ce:	e00d      	b.n	2d4ec <api_send+0x84>
		} else if (msg->qos == CLOUD_QOS_AT_LEAST_ONCE) {
   2d4d0:	2b01      	cmp	r3, #1
   2d4d2:	d0ea      	beq.n	2d4aa <api_send+0x42>
   2d4d4:	4b0e      	ldr	r3, [pc, #56]	; (2d510 <api_send+0xa8>)
   2d4d6:	480f      	ldr	r0, [pc, #60]	; (2d514 <api_send+0xac>)
			LOG_ERR("Unsupported QoS setting.");
   2d4d8:	4912      	ldr	r1, [pc, #72]	; (2d524 <api_send+0xbc>)
   2d4da:	1ac0      	subs	r0, r0, r3
   2d4dc:	08c0      	lsrs	r0, r0, #3
   2d4de:	0180      	lsls	r0, r0, #6
   2d4e0:	f040 0001 	orr.w	r0, r0, #1
   2d4e4:	f00f ff0c 	bl	3d300 <log_string_sync>
			return err;
   2d4e8:	f06f 0415 	mvn.w	r4, #21
		return err;
	}

	return 0;
}
   2d4ec:	4620      	mov	r0, r4
   2d4ee:	b004      	add	sp, #16
   2d4f0:	bd10      	pop	{r4, pc}
		struct nrf_cloud_tx_data shadow_data = {
   2d4f2:	684a      	ldr	r2, [r1, #4]
   2d4f4:	f8ad 400d 	strh.w	r4, [sp, #13]
   2d4f8:	9201      	str	r2, [sp, #4]
   2d4fa:	680a      	ldr	r2, [r1, #0]
   2d4fc:	f88d 400f 	strb.w	r4, [sp, #15]
   2d500:	9202      	str	r2, [sp, #8]
   2d502:	f88d 300c 	strb.w	r3, [sp, #12]
   2d506:	e7d2      	b.n	2d4ae <api_send+0x46>
		return -ENOTSUP;
   2d508:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2d50c:	e7ee      	b.n	2d4ec <api_send+0x84>
   2d50e:	bf00      	nop
   2d510:	0004339c 	.word	0x0004339c
   2d514:	00043484 	.word	0x00043484
   2d518:	0004880a 	.word	0x0004880a
   2d51c:	000488a7 	.word	0x000488a7
   2d520:	000487e9 	.word	0x000487e9
   2d524:	000487bd 	.word	0x000487bd

0002d528 <nct_input>:
	return nfsm_handle_incoming_event(evt, current_state);
   2d528:	4b01      	ldr	r3, [pc, #4]	; (2d530 <nct_input+0x8>)
   2d52a:	7819      	ldrb	r1, [r3, #0]
   2d52c:	f000 bbc6 	b.w	2dcbc <nfsm_handle_incoming_event>
   2d530:	20020734 	.word	0x20020734

0002d534 <nct_apply_update>:
	app_event_handler(&evt);
   2d534:	4b01      	ldr	r3, [pc, #4]	; (2d53c <nct_apply_update+0x8>)
   2d536:	4802      	ldr	r0, [pc, #8]	; (2d540 <nct_apply_update+0xc>)
   2d538:	681b      	ldr	r3, [r3, #0]
   2d53a:	4718      	bx	r3
   2d53c:	2001922c 	.word	0x2001922c
   2d540:	00043c54 	.word	0x00043c54

0002d544 <nrf_cloud_decode_desired_obj>:
{
   2d544:	b538      	push	{r3, r4, r5, lr}
   2d546:	460c      	mov	r4, r1
	if ((root_obj != NULL) && (desired_obj != NULL)) {
   2d548:	4605      	mov	r5, r0
   2d54a:	b140      	cbz	r0, 2d55e <nrf_cloud_decode_desired_obj+0x1a>
		state_obj = json_object_decode(root_obj, "state");
   2d54c:	4904      	ldr	r1, [pc, #16]	; (2d560 <nrf_cloud_decode_desired_obj+0x1c>)
   2d54e:	f012 fc85 	bl	3fe5c <json_object_decode>
		if (state_obj == NULL) {
   2d552:	b918      	cbnz	r0, 2d55c <nrf_cloud_decode_desired_obj+0x18>
			*desired_obj = json_object_decode(root_obj, "desired");
   2d554:	4628      	mov	r0, r5
   2d556:	4903      	ldr	r1, [pc, #12]	; (2d564 <nrf_cloud_decode_desired_obj+0x20>)
   2d558:	f012 fc80 	bl	3fe5c <json_object_decode>
			*desired_obj = state_obj;
   2d55c:	6020      	str	r0, [r4, #0]
}
   2d55e:	bd38      	pop	{r3, r4, r5, pc}
   2d560:	0004b32e 	.word	0x0004b32e
   2d564:	000488b0 	.word	0x000488b0

0002d568 <nrf_cloud_decode_requested_state>:
{
   2d568:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d56a:	4606      	mov	r6, r0
	__ASSERT_NO_MSG(requested_state != NULL);
   2d56c:	460f      	mov	r7, r1
   2d56e:	b949      	cbnz	r1, 2d584 <nrf_cloud_decode_requested_state+0x1c>
   2d570:	494e      	ldr	r1, [pc, #312]	; (2d6ac <nrf_cloud_decode_requested_state+0x144>)
   2d572:	484f      	ldr	r0, [pc, #316]	; (2d6b0 <nrf_cloud_decode_requested_state+0x148>)
   2d574:	23cb      	movs	r3, #203	; 0xcb
   2d576:	4a4f      	ldr	r2, [pc, #316]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d578:	f00f fbfd 	bl	3cd76 <printk>
   2d57c:	21cb      	movs	r1, #203	; 0xcb
   2d57e:	484d      	ldr	r0, [pc, #308]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d580:	f00f fead 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2d584:	b94e      	cbnz	r6, 2d59a <nrf_cloud_decode_requested_state+0x32>
   2d586:	494c      	ldr	r1, [pc, #304]	; (2d6b8 <nrf_cloud_decode_requested_state+0x150>)
   2d588:	4849      	ldr	r0, [pc, #292]	; (2d6b0 <nrf_cloud_decode_requested_state+0x148>)
   2d58a:	23cc      	movs	r3, #204	; 0xcc
   2d58c:	4a49      	ldr	r2, [pc, #292]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d58e:	f00f fbf2 	bl	3cd76 <printk>
   2d592:	21cc      	movs	r1, #204	; 0xcc
   2d594:	4847      	ldr	r0, [pc, #284]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d596:	f00f fea2 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2d59a:	6873      	ldr	r3, [r6, #4]
   2d59c:	b94b      	cbnz	r3, 2d5b2 <nrf_cloud_decode_requested_state+0x4a>
   2d59e:	4947      	ldr	r1, [pc, #284]	; (2d6bc <nrf_cloud_decode_requested_state+0x154>)
   2d5a0:	4843      	ldr	r0, [pc, #268]	; (2d6b0 <nrf_cloud_decode_requested_state+0x148>)
   2d5a2:	23cd      	movs	r3, #205	; 0xcd
   2d5a4:	4a43      	ldr	r2, [pc, #268]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d5a6:	f00f fbe6 	bl	3cd76 <printk>
   2d5aa:	21cd      	movs	r1, #205	; 0xcd
   2d5ac:	4841      	ldr	r0, [pc, #260]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d5ae:	f00f fe96 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2d5b2:	6833      	ldr	r3, [r6, #0]
   2d5b4:	b94b      	cbnz	r3, 2d5ca <nrf_cloud_decode_requested_state+0x62>
   2d5b6:	4942      	ldr	r1, [pc, #264]	; (2d6c0 <nrf_cloud_decode_requested_state+0x158>)
   2d5b8:	483d      	ldr	r0, [pc, #244]	; (2d6b0 <nrf_cloud_decode_requested_state+0x148>)
   2d5ba:	23ce      	movs	r3, #206	; 0xce
   2d5bc:	4a3d      	ldr	r2, [pc, #244]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d5be:	f00f fbda 	bl	3cd76 <printk>
   2d5c2:	21ce      	movs	r1, #206	; 0xce
   2d5c4:	483b      	ldr	r0, [pc, #236]	; (2d6b4 <nrf_cloud_decode_requested_state+0x14c>)
   2d5c6:	f00f fe8a 	bl	3d2de <assert_post_action>
	root_obj = cJSON_Parse(input->ptr);
   2d5ca:	6870      	ldr	r0, [r6, #4]
   2d5cc:	f011 fee8 	bl	3f3a0 <cJSON_Parse>
	if (root_obj == NULL) {
   2d5d0:	4605      	mov	r5, r0
   2d5d2:	b988      	cbnz	r0, 2d5f8 <nrf_cloud_decode_requested_state+0x90>
   2d5d4:	4b3b      	ldr	r3, [pc, #236]	; (2d6c4 <nrf_cloud_decode_requested_state+0x15c>)
   2d5d6:	4c3c      	ldr	r4, [pc, #240]	; (2d6c8 <nrf_cloud_decode_requested_state+0x160>)
		LOG_ERR("cJSON_Parse failed: %s",
   2d5d8:	6870      	ldr	r0, [r6, #4]
   2d5da:	1ae4      	subs	r4, r4, r3
   2d5dc:	f00f fea3 	bl	3d326 <log_strdup>
   2d5e0:	08e4      	lsrs	r4, r4, #3
   2d5e2:	01a4      	lsls	r4, r4, #6
   2d5e4:	f044 0401 	orr.w	r4, r4, #1
   2d5e8:	4602      	mov	r2, r0
   2d5ea:	4938      	ldr	r1, [pc, #224]	; (2d6cc <nrf_cloud_decode_requested_state+0x164>)
   2d5ec:	4620      	mov	r0, r4
   2d5ee:	f00f fe87 	bl	3d300 <log_string_sync>
		return -ENOENT;
   2d5f2:	f06f 0401 	mvn.w	r4, #1
   2d5f6:	e00d      	b.n	2d614 <nrf_cloud_decode_requested_state+0xac>
	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2d5f8:	a901      	add	r1, sp, #4
   2d5fa:	f7ff ffa3 	bl	2d544 <nrf_cloud_decode_desired_obj>
		json_object_decode(desired_obj, "nrfcloud_mqtt_topic_prefix");
   2d5fe:	4934      	ldr	r1, [pc, #208]	; (2d6d0 <nrf_cloud_decode_requested_state+0x168>)
   2d600:	9801      	ldr	r0, [sp, #4]
   2d602:	f012 fc2b 	bl	3fe5c <json_object_decode>
	if (topic_prefix_obj != NULL) {
   2d606:	b140      	cbz	r0, 2d61a <nrf_cloud_decode_requested_state+0xb2>
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2d608:	2307      	movs	r3, #7
		cJSON_Delete(root_obj);
   2d60a:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_COMPLETE;
   2d60c:	703b      	strb	r3, [r7, #0]
		cJSON_Delete(root_obj);
   2d60e:	f7fb fbd9 	bl	28dc4 <cJSON_Delete>
		return 0;
   2d612:	2400      	movs	r4, #0
}
   2d614:	4620      	mov	r0, r4
   2d616:	b003      	add	sp, #12
   2d618:	bdf0      	pop	{r4, r5, r6, r7, pc}
	pairing_obj = json_object_decode(desired_obj, "pairing");
   2d61a:	492e      	ldr	r1, [pc, #184]	; (2d6d4 <nrf_cloud_decode_requested_state+0x16c>)
   2d61c:	9801      	ldr	r0, [sp, #4]
   2d61e:	f012 fc1d 	bl	3fe5c <json_object_decode>
	pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d622:	492d      	ldr	r1, [pc, #180]	; (2d6d8 <nrf_cloud_decode_requested_state+0x170>)
   2d624:	f012 fc1a 	bl	3fe5c <json_object_decode>
	if (!pairing_state_obj || pairing_state_obj->type != cJSON_String) {
   2d628:	b110      	cbz	r0, 2d630 <nrf_cloud_decode_requested_state+0xc8>
   2d62a:	68c3      	ldr	r3, [r0, #12]
   2d62c:	2b10      	cmp	r3, #16
   2d62e:	d01c      	beq.n	2d66a <nrf_cloud_decode_requested_state+0x102>
		if (cJSON_HasObjectItem(desired_obj, "config") == false) {
   2d630:	492a      	ldr	r1, [pc, #168]	; (2d6dc <nrf_cloud_decode_requested_state+0x174>)
   2d632:	9801      	ldr	r0, [sp, #4]
   2d634:	f011 fecc 	bl	3f3d0 <cJSON_HasObjectItem>
   2d638:	b998      	cbnz	r0, 2d662 <nrf_cloud_decode_requested_state+0xfa>
   2d63a:	4b22      	ldr	r3, [pc, #136]	; (2d6c4 <nrf_cloud_decode_requested_state+0x15c>)
   2d63c:	4c22      	ldr	r4, [pc, #136]	; (2d6c8 <nrf_cloud_decode_requested_state+0x160>)
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2d63e:	4928      	ldr	r1, [pc, #160]	; (2d6e0 <nrf_cloud_decode_requested_state+0x178>)
   2d640:	1ae4      	subs	r4, r4, r3
   2d642:	08e4      	lsrs	r4, r4, #3
   2d644:	01a4      	lsls	r4, r4, #6
   2d646:	f044 0002 	orr.w	r0, r4, #2
			LOG_INF("Ensure device firmware is up to date.");
   2d64a:	f044 0403 	orr.w	r4, r4, #3
			LOG_WRN("Unhandled data received from nRF Cloud.");
   2d64e:	f00f fe57 	bl	3d300 <log_string_sync>
			LOG_INF("Ensure device firmware is up to date.");
   2d652:	4620      	mov	r0, r4
   2d654:	4923      	ldr	r1, [pc, #140]	; (2d6e4 <nrf_cloud_decode_requested_state+0x17c>)
   2d656:	f00f fe53 	bl	3d300 <log_string_sync>
			LOG_INF("Delete and re-add device to nRF Cloud if problem persists.");
   2d65a:	4620      	mov	r0, r4
   2d65c:	4922      	ldr	r1, [pc, #136]	; (2d6e8 <nrf_cloud_decode_requested_state+0x180>)
   2d65e:	f00f fe4f 	bl	3d300 <log_string_sync>
		cJSON_Delete(root_obj);
   2d662:	4628      	mov	r0, r5
   2d664:	f7fb fbae 	bl	28dc4 <cJSON_Delete>
   2d668:	e7c3      	b.n	2d5f2 <nrf_cloud_decode_requested_state+0x8a>
	const char *state_str = pairing_state_obj->valuestring;
   2d66a:	6904      	ldr	r4, [r0, #16]
	return !strncmp(s1, s2, strlen(s2));
   2d66c:	481f      	ldr	r0, [pc, #124]	; (2d6ec <nrf_cloud_decode_requested_state+0x184>)
   2d66e:	f7ef fdf5 	bl	1d25c <strlen>
   2d672:	491e      	ldr	r1, [pc, #120]	; (2d6ec <nrf_cloud_decode_requested_state+0x184>)
   2d674:	4602      	mov	r2, r0
   2d676:	4620      	mov	r0, r4
   2d678:	f014 fd1a 	bl	420b0 <strncmp>
	if (compare(state_str, DUA_PIN_STR)) {
   2d67c:	4604      	mov	r4, r0
   2d67e:	b928      	cbnz	r0, 2d68c <nrf_cloud_decode_requested_state+0x124>
		(*requested_state) = STATE_UA_PIN_WAIT;
   2d680:	2306      	movs	r3, #6
	cJSON_Delete(root_obj);
   2d682:	4628      	mov	r0, r5
		(*requested_state) = STATE_UA_PIN_WAIT;
   2d684:	703b      	strb	r3, [r7, #0]
	cJSON_Delete(root_obj);
   2d686:	f7fb fb9d 	bl	28dc4 <cJSON_Delete>
	return 0;
   2d68a:	e7c3      	b.n	2d614 <nrf_cloud_decode_requested_state+0xac>
   2d68c:	4b0d      	ldr	r3, [pc, #52]	; (2d6c4 <nrf_cloud_decode_requested_state+0x15c>)
   2d68e:	480e      	ldr	r0, [pc, #56]	; (2d6c8 <nrf_cloud_decode_requested_state+0x160>)
		LOG_ERR("Deprecated state. Delete device from nRF Cloud and update device with JITP certificates.");
   2d690:	4917      	ldr	r1, [pc, #92]	; (2d6f0 <nrf_cloud_decode_requested_state+0x188>)
   2d692:	1ac0      	subs	r0, r0, r3
   2d694:	08c0      	lsrs	r0, r0, #3
   2d696:	0180      	lsls	r0, r0, #6
   2d698:	f040 0001 	orr.w	r0, r0, #1
   2d69c:	f00f fe30 	bl	3d300 <log_string_sync>
		cJSON_Delete(root_obj);
   2d6a0:	4628      	mov	r0, r5
   2d6a2:	f7fb fb8f 	bl	28dc4 <cJSON_Delete>
		return -ENOTSUP;
   2d6a6:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2d6aa:	e7b3      	b.n	2d614 <nrf_cloud_decode_requested_state+0xac>
   2d6ac:	00048943 	.word	0x00048943
   2d6b0:	00044dbf 	.word	0x00044dbf
   2d6b4:	000488b8 	.word	0x000488b8
   2d6b8:	00048962 	.word	0x00048962
   2d6bc:	00048977 	.word	0x00048977
   2d6c0:	00048991 	.word	0x00048991
   2d6c4:	0004339c 	.word	0x0004339c
   2d6c8:	00043494 	.word	0x00043494
   2d6cc:	000489a1 	.word	0x000489a1
   2d6d0:	000489b8 	.word	0x000489b8
   2d6d4:	000489d3 	.word	0x000489d3
   2d6d8:	0004b32e 	.word	0x0004b32e
   2d6dc:	0004b725 	.word	0x0004b725
   2d6e0:	000489db 	.word	0x000489db
   2d6e4:	00048a03 	.word	0x00048a03
   2d6e8:	00048a29 	.word	0x00048a29
   2d6ec:	00048a64 	.word	0x00048a64
   2d6f0:	00048a73 	.word	0x00048a73

0002d6f4 <nrf_cloud_encode_config_response>:
{
   2d6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d6f8:	4604      	mov	r4, r0
   2d6fa:	4690      	mov	r8, r2
	__ASSERT_NO_MSG(output != NULL);
   2d6fc:	460d      	mov	r5, r1
   2d6fe:	b959      	cbnz	r1, 2d718 <nrf_cloud_encode_config_response+0x24>
   2d700:	494e      	ldr	r1, [pc, #312]	; (2d83c <nrf_cloud_encode_config_response+0x148>)
   2d702:	484f      	ldr	r0, [pc, #316]	; (2d840 <nrf_cloud_encode_config_response+0x14c>)
   2d704:	f240 1307 	movw	r3, #263	; 0x107
   2d708:	4a4e      	ldr	r2, [pc, #312]	; (2d844 <nrf_cloud_encode_config_response+0x150>)
   2d70a:	f00f fb34 	bl	3cd76 <printk>
   2d70e:	f240 1107 	movw	r1, #263	; 0x107
   2d712:	484c      	ldr	r0, [pc, #304]	; (2d844 <nrf_cloud_encode_config_response+0x150>)
   2d714:	f00f fde3 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(input != NULL);
   2d718:	2c00      	cmp	r4, #0
   2d71a:	d164      	bne.n	2d7e6 <nrf_cloud_encode_config_response+0xf2>
   2d71c:	494a      	ldr	r1, [pc, #296]	; (2d848 <nrf_cloud_encode_config_response+0x154>)
   2d71e:	4848      	ldr	r0, [pc, #288]	; (2d840 <nrf_cloud_encode_config_response+0x14c>)
   2d720:	f44f 7384 	mov.w	r3, #264	; 0x108
   2d724:	4a47      	ldr	r2, [pc, #284]	; (2d844 <nrf_cloud_encode_config_response+0x150>)
   2d726:	f00f fb26 	bl	3cd76 <printk>
   2d72a:	f44f 7184 	mov.w	r1, #264	; 0x108
   2d72e:	4845      	ldr	r0, [pc, #276]	; (2d844 <nrf_cloud_encode_config_response+0x150>)
   2d730:	f00f fdd5 	bl	3d2de <assert_post_action>
		return -ESRCH; /* invalid input or no JSON parsed */
   2d734:	f06f 0002 	mvn.w	r0, #2
   2d738:	e07d      	b.n	2d836 <nrf_cloud_encode_config_response+0x142>
	root_obj = cJSON_CreateObject();
   2d73a:	f7fb fc17 	bl	28f6c <cJSON_CreateObject>
   2d73e:	4606      	mov	r6, r0
	desired_obj = cJSON_CreateObject();
   2d740:	f7fb fc14 	bl	28f6c <cJSON_CreateObject>
   2d744:	4680      	mov	r8, r0
	null_obj = cJSON_CreateNull();
   2d746:	f7fb fbd1 	bl	28eec <cJSON_CreateNull>
   2d74a:	4681      	mov	r9, r0
	reported_obj = cJSON_CreateObject();
   2d74c:	f7fb fc0e 	bl	28f6c <cJSON_CreateObject>
   2d750:	4682      	mov	sl, r0
	if ((root_obj == NULL) || (desired_obj == NULL) || (null_obj == NULL) ||
   2d752:	b136      	cbz	r6, 2d762 <nrf_cloud_encode_config_response+0x6e>
   2d754:	f1b8 0f00 	cmp.w	r8, #0
   2d758:	d003      	beq.n	2d762 <nrf_cloud_encode_config_response+0x6e>
   2d75a:	f1b9 0f00 	cmp.w	r9, #0
   2d75e:	d000      	beq.n	2d762 <nrf_cloud_encode_config_response+0x6e>
   2d760:	b9a0      	cbnz	r0, 2d78c <nrf_cloud_encode_config_response+0x98>
		cJSON_Delete(root_obj);
   2d762:	4630      	mov	r0, r6
   2d764:	f7fb fb2e 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(desired_obj);
   2d768:	4640      	mov	r0, r8
   2d76a:	f7fb fb2b 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(null_obj);
   2d76e:	4648      	mov	r0, r9
   2d770:	f7fb fb28 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(reported_obj);
   2d774:	4650      	mov	r0, sl
   2d776:	f7fb fb25 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2d77a:	4638      	mov	r0, r7
   2d77c:	f7fb fb22 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(state_obj);
   2d780:	4620      	mov	r0, r4
   2d782:	f7fb fb1f 	bl	28dc4 <cJSON_Delete>
		return -ENOMEM;
   2d786:	f06f 000b 	mvn.w	r0, #11
   2d78a:	e054      	b.n	2d836 <nrf_cloud_encode_config_response+0x142>
	cJSON_AddItemToObject(parent, str, item);
   2d78c:	463a      	mov	r2, r7
   2d78e:	492f      	ldr	r1, [pc, #188]	; (2d84c <nrf_cloud_encode_config_response+0x158>)
   2d790:	f011 fe27 	bl	3f3e2 <cJSON_AddItemToObject>
   2d794:	4652      	mov	r2, sl
   2d796:	4630      	mov	r0, r6
   2d798:	492d      	ldr	r1, [pc, #180]	; (2d850 <nrf_cloud_encode_config_response+0x15c>)
   2d79a:	f011 fe22 	bl	3f3e2 <cJSON_AddItemToObject>
   2d79e:	464a      	mov	r2, r9
   2d7a0:	4640      	mov	r0, r8
   2d7a2:	492a      	ldr	r1, [pc, #168]	; (2d84c <nrf_cloud_encode_config_response+0x158>)
   2d7a4:	f011 fe1d 	bl	3f3e2 <cJSON_AddItemToObject>
   2d7a8:	4642      	mov	r2, r8
   2d7aa:	492a      	ldr	r1, [pc, #168]	; (2d854 <nrf_cloud_encode_config_response+0x160>)
   2d7ac:	4630      	mov	r0, r6
   2d7ae:	f011 fe18 	bl	3f3e2 <cJSON_AddItemToObject>
	cJSON_Delete(state_obj);
   2d7b2:	4620      	mov	r0, r4
   2d7b4:	f7fb fb06 	bl	28dc4 <cJSON_Delete>
	state_obj = cJSON_CreateObject();
   2d7b8:	f7fb fbd8 	bl	28f6c <cJSON_CreateObject>
   2d7bc:	4607      	mov	r7, r0
	cJSON_AddItemToObject(parent, str, item);
   2d7be:	4632      	mov	r2, r6
   2d7c0:	4925      	ldr	r1, [pc, #148]	; (2d858 <nrf_cloud_encode_config_response+0x164>)
   2d7c2:	f011 fe0e 	bl	3f3e2 <cJSON_AddItemToObject>
	buffer = cJSON_PrintUnformatted(state_obj);
   2d7c6:	4638      	mov	r0, r7
   2d7c8:	f011 fdee 	bl	3f3a8 <cJSON_PrintUnformatted>
   2d7cc:	4604      	mov	r4, r0
	cJSON_Delete(state_obj);
   2d7ce:	4638      	mov	r0, r7
   2d7d0:	f7fb faf8 	bl	28dc4 <cJSON_Delete>
	if (buffer == NULL) {
   2d7d4:	2c00      	cmp	r4, #0
   2d7d6:	d0d6      	beq.n	2d786 <nrf_cloud_encode_config_response+0x92>
	output->len = strlen(buffer);
   2d7d8:	4620      	mov	r0, r4
	output->ptr = buffer;
   2d7da:	606c      	str	r4, [r5, #4]
	output->len = strlen(buffer);
   2d7dc:	f7ef fd3e 	bl	1d25c <strlen>
   2d7e0:	6028      	str	r0, [r5, #0]
	return 0;
   2d7e2:	2000      	movs	r0, #0
   2d7e4:	e027      	b.n	2d836 <nrf_cloud_encode_config_response+0x142>
	cJSON *input_obj = input ? cJSON_Parse(input->ptr) : NULL;
   2d7e6:	6860      	ldr	r0, [r4, #4]
   2d7e8:	f011 fdda 	bl	3f3a0 <cJSON_Parse>
	if (input_obj == NULL) {
   2d7ec:	4606      	mov	r6, r0
   2d7ee:	2800      	cmp	r0, #0
   2d7f0:	d0a0      	beq.n	2d734 <nrf_cloud_encode_config_response+0x40>
	state_obj = cJSON_DetachItemFromObject(input_obj, "state");
   2d7f2:	4919      	ldr	r1, [pc, #100]	; (2d858 <nrf_cloud_encode_config_response+0x164>)
   2d7f4:	f011 fe0c 	bl	3f410 <cJSON_DetachItemFromObject>
	config_obj = cJSON_DetachItemFromObject(
   2d7f8:	1e04      	subs	r4, r0, #0
   2d7fa:	bf14      	ite	ne
   2d7fc:	4620      	movne	r0, r4
   2d7fe:	4630      	moveq	r0, r6
   2d800:	4912      	ldr	r1, [pc, #72]	; (2d84c <nrf_cloud_encode_config_response+0x158>)
   2d802:	f011 fe05 	bl	3f410 <cJSON_DetachItemFromObject>
   2d806:	4607      	mov	r7, r0
	cJSON_Delete(input_obj);
   2d808:	4630      	mov	r0, r6
   2d80a:	f7fb fadb 	bl	28dc4 <cJSON_Delete>
	if (has_config) {
   2d80e:	f1b8 0f00 	cmp.w	r8, #0
   2d812:	d004      	beq.n	2d81e <nrf_cloud_encode_config_response+0x12a>
		*has_config = (config_obj != NULL);
   2d814:	1e3b      	subs	r3, r7, #0
   2d816:	bf18      	it	ne
   2d818:	2301      	movne	r3, #1
   2d81a:	f888 3000 	strb.w	r3, [r8]
	if ((state_obj == NULL) || (config_obj == NULL)) {
   2d81e:	b10c      	cbz	r4, 2d824 <nrf_cloud_encode_config_response+0x130>
   2d820:	2f00      	cmp	r7, #0
   2d822:	d18a      	bne.n	2d73a <nrf_cloud_encode_config_response+0x46>
		cJSON_Delete(state_obj);
   2d824:	4620      	mov	r0, r4
   2d826:	f7fb facd 	bl	28dc4 <cJSON_Delete>
		cJSON_Delete(config_obj);
   2d82a:	4638      	mov	r0, r7
   2d82c:	f7fb faca 	bl	28dc4 <cJSON_Delete>
		output->ptr = NULL;
   2d830:	2000      	movs	r0, #0
		output->len = 0;
   2d832:	e9c5 0000 	strd	r0, r0, [r5]
}
   2d836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2d83a:	bf00      	nop
   2d83c:	000450d5 	.word	0x000450d5
   2d840:	00044dbf 	.word	0x00044dbf
   2d844:	000488b8 	.word	0x000488b8
   2d848:	00048962 	.word	0x00048962
   2d84c:	0004b725 	.word	0x0004b725
   2d850:	00045164 	.word	0x00045164
   2d854:	000488b0 	.word	0x000488b0
   2d858:	0004b32e 	.word	0x0004b32e

0002d85c <nrf_cloud_decode_data_endpoint>:
 */
int nrf_cloud_decode_data_endpoint(const struct nrf_cloud_data *input,
				   struct nrf_cloud_data *tx_endpoint,
				   struct nrf_cloud_data *rx_endpoint,
				   struct nrf_cloud_data *m_endpoint)
{
   2d85c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2d860:	4688      	mov	r8, r1
   2d862:	4617      	mov	r7, r2
   2d864:	4699      	mov	r9, r3
	__ASSERT_NO_MSG(input != NULL);
   2d866:	4604      	mov	r4, r0
   2d868:	b958      	cbnz	r0, 2d882 <nrf_cloud_decode_data_endpoint+0x26>
   2d86a:	4950      	ldr	r1, [pc, #320]	; (2d9ac <nrf_cloud_decode_data_endpoint+0x150>)
   2d86c:	4850      	ldr	r0, [pc, #320]	; (2d9b0 <nrf_cloud_decode_data_endpoint+0x154>)
   2d86e:	f240 13d9 	movw	r3, #473	; 0x1d9
   2d872:	4a50      	ldr	r2, [pc, #320]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d874:	f00f fa7f 	bl	3cd76 <printk>
   2d878:	f240 11d9 	movw	r1, #473	; 0x1d9
   2d87c:	484d      	ldr	r0, [pc, #308]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d87e:	f00f fd2e 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(input->ptr != NULL);
   2d882:	6863      	ldr	r3, [r4, #4]
   2d884:	b95b      	cbnz	r3, 2d89e <nrf_cloud_decode_data_endpoint+0x42>
   2d886:	494c      	ldr	r1, [pc, #304]	; (2d9b8 <nrf_cloud_decode_data_endpoint+0x15c>)
   2d888:	4849      	ldr	r0, [pc, #292]	; (2d9b0 <nrf_cloud_decode_data_endpoint+0x154>)
   2d88a:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   2d88e:	4a49      	ldr	r2, [pc, #292]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d890:	f00f fa71 	bl	3cd76 <printk>
   2d894:	f44f 71ed 	mov.w	r1, #474	; 0x1da
   2d898:	4846      	ldr	r0, [pc, #280]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d89a:	f00f fd20 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(input->len != 0);
   2d89e:	6823      	ldr	r3, [r4, #0]
   2d8a0:	b95b      	cbnz	r3, 2d8ba <nrf_cloud_decode_data_endpoint+0x5e>
   2d8a2:	4946      	ldr	r1, [pc, #280]	; (2d9bc <nrf_cloud_decode_data_endpoint+0x160>)
   2d8a4:	4842      	ldr	r0, [pc, #264]	; (2d9b0 <nrf_cloud_decode_data_endpoint+0x154>)
   2d8a6:	f240 13db 	movw	r3, #475	; 0x1db
   2d8aa:	4a42      	ldr	r2, [pc, #264]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d8ac:	f00f fa63 	bl	3cd76 <printk>
   2d8b0:	f240 11db 	movw	r1, #475	; 0x1db
   2d8b4:	483f      	ldr	r0, [pc, #252]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d8b6:	f00f fd12 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(tx_endpoint != NULL);
   2d8ba:	f1b8 0f00 	cmp.w	r8, #0
   2d8be:	d10b      	bne.n	2d8d8 <nrf_cloud_decode_data_endpoint+0x7c>
   2d8c0:	493f      	ldr	r1, [pc, #252]	; (2d9c0 <nrf_cloud_decode_data_endpoint+0x164>)
   2d8c2:	483b      	ldr	r0, [pc, #236]	; (2d9b0 <nrf_cloud_decode_data_endpoint+0x154>)
   2d8c4:	f44f 73ee 	mov.w	r3, #476	; 0x1dc
   2d8c8:	4a3a      	ldr	r2, [pc, #232]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d8ca:	f00f fa54 	bl	3cd76 <printk>
   2d8ce:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
   2d8d2:	4838      	ldr	r0, [pc, #224]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d8d4:	f00f fd03 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(rx_endpoint != NULL);
   2d8d8:	b95f      	cbnz	r7, 2d8f2 <nrf_cloud_decode_data_endpoint+0x96>
   2d8da:	493a      	ldr	r1, [pc, #232]	; (2d9c4 <nrf_cloud_decode_data_endpoint+0x168>)
   2d8dc:	4834      	ldr	r0, [pc, #208]	; (2d9b0 <nrf_cloud_decode_data_endpoint+0x154>)
   2d8de:	f240 13dd 	movw	r3, #477	; 0x1dd
   2d8e2:	4a34      	ldr	r2, [pc, #208]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d8e4:	f00f fa47 	bl	3cd76 <printk>
   2d8e8:	f240 11dd 	movw	r1, #477	; 0x1dd
   2d8ec:	4831      	ldr	r0, [pc, #196]	; (2d9b4 <nrf_cloud_decode_data_endpoint+0x158>)
   2d8ee:	f00f fcf6 	bl	3d2de <assert_post_action>

	int err;
	cJSON *root_obj;
	cJSON *m_endpoint_obj = NULL;
	cJSON *desired_obj = NULL;
   2d8f2:	2300      	movs	r3, #0

	root_obj = cJSON_Parse(input->ptr);
   2d8f4:	6860      	ldr	r0, [r4, #4]
	cJSON *desired_obj = NULL;
   2d8f6:	9301      	str	r3, [sp, #4]
	root_obj = cJSON_Parse(input->ptr);
   2d8f8:	f011 fd52 	bl	3f3a0 <cJSON_Parse>
	if (root_obj == NULL) {
   2d8fc:	4605      	mov	r5, r0
   2d8fe:	b318      	cbz	r0, 2d948 <nrf_cloud_decode_data_endpoint+0xec>
		return -ENOENT;
	}

	nrf_cloud_decode_desired_obj(root_obj, &desired_obj);
   2d900:	a901      	add	r1, sp, #4
   2d902:	f7ff fe1f 	bl	2d544 <nrf_cloud_decode_desired_obj>

	if (m_endpoint != NULL) {
   2d906:	f1b9 0f00 	cmp.w	r9, #0
   2d90a:	d020      	beq.n	2d94e <nrf_cloud_decode_data_endpoint+0xf2>
		m_endpoint_obj = json_object_decode(
   2d90c:	492e      	ldr	r1, [pc, #184]	; (2d9c8 <nrf_cloud_decode_data_endpoint+0x16c>)
   2d90e:	9801      	ldr	r0, [sp, #4]
   2d910:	f012 faa4 	bl	3fe5c <json_object_decode>
   2d914:	4604      	mov	r4, r0
			desired_obj, "nrfcloud_mqtt_topic_prefix");
	}

	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2d916:	492d      	ldr	r1, [pc, #180]	; (2d9cc <nrf_cloud_decode_data_endpoint+0x170>)
   2d918:	9801      	ldr	r0, [sp, #4]
   2d91a:	f012 fa9f 	bl	3fe5c <json_object_decode>
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d91e:	492c      	ldr	r1, [pc, #176]	; (2d9d0 <nrf_cloud_decode_data_endpoint+0x174>)
	cJSON *pairing_obj = json_object_decode(desired_obj, "pairing");
   2d920:	4606      	mov	r6, r0
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d922:	f012 fa9b 	bl	3fe5c <json_object_decode>
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2d926:	492b      	ldr	r1, [pc, #172]	; (2d9d4 <nrf_cloud_decode_data_endpoint+0x178>)
	cJSON *pairing_state_obj = json_object_decode(pairing_obj, "state");
   2d928:	4682      	mov	sl, r0
	cJSON *topic_obj = json_object_decode(pairing_obj, "topics");
   2d92a:	4630      	mov	r0, r6
   2d92c:	f012 fa96 	bl	3fe5c <json_object_decode>
   2d930:	4606      	mov	r6, r0

	if ((pairing_state_obj == NULL) || (topic_obj == NULL) ||
   2d932:	f1ba 0f00 	cmp.w	sl, #0
   2d936:	d004      	beq.n	2d942 <nrf_cloud_decode_data_endpoint+0xe6>
   2d938:	b118      	cbz	r0, 2d942 <nrf_cloud_decode_data_endpoint+0xe6>
   2d93a:	f8da 300c 	ldr.w	r3, [sl, #12]
   2d93e:	2b10      	cmp	r3, #16
   2d940:	d007      	beq.n	2d952 <nrf_cloud_decode_data_endpoint+0xf6>
	}

	const char *state_str = pairing_state_obj->valuestring;

	if (!compare(state_str, PAIRED_STR)) {
		cJSON_Delete(root_obj);
   2d942:	4628      	mov	r0, r5
   2d944:	f7fb fa3e 	bl	28dc4 <cJSON_Delete>
		return -ENOENT;
   2d948:	f06f 0401 	mvn.w	r4, #1
   2d94c:	e017      	b.n	2d97e <nrf_cloud_decode_data_endpoint+0x122>
	cJSON *m_endpoint_obj = NULL;
   2d94e:	464c      	mov	r4, r9
   2d950:	e7e1      	b.n	2d916 <nrf_cloud_decode_data_endpoint+0xba>
	return !strncmp(s1, s2, strlen(s2));
   2d952:	4821      	ldr	r0, [pc, #132]	; (2d9d8 <nrf_cloud_decode_data_endpoint+0x17c>)
	const char *state_str = pairing_state_obj->valuestring;
   2d954:	f8da a010 	ldr.w	sl, [sl, #16]
	return !strncmp(s1, s2, strlen(s2));
   2d958:	f7ef fc80 	bl	1d25c <strlen>
   2d95c:	491e      	ldr	r1, [pc, #120]	; (2d9d8 <nrf_cloud_decode_data_endpoint+0x17c>)
   2d95e:	4602      	mov	r2, r0
   2d960:	4650      	mov	r0, sl
   2d962:	f014 fba5 	bl	420b0 <strncmp>
	if (!compare(state_str, PAIRED_STR)) {
   2d966:	2800      	cmp	r0, #0
   2d968:	d1eb      	bne.n	2d942 <nrf_cloud_decode_data_endpoint+0xe6>
		return -ENOENT;
	}

	if (m_endpoint_obj != NULL) {
   2d96a:	b164      	cbz	r4, 2d986 <nrf_cloud_decode_data_endpoint+0x12a>
		err = json_decode_and_alloc(m_endpoint_obj, m_endpoint);
   2d96c:	4620      	mov	r0, r4
   2d96e:	4649      	mov	r1, r9
   2d970:	f012 fa89 	bl	3fe86 <json_decode_and_alloc>
		if (err) {
   2d974:	4604      	mov	r4, r0
   2d976:	b130      	cbz	r0, 2d986 <nrf_cloud_decode_data_endpoint+0x12a>

	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");

	err = json_decode_and_alloc(rx_obj, rx_endpoint);
	if (err) {
		cJSON_Delete(root_obj);
   2d978:	4628      	mov	r0, r5
		return err;
	}

	cJSON_Delete(root_obj);
   2d97a:	f7fb fa23 	bl	28dc4 <cJSON_Delete>

	return err;
}
   2d97e:	4620      	mov	r0, r4
   2d980:	b002      	add	sp, #8
   2d982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cJSON *tx_obj = json_object_decode(topic_obj, "d2c");
   2d986:	4915      	ldr	r1, [pc, #84]	; (2d9dc <nrf_cloud_decode_data_endpoint+0x180>)
   2d988:	4630      	mov	r0, r6
   2d98a:	f012 fa67 	bl	3fe5c <json_object_decode>
	err = json_decode_and_alloc(tx_obj, tx_endpoint);
   2d98e:	4641      	mov	r1, r8
   2d990:	f012 fa79 	bl	3fe86 <json_decode_and_alloc>
	if (err) {
   2d994:	4604      	mov	r4, r0
   2d996:	2800      	cmp	r0, #0
   2d998:	d1ee      	bne.n	2d978 <nrf_cloud_decode_data_endpoint+0x11c>
	cJSON *rx_obj = json_object_decode(topic_obj, "c2d");
   2d99a:	4911      	ldr	r1, [pc, #68]	; (2d9e0 <nrf_cloud_decode_data_endpoint+0x184>)
   2d99c:	4630      	mov	r0, r6
   2d99e:	f012 fa5d 	bl	3fe5c <json_object_decode>
	err = json_decode_and_alloc(rx_obj, rx_endpoint);
   2d9a2:	4639      	mov	r1, r7
   2d9a4:	f012 fa6f 	bl	3fe86 <json_decode_and_alloc>
	if (err) {
   2d9a8:	4604      	mov	r4, r0
   2d9aa:	e7e5      	b.n	2d978 <nrf_cloud_decode_data_endpoint+0x11c>
   2d9ac:	00048962 	.word	0x00048962
   2d9b0:	00044dbf 	.word	0x00044dbf
   2d9b4:	000488b8 	.word	0x000488b8
   2d9b8:	00048977 	.word	0x00048977
   2d9bc:	00048991 	.word	0x00048991
   2d9c0:	00048b00 	.word	0x00048b00
   2d9c4:	00048b1b 	.word	0x00048b1b
   2d9c8:	000489b8 	.word	0x000489b8
   2d9cc:	000489d3 	.word	0x000489d3
   2d9d0:	0004b32e 	.word	0x0004b32e
   2d9d4:	00048acc 	.word	0x00048acc
   2d9d8:	00048ae3 	.word	0x00048ae3
   2d9dc:	00048af8 	.word	0x00048af8
   2d9e0:	00048afc 	.word	0x00048afc

0002d9e4 <state_ua_pin_wait>:

	return err;
}

static int state_ua_pin_wait(void)
{
   2d9e4:	b510      	push	{r4, lr}
   2d9e6:	b08c      	sub	sp, #48	; 0x30
	int err;
	struct nct_cc_data msg = {
   2d9e8:	2218      	movs	r2, #24
   2d9ea:	2100      	movs	r1, #0
   2d9ec:	4668      	mov	r0, sp
   2d9ee:	f014 f976 	bl	41cde <memset>
   2d9f2:	2301      	movs	r3, #1
		.opcode = NCT_CC_OPCODE_UPDATE_REQ,
		.id = DEFAULT_REPORT_ID,
	};

	/* Publish report to the cloud on current status. */
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2d9f4:	4669      	mov	r1, sp
   2d9f6:	2006      	movs	r0, #6
	struct nct_cc_data msg = {
   2d9f8:	9304      	str	r3, [sp, #16]
   2d9fa:	f88d 3014 	strb.w	r3, [sp, #20]
	err = nrf_cloud_encode_state(STATE_UA_PIN_WAIT, &msg.data);
   2d9fe:	f7f0 fae7 	bl	1dfd0 <nrf_cloud_encode_state>
	if (err) {
   2da02:	4604      	mov	r4, r0
   2da04:	b168      	cbz	r0, 2da22 <state_ua_pin_wait+0x3e>
   2da06:	4819      	ldr	r0, [pc, #100]	; (2da6c <state_ua_pin_wait+0x88>)
   2da08:	4b19      	ldr	r3, [pc, #100]	; (2da70 <state_ua_pin_wait+0x8c>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2da0a:	4622      	mov	r2, r4
   2da0c:	1ac0      	subs	r0, r0, r3
   2da0e:	08c0      	lsrs	r0, r0, #3
   2da10:	0180      	lsls	r0, r0, #6
   2da12:	4918      	ldr	r1, [pc, #96]	; (2da74 <state_ua_pin_wait+0x90>)
   2da14:	f040 0001 	orr.w	r0, r0, #1
   2da18:	f00f fc72 	bl	3d300 <log_string_sync>
	};

	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);

	return 0;
}
   2da1c:	4620      	mov	r0, r4
   2da1e:	b00c      	add	sp, #48	; 0x30
   2da20:	bd10      	pop	{r4, pc}
	err = nct_cc_send(&msg);
   2da22:	4668      	mov	r0, sp
   2da24:	f000 fe7e 	bl	2e724 <nct_cc_send>
	if (err) {
   2da28:	4604      	mov	r4, r0
   2da2a:	b170      	cbz	r0, 2da4a <state_ua_pin_wait+0x66>
   2da2c:	4b10      	ldr	r3, [pc, #64]	; (2da70 <state_ua_pin_wait+0x8c>)
   2da2e:	480f      	ldr	r0, [pc, #60]	; (2da6c <state_ua_pin_wait+0x88>)
		LOG_ERR("nct_cc_send failed %d", err);
   2da30:	4622      	mov	r2, r4
   2da32:	1ac0      	subs	r0, r0, r3
   2da34:	08c0      	lsrs	r0, r0, #3
   2da36:	0180      	lsls	r0, r0, #6
   2da38:	490f      	ldr	r1, [pc, #60]	; (2da78 <state_ua_pin_wait+0x94>)
   2da3a:	f040 0001 	orr.w	r0, r0, #1
   2da3e:	f00f fc5f 	bl	3d300 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2da42:	9801      	ldr	r0, [sp, #4]
   2da44:	f014 f8e8 	bl	41c18 <k_free>
		return err;
   2da48:	e7e8      	b.n	2da1c <state_ua_pin_wait+0x38>
	nrf_cloud_free((void *)msg.data.ptr);
   2da4a:	9801      	ldr	r0, [sp, #4]
   2da4c:	f014 f8e4 	bl	41c18 <k_free>
	struct nrf_cloud_evt evt = {
   2da50:	2218      	movs	r2, #24
   2da52:	4621      	mov	r1, r4
   2da54:	eb0d 0002 	add.w	r0, sp, r2
   2da58:	f014 f941 	bl	41cde <memset>
   2da5c:	2303      	movs	r3, #3
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2da5e:	2006      	movs	r0, #6
   2da60:	a906      	add	r1, sp, #24
	struct nrf_cloud_evt evt = {
   2da62:	f88d 3018 	strb.w	r3, [sp, #24]
	nfsm_set_current_state_and_notify(STATE_UA_PIN_WAIT, &evt);
   2da66:	f7ff fb03 	bl	2d070 <nfsm_set_current_state_and_notify>
	return 0;
   2da6a:	e7d7      	b.n	2da1c <state_ua_pin_wait+0x38>
   2da6c:	000434a4 	.word	0x000434a4
   2da70:	0004339c 	.word	0x0004339c
   2da74:	00048b46 	.word	0x00048b46
   2da78:	00048b67 	.word	0x00048b67

0002da7c <cc_connection_handler>:

	return 0;
}

static int cc_connection_handler(const struct nct_evt *nct_evt)
{
   2da7c:	b510      	push	{r4, lr}
   2da7e:	4604      	mov	r4, r0
   2da80:	b086      	sub	sp, #24
		.opcode = NCT_CC_OPCODE_GET_REQ,
		.id = CLOUD_STATE_REQ_ID,
	};

	int err;
	const struct nrf_cloud_evt evt = {
   2da82:	2100      	movs	r1, #0
   2da84:	2218      	movs	r2, #24
   2da86:	4668      	mov	r0, sp
   2da88:	f014 f929 	bl	41cde <memset>
   2da8c:	23ff      	movs	r3, #255	; 0xff
		.type = NRF_CLOUD_EVT_ERROR,
	};

	if (nct_evt->status != 0) {
   2da8e:	6821      	ldr	r1, [r4, #0]
	const struct nrf_cloud_evt evt = {
   2da90:	f88d 3000 	strb.w	r3, [sp]
	if (nct_evt->status != 0) {
   2da94:	b139      	cbz	r1, 2daa6 <cc_connection_handler+0x2a>
		nfsm_set_current_state_and_notify(STATE_ERROR, &evt);
   2da96:	4669      	mov	r1, sp
   2da98:	200c      	movs	r0, #12
   2da9a:	f7ff fae9 	bl	2d070 <nfsm_set_current_state_and_notify>
		return 0;
   2da9e:	2400      	movs	r4, #0
	}

	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);

	return 0;
}
   2daa0:	4620      	mov	r0, r4
   2daa2:	b006      	add	sp, #24
   2daa4:	bd10      	pop	{r4, pc}
	nfsm_set_current_state_and_notify(STATE_CC_CONNECTED, NULL);
   2daa6:	2004      	movs	r0, #4
   2daa8:	f7ff fae2 	bl	2d070 <nfsm_set_current_state_and_notify>
	err = nct_cc_send(&get_request);
   2daac:	4806      	ldr	r0, [pc, #24]	; (2dac8 <cc_connection_handler+0x4c>)
   2daae:	f000 fe39 	bl	2e724 <nct_cc_send>
	if (err) {
   2dab2:	4604      	mov	r4, r0
   2dab4:	b120      	cbz	r0, 2dac0 <cc_connection_handler+0x44>
		nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2dab6:	4669      	mov	r1, sp
   2dab8:	2002      	movs	r0, #2
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2daba:	f7ff fad9 	bl	2d070 <nfsm_set_current_state_and_notify>
	return 0;
   2dabe:	e7ef      	b.n	2daa0 <cc_connection_handler+0x24>
	nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED, NULL);
   2dac0:	4601      	mov	r1, r0
   2dac2:	2005      	movs	r0, #5
   2dac4:	e7f9      	b.n	2daba <cc_connection_handler+0x3e>
   2dac6:	bf00      	nop
   2dac8:	00043d88 	.word	0x00043d88

0002dacc <cc_rx_data_handler>:

	return state_ua_pin_complete();
}

static int cc_rx_data_handler(const struct nct_evt *nct_evt)
{
   2dacc:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;
	enum nfsm_state new_state;
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
	bool config_found = false;
   2dace:	2700      	movs	r7, #0
{
   2dad0:	b095      	sub	sp, #84	; 0x54
   2dad2:	4606      	mov	r6, r0
	const struct nrf_cloud_data *payload = &nct_evt->param.cc->data;
   2dad4:	6844      	ldr	r4, [r0, #4]
	bool config_found = false;
   2dad6:	f88d 7007 	strb.w	r7, [sp, #7]
	const enum nfsm_state current_state = nfsm_get_current_state();
   2dada:	f7ff fac3 	bl	2d064 <nfsm_get_current_state>
	struct nct_cc_data msg = {
   2dade:	2218      	movs	r2, #24
   2dae0:	4639      	mov	r1, r7
	const enum nfsm_state current_state = nfsm_get_current_state();
   2dae2:	4605      	mov	r5, r0
	struct nct_cc_data msg = {
   2dae4:	a808      	add	r0, sp, #32
   2dae6:	f014 f8fa 	bl	41cde <memset>
   2daea:	2301      	movs	r3, #1
	struct nrf_cloud_evt cloud_evt = {
   2daec:	2218      	movs	r2, #24
   2daee:	4639      	mov	r1, r7
   2daf0:	a80e      	add	r0, sp, #56	; 0x38
	struct nct_cc_data msg = {
   2daf2:	930c      	str	r3, [sp, #48]	; 0x30
   2daf4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	struct nrf_cloud_evt cloud_evt = {
   2daf8:	f014 f8f1 	bl	41cde <memset>
   2dafc:	2307      	movs	r3, #7
	if (evt->param.cc == NULL) {
   2dafe:	6870      	ldr	r0, [r6, #4]
	struct nrf_cloud_evt cloud_evt = {
   2db00:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (evt->param.cc == NULL) {
   2db04:	b190      	cbz	r0, 2db2c <cc_rx_data_handler+0x60>
	err = nrf_cloud_encode_config_response(&evt->param.cc->data, &msg.data,
   2db06:	eb0d 0203 	add.w	r2, sp, r3
   2db0a:	a908      	add	r1, sp, #32
   2db0c:	f7ff fdf2 	bl	2d6f4 <nrf_cloud_encode_config_response>
	if ((err) && (err != -ESRCH)) {
   2db10:	b328      	cbz	r0, 2db5e <cc_rx_data_handler+0x92>
   2db12:	1cc3      	adds	r3, r0, #3
   2db14:	d023      	beq.n	2db5e <cc_rx_data_handler+0x92>
   2db16:	4a5f      	ldr	r2, [pc, #380]	; (2dc94 <cc_rx_data_handler+0x1c8>)
   2db18:	4b5f      	ldr	r3, [pc, #380]	; (2dc98 <cc_rx_data_handler+0x1cc>)
		LOG_ERR("nrf_cloud_encode_config_response failed %d", err);
   2db1a:	4960      	ldr	r1, [pc, #384]	; (2dc9c <cc_rx_data_handler+0x1d0>)
   2db1c:	1a9b      	subs	r3, r3, r2
   2db1e:	08db      	lsrs	r3, r3, #3
   2db20:	019b      	lsls	r3, r3, #6
   2db22:	4602      	mov	r2, r0
   2db24:	f043 0001 	orr.w	r0, r3, #1
   2db28:	f00f fbea 	bl	3d300 <log_string_sync>

	handle_device_config_update(nct_evt, &config_found);

	err = nrf_cloud_decode_requested_state(payload, &new_state);
   2db2c:	4620      	mov	r0, r4
   2db2e:	f10d 0106 	add.w	r1, sp, #6
   2db32:	f7ff fd19 	bl	2d568 <nrf_cloud_decode_requested_state>

	if (err) {
   2db36:	4604      	mov	r4, r0
   2db38:	2800      	cmp	r0, #0
   2db3a:	d03a      	beq.n	2dbb2 <cc_rx_data_handler+0xe6>
		if (!config_found) {
   2db3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2db40:	2b00      	cmp	r3, #0
   2db42:	f040 80a4 	bne.w	2dc8e <cc_rx_data_handler+0x1c2>
			LOG_ERR("nrf_cloud_decode_requested_state Failed %d",
   2db46:	4622      	mov	r2, r4
   2db48:	4853      	ldr	r0, [pc, #332]	; (2dc98 <cc_rx_data_handler+0x1cc>)
   2db4a:	4b52      	ldr	r3, [pc, #328]	; (2dc94 <cc_rx_data_handler+0x1c8>)
   2db4c:	4954      	ldr	r1, [pc, #336]	; (2dca0 <cc_rx_data_handler+0x1d4>)
   2db4e:	1ac0      	subs	r0, r0, r3
   2db50:	08c0      	lsrs	r0, r0, #3
   2db52:	0180      	lsls	r0, r0, #6
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2db54:	f040 0001 	orr.w	r0, r0, #1
   2db58:	f00f fbd2 	bl	3d300 <log_string_sync>
		return err;
   2db5c:	e045      	b.n	2dbea <cc_rx_data_handler+0x11e>
	if (*config_found == false) {
   2db5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2db62:	2b00      	cmp	r3, #0
   2db64:	d0e2      	beq.n	2db2c <cc_rx_data_handler+0x60>
	if (msg.data.ptr) {
   2db66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2db68:	b193      	cbz	r3, 2db90 <cc_rx_data_handler+0xc4>
		err = nct_cc_send(&msg);
   2db6a:	a808      	add	r0, sp, #32
   2db6c:	f000 fdda 	bl	2e724 <nct_cc_send>
   2db70:	4607      	mov	r7, r0
		nrf_cloud_free((void *)msg.data.ptr);
   2db72:	9809      	ldr	r0, [sp, #36]	; 0x24
   2db74:	f014 f850 	bl	41c18 <k_free>
		if (err) {
   2db78:	b157      	cbz	r7, 2db90 <cc_rx_data_handler+0xc4>
   2db7a:	4846      	ldr	r0, [pc, #280]	; (2dc94 <cc_rx_data_handler+0x1c8>)
   2db7c:	4b46      	ldr	r3, [pc, #280]	; (2dc98 <cc_rx_data_handler+0x1cc>)
			LOG_ERR("nct_cc_send failed %d", err);
   2db7e:	463a      	mov	r2, r7
   2db80:	1a1b      	subs	r3, r3, r0
   2db82:	08db      	lsrs	r3, r3, #3
   2db84:	019b      	lsls	r3, r3, #6
   2db86:	4947      	ldr	r1, [pc, #284]	; (2dca4 <cc_rx_data_handler+0x1d8>)
   2db88:	f043 0001 	orr.w	r0, r3, #1
   2db8c:	f00f fbb8 	bl	3d300 <log_string_sync>
	cloud_evt.data = evt->param.cc->data;
   2db90:	6873      	ldr	r3, [r6, #4]
   2db92:	aa10      	add	r2, sp, #64	; 0x40
   2db94:	e893 0003 	ldmia.w	r3, {r0, r1}
   2db98:	e882 0003 	stmia.w	r2, {r0, r1}
	cloud_evt.topic = evt->param.cc->topic;
   2db9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   2dba0:	ab14      	add	r3, sp, #80	; 0x50
   2dba2:	e903 0003 	stmdb	r3, {r0, r1}
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   2dba6:	f7ff fa5d 	bl	2d064 <nfsm_get_current_state>
   2dbaa:	a90e      	add	r1, sp, #56	; 0x38
   2dbac:	f7ff fa60 	bl	2d070 <nfsm_set_current_state_and_notify>
	return err;
   2dbb0:	e7bc      	b.n	2db2c <cc_rx_data_handler+0x60>

		/* Config only, nothing else to do */
		return 0;
	}

	switch (current_state) {
   2dbb2:	2d07      	cmp	r5, #7
   2dbb4:	d815      	bhi.n	2dbe2 <cc_rx_data_handler+0x116>
   2dbb6:	2d03      	cmp	r5, #3
   2dbb8:	d917      	bls.n	2dbea <cc_rx_data_handler+0x11e>
	case STATE_CC_CONNECTED:
	case STATE_CLOUD_STATE_REQUESTED:
	case STATE_UA_PIN_WAIT:
	case STATE_UA_PIN_COMPLETE:
		if (new_state == STATE_UA_PIN_COMPLETE) {
   2dbba:	f89d 5006 	ldrb.w	r5, [sp, #6]
   2dbbe:	2d07      	cmp	r5, #7
   2dbc0:	d158      	bne.n	2dc74 <cc_rx_data_handler+0x1a8>
	err = nrf_cloud_decode_data_endpoint(payload, &tx, &rx, &endpoint);
   2dbc2:	6870      	ldr	r0, [r6, #4]
   2dbc4:	ab06      	add	r3, sp, #24
   2dbc6:	aa02      	add	r2, sp, #8
   2dbc8:	a904      	add	r1, sp, #16
   2dbca:	f7ff fe47 	bl	2d85c <nrf_cloud_decode_data_endpoint>
	if (err) {
   2dbce:	4604      	mov	r4, r0
   2dbd0:	b170      	cbz	r0, 2dbf0 <cc_rx_data_handler+0x124>
   2dbd2:	4831      	ldr	r0, [pc, #196]	; (2dc98 <cc_rx_data_handler+0x1cc>)
   2dbd4:	4b2f      	ldr	r3, [pc, #188]	; (2dc94 <cc_rx_data_handler+0x1c8>)
		LOG_ERR("nrf_cloud_decode_data_endpoint failed %d", err);
   2dbd6:	4622      	mov	r2, r4
   2dbd8:	1ac0      	subs	r0, r0, r3
   2dbda:	08c0      	lsrs	r0, r0, #3
   2dbdc:	4932      	ldr	r1, [pc, #200]	; (2dca8 <cc_rx_data_handler+0x1dc>)
   2dbde:	0180      	lsls	r0, r0, #6
   2dbe0:	e7b8      	b.n	2db54 <cc_rx_data_handler+0x88>
	switch (current_state) {
   2dbe2:	3d08      	subs	r5, #8
   2dbe4:	b2ed      	uxtb	r5, r5
   2dbe6:	2d01      	cmp	r5, #1
   2dbe8:	d94a      	bls.n	2dc80 <cc_rx_data_handler+0x1b4>
	default:
		break;
	}

	return 0;
}
   2dbea:	4620      	mov	r0, r4
   2dbec:	b015      	add	sp, #84	; 0x54
   2dbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	nct_dc_endpoint_set(&tx, &rx, &endpoint);
   2dbf0:	aa06      	add	r2, sp, #24
   2dbf2:	a902      	add	r1, sp, #8
   2dbf4:	a804      	add	r0, sp, #16
   2dbf6:	f000 fdff 	bl	2e7f8 <nct_dc_endpoint_set>
	struct nct_cc_data msg = {
   2dbfa:	4621      	mov	r1, r4
   2dbfc:	2218      	movs	r2, #24
   2dbfe:	a808      	add	r0, sp, #32
   2dc00:	f014 f86d 	bl	41cde <memset>
   2dc04:	f641 63d2 	movw	r3, #7890	; 0x1ed2
   2dc08:	930c      	str	r3, [sp, #48]	; 0x30
   2dc0a:	2301      	movs	r3, #1
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2dc0c:	4628      	mov	r0, r5
   2dc0e:	a908      	add	r1, sp, #32
	struct nct_cc_data msg = {
   2dc10:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	err = nrf_cloud_encode_state(STATE_UA_PIN_COMPLETE, &msg.data);
   2dc14:	f7f0 f9dc 	bl	1dfd0 <nrf_cloud_encode_state>
	if (err) {
   2dc18:	4604      	mov	r4, r0
   2dc1a:	b138      	cbz	r0, 2dc2c <cc_rx_data_handler+0x160>
   2dc1c:	481e      	ldr	r0, [pc, #120]	; (2dc98 <cc_rx_data_handler+0x1cc>)
   2dc1e:	4b1d      	ldr	r3, [pc, #116]	; (2dc94 <cc_rx_data_handler+0x1c8>)
		LOG_ERR("nrf_cloud_encode_state failed %d", err);
   2dc20:	4622      	mov	r2, r4
   2dc22:	1ac0      	subs	r0, r0, r3
   2dc24:	08c0      	lsrs	r0, r0, #3
   2dc26:	4921      	ldr	r1, [pc, #132]	; (2dcac <cc_rx_data_handler+0x1e0>)
   2dc28:	0180      	lsls	r0, r0, #6
   2dc2a:	e793      	b.n	2db54 <cc_rx_data_handler+0x88>
	err = nct_cc_send(&msg);
   2dc2c:	a808      	add	r0, sp, #32
   2dc2e:	f000 fd79 	bl	2e724 <nct_cc_send>
	if (err) {
   2dc32:	4604      	mov	r4, r0
   2dc34:	b170      	cbz	r0, 2dc54 <cc_rx_data_handler+0x188>
   2dc36:	4b17      	ldr	r3, [pc, #92]	; (2dc94 <cc_rx_data_handler+0x1c8>)
   2dc38:	4817      	ldr	r0, [pc, #92]	; (2dc98 <cc_rx_data_handler+0x1cc>)
		LOG_ERR("nct_cc_send failed %d", err);
   2dc3a:	4622      	mov	r2, r4
   2dc3c:	1ac0      	subs	r0, r0, r3
   2dc3e:	08c0      	lsrs	r0, r0, #3
   2dc40:	0180      	lsls	r0, r0, #6
   2dc42:	4918      	ldr	r1, [pc, #96]	; (2dca4 <cc_rx_data_handler+0x1d8>)
   2dc44:	f040 0001 	orr.w	r0, r0, #1
   2dc48:	f00f fb5a 	bl	3d300 <log_string_sync>
		nrf_cloud_free((void *)msg.data.ptr);
   2dc4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dc4e:	f013 ffe3 	bl	41c18 <k_free>
		return err;
   2dc52:	e7ca      	b.n	2dbea <cc_rx_data_handler+0x11e>
	nrf_cloud_free((void *)msg.data.ptr);
   2dc54:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dc56:	f013 ffdf 	bl	41c18 <k_free>
	struct nrf_cloud_evt evt = {
   2dc5a:	4621      	mov	r1, r4
   2dc5c:	2218      	movs	r2, #24
   2dc5e:	a80e      	add	r0, sp, #56	; 0x38
   2dc60:	f014 f83d 	bl	41cde <memset>
   2dc64:	2304      	movs	r3, #4
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2dc66:	4628      	mov	r0, r5
   2dc68:	a90e      	add	r1, sp, #56	; 0x38
	struct nrf_cloud_evt evt = {
   2dc6a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	nfsm_set_current_state_and_notify(STATE_UA_PIN_COMPLETE, &evt);
   2dc6e:	f7ff f9ff 	bl	2d070 <nfsm_set_current_state_and_notify>
			return handle_pin_complete(nct_evt);
   2dc72:	e7ba      	b.n	2dbea <cc_rx_data_handler+0x11e>
		} else if (new_state == STATE_UA_PIN_WAIT) {
   2dc74:	2d06      	cmp	r5, #6
   2dc76:	d1b8      	bne.n	2dbea <cc_rx_data_handler+0x11e>
			return state_ua_pin_wait();
   2dc78:	f7ff feb4 	bl	2d9e4 <state_ua_pin_wait>
   2dc7c:	4604      	mov	r4, r0
   2dc7e:	e7b4      	b.n	2dbea <cc_rx_data_handler+0x11e>
		if (new_state == STATE_UA_PIN_WAIT) {
   2dc80:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2dc84:	2b06      	cmp	r3, #6
   2dc86:	d1b0      	bne.n	2dbea <cc_rx_data_handler+0x11e>
			(void)nct_dc_disconnect();
   2dc88:	f000 fe4c 	bl	2e924 <nct_dc_disconnect>
   2dc8c:	e7f4      	b.n	2dc78 <cc_rx_data_handler+0x1ac>
		return 0;
   2dc8e:	2400      	movs	r4, #0
   2dc90:	e7ab      	b.n	2dbea <cc_rx_data_handler+0x11e>
   2dc92:	bf00      	nop
   2dc94:	0004339c 	.word	0x0004339c
   2dc98:	000434a4 	.word	0x000434a4
   2dc9c:	00048b7d 	.word	0x00048b7d
   2dca0:	00048ba8 	.word	0x00048ba8
   2dca4:	00048b67 	.word	0x00048b67
   2dca8:	00048bd3 	.word	0x00048bd3
   2dcac:	00048b46 	.word	0x00048b46

0002dcb0 <nfsm_init>:
	persistent_session = false;
   2dcb0:	2000      	movs	r0, #0
   2dcb2:	4b01      	ldr	r3, [pc, #4]	; (2dcb8 <nfsm_init+0x8>)
   2dcb4:	7018      	strb	r0, [r3, #0]
}
   2dcb6:	4770      	bx	lr
   2dcb8:	20020735 	.word	0x20020735

0002dcbc <nfsm_handle_incoming_event>:
{
   2dcbc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2dcc0:	460e      	mov	r6, r1
	if ((nct_evt == NULL) || (nct_evt->type >= NCT_EVT_TOTAL) ||
   2dcc2:	4607      	mov	r7, r0
   2dcc4:	b130      	cbz	r0, 2dcd4 <nfsm_handle_incoming_event+0x18>
   2dcc6:	f890 8008 	ldrb.w	r8, [r0, #8]
   2dcca:	f1b8 0f09 	cmp.w	r8, #9
   2dcce:	d801      	bhi.n	2dcd4 <nfsm_handle_incoming_event+0x18>
   2dcd0:	290c      	cmp	r1, #12
   2dcd2:	d90f      	bls.n	2dcf4 <nfsm_handle_incoming_event+0x38>
		__ASSERT_NO_MSG(false);
   2dcd4:	2379      	movs	r3, #121	; 0x79
   2dcd6:	4a1b      	ldr	r2, [pc, #108]	; (2dd44 <nfsm_handle_incoming_event+0x88>)
   2dcd8:	491b      	ldr	r1, [pc, #108]	; (2dd48 <nfsm_handle_incoming_event+0x8c>)
   2dcda:	481c      	ldr	r0, [pc, #112]	; (2dd4c <nfsm_handle_incoming_event+0x90>)
   2dcdc:	f00f f84b 	bl	3cd76 <printk>
   2dce0:	2179      	movs	r1, #121	; 0x79
   2dce2:	4818      	ldr	r0, [pc, #96]	; (2dd44 <nfsm_handle_incoming_event+0x88>)
   2dce4:	f00f fafb 	bl	3d2de <assert_post_action>
   2dce8:	f06f 0415 	mvn.w	r4, #21
}
   2dcec:	4620      	mov	r0, r4
   2dcee:	b002      	add	sp, #8
   2dcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state_event_handlers[state][nct_evt->type] != NULL) {
   2dcf4:	4b16      	ldr	r3, [pc, #88]	; (2dd50 <nfsm_handle_incoming_event+0x94>)
   2dcf6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   2dcfa:	f853 4028 	ldr.w	r4, [r3, r8, lsl #2]
   2dcfe:	b184      	cbz	r4, 2dd22 <nfsm_handle_incoming_event+0x66>
		err = state_event_handlers[state][nct_evt->type](nct_evt);
   2dd00:	47a0      	blx	r4
		if (err) {
   2dd02:	4604      	mov	r4, r0
   2dd04:	2800      	cmp	r0, #0
   2dd06:	d0f1      	beq.n	2dcec <nfsm_handle_incoming_event+0x30>
   2dd08:	4812      	ldr	r0, [pc, #72]	; (2dd54 <nfsm_handle_incoming_event+0x98>)
   2dd0a:	4d13      	ldr	r5, [pc, #76]	; (2dd58 <nfsm_handle_incoming_event+0x9c>)
			LOG_ERR("Handler failed! state: %d, type: %d", state,
   2dd0c:	4632      	mov	r2, r6
   2dd0e:	1a2d      	subs	r5, r5, r0
   2dd10:	08ed      	lsrs	r5, r5, #3
   2dd12:	01ad      	lsls	r5, r5, #6
   2dd14:	7a3b      	ldrb	r3, [r7, #8]
   2dd16:	4911      	ldr	r1, [pc, #68]	; (2dd5c <nfsm_handle_incoming_event+0xa0>)
   2dd18:	f045 0001 	orr.w	r0, r5, #1
   2dd1c:	f00f faf0 	bl	3d300 <log_string_sync>
   2dd20:	e7e4      	b.n	2dcec <nfsm_handle_incoming_event+0x30>
   2dd22:	4b0c      	ldr	r3, [pc, #48]	; (2dd54 <nfsm_handle_incoming_event+0x98>)
   2dd24:	4d0c      	ldr	r5, [pc, #48]	; (2dd58 <nfsm_handle_incoming_event+0x9c>)
   2dd26:	1aed      	subs	r5, r5, r3
	LOG_DBG("Dropping FSM transition %d, current state %d", nct_evt->type,
   2dd28:	f7ff f99c 	bl	2d064 <nfsm_get_current_state>
   2dd2c:	08ed      	lsrs	r5, r5, #3
   2dd2e:	01ad      	lsls	r5, r5, #6
   2dd30:	f045 0504 	orr.w	r5, r5, #4
   2dd34:	9000      	str	r0, [sp, #0]
   2dd36:	4643      	mov	r3, r8
   2dd38:	4628      	mov	r0, r5
   2dd3a:	4a09      	ldr	r2, [pc, #36]	; (2dd60 <nfsm_handle_incoming_event+0xa4>)
   2dd3c:	4909      	ldr	r1, [pc, #36]	; (2dd64 <nfsm_handle_incoming_event+0xa8>)
   2dd3e:	f00f fadf 	bl	3d300 <log_string_sync>
	return 0;
   2dd42:	e7d3      	b.n	2dcec <nfsm_handle_incoming_event+0x30>
   2dd44:	00048bfc 	.word	0x00048bfc
   2dd48:	0004bcc7 	.word	0x0004bcc7
   2dd4c:	00044dbf 	.word	0x00044dbf
   2dd50:	00043df0 	.word	0x00043df0
   2dd54:	0004339c 	.word	0x0004339c
   2dd58:	000434a4 	.word	0x000434a4
   2dd5c:	00048c39 	.word	0x00048c39
   2dd60:	00048d08 	.word	0x00048d08
   2dd64:	00048c5d 	.word	0x00048c5d

0002dd68 <cc_tx_ack_handler>:

static int cc_tx_ack_handler(const struct nct_evt *nct_evt)
{
   2dd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int err;

	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   2dd6a:	f241 622e 	movw	r2, #5678	; 0x162e
   2dd6e:	6843      	ldr	r3, [r0, #4]
   2dd70:	4293      	cmp	r3, r2
   2dd72:	d105      	bne.n	2dd80 <cc_tx_ack_handler+0x18>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   2dd74:	2100      	movs	r1, #0
   2dd76:	2005      	movs	r0, #5
   2dd78:	f7ff f97a 	bl	2d070 <nfsm_set_current_state_and_notify>
				" skipping nct_dc_connect()");
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
		}
	}

	return 0;
   2dd7c:	2400      	movs	r4, #0
   2dd7e:	e00e      	b.n	2dd9e <cc_tx_ack_handler+0x36>
	if (nct_evt->param.data_id == PAIRING_STATUS_REPORT_ID) {
   2dd80:	f641 62d2 	movw	r2, #7890	; 0x1ed2
   2dd84:	4293      	cmp	r3, r2
   2dd86:	d1f9      	bne.n	2dd7c <cc_tx_ack_handler+0x14>
		if (!persistent_session) {
   2dd88:	4b12      	ldr	r3, [pc, #72]	; (2ddd4 <cc_tx_ack_handler+0x6c>)
   2dd8a:	781b      	ldrb	r3, [r3, #0]
   2dd8c:	b953      	cbnz	r3, 2dda4 <cc_tx_ack_handler+0x3c>
			err = nct_dc_connect();
   2dd8e:	f000 fd9b 	bl	2e8c8 <nct_dc_connect>
			if (err) {
   2dd92:	4604      	mov	r4, r0
   2dd94:	b918      	cbnz	r0, 2dd9e <cc_tx_ack_handler+0x36>
			nfsm_set_current_state_and_notify(STATE_DC_CONNECTING,
   2dd96:	4601      	mov	r1, r0
   2dd98:	2008      	movs	r0, #8
   2dd9a:	f7ff f969 	bl	2d070 <nfsm_set_current_state_and_notify>
}
   2dd9e:	4620      	mov	r0, r4
   2dda0:	b004      	add	sp, #16
   2dda2:	bd10      	pop	{r4, pc}
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2dda4:	2400      	movs	r4, #0
   2dda6:	2302      	movs	r3, #2
   2dda8:	9403      	str	r4, [sp, #12]
   2ddaa:	480b      	ldr	r0, [pc, #44]	; (2ddd8 <cc_tx_ack_handler+0x70>)
   2ddac:	f88d 300c 	strb.w	r3, [sp, #12]
   2ddb0:	4b0a      	ldr	r3, [pc, #40]	; (2dddc <cc_tx_ack_handler+0x74>)
			LOG_DBG("Previous session valid;"
   2ddb2:	4a0b      	ldr	r2, [pc, #44]	; (2dde0 <cc_tx_ack_handler+0x78>)
   2ddb4:	1ac0      	subs	r0, r0, r3
   2ddb6:	08c0      	lsrs	r0, r0, #3
   2ddb8:	0180      	lsls	r0, r0, #6
   2ddba:	490a      	ldr	r1, [pc, #40]	; (2dde4 <cc_tx_ack_handler+0x7c>)
   2ddbc:	f040 0004 	orr.w	r0, r0, #4
			struct nct_evt nevt = { .type = NCT_EVT_DC_CONNECTED,
   2ddc0:	e9cd 4401 	strd	r4, r4, [sp, #4]
			LOG_DBG("Previous session valid;"
   2ddc4:	f00f fa9c 	bl	3d300 <log_string_sync>
			nfsm_handle_incoming_event(&nevt, STATE_DC_CONNECTING);
   2ddc8:	2108      	movs	r1, #8
   2ddca:	a801      	add	r0, sp, #4
   2ddcc:	f7ff ff76 	bl	2dcbc <nfsm_handle_incoming_event>
   2ddd0:	e7e5      	b.n	2dd9e <cc_tx_ack_handler+0x36>
   2ddd2:	bf00      	nop
   2ddd4:	20020735 	.word	0x20020735
   2ddd8:	000434a4 	.word	0x000434a4
   2dddc:	0004339c 	.word	0x0004339c
   2dde0:	00048d2e 	.word	0x00048d2e
   2dde4:	00048c8e 	.word	0x00048c8e

0002dde8 <connection_handler>:
{
   2dde8:	b570      	push	{r4, r5, r6, lr}
	if (nct_evt->status != 0) {
   2ddea:	6804      	ldr	r4, [r0, #0]
{
   2ddec:	4605      	mov	r5, r0
   2ddee:	b08a      	sub	sp, #40	; 0x28
	if (nct_evt->status != 0) {
   2ddf0:	b164      	cbz	r4, 2de0c <connection_handler+0x24>
		evt.type = NRF_CLOUD_EVT_ERROR;
   2ddf2:	23ff      	movs	r3, #255	; 0xff
		evt.status = nct_evt->status;
   2ddf4:	9405      	str	r4, [sp, #20]
		evt.type = NRF_CLOUD_EVT_ERROR;
   2ddf6:	f88d 3010 	strb.w	r3, [sp, #16]
		nfsm_set_current_state_and_notify(nfsm_get_current_state(),
   2ddfa:	f7ff f933 	bl	2d064 <nfsm_get_current_state>
   2ddfe:	a904      	add	r1, sp, #16
   2de00:	f7ff f936 	bl	2d070 <nfsm_set_current_state_and_notify>
		return 0;
   2de04:	2400      	movs	r4, #0
}
   2de06:	4620      	mov	r0, r4
   2de08:	b00a      	add	sp, #40	; 0x28
   2de0a:	bd70      	pop	{r4, r5, r6, pc}
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2de0c:	2601      	movs	r6, #1
	evt.status = nct_evt->param.flag;
   2de0e:	7903      	ldrb	r3, [r0, #4]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2de10:	a904      	add	r1, sp, #16
   2de12:	2002      	movs	r0, #2
	evt.status = nct_evt->param.flag;
   2de14:	9305      	str	r3, [sp, #20]
	evt.type = NRF_CLOUD_EVT_TRANSPORT_CONNECTED;
   2de16:	f88d 6010 	strb.w	r6, [sp, #16]
	nfsm_set_current_state_and_notify(STATE_CONNECTED, &evt);
   2de1a:	f7ff f929 	bl	2d070 <nfsm_set_current_state_and_notify>
	persistent_session = nct_evt->param.flag;
   2de1e:	792b      	ldrb	r3, [r5, #4]
   2de20:	2b00      	cmp	r3, #0
   2de22:	bf14      	ite	ne
   2de24:	4632      	movne	r2, r6
   2de26:	2200      	moveq	r2, #0
   2de28:	4b10      	ldr	r3, [pc, #64]	; (2de6c <connection_handler+0x84>)
   2de2a:	701a      	strb	r2, [r3, #0]
	if (!persistent_session) {
   2de2c:	d109      	bne.n	2de42 <connection_handler+0x5a>
		err = nct_cc_connect();
   2de2e:	f000 fc53 	bl	2e6d8 <nct_cc_connect>
		if (err) {
   2de32:	4604      	mov	r4, r0
   2de34:	2800      	cmp	r0, #0
   2de36:	d1e6      	bne.n	2de06 <connection_handler+0x1e>
		nfsm_set_current_state_and_notify(STATE_CC_CONNECTING, NULL);
   2de38:	4601      	mov	r1, r0
   2de3a:	2003      	movs	r0, #3
   2de3c:	f7ff f918 	bl	2d070 <nfsm_set_current_state_and_notify>
   2de40:	e7e1      	b.n	2de06 <connection_handler+0x1e>
   2de42:	4b0b      	ldr	r3, [pc, #44]	; (2de70 <connection_handler+0x88>)
   2de44:	480b      	ldr	r0, [pc, #44]	; (2de74 <connection_handler+0x8c>)
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2de46:	4a0c      	ldr	r2, [pc, #48]	; (2de78 <connection_handler+0x90>)
   2de48:	1ac0      	subs	r0, r0, r3
   2de4a:	08c0      	lsrs	r0, r0, #3
   2de4c:	0180      	lsls	r0, r0, #6
   2de4e:	490b      	ldr	r1, [pc, #44]	; (2de7c <connection_handler+0x94>)
   2de50:	f040 0004 	orr.w	r0, r0, #4
		struct nct_evt nevt = { .type = NCT_EVT_CC_CONNECTED,
   2de54:	9403      	str	r4, [sp, #12]
   2de56:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2de5a:	f88d 600c 	strb.w	r6, [sp, #12]
		LOG_DBG("Previous session valid; skipping nct_cc_connect()");
   2de5e:	f00f fa4f 	bl	3d300 <log_string_sync>
		nfsm_handle_incoming_event(&nevt, STATE_CC_CONNECTING);
   2de62:	2103      	movs	r1, #3
   2de64:	a801      	add	r0, sp, #4
   2de66:	f7ff ff29 	bl	2dcbc <nfsm_handle_incoming_event>
   2de6a:	e7cc      	b.n	2de06 <connection_handler+0x1e>
   2de6c:	20020735 	.word	0x20020735
   2de70:	0004339c 	.word	0x0004339c
   2de74:	000434a4 	.word	0x000434a4
   2de78:	00048d1b 	.word	0x00048d1b
   2de7c:	00048cc4 	.word	0x00048cc4

0002de80 <dc_endpoint_reset>:
};

/* Internal routine to reset data endpoint information. */
static void dc_endpoint_reset(void)
{
	nct.dc_rx_endp.utf8 = NULL;
   2de80:	2200      	movs	r2, #0
   2de82:	4b05      	ldr	r3, [pc, #20]	; (2de98 <dc_endpoint_reset+0x18>)
	nct.dc_rx_endp.size = 0;
   2de84:	e9c3 222f 	strd	r2, r2, [r3, #188]	; 0xbc

	nct.dc_tx_endp.utf8 = NULL;
	nct.dc_tx_endp.size = 0;
   2de88:	e9c3 222d 	strd	r2, r2, [r3, #180]	; 0xb4

	nct.dc_m_endp.utf8 = NULL;
	nct.dc_m_endp.size = 0;
   2de8c:	e9c3 2231 	strd	r2, r2, [r3, #196]	; 0xc4

	nct.job_status_endp.utf8 = NULL;
	nct.job_status_endp.size = 0;
   2de90:	e9c3 2233 	strd	r2, r2, [r3, #204]	; 0xcc
}
   2de94:	4770      	bx	lr
   2de96:	bf00      	nop
   2de98:	20019240 	.word	0x20019240

0002de9c <get_next_message_id>:

/* Get the next unused message id. */
static uint32_t get_next_message_id(void)
{
	nct.message_id++;
   2de9c:	4b07      	ldr	r3, [pc, #28]	; (2debc <get_next_message_id+0x20>)
   2de9e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
   2dea2:	1c51      	adds	r1, r2, #1

	if ((uint16_t)nct.message_id == 0) {
   2dea4:	b288      	uxth	r0, r1
   2dea6:	b120      	cbz	r0, 2deb2 <get_next_message_id+0x16>
	nct.message_id++;
   2dea8:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
		nct.message_id++;
	}

	return nct.message_id;
}
   2deac:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
   2deb0:	4770      	bx	lr
		nct.message_id++;
   2deb2:	3202      	adds	r2, #2
   2deb4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
   2deb8:	e7f8      	b.n	2deac <get_next_message_id+0x10>
   2deba:	bf00      	nop
   2debc:	20019240 	.word	0x20019240

0002dec0 <nct_settings_set>:
	return 0;
}

static int nct_settings_set(const char *key, size_t len_rd,
			    settings_read_cb read_cb, void *cb_arg)
{
   2dec0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2dec4:	460d      	mov	r5, r1
   2dec6:	4617      	mov	r7, r2
   2dec8:	4698      	mov	r8, r3
	if (!key) {
   2deca:	4606      	mov	r6, r0
   2decc:	b370      	cbz	r0, 2df2c <nct_settings_set+0x6c>
   2dece:	4b19      	ldr	r3, [pc, #100]	; (2df34 <nct_settings_set+0x74>)
   2ded0:	4c19      	ldr	r4, [pc, #100]	; (2df38 <nct_settings_set+0x78>)
   2ded2:	1ae4      	subs	r4, r4, r3
		return -EINVAL;
	}

	int read_val;

	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   2ded4:	f00f fa27 	bl	3d326 <log_strdup>
   2ded8:	08e4      	lsrs	r4, r4, #3
   2deda:	01a4      	lsls	r4, r4, #6
   2dedc:	f044 0404 	orr.w	r4, r4, #4
   2dee0:	4603      	mov	r3, r0
   2dee2:	4a16      	ldr	r2, [pc, #88]	; (2df3c <nct_settings_set+0x7c>)
   2dee4:	4916      	ldr	r1, [pc, #88]	; (2df40 <nct_settings_set+0x80>)
   2dee6:	4620      	mov	r0, r4
   2dee8:	9500      	str	r5, [sp, #0]
   2deea:	f00f fa09 	bl	3d300 <log_string_sync>

	if (!strncmp(key, SETTINGS_KEY_PERSISTENT_SESSION,
   2deee:	4815      	ldr	r0, [pc, #84]	; (2df44 <nct_settings_set+0x84>)
   2def0:	f7ef f9b4 	bl	1d25c <strlen>
   2def4:	4913      	ldr	r1, [pc, #76]	; (2df44 <nct_settings_set+0x84>)
   2def6:	4602      	mov	r2, r0
   2def8:	4630      	mov	r0, r6
   2defa:	f014 f8d9 	bl	420b0 <strncmp>
   2defe:	4606      	mov	r6, r0
   2df00:	b128      	cbz	r0, 2df0e <nct_settings_set+0x4e>
#endif
			LOG_DBG("Read setting val: %d", read_val);
			return 0;
		}
	}
	return -ENOTSUP;
   2df02:	f06f 0685 	mvn.w	r6, #133	; 0x85
}
   2df06:	4630      	mov	r0, r6
   2df08:	b004      	add	sp, #16
   2df0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		     strlen(SETTINGS_KEY_PERSISTENT_SESSION)) &&
   2df0e:	2d04      	cmp	r5, #4
   2df10:	d1f7      	bne.n	2df02 <nct_settings_set+0x42>
		if (read_cb(cb_arg, (void *)&read_val, len_rd) == len_rd) {
   2df12:	462a      	mov	r2, r5
   2df14:	4640      	mov	r0, r8
   2df16:	a903      	add	r1, sp, #12
   2df18:	47b8      	blx	r7
   2df1a:	2804      	cmp	r0, #4
   2df1c:	d1f1      	bne.n	2df02 <nct_settings_set+0x42>
			LOG_DBG("Read setting val: %d", read_val);
   2df1e:	4620      	mov	r0, r4
   2df20:	9b03      	ldr	r3, [sp, #12]
   2df22:	4a06      	ldr	r2, [pc, #24]	; (2df3c <nct_settings_set+0x7c>)
   2df24:	4908      	ldr	r1, [pc, #32]	; (2df48 <nct_settings_set+0x88>)
   2df26:	f00f f9eb 	bl	3d300 <log_string_sync>
			return 0;
   2df2a:	e7ec      	b.n	2df06 <nct_settings_set+0x46>
		return -EINVAL;
   2df2c:	f06f 0615 	mvn.w	r6, #21
   2df30:	e7e9      	b.n	2df06 <nct_settings_set+0x46>
   2df32:	bf00      	nop
   2df34:	0004339c 	.word	0x0004339c
   2df38:	000434ac 	.word	0x000434ac
   2df3c:	0004934f 	.word	0x0004934f
   2df40:	00048d40 	.word	0x00048d40
   2df44:	00048d5f 	.word	0x00048d5f
   2df48:	00048d66 	.word	0x00048d66

0002df4c <nrf_cloud_fota_cb_handler>:
}

#if defined(CONFIG_NRF_CLOUD_FOTA)
static void nrf_cloud_fota_cb_handler(const struct nrf_cloud_fota_evt
				      * const evt)
{
   2df4c:	b508      	push	{r3, lr}
   2df4e:	7803      	ldrb	r3, [r0, #0]
   2df50:	2b04      	cmp	r3, #4
   2df52:	d83c      	bhi.n	2dfce <nrf_cloud_fota_cb_handler+0x82>
   2df54:	e8df f003 	tbb	[pc, r3]
   2df58:	2b1f1003 	.word	0x2b1f1003
   2df5c:	33          	.byte	0x33
   2df5d:	00          	.byte	0x00
   2df5e:	481c      	ldr	r0, [pc, #112]	; (2dfd0 <nrf_cloud_fota_cb_handler+0x84>)
   2df60:	4b1c      	ldr	r3, [pc, #112]	; (2dfd4 <nrf_cloud_fota_cb_handler+0x88>)
	switch (evt->id) {
	case NRF_CLOUD_FOTA_EVT_START: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_START");
   2df62:	4a1d      	ldr	r2, [pc, #116]	; (2dfd8 <nrf_cloud_fota_cb_handler+0x8c>)
   2df64:	1ac0      	subs	r0, r0, r3
   2df66:	08c0      	lsrs	r0, r0, #3
   2df68:	491c      	ldr	r1, [pc, #112]	; (2dfdc <nrf_cloud_fota_cb_handler+0x90>)
   2df6a:	0180      	lsls	r0, r0, #6
	case NRF_CLOUD_FOTA_EVT_ERASE_PENDING: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_PENDING");
		break;
	}
	case NRF_CLOUD_FOTA_EVT_ERASE_DONE: {
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   2df6c:	f040 0004 	orr.w	r0, r0, #4
	}
	default: {
		break;
	}
	}
}
   2df70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   2df74:	f00f b9c4 	b.w	3d300 <log_string_sync>
   2df78:	4b16      	ldr	r3, [pc, #88]	; (2dfd4 <nrf_cloud_fota_cb_handler+0x88>)
   2df7a:	4815      	ldr	r0, [pc, #84]	; (2dfd0 <nrf_cloud_fota_cb_handler+0x84>)
		LOG_DBG("NRF_CLOUD_FOTA_EVT_DONE: rebooting");
   2df7c:	4a16      	ldr	r2, [pc, #88]	; (2dfd8 <nrf_cloud_fota_cb_handler+0x8c>)
   2df7e:	1ac0      	subs	r0, r0, r3
   2df80:	08c0      	lsrs	r0, r0, #3
   2df82:	0180      	lsls	r0, r0, #6
   2df84:	4916      	ldr	r1, [pc, #88]	; (2dfe0 <nrf_cloud_fota_cb_handler+0x94>)
   2df86:	f040 0004 	orr.w	r0, r0, #4
   2df8a:	f00f f9b9 	bl	3d300 <log_string_sync>
}
   2df8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		nct_apply_update();
   2df92:	f7ff bacf 	b.w	2d534 <nct_apply_update>
   2df96:	4b0f      	ldr	r3, [pc, #60]	; (2dfd4 <nrf_cloud_fota_cb_handler+0x88>)
   2df98:	480d      	ldr	r0, [pc, #52]	; (2dfd0 <nrf_cloud_fota_cb_handler+0x84>)
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   2df9a:	4912      	ldr	r1, [pc, #72]	; (2dfe4 <nrf_cloud_fota_cb_handler+0x98>)
   2df9c:	1ac0      	subs	r0, r0, r3
   2df9e:	08c0      	lsrs	r0, r0, #3
   2dfa0:	0180      	lsls	r0, r0, #6
   2dfa2:	f040 0001 	orr.w	r0, r0, #1
}
   2dfa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("NRF_CLOUD_FOTA_EVT_ERROR");
   2dfaa:	f00f b9a9 	b.w	3d300 <log_string_sync>
   2dfae:	4808      	ldr	r0, [pc, #32]	; (2dfd0 <nrf_cloud_fota_cb_handler+0x84>)
   2dfb0:	4b08      	ldr	r3, [pc, #32]	; (2dfd4 <nrf_cloud_fota_cb_handler+0x88>)
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_PENDING");
   2dfb2:	4a09      	ldr	r2, [pc, #36]	; (2dfd8 <nrf_cloud_fota_cb_handler+0x8c>)
   2dfb4:	1ac0      	subs	r0, r0, r3
   2dfb6:	08c0      	lsrs	r0, r0, #3
   2dfb8:	490b      	ldr	r1, [pc, #44]	; (2dfe8 <nrf_cloud_fota_cb_handler+0x9c>)
   2dfba:	0180      	lsls	r0, r0, #6
   2dfbc:	e7d6      	b.n	2df6c <nrf_cloud_fota_cb_handler+0x20>
   2dfbe:	4804      	ldr	r0, [pc, #16]	; (2dfd0 <nrf_cloud_fota_cb_handler+0x84>)
   2dfc0:	4b04      	ldr	r3, [pc, #16]	; (2dfd4 <nrf_cloud_fota_cb_handler+0x88>)
		LOG_DBG("NRF_CLOUD_FOTA_EVT_ERASE_DONE");
   2dfc2:	4a05      	ldr	r2, [pc, #20]	; (2dfd8 <nrf_cloud_fota_cb_handler+0x8c>)
   2dfc4:	1ac0      	subs	r0, r0, r3
   2dfc6:	08c0      	lsrs	r0, r0, #3
   2dfc8:	4908      	ldr	r1, [pc, #32]	; (2dfec <nrf_cloud_fota_cb_handler+0xa0>)
   2dfca:	0180      	lsls	r0, r0, #6
   2dfcc:	e7ce      	b.n	2df6c <nrf_cloud_fota_cb_handler+0x20>
}
   2dfce:	bd08      	pop	{r3, pc}
   2dfd0:	000434ac 	.word	0x000434ac
   2dfd4:	0004339c 	.word	0x0004339c
   2dfd8:	00049360 	.word	0x00049360
   2dfdc:	00048d7f 	.word	0x00048d7f
   2dfe0:	00048d9c 	.word	0x00048d9c
   2dfe4:	00048dc3 	.word	0x00048dc3
   2dfe8:	00048ddc 	.word	0x00048ddc
   2dfec:	00048e01 	.word	0x00048e01

0002dff0 <dc_send>:
{
   2dff0:	b530      	push	{r4, r5, lr}
   2dff2:	460d      	mov	r5, r1
	if (dc_data == NULL) {
   2dff4:	4604      	mov	r4, r0
{
   2dff6:	b087      	sub	sp, #28
	if (dc_data == NULL) {
   2dff8:	b310      	cbz	r0, 2e040 <dc_send+0x50>
	struct mqtt_publish_param publish = {
   2dffa:	2210      	movs	r2, #16
   2dffc:	2100      	movs	r1, #0
   2dffe:	a802      	add	r0, sp, #8
   2e000:	f013 fe6d 	bl	41cde <memset>
		.message.topic.topic.utf8 = nct.dc_tx_endp.utf8,
   2e004:	4b10      	ldr	r3, [pc, #64]	; (2e048 <dc_send+0x58>)
	struct mqtt_publish_param publish = {
   2e006:	f88d 5008 	strb.w	r5, [sp, #8]
   2e00a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2e00e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   2e012:	9200      	str	r2, [sp, #0]
   2e014:	9301      	str	r3, [sp, #4]
	if ((dc_data->data.len != 0) && (dc_data->data.ptr != NULL)) {
   2e016:	6823      	ldr	r3, [r4, #0]
   2e018:	b11b      	cbz	r3, 2e022 <dc_send+0x32>
   2e01a:	6862      	ldr	r2, [r4, #4]
   2e01c:	b10a      	cbz	r2, 2e022 <dc_send+0x32>
		publish.message.payload.len = dc_data->data.len;
   2e01e:	e9cd 2303 	strd	r2, r3, [sp, #12]
	if (dc_data->id != 0) {
   2e022:	6923      	ldr	r3, [r4, #16]
   2e024:	b13b      	cbz	r3, 2e036 <dc_send+0x46>
		publish.message_id = dc_data->id;
   2e026:	f8ad 3014 	strh.w	r3, [sp, #20]
	return mqtt_publish(&nct.client, &publish);
   2e02a:	4669      	mov	r1, sp
   2e02c:	4807      	ldr	r0, [pc, #28]	; (2e04c <dc_send+0x5c>)
   2e02e:	f010 fccf 	bl	3e9d0 <mqtt_publish>
}
   2e032:	b007      	add	sp, #28
   2e034:	bd30      	pop	{r4, r5, pc}
		publish.message_id = get_next_message_id();
   2e036:	f7ff ff31 	bl	2de9c <get_next_message_id>
   2e03a:	f8ad 0014 	strh.w	r0, [sp, #20]
   2e03e:	e7f4      	b.n	2e02a <dc_send+0x3a>
		return -EINVAL;
   2e040:	f06f 0015 	mvn.w	r0, #21
   2e044:	e7f5      	b.n	2e032 <dc_send+0x42>
   2e046:	bf00      	nop
   2e048:	20019240 	.word	0x20019240
   2e04c:	2001925c 	.word	0x2001925c

0002e050 <dc_endpoint_free>:
{
   2e050:	b510      	push	{r4, lr}
	if (nct.dc_rx_endp.utf8 != NULL) {
   2e052:	4c0d      	ldr	r4, [pc, #52]	; (2e088 <dc_endpoint_free+0x38>)
   2e054:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
   2e058:	b108      	cbz	r0, 2e05e <dc_endpoint_free+0xe>
		nrf_cloud_free((void *)nct.dc_rx_endp.utf8);
   2e05a:	f013 fddd 	bl	41c18 <k_free>
	if (nct.dc_tx_endp.utf8 != NULL) {
   2e05e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2e062:	b108      	cbz	r0, 2e068 <dc_endpoint_free+0x18>
		nrf_cloud_free((void *)nct.dc_tx_endp.utf8);
   2e064:	f013 fdd8 	bl	41c18 <k_free>
	if (nct.dc_m_endp.utf8 != NULL) {
   2e068:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
   2e06c:	b108      	cbz	r0, 2e072 <dc_endpoint_free+0x22>
		nrf_cloud_free((void *)nct.dc_m_endp.utf8);
   2e06e:	f013 fdd3 	bl	41c18 <k_free>
	if (nct.job_status_endp.utf8 != NULL) {
   2e072:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
   2e076:	b108      	cbz	r0, 2e07c <dc_endpoint_free+0x2c>
		nrf_cloud_free((void *)nct.job_status_endp.utf8);
   2e078:	f013 fdce 	bl	41c18 <k_free>
	dc_endpoint_reset();
   2e07c:	f7ff ff00 	bl	2de80 <dc_endpoint_reset>
}
   2e080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	nrf_cloud_fota_endpoint_clear();
   2e084:	f001 beea 	b.w	2fe5c <nrf_cloud_fota_endpoint_clear>
   2e088:	20019240 	.word	0x20019240

0002e08c <nct_mqtt_evt_handler>:
/* Handle MQTT events. */
static void nct_mqtt_evt_handler(struct mqtt_client *const mqtt_client,
				 const struct mqtt_evt *_mqtt_evt)
{
	int err;
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e08c:	2300      	movs	r3, #0
{
   2e08e:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e090:	b093      	sub	sp, #76	; 0x4c
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e092:	e9cd 3305 	strd	r3, r3, [sp, #20]
   2e096:	69cb      	ldr	r3, [r1, #28]
{
   2e098:	4606      	mov	r6, r0
	struct nct_cc_data cc;
	struct nct_dc_data dc;
	bool event_notify = false;

#if defined(CONFIG_NRF_CLOUD_FOTA)
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2e09a:	4608      	mov	r0, r1
{
   2e09c:	460c      	mov	r4, r1
	struct nct_evt evt = { .status = _mqtt_evt->result };
   2e09e:	9304      	str	r3, [sp, #16]
	err = nrf_cloud_fota_mqtt_evt_handler(_mqtt_evt);
   2e0a0:	f001 ff66 	bl	2ff70 <nrf_cloud_fota_mqtt_evt_handler>
	if (err == 0) {
   2e0a4:	1e02      	subs	r2, r0, #0
   2e0a6:	d04b      	beq.n	2e140 <nct_mqtt_evt_handler+0xb4>
		return;
	} else if (err < 0) {
   2e0a8:	da0a      	bge.n	2e0c0 <nct_mqtt_evt_handler+0x34>
   2e0aa:	4b7c      	ldr	r3, [pc, #496]	; (2e29c <nct_mqtt_evt_handler+0x210>)
   2e0ac:	487c      	ldr	r0, [pc, #496]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
		LOG_ERR("nrf_cloud_fota_mqtt_evt_handler: Failed! %d", err);
   2e0ae:	497d      	ldr	r1, [pc, #500]	; (2e2a4 <nct_mqtt_evt_handler+0x218>)
   2e0b0:	1a1b      	subs	r3, r3, r0
   2e0b2:	08db      	lsrs	r3, r3, #3
   2e0b4:	019b      	lsls	r3, r3, #6

	if (event_notify) {
		err = nct_input(&evt);

		if (err != 0) {
			LOG_ERR("nct_input: failed %d", err);
   2e0b6:	f043 0001 	orr.w	r0, r3, #1
   2e0ba:	f00f f921 	bl	3d300 <log_string_sync>
   2e0be:	e03f      	b.n	2e140 <nct_mqtt_evt_handler+0xb4>
	switch (_mqtt_evt->type) {
   2e0c0:	7823      	ldrb	r3, [r4, #0]
   2e0c2:	2b08      	cmp	r3, #8
   2e0c4:	d83c      	bhi.n	2e140 <nct_mqtt_evt_handler+0xb4>
   2e0c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   2e0ca:	0009      	.short	0x0009
   2e0cc:	001b00c7 	.word	0x001b00c7
   2e0d0:	003b00b3 	.word	0x003b00b3
   2e0d4:	003b003b 	.word	0x003b003b
   2e0d8:	00a1008c 	.word	0x00a1008c
   2e0dc:	4b70      	ldr	r3, [pc, #448]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e0de:	486f      	ldr	r0, [pc, #444]	; (2e29c <nct_mqtt_evt_handler+0x210>)
		LOG_DBG("MQTT_EVT_CONNACK: result %d", _mqtt_evt->result);
   2e0e0:	4a71      	ldr	r2, [pc, #452]	; (2e2a8 <nct_mqtt_evt_handler+0x21c>)
   2e0e2:	1ac0      	subs	r0, r0, r3
   2e0e4:	08c0      	lsrs	r0, r0, #3
   2e0e6:	0180      	lsls	r0, r0, #6
   2e0e8:	69e3      	ldr	r3, [r4, #28]
   2e0ea:	4970      	ldr	r1, [pc, #448]	; (2e2ac <nct_mqtt_evt_handler+0x220>)
   2e0ec:	f040 0004 	orr.w	r0, r0, #4
   2e0f0:	f00f f906 	bl	3d300 <log_string_sync>
		evt.param.flag = (p->session_present_flag != 0) &&
   2e0f4:	2300      	movs	r3, #0
   2e0f6:	f88d 3014 	strb.w	r3, [sp, #20]
		evt.type = NCT_EVT_DISCONNECTED;
   2e0fa:	f88d 3018 	strb.w	r3, [sp, #24]
	if (event_notify) {
   2e0fe:	e04f      	b.n	2e1a0 <nct_mqtt_evt_handler+0x114>
   2e100:	4b67      	ldr	r3, [pc, #412]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e102:	4d66      	ldr	r5, [pc, #408]	; (2e29c <nct_mqtt_evt_handler+0x210>)
		LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2e104:	4a68      	ldr	r2, [pc, #416]	; (2e2a8 <nct_mqtt_evt_handler+0x21c>)
   2e106:	1aed      	subs	r5, r5, r3
   2e108:	08ed      	lsrs	r5, r5, #3
   2e10a:	6963      	ldr	r3, [r4, #20]
   2e10c:	01ad      	lsls	r5, r5, #6
   2e10e:	9300      	str	r3, [sp, #0]
   2e110:	4967      	ldr	r1, [pc, #412]	; (2e2b0 <nct_mqtt_evt_handler+0x224>)
   2e112:	8b23      	ldrh	r3, [r4, #24]
   2e114:	f045 0004 	orr.w	r0, r5, #4
   2e118:	f00f f8f2 	bl	3d300 <log_string_sync>
		int err = publish_get_payload(mqtt_client,
   2e11c:	6962      	ldr	r2, [r4, #20]
	if (length > sizeof(nct.payload_buf)) {
   2e11e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2e122:	d80f      	bhi.n	2e144 <nct_mqtt_evt_handler+0xb8>
	return mqtt_readall_publish_payload(client, nct.payload_buf, length);
   2e124:	4630      	mov	r0, r6
   2e126:	4963      	ldr	r1, [pc, #396]	; (2e2b4 <nct_mqtt_evt_handler+0x228>)
   2e128:	f010 fdc2 	bl	3ecb0 <mqtt_readall_publish_payload>
		if (err < 0) {
   2e12c:	1e02      	subs	r2, r0, #0
   2e12e:	da0c      	bge.n	2e14a <nct_mqtt_evt_handler+0xbe>
			LOG_ERR("publish_get_payload: failed %d", err);
   2e130:	f045 0001 	orr.w	r0, r5, #1
   2e134:	4960      	ldr	r1, [pc, #384]	; (2e2b8 <nct_mqtt_evt_handler+0x22c>)
   2e136:	f00f f8e3 	bl	3d300 <log_string_sync>
			mqtt_disconnect(mqtt_client);
   2e13a:	4630      	mov	r0, r6
   2e13c:	f010 fcb4 	bl	3eaa8 <mqtt_disconnect>
		}
	}
}
   2e140:	b013      	add	sp, #76	; 0x4c
   2e142:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2e144:	f06f 0279 	mvn.w	r2, #121	; 0x79
   2e148:	e7f2      	b.n	2e130 <nct_mqtt_evt_handler+0xa4>
	for (uint32_t index = 0; index < list_size; index++) {
   2e14a:	2500      	movs	r5, #0
   2e14c:	4f5b      	ldr	r7, [pc, #364]	; (2e2bc <nct_mqtt_evt_handler+0x230>)
	return (strncmp(s1, s2, MIN(s1_len, s2_len))) ? false : true;
   2e14e:	68a2      	ldr	r2, [r4, #8]
   2e150:	687b      	ldr	r3, [r7, #4]
   2e152:	6839      	ldr	r1, [r7, #0]
   2e154:	429a      	cmp	r2, r3
   2e156:	bf28      	it	cs
   2e158:	461a      	movcs	r2, r3
   2e15a:	6860      	ldr	r0, [r4, #4]
   2e15c:	f013 ffa8 	bl	420b0 <strncmp>
		if (strings_compare(
   2e160:	2800      	cmp	r0, #0
   2e162:	d12a      	bne.n	2e1ba <nct_mqtt_evt_handler+0x12e>
			*opcode = nct_cc_rx_opcode_map[index];
   2e164:	4b56      	ldr	r3, [pc, #344]	; (2e2c0 <nct_mqtt_evt_handler+0x234>)
   2e166:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   2e16a:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			cc.id = p->message_id;
   2e16e:	8b23      	ldrh	r3, [r4, #24]
   2e170:	9310      	str	r3, [sp, #64]	; 0x40
			cc.data.ptr = nct.payload_buf;
   2e172:	4b50      	ldr	r3, [pc, #320]	; (2e2b4 <nct_mqtt_evt_handler+0x228>)
   2e174:	930d      	str	r3, [sp, #52]	; 0x34
			cc.data.len = p->message.payload.len;
   2e176:	6963      	ldr	r3, [r4, #20]
   2e178:	930c      	str	r3, [sp, #48]	; 0x30
			cc.topic.len = p->message.topic.topic.size;
   2e17a:	68a3      	ldr	r3, [r4, #8]
   2e17c:	930e      	str	r3, [sp, #56]	; 0x38
			cc.topic.ptr = p->message.topic.topic.utf8;
   2e17e:	6863      	ldr	r3, [r4, #4]
   2e180:	930f      	str	r3, [sp, #60]	; 0x3c
			evt.type = NCT_EVT_CC_RX_DATA;
   2e182:	2303      	movs	r3, #3
   2e184:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.cc = &cc;
   2e188:	ab0c      	add	r3, sp, #48	; 0x30
			evt.param.dc = &dc;
   2e18a:	9305      	str	r3, [sp, #20]
		if (p->message.topic.qos == MQTT_QOS_1_AT_LEAST_ONCE) {
   2e18c:	7b23      	ldrb	r3, [r4, #12]
   2e18e:	2b01      	cmp	r3, #1
   2e190:	d106      	bne.n	2e1a0 <nct_mqtt_evt_handler+0x114>
			const struct mqtt_puback_param ack = {
   2e192:	8b23      	ldrh	r3, [r4, #24]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2e194:	4630      	mov	r0, r6
   2e196:	a903      	add	r1, sp, #12
			const struct mqtt_puback_param ack = {
   2e198:	f8ad 300c 	strh.w	r3, [sp, #12]
			mqtt_publish_qos1_ack(mqtt_client, &ack);
   2e19c:	f010 fc5d 	bl	3ea5a <mqtt_publish_qos1_ack>
		err = nct_input(&evt);
   2e1a0:	a804      	add	r0, sp, #16
   2e1a2:	f7ff f9c1 	bl	2d528 <nct_input>
		if (err != 0) {
   2e1a6:	2800      	cmp	r0, #0
   2e1a8:	d0ca      	beq.n	2e140 <nct_mqtt_evt_handler+0xb4>
   2e1aa:	4a3d      	ldr	r2, [pc, #244]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e1ac:	4b3b      	ldr	r3, [pc, #236]	; (2e29c <nct_mqtt_evt_handler+0x210>)
			LOG_ERR("nct_input: failed %d", err);
   2e1ae:	4945      	ldr	r1, [pc, #276]	; (2e2c4 <nct_mqtt_evt_handler+0x238>)
   2e1b0:	1a9b      	subs	r3, r3, r2
   2e1b2:	08db      	lsrs	r3, r3, #3
   2e1b4:	4602      	mov	r2, r0
   2e1b6:	019b      	lsls	r3, r3, #6
   2e1b8:	e77d      	b.n	2e0b6 <nct_mqtt_evt_handler+0x2a>
	for (uint32_t index = 0; index < list_size; index++) {
   2e1ba:	3501      	adds	r5, #1
   2e1bc:	2d03      	cmp	r5, #3
   2e1be:	f107 070c 	add.w	r7, r7, #12
   2e1c2:	d1c4      	bne.n	2e14e <nct_mqtt_evt_handler+0xc2>
			dc.id = p->message_id;
   2e1c4:	8b23      	ldrh	r3, [r4, #24]
   2e1c6:	930b      	str	r3, [sp, #44]	; 0x2c
			dc.data.ptr = nct.payload_buf;
   2e1c8:	4b3a      	ldr	r3, [pc, #232]	; (2e2b4 <nct_mqtt_evt_handler+0x228>)
   2e1ca:	9308      	str	r3, [sp, #32]
			dc.data.len = p->message.payload.len;
   2e1cc:	6963      	ldr	r3, [r4, #20]
   2e1ce:	9307      	str	r3, [sp, #28]
			dc.topic.len = p->message.topic.topic.size;
   2e1d0:	68a3      	ldr	r3, [r4, #8]
   2e1d2:	9309      	str	r3, [sp, #36]	; 0x24
			dc.topic.ptr = p->message.topic.topic.utf8;
   2e1d4:	6863      	ldr	r3, [r4, #4]
   2e1d6:	930a      	str	r3, [sp, #40]	; 0x28
			evt.type = NCT_EVT_DC_RX_DATA;
   2e1d8:	2305      	movs	r3, #5
   2e1da:	f88d 3018 	strb.w	r3, [sp, #24]
			evt.param.dc = &dc;
   2e1de:	ab07      	add	r3, sp, #28
   2e1e0:	e7d3      	b.n	2e18a <nct_mqtt_evt_handler+0xfe>
   2e1e2:	4b2f      	ldr	r3, [pc, #188]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e1e4:	4d2d      	ldr	r5, [pc, #180]	; (2e29c <nct_mqtt_evt_handler+0x210>)
		LOG_DBG("MQTT_EVT_SUBACK: id = %d result = %d",
   2e1e6:	4a30      	ldr	r2, [pc, #192]	; (2e2a8 <nct_mqtt_evt_handler+0x21c>)
   2e1e8:	1aed      	subs	r5, r5, r3
   2e1ea:	08ed      	lsrs	r5, r5, #3
   2e1ec:	69e3      	ldr	r3, [r4, #28]
   2e1ee:	01ad      	lsls	r5, r5, #6
   2e1f0:	9300      	str	r3, [sp, #0]
   2e1f2:	4935      	ldr	r1, [pc, #212]	; (2e2c8 <nct_mqtt_evt_handler+0x23c>)
   2e1f4:	88a3      	ldrh	r3, [r4, #4]
   2e1f6:	f045 0004 	orr.w	r0, r5, #4
   2e1fa:	f00f f881 	bl	3d300 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2e1fe:	f240 42d2 	movw	r2, #1234	; 0x4d2
   2e202:	88a3      	ldrh	r3, [r4, #4]
   2e204:	4293      	cmp	r3, r2
   2e206:	d135      	bne.n	2e274 <nct_mqtt_evt_handler+0x1e8>
			evt.type = NCT_EVT_CC_CONNECTED;
   2e208:	2301      	movs	r3, #1
   2e20a:	e776      	b.n	2e0fa <nct_mqtt_evt_handler+0x6e>
   2e20c:	4b24      	ldr	r3, [pc, #144]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e20e:	4823      	ldr	r0, [pc, #140]	; (2e29c <nct_mqtt_evt_handler+0x210>)
		LOG_DBG("MQTT_EVT_UNSUBACK");
   2e210:	4a25      	ldr	r2, [pc, #148]	; (2e2a8 <nct_mqtt_evt_handler+0x21c>)
   2e212:	1ac0      	subs	r0, r0, r3
   2e214:	08c0      	lsrs	r0, r0, #3
   2e216:	0180      	lsls	r0, r0, #6
   2e218:	492c      	ldr	r1, [pc, #176]	; (2e2cc <nct_mqtt_evt_handler+0x240>)
   2e21a:	f040 0004 	orr.w	r0, r0, #4
   2e21e:	f00f f86f 	bl	3d300 <log_string_sync>
		if (_mqtt_evt->param.suback.message_id == NCT_CC_SUBSCRIBE_ID) {
   2e222:	f240 43d2 	movw	r3, #1234	; 0x4d2
   2e226:	88a2      	ldrh	r2, [r4, #4]
   2e228:	429a      	cmp	r2, r3
   2e22a:	d189      	bne.n	2e140 <nct_mqtt_evt_handler+0xb4>
			evt.type = NCT_EVT_CC_DISCONNECTED;
   2e22c:	2307      	movs	r3, #7
   2e22e:	e764      	b.n	2e0fa <nct_mqtt_evt_handler+0x6e>
   2e230:	4b1b      	ldr	r3, [pc, #108]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e232:	481a      	ldr	r0, [pc, #104]	; (2e29c <nct_mqtt_evt_handler+0x210>)
		LOG_DBG("MQTT_EVT_PUBACK: id = %d result = %d",
   2e234:	4a1c      	ldr	r2, [pc, #112]	; (2e2a8 <nct_mqtt_evt_handler+0x21c>)
   2e236:	1ac0      	subs	r0, r0, r3
   2e238:	08c0      	lsrs	r0, r0, #3
   2e23a:	69e3      	ldr	r3, [r4, #28]
   2e23c:	0180      	lsls	r0, r0, #6
   2e23e:	9300      	str	r3, [sp, #0]
   2e240:	4923      	ldr	r1, [pc, #140]	; (2e2d0 <nct_mqtt_evt_handler+0x244>)
   2e242:	88a3      	ldrh	r3, [r4, #4]
   2e244:	f040 0004 	orr.w	r0, r0, #4
   2e248:	f00f f85a 	bl	3d300 <log_string_sync>
		evt.type = NCT_EVT_CC_TX_DATA_ACK;
   2e24c:	2304      	movs	r3, #4
   2e24e:	f88d 3018 	strb.w	r3, [sp, #24]
		evt.param.data_id = _mqtt_evt->param.puback.message_id;
   2e252:	88a3      	ldrh	r3, [r4, #4]
   2e254:	9305      	str	r3, [sp, #20]
	if (event_notify) {
   2e256:	e7a3      	b.n	2e1a0 <nct_mqtt_evt_handler+0x114>
   2e258:	4b11      	ldr	r3, [pc, #68]	; (2e2a0 <nct_mqtt_evt_handler+0x214>)
   2e25a:	4810      	ldr	r0, [pc, #64]	; (2e29c <nct_mqtt_evt_handler+0x210>)
		LOG_DBG("MQTT_EVT_DISCONNECT: result = %d", _mqtt_evt->result);
   2e25c:	4a12      	ldr	r2, [pc, #72]	; (2e2a8 <nct_mqtt_evt_handler+0x21c>)
   2e25e:	1ac0      	subs	r0, r0, r3
   2e260:	08c0      	lsrs	r0, r0, #3
   2e262:	0180      	lsls	r0, r0, #6
   2e264:	69e3      	ldr	r3, [r4, #28]
   2e266:	491b      	ldr	r1, [pc, #108]	; (2e2d4 <nct_mqtt_evt_handler+0x248>)
   2e268:	f040 0004 	orr.w	r0, r0, #4
   2e26c:	f00f f848 	bl	3d300 <log_string_sync>
		evt.type = NCT_EVT_DISCONNECTED;
   2e270:	2309      	movs	r3, #9
   2e272:	e742      	b.n	2e0fa <nct_mqtt_evt_handler+0x6e>
		if (_mqtt_evt->param.suback.message_id == NCT_DC_SUBSCRIBE_ID) {
   2e274:	f242 223d 	movw	r2, #8765	; 0x223d
   2e278:	4293      	cmp	r3, r2
   2e27a:	f47f af61 	bne.w	2e140 <nct_mqtt_evt_handler+0xb4>
			evt.type = NCT_EVT_DC_CONNECTED;
   2e27e:	2302      	movs	r3, #2
   2e280:	f88d 3018 	strb.w	r3, [sp, #24]
			err = nrf_cloud_fota_subscribe();
   2e284:	f001 fdf2 	bl	2fe6c <nrf_cloud_fota_subscribe>
			if (err) {
   2e288:	4602      	mov	r2, r0
   2e28a:	2800      	cmp	r0, #0
   2e28c:	d088      	beq.n	2e1a0 <nct_mqtt_evt_handler+0x114>
				LOG_ERR("FOTA MQTT subscribe failed: %d", err);
   2e28e:	4912      	ldr	r1, [pc, #72]	; (2e2d8 <nct_mqtt_evt_handler+0x24c>)
   2e290:	f045 0001 	orr.w	r0, r5, #1
   2e294:	f00f f834 	bl	3d300 <log_string_sync>
	if (event_notify) {
   2e298:	e782      	b.n	2e1a0 <nct_mqtt_evt_handler+0x114>
   2e29a:	bf00      	nop
   2e29c:	000434ac 	.word	0x000434ac
   2e2a0:	0004339c 	.word	0x0004339c
   2e2a4:	00048e23 	.word	0x00048e23
   2e2a8:	0004938b 	.word	0x0004938b
   2e2ac:	00048e4f 	.word	0x00048e4f
   2e2b0:	00048e6f 	.word	0x00048e6f
   2e2b4:	20019518 	.word	0x20019518
   2e2b8:	00048e96 	.word	0x00048e96
   2e2bc:	00043e4c 	.word	0x00043e4c
   2e2c0:	00043e70 	.word	0x00043e70
   2e2c4:	00048f61 	.word	0x00048f61
   2e2c8:	00048eb5 	.word	0x00048eb5
   2e2cc:	00048efd 	.word	0x00048efd
   2e2d0:	00048f13 	.word	0x00048f13
   2e2d4:	00048f3c 	.word	0x00048f3c
   2e2d8:	00048ede 	.word	0x00048ede

0002e2dc <nct_mqtt_connect>:
{
   2e2dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2e2e0:	4d3b      	ldr	r5, [pc, #236]	; (2e3d0 <nct_mqtt_connect+0xf4>)
   2e2e2:	4b3c      	ldr	r3, [pc, #240]	; (2e3d4 <nct_mqtt_connect+0xf8>)
	if (!initialized) {
   2e2e4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 2e3fc <nct_mqtt_connect+0x120>
   2e2e8:	1aed      	subs	r5, r5, r3
   2e2ea:	f898 6000 	ldrb.w	r6, [r8]
   2e2ee:	08ed      	lsrs	r5, r5, #3
   2e2f0:	4c39      	ldr	r4, [pc, #228]	; (2e3d8 <nct_mqtt_connect+0xfc>)
   2e2f2:	01ad      	lsls	r5, r5, #6
   2e2f4:	2e00      	cmp	r6, #0
   2e2f6:	d13b      	bne.n	2e370 <nct_mqtt_connect+0x94>
		mqtt_client_init(&nct.client);
   2e2f8:	f104 001c 	add.w	r0, r4, #28
   2e2fc:	f010 fb0c 	bl	3e918 <mqtt_client_init>
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2e300:	f104 039c 	add.w	r3, r4, #156	; 0x9c
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2e304:	4835      	ldr	r0, [pc, #212]	; (2e3dc <nct_mqtt_connect+0x100>)
		nct.client.broker = (struct sockaddr *)&nct.broker;
   2e306:	66e3      	str	r3, [r4, #108]	; 0x6c
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2e308:	4b35      	ldr	r3, [pc, #212]	; (2e3e0 <nct_mqtt_connect+0x104>)
		nct.client.client_id.utf8 = (uint8_t *)client_id_buf;
   2e30a:	6660      	str	r0, [r4, #100]	; 0x64
		nct.client.evt_cb = nct_mqtt_evt_handler;
   2e30c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		nct.client.client_id.size = strlen(client_id_buf);
   2e310:	f7ee ffa4 	bl	1d25c <strlen>
		nct.client.protocol_version = MQTT_VERSION_3_1_1;
   2e314:	2304      	movs	r3, #4
   2e316:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e31a:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
		LOG_DBG("MQTT clean session flag: %u",
   2e31e:	4a31      	ldr	r2, [pc, #196]	; (2e3e4 <nct_mqtt_connect+0x108>)
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e320:	f043 0302 	orr.w	r3, r3, #2
		LOG_DBG("MQTT clean session flag: %u",
   2e324:	4930      	ldr	r1, [pc, #192]	; (2e3e8 <nct_mqtt_connect+0x10c>)
		nct.client.client_id.size = strlen(client_id_buf);
   2e326:	66a0      	str	r0, [r4, #104]	; 0x68
		nct.client.clean_session = persistent_session ? 0U : 1U;
   2e328:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
		LOG_DBG("MQTT clean session flag: %u",
   2e32c:	f045 0004 	orr.w	r0, r5, #4
   2e330:	2301      	movs	r3, #1
		nct.client.user_name = NULL;
   2e332:	e9c4 661c 	strd	r6, r6, [r4, #112]	; 0x70
		LOG_DBG("MQTT clean session flag: %u",
   2e336:	f00e ffe3 	bl	3d300 <log_string_sync>
		nct.client.rx_buf = nct.rx_buf;
   2e33a:	f104 03d8 	add.w	r3, r4, #216	; 0xd8
   2e33e:	4627      	mov	r7, r4
   2e340:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2e344:	f44f 7380 	mov.w	r3, #256	; 0x100
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2e348:	f04f 0c01 	mov.w	ip, #1
		nct.client.tx_buf = nct.tx_buf;
   2e34c:	f504 72ec 	add.w	r2, r4, #472	; 0x1d8
   2e350:	f104 0648 	add.w	r6, r4, #72	; 0x48
		nct.client.tx_buf_size = sizeof(nct.tx_buf);
   2e354:	e9c4 2323 	strd	r2, r3, [r4, #140]	; 0x8c
		nct.client.rx_buf_size = sizeof(nct.rx_buf);
   2e358:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   2e35c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2e35e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2e360:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   2e364:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		nct.client.transport.type = MQTT_TRANSPORT_SECURE;
   2e368:	f884 c040 	strb.w	ip, [r4, #64]	; 0x40
		initialized = true;
   2e36c:	f888 c000 	strb.w	ip, [r8]
	err = mqtt_connect(&nct.client);
   2e370:	481e      	ldr	r0, [pc, #120]	; (2e3ec <nct_mqtt_connect+0x110>)
   2e372:	f010 faea 	bl	3e94a <mqtt_connect>
	if (err != 0) {
   2e376:	4606      	mov	r6, r0
   2e378:	b150      	cbz	r0, 2e390 <nct_mqtt_connect+0xb4>
		LOG_DBG("mqtt_connect failed %d", err);
   2e37a:	4603      	mov	r3, r0
   2e37c:	4a19      	ldr	r2, [pc, #100]	; (2e3e4 <nct_mqtt_connect+0x108>)
   2e37e:	491c      	ldr	r1, [pc, #112]	; (2e3f0 <nct_mqtt_connect+0x114>)
   2e380:	f045 0004 	orr.w	r0, r5, #4
   2e384:	f00e ffbc 	bl	3d300 <log_string_sync>
}
   2e388:	4630      	mov	r0, r6
   2e38a:	b004      	add	sp, #16
   2e38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct timeval timeout = {
   2e390:	273c      	movs	r7, #60	; 0x3c
   2e392:	9003      	str	r0, [sp, #12]
   2e394:	9702      	str	r7, [sp, #8]
	return mqtt_keepalive_time_left(&nct.client);
}

int nct_socket_get(void)
{
	return nct.client.transport.tls.sock;
   2e396:	6c60      	ldr	r0, [r4, #68]	; 0x44
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke5(*(uintptr_t *)&sock, *(uintptr_t *)&level, *(uintptr_t *)&optname, *(uintptr_t *)&optval, *(uintptr_t *)&optlen, K_SYSCALL_ZSOCK_SETSOCKOPT);
	}
#endif
	compiler_barrier();
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   2e398:	2308      	movs	r3, #8
   2e39a:	2215      	movs	r2, #21
   2e39c:	9300      	str	r3, [sp, #0]
   2e39e:	2101      	movs	r1, #1
   2e3a0:	446b      	add	r3, sp
   2e3a2:	f00f fbb0 	bl	3db06 <z_impl_zsock_setsockopt>
		if (err == -1) {
   2e3a6:	1c43      	adds	r3, r0, #1
   2e3a8:	4604      	mov	r4, r0
   2e3aa:	d109      	bne.n	2e3c0 <nct_mqtt_connect+0xe4>
			LOG_ERR("Failed to set timeout, errno: %d", errno);
   2e3ac:	f00f fe95 	bl	3e0da <__errno>
   2e3b0:	f045 0501 	orr.w	r5, r5, #1
   2e3b4:	6802      	ldr	r2, [r0, #0]
   2e3b6:	490f      	ldr	r1, [pc, #60]	; (2e3f4 <nct_mqtt_connect+0x118>)
   2e3b8:	4628      	mov	r0, r5
   2e3ba:	f00e ffa1 	bl	3d300 <log_string_sync>
			err = 0;
   2e3be:	e7e3      	b.n	2e388 <nct_mqtt_connect+0xac>
			LOG_INF("Using socket send timeout of %d seconds",
   2e3c0:	463a      	mov	r2, r7
   2e3c2:	490d      	ldr	r1, [pc, #52]	; (2e3f8 <nct_mqtt_connect+0x11c>)
   2e3c4:	f045 0003 	orr.w	r0, r5, #3
   2e3c8:	f00e ff9a 	bl	3d300 <log_string_sync>
   2e3cc:	4626      	mov	r6, r4
	return err;
   2e3ce:	e7db      	b.n	2e388 <nct_mqtt_connect+0xac>
   2e3d0:	000434ac 	.word	0x000434ac
   2e3d4:	0004339c 	.word	0x0004339c
   2e3d8:	20019240 	.word	0x20019240
   2e3dc:	2002075e 	.word	0x2002075e
   2e3e0:	0002e08d 	.word	0x0002e08d
   2e3e4:	0004937a 	.word	0x0004937a
   2e3e8:	00048f76 	.word	0x00048f76
   2e3ec:	2001925c 	.word	0x2001925c
   2e3f0:	00048f96 	.word	0x00048f96
   2e3f4:	00048fb1 	.word	0x00048fb1
   2e3f8:	00048fd2 	.word	0x00048fd2
   2e3fc:	20020772 	.word	0x20020772

0002e400 <nct_init>:
{
   2e400:	b570      	push	{r4, r5, r6, lr}
   2e402:	b088      	sub	sp, #32
	ret = settings_subsys_init();
   2e404:	f7f7 f852 	bl	254ac <settings_subsys_init>
	if (ret) {
   2e408:	4604      	mov	r4, r0
   2e40a:	2800      	cmp	r0, #0
   2e40c:	f000 8099 	beq.w	2e542 <nct_init+0x142>
		LOG_ERR("Settings init failed: %d", ret);
   2e410:	4622      	mov	r2, r4
   2e412:	485a      	ldr	r0, [pc, #360]	; (2e57c <nct_init+0x17c>)
   2e414:	4b5a      	ldr	r3, [pc, #360]	; (2e580 <nct_init+0x180>)
   2e416:	495b      	ldr	r1, [pc, #364]	; (2e584 <nct_init+0x184>)
   2e418:	1ac0      	subs	r0, r0, r3
   2e41a:	08c0      	lsrs	r0, r0, #3
   2e41c:	0180      	lsls	r0, r0, #6
   2e41e:	f040 0001 	orr.w	r0, r0, #1
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   2e422:	f00e ff6d 	bl	3d300 <log_string_sync>
}
   2e426:	4620      	mov	r0, r4
   2e428:	b008      	add	sp, #32
   2e42a:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%.*s",
   2e42c:	230f      	movs	r3, #15
   2e42e:	2114      	movs	r1, #20
   2e430:	4a55      	ldr	r2, [pc, #340]	; (2e588 <nct_init+0x188>)
	imei_buf[NRF_IMEI_LEN] = 0;
   2e432:	f88d 001b 	strb.w	r0, [sp, #27]
	snprintf(id, NRF_CLOUD_CLIENT_ID_LEN + 1, "%s%.*s",
   2e436:	9300      	str	r3, [sp, #0]
   2e438:	4854      	ldr	r0, [pc, #336]	; (2e58c <nct_init+0x18c>)
   2e43a:	4b55      	ldr	r3, [pc, #340]	; (2e590 <nct_init+0x190>)
   2e43c:	9601      	str	r6, [sp, #4]
   2e43e:	f00d f875 	bl	3b52c <sniprintf>
	LOG_DBG("client_id = %s", log_strdup(id));
   2e442:	4852      	ldr	r0, [pc, #328]	; (2e58c <nct_init+0x18c>)
   2e444:	f00e ff6f 	bl	3d326 <log_strdup>
   2e448:	f045 0504 	orr.w	r5, r5, #4
   2e44c:	4603      	mov	r3, r0
   2e44e:	4a51      	ldr	r2, [pc, #324]	; (2e594 <nct_init+0x194>)
   2e450:	4628      	mov	r0, r5
   2e452:	4951      	ldr	r1, [pc, #324]	; (2e598 <nct_init+0x198>)
   2e454:	f00e ff54 	bl	3d300 <log_string_sync>
	ret = snprintf(shadow_base_topic, sizeof(shadow_base_topic),
   2e458:	2127      	movs	r1, #39	; 0x27
   2e45a:	4b4c      	ldr	r3, [pc, #304]	; (2e58c <nct_init+0x18c>)
   2e45c:	4a4f      	ldr	r2, [pc, #316]	; (2e59c <nct_init+0x19c>)
   2e45e:	4850      	ldr	r0, [pc, #320]	; (2e5a0 <nct_init+0x1a0>)
   2e460:	f00d f864 	bl	3b52c <sniprintf>
	if (ret != NCT_SHADOW_BASE_TOPIC_LEN) {
   2e464:	2826      	cmp	r0, #38	; 0x26
   2e466:	d002      	beq.n	2e46e <nct_init+0x6e>
		return -ENOMEM;
   2e468:	f06f 040b 	mvn.w	r4, #11
   2e46c:	e7db      	b.n	2e426 <nct_init+0x26>
	LOG_DBG("shadow_base_topic: %s", log_strdup(shadow_base_topic));
   2e46e:	484c      	ldr	r0, [pc, #304]	; (2e5a0 <nct_init+0x1a0>)
   2e470:	f00e ff59 	bl	3d326 <log_strdup>
   2e474:	4a4b      	ldr	r2, [pc, #300]	; (2e5a4 <nct_init+0x1a4>)
   2e476:	4603      	mov	r3, r0
   2e478:	494b      	ldr	r1, [pc, #300]	; (2e5a8 <nct_init+0x1a8>)
   2e47a:	4628      	mov	r0, r5
   2e47c:	f00e ff40 	bl	3d300 <log_string_sync>
	ret = snprintf(accepted_topic, sizeof(accepted_topic),
   2e480:	2128      	movs	r1, #40	; 0x28
   2e482:	4b42      	ldr	r3, [pc, #264]	; (2e58c <nct_init+0x18c>)
   2e484:	4a49      	ldr	r2, [pc, #292]	; (2e5ac <nct_init+0x1ac>)
   2e486:	484a      	ldr	r0, [pc, #296]	; (2e5b0 <nct_init+0x1b0>)
   2e488:	f00d f850 	bl	3b52c <sniprintf>
	if (ret != NCT_ACCEPTED_TOPIC_LEN) {
   2e48c:	2827      	cmp	r0, #39	; 0x27
   2e48e:	d1eb      	bne.n	2e468 <nct_init+0x68>
	LOG_DBG("accepted_topic: %s", log_strdup(accepted_topic));
   2e490:	4847      	ldr	r0, [pc, #284]	; (2e5b0 <nct_init+0x1b0>)
   2e492:	f00e ff48 	bl	3d326 <log_strdup>
   2e496:	4a43      	ldr	r2, [pc, #268]	; (2e5a4 <nct_init+0x1a4>)
   2e498:	4603      	mov	r3, r0
   2e49a:	4946      	ldr	r1, [pc, #280]	; (2e5b4 <nct_init+0x1b4>)
   2e49c:	4628      	mov	r0, r5
   2e49e:	f00e ff2f 	bl	3d300 <log_string_sync>
	ret = snprintf(rejected_topic, sizeof(rejected_topic),
   2e4a2:	2134      	movs	r1, #52	; 0x34
   2e4a4:	4b39      	ldr	r3, [pc, #228]	; (2e58c <nct_init+0x18c>)
   2e4a6:	4a44      	ldr	r2, [pc, #272]	; (2e5b8 <nct_init+0x1b8>)
   2e4a8:	4844      	ldr	r0, [pc, #272]	; (2e5bc <nct_init+0x1bc>)
   2e4aa:	f00d f83f 	bl	3b52c <sniprintf>
	if (ret != NCT_REJECTED_TOPIC_LEN) {
   2e4ae:	2833      	cmp	r0, #51	; 0x33
   2e4b0:	d1da      	bne.n	2e468 <nct_init+0x68>
	LOG_DBG("rejected_topic: %s", log_strdup(rejected_topic));
   2e4b2:	4842      	ldr	r0, [pc, #264]	; (2e5bc <nct_init+0x1bc>)
   2e4b4:	f00e ff37 	bl	3d326 <log_strdup>
   2e4b8:	4a3a      	ldr	r2, [pc, #232]	; (2e5a4 <nct_init+0x1a4>)
   2e4ba:	4603      	mov	r3, r0
   2e4bc:	4940      	ldr	r1, [pc, #256]	; (2e5c0 <nct_init+0x1c0>)
   2e4be:	4628      	mov	r0, r5
   2e4c0:	f00e ff1e 	bl	3d300 <log_string_sync>
	ret = snprintf(update_delta_topic, sizeof(update_delta_topic),
   2e4c4:	2134      	movs	r1, #52	; 0x34
   2e4c6:	4b31      	ldr	r3, [pc, #196]	; (2e58c <nct_init+0x18c>)
   2e4c8:	4a3e      	ldr	r2, [pc, #248]	; (2e5c4 <nct_init+0x1c4>)
   2e4ca:	483f      	ldr	r0, [pc, #252]	; (2e5c8 <nct_init+0x1c8>)
   2e4cc:	f00d f82e 	bl	3b52c <sniprintf>
	if (ret != NCT_UPDATE_DELTA_TOPIC_LEN) {
   2e4d0:	2833      	cmp	r0, #51	; 0x33
   2e4d2:	d1c9      	bne.n	2e468 <nct_init+0x68>
	LOG_DBG("update_delta_topic: %s", log_strdup(update_delta_topic));
   2e4d4:	483c      	ldr	r0, [pc, #240]	; (2e5c8 <nct_init+0x1c8>)
   2e4d6:	f00e ff26 	bl	3d326 <log_strdup>
   2e4da:	4a32      	ldr	r2, [pc, #200]	; (2e5a4 <nct_init+0x1a4>)
   2e4dc:	4603      	mov	r3, r0
   2e4de:	493b      	ldr	r1, [pc, #236]	; (2e5cc <nct_init+0x1cc>)
   2e4e0:	4628      	mov	r0, r5
   2e4e2:	f00e ff0d 	bl	3d300 <log_string_sync>
	ret = snprintf(update_topic, sizeof(update_topic), NCT_UPDATE_TOPIC,
   2e4e6:	212e      	movs	r1, #46	; 0x2e
   2e4e8:	4b28      	ldr	r3, [pc, #160]	; (2e58c <nct_init+0x18c>)
   2e4ea:	4a39      	ldr	r2, [pc, #228]	; (2e5d0 <nct_init+0x1d0>)
   2e4ec:	4839      	ldr	r0, [pc, #228]	; (2e5d4 <nct_init+0x1d4>)
   2e4ee:	f00d f81d 	bl	3b52c <sniprintf>
	if (ret != NCT_UPDATE_TOPIC_LEN) {
   2e4f2:	282d      	cmp	r0, #45	; 0x2d
   2e4f4:	d1b8      	bne.n	2e468 <nct_init+0x68>
	LOG_DBG("update_topic: %s", log_strdup(update_topic));
   2e4f6:	4837      	ldr	r0, [pc, #220]	; (2e5d4 <nct_init+0x1d4>)
   2e4f8:	f00e ff15 	bl	3d326 <log_strdup>
   2e4fc:	4a29      	ldr	r2, [pc, #164]	; (2e5a4 <nct_init+0x1a4>)
   2e4fe:	4603      	mov	r3, r0
   2e500:	4935      	ldr	r1, [pc, #212]	; (2e5d8 <nct_init+0x1d8>)
   2e502:	4628      	mov	r0, r5
   2e504:	f00e fefc 	bl	3d300 <log_string_sync>
	ret = snprintf(shadow_get_topic, sizeof(shadow_get_topic),
   2e508:	212b      	movs	r1, #43	; 0x2b
   2e50a:	4b20      	ldr	r3, [pc, #128]	; (2e58c <nct_init+0x18c>)
   2e50c:	4a33      	ldr	r2, [pc, #204]	; (2e5dc <nct_init+0x1dc>)
   2e50e:	4834      	ldr	r0, [pc, #208]	; (2e5e0 <nct_init+0x1e0>)
   2e510:	f00d f80c 	bl	3b52c <sniprintf>
	if (ret != NCT_SHADOW_GET_LEN) {
   2e514:	282a      	cmp	r0, #42	; 0x2a
   2e516:	d1a7      	bne.n	2e468 <nct_init+0x68>
	LOG_DBG("shadow_get_topic: %s", log_strdup(shadow_get_topic));
   2e518:	4831      	ldr	r0, [pc, #196]	; (2e5e0 <nct_init+0x1e0>)
   2e51a:	f00e ff04 	bl	3d326 <log_strdup>
   2e51e:	4a21      	ldr	r2, [pc, #132]	; (2e5a4 <nct_init+0x1a4>)
   2e520:	4603      	mov	r3, r0
   2e522:	4930      	ldr	r1, [pc, #192]	; (2e5e4 <nct_init+0x1e4>)
   2e524:	4628      	mov	r0, r5
   2e526:	f00e feeb 	bl	3d300 <log_string_sync>
	nct.tls_config.peer_verify = 2;
   2e52a:	2202      	movs	r2, #2
   2e52c:	4b2e      	ldr	r3, [pc, #184]	; (2e5e8 <nct_init+0x1e8>)
	nct.tls_config.cipher_count = 0;
   2e52e:	e9c3 2400 	strd	r2, r4, [r3]
	nct.tls_config.sec_tag_count = ARRAY_SIZE(sec_tag_list);
   2e532:	2201      	movs	r2, #1
   2e534:	60da      	str	r2, [r3, #12]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2e536:	4a2d      	ldr	r2, [pc, #180]	; (2e5ec <nct_init+0x1ec>)
	nct.tls_config.cipher_list = NULL;
   2e538:	609c      	str	r4, [r3, #8]
	nct.tls_config.sec_tag_list = sec_tag_list;
   2e53a:	611a      	str	r2, [r3, #16]
	nct.tls_config.hostname = NRF_CLOUD_HOSTNAME;
   2e53c:	4a2c      	ldr	r2, [pc, #176]	; (2e5f0 <nct_init+0x1f0>)
   2e53e:	615a      	str	r2, [r3, #20]
	return nct_provision();
   2e540:	e771      	b.n	2e426 <nct_init+0x26>
	err = nrf_cloud_fota_init(nrf_cloud_fota_cb_handler);
   2e542:	482c      	ldr	r0, [pc, #176]	; (2e5f4 <nct_init+0x1f4>)
   2e544:	f001 fb1c 	bl	2fb80 <nrf_cloud_fota_init>
	if (err < 0) {
   2e548:	1e04      	subs	r4, r0, #0
   2e54a:	f6ff af6c 	blt.w	2e426 <nct_init+0x26>
	err = at_cmd_write("AT+CGSN", imei_buf, sizeof(imei_buf), NULL);
   2e54e:	ae03      	add	r6, sp, #12
	dc_endpoint_reset();
   2e550:	f7ff fc96 	bl	2de80 <dc_endpoint_reset>
	err = at_cmd_write("AT+CGSN", imei_buf, sizeof(imei_buf), NULL);
   2e554:	2300      	movs	r3, #0
   2e556:	2214      	movs	r2, #20
   2e558:	4631      	mov	r1, r6
   2e55a:	4827      	ldr	r0, [pc, #156]	; (2e5f8 <nct_init+0x1f8>)
   2e55c:	f7fc fa22 	bl	2a9a4 <at_cmd_write>
	if (err) {
   2e560:	4d06      	ldr	r5, [pc, #24]	; (2e57c <nct_init+0x17c>)
   2e562:	4b07      	ldr	r3, [pc, #28]	; (2e580 <nct_init+0x180>)
   2e564:	4604      	mov	r4, r0
   2e566:	1aed      	subs	r5, r5, r3
   2e568:	08ed      	lsrs	r5, r5, #3
   2e56a:	01ad      	lsls	r5, r5, #6
   2e56c:	2800      	cmp	r0, #0
   2e56e:	f43f af5d 	beq.w	2e42c <nct_init+0x2c>
		LOG_ERR("Failed to obtain IMEI, error: %d", err);
   2e572:	4602      	mov	r2, r0
   2e574:	4921      	ldr	r1, [pc, #132]	; (2e5fc <nct_init+0x1fc>)
   2e576:	f045 0001 	orr.w	r0, r5, #1
   2e57a:	e752      	b.n	2e422 <nct_init+0x22>
   2e57c:	000434ac 	.word	0x000434ac
   2e580:	0004339c 	.word	0x0004339c
   2e584:	00048ffa 	.word	0x00048ffa
   2e588:	00049039 	.word	0x00049039
   2e58c:	2002075e 	.word	0x2002075e
   2e590:	00049034 	.word	0x00049034
   2e594:	00049329 	.word	0x00049329
   2e598:	00049040 	.word	0x00049040
   2e59c:	00049053 	.word	0x00049053
   2e5a0:	200207a7 	.word	0x200207a7
   2e5a4:	0004933b 	.word	0x0004933b
   2e5a8:	00049069 	.word	0x00049069
   2e5ac:	00049083 	.word	0x00049083
   2e5b0:	20020736 	.word	0x20020736
   2e5b4:	0004909a 	.word	0x0004909a
   2e5b8:	000490b1 	.word	0x000490b1
   2e5bc:	20020773 	.word	0x20020773
   2e5c0:	000490d4 	.word	0x000490d4
   2e5c4:	000490eb 	.word	0x000490eb
   2e5c8:	200207f9 	.word	0x200207f9
   2e5cc:	0004910e 	.word	0x0004910e
   2e5d0:	00049129 	.word	0x00049129
   2e5d4:	2002082d 	.word	0x2002082d
   2e5d8:	00049146 	.word	0x00049146
   2e5dc:	0004915b 	.word	0x0004915b
   2e5e0:	200207ce 	.word	0x200207ce
   2e5e4:	00049175 	.word	0x00049175
   2e5e8:	20019240 	.word	0x20019240
   2e5ec:	200155fc 	.word	0x200155fc
   2e5f0:	0004918e 	.word	0x0004918e
   2e5f4:	0002df4d 	.word	0x0002df4d
   2e5f8:	00047e9f 	.word	0x00047e9f
   2e5fc:	00049013 	.word	0x00049013

0002e600 <nct_connect>:
{
   2e600:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e602:	b09d      	sub	sp, #116	; 0x74
	struct addrinfo hints = {
   2e604:	2250      	movs	r2, #80	; 0x50
   2e606:	2100      	movs	r1, #0
   2e608:	a808      	add	r0, sp, #32
   2e60a:	f013 fb68 	bl	41cde <memset>
   2e60e:	2301      	movs	r3, #1
   2e610:	2100      	movs	r1, #0
   2e612:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2e616:	4827      	ldr	r0, [pc, #156]	; (2e6b4 <nct_connect+0xb4>)
   2e618:	ab03      	add	r3, sp, #12
   2e61a:	aa08      	add	r2, sp, #32
   2e61c:	f00f f9c8 	bl	3d9b0 <zsock_getaddrinfo>
	if (err) {
   2e620:	4c25      	ldr	r4, [pc, #148]	; (2e6b8 <nct_connect+0xb8>)
   2e622:	4b26      	ldr	r3, [pc, #152]	; (2e6bc <nct_connect+0xbc>)
   2e624:	1ae4      	subs	r4, r4, r3
   2e626:	08e4      	lsrs	r4, r4, #3
   2e628:	4603      	mov	r3, r0
   2e62a:	b158      	cbz	r0, 2e644 <nct_connect+0x44>
		LOG_DBG("getaddrinfo failed %d", err);
   2e62c:	01a4      	lsls	r4, r4, #6
   2e62e:	f044 0004 	orr.w	r0, r4, #4
   2e632:	4a23      	ldr	r2, [pc, #140]	; (2e6c0 <nct_connect+0xc0>)
   2e634:	4923      	ldr	r1, [pc, #140]	; (2e6c4 <nct_connect+0xc4>)
   2e636:	f00e fe63 	bl	3d300 <log_string_sync>
		return -ECHILD;
   2e63a:	f06f 0409 	mvn.w	r4, #9
}
   2e63e:	4620      	mov	r0, r4
   2e640:	b01d      	add	sp, #116	; 0x74
   2e642:	bdf0      	pop	{r4, r5, r6, r7, pc}
	addr = result;
   2e644:	01a4      	lsls	r4, r4, #6
   2e646:	9d03      	ldr	r5, [sp, #12]
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2e648:	4f1d      	ldr	r7, [pc, #116]	; (2e6c0 <nct_connect+0xc0>)
   2e64a:	f044 0604 	orr.w	r6, r4, #4
	while (addr != NULL) {
   2e64e:	b915      	cbnz	r5, 2e656 <nct_connect+0x56>
	err = -ECHILD;
   2e650:	f06f 0409 	mvn.w	r4, #9
   2e654:	e01f      	b.n	2e696 <nct_connect+0x96>
		if ((addr->ai_addrlen == sizeof(struct sockaddr_in)) &&
   2e656:	696b      	ldr	r3, [r5, #20]
   2e658:	2b08      	cmp	r3, #8
   2e65a:	d120      	bne.n	2e69e <nct_connect+0x9e>
					->sin_addr.s_addr;
   2e65c:	69ab      	ldr	r3, [r5, #24]
			broker->sin_addr.s_addr =
   2e65e:	491a      	ldr	r1, [pc, #104]	; (2e6c8 <nct_connect+0xc8>)
					->sin_addr.s_addr;
   2e660:	685b      	ldr	r3, [r3, #4]
			broker->sin_addr.s_addr =
   2e662:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
			broker->sin_family = AF_INET;
   2e666:	4b19      	ldr	r3, [pc, #100]	; (2e6cc <nct_connect+0xcc>)
   2e668:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	if (z_syscall_trap()) {
		return (char *) arch_syscall_invoke4(*(uintptr_t *)&family, *(uintptr_t *)&src, *(uintptr_t *)&dst, *(uintptr_t *)&size, K_SYSCALL_NET_ADDR_NTOP);
	}
#endif
	compiler_barrier();
	return z_impl_net_addr_ntop(family, src, dst, size);
   2e66c:	2310      	movs	r3, #16
   2e66e:	31a0      	adds	r1, #160	; 0xa0
   2e670:	eb0d 0203 	add.w	r2, sp, r3
   2e674:	2001      	movs	r0, #1
   2e676:	f7f8 ff33 	bl	274e0 <z_impl_net_addr_ntop>
			LOG_DBG("IPv4 address: %s", log_strdup(addr_str));
   2e67a:	a804      	add	r0, sp, #16
   2e67c:	f00e fe53 	bl	3d326 <log_strdup>
   2e680:	f044 0404 	orr.w	r4, r4, #4
   2e684:	4603      	mov	r3, r0
   2e686:	4a0e      	ldr	r2, [pc, #56]	; (2e6c0 <nct_connect+0xc0>)
   2e688:	4620      	mov	r0, r4
   2e68a:	4911      	ldr	r1, [pc, #68]	; (2e6d0 <nct_connect+0xd0>)
   2e68c:	f00e fe38 	bl	3d300 <log_string_sync>
			err = nct_mqtt_connect();
   2e690:	f7ff fe24 	bl	2e2dc <nct_mqtt_connect>
   2e694:	4604      	mov	r4, r0
}

static inline void freeaddrinfo(struct zsock_addrinfo *ai)
{
	zsock_freeaddrinfo(ai);
   2e696:	9803      	ldr	r0, [sp, #12]
   2e698:	f00f f98c 	bl	3d9b4 <zsock_freeaddrinfo>
	return err;
   2e69c:	e7cf      	b.n	2e63e <nct_connect+0x3e>
			LOG_DBG("ai_addrlen = %u should be %u or %u",
   2e69e:	2208      	movs	r2, #8
   2e6a0:	2118      	movs	r1, #24
   2e6a2:	4630      	mov	r0, r6
   2e6a4:	e9cd 2100 	strd	r2, r1, [sp]
   2e6a8:	463a      	mov	r2, r7
   2e6aa:	490a      	ldr	r1, [pc, #40]	; (2e6d4 <nct_connect+0xd4>)
   2e6ac:	f00e fe28 	bl	3d300 <log_string_sync>
		addr = addr->ai_next;
   2e6b0:	682d      	ldr	r5, [r5, #0]
   2e6b2:	e7cc      	b.n	2e64e <nct_connect+0x4e>
   2e6b4:	0004918e 	.word	0x0004918e
   2e6b8:	000434ac 	.word	0x000434ac
   2e6bc:	0004339c 	.word	0x0004339c
   2e6c0:	000493a0 	.word	0x000493a0
   2e6c4:	000491bd 	.word	0x000491bd
   2e6c8:	20019240 	.word	0x20019240
   2e6cc:	b3220001 	.word	0xb3220001
   2e6d0:	000491d7 	.word	0x000491d7
   2e6d4:	000491ec 	.word	0x000491ec

0002e6d8 <nct_cc_connect>:
{
   2e6d8:	b507      	push	{r0, r1, r2, lr}
   2e6da:	4b0b      	ldr	r3, [pc, #44]	; (2e708 <nct_cc_connect+0x30>)
   2e6dc:	480b      	ldr	r0, [pc, #44]	; (2e70c <nct_cc_connect+0x34>)
	LOG_DBG("nct_cc_connect");
   2e6de:	4a0c      	ldr	r2, [pc, #48]	; (2e710 <nct_cc_connect+0x38>)
   2e6e0:	1ac0      	subs	r0, r0, r3
   2e6e2:	08c0      	lsrs	r0, r0, #3
   2e6e4:	0180      	lsls	r0, r0, #6
   2e6e6:	490b      	ldr	r1, [pc, #44]	; (2e714 <nct_cc_connect+0x3c>)
   2e6e8:	f040 0004 	orr.w	r0, r0, #4
   2e6ec:	f00e fe08 	bl	3d300 <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2e6f0:	4b09      	ldr	r3, [pc, #36]	; (2e718 <nct_cc_connect+0x40>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2e6f2:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2e6f4:	9300      	str	r3, [sp, #0]
   2e6f6:	4b09      	ldr	r3, [pc, #36]	; (2e71c <nct_cc_connect+0x44>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2e6f8:	4809      	ldr	r0, [pc, #36]	; (2e720 <nct_cc_connect+0x48>)
	const struct mqtt_subscription_list subscription_list = {
   2e6fa:	9301      	str	r3, [sp, #4]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2e6fc:	f010 f9fd 	bl	3eafa <mqtt_subscribe>
}
   2e700:	b003      	add	sp, #12
   2e702:	f85d fb04 	ldr.w	pc, [sp], #4
   2e706:	bf00      	nop
   2e708:	0004339c 	.word	0x0004339c
   2e70c:	000434ac 	.word	0x000434ac
   2e710:	000493ac 	.word	0x000493ac
   2e714:	00049213 	.word	0x00049213
   2e718:	00043e4c 	.word	0x00043e4c
   2e71c:	04d20003 	.word	0x04d20003
   2e720:	2001925c 	.word	0x2001925c

0002e724 <nct_cc_send>:
{
   2e724:	b570      	push	{r4, r5, r6, lr}
   2e726:	4b2b      	ldr	r3, [pc, #172]	; (2e7d4 <nct_cc_send+0xb0>)
   2e728:	4c2b      	ldr	r4, [pc, #172]	; (2e7d8 <nct_cc_send+0xb4>)
	if (cc_data == NULL) {
   2e72a:	4605      	mov	r5, r0
   2e72c:	1ae4      	subs	r4, r4, r3
   2e72e:	08e4      	lsrs	r4, r4, #3
{
   2e730:	b088      	sub	sp, #32
   2e732:	01a4      	lsls	r4, r4, #6
	if (cc_data == NULL) {
   2e734:	b948      	cbnz	r0, 2e74a <nct_cc_send+0x26>
		LOG_ERR("cc_data == NULL");
   2e736:	4929      	ldr	r1, [pc, #164]	; (2e7dc <nct_cc_send+0xb8>)
   2e738:	f044 0001 	orr.w	r0, r4, #1
   2e73c:	f00e fde0 	bl	3d300 <log_string_sync>
		return -EINVAL;
   2e740:	f06f 0515 	mvn.w	r5, #21
}
   2e744:	4628      	mov	r0, r5
   2e746:	b008      	add	sp, #32
   2e748:	bd70      	pop	{r4, r5, r6, pc}
	if (cc_data->opcode >= ARRAY_SIZE(nct_cc_tx_list)) {
   2e74a:	7d06      	ldrb	r6, [r0, #20]
   2e74c:	2e01      	cmp	r6, #1
   2e74e:	d908      	bls.n	2e762 <nct_cc_send+0x3e>
		LOG_ERR("opcode = %d", cc_data->opcode);
   2e750:	4632      	mov	r2, r6
   2e752:	4923      	ldr	r1, [pc, #140]	; (2e7e0 <nct_cc_send+0xbc>)
   2e754:	f044 0001 	orr.w	r0, r4, #1
   2e758:	f00e fdd2 	bl	3d300 <log_string_sync>
		return -ENOTSUP;
   2e75c:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2e760:	e7f0      	b.n	2e744 <nct_cc_send+0x20>
	struct mqtt_publish_param publish = {
   2e762:	2210      	movs	r2, #16
   2e764:	2100      	movs	r1, #0
   2e766:	eb0d 0002 	add.w	r0, sp, r2
   2e76a:	f013 fab8 	bl	41cde <memset>
			nct_cc_tx_list[cc_data->opcode].topic.utf8,
   2e76e:	220c      	movs	r2, #12
   2e770:	4372      	muls	r2, r6
   2e772:	491c      	ldr	r1, [pc, #112]	; (2e7e4 <nct_cc_send+0xc0>)
   2e774:	188b      	adds	r3, r1, r2
	struct mqtt_publish_param publish = {
   2e776:	588a      	ldr	r2, [r1, r2]
   2e778:	9202      	str	r2, [sp, #8]
   2e77a:	685a      	ldr	r2, [r3, #4]
   2e77c:	7a1b      	ldrb	r3, [r3, #8]
   2e77e:	9203      	str	r2, [sp, #12]
   2e780:	f88d 3010 	strb.w	r3, [sp, #16]
	if ((cc_data->data.len != 0) && (cc_data->data.ptr != NULL)) {
   2e784:	682b      	ldr	r3, [r5, #0]
   2e786:	b11b      	cbz	r3, 2e790 <nct_cc_send+0x6c>
   2e788:	686a      	ldr	r2, [r5, #4]
   2e78a:	b10a      	cbz	r2, 2e790 <nct_cc_send+0x6c>
		publish.message.payload.len = cc_data->data.len;
   2e78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	publish.message_id = cc_data->id ? cc_data->id : get_next_message_id();
   2e790:	692b      	ldr	r3, [r5, #16]
   2e792:	b1d3      	cbz	r3, 2e7ca <nct_cc_send+0xa6>
   2e794:	b29b      	uxth	r3, r3
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2e796:	682a      	ldr	r2, [r5, #0]
   2e798:	4913      	ldr	r1, [pc, #76]	; (2e7e8 <nct_cc_send+0xc4>)
   2e79a:	9201      	str	r2, [sp, #4]
   2e79c:	7d2a      	ldrb	r2, [r5, #20]
   2e79e:	f044 0004 	orr.w	r0, r4, #4
   2e7a2:	9200      	str	r2, [sp, #0]
   2e7a4:	4a11      	ldr	r2, [pc, #68]	; (2e7ec <nct_cc_send+0xc8>)
	publish.message_id = cc_data->id ? cc_data->id : get_next_message_id();
   2e7a6:	f8ad 301c 	strh.w	r3, [sp, #28]
	LOG_DBG("mqtt_publish: id = %d opcode = %d len = %d", publish.message_id,
   2e7aa:	f00e fda9 	bl	3d300 <log_string_sync>
	int err = mqtt_publish(&nct.client, &publish);
   2e7ae:	4810      	ldr	r0, [pc, #64]	; (2e7f0 <nct_cc_send+0xcc>)
   2e7b0:	a902      	add	r1, sp, #8
   2e7b2:	f010 f90d 	bl	3e9d0 <mqtt_publish>
	if (err) {
   2e7b6:	4605      	mov	r5, r0
   2e7b8:	2800      	cmp	r0, #0
   2e7ba:	d0c3      	beq.n	2e744 <nct_cc_send+0x20>
		LOG_ERR("mqtt_publish failed %d", err);
   2e7bc:	4602      	mov	r2, r0
   2e7be:	490d      	ldr	r1, [pc, #52]	; (2e7f4 <nct_cc_send+0xd0>)
   2e7c0:	f044 0001 	orr.w	r0, r4, #1
   2e7c4:	f00e fd9c 	bl	3d300 <log_string_sync>
   2e7c8:	e7bc      	b.n	2e744 <nct_cc_send+0x20>
	publish.message_id = cc_data->id ? cc_data->id : get_next_message_id();
   2e7ca:	f7ff fb67 	bl	2de9c <get_next_message_id>
   2e7ce:	b283      	uxth	r3, r0
   2e7d0:	e7e1      	b.n	2e796 <nct_cc_send+0x72>
   2e7d2:	bf00      	nop
   2e7d4:	0004339c 	.word	0x0004339c
   2e7d8:	000434ac 	.word	0x000434ac
   2e7dc:	00049226 	.word	0x00049226
   2e7e0:	00049236 	.word	0x00049236
   2e7e4:	00043e7c 	.word	0x00043e7c
   2e7e8:	00049242 	.word	0x00049242
   2e7ec:	000493bb 	.word	0x000493bb
   2e7f0:	2001925c 	.word	0x2001925c
   2e7f4:	00049271 	.word	0x00049271

0002e7f8 <nct_dc_endpoint_set>:
{
   2e7f8:	b570      	push	{r4, r5, r6, lr}
   2e7fa:	4606      	mov	r6, r0
   2e7fc:	460d      	mov	r5, r1
   2e7fe:	4614      	mov	r4, r2
   2e800:	4814      	ldr	r0, [pc, #80]	; (2e854 <nct_dc_endpoint_set+0x5c>)
   2e802:	4b15      	ldr	r3, [pc, #84]	; (2e858 <nct_dc_endpoint_set+0x60>)
	LOG_DBG("nct_dc_endpoint_set");
   2e804:	4a15      	ldr	r2, [pc, #84]	; (2e85c <nct_dc_endpoint_set+0x64>)
   2e806:	1a1b      	subs	r3, r3, r0
   2e808:	08db      	lsrs	r3, r3, #3
   2e80a:	019b      	lsls	r3, r3, #6
   2e80c:	f043 0004 	orr.w	r0, r3, #4
   2e810:	4913      	ldr	r1, [pc, #76]	; (2e860 <nct_dc_endpoint_set+0x68>)
   2e812:	f00e fd75 	bl	3d300 <log_string_sync>
	dc_endpoint_free();
   2e816:	f7ff fc1b 	bl	2e050 <dc_endpoint_free>
	nct.dc_tx_endp.utf8 = (const uint8_t *)tx_endp->ptr;
   2e81a:	6872      	ldr	r2, [r6, #4]
   2e81c:	4811      	ldr	r0, [pc, #68]	; (2e864 <nct_dc_endpoint_set+0x6c>)
   2e81e:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
	nct.dc_tx_endp.size = tx_endp->len;
   2e822:	6832      	ldr	r2, [r6, #0]
   2e824:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
	nct.dc_rx_endp.utf8 = (const uint8_t *)rx_endp->ptr;
   2e828:	686a      	ldr	r2, [r5, #4]
   2e82a:	f8c0 20bc 	str.w	r2, [r0, #188]	; 0xbc
	nct.dc_rx_endp.size = rx_endp->len;
   2e82e:	682a      	ldr	r2, [r5, #0]
   2e830:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
	if (m_endp != NULL) {
   2e834:	b16c      	cbz	r4, 2e852 <nct_dc_endpoint_set+0x5a>
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2e836:	6862      	ldr	r2, [r4, #4]
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2e838:	490b      	ldr	r1, [pc, #44]	; (2e868 <nct_dc_endpoint_set+0x70>)
		nct.dc_m_endp.utf8 = (const uint8_t *)m_endp->ptr;
   2e83a:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
		nct.dc_m_endp.size = m_endp->len;
   2e83e:	6822      	ldr	r2, [r4, #0]
}
   2e840:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		nct.dc_m_endp.size = m_endp->len;
   2e844:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
		(void)nrf_cloud_fota_endpoint_set_and_report(&nct.client,
   2e848:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
   2e84c:	301c      	adds	r0, #28
   2e84e:	f001 baa9 	b.w	2fda4 <nrf_cloud_fota_endpoint_set_and_report>
}
   2e852:	bd70      	pop	{r4, r5, r6, pc}
   2e854:	0004339c 	.word	0x0004339c
   2e858:	000434ac 	.word	0x000434ac
   2e85c:	000493c7 	.word	0x000493c7
   2e860:	00049288 	.word	0x00049288
   2e864:	20019240 	.word	0x20019240
   2e868:	2002075e 	.word	0x2002075e

0002e86c <nct_dc_endpoint_get>:
{
   2e86c:	b570      	push	{r4, r5, r6, lr}
   2e86e:	4606      	mov	r6, r0
   2e870:	460d      	mov	r5, r1
   2e872:	4614      	mov	r4, r2
   2e874:	480f      	ldr	r0, [pc, #60]	; (2e8b4 <nct_dc_endpoint_get+0x48>)
   2e876:	4b10      	ldr	r3, [pc, #64]	; (2e8b8 <nct_dc_endpoint_get+0x4c>)
	LOG_DBG("nct_dc_endpoint_get");
   2e878:	4a10      	ldr	r2, [pc, #64]	; (2e8bc <nct_dc_endpoint_get+0x50>)
   2e87a:	1a1b      	subs	r3, r3, r0
   2e87c:	08db      	lsrs	r3, r3, #3
   2e87e:	019b      	lsls	r3, r3, #6
   2e880:	f043 0004 	orr.w	r0, r3, #4
   2e884:	490e      	ldr	r1, [pc, #56]	; (2e8c0 <nct_dc_endpoint_get+0x54>)
   2e886:	f00e fd3b 	bl	3d300 <log_string_sync>
	tx_endp->ptr = nct.dc_tx_endp.utf8;
   2e88a:	4b0e      	ldr	r3, [pc, #56]	; (2e8c4 <nct_dc_endpoint_get+0x58>)
   2e88c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
   2e890:	6072      	str	r2, [r6, #4]
	tx_endp->len = nct.dc_tx_endp.size;
   2e892:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   2e896:	6032      	str	r2, [r6, #0]
	rx_endp->ptr = nct.dc_rx_endp.utf8;
   2e898:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
   2e89c:	606a      	str	r2, [r5, #4]
	rx_endp->len = nct.dc_rx_endp.size;
   2e89e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   2e8a2:	602a      	str	r2, [r5, #0]
	if (m_endp != NULL) {
   2e8a4:	b12c      	cbz	r4, 2e8b2 <nct_dc_endpoint_get+0x46>
		m_endp->ptr = nct.dc_m_endp.utf8;
   2e8a6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
		m_endp->len = nct.dc_m_endp.size;
   2e8aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		m_endp->ptr = nct.dc_m_endp.utf8;
   2e8ae:	6062      	str	r2, [r4, #4]
		m_endp->len = nct.dc_m_endp.size;
   2e8b0:	6023      	str	r3, [r4, #0]
}
   2e8b2:	bd70      	pop	{r4, r5, r6, pc}
   2e8b4:	0004339c 	.word	0x0004339c
   2e8b8:	000434ac 	.word	0x000434ac
   2e8bc:	000493db 	.word	0x000493db
   2e8c0:	000492a0 	.word	0x000492a0
   2e8c4:	20019240 	.word	0x20019240

0002e8c8 <nct_dc_connect>:
{
   2e8c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2e8ca:	4b10      	ldr	r3, [pc, #64]	; (2e90c <nct_dc_connect+0x44>)
   2e8cc:	4810      	ldr	r0, [pc, #64]	; (2e910 <nct_dc_connect+0x48>)
	LOG_DBG("nct_dc_connect");
   2e8ce:	4a11      	ldr	r2, [pc, #68]	; (2e914 <nct_dc_connect+0x4c>)
   2e8d0:	1ac0      	subs	r0, r0, r3
   2e8d2:	08c0      	lsrs	r0, r0, #3
   2e8d4:	0180      	lsls	r0, r0, #6
   2e8d6:	4910      	ldr	r1, [pc, #64]	; (2e918 <nct_dc_connect+0x50>)
   2e8d8:	f040 0004 	orr.w	r0, r0, #4
   2e8dc:	f00e fd10 	bl	3d300 <log_string_sync>
			.utf8 = nct.dc_rx_endp.utf8,
   2e8e0:	480e      	ldr	r0, [pc, #56]	; (2e91c <nct_dc_connect+0x54>)
	return mqtt_subscribe(&nct.client, &subscription_list);
   2e8e2:	a901      	add	r1, sp, #4
	struct mqtt_topic subscribe_topic = {
   2e8e4:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
	return mqtt_subscribe(&nct.client, &subscription_list);
   2e8e8:	301c      	adds	r0, #28
	struct mqtt_topic subscribe_topic = {
   2e8ea:	9303      	str	r3, [sp, #12]
   2e8ec:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2e8f0:	9304      	str	r3, [sp, #16]
   2e8f2:	2301      	movs	r3, #1
   2e8f4:	f88d 3014 	strb.w	r3, [sp, #20]
	const struct mqtt_subscription_list subscription_list = {
   2e8f8:	ab03      	add	r3, sp, #12
   2e8fa:	9301      	str	r3, [sp, #4]
   2e8fc:	4b08      	ldr	r3, [pc, #32]	; (2e920 <nct_dc_connect+0x58>)
   2e8fe:	9302      	str	r3, [sp, #8]
	return mqtt_subscribe(&nct.client, &subscription_list);
   2e900:	f010 f8fb 	bl	3eafa <mqtt_subscribe>
}
   2e904:	b007      	add	sp, #28
   2e906:	f85d fb04 	ldr.w	pc, [sp], #4
   2e90a:	bf00      	nop
   2e90c:	0004339c 	.word	0x0004339c
   2e910:	000434ac 	.word	0x000434ac
   2e914:	000493ef 	.word	0x000493ef
   2e918:	000492b8 	.word	0x000492b8
   2e91c:	20019240 	.word	0x20019240
   2e920:	223d0001 	.word	0x223d0001

0002e924 <nct_dc_disconnect>:
{
   2e924:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2e926:	4b12      	ldr	r3, [pc, #72]	; (2e970 <nct_dc_disconnect+0x4c>)
   2e928:	4c12      	ldr	r4, [pc, #72]	; (2e974 <nct_dc_disconnect+0x50>)
	LOG_DBG("nct_dc_disconnect");
   2e92a:	4a13      	ldr	r2, [pc, #76]	; (2e978 <nct_dc_disconnect+0x54>)
   2e92c:	1ae4      	subs	r4, r4, r3
   2e92e:	08e4      	lsrs	r4, r4, #3
   2e930:	01a4      	lsls	r4, r4, #6
   2e932:	4912      	ldr	r1, [pc, #72]	; (2e97c <nct_dc_disconnect+0x58>)
   2e934:	f044 0004 	orr.w	r0, r4, #4
   2e938:	f00e fce2 	bl	3d300 <log_string_sync>
	const struct mqtt_subscription_list subscription_list = {
   2e93c:	4810      	ldr	r0, [pc, #64]	; (2e980 <nct_dc_disconnect+0x5c>)
   2e93e:	4b11      	ldr	r3, [pc, #68]	; (2e984 <nct_dc_disconnect+0x60>)
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2e940:	4669      	mov	r1, sp
	const struct mqtt_subscription_list subscription_list = {
   2e942:	9000      	str	r0, [sp, #0]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2e944:	38a0      	subs	r0, #160	; 0xa0
	const struct mqtt_subscription_list subscription_list = {
   2e946:	9301      	str	r3, [sp, #4]
	ret = mqtt_unsubscribe(&nct.client, &subscription_list);
   2e948:	f010 f8fe 	bl	3eb48 <mqtt_unsubscribe>
   2e94c:	4605      	mov	r5, r0
	int err = nrf_cloud_fota_unsubscribe();
   2e94e:	f001 fac9 	bl	2fee4 <nrf_cloud_fota_unsubscribe>
	if (err) {
   2e952:	4606      	mov	r6, r0
   2e954:	b140      	cbz	r0, 2e968 <nct_dc_disconnect+0x44>
		LOG_ERR("FOTA MQTT unsubscribe failed: %d", err);
   2e956:	4602      	mov	r2, r0
   2e958:	490b      	ldr	r1, [pc, #44]	; (2e988 <nct_dc_disconnect+0x64>)
   2e95a:	f044 0001 	orr.w	r0, r4, #1
   2e95e:	f00e fccf 	bl	3d300 <log_string_sync>
		if (ret == 0) {
   2e962:	2d00      	cmp	r5, #0
   2e964:	bf08      	it	eq
   2e966:	4635      	moveq	r5, r6
}
   2e968:	4628      	mov	r0, r5
   2e96a:	b002      	add	sp, #8
   2e96c:	bd70      	pop	{r4, r5, r6, pc}
   2e96e:	bf00      	nop
   2e970:	0004339c 	.word	0x0004339c
   2e974:	000434ac 	.word	0x000434ac
   2e978:	000493fe 	.word	0x000493fe
   2e97c:	000492cb 	.word	0x000492cb
   2e980:	200192fc 	.word	0x200192fc
   2e984:	223d0001 	.word	0x223d0001
   2e988:	000492e1 	.word	0x000492e1

0002e98c <nct_disconnect>:
{
   2e98c:	b508      	push	{r3, lr}
   2e98e:	4809      	ldr	r0, [pc, #36]	; (2e9b4 <nct_disconnect+0x28>)
   2e990:	4b09      	ldr	r3, [pc, #36]	; (2e9b8 <nct_disconnect+0x2c>)
	LOG_DBG("nct_disconnect");
   2e992:	4a0a      	ldr	r2, [pc, #40]	; (2e9bc <nct_disconnect+0x30>)
   2e994:	1ac0      	subs	r0, r0, r3
   2e996:	08c0      	lsrs	r0, r0, #3
   2e998:	0180      	lsls	r0, r0, #6
   2e99a:	f040 0004 	orr.w	r0, r0, #4
   2e99e:	4908      	ldr	r1, [pc, #32]	; (2e9c0 <nct_disconnect+0x34>)
   2e9a0:	f00e fcae 	bl	3d300 <log_string_sync>
	dc_endpoint_free();
   2e9a4:	f7ff fb54 	bl	2e050 <dc_endpoint_free>
}
   2e9a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return mqtt_disconnect(&nct.client);
   2e9ac:	4805      	ldr	r0, [pc, #20]	; (2e9c4 <nct_disconnect+0x38>)
   2e9ae:	f010 b87b 	b.w	3eaa8 <mqtt_disconnect>
   2e9b2:	bf00      	nop
   2e9b4:	000434ac 	.word	0x000434ac
   2e9b8:	0004339c 	.word	0x0004339c
   2e9bc:	00049410 	.word	0x00049410
   2e9c0:	00049302 	.word	0x00049302
   2e9c4:	2001925c 	.word	0x2001925c

0002e9c8 <nct_process>:
{
   2e9c8:	b510      	push	{r4, lr}
	mqtt_input(&nct.client);
   2e9ca:	4c04      	ldr	r4, [pc, #16]	; (2e9dc <nct_process+0x14>)
   2e9cc:	4620      	mov	r0, r4
   2e9ce:	f010 f94b 	bl	3ec68 <mqtt_input>
	mqtt_live(&nct.client);
   2e9d2:	4620      	mov	r0, r4
}
   2e9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mqtt_live(&nct.client);
   2e9d8:	f010 b908 	b.w	3ebec <mqtt_live>
   2e9dc:	2001925c 	.word	0x2001925c

0002e9e0 <nct_keepalive_time_left>:
	return mqtt_keepalive_time_left(&nct.client);
   2e9e0:	4801      	ldr	r0, [pc, #4]	; (2e9e8 <nct_keepalive_time_left+0x8>)
   2e9e2:	f010 b92a 	b.w	3ec3a <mqtt_keepalive_time_left>
   2e9e6:	bf00      	nop
   2e9e8:	2001925c 	.word	0x2001925c

0002e9ec <nct_socket_get>:
}
   2e9ec:	4b01      	ldr	r3, [pc, #4]	; (2e9f4 <nct_socket_get+0x8>)
   2e9ee:	6c58      	ldr	r0, [r3, #68]	; 0x44
   2e9f0:	4770      	bx	lr
   2e9f2:	bf00      	nop
   2e9f4:	20019240 	.word	0x20019240

0002e9f8 <send_to_modem>:
	return type_lookup_socket2gps[type];
}

static int send_to_modem(void *data, size_t data_len,
			 nrf_gnss_agps_data_type_t type)
{
   2e9f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	/* At this point, GPS driver or app-provided socket is assumed. */
	if (gps_dev) {
   2e9fa:	4b24      	ldr	r3, [pc, #144]	; (2ea8c <send_to_modem+0x94>)
{
   2e9fc:	4605      	mov	r5, r0
	if (gps_dev) {
   2e9fe:	681c      	ldr	r4, [r3, #0]
{
   2ea00:	4608      	mov	r0, r1
   2ea02:	f8ad 200e 	strh.w	r2, [sp, #14]
	if (gps_dev) {
   2ea06:	b184      	cbz	r4, 2ea2a <send_to_modem+0x32>
	return type_lookup_socket2gps[type];
   2ea08:	b293      	uxth	r3, r2
   2ea0a:	4a21      	ldr	r2, [pc, #132]	; (2ea90 <send_to_modem+0x98>)
   2ea0c:	5cd1      	ldrb	r1, [r2, r3]
	if ((data == NULL) || (dev == NULL)) {
   2ea0e:	2d00      	cmp	r5, #0
   2ea10:	d035      	beq.n	2ea7e <send_to_modem+0x86>
	if (api->agps_write == NULL) {
   2ea12:	68a3      	ldr	r3, [r4, #8]
   2ea14:	689e      	ldr	r6, [r3, #8]
   2ea16:	2e00      	cmp	r6, #0
   2ea18:	d034      	beq.n	2ea84 <send_to_modem+0x8c>
	return api->agps_write(dev, type, data, data_len);
   2ea1a:	4603      	mov	r3, r0
   2ea1c:	462a      	mov	r2, r5
   2ea1e:	4620      	mov	r0, r4
   2ea20:	47b0      	blx	r6
   2ea22:	4604      	mov	r4, r0
	if (agps_print_enabled) {
		agps_print(type, data);
	}

	return err;
}
   2ea24:	4620      	mov	r0, r4
   2ea26:	b004      	add	sp, #16
   2ea28:	bd70      	pop	{r4, r5, r6, pc}
	err = nrf_sendto(fd, data, data_len, 0, &type, sizeof(type));
   2ea2a:	2302      	movs	r3, #2
   2ea2c:	4819      	ldr	r0, [pc, #100]	; (2ea94 <send_to_modem+0x9c>)
   2ea2e:	9301      	str	r3, [sp, #4]
   2ea30:	f10d 030e 	add.w	r3, sp, #14
   2ea34:	9300      	str	r3, [sp, #0]
   2ea36:	460a      	mov	r2, r1
   2ea38:	4623      	mov	r3, r4
   2ea3a:	4629      	mov	r1, r5
   2ea3c:	6800      	ldr	r0, [r0, #0]
   2ea3e:	f012 fe53 	bl	416e8 <nrf_sendto>
	if (err < 0) {
   2ea42:	2800      	cmp	r0, #0
   2ea44:	da11      	bge.n	2ea6a <send_to_modem+0x72>
   2ea46:	4b14      	ldr	r3, [pc, #80]	; (2ea98 <send_to_modem+0xa0>)
   2ea48:	4c14      	ldr	r4, [pc, #80]	; (2ea9c <send_to_modem+0xa4>)
   2ea4a:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to send AGPS data to modem, errno: %d", errno);
   2ea4c:	f00f fb45 	bl	3e0da <__errno>
   2ea50:	08e4      	lsrs	r4, r4, #3
   2ea52:	01a4      	lsls	r4, r4, #6
   2ea54:	f044 0401 	orr.w	r4, r4, #1
   2ea58:	6802      	ldr	r2, [r0, #0]
   2ea5a:	4911      	ldr	r1, [pc, #68]	; (2eaa0 <send_to_modem+0xa8>)
   2ea5c:	4620      	mov	r0, r4
   2ea5e:	f00e fc4f 	bl	3d300 <log_string_sync>
		err = -errno;
   2ea62:	f00f fb3a 	bl	3e0da <__errno>
   2ea66:	6804      	ldr	r4, [r0, #0]
   2ea68:	4264      	negs	r4, r4
	if (agps_print_enabled) {
   2ea6a:	4b0e      	ldr	r3, [pc, #56]	; (2eaa4 <send_to_modem+0xac>)
   2ea6c:	781b      	ldrb	r3, [r3, #0]
   2ea6e:	2b00      	cmp	r3, #0
   2ea70:	d0d8      	beq.n	2ea24 <send_to_modem+0x2c>
		agps_print(type, data);
   2ea72:	4629      	mov	r1, r5
   2ea74:	f89d 000e 	ldrb.w	r0, [sp, #14]
   2ea78:	f000 fb30 	bl	2f0dc <agps_print>
   2ea7c:	e7d2      	b.n	2ea24 <send_to_modem+0x2c>
		return -EINVAL;
   2ea7e:	f06f 0415 	mvn.w	r4, #21
   2ea82:	e7cf      	b.n	2ea24 <send_to_modem+0x2c>
		return -ENOTSUP;
   2ea84:	f06f 0485 	mvn.w	r4, #133	; 0x85
   2ea88:	e7cc      	b.n	2ea24 <send_to_modem+0x2c>
   2ea8a:	bf00      	nop
   2ea8c:	20019d18 	.word	0x20019d18
   2ea90:	000496b3 	.word	0x000496b3
   2ea94:	20015600 	.word	0x20015600
   2ea98:	0004339c 	.word	0x0004339c
   2ea9c:	0004348c 	.word	0x0004348c
   2eaa0:	0004941f 	.word	0x0004941f
   2eaa4:	2002085b 	.word	0x2002085b

0002eaa8 <nrf_cloud_agps_request>:
{
   2eaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2eaac:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
   2eab0:	ac05      	add	r4, sp, #20
   2eab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	struct modem_param_info modem_info = {0};
   2eab6:	f640 02e8 	movw	r2, #2280	; 0x8e8
   2eaba:	2100      	movs	r1, #0
   2eabc:	a85c      	add	r0, sp, #368	; 0x170
   2eabe:	f013 f90e 	bl	41cde <memset>
	struct nct_dc_data msg = {
   2eac2:	2214      	movs	r2, #20
   2eac4:	2100      	movs	r1, #0
   2eac6:	a810      	add	r0, sp, #64	; 0x40
   2eac8:	f013 f909 	bl	41cde <memset>
	if (request.utc) {
   2eacc:	7a23      	ldrb	r3, [r4, #8]
	if (request.sv_mask_ephe) {
   2eace:	6822      	ldr	r2, [r4, #0]
	if (request.utc) {
   2ead0:	f013 0501 	ands.w	r5, r3, #1
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   2ead4:	bf18      	it	ne
   2ead6:	2501      	movne	r5, #1
	struct nct_dc_data msg = {
   2ead8:	f10d 0874 	add.w	r8, sp, #116	; 0x74
   2eadc:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
		types[type_count] = GPS_AGPS_UTC_PARAMETERS;
   2eae0:	bf18      	it	ne
   2eae2:	f88d 5020 	strbne.w	r5, [sp, #32]
	if (request.sv_mask_ephe) {
   2eae6:	b11a      	cbz	r2, 2eaf0 <nrf_cloud_agps_request+0x48>
		types[type_count] = GPS_AGPS_EPHEMERIDES;
   2eae8:	2102      	movs	r1, #2
   2eaea:	aa08      	add	r2, sp, #32
   2eaec:	5551      	strb	r1, [r2, r5]
		type_count += 1;
   2eaee:	3501      	adds	r5, #1
	if (request.sv_mask_alm) {
   2eaf0:	6862      	ldr	r2, [r4, #4]
   2eaf2:	b11a      	cbz	r2, 2eafc <nrf_cloud_agps_request+0x54>
		types[type_count] = GPS_AGPS_ALMANAC;
   2eaf4:	2103      	movs	r1, #3
   2eaf6:	aa08      	add	r2, sp, #32
   2eaf8:	5551      	strb	r1, [r2, r5]
		type_count += 1;
   2eafa:	3501      	adds	r5, #1
	if (request.klobuchar) {
   2eafc:	079c      	lsls	r4, r3, #30
		types[type_count] = GPS_AGPS_KLOBUCHAR_CORRECTION;
   2eafe:	bf41      	itttt	mi
   2eb00:	2104      	movmi	r1, #4
   2eb02:	aa08      	addmi	r2, sp, #32
   2eb04:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2eb06:	3501      	addmi	r5, #1
	if (request.nequick) {
   2eb08:	0758      	lsls	r0, r3, #29
		types[type_count] = GPS_AGPS_NEQUICK_CORRECTION;
   2eb0a:	bf41      	itttt	mi
   2eb0c:	2105      	movmi	r1, #5
   2eb0e:	aa08      	addmi	r2, sp, #32
   2eb10:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2eb12:	3501      	addmi	r5, #1
	if (request.system_time_tow) {
   2eb14:	0719      	lsls	r1, r3, #28
		types[type_count] = GPS_AGPS_GPS_SYSTEM_CLOCK_AND_TOWS;
   2eb16:	bf41      	itttt	mi
   2eb18:	2107      	movmi	r1, #7
   2eb1a:	aa08      	addmi	r2, sp, #32
   2eb1c:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2eb1e:	3501      	addmi	r5, #1
	if (request.position) {
   2eb20:	06da      	lsls	r2, r3, #27
		types[type_count] = GPS_AGPS_LOCATION;
   2eb22:	bf41      	itttt	mi
   2eb24:	2108      	movmi	r1, #8
   2eb26:	aa08      	addmi	r2, sp, #32
   2eb28:	5551      	strbmi	r1, [r2, r5]
		type_count += 1;
   2eb2a:	3501      	addmi	r5, #1
	if (request.integrity) {
   2eb2c:	069b      	lsls	r3, r3, #26
   2eb2e:	d512      	bpl.n	2eb56 <nrf_cloud_agps_request+0xae>
		types[type_count] = GPS_AGPS_INTEGRITY;
   2eb30:	2209      	movs	r2, #9
   2eb32:	ab08      	add	r3, sp, #32
   2eb34:	555a      	strb	r2, [r3, r5]
		type_count += 1;
   2eb36:	3501      	adds	r5, #1
	err = modem_info_init();
   2eb38:	f7fd fc32 	bl	2c3a0 <modem_info_init>
	if (err) {
   2eb3c:	4604      	mov	r4, r0
   2eb3e:	b1e0      	cbz	r0, 2eb7a <nrf_cloud_agps_request+0xd2>
   2eb40:	4848      	ldr	r0, [pc, #288]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
   2eb42:	4b49      	ldr	r3, [pc, #292]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Could not initialize modem info module");
   2eb44:	4949      	ldr	r1, [pc, #292]	; (2ec6c <nrf_cloud_agps_request+0x1c4>)
   2eb46:	1ac0      	subs	r0, r0, r3
   2eb48:	08c0      	lsrs	r0, r0, #3
   2eb4a:	0180      	lsls	r0, r0, #6
		LOG_ERR("Could not initialize modem info parameters");
   2eb4c:	f040 0001 	orr.w	r0, r0, #1
   2eb50:	f00e fbd6 	bl	3d300 <log_string_sync>
		return err;
   2eb54:	e00c      	b.n	2eb70 <nrf_cloud_agps_request+0xc8>
	if (type_count == 0) {
   2eb56:	2d00      	cmp	r5, #0
   2eb58:	d1ee      	bne.n	2eb38 <nrf_cloud_agps_request+0x90>
   2eb5a:	4b43      	ldr	r3, [pc, #268]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
   2eb5c:	4841      	ldr	r0, [pc, #260]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
		LOG_INF("No A-GPS data types requested");
   2eb5e:	4944      	ldr	r1, [pc, #272]	; (2ec70 <nrf_cloud_agps_request+0x1c8>)
   2eb60:	1ac0      	subs	r0, r0, r3
   2eb62:	08c0      	lsrs	r0, r0, #3
   2eb64:	0180      	lsls	r0, r0, #6
   2eb66:	f040 0003 	orr.w	r0, r0, #3
   2eb6a:	f00e fbc9 	bl	3d300 <log_string_sync>
		return 0;
   2eb6e:	462c      	mov	r4, r5
}
   2eb70:	4620      	mov	r0, r4
   2eb72:	f60d 2d58 	addw	sp, sp, #2648	; 0xa58
   2eb76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	err = modem_info_params_init(&modem_info);
   2eb7a:	a85c      	add	r0, sp, #368	; 0x170
   2eb7c:	f7fd fc54 	bl	2c428 <modem_info_params_init>
	if (err) {
   2eb80:	4604      	mov	r4, r0
   2eb82:	b130      	cbz	r0, 2eb92 <nrf_cloud_agps_request+0xea>
   2eb84:	4837      	ldr	r0, [pc, #220]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
   2eb86:	4b38      	ldr	r3, [pc, #224]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Could not initialize modem info parameters");
   2eb88:	493a      	ldr	r1, [pc, #232]	; (2ec74 <nrf_cloud_agps_request+0x1cc>)
   2eb8a:	1ac0      	subs	r0, r0, r3
   2eb8c:	08c0      	lsrs	r0, r0, #3
   2eb8e:	0180      	lsls	r0, r0, #6
   2eb90:	e7dc      	b.n	2eb4c <nrf_cloud_agps_request+0xa4>
	err = modem_info_params_get(&modem_info);
   2eb92:	a85c      	add	r0, sp, #368	; 0x170
   2eb94:	f7fd fc9a 	bl	2c4cc <modem_info_params_get>
	if (err) {
   2eb98:	4604      	mov	r4, r0
   2eb9a:	b130      	cbz	r0, 2ebaa <nrf_cloud_agps_request+0x102>
   2eb9c:	4831      	ldr	r0, [pc, #196]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
   2eb9e:	4b32      	ldr	r3, [pc, #200]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Could not obtain cell information");
   2eba0:	4935      	ldr	r1, [pc, #212]	; (2ec78 <nrf_cloud_agps_request+0x1d0>)
   2eba2:	1ac0      	subs	r0, r0, r3
   2eba4:	08c0      	lsrs	r0, r0, #3
   2eba6:	0180      	lsls	r0, r0, #6
   2eba8:	e7d0      	b.n	2eb4c <nrf_cloud_agps_request+0xa4>
	size_t len = 0;
   2ebaa:	4606      	mov	r6, r0
	for (size_t i = 0; i < type_count; i++) {
   2ebac:	4607      	mov	r7, r0
		err = snprintk(&type_array[len], type_array_len,
   2ebae:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 2ec90 <nrf_cloud_agps_request+0x1e8>
   2ebb2:	f10d 0920 	add.w	r9, sp, #32
   2ebb6:	a80b      	add	r0, sp, #44	; 0x2c
   2ebb8:	4652      	mov	r2, sl
   2ebba:	2114      	movs	r1, #20
   2ebbc:	f819 3b01 	ldrb.w	r3, [r9], #1
   2ebc0:	4430      	add	r0, r6
   2ebc2:	f00e f8e5 	bl	3cd90 <snprintk>
		if (err < 0) {
   2ebc6:	1e04      	subs	r4, r0, #0
   2ebc8:	db10      	blt.n	2ebec <nrf_cloud_agps_request+0x144>
	for (size_t i = 0; i < type_count; i++) {
   2ebca:	3701      	adds	r7, #1
   2ebcc:	42af      	cmp	r7, r5
		len += err;
   2ebce:	4426      	add	r6, r4
	for (size_t i = 0; i < type_count; i++) {
   2ebd0:	d3f1      	bcc.n	2ebb6 <nrf_cloud_agps_request+0x10e>
	type_array[len - 1] = '\0';
   2ebd2:	2200      	movs	r2, #0
   2ebd4:	f10d 032b 	add.w	r3, sp, #43	; 0x2b
	err = snprintk(types_array, sizeof(types_array),
   2ebd8:	ad15      	add	r5, sp, #84	; 0x54
	type_array[len - 1] = '\0';
   2ebda:	559a      	strb	r2, [r3, r6]
	err = snprintk(types_array, sizeof(types_array),
   2ebdc:	211e      	movs	r1, #30
   2ebde:	4628      	mov	r0, r5
   2ebe0:	4a26      	ldr	r2, [pc, #152]	; (2ec7c <nrf_cloud_agps_request+0x1d4>)
   2ebe2:	ab0b      	add	r3, sp, #44	; 0x2c
   2ebe4:	f00e f8d4 	bl	3cd90 <snprintk>
	if (err < 0) {
   2ebe8:	1e04      	subs	r4, r0, #0
   2ebea:	da0b      	bge.n	2ec04 <nrf_cloud_agps_request+0x15c>
		LOG_ERR("Error when creating type array: %d", err);
   2ebec:	4622      	mov	r2, r4
   2ebee:	481d      	ldr	r0, [pc, #116]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
   2ebf0:	4b1d      	ldr	r3, [pc, #116]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
   2ebf2:	4923      	ldr	r1, [pc, #140]	; (2ec80 <nrf_cloud_agps_request+0x1d8>)
   2ebf4:	1ac0      	subs	r0, r0, r3
   2ebf6:	08c0      	lsrs	r0, r0, #3
   2ebf8:	0180      	lsls	r0, r0, #6
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2ebfa:	f040 0001 	orr.w	r0, r0, #1
   2ebfe:	f00e fb7f 	bl	3d300 <log_string_sync>
		return err;
   2ec02:	e7b5      	b.n	2eb70 <nrf_cloud_agps_request+0xc8>
	len = snprintk(request_buf, sizeof(request_buf),
   2ec04:	f8bd 3330 	ldrh.w	r3, [sp, #816]	; 0x330
		(uint32_t)modem_info.network.cellid_dec,
   2ec08:	f50d 62f2 	add.w	r2, sp, #1936	; 0x790
	len = snprintk(request_buf, sizeof(request_buf),
   2ec0c:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2ec10:	e9d2 0100 	ldrd	r0, r1, [r2]
   2ec14:	f7ee f892 	bl	1cd3c <__aeabi_d2uiz>
   2ec18:	f8bd 2250 	ldrh.w	r2, [sp, #592]	; 0x250
   2ec1c:	9002      	str	r0, [sp, #8]
   2ec1e:	9201      	str	r2, [sp, #4]
   2ec20:	f8bd 23a0 	ldrh.w	r2, [sp, #928]	; 0x3a0
   2ec24:	21fa      	movs	r1, #250	; 0xfa
   2ec26:	9200      	str	r2, [sp, #0]
   2ec28:	4640      	mov	r0, r8
   2ec2a:	9b04      	ldr	r3, [sp, #16]
   2ec2c:	4a15      	ldr	r2, [pc, #84]	; (2ec84 <nrf_cloud_agps_request+0x1dc>)
   2ec2e:	f00e f8af 	bl	3cd90 <snprintk>
	if (len < 0) {
   2ec32:	1e04      	subs	r4, r0, #0
   2ec34:	da07      	bge.n	2ec46 <nrf_cloud_agps_request+0x19e>
   2ec36:	480b      	ldr	r0, [pc, #44]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
   2ec38:	4b0b      	ldr	r3, [pc, #44]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Failed to create A-GPS request, error: %d", len);
   2ec3a:	4622      	mov	r2, r4
   2ec3c:	1ac0      	subs	r0, r0, r3
   2ec3e:	08c0      	lsrs	r0, r0, #3
   2ec40:	4911      	ldr	r1, [pc, #68]	; (2ec88 <nrf_cloud_agps_request+0x1e0>)
   2ec42:	0180      	lsls	r0, r0, #6
   2ec44:	e7d9      	b.n	2ebfa <nrf_cloud_agps_request+0x152>
	err = nct_dc_send(&msg);
   2ec46:	a810      	add	r0, sp, #64	; 0x40
	msg.data.len = len;
   2ec48:	9410      	str	r4, [sp, #64]	; 0x40
	err = nct_dc_send(&msg);
   2ec4a:	f011 f998 	bl	3ff7e <nct_dc_send>
	if (err) {
   2ec4e:	4604      	mov	r4, r0
   2ec50:	2800      	cmp	r0, #0
   2ec52:	d08d      	beq.n	2eb70 <nrf_cloud_agps_request+0xc8>
   2ec54:	4803      	ldr	r0, [pc, #12]	; (2ec64 <nrf_cloud_agps_request+0x1bc>)
   2ec56:	4b04      	ldr	r3, [pc, #16]	; (2ec68 <nrf_cloud_agps_request+0x1c0>)
		LOG_ERR("Failed to send A-GPS request, error: %d", err);
   2ec58:	4622      	mov	r2, r4
   2ec5a:	1ac0      	subs	r0, r0, r3
   2ec5c:	08c0      	lsrs	r0, r0, #3
   2ec5e:	490b      	ldr	r1, [pc, #44]	; (2ec8c <nrf_cloud_agps_request+0x1e4>)
   2ec60:	0180      	lsls	r0, r0, #6
   2ec62:	e7ca      	b.n	2ebfa <nrf_cloud_agps_request+0x152>
   2ec64:	0004348c 	.word	0x0004348c
   2ec68:	0004339c 	.word	0x0004339c
   2ec6c:	0004946a 	.word	0x0004946a
   2ec70:	0004944c 	.word	0x0004944c
   2ec74:	00049491 	.word	0x00049491
   2ec78:	000494bc 	.word	0x000494bc
   2ec7c:	000494e2 	.word	0x000494e2
   2ec80:	000494f0 	.word	0x000494f0
   2ec84:	00049513 	.word	0x00049513
   2ec88:	00049573 	.word	0x00049573
   2ec8c:	0004959d 	.word	0x0004959d
   2ec90:	000494de 	.word	0x000494de

0002ec94 <nrf_cloud_agps_process>:

	return len;
}

int nrf_cloud_agps_process(const char *buf, size_t buf_len, const int *socket)
{
   2ec94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct nrf_cloud_apgs_element element = {};
	struct nrf_cloud_agps_system_time sys_time;
	size_t parsed_len = 0;
	uint8_t version;

	version = buf[NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_INDEX];
   2ec98:	7804      	ldrb	r4, [r0, #0]
{
   2ec9a:	4606      	mov	r6, r0
	parsed_len += NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION_SIZE;

	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2ec9c:	2c01      	cmp	r4, #1
{
   2ec9e:	460f      	mov	r7, r1
   2eca0:	4615      	mov	r5, r2
   2eca2:	b0c9      	sub	sp, #292	; 0x124
	__ASSERT(version == NRF_CLOUD_AGPS_BIN_SCHEMA_VERSION,
   2eca4:	d00f      	beq.n	2ecc6 <nrf_cloud_agps_process+0x32>
   2eca6:	f240 2325 	movw	r3, #549	; 0x225
   2ecaa:	4ab3      	ldr	r2, [pc, #716]	; (2ef78 <nrf_cloud_agps_process+0x2e4>)
   2ecac:	49b3      	ldr	r1, [pc, #716]	; (2ef7c <nrf_cloud_agps_process+0x2e8>)
   2ecae:	48b4      	ldr	r0, [pc, #720]	; (2ef80 <nrf_cloud_agps_process+0x2ec>)
   2ecb0:	f00e f861 	bl	3cd76 <printk>
   2ecb4:	4621      	mov	r1, r4
   2ecb6:	48b3      	ldr	r0, [pc, #716]	; (2ef84 <nrf_cloud_agps_process+0x2f0>)
   2ecb8:	f00e f85d 	bl	3cd76 <printk>
   2ecbc:	f240 2125 	movw	r1, #549	; 0x225
   2ecc0:	48ad      	ldr	r0, [pc, #692]	; (2ef78 <nrf_cloud_agps_process+0x2e4>)
   2ecc2:	f00e fb0c 	bl	3d2de <assert_post_action>
		 "Cannot parse schema version: %d", version);

	LOG_DBG("Receievd AGPS data. Schema version: %d, length: %d",
		version, buf_len);

	if (socket) {
   2ecc6:	4cb0      	ldr	r4, [pc, #704]	; (2ef88 <nrf_cloud_agps_process+0x2f4>)
   2ecc8:	48b0      	ldr	r0, [pc, #704]	; (2ef8c <nrf_cloud_agps_process+0x2f8>)
   2ecca:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 2efa0 <nrf_cloud_agps_process+0x30c>
   2ecce:	1a24      	subs	r4, r4, r0
   2ecd0:	08e4      	lsrs	r4, r4, #3
   2ecd2:	b18d      	cbz	r5, 2ecf8 <nrf_cloud_agps_process+0x64>
		LOG_DBG("Using user-provided socket, fd %d", fd);

		gps_dev = NULL;
   2ecd4:	2300      	movs	r3, #0
		fd = *socket;
   2ecd6:	682a      	ldr	r2, [r5, #0]
		gps_dev = NULL;
   2ecd8:	f8c8 3000 	str.w	r3, [r8]
		fd = *socket;
   2ecdc:	4bac      	ldr	r3, [pc, #688]	; (2ef90 <nrf_cloud_agps_process+0x2fc>)
   2ecde:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2ece0:	2501      	movs	r5, #1
	if (elements_left_to_process == 0) {
   2ece2:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 2efa4 <nrf_cloud_agps_process+0x310>
   2ece6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 2efa8 <nrf_cloud_agps_process+0x314>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2ecea:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 2efac <nrf_cloud_agps_process+0x318>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
			return -ENODEV;
		}
	}

	while (parsed_len < buf_len) {
   2ecee:	42af      	cmp	r7, r5
   2ecf0:	d819      	bhi.n	2ed26 <nrf_cloud_agps_process+0x92>
			return -ENODEV;
   2ecf2:	f04f 0b00 	mov.w	fp, #0
   2ecf6:	e012      	b.n	2ed1e <nrf_cloud_agps_process+0x8a>
	} else if (gps_dev == NULL) {
   2ecf8:	f8d8 3000 	ldr.w	r3, [r8]
   2ecfc:	2b00      	cmp	r3, #0
   2ecfe:	d1ef      	bne.n	2ece0 <nrf_cloud_agps_process+0x4c>
   2ed00:	48a4      	ldr	r0, [pc, #656]	; (2ef94 <nrf_cloud_agps_process+0x300>)
   2ed02:	f008 f9af 	bl	37064 <z_impl_device_get_binding>
		gps_dev = device_get_binding("NRF9160_GPS");
   2ed06:	f8c8 0000 	str.w	r0, [r8]
		if (gps_dev == NULL) {
   2ed0a:	2800      	cmp	r0, #0
   2ed0c:	d1e8      	bne.n	2ece0 <nrf_cloud_agps_process+0x4c>
			LOG_ERR("GPS is not enabled, A-GPS response unhandled");
   2ed0e:	01a0      	lsls	r0, r4, #6
   2ed10:	49a1      	ldr	r1, [pc, #644]	; (2ef98 <nrf_cloud_agps_process+0x304>)
   2ed12:	f040 0001 	orr.w	r0, r0, #1
   2ed16:	f00e faf3 	bl	3d300 <log_string_sync>
			return -ENODEV;
   2ed1a:	f06f 0b12 	mvn.w	fp, #18
			return err;
		}
	}

	return 0;
}
   2ed1e:	4658      	mov	r0, fp
   2ed20:	b049      	add	sp, #292	; 0x124
   2ed22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (elements_left_to_process == 0) {
   2ed26:	f8b8 1000 	ldrh.w	r1, [r8]
			get_next_agps_element(&element, &buf[parsed_len]);
   2ed2a:	1973      	adds	r3, r6, r5
	if (elements_left_to_process == 0) {
   2ed2c:	bb11      	cbnz	r1, 2ed74 <nrf_cloud_agps_process+0xe0>
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2ed2e:	f8b3 1001 	ldrh.w	r1, [r3, #1]
			(enum nrf_cloud_agps_type)buf[NRF_CLOUD_AGPS_BIN_TYPE_OFFSET];
   2ed32:	5d72      	ldrb	r2, [r6, r5]
			*(uint16_t *)&buf[NRF_CLOUD_AGPS_BIN_COUNT_OFFSET] - 1;
   2ed34:	3901      	subs	r1, #1
		elements_left_to_process =
   2ed36:	f8a8 1000 	strh.w	r1, [r8]
		len += NRF_CLOUD_AGPS_BIN_TYPE_SIZE +
   2ed3a:	2103      	movs	r1, #3
		element_type = element->type;
   2ed3c:	f889 2000 	strb.w	r2, [r9]
	switch (element->type) {
   2ed40:	1e50      	subs	r0, r2, #1
   2ed42:	2808      	cmp	r0, #8
   2ed44:	d8d5      	bhi.n	2ecf2 <nrf_cloud_agps_process+0x5e>
   2ed46:	f20f 0c08 	addw	ip, pc, #8
   2ed4a:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
   2ed4e:	bf00      	nop
   2ed50:	0002ed83 	.word	0x0002ed83
   2ed54:	0002ed9f 	.word	0x0002ed9f
   2ed58:	0002eda5 	.word	0x0002eda5
   2ed5c:	0002edab 	.word	0x0002edab
   2ed60:	0002ecf3 	.word	0x0002ecf3
   2ed64:	0002edbd 	.word	0x0002edbd
   2ed68:	0002edb1 	.word	0x0002edb1
   2ed6c:	0002edb7 	.word	0x0002edb7
   2ed70:	0002edbd 	.word	0x0002edbd
		elements_left_to_process -= 1;
   2ed74:	3901      	subs	r1, #1
   2ed76:	f8a8 1000 	strh.w	r1, [r8]
		element->type = element_type;
   2ed7a:	f899 2000 	ldrb.w	r2, [r9]
	size_t len = 0;
   2ed7e:	2100      	movs	r1, #0
   2ed80:	e7de      	b.n	2ed40 <nrf_cloud_agps_process+0xac>
		element->utc = (struct nrf_cloud_agps_utc *)(buf + len);
   2ed82:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_utc);
   2ed84:	310e      	adds	r1, #14
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2ed86:	2a06      	cmp	r2, #6
		parsed_len += element_size;
   2ed88:	440d      	add	r5, r1
		if (element.type == NRF_CLOUD_AGPS_GPS_TOWS) {
   2ed8a:	d11a      	bne.n	2edc2 <nrf_cloud_agps_process+0x12e>
			memcpy(&sys_time.sv_tow[element.tow->sv_id - 1],
   2ed8c:	781a      	ldrb	r2, [r3, #0]
   2ed8e:	a948      	add	r1, sp, #288	; 0x120
   2ed90:	681b      	ldr	r3, [r3, #0]
   2ed92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   2ed96:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
   2ed9a:	6013      	str	r3, [r2, #0]
			continue;
   2ed9c:	e7a7      	b.n	2ecee <nrf_cloud_agps_process+0x5a>
		element->ephemeris = (struct nrf_cloud_agps_ephemeris *)(buf + len);
   2ed9e:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_ephemeris);
   2eda0:	313e      	adds	r1, #62	; 0x3e
		break;
   2eda2:	e7f0      	b.n	2ed86 <nrf_cloud_agps_process+0xf2>
		element->almanac = (struct nrf_cloud_agps_almanac *)(buf + len);
   2eda4:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_almanac);
   2eda6:	311f      	adds	r1, #31
		break;
   2eda8:	e7ed      	b.n	2ed86 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_klobuchar *)(buf + len);
   2edaa:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_klobuchar);
   2edac:	3108      	adds	r1, #8
		break;
   2edae:	e7ea      	b.n	2ed86 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_system_time *)(buf + len);
   2edb0:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_system_time) -
   2edb2:	3110      	adds	r1, #16
		break;
   2edb4:	e7e7      	b.n	2ed86 <nrf_cloud_agps_process+0xf2>
		element->location = (struct nrf_cloud_agps_location *)(buf + len);
   2edb6:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_location);
   2edb8:	310f      	adds	r1, #15
		break;
   2edba:	e7e4      	b.n	2ed86 <nrf_cloud_agps_process+0xf2>
			(struct nrf_cloud_agps_integrity *)(buf + len);
   2edbc:	440b      	add	r3, r1
		len += sizeof(struct nrf_cloud_agps_integrity);
   2edbe:	3104      	adds	r1, #4
		break;
   2edc0:	e7e1      	b.n	2ed86 <nrf_cloud_agps_process+0xf2>
		} else if (element.type == NRF_CLOUD_AGPS_GPS_SYSTEM_CLOCK) {
   2edc2:	2a07      	cmp	r2, #7
   2edc4:	d12f      	bne.n	2ee26 <nrf_cloud_agps_process+0x192>
			memcpy(&sys_time, element.time_and_tow,
   2edc6:	6818      	ldr	r0, [r3, #0]
   2edc8:	6859      	ldr	r1, [r3, #4]
   2edca:	aa01      	add	r2, sp, #4
   2edcc:	c203      	stmia	r2!, {r0, r1}
   2edce:	6898      	ldr	r0, [r3, #8]
	dst->date_day		= src->time_and_tow->date_day;
   2edd0:	7859      	ldrb	r1, [r3, #1]
			memcpy(&sys_time, element.time_and_tow,
   2edd2:	6010      	str	r0, [r2, #0]
	dst->date_day		= src->time_and_tow->date_day;
   2edd4:	781a      	ldrb	r2, [r3, #0]
   2edd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2edda:	f8ad 2090 	strh.w	r2, [sp, #144]	; 0x90
	dst->time_full_s	= src->time_and_tow->time_full_s;
   2edde:	f8d3 2002 	ldr.w	r2, [r3, #2]
   2ede2:	9225      	str	r2, [sp, #148]	; 0x94
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2ede4:	79d9      	ldrb	r1, [r3, #7]
   2ede6:	799a      	ldrb	r2, [r3, #6]
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2ede8:	9027      	str	r0, [sp, #156]	; 0x9c
	dst->time_frac_ms	= src->time_and_tow->time_frac_ms;
   2edea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2edee:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->sv_mask		= src->time_and_tow->sv_mask;
   2edf2:	4601      	mov	r1, r0
	if (src->time_and_tow->sv_mask == 0U) {
   2edf4:	2800      	cmp	r0, #0
   2edf6:	f040 8132 	bne.w	2f05e <nrf_cloud_agps_process+0x3ca>
		memset(dst->sv_tow, 0, sizeof(dst->sv_tow));
   2edfa:	2280      	movs	r2, #128	; 0x80
   2edfc:	a828      	add	r0, sp, #160	; 0xa0
   2edfe:	f012 ff6e 	bl	41cde <memset>
		return send_to_modem(&time_and_tow, sizeof(time_and_tow),
   2ee02:	2190      	movs	r1, #144	; 0x90
   2ee04:	2206      	movs	r2, #6
   2ee06:	eb0d 0001 	add.w	r0, sp, r1
		return send_to_modem(agps_data->integrity,
   2ee0a:	f7ff fdf5 	bl	2e9f8 <send_to_modem>
   2ee0e:	4683      	mov	fp, r0
		if (err) {
   2ee10:	2800      	cmp	r0, #0
   2ee12:	f43f af6c 	beq.w	2ecee <nrf_cloud_agps_process+0x5a>
			LOG_ERR("Failed to send data to modem, error: %d", err);
   2ee16:	01a0      	lsls	r0, r4, #6
   2ee18:	465a      	mov	r2, fp
   2ee1a:	4960      	ldr	r1, [pc, #384]	; (2ef9c <nrf_cloud_agps_process+0x308>)
   2ee1c:	f040 0001 	orr.w	r0, r0, #1
   2ee20:	f00e fa6e 	bl	3d300 <log_string_sync>
			return err;
   2ee24:	e77b      	b.n	2ed1e <nrf_cloud_agps_process+0x8a>
	switch (agps_data->type) {
   2ee26:	2808      	cmp	r0, #8
   2ee28:	f200 8150 	bhi.w	2f0cc <nrf_cloud_agps_process+0x438>
   2ee2c:	e8df f010 	tbh	[pc, r0, lsl #1]
   2ee30:	00220009 	.word	0x00220009
   2ee34:	00fc00c0 	.word	0x00fc00c0
   2ee38:	014e014e 	.word	0x014e014e
   2ee3c:	012c014e 	.word	0x012c014e
   2ee40:	014a      	.short	0x014a
	dst->a1		= src->utc->a1;
   2ee42:	681a      	ldr	r2, [r3, #0]
   2ee44:	9224      	str	r2, [sp, #144]	; 0x90
	dst->a0		= src->utc->a0;
   2ee46:	685a      	ldr	r2, [r3, #4]
   2ee48:	9225      	str	r2, [sp, #148]	; 0x94
	dst->tot	= src->utc->tot;
   2ee4a:	7a1a      	ldrb	r2, [r3, #8]
   2ee4c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
	dst->wn_t	= src->utc->wn_t;
   2ee50:	7a5a      	ldrb	r2, [r3, #9]
   2ee52:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
	dst->delta_tls	= src->utc->delta_tls;
   2ee56:	7a9a      	ldrb	r2, [r3, #10]
   2ee58:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->wn_lsf	= src->utc->wn_lsf;
   2ee5c:	7ada      	ldrb	r2, [r3, #11]
   2ee5e:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->dn		= src->utc->dn;
   2ee62:	7b1a      	ldrb	r2, [r3, #12]
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2ee64:	7b5b      	ldrb	r3, [r3, #13]
	dst->dn		= src->utc->dn;
   2ee66:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
		return send_to_modem(&utc, sizeof(utc),
   2ee6a:	2201      	movs	r2, #1
	dst->delta_tlsf	= src->utc->delta_tlsf;
   2ee6c:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
		return send_to_modem(&location, sizeof(location),
   2ee70:	2110      	movs	r1, #16
   2ee72:	e07e      	b.n	2ef72 <nrf_cloud_agps_process+0x2de>
	dst->sv_id	= src->ephemeris->sv_id;
   2ee74:	781a      	ldrb	r2, [r3, #0]
   2ee76:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
	dst->health	= src->ephemeris->health;
   2ee7a:	785a      	ldrb	r2, [r3, #1]
   2ee7c:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
	dst->iodc	= src->ephemeris->iodc;
   2ee80:	78d9      	ldrb	r1, [r3, #3]
   2ee82:	789a      	ldrb	r2, [r3, #2]
   2ee84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ee88:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
	dst->toc	= src->ephemeris->toc;
   2ee8c:	7959      	ldrb	r1, [r3, #5]
   2ee8e:	791a      	ldrb	r2, [r3, #4]
   2ee90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ee94:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
	dst->af2	= src->ephemeris->af2;
   2ee98:	799a      	ldrb	r2, [r3, #6]
   2ee9a:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
	dst->af1	= src->ephemeris->af1;
   2ee9e:	7a19      	ldrb	r1, [r3, #8]
   2eea0:	79da      	ldrb	r2, [r3, #7]
   2eea2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2eea6:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->af0	= src->ephemeris->af0;
   2eeaa:	f8d3 2009 	ldr.w	r2, [r3, #9]
   2eeae:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->tgd	= src->ephemeris->tgd;
   2eeb0:	7b5a      	ldrb	r2, [r3, #13]
   2eeb2:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
	dst->ura	= src->ephemeris->ura;
   2eeb6:	7b9a      	ldrb	r2, [r3, #14]
   2eeb8:	f88d 20a1 	strb.w	r2, [sp, #161]	; 0xa1
	dst->fit_int	= src->ephemeris->fit_int;
   2eebc:	7bda      	ldrb	r2, [r3, #15]
   2eebe:	f88d 20a2 	strb.w	r2, [sp, #162]	; 0xa2
	dst->toe	= src->ephemeris->toe;
   2eec2:	7c59      	ldrb	r1, [r3, #17]
   2eec4:	7c1a      	ldrb	r2, [r3, #16]
   2eec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2eeca:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
	dst->w		= src->ephemeris->w;
   2eece:	f8d3 2012 	ldr.w	r2, [r3, #18]
   2eed2:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->delta_n	= src->ephemeris->delta_n;
   2eed4:	7dd9      	ldrb	r1, [r3, #23]
   2eed6:	7d9a      	ldrb	r2, [r3, #22]
   2eed8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2eedc:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->m0		= src->ephemeris->m0;
   2eee0:	699a      	ldr	r2, [r3, #24]
   2eee2:	922c      	str	r2, [sp, #176]	; 0xb0
	dst->omega_dot	= src->ephemeris->omega_dot;
   2eee4:	69da      	ldr	r2, [r3, #28]
   2eee6:	922d      	str	r2, [sp, #180]	; 0xb4
	dst->e		= src->ephemeris->e;
   2eee8:	6a1a      	ldr	r2, [r3, #32]
   2eeea:	922e      	str	r2, [sp, #184]	; 0xb8
	dst->idot	= src->ephemeris->idot;
   2eeec:	f893 1025 	ldrb.w	r1, [r3, #37]	; 0x25
   2eef0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   2eef4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2eef8:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
	dst->sqrt_a	= src->ephemeris->sqrt_a;
   2eefc:	f8d3 2026 	ldr.w	r2, [r3, #38]	; 0x26
   2ef00:	9230      	str	r2, [sp, #192]	; 0xc0
	dst->i0		= src->ephemeris->i0;
   2ef02:	f8d3 202a 	ldr.w	r2, [r3, #42]	; 0x2a
   2ef06:	9231      	str	r2, [sp, #196]	; 0xc4
	dst->omega0	= src->ephemeris->omega0;
   2ef08:	f8d3 202e 	ldr.w	r2, [r3, #46]	; 0x2e
   2ef0c:	9232      	str	r2, [sp, #200]	; 0xc8
	dst->crs	= src->ephemeris->crs;
   2ef0e:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
   2ef12:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
   2ef16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ef1a:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
	dst->cis	= src->ephemeris->cis;
   2ef1e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   2ef22:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
   2ef26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ef2a:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
	dst->cus	= src->ephemeris->cus;
   2ef2e:	f893 1037 	ldrb.w	r1, [r3, #55]	; 0x37
   2ef32:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
   2ef36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ef3a:	f8ad 20d0 	strh.w	r2, [sp, #208]	; 0xd0
	dst->crc	= src->ephemeris->crc;
   2ef3e:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   2ef42:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2ef46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ef4a:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
	dst->cic	= src->ephemeris->cic;
   2ef4e:	f893 103b 	ldrb.w	r1, [r3, #59]	; 0x3b
   2ef52:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   2ef56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2ef5a:	f8ad 20d4 	strh.w	r2, [sp, #212]	; 0xd4
	dst->cuc	= src->ephemeris->cuc;
   2ef5e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
   2ef62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ef66:	2148      	movs	r1, #72	; 0x48
	dst->cuc	= src->ephemeris->cuc;
   2ef68:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
		return send_to_modem(&ephemeris, sizeof(ephemeris),
   2ef6c:	2202      	movs	r2, #2
	dst->cuc	= src->ephemeris->cuc;
   2ef6e:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6
		return send_to_modem(&location, sizeof(location),
   2ef72:	a824      	add	r0, sp, #144	; 0x90
   2ef74:	e749      	b.n	2ee0a <nrf_cloud_agps_process+0x176>
   2ef76:	bf00      	nop
   2ef78:	000495c5 	.word	0x000495c5
   2ef7c:	00049603 	.word	0x00049603
   2ef80:	00044dbf 	.word	0x00044dbf
   2ef84:	00049612 	.word	0x00049612
   2ef88:	0004348c 	.word	0x0004348c
   2ef8c:	0004339c 	.word	0x0004339c
   2ef90:	20015600 	.word	0x20015600
   2ef94:	000454c4 	.word	0x000454c4
   2ef98:	00049634 	.word	0x00049634
   2ef9c:	0004967c 	.word	0x0004967c
   2efa0:	20019d18 	.word	0x20019d18
   2efa4:	2001e0e2 	.word	0x2001e0e2
   2efa8:	2002085c 	.word	0x2002085c
   2efac:	00049661 	.word	0x00049661
	dst->sv_id	= src->almanac->sv_id;
   2efb0:	781a      	ldrb	r2, [r3, #0]
   2efb2:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
	dst->wn		= src->almanac->wn;
   2efb6:	785a      	ldrb	r2, [r3, #1]
   2efb8:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
	dst->toa	= src->almanac->toa;
   2efbc:	789a      	ldrb	r2, [r3, #2]
   2efbe:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
	dst->ioda	= src->almanac->ioda;
   2efc2:	78da      	ldrb	r2, [r3, #3]
   2efc4:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
	dst->e		= src->almanac->e;
   2efc8:	7959      	ldrb	r1, [r3, #5]
   2efca:	791a      	ldrb	r2, [r3, #4]
   2efcc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2efd0:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
	dst->delta_i	= src->almanac->delta_i;
   2efd4:	79d9      	ldrb	r1, [r3, #7]
   2efd6:	799a      	ldrb	r2, [r3, #6]
   2efd8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2efdc:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
	dst->omega_dot	= src->almanac->omega_dot;
   2efe0:	7a59      	ldrb	r1, [r3, #9]
   2efe2:	7a1a      	ldrb	r2, [r3, #8]
   2efe4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2efe8:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->sv_health	= src->almanac->sv_health;
   2efec:	7a9a      	ldrb	r2, [r3, #10]
   2efee:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->sqrt_a	= src->almanac->sqrt_a;
   2eff2:	f8d3 200b 	ldr.w	r2, [r3, #11]
   2eff6:	9227      	str	r2, [sp, #156]	; 0x9c
	dst->omega0	= src->almanac->omega0;
   2eff8:	f8d3 200f 	ldr.w	r2, [r3, #15]
   2effc:	9228      	str	r2, [sp, #160]	; 0xa0
	dst->w		= src->almanac->w;
   2effe:	f8d3 2013 	ldr.w	r2, [r3, #19]
   2f002:	9229      	str	r2, [sp, #164]	; 0xa4
	dst->m0		= src->almanac->m0;
   2f004:	f8d3 2017 	ldr.w	r2, [r3, #23]
   2f008:	922a      	str	r2, [sp, #168]	; 0xa8
	dst->af0	= src->almanac->af0;
   2f00a:	7f19      	ldrb	r1, [r3, #28]
   2f00c:	7eda      	ldrb	r2, [r3, #27]
   2f00e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f012:	f8ad 20ac 	strh.w	r2, [sp, #172]	; 0xac
	dst->af1	= src->almanac->af1;
   2f016:	7f5a      	ldrb	r2, [r3, #29]
   2f018:	7f9b      	ldrb	r3, [r3, #30]
		return send_to_modem(&almanac, sizeof(almanac),
   2f01a:	2120      	movs	r1, #32
	dst->af1	= src->almanac->af1;
   2f01c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2f020:	f8ad 30ae 	strh.w	r3, [sp, #174]	; 0xae
		return send_to_modem(&almanac, sizeof(almanac),
   2f024:	2203      	movs	r2, #3
   2f026:	e7a4      	b.n	2ef72 <nrf_cloud_agps_process+0x2de>
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2f028:	781a      	ldrb	r2, [r3, #0]
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2f02a:	2108      	movs	r1, #8
	dst->alpha0	= src->ion_correction.klobuchar->alpha0;
   2f02c:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
	dst->alpha1	= src->ion_correction.klobuchar->alpha1;
   2f030:	785a      	ldrb	r2, [r3, #1]
   2f032:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
	dst->alpha2	= src->ion_correction.klobuchar->alpha2;
   2f036:	789a      	ldrb	r2, [r3, #2]
   2f038:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
	dst->alpha3	= src->ion_correction.klobuchar->alpha3;
   2f03c:	78da      	ldrb	r2, [r3, #3]
   2f03e:	f88d 2093 	strb.w	r2, [sp, #147]	; 0x93
	dst->beta0	= src->ion_correction.klobuchar->beta0;
   2f042:	791a      	ldrb	r2, [r3, #4]
   2f044:	f88d 2094 	strb.w	r2, [sp, #148]	; 0x94
	dst->beta1	= src->ion_correction.klobuchar->beta1;
   2f048:	795a      	ldrb	r2, [r3, #5]
   2f04a:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2f04e:	799a      	ldrb	r2, [r3, #6]
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2f050:	79db      	ldrb	r3, [r3, #7]
	dst->beta2	= src->ion_correction.klobuchar->beta2;
   2f052:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
	dst->beta3	= src->ion_correction.klobuchar->beta3;
   2f056:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
		return send_to_modem(&klobuchar, sizeof(klobuchar),
   2f05a:	2204      	movs	r2, #4
   2f05c:	e789      	b.n	2ef72 <nrf_cloud_agps_process+0x2de>
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f05e:	2200      	movs	r2, #0
   2f060:	a924      	add	r1, sp, #144	; 0x90
		dst->sv_tow[i].flags = src->time_and_tow->sv_tow[i].flags;
   2f062:	f103 0c0f 	add.w	ip, r3, #15
   2f066:	f81c 0022 	ldrb.w	r0, [ip, r2, lsl #2]
   2f06a:	3104      	adds	r1, #4
   2f06c:	7388      	strb	r0, [r1, #14]
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f06e:	1c90      	adds	r0, r2, #2
   2f070:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2f074:	f890 e005 	ldrb.w	lr, [r0, #5]
   2f078:	7980      	ldrb	r0, [r0, #6]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f07a:	3201      	adds	r2, #1
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f07c:	ea4e 2000 	orr.w	r0, lr, r0, lsl #8
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f080:	2a20      	cmp	r2, #32
		dst->sv_tow[i].tlm = src->time_and_tow->sv_tow[i].tlm;
   2f082:	8188      	strh	r0, [r1, #12]
	for (size_t i = 0; i < NRF_CLOUD_AGPS_MAX_SV_TOW; i++) {
   2f084:	d1ef      	bne.n	2f066 <nrf_cloud_agps_process+0x3d2>
   2f086:	e6bc      	b.n	2ee02 <nrf_cloud_agps_process+0x16e>
		nrf_gnss_agps_data_location_t location = {0};
   2f088:	2200      	movs	r2, #0
   2f08a:	f88d 209f 	strb.w	r2, [sp, #159]	; 0x9f
	dst->latitude		= src->location->latitude;
   2f08e:	681a      	ldr	r2, [r3, #0]
   2f090:	9224      	str	r2, [sp, #144]	; 0x90
	dst->longitude		= src->location->longitude;
   2f092:	685a      	ldr	r2, [r3, #4]
   2f094:	9225      	str	r2, [sp, #148]	; 0x94
	dst->altitude		= src->location->altitude;
   2f096:	7a1a      	ldrb	r2, [r3, #8]
   2f098:	7a59      	ldrb	r1, [r3, #9]
   2f09a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2f09e:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
	dst->unc_semimajor	= src->location->unc_semimajor;
   2f0a2:	7a9a      	ldrb	r2, [r3, #10]
   2f0a4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
	dst->unc_semiminor	= src->location->unc_semiminor;
   2f0a8:	7ada      	ldrb	r2, [r3, #11]
   2f0aa:	f88d 209b 	strb.w	r2, [sp, #155]	; 0x9b
	dst->orientation_major	= src->location->orientation_major;
   2f0ae:	7b1a      	ldrb	r2, [r3, #12]
   2f0b0:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
	dst->unc_altitude	= src->location->unc_altitude;
   2f0b4:	7b5a      	ldrb	r2, [r3, #13]
	dst->confidence		= src->location->confidence;
   2f0b6:	7b9b      	ldrb	r3, [r3, #14]
	dst->unc_altitude	= src->location->unc_altitude;
   2f0b8:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
	dst->confidence		= src->location->confidence;
   2f0bc:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
		return send_to_modem(&location, sizeof(location),
   2f0c0:	2207      	movs	r2, #7
   2f0c2:	e6d5      	b.n	2ee70 <nrf_cloud_agps_process+0x1dc>
		return send_to_modem(agps_data->integrity,
   2f0c4:	2208      	movs	r2, #8
   2f0c6:	2104      	movs	r1, #4
   2f0c8:	4618      	mov	r0, r3
   2f0ca:	e69e      	b.n	2ee0a <nrf_cloud_agps_process+0x176>
		LOG_WRN("Unknown AGPS data type: %d", agps_data->type);
   2f0cc:	01a0      	lsls	r0, r4, #6
   2f0ce:	4651      	mov	r1, sl
   2f0d0:	f040 0002 	orr.w	r0, r0, #2
   2f0d4:	f00e f914 	bl	3d300 <log_string_sync>
		if (err) {
   2f0d8:	e609      	b.n	2ecee <nrf_cloud_agps_process+0x5a>
   2f0da:	bf00      	nop

0002f0dc <agps_print>:
}

void agps_print(nrf_gnss_agps_data_type_t type, void *data)
{

	switch (type) {
   2f0dc:	3801      	subs	r0, #1
{
   2f0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f0e2:	460c      	mov	r4, r1
   2f0e4:	2807      	cmp	r0, #7
   2f0e6:	f200 816b 	bhi.w	2f3c0 <agps_print+0x2e4>
   2f0ea:	e8df f010 	tbh	[pc, r0, lsl #1]
   2f0ee:	0008      	.short	0x0008
   2f0f0:	00a50030 	.word	0x00a50030
   2f0f4:	010d00e3 	.word	0x010d00e3
   2f0f8:	01400112 	.word	0x01400112
   2f0fc:	0163      	.short	0x0163
	printk("utc:\n");
   2f0fe:	48b1      	ldr	r0, [pc, #708]	; (2f3c4 <agps_print+0x2e8>)
   2f100:	f00d fe39 	bl	3cd76 <printk>
	printk("\ta1: %d\n", data->a1);
   2f104:	6821      	ldr	r1, [r4, #0]
   2f106:	48b0      	ldr	r0, [pc, #704]	; (2f3c8 <agps_print+0x2ec>)
   2f108:	f00d fe35 	bl	3cd76 <printk>
	printk("\ta0: %d\n", data->a0);
   2f10c:	6861      	ldr	r1, [r4, #4]
   2f10e:	48af      	ldr	r0, [pc, #700]	; (2f3cc <agps_print+0x2f0>)
   2f110:	f00d fe31 	bl	3cd76 <printk>
	printk("\ttot: %d\n", data->tot);
   2f114:	7a21      	ldrb	r1, [r4, #8]
   2f116:	48ae      	ldr	r0, [pc, #696]	; (2f3d0 <agps_print+0x2f4>)
   2f118:	f00d fe2d 	bl	3cd76 <printk>
	printk("\twn_t: %d\n", data->wn_t);
   2f11c:	7a61      	ldrb	r1, [r4, #9]
   2f11e:	48ad      	ldr	r0, [pc, #692]	; (2f3d4 <agps_print+0x2f8>)
   2f120:	f00d fe29 	bl	3cd76 <printk>
	printk("\tdelta_tls: %d\n", data->delta_tls);
   2f124:	f994 100a 	ldrsb.w	r1, [r4, #10]
   2f128:	48ab      	ldr	r0, [pc, #684]	; (2f3d8 <agps_print+0x2fc>)
   2f12a:	f00d fe24 	bl	3cd76 <printk>
	printk("\twn_lsf: %d\n", data->wn_lsf);
   2f12e:	7ae1      	ldrb	r1, [r4, #11]
   2f130:	48aa      	ldr	r0, [pc, #680]	; (2f3dc <agps_print+0x300>)
   2f132:	f00d fe20 	bl	3cd76 <printk>
	printk("\tdn: %d\n", data->dn);
   2f136:	f994 100c 	ldrsb.w	r1, [r4, #12]
   2f13a:	48a9      	ldr	r0, [pc, #676]	; (2f3e0 <agps_print+0x304>)
   2f13c:	f00d fe1b 	bl	3cd76 <printk>
	printk("\tdelta_tlsf: %d\n", data->delta_tlsf);
   2f140:	f994 100d 	ldrsb.w	r1, [r4, #13]
   2f144:	48a7      	ldr	r0, [pc, #668]	; (2f3e4 <agps_print+0x308>)
	}
	default:
		printk("Unknown AGPS data type\n");
		break;
	}
}
   2f146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printk("\tcuc: %d\n", data->cuc);
   2f14a:	f00d be14 	b.w	3cd76 <printk>
	printk("ephemeris:\n");
   2f14e:	48a6      	ldr	r0, [pc, #664]	; (2f3e8 <agps_print+0x30c>)
   2f150:	f00d fe11 	bl	3cd76 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2f154:	7821      	ldrb	r1, [r4, #0]
   2f156:	48a5      	ldr	r0, [pc, #660]	; (2f3ec <agps_print+0x310>)
   2f158:	f00d fe0d 	bl	3cd76 <printk>
	printk("\thealth: %d\n", data->health);
   2f15c:	7861      	ldrb	r1, [r4, #1]
   2f15e:	48a4      	ldr	r0, [pc, #656]	; (2f3f0 <agps_print+0x314>)
   2f160:	f00d fe09 	bl	3cd76 <printk>
	printk("\tiodc: %d\n", data->iodc);
   2f164:	8861      	ldrh	r1, [r4, #2]
   2f166:	48a3      	ldr	r0, [pc, #652]	; (2f3f4 <agps_print+0x318>)
   2f168:	f00d fe05 	bl	3cd76 <printk>
	printk("\ttoc: %d\n", data->toc);
   2f16c:	88a1      	ldrh	r1, [r4, #4]
   2f16e:	48a2      	ldr	r0, [pc, #648]	; (2f3f8 <agps_print+0x31c>)
   2f170:	f00d fe01 	bl	3cd76 <printk>
	printk("\taf2: %d\n", data->af2);
   2f174:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2f178:	48a0      	ldr	r0, [pc, #640]	; (2f3fc <agps_print+0x320>)
   2f17a:	f00d fdfc 	bl	3cd76 <printk>
	printk("\taf1: %d\n", data->af1);
   2f17e:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f182:	489f      	ldr	r0, [pc, #636]	; (2f400 <agps_print+0x324>)
   2f184:	f00d fdf7 	bl	3cd76 <printk>
	printk("\taf0: %d\n", data->af0);
   2f188:	68e1      	ldr	r1, [r4, #12]
   2f18a:	489e      	ldr	r0, [pc, #632]	; (2f404 <agps_print+0x328>)
   2f18c:	f00d fdf3 	bl	3cd76 <printk>
	printk("\ttgd: %d\n", data->tgd);
   2f190:	f994 1010 	ldrsb.w	r1, [r4, #16]
   2f194:	489c      	ldr	r0, [pc, #624]	; (2f408 <agps_print+0x32c>)
   2f196:	f00d fdee 	bl	3cd76 <printk>
	printk("\tura: %d\n", data->ura);
   2f19a:	7c61      	ldrb	r1, [r4, #17]
   2f19c:	489b      	ldr	r0, [pc, #620]	; (2f40c <agps_print+0x330>)
   2f19e:	f00d fdea 	bl	3cd76 <printk>
	printk("\tfit_int: %d\n", data->fit_int);
   2f1a2:	7ca1      	ldrb	r1, [r4, #18]
   2f1a4:	489a      	ldr	r0, [pc, #616]	; (2f410 <agps_print+0x334>)
   2f1a6:	f00d fde6 	bl	3cd76 <printk>
	printk("\ttoe: %d\n", data->toe);
   2f1aa:	8aa1      	ldrh	r1, [r4, #20]
   2f1ac:	4899      	ldr	r0, [pc, #612]	; (2f414 <agps_print+0x338>)
   2f1ae:	f00d fde2 	bl	3cd76 <printk>
	printk("\tw: %d\n", data->w);
   2f1b2:	69a1      	ldr	r1, [r4, #24]
   2f1b4:	4898      	ldr	r0, [pc, #608]	; (2f418 <agps_print+0x33c>)
   2f1b6:	f00d fdde 	bl	3cd76 <printk>
	printk("\tdelta_n: %d\n", data->delta_n);
   2f1ba:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2f1be:	4897      	ldr	r0, [pc, #604]	; (2f41c <agps_print+0x340>)
   2f1c0:	f00d fdd9 	bl	3cd76 <printk>
	printk("\tm0: %d\n", data->m0);
   2f1c4:	6a21      	ldr	r1, [r4, #32]
   2f1c6:	4896      	ldr	r0, [pc, #600]	; (2f420 <agps_print+0x344>)
   2f1c8:	f00d fdd5 	bl	3cd76 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2f1cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2f1ce:	4895      	ldr	r0, [pc, #596]	; (2f424 <agps_print+0x348>)
   2f1d0:	f00d fdd1 	bl	3cd76 <printk>
	printk("\te: %d\n", data->e);
   2f1d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2f1d6:	4894      	ldr	r0, [pc, #592]	; (2f428 <agps_print+0x34c>)
   2f1d8:	f00d fdcd 	bl	3cd76 <printk>
	printk("\tidot: %d\n", data->idot);
   2f1dc:	f9b4 102c 	ldrsh.w	r1, [r4, #44]	; 0x2c
   2f1e0:	4892      	ldr	r0, [pc, #584]	; (2f42c <agps_print+0x350>)
   2f1e2:	f00d fdc8 	bl	3cd76 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2f1e6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2f1e8:	4891      	ldr	r0, [pc, #580]	; (2f430 <agps_print+0x354>)
   2f1ea:	f00d fdc4 	bl	3cd76 <printk>
	printk("\ti0: %d\n", data->i0);
   2f1ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
   2f1f0:	4890      	ldr	r0, [pc, #576]	; (2f434 <agps_print+0x358>)
   2f1f2:	f00d fdc0 	bl	3cd76 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2f1f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   2f1f8:	488f      	ldr	r0, [pc, #572]	; (2f438 <agps_print+0x35c>)
   2f1fa:	f00d fdbc 	bl	3cd76 <printk>
	printk("\tcrs: %d\n", data->crs);
   2f1fe:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
   2f202:	488e      	ldr	r0, [pc, #568]	; (2f43c <agps_print+0x360>)
   2f204:	f00d fdb7 	bl	3cd76 <printk>
	printk("\tcis: %d\n", data->cis);
   2f208:	f9b4 103e 	ldrsh.w	r1, [r4, #62]	; 0x3e
   2f20c:	488c      	ldr	r0, [pc, #560]	; (2f440 <agps_print+0x364>)
   2f20e:	f00d fdb2 	bl	3cd76 <printk>
	printk("\tcus: %d\n", data->cus);
   2f212:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
   2f216:	488b      	ldr	r0, [pc, #556]	; (2f444 <agps_print+0x368>)
   2f218:	f00d fdad 	bl	3cd76 <printk>
	printk("\tcrc: %d\n", data->crc);
   2f21c:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
   2f220:	4889      	ldr	r0, [pc, #548]	; (2f448 <agps_print+0x36c>)
   2f222:	f00d fda8 	bl	3cd76 <printk>
	printk("\tcic: %d\n", data->cic);
   2f226:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
   2f22a:	4888      	ldr	r0, [pc, #544]	; (2f44c <agps_print+0x370>)
   2f22c:	f00d fda3 	bl	3cd76 <printk>
	printk("\tcuc: %d\n", data->cuc);
   2f230:	f9b4 1046 	ldrsh.w	r1, [r4, #70]	; 0x46
   2f234:	4886      	ldr	r0, [pc, #536]	; (2f450 <agps_print+0x374>)
   2f236:	e786      	b.n	2f146 <agps_print+0x6a>
	printk("almanac\n");
   2f238:	4886      	ldr	r0, [pc, #536]	; (2f454 <agps_print+0x378>)
   2f23a:	f00d fd9c 	bl	3cd76 <printk>
	printk("\tsv_id: %d\n", data->sv_id);
   2f23e:	7821      	ldrb	r1, [r4, #0]
   2f240:	486a      	ldr	r0, [pc, #424]	; (2f3ec <agps_print+0x310>)
   2f242:	f00d fd98 	bl	3cd76 <printk>
	printk("\twn: %d\n", data->wn);
   2f246:	7861      	ldrb	r1, [r4, #1]
   2f248:	4883      	ldr	r0, [pc, #524]	; (2f458 <agps_print+0x37c>)
   2f24a:	f00d fd94 	bl	3cd76 <printk>
	printk("\ttoa: %d\n", data->toa);
   2f24e:	78a1      	ldrb	r1, [r4, #2]
   2f250:	4882      	ldr	r0, [pc, #520]	; (2f45c <agps_print+0x380>)
   2f252:	f00d fd90 	bl	3cd76 <printk>
	printk("\tioda: %d\n", data->ioda);
   2f256:	78e1      	ldrb	r1, [r4, #3]
   2f258:	4881      	ldr	r0, [pc, #516]	; (2f460 <agps_print+0x384>)
   2f25a:	f00d fd8c 	bl	3cd76 <printk>
	printk("\te: %d\n", data->e);
   2f25e:	88a1      	ldrh	r1, [r4, #4]
   2f260:	4871      	ldr	r0, [pc, #452]	; (2f428 <agps_print+0x34c>)
   2f262:	f00d fd88 	bl	3cd76 <printk>
	printk("\tdelta_i: %d\n", data->delta_i);
   2f266:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
   2f26a:	487e      	ldr	r0, [pc, #504]	; (2f464 <agps_print+0x388>)
   2f26c:	f00d fd83 	bl	3cd76 <printk>
	printk("\tomega_dot: %d\n", data->omega_dot);
   2f270:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f274:	486b      	ldr	r0, [pc, #428]	; (2f424 <agps_print+0x348>)
   2f276:	f00d fd7e 	bl	3cd76 <printk>
	printk("\tsv_health: %d\n", data->sv_health);
   2f27a:	7aa1      	ldrb	r1, [r4, #10]
   2f27c:	487a      	ldr	r0, [pc, #488]	; (2f468 <agps_print+0x38c>)
   2f27e:	f00d fd7a 	bl	3cd76 <printk>
	printk("\tsqrt_a: %d\n", data->sqrt_a);
   2f282:	68e1      	ldr	r1, [r4, #12]
   2f284:	486a      	ldr	r0, [pc, #424]	; (2f430 <agps_print+0x354>)
   2f286:	f00d fd76 	bl	3cd76 <printk>
	printk("\tomega0: %d\n", data->omega0);
   2f28a:	6921      	ldr	r1, [r4, #16]
   2f28c:	486a      	ldr	r0, [pc, #424]	; (2f438 <agps_print+0x35c>)
   2f28e:	f00d fd72 	bl	3cd76 <printk>
	printk("\tw: %d\n", data->w);
   2f292:	6961      	ldr	r1, [r4, #20]
   2f294:	4860      	ldr	r0, [pc, #384]	; (2f418 <agps_print+0x33c>)
   2f296:	f00d fd6e 	bl	3cd76 <printk>
	printk("\tm0: %d\n", data->m0);
   2f29a:	69a1      	ldr	r1, [r4, #24]
   2f29c:	4860      	ldr	r0, [pc, #384]	; (2f420 <agps_print+0x344>)
   2f29e:	f00d fd6a 	bl	3cd76 <printk>
	printk("\taf0: %d\n", data->af0);
   2f2a2:	f9b4 101c 	ldrsh.w	r1, [r4, #28]
   2f2a6:	4857      	ldr	r0, [pc, #348]	; (2f404 <agps_print+0x328>)
   2f2a8:	f00d fd65 	bl	3cd76 <printk>
	printk("\taf1: %d\n", data->af1);
   2f2ac:	f9b4 101e 	ldrsh.w	r1, [r4, #30]
   2f2b0:	4853      	ldr	r0, [pc, #332]	; (2f400 <agps_print+0x324>)
   2f2b2:	e748      	b.n	2f146 <agps_print+0x6a>
	printk("klobuchar\n");
   2f2b4:	486d      	ldr	r0, [pc, #436]	; (2f46c <agps_print+0x390>)
   2f2b6:	f00d fd5e 	bl	3cd76 <printk>
	printk("\talpha0: %d\n", data->alpha0);
   2f2ba:	f994 1000 	ldrsb.w	r1, [r4]
   2f2be:	486c      	ldr	r0, [pc, #432]	; (2f470 <agps_print+0x394>)
   2f2c0:	f00d fd59 	bl	3cd76 <printk>
	printk("\talpha1: %d\n", data->alpha1);
   2f2c4:	f994 1001 	ldrsb.w	r1, [r4, #1]
   2f2c8:	486a      	ldr	r0, [pc, #424]	; (2f474 <agps_print+0x398>)
   2f2ca:	f00d fd54 	bl	3cd76 <printk>
	printk("\talpha2: %d\n", data->alpha2);
   2f2ce:	f994 1002 	ldrsb.w	r1, [r4, #2]
   2f2d2:	4869      	ldr	r0, [pc, #420]	; (2f478 <agps_print+0x39c>)
   2f2d4:	f00d fd4f 	bl	3cd76 <printk>
	printk("\talpha3: %d\n", data->alpha3);
   2f2d8:	f994 1003 	ldrsb.w	r1, [r4, #3]
   2f2dc:	4867      	ldr	r0, [pc, #412]	; (2f47c <agps_print+0x3a0>)
   2f2de:	f00d fd4a 	bl	3cd76 <printk>
	printk("\tbeta0: %d\n", data->beta0);
   2f2e2:	f994 1004 	ldrsb.w	r1, [r4, #4]
   2f2e6:	4866      	ldr	r0, [pc, #408]	; (2f480 <agps_print+0x3a4>)
   2f2e8:	f00d fd45 	bl	3cd76 <printk>
	printk("\tbeta1: %d\n", data->beta1);
   2f2ec:	f994 1005 	ldrsb.w	r1, [r4, #5]
   2f2f0:	4864      	ldr	r0, [pc, #400]	; (2f484 <agps_print+0x3a8>)
   2f2f2:	f00d fd40 	bl	3cd76 <printk>
	printk("\tbeta2: %d\n", data->beta2);
   2f2f6:	f994 1006 	ldrsb.w	r1, [r4, #6]
   2f2fa:	4863      	ldr	r0, [pc, #396]	; (2f488 <agps_print+0x3ac>)
   2f2fc:	f00d fd3b 	bl	3cd76 <printk>
	printk("\tbeta3: %d\n", data->beta3);
   2f300:	f994 1007 	ldrsb.w	r1, [r4, #7]
   2f304:	4861      	ldr	r0, [pc, #388]	; (2f48c <agps_print+0x3b0>)
   2f306:	e71e      	b.n	2f146 <agps_print+0x6a>
		printk("nequick unhandled\n");
   2f308:	4861      	ldr	r0, [pc, #388]	; (2f490 <agps_print+0x3b4>)
}
   2f30a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printk("Unknown AGPS data type\n");
   2f30e:	f00d bd32 	b.w	3cd76 <printk>
	printk("clock_and_tows\n");
   2f312:	4860      	ldr	r0, [pc, #384]	; (2f494 <agps_print+0x3b8>)
   2f314:	f00d fd2f 	bl	3cd76 <printk>
	printk("\tdate_day: %d\n", data->date_day);
   2f318:	8821      	ldrh	r1, [r4, #0]
   2f31a:	485f      	ldr	r0, [pc, #380]	; (2f498 <agps_print+0x3bc>)
   2f31c:	f00d fd2b 	bl	3cd76 <printk>
	printk("\ttime_full_s: %d\n", data->time_full_s);
   2f320:	6861      	ldr	r1, [r4, #4]
   2f322:	485e      	ldr	r0, [pc, #376]	; (2f49c <agps_print+0x3c0>)
   2f324:	f00d fd27 	bl	3cd76 <printk>
	printk("\ttime_frac_ms: %d\n", data->time_frac_ms);
   2f328:	8921      	ldrh	r1, [r4, #8]
   2f32a:	485d      	ldr	r0, [pc, #372]	; (2f4a0 <agps_print+0x3c4>)
   2f32c:	f00d fd23 	bl	3cd76 <printk>
	printk("\tsv_mask: %d\n", data->sv_mask);
   2f330:	68e1      	ldr	r1, [r4, #12]
   2f332:	485c      	ldr	r0, [pc, #368]	; (2f4a4 <agps_print+0x3c8>)
   2f334:	f00d fd1f 	bl	3cd76 <printk>
	printk("\tsv_tow\n");
   2f338:	485b      	ldr	r0, [pc, #364]	; (2f4a8 <agps_print+0x3cc>)
   2f33a:	f00d fd1c 	bl	3cd76 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2f33e:	2500      	movs	r5, #0
		printk("\t\tsv_tow[%d]\n", i);
   2f340:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 2f4e4 <agps_print+0x408>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2f344:	4f59      	ldr	r7, [pc, #356]	; (2f4ac <agps_print+0x3d0>)
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2f346:	4e5a      	ldr	r6, [pc, #360]	; (2f4b0 <agps_print+0x3d4>)
		printk("\t\tsv_tow[%d]\n", i);
   2f348:	4629      	mov	r1, r5
   2f34a:	4640      	mov	r0, r8
   2f34c:	f00d fd13 	bl	3cd76 <printk>
		printk("\t\t\ttlm: %d\n", data->sv_tow[i].tlm);
   2f350:	8a21      	ldrh	r1, [r4, #16]
   2f352:	4638      	mov	r0, r7
   2f354:	f00d fd0f 	bl	3cd76 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2f358:	3501      	adds	r5, #1
		printk("\t\t\tflags: %d\n", data->sv_tow[i].flags);
   2f35a:	7ca1      	ldrb	r1, [r4, #18]
   2f35c:	4630      	mov	r0, r6
   2f35e:	f00d fd0a 	bl	3cd76 <printk>
	for (size_t i = 0; i < NRF_GNSS_AGPS_MAX_SV_TOW; i++) {
   2f362:	2d20      	cmp	r5, #32
   2f364:	f104 0404 	add.w	r4, r4, #4
   2f368:	d1ee      	bne.n	2f348 <agps_print+0x26c>
}
   2f36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printk("location\n");
   2f36e:	4851      	ldr	r0, [pc, #324]	; (2f4b4 <agps_print+0x3d8>)
   2f370:	f00d fd01 	bl	3cd76 <printk>
	printk("\tlatitude: %d\n", data->latitude);
   2f374:	6821      	ldr	r1, [r4, #0]
   2f376:	4850      	ldr	r0, [pc, #320]	; (2f4b8 <agps_print+0x3dc>)
   2f378:	f00d fcfd 	bl	3cd76 <printk>
	printk("\tlongitude: %d\n", data->longitude);
   2f37c:	6861      	ldr	r1, [r4, #4]
   2f37e:	484f      	ldr	r0, [pc, #316]	; (2f4bc <agps_print+0x3e0>)
   2f380:	f00d fcf9 	bl	3cd76 <printk>
	printk("\taltitude: %d\n", data->altitude);
   2f384:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   2f388:	484d      	ldr	r0, [pc, #308]	; (2f4c0 <agps_print+0x3e4>)
   2f38a:	f00d fcf4 	bl	3cd76 <printk>
	printk("\tunc_semimajor: %d\n", data->unc_semimajor);
   2f38e:	7aa1      	ldrb	r1, [r4, #10]
   2f390:	484c      	ldr	r0, [pc, #304]	; (2f4c4 <agps_print+0x3e8>)
   2f392:	f00d fcf0 	bl	3cd76 <printk>
	printk("\tunc_semiminor: %d\n", data->unc_semiminor);
   2f396:	7ae1      	ldrb	r1, [r4, #11]
   2f398:	484b      	ldr	r0, [pc, #300]	; (2f4c8 <agps_print+0x3ec>)
   2f39a:	f00d fcec 	bl	3cd76 <printk>
	printk("\torientation_major: %d\n", data->orientation_major);
   2f39e:	7b21      	ldrb	r1, [r4, #12]
   2f3a0:	484a      	ldr	r0, [pc, #296]	; (2f4cc <agps_print+0x3f0>)
   2f3a2:	f00d fce8 	bl	3cd76 <printk>
	printk("\tunc_altitude: %d\n", data->unc_altitude);
   2f3a6:	7b61      	ldrb	r1, [r4, #13]
   2f3a8:	4849      	ldr	r0, [pc, #292]	; (2f4d0 <agps_print+0x3f4>)
   2f3aa:	f00d fce4 	bl	3cd76 <printk>
	printk("\tconfidence: %d\n", data->confidence);
   2f3ae:	7ba1      	ldrb	r1, [r4, #14]
   2f3b0:	4848      	ldr	r0, [pc, #288]	; (2f4d4 <agps_print+0x3f8>)
   2f3b2:	e6c8      	b.n	2f146 <agps_print+0x6a>
	printk("integrity\n");
   2f3b4:	4848      	ldr	r0, [pc, #288]	; (2f4d8 <agps_print+0x3fc>)
   2f3b6:	f00d fcde 	bl	3cd76 <printk>
	printk("\tintegrity_mask: %d\n", data->integrity_mask);
   2f3ba:	6821      	ldr	r1, [r4, #0]
   2f3bc:	4847      	ldr	r0, [pc, #284]	; (2f4dc <agps_print+0x400>)
   2f3be:	e6c2      	b.n	2f146 <agps_print+0x6a>
		printk("Unknown AGPS data type\n");
   2f3c0:	4847      	ldr	r0, [pc, #284]	; (2f4e0 <agps_print+0x404>)
   2f3c2:	e7a2      	b.n	2f30a <agps_print+0x22e>
   2f3c4:	000496bc 	.word	0x000496bc
   2f3c8:	000496c2 	.word	0x000496c2
   2f3cc:	000496cb 	.word	0x000496cb
   2f3d0:	000496d4 	.word	0x000496d4
   2f3d4:	000496de 	.word	0x000496de
   2f3d8:	000496e9 	.word	0x000496e9
   2f3dc:	000496f9 	.word	0x000496f9
   2f3e0:	00049706 	.word	0x00049706
   2f3e4:	0004970f 	.word	0x0004970f
   2f3e8:	00049720 	.word	0x00049720
   2f3ec:	0004972c 	.word	0x0004972c
   2f3f0:	00049738 	.word	0x00049738
   2f3f4:	00049745 	.word	0x00049745
   2f3f8:	00049750 	.word	0x00049750
   2f3fc:	0004975a 	.word	0x0004975a
   2f400:	00049764 	.word	0x00049764
   2f404:	0004976e 	.word	0x0004976e
   2f408:	00049778 	.word	0x00049778
   2f40c:	00049782 	.word	0x00049782
   2f410:	0004978c 	.word	0x0004978c
   2f414:	0004979a 	.word	0x0004979a
   2f418:	000497a4 	.word	0x000497a4
   2f41c:	000497ac 	.word	0x000497ac
   2f420:	000497ba 	.word	0x000497ba
   2f424:	000497c3 	.word	0x000497c3
   2f428:	000497d3 	.word	0x000497d3
   2f42c:	000497db 	.word	0x000497db
   2f430:	000497e6 	.word	0x000497e6
   2f434:	000497f3 	.word	0x000497f3
   2f438:	000497fc 	.word	0x000497fc
   2f43c:	00049809 	.word	0x00049809
   2f440:	00049813 	.word	0x00049813
   2f444:	0004981d 	.word	0x0004981d
   2f448:	00049827 	.word	0x00049827
   2f44c:	00049831 	.word	0x00049831
   2f450:	0004983b 	.word	0x0004983b
   2f454:	00049845 	.word	0x00049845
   2f458:	0004984e 	.word	0x0004984e
   2f45c:	00049857 	.word	0x00049857
   2f460:	00049861 	.word	0x00049861
   2f464:	0004986c 	.word	0x0004986c
   2f468:	0004987a 	.word	0x0004987a
   2f46c:	0004988a 	.word	0x0004988a
   2f470:	00049895 	.word	0x00049895
   2f474:	000498a2 	.word	0x000498a2
   2f478:	000498af 	.word	0x000498af
   2f47c:	000498bc 	.word	0x000498bc
   2f480:	000498c9 	.word	0x000498c9
   2f484:	000498d5 	.word	0x000498d5
   2f488:	000498e1 	.word	0x000498e1
   2f48c:	000498ed 	.word	0x000498ed
   2f490:	000498f9 	.word	0x000498f9
   2f494:	0004990c 	.word	0x0004990c
   2f498:	0004991c 	.word	0x0004991c
   2f49c:	0004992b 	.word	0x0004992b
   2f4a0:	0004993d 	.word	0x0004993d
   2f4a4:	00049950 	.word	0x00049950
   2f4a8:	0004995e 	.word	0x0004995e
   2f4ac:	00049975 	.word	0x00049975
   2f4b0:	00049981 	.word	0x00049981
   2f4b4:	00045cba 	.word	0x00045cba
   2f4b8:	0004998f 	.word	0x0004998f
   2f4bc:	0004999e 	.word	0x0004999e
   2f4c0:	000499ae 	.word	0x000499ae
   2f4c4:	000499bd 	.word	0x000499bd
   2f4c8:	000499d1 	.word	0x000499d1
   2f4cc:	000499e5 	.word	0x000499e5
   2f4d0:	000499fd 	.word	0x000499fd
   2f4d4:	00049a10 	.word	0x00049a10
   2f4d8:	00049a21 	.word	0x00049a21
   2f4dc:	00049a2c 	.word	0x00049a2c
   2f4e0:	00049a41 	.word	0x00049a41
   2f4e4:	00049967 	.word	0x00049967

0002f4e8 <fota_settings_set>:
SETTINGS_STATIC_HANDLER_DEFINE(fota, SETTINGS_FULL_FOTA, NULL,
			       fota_settings_set, NULL, NULL);

static int fota_settings_set(const char *key, size_t len_rd,
			     settings_read_cb read_cb, void *cb_arg)
{
   2f4e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2f4ec:	461f      	mov	r7, r3
   2f4ee:	4c24      	ldr	r4, [pc, #144]	; (2f580 <fota_settings_set+0x98>)
   2f4f0:	4b24      	ldr	r3, [pc, #144]	; (2f584 <fota_settings_set+0x9c>)
   2f4f2:	460d      	mov	r5, r1
   2f4f4:	1ae4      	subs	r4, r4, r3
   2f4f6:	08e4      	lsrs	r4, r4, #3
   2f4f8:	4616      	mov	r6, r2
	if (!key) {
   2f4fa:	4680      	mov	r8, r0
   2f4fc:	01a4      	lsls	r4, r4, #6
   2f4fe:	b958      	cbnz	r0, 2f518 <fota_settings_set+0x30>
		LOG_DBG("Key is NULL");
   2f500:	4a21      	ldr	r2, [pc, #132]	; (2f588 <fota_settings_set+0xa0>)
   2f502:	4922      	ldr	r1, [pc, #136]	; (2f58c <fota_settings_set+0xa4>)
   2f504:	f044 0004 	orr.w	r0, r4, #4
   2f508:	f00d fefa 	bl	3d300 <log_string_sync>
		return -EINVAL;
   2f50c:	f06f 0815 	mvn.w	r8, #21
				saved_job.validate);
			return 0;
		}
	}
	return -ENOTSUP;
}
   2f510:	4640      	mov	r0, r8
   2f512:	b003      	add	sp, #12
   2f514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_DBG("Settings key: %s, size: %d", log_strdup(key), len_rd);
   2f518:	f00d ff05 	bl	3d326 <log_strdup>
   2f51c:	f044 0404 	orr.w	r4, r4, #4
   2f520:	4603      	mov	r3, r0
   2f522:	4a19      	ldr	r2, [pc, #100]	; (2f588 <fota_settings_set+0xa0>)
   2f524:	491a      	ldr	r1, [pc, #104]	; (2f590 <fota_settings_set+0xa8>)
   2f526:	4620      	mov	r0, r4
   2f528:	9500      	str	r5, [sp, #0]
   2f52a:	f00d fee9 	bl	3d300 <log_string_sync>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   2f52e:	4819      	ldr	r0, [pc, #100]	; (2f594 <fota_settings_set+0xac>)
   2f530:	f7ed fe94 	bl	1d25c <strlen>
   2f534:	4917      	ldr	r1, [pc, #92]	; (2f594 <fota_settings_set+0xac>)
   2f536:	4602      	mov	r2, r0
   2f538:	4640      	mov	r0, r8
   2f53a:	f012 fdb9 	bl	420b0 <strncmp>
   2f53e:	4680      	mov	r8, r0
   2f540:	b110      	cbz	r0, 2f548 <fota_settings_set+0x60>
	return -ENOTSUP;
   2f542:	f06f 0885 	mvn.w	r8, #133	; 0x85
   2f546:	e7e3      	b.n	2f510 <fota_settings_set+0x28>
	if (!strncmp(key, SETTINGS_FOTA_JOB, strlen(SETTINGS_FOTA_JOB)) &&
   2f548:	2d27      	cmp	r5, #39	; 0x27
   2f54a:	d1fa      	bne.n	2f542 <fota_settings_set+0x5a>
		if (read_cb(cb_arg, (void *)&saved_job, len_rd) == len_rd) {
   2f54c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 2f59c <fota_settings_set+0xb4>
   2f550:	462a      	mov	r2, r5
   2f552:	4649      	mov	r1, r9
   2f554:	4638      	mov	r0, r7
   2f556:	47b0      	blx	r6
   2f558:	2827      	cmp	r0, #39	; 0x27
   2f55a:	d1f2      	bne.n	2f542 <fota_settings_set+0x5a>
			LOG_DBG("Saved job: %s, type: %d, validate: %d",
   2f55c:	f109 0002 	add.w	r0, r9, #2
   2f560:	f00d fee1 	bl	3d326 <log_strdup>
   2f564:	f899 2000 	ldrb.w	r2, [r9]
   2f568:	4603      	mov	r3, r0
   2f56a:	9201      	str	r2, [sp, #4]
   2f56c:	f899 2001 	ldrb.w	r2, [r9, #1]
   2f570:	4620      	mov	r0, r4
   2f572:	9200      	str	r2, [sp, #0]
   2f574:	4908      	ldr	r1, [pc, #32]	; (2f598 <fota_settings_set+0xb0>)
   2f576:	4a04      	ldr	r2, [pc, #16]	; (2f588 <fota_settings_set+0xa0>)
   2f578:	f00d fec2 	bl	3d300 <log_string_sync>
			return 0;
   2f57c:	e7c8      	b.n	2f510 <fota_settings_set+0x28>
   2f57e:	bf00      	nop
   2f580:	0004349c 	.word	0x0004349c
   2f584:	0004339c 	.word	0x0004339c
   2f588:	00049fef 	.word	0x00049fef
   2f58c:	00049a59 	.word	0x00049a59
   2f590:	00048d40 	.word	0x00048d40
   2f594:	00049df5 	.word	0x00049df5
   2f598:	00049a69 	.word	0x00049a69
   2f59c:	200158f1 	.word	0x200158f1

0002f5a0 <add_number_to_array>:
	}
	return item;
}

static bool add_number_to_array(cJSON *const array, const int number)
{
   2f5a0:	b538      	push	{r3, r4, r5, lr}
   2f5a2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f5a4:	4605      	mov	r5, r0
   2f5a6:	b958      	cbnz	r0, 2f5c0 <add_number_to_array+0x20>
   2f5a8:	490e      	ldr	r1, [pc, #56]	; (2f5e4 <add_number_to_array+0x44>)
   2f5aa:	480f      	ldr	r0, [pc, #60]	; (2f5e8 <add_number_to_array+0x48>)
   2f5ac:	f240 238d 	movw	r3, #653	; 0x28d
   2f5b0:	4a0e      	ldr	r2, [pc, #56]	; (2f5ec <add_number_to_array+0x4c>)
   2f5b2:	f00d fbe0 	bl	3cd76 <printk>
   2f5b6:	f240 218d 	movw	r1, #653	; 0x28d
   2f5ba:	480c      	ldr	r0, [pc, #48]	; (2f5ec <add_number_to_array+0x4c>)
   2f5bc:	f00d fe8f 	bl	3d2de <assert_post_action>

	cJSON *item = cJSON_CreateNumber(number);
   2f5c0:	4620      	mov	r0, r4
   2f5c2:	f7ed f88f 	bl	1c6e4 <__aeabi_i2d>
   2f5c6:	ec41 0b10 	vmov	d0, r0, r1
   2f5ca:	f7ee fa11 	bl	1d9f0 <cJSON_CreateNumber>

	if (item) {
   2f5ce:	4604      	mov	r4, r0
   2f5d0:	b118      	cbz	r0, 2f5da <add_number_to_array+0x3a>
		cJSON_AddItemToArray(array, item);
   2f5d2:	4601      	mov	r1, r0
   2f5d4:	4628      	mov	r0, r5
   2f5d6:	f00f ff02 	bl	3f3de <cJSON_AddItemToArray>
	}
	return item;
}
   2f5da:	1e20      	subs	r0, r4, #0
   2f5dc:	bf18      	it	ne
   2f5de:	2001      	movne	r0, #1
   2f5e0:	bd38      	pop	{r3, r4, r5, pc}
   2f5e2:	bf00      	nop
   2f5e4:	00049ad1 	.word	0x00049ad1
   2f5e8:	00044dbf 	.word	0x00044dbf
   2f5ec:	00049a93 	.word	0x00049a93

0002f5f0 <add_string_to_array>:
{
   2f5f0:	b538      	push	{r3, r4, r5, lr}
   2f5f2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(array != NULL);
   2f5f4:	4605      	mov	r5, r0
   2f5f6:	b958      	cbnz	r0, 2f610 <add_string_to_array+0x20>
   2f5f8:	490c      	ldr	r1, [pc, #48]	; (2f62c <add_string_to_array+0x3c>)
   2f5fa:	480d      	ldr	r0, [pc, #52]	; (2f630 <add_string_to_array+0x40>)
   2f5fc:	f240 2381 	movw	r3, #641	; 0x281
   2f600:	4a0c      	ldr	r2, [pc, #48]	; (2f634 <add_string_to_array+0x44>)
   2f602:	f00d fbb8 	bl	3cd76 <printk>
   2f606:	f240 2181 	movw	r1, #641	; 0x281
   2f60a:	480a      	ldr	r0, [pc, #40]	; (2f634 <add_string_to_array+0x44>)
   2f60c:	f00d fe67 	bl	3d2de <assert_post_action>
	cJSON *item = cJSON_CreateString(string);
   2f610:	4620      	mov	r0, r4
   2f612:	f7f9 fc87 	bl	28f24 <cJSON_CreateString>
	if (item) {
   2f616:	4604      	mov	r4, r0
   2f618:	b118      	cbz	r0, 2f622 <add_string_to_array+0x32>
		cJSON_AddItemToArray(array, item);
   2f61a:	4601      	mov	r1, r0
   2f61c:	4628      	mov	r0, r5
   2f61e:	f00f fede 	bl	3f3de <cJSON_AddItemToArray>
}
   2f622:	1e20      	subs	r0, r4, #0
   2f624:	bf18      	it	ne
   2f626:	2001      	movne	r0, #1
   2f628:	bd38      	pop	{r3, r4, r5, pc}
   2f62a:	bf00      	nop
   2f62c:	00049ad1 	.word	0x00049ad1
   2f630:	00044dbf 	.word	0x00044dbf
   2f634:	00049a93 	.word	0x00049a93

0002f638 <publish>:
	memset(job, 0, sizeof(*job));
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
}

static int publish(const struct mqtt_publish_param *const pub)
{
   2f638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2f63a:	4b16      	ldr	r3, [pc, #88]	; (2f694 <publish+0x5c>)
   2f63c:	4c16      	ldr	r4, [pc, #88]	; (2f698 <publish+0x60>)
   2f63e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(pub != NULL);

	int ret;

	LOG_DBG("Topic: %s",
   2f640:	6800      	ldr	r0, [r0, #0]
   2f642:	1ae4      	subs	r4, r4, r3
   2f644:	f00d fe6f 	bl	3d326 <log_strdup>
   2f648:	08e4      	lsrs	r4, r4, #3
   2f64a:	01a4      	lsls	r4, r4, #6
   2f64c:	f044 0604 	orr.w	r6, r4, #4
   2f650:	4603      	mov	r3, r0
   2f652:	4a12      	ldr	r2, [pc, #72]	; (2f69c <publish+0x64>)
   2f654:	4912      	ldr	r1, [pc, #72]	; (2f6a0 <publish+0x68>)
   2f656:	4630      	mov	r0, r6
   2f658:	f00d fe52 	bl	3d300 <log_string_sync>
		log_strdup(pub->message.topic.topic.utf8));
	LOG_DBG("Payload (%d bytes): %s",
   2f65c:	692b      	ldr	r3, [r5, #16]
   2f65e:	68e8      	ldr	r0, [r5, #12]
   2f660:	9303      	str	r3, [sp, #12]
   2f662:	f00d fe60 	bl	3d326 <log_strdup>
   2f666:	9b03      	ldr	r3, [sp, #12]
   2f668:	4a0c      	ldr	r2, [pc, #48]	; (2f69c <publish+0x64>)
   2f66a:	490e      	ldr	r1, [pc, #56]	; (2f6a4 <publish+0x6c>)
   2f66c:	9000      	str	r0, [sp, #0]
   2f66e:	4630      	mov	r0, r6
   2f670:	f00d fe46 	bl	3d300 <log_string_sync>
		pub->message.payload.len,
		log_strdup(pub->message.payload.data));

	ret = mqtt_publish(client_mqtt, pub);
   2f674:	4b0c      	ldr	r3, [pc, #48]	; (2f6a8 <publish+0x70>)
   2f676:	4629      	mov	r1, r5
   2f678:	6818      	ldr	r0, [r3, #0]
   2f67a:	f00f f9a9 	bl	3e9d0 <mqtt_publish>
	if (ret) {
   2f67e:	4605      	mov	r5, r0
   2f680:	b128      	cbz	r0, 2f68e <publish+0x56>
		LOG_ERR("Publish failed: %d", ret);
   2f682:	4602      	mov	r2, r0
   2f684:	4909      	ldr	r1, [pc, #36]	; (2f6ac <publish+0x74>)
   2f686:	f044 0001 	orr.w	r0, r4, #1
   2f68a:	f00d fe39 	bl	3d300 <log_string_sync>
	}
	return ret;
}
   2f68e:	4628      	mov	r0, r5
   2f690:	b004      	add	sp, #16
   2f692:	bd70      	pop	{r4, r5, r6, pc}
   2f694:	0004339c 	.word	0x0004339c
   2f698:	0004349c 	.word	0x0004349c
   2f69c:	0004a074 	.word	0x0004a074
   2f6a0:	00049ae6 	.word	0x00049ae6
   2f6a4:	00049af4 	.word	0x00049af4
   2f6a8:	20019d1c 	.word	0x20019d1c
   2f6ac:	00049b0f 	.word	0x00049b0f

0002f6b0 <save_validate_status>:
{
   2f6b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   2f6b4:	460f      	mov	r7, r1
   2f6b6:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(job_id != NULL);
   2f6b8:	4605      	mov	r5, r0
   2f6ba:	b958      	cbnz	r0, 2f6d4 <save_validate_status+0x24>
   2f6bc:	4922      	ldr	r1, [pc, #136]	; (2f748 <save_validate_status+0x98>)
   2f6be:	4823      	ldr	r0, [pc, #140]	; (2f74c <save_validate_status+0x9c>)
   2f6c0:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   2f6c4:	4a22      	ldr	r2, [pc, #136]	; (2f750 <save_validate_status+0xa0>)
   2f6c6:	f00d fb56 	bl	3cd76 <printk>
   2f6ca:	f44f 71fe 	mov.w	r1, #508	; 0x1fc
   2f6ce:	4820      	ldr	r0, [pc, #128]	; (2f750 <save_validate_status+0xa0>)
   2f6d0:	f00d fe05 	bl	3d2de <assert_post_action>
   2f6d4:	4b1f      	ldr	r3, [pc, #124]	; (2f754 <save_validate_status+0xa4>)
   2f6d6:	4c20      	ldr	r4, [pc, #128]	; (2f758 <save_validate_status+0xa8>)
	LOG_DBG("%s() - %s, %d, %d",
   2f6d8:	4628      	mov	r0, r5
   2f6da:	1ae4      	subs	r4, r4, r3
   2f6dc:	f00d fe23 	bl	3d326 <log_strdup>
   2f6e0:	08e4      	lsrs	r4, r4, #3
   2f6e2:	4b1e      	ldr	r3, [pc, #120]	; (2f75c <save_validate_status+0xac>)
   2f6e4:	01a4      	lsls	r4, r4, #6
   2f6e6:	f044 0804 	orr.w	r8, r4, #4
   2f6ea:	9000      	str	r0, [sp, #0]
   2f6ec:	461a      	mov	r2, r3
   2f6ee:	4640      	mov	r0, r8
   2f6f0:	e9cd 7601 	strd	r7, r6, [sp, #4]
   2f6f4:	491a      	ldr	r1, [pc, #104]	; (2f760 <save_validate_status+0xb0>)
   2f6f6:	f00d fe03 	bl	3d300 <log_string_sync>
	if (validate == NRF_CLOUD_FOTA_VALIDATE_DONE) {
   2f6fa:	2e05      	cmp	r6, #5
   2f6fc:	4819      	ldr	r0, [pc, #100]	; (2f764 <save_validate_status+0xb4>)
   2f6fe:	d118      	bne.n	2f732 <save_validate_status+0x82>
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f700:	2303      	movs	r3, #3
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f702:	2100      	movs	r1, #0
		saved_job.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f704:	7043      	strb	r3, [r0, #1]
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f706:	2225      	movs	r2, #37	; 0x25
		saved_job.validate = NRF_CLOUD_FOTA_VALIDATE_NONE;
   2f708:	f800 1b02 	strb.w	r1, [r0], #2
		memset(saved_job.id, 0, sizeof(saved_job.id));
   2f70c:	f012 fae7 	bl	41cde <memset>
	ret = settings_save_one(SETTINGS_FULL_FOTA_JOB, &saved_job,
   2f710:	2227      	movs	r2, #39	; 0x27
   2f712:	4914      	ldr	r1, [pc, #80]	; (2f764 <save_validate_status+0xb4>)
   2f714:	4814      	ldr	r0, [pc, #80]	; (2f768 <save_validate_status+0xb8>)
   2f716:	f7f5 fd51 	bl	251bc <settings_save_one>
	if (ret) {
   2f71a:	4605      	mov	r5, r0
   2f71c:	b128      	cbz	r0, 2f72a <save_validate_status+0x7a>
		LOG_ERR("settings_save_one failed: %d", ret);
   2f71e:	4602      	mov	r2, r0
   2f720:	4912      	ldr	r1, [pc, #72]	; (2f76c <save_validate_status+0xbc>)
   2f722:	f044 0001 	orr.w	r0, r4, #1
   2f726:	f00d fdeb 	bl	3d300 <log_string_sync>
}
   2f72a:	4628      	mov	r0, r5
   2f72c:	b004      	add	sp, #16
   2f72e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		saved_job.type = job_type;
   2f732:	7047      	strb	r7, [r0, #1]
		saved_job.validate = validate;
   2f734:	f800 6b02 	strb.w	r6, [r0], #2
		if (job_id != saved_job.id) {
   2f738:	4285      	cmp	r5, r0
   2f73a:	d0e9      	beq.n	2f710 <save_validate_status+0x60>
			strncpy(saved_job.id, job_id, sizeof(saved_job.id));
   2f73c:	2225      	movs	r2, #37	; 0x25
   2f73e:	4629      	mov	r1, r5
   2f740:	f012 fcc8 	bl	420d4 <strncpy>
   2f744:	e7e4      	b.n	2f710 <save_validate_status+0x60>
   2f746:	bf00      	nop
   2f748:	00049b22 	.word	0x00049b22
   2f74c:	00044dbf 	.word	0x00044dbf
   2f750:	00049a93 	.word	0x00049a93
   2f754:	0004339c 	.word	0x0004339c
   2f758:	0004349c 	.word	0x0004349c
   2f75c:	0004a032 	.word	0x0004a032
   2f760:	00049b38 	.word	0x00049b38
   2f764:	200158f1 	.word	0x200158f1
   2f768:	00049b4e 	.word	0x00049b4e
   2f76c:	00049b61 	.word	0x00049b61

0002f770 <reset_topics>:
{
   2f770:	b508      	push	{r3, lr}
	reset_topic(&sub_topics[SUB_TOPIC_IDX_RCV].topic);
   2f772:	4805      	ldr	r0, [pc, #20]	; (2f788 <reset_topics+0x18>)
   2f774:	f010 fc09 	bl	3ff8a <reset_topic>
	reset_topic(&topic_updt.topic);
   2f778:	4804      	ldr	r0, [pc, #16]	; (2f78c <reset_topics+0x1c>)
   2f77a:	f010 fc06 	bl	3ff8a <reset_topic>
}
   2f77e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	reset_topic(&topic_req.topic);
   2f782:	4803      	ldr	r0, [pc, #12]	; (2f790 <reset_topics+0x20>)
   2f784:	f010 bc01 	b.w	3ff8a <reset_topic>
   2f788:	20015604 	.word	0x20015604
   2f78c:	2001561c 	.word	0x2001561c
   2f790:	20015610 	.word	0x20015610

0002f794 <build_topic>:
{
   2f794:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	size_t size = endpoint->size + strlen(client_id) +
   2f798:	684d      	ldr	r5, [r1, #4]
{
   2f79a:	4690      	mov	r8, r2
   2f79c:	460f      	mov	r7, r1
   2f79e:	461e      	mov	r6, r3
   2f7a0:	4681      	mov	r9, r0
	size_t size = endpoint->size + strlen(client_id) +
   2f7a2:	f7ed fd5b 	bl	1d25c <strlen>
   2f7a6:	4682      	mov	sl, r0
		      strlen(topic_str) + 1;
   2f7a8:	4640      	mov	r0, r8
   2f7aa:	f7ed fd57 	bl	1d25c <strlen>
	size_t size = endpoint->size + strlen(client_id) +
   2f7ae:	1c6b      	adds	r3, r5, #1
   2f7b0:	eb03 050a 	add.w	r5, r3, sl
   2f7b4:	182c      	adds	r4, r5, r0
	buf = nrf_cloud_calloc(size, 1);
   2f7b6:	2101      	movs	r1, #1
   2f7b8:	4620      	mov	r0, r4
   2f7ba:	f012 fa37 	bl	41c2c <k_calloc>
	if (!buf) {
   2f7be:	4605      	mov	r5, r0
   2f7c0:	b938      	cbnz	r0, 2f7d2 <build_topic+0x3e>
		reset_topic(topic_out);
   2f7c2:	4630      	mov	r0, r6
   2f7c4:	f010 fbe1 	bl	3ff8a <reset_topic>
		return ret;
   2f7c8:	f06f 000b 	mvn.w	r0, #11
}
   2f7cc:	b002      	add	sp, #8
   2f7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ret = snprintf(buf, size, "%s%s%s",
   2f7d2:	4621      	mov	r1, r4
   2f7d4:	e9cd 9800 	strd	r9, r8, [sp]
   2f7d8:	683b      	ldr	r3, [r7, #0]
   2f7da:	4a08      	ldr	r2, [pc, #32]	; (2f7fc <build_topic+0x68>)
   2f7dc:	f00b fea6 	bl	3b52c <sniprintf>
	if (ret <= 0 || ret >= size) {
   2f7e0:	2800      	cmp	r0, #0
   2f7e2:	dd01      	ble.n	2f7e8 <build_topic+0x54>
   2f7e4:	42a0      	cmp	r0, r4
   2f7e6:	d305      	bcc.n	2f7f4 <build_topic+0x60>
		nrf_cloud_free(buf);
   2f7e8:	4628      	mov	r0, r5
   2f7ea:	f012 fa15 	bl	41c18 <k_free>
		return ret;
   2f7ee:	f06f 0006 	mvn.w	r0, #6
   2f7f2:	e7eb      	b.n	2f7cc <build_topic+0x38>
	topic_out->size = ret;
   2f7f4:	e9c6 5000 	strd	r5, r0, [r6]
	return 0;
   2f7f8:	2000      	movs	r0, #0
   2f7fa:	e7e7      	b.n	2f7cc <build_topic+0x38>
   2f7fc:	00049b7e 	.word	0x00049b7e

0002f800 <get_string_from_array>:
{
   2f800:	b570      	push	{r4, r5, r6, lr}
   2f802:	4605      	mov	r5, r0
   2f804:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(string_out != NULL);
   2f806:	4614      	mov	r4, r2
   2f808:	b95a      	cbnz	r2, 2f822 <get_string_from_array+0x22>
   2f80a:	490d      	ldr	r1, [pc, #52]	; (2f840 <get_string_from_array+0x40>)
   2f80c:	480d      	ldr	r0, [pc, #52]	; (2f844 <get_string_from_array+0x44>)
   2f80e:	f240 239a 	movw	r3, #666	; 0x29a
   2f812:	4a0d      	ldr	r2, [pc, #52]	; (2f848 <get_string_from_array+0x48>)
   2f814:	f00d faaf 	bl	3cd76 <printk>
   2f818:	f240 219a 	movw	r1, #666	; 0x29a
   2f81c:	480a      	ldr	r0, [pc, #40]	; (2f848 <get_string_from_array+0x48>)
   2f81e:	f00d fd5e 	bl	3d2de <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2f822:	4628      	mov	r0, r5
   2f824:	4631      	mov	r1, r6
   2f826:	f00f fdca 	bl	3f3be <cJSON_GetArrayItem>
   2f82a:	4605      	mov	r5, r0
	if (!cJSON_IsString(item)) {
   2f82c:	f00f fe3e 	bl	3f4ac <cJSON_IsString>
   2f830:	b118      	cbz	r0, 2f83a <get_string_from_array+0x3a>
	return 0;
   2f832:	2000      	movs	r0, #0
	*string_out = item->valuestring;
   2f834:	692b      	ldr	r3, [r5, #16]
   2f836:	6023      	str	r3, [r4, #0]
}
   2f838:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f83a:	f06f 0015 	mvn.w	r0, #21
   2f83e:	e7fb      	b.n	2f838 <get_string_from_array+0x38>
   2f840:	00049b85 	.word	0x00049b85
   2f844:	00044dbf 	.word	0x00044dbf
   2f848:	00049a93 	.word	0x00049a93

0002f84c <get_number_from_array>:
{
   2f84c:	b570      	push	{r4, r5, r6, lr}
   2f84e:	4605      	mov	r5, r0
   2f850:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(number_out != NULL);
   2f852:	4614      	mov	r4, r2
   2f854:	b95a      	cbnz	r2, 2f86e <get_number_from_array+0x22>
   2f856:	490d      	ldr	r1, [pc, #52]	; (2f88c <get_number_from_array+0x40>)
   2f858:	480d      	ldr	r0, [pc, #52]	; (2f890 <get_number_from_array+0x44>)
   2f85a:	f240 23aa 	movw	r3, #682	; 0x2aa
   2f85e:	4a0d      	ldr	r2, [pc, #52]	; (2f894 <get_number_from_array+0x48>)
   2f860:	f00d fa89 	bl	3cd76 <printk>
   2f864:	f240 21aa 	movw	r1, #682	; 0x2aa
   2f868:	480a      	ldr	r0, [pc, #40]	; (2f894 <get_number_from_array+0x48>)
   2f86a:	f00d fd38 	bl	3d2de <assert_post_action>
	cJSON *item = cJSON_GetArrayItem(array, index);
   2f86e:	4628      	mov	r0, r5
   2f870:	4631      	mov	r1, r6
   2f872:	f00f fda4 	bl	3f3be <cJSON_GetArrayItem>
   2f876:	4605      	mov	r5, r0
	if (!cJSON_IsNumber(item)) {
   2f878:	f00f fe11 	bl	3f49e <cJSON_IsNumber>
   2f87c:	b118      	cbz	r0, 2f886 <get_number_from_array+0x3a>
	return 0;
   2f87e:	2000      	movs	r0, #0
	*number_out = item->valueint;
   2f880:	696b      	ldr	r3, [r5, #20]
   2f882:	6023      	str	r3, [r4, #0]
}
   2f884:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2f886:	f06f 0015 	mvn.w	r0, #21
   2f88a:	e7fb      	b.n	2f884 <get_number_from_array+0x38>
   2f88c:	00049b9f 	.word	0x00049b9f
   2f890:	00044dbf 	.word	0x00044dbf
   2f894:	00049a93 	.word	0x00049a93

0002f898 <send_event.constprop.0>:
	struct nrf_cloud_fota_evt evt = {
   2f898:	2300      	movs	r3, #0
static void send_event(const enum nrf_cloud_fota_evt_id id,
   2f89a:	b507      	push	{r0, r1, r2, lr}
	struct nrf_cloud_fota_evt evt = {
   2f89c:	f8cd 3003 	str.w	r3, [sp, #3]
   2f8a0:	f88d 3007 	strb.w	r3, [sp, #7]
		.status = job->status,
   2f8a4:	4b0b      	ldr	r3, [pc, #44]	; (2f8d4 <send_event.constprop.0+0x3c>)
	switch (id) {
   2f8a6:	2802      	cmp	r0, #2
	struct nrf_cloud_fota_evt evt = {
   2f8a8:	791a      	ldrb	r2, [r3, #4]
   2f8aa:	f88d 0000 	strb.w	r0, [sp]
   2f8ae:	f88d 2001 	strb.w	r2, [sp, #1]
   2f8b2:	7a1a      	ldrb	r2, [r3, #8]
		evt.evt_data.error = job->error;
   2f8b4:	bf08      	it	eq
   2f8b6:	7f1b      	ldrbeq	r3, [r3, #28]
	struct nrf_cloud_fota_evt evt = {
   2f8b8:	f88d 2002 	strb.w	r2, [sp, #2]
		evt.evt_data.error = job->error;
   2f8bc:	bf08      	it	eq
   2f8be:	f88d 3004 	strbeq.w	r3, [sp, #4]
	if (event_cb) {
   2f8c2:	4b05      	ldr	r3, [pc, #20]	; (2f8d8 <send_event.constprop.0+0x40>)
   2f8c4:	681b      	ldr	r3, [r3, #0]
   2f8c6:	b10b      	cbz	r3, 2f8cc <send_event.constprop.0+0x34>
		event_cb(&evt);
   2f8c8:	4668      	mov	r0, sp
   2f8ca:	4798      	blx	r3
}
   2f8cc:	b003      	add	sp, #12
   2f8ce:	f85d fb04 	ldr.w	pc, [sp], #4
   2f8d2:	bf00      	nop
   2f8d4:	20019d20 	.word	0x20019d20
   2f8d8:	20019d48 	.word	0x20019d48

0002f8dc <cleanup_job.constprop.0>:
static void cleanup_job(struct nrf_cloud_fota_job *const job)
   2f8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2f8de:	4b11      	ldr	r3, [pc, #68]	; (2f924 <cleanup_job.constprop.0+0x48>)
   2f8e0:	4c11      	ldr	r4, [pc, #68]	; (2f928 <cleanup_job.constprop.0+0x4c>)
	LOG_DBG("%s() - ID: %s", __func__,
   2f8e2:	4d12      	ldr	r5, [pc, #72]	; (2f92c <cleanup_job.constprop.0+0x50>)
   2f8e4:	1ae4      	subs	r4, r4, r3
   2f8e6:	08e4      	lsrs	r4, r4, #3
   2f8e8:	68e8      	ldr	r0, [r5, #12]
   2f8ea:	01a4      	lsls	r4, r4, #6
   2f8ec:	f044 0404 	orr.w	r4, r4, #4
   2f8f0:	b1a8      	cbz	r0, 2f91e <cleanup_job.constprop.0+0x42>
   2f8f2:	f00d fd18 	bl	3d326 <log_strdup>
   2f8f6:	4b0e      	ldr	r3, [pc, #56]	; (2f930 <cleanup_job.constprop.0+0x54>)
   2f8f8:	9000      	str	r0, [sp, #0]
   2f8fa:	461a      	mov	r2, r3
   2f8fc:	4620      	mov	r0, r4
   2f8fe:	490d      	ldr	r1, [pc, #52]	; (2f934 <cleanup_job.constprop.0+0x58>)
   2f900:	f00d fcfe 	bl	3d300 <log_string_sync>
	if (job->parsed_payload) {
   2f904:	6828      	ldr	r0, [r5, #0]
   2f906:	b108      	cbz	r0, 2f90c <cleanup_job.constprop.0+0x30>
		cJSON_free(job->parsed_payload);
   2f908:	f7f9 fb3c 	bl	28f84 <cJSON_free>
	memset(job, 0, sizeof(*job));
   2f90c:	2228      	movs	r2, #40	; 0x28
   2f90e:	2100      	movs	r1, #0
   2f910:	4806      	ldr	r0, [pc, #24]	; (2f92c <cleanup_job.constprop.0+0x50>)
   2f912:	f012 f9e4 	bl	41cde <memset>
	job->info.type = NRF_CLOUD_FOTA_TYPE__INVALID;
   2f916:	2303      	movs	r3, #3
   2f918:	722b      	strb	r3, [r5, #8]
}
   2f91a:	b003      	add	sp, #12
   2f91c:	bd30      	pop	{r4, r5, pc}
	LOG_DBG("%s() - ID: %s", __func__,
   2f91e:	4806      	ldr	r0, [pc, #24]	; (2f938 <cleanup_job.constprop.0+0x5c>)
   2f920:	e7e9      	b.n	2f8f6 <cleanup_job.constprop.0+0x1a>
   2f922:	bf00      	nop
   2f924:	0004339c 	.word	0x0004339c
   2f928:	0004349c 	.word	0x0004349c
   2f92c:	20019d20 	.word	0x20019d20
   2f930:	0004a068 	.word	0x0004a068
   2f934:	00049bbd 	.word	0x00049bbd
   2f938:	00049bb9 	.word	0x00049bb9

0002f93c <send_job_update>:
	default:
		return false;
	}
}
static int send_job_update(struct nrf_cloud_fota_job *const job)
{
   2f93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (job == NULL) {
		return -EINVAL;
	} else if (client_mqtt == NULL) {
   2f940:	4b36      	ldr	r3, [pc, #216]	; (2fa1c <send_job_update+0xe0>)
{
   2f942:	4604      	mov	r4, r0
	} else if (client_mqtt == NULL) {
   2f944:	681b      	ldr	r3, [r3, #0]
{
   2f946:	b086      	sub	sp, #24
	} else if (client_mqtt == NULL) {
   2f948:	2b00      	cmp	r3, #0
   2f94a:	d061      	beq.n	2fa10 <send_job_update+0xd4>
		return -ENXIO;
	} else if (topic_updt.topic.utf8 == NULL) {
   2f94c:	4d34      	ldr	r5, [pc, #208]	; (2fa20 <send_job_update+0xe4>)
   2f94e:	682b      	ldr	r3, [r5, #0]
   2f950:	2b00      	cmp	r3, #0
   2f952:	d060      	beq.n	2fa16 <send_job_update+0xda>
		return -EHOSTUNREACH;
	}

	int ret;
	struct mqtt_publish_param param = {
   2f954:	466e      	mov	r6, sp
   2f956:	2218      	movs	r2, #24
   2f958:	2100      	movs	r1, #0
   2f95a:	4630      	mov	r0, r6
   2f95c:	f012 f9bf 	bl	41cde <memset>
   2f960:	f44f 5309 	mov.w	r3, #8768	; 0x2240
   2f964:	f8ad 3014 	strh.w	r3, [sp, #20]
		.message_id = NRF_CLOUD_FOTA_UPDATE_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};
	bool result;
	cJSON *array = cJSON_CreateArray();
   2f968:	f7f9 faf4 	bl	28f54 <cJSON_CreateArray>

	if (!array) {
   2f96c:	4680      	mov	r8, r0
   2f96e:	b928      	cbnz	r0, 2f97c <send_job_update+0x40>
					      get_error_string(job->error));
	}

	if (!result) {
		cJSON_free(array);
		return -ENOMEM;
   2f970:	f06f 050b 	mvn.w	r5, #11
		/* If job was updated to terminal status, save job ID */
		strncpy(last_job, job->info.id, sizeof(last_job));
	}

	return ret;
}
   2f974:	4628      	mov	r0, r5
   2f976:	b006      	add	sp, #24
   2f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	result = add_string_to_array(array, job->info.id) &&
   2f97c:	68e1      	ldr	r1, [r4, #12]
   2f97e:	f7ff fe37 	bl	2f5f0 <add_string_to_array>
   2f982:	b118      	cbz	r0, 2f98c <send_job_update+0x50>
		 add_number_to_array(array, job->status);
   2f984:	4640      	mov	r0, r8
   2f986:	7921      	ldrb	r1, [r4, #4]
   2f988:	f7ff fe0a 	bl	2f5a0 <add_number_to_array>
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f98c:	7923      	ldrb	r3, [r4, #4]
	result = add_string_to_array(array, job->info.id) &&
   2f98e:	4607      	mov	r7, r0
	if (job->status == NRF_CLOUD_FOTA_DOWNLOADING) {
   2f990:	2b07      	cmp	r3, #7
   2f992:	d10c      	bne.n	2f9ae <send_job_update+0x72>
		result &= add_number_to_array(array, job->dl_progress);
   2f994:	4640      	mov	r0, r8
   2f996:	6a21      	ldr	r1, [r4, #32]
   2f998:	f7ff fe02 	bl	2f5a0 <add_number_to_array>
		result &= add_string_to_array(array,
   2f99c:	ea00 0307 	and.w	r3, r0, r7
   2f9a0:	f003 0301 	and.w	r3, r3, #1
		cJSON_free(array);
   2f9a4:	4640      	mov	r0, r8
	if (!result) {
   2f9a6:	b97b      	cbnz	r3, 2f9c8 <send_job_update+0x8c>
		cJSON_free(array);
   2f9a8:	f7f9 faec 	bl	28f84 <cJSON_free>
   2f9ac:	e7e0      	b.n	2f970 <send_job_update+0x34>
	switch (err) {
   2f9ae:	7f23      	ldrb	r3, [r4, #28]
		result &= add_string_to_array(array,
   2f9b0:	4640      	mov	r0, r8
   2f9b2:	3b01      	subs	r3, #1
   2f9b4:	b2db      	uxtb	r3, r3
   2f9b6:	2b03      	cmp	r3, #3
   2f9b8:	bf96      	itet	ls
   2f9ba:	4a1a      	ldrls	r2, [pc, #104]	; (2fa24 <send_job_update+0xe8>)
   2f9bc:	491a      	ldrhi	r1, [pc, #104]	; (2fa28 <send_job_update+0xec>)
   2f9be:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
   2f9c2:	f7ff fe15 	bl	2f5f0 <add_string_to_array>
   2f9c6:	e7e9      	b.n	2f99c <send_job_update+0x60>
	char *array_str = cJSON_PrintUnformatted(array);
   2f9c8:	f00f fcee 	bl	3f3a8 <cJSON_PrintUnformatted>
   2f9cc:	4607      	mov	r7, r0
	cJSON_free(array);
   2f9ce:	4640      	mov	r0, r8
   2f9d0:	f7f9 fad8 	bl	28f84 <cJSON_free>
	if (array_str == NULL) {
   2f9d4:	2f00      	cmp	r7, #0
   2f9d6:	d0cb      	beq.n	2f970 <send_job_update+0x34>
		pub_param->message.topic = *topic;
   2f9d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   2f9dc:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		pub_param->message.payload.len = strlen(array_str);
   2f9e0:	4638      	mov	r0, r7
		pub_param->message.payload.data = array_str;
   2f9e2:	9703      	str	r7, [sp, #12]
		pub_param->message.payload.len = strlen(array_str);
   2f9e4:	f7ed fc3a 	bl	1d25c <strlen>
   2f9e8:	9004      	str	r0, [sp, #16]
		ret = publish(pub_param);
   2f9ea:	4630      	mov	r0, r6
   2f9ec:	f7ff fe24 	bl	2f638 <publish>
   2f9f0:	4605      	mov	r5, r0
	cJSON_free(array_str);
   2f9f2:	4638      	mov	r0, r7
   2f9f4:	f7f9 fac6 	bl	28f84 <cJSON_free>
	if (ret == 0 && is_job_status_terminal(job->status)) {
   2f9f8:	2d00      	cmp	r5, #0
   2f9fa:	d1bb      	bne.n	2f974 <send_job_update+0x38>
	switch (status) {
   2f9fc:	7923      	ldrb	r3, [r4, #4]
   2f9fe:	3b02      	subs	r3, #2
   2fa00:	2b04      	cmp	r3, #4
   2fa02:	d8b7      	bhi.n	2f974 <send_job_update+0x38>
		strncpy(last_job, job->info.id, sizeof(last_job));
   2fa04:	2225      	movs	r2, #37	; 0x25
   2fa06:	68e1      	ldr	r1, [r4, #12]
   2fa08:	4808      	ldr	r0, [pc, #32]	; (2fa2c <send_job_update+0xf0>)
   2fa0a:	f012 fb63 	bl	420d4 <strncpy>
   2fa0e:	e7b1      	b.n	2f974 <send_job_update+0x38>
		return -ENXIO;
   2fa10:	f06f 0505 	mvn.w	r5, #5
   2fa14:	e7ae      	b.n	2f974 <send_job_update+0x38>
		return -EHOSTUNREACH;
   2fa16:	f06f 0575 	mvn.w	r5, #117	; 0x75
   2fa1a:	e7ab      	b.n	2f974 <send_job_update+0x38>
   2fa1c:	20019d1c 	.word	0x20019d1c
   2fa20:	2001561c 	.word	0x2001561c
   2fa24:	00043e94 	.word	0x00043e94
   2fa28:	00045c29 	.word	0x00045c29
   2fa2c:	2002085e 	.word	0x2002085e

0002fa30 <http_fota_handler>:
{
   2fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT_NO_MSG(evt != NULL);
   2fa32:	4606      	mov	r6, r0
   2fa34:	b958      	cbnz	r0, 2fa4e <http_fota_handler+0x1e>
   2fa36:	4947      	ldr	r1, [pc, #284]	; (2fb54 <http_fota_handler+0x124>)
   2fa38:	4847      	ldr	r0, [pc, #284]	; (2fb58 <http_fota_handler+0x128>)
   2fa3a:	f240 231b 	movw	r3, #539	; 0x21b
   2fa3e:	4a47      	ldr	r2, [pc, #284]	; (2fb5c <http_fota_handler+0x12c>)
   2fa40:	f00d f999 	bl	3cd76 <printk>
   2fa44:	f240 211b 	movw	r1, #539	; 0x21b
   2fa48:	4844      	ldr	r0, [pc, #272]	; (2fb5c <http_fota_handler+0x12c>)
   2fa4a:	f00d fc48 	bl	3d2de <assert_post_action>
   2fa4e:	4b44      	ldr	r3, [pc, #272]	; (2fb60 <http_fota_handler+0x130>)
   2fa50:	4d44      	ldr	r5, [pc, #272]	; (2fb64 <http_fota_handler+0x134>)
	LOG_DBG("evt: %d", evt->id);
   2fa52:	4a45      	ldr	r2, [pc, #276]	; (2fb68 <http_fota_handler+0x138>)
   2fa54:	1aed      	subs	r5, r5, r3
   2fa56:	08ed      	lsrs	r5, r5, #3
   2fa58:	01ad      	lsls	r5, r5, #6
   2fa5a:	7833      	ldrb	r3, [r6, #0]
   2fa5c:	4943      	ldr	r1, [pc, #268]	; (2fb6c <http_fota_handler+0x13c>)
   2fa5e:	f045 0004 	orr.w	r0, r5, #4
   2fa62:	f00d fc4d 	bl	3d300 <log_string_sync>
	switch (evt->id) {
   2fa66:	7833      	ldrb	r3, [r6, #0]
   2fa68:	4f41      	ldr	r7, [pc, #260]	; (2fb70 <http_fota_handler+0x140>)
   2fa6a:	2b04      	cmp	r3, #4
   2fa6c:	d83a      	bhi.n	2fae4 <http_fota_handler+0xb4>
   2fa6e:	e8df f003 	tbb	[pc, r3]
   2fa72:	0358      	.short	0x0358
   2fa74:	3620      	.short	0x3620
   2fa76:	3c          	.byte	0x3c
   2fa77:	00          	.byte	0x00
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2fa78:	4c3e      	ldr	r4, [pc, #248]	; (2fb74 <http_fota_handler+0x144>)
		LOG_INF("Download complete");
   2fa7a:	493f      	ldr	r1, [pc, #252]	; (2fb78 <http_fota_handler+0x148>)
   2fa7c:	f045 0003 	orr.w	r0, r5, #3
   2fa80:	f00d fc3e 	bl	3d300 <log_string_sync>
		if (current_fota.status == NRF_CLOUD_FOTA_DOWNLOADING &&
   2fa84:	7923      	ldrb	r3, [r4, #4]
   2fa86:	2b07      	cmp	r3, #7
   2fa88:	d108      	bne.n	2fa9c <http_fota_handler+0x6c>
   2fa8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2fa8c:	2b64      	cmp	r3, #100	; 0x64
   2fa8e:	d005      	beq.n	2fa9c <http_fota_handler+0x6c>
			current_fota.dl_progress = 100;
   2fa90:	2364      	movs	r3, #100	; 0x64
			(void)send_job_update(&current_fota);
   2fa92:	4620      	mov	r0, r4
			current_fota.sent_dl_progress = 100;
   2fa94:	e9c4 3308 	strd	r3, r3, [r4, #32]
			(void)send_job_update(&current_fota);
   2fa98:	f7ff ff50 	bl	2f93c <send_job_update>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2fa9c:	2201      	movs	r2, #1
		save_validate_status(current_fota.info.id,
   2fa9e:	7a21      	ldrb	r1, [r4, #8]
   2faa0:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2faa2:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2faa4:	f7ff fe04 	bl	2f6b0 <save_validate_status>
		ret = send_job_update(&current_fota);
   2faa8:	4832      	ldr	r0, [pc, #200]	; (2fb74 <http_fota_handler+0x144>)
   2faaa:	f7ff ff47 	bl	2f93c <send_job_update>
   2faae:	4604      	mov	r4, r0
		break;
   2fab0:	e00d      	b.n	2face <http_fota_handler+0x9e>
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2fab2:	2201      	movs	r2, #1
   2fab4:	4c2f      	ldr	r4, [pc, #188]	; (2fb74 <http_fota_handler+0x144>)
		save_validate_status(current_fota.info.id,
   2fab6:	7a21      	ldrb	r1, [r4, #8]
   2fab8:	68e0      	ldr	r0, [r4, #12]
		current_fota.status = NRF_CLOUD_FOTA_IN_PROGRESS;
   2faba:	7122      	strb	r2, [r4, #4]
		save_validate_status(current_fota.info.id,
   2fabc:	f7ff fdf8 	bl	2f6b0 <save_validate_status>
		ret = send_job_update(&current_fota);
   2fac0:	4620      	mov	r0, r4
   2fac2:	f7ff ff3b 	bl	2f93c <send_job_update>
   2fac6:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_PENDING, &current_fota);
   2fac8:	2003      	movs	r0, #3
   2faca:	f7ff fee5 	bl	2f898 <send_event.constprop.0>
	if (ret) {
   2face:	b14c      	cbz	r4, 2fae4 <http_fota_handler+0xb4>
		LOG_ERR("Failed to send job update to cloud: %d", ret);
   2fad0:	4622      	mov	r2, r4
   2fad2:	492a      	ldr	r1, [pc, #168]	; (2fb7c <http_fota_handler+0x14c>)
   2fad4:	f045 0001 	orr.w	r0, r5, #1
   2fad8:	f00d fc12 	bl	3d300 <log_string_sync>
   2fadc:	e002      	b.n	2fae4 <http_fota_handler+0xb4>
		send_event(NRF_CLOUD_FOTA_EVT_ERASE_DONE, &current_fota);
   2fade:	2004      	movs	r0, #4
   2fae0:	f7ff feda 	bl	2f898 <send_event.constprop.0>
	last_fota_dl_evt = evt->id;
   2fae4:	7833      	ldrb	r3, [r6, #0]
   2fae6:	703b      	strb	r3, [r7, #0]
}
   2fae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (last_fota_dl_evt == FOTA_DOWNLOAD_EVT_ERASE_DONE ||
   2faea:	783b      	ldrb	r3, [r7, #0]
   2faec:	2b03      	cmp	r3, #3
   2faee:	4b21      	ldr	r3, [pc, #132]	; (2fb74 <http_fota_handler+0x144>)
   2faf0:	d002      	beq.n	2faf8 <http_fota_handler+0xc8>
   2faf2:	7932      	ldrb	r2, [r6, #4]
   2faf4:	2a02      	cmp	r2, #2
   2faf6:	d110      	bne.n	2fb1a <http_fota_handler+0xea>
			current_fota.status = NRF_CLOUD_FOTA_REJECTED;
   2faf8:	2206      	movs	r2, #6
   2fafa:	711a      	strb	r2, [r3, #4]
		save_validate_status(current_fota.info.id,
   2fafc:	2205      	movs	r2, #5
   2fafe:	7a19      	ldrb	r1, [r3, #8]
   2fb00:	68d8      	ldr	r0, [r3, #12]
   2fb02:	f7ff fdd5 	bl	2f6b0 <save_validate_status>
		ret = send_job_update(&current_fota);
   2fb06:	481b      	ldr	r0, [pc, #108]	; (2fb74 <http_fota_handler+0x144>)
   2fb08:	f7ff ff18 	bl	2f93c <send_job_update>
   2fb0c:	4604      	mov	r4, r0
		send_event(NRF_CLOUD_FOTA_EVT_ERROR, &current_fota);
   2fb0e:	2002      	movs	r0, #2
   2fb10:	f7ff fec2 	bl	2f898 <send_event.constprop.0>
		cleanup_job(&current_fota);
   2fb14:	f7ff fee2 	bl	2f8dc <cleanup_job.constprop.0>
		break;
   2fb18:	e7d9      	b.n	2face <http_fota_handler+0x9e>
			current_fota.status = NRF_CLOUD_FOTA_FAILED;
   2fb1a:	2202      	movs	r2, #2
   2fb1c:	711a      	strb	r2, [r3, #4]
			current_fota.error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD;
   2fb1e:	771a      	strb	r2, [r3, #28]
   2fb20:	e7ec      	b.n	2fafc <http_fota_handler+0xcc>
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fb22:	2207      	movs	r2, #7
   2fb24:	4b13      	ldr	r3, [pc, #76]	; (2fb74 <http_fota_handler+0x144>)
		if ((current_fota.sent_dl_progress == 100) &&
   2fb26:	6a59      	ldr	r1, [r3, #36]	; 0x24
		current_fota.status = NRF_CLOUD_FOTA_DOWNLOADING;
   2fb28:	711a      	strb	r2, [r3, #4]
		current_fota.dl_progress = evt->progress;
   2fb2a:	6872      	ldr	r2, [r6, #4]
		if ((current_fota.sent_dl_progress == 100) &&
   2fb2c:	2964      	cmp	r1, #100	; 0x64
		current_fota.dl_progress = evt->progress;
   2fb2e:	621a      	str	r2, [r3, #32]
		if ((current_fota.sent_dl_progress == 100) &&
   2fb30:	d108      	bne.n	2fb44 <http_fota_handler+0x114>
   2fb32:	2a64      	cmp	r2, #100	; 0x64
   2fb34:	d0d6      	beq.n	2fae4 <http_fota_handler+0xb4>
		if (current_fota.sent_dl_progress >
   2fb36:	2a63      	cmp	r2, #99	; 0x63
   2fb38:	dd06      	ble.n	2fb48 <http_fota_handler+0x118>
		    (((current_fota.dl_progress -
   2fb3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2fb3c:	1a51      	subs	r1, r2, r1
		if (current_fota.dl_progress != 100 &&
   2fb3e:	2909      	cmp	r1, #9
   2fb40:	ddd0      	ble.n	2fae4 <http_fota_handler+0xb4>
   2fb42:	e005      	b.n	2fb50 <http_fota_handler+0x120>
		if (current_fota.sent_dl_progress >
   2fb44:	428a      	cmp	r2, r1
   2fb46:	da01      	bge.n	2fb4c <http_fota_handler+0x11c>
			current_fota.sent_dl_progress = 0;
   2fb48:	2100      	movs	r1, #0
   2fb4a:	6259      	str	r1, [r3, #36]	; 0x24
		if (current_fota.dl_progress != 100 &&
   2fb4c:	2a64      	cmp	r2, #100	; 0x64
   2fb4e:	d1f4      	bne.n	2fb3a <http_fota_handler+0x10a>
		current_fota.sent_dl_progress = current_fota.dl_progress;
   2fb50:	625a      	str	r2, [r3, #36]	; 0x24
   2fb52:	e7a9      	b.n	2faa8 <http_fota_handler+0x78>
   2fb54:	00049bcf 	.word	0x00049bcf
   2fb58:	00044dbf 	.word	0x00044dbf
   2fb5c:	00049a93 	.word	0x00049a93
   2fb60:	0004339c 	.word	0x0004339c
   2fb64:	0004349c 	.word	0x0004349c
   2fb68:	0004a047 	.word	0x0004a047
   2fb6c:	00049be2 	.word	0x00049be2
   2fb70:	200158f0 	.word	0x200158f0
   2fb74:	20019d20 	.word	0x20019d20
   2fb78:	00049bee 	.word	0x00049bee
   2fb7c:	00049c00 	.word	0x00049c00

0002fb80 <nrf_cloud_fota_init>:
{
   2fb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (cb == NULL) {
   2fb84:	b970      	cbnz	r0, 2fba4 <nrf_cloud_fota_init+0x24>
   2fb86:	4b55      	ldr	r3, [pc, #340]	; (2fcdc <nrf_cloud_fota_init+0x15c>)
   2fb88:	4855      	ldr	r0, [pc, #340]	; (2fce0 <nrf_cloud_fota_init+0x160>)
		LOG_ERR("Invalid parameter");
   2fb8a:	4956      	ldr	r1, [pc, #344]	; (2fce4 <nrf_cloud_fota_init+0x164>)
   2fb8c:	1ac0      	subs	r0, r0, r3
   2fb8e:	08c0      	lsrs	r0, r0, #3
   2fb90:	0180      	lsls	r0, r0, #6
   2fb92:	f040 0001 	orr.w	r0, r0, #1
   2fb96:	f00d fbb3 	bl	3d300 <log_string_sync>
		return -EINVAL;
   2fb9a:	f06f 0415 	mvn.w	r4, #21
}
   2fb9e:	4620      	mov	r0, r4
   2fba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_cb = cb;
   2fba4:	4b50      	ldr	r3, [pc, #320]	; (2fce8 <nrf_cloud_fota_init+0x168>)
	if (initialized) {
   2fba6:	4f51      	ldr	r7, [pc, #324]	; (2fcec <nrf_cloud_fota_init+0x16c>)
	event_cb = cb;
   2fba8:	6018      	str	r0, [r3, #0]
	if (initialized) {
   2fbaa:	783b      	ldrb	r3, [r7, #0]
   2fbac:	2b00      	cmp	r3, #0
   2fbae:	f040 8092 	bne.w	2fcd6 <nrf_cloud_fota_init+0x156>
	ret = fota_download_init(http_fota_handler);
   2fbb2:	484f      	ldr	r0, [pc, #316]	; (2fcf0 <nrf_cloud_fota_init+0x170>)
   2fbb4:	f001 fc38 	bl	31428 <fota_download_init>
	if (ret != 0) {
   2fbb8:	4604      	mov	r4, r0
   2fbba:	b158      	cbz	r0, 2fbd4 <nrf_cloud_fota_init+0x54>
		LOG_ERR("fota_download_init error: %d", ret);
   2fbbc:	4622      	mov	r2, r4
   2fbbe:	4848      	ldr	r0, [pc, #288]	; (2fce0 <nrf_cloud_fota_init+0x160>)
   2fbc0:	4b46      	ldr	r3, [pc, #280]	; (2fcdc <nrf_cloud_fota_init+0x15c>)
   2fbc2:	494c      	ldr	r1, [pc, #304]	; (2fcf4 <nrf_cloud_fota_init+0x174>)
   2fbc4:	1ac0      	subs	r0, r0, r3
   2fbc6:	08c0      	lsrs	r0, r0, #3
   2fbc8:	0180      	lsls	r0, r0, #6
		LOG_ERR("Cannot load settings: %d", ret);
   2fbca:	f040 0001 	orr.w	r0, r0, #1
   2fbce:	f00d fb97 	bl	3d300 <log_string_sync>
		return ret;
   2fbd2:	e7e4      	b.n	2fb9e <nrf_cloud_fota_init+0x1e>
	ret = settings_load_subtree(settings_handler_fota.name);
   2fbd4:	4848      	ldr	r0, [pc, #288]	; (2fcf8 <nrf_cloud_fota_init+0x178>)
   2fbd6:	f7f5 fb2b 	bl	25230 <settings_load_subtree>
	if (ret) {
   2fbda:	4604      	mov	r4, r0
   2fbdc:	b138      	cbz	r0, 2fbee <nrf_cloud_fota_init+0x6e>
   2fbde:	4840      	ldr	r0, [pc, #256]	; (2fce0 <nrf_cloud_fota_init+0x160>)
   2fbe0:	4b3e      	ldr	r3, [pc, #248]	; (2fcdc <nrf_cloud_fota_init+0x15c>)
		LOG_ERR("Cannot load settings: %d", ret);
   2fbe2:	4622      	mov	r2, r4
   2fbe4:	1ac0      	subs	r0, r0, r3
   2fbe6:	08c0      	lsrs	r0, r0, #3
   2fbe8:	4944      	ldr	r1, [pc, #272]	; (2fcfc <nrf_cloud_fota_init+0x17c>)
   2fbea:	0180      	lsls	r0, r0, #6
   2fbec:	e7ed      	b.n	2fbca <nrf_cloud_fota_init+0x4a>
	if (saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PENDING) {
   2fbee:	4b44      	ldr	r3, [pc, #272]	; (2fd00 <nrf_cloud_fota_init+0x180>)
   2fbf0:	781d      	ldrb	r5, [r3, #0]
   2fbf2:	4698      	mov	r8, r3
   2fbf4:	2d01      	cmp	r5, #1
   2fbf6:	d166      	bne.n	2fcc6 <nrf_cloud_fota_init+0x146>
		if (!boot_is_img_confirmed()) {
   2fbf8:	f00e fa79 	bl	3e0ee <boot_is_img_confirmed>
   2fbfc:	4606      	mov	r6, r0
   2fbfe:	bb88      	cbnz	r0, 2fc64 <nrf_cloud_fota_init+0xe4>
			ret = boot_write_img_confirmed();
   2fc00:	f00e fa8c 	bl	3e11c <boot_write_img_confirmed>
			if (ret) {
   2fc04:	4604      	mov	r4, r0
   2fc06:	4b36      	ldr	r3, [pc, #216]	; (2fce0 <nrf_cloud_fota_init+0x160>)
   2fc08:	4a34      	ldr	r2, [pc, #208]	; (2fcdc <nrf_cloud_fota_init+0x15c>)
   2fc0a:	1a9b      	subs	r3, r3, r2
   2fc0c:	08db      	lsrs	r3, r3, #3
   2fc0e:	0198      	lsls	r0, r3, #6
   2fc10:	b304      	cbz	r4, 2fc54 <nrf_cloud_fota_init+0xd4>
				LOG_ERR("FOTA update confirmation failed: %d",
   2fc12:	4622      	mov	r2, r4
   2fc14:	493b      	ldr	r1, [pc, #236]	; (2fd04 <nrf_cloud_fota_init+0x184>)
   2fc16:	f040 0001 	orr.w	r0, r0, #1
   2fc1a:	f00d fb71 	bl	3d300 <log_string_sync>
				validate = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc1e:	2203      	movs	r2, #3
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   2fc20:	f898 3001 	ldrb.w	r3, [r8, #1]
   2fc24:	2b01      	cmp	r3, #1
   2fc26:	d128      	bne.n	2fc7a <nrf_cloud_fota_init+0xfa>
	int modem_dfu_res = nrf_modem_lib_get_init_ret();
   2fc28:	f7f9 fa48 	bl	290bc <nrf_modem_lib_get_init_ret>
   2fc2c:	4d2c      	ldr	r5, [pc, #176]	; (2fce0 <nrf_cloud_fota_init+0x160>)
   2fc2e:	4b2b      	ldr	r3, [pc, #172]	; (2fcdc <nrf_cloud_fota_init+0x15c>)
   2fc30:	4602      	mov	r2, r0
	switch (modem_dfu_res) {
   2fc32:	1aed      	subs	r5, r5, r3
   2fc34:	4b34      	ldr	r3, [pc, #208]	; (2fd08 <nrf_cloud_fota_init+0x188>)
   2fc36:	08ed      	lsrs	r5, r5, #3
   2fc38:	4298      	cmp	r0, r3
   2fc3a:	ea4f 1585 	mov.w	r5, r5, lsl #6
   2fc3e:	dc13      	bgt.n	2fc68 <nrf_cloud_fota_init+0xe8>
   2fc40:	f1b0 6f88 	cmp.w	r0, #71303168	; 0x4400000
   2fc44:	dd32      	ble.n	2fcac <nrf_cloud_fota_init+0x12c>
		LOG_ERR("Modem FOTA error: %d", modem_dfu_res);
   2fc46:	4931      	ldr	r1, [pc, #196]	; (2fd0c <nrf_cloud_fota_init+0x18c>)
   2fc48:	f045 0001 	orr.w	r0, r5, #1
   2fc4c:	f00d fb58 	bl	3d300 <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_FAIL;
   2fc50:	2203      	movs	r2, #3
		break;
   2fc52:	e012      	b.n	2fc7a <nrf_cloud_fota_init+0xfa>
				LOG_INF("FOTA update confirmed");
   2fc54:	492e      	ldr	r1, [pc, #184]	; (2fd10 <nrf_cloud_fota_init+0x190>)
   2fc56:	f040 0003 	orr.w	r0, r0, #3
   2fc5a:	f00d fb51 	bl	3d300 <log_string_sync>
		update_was_pending = true;
   2fc5e:	462e      	mov	r6, r5
				validate = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fc60:	2202      	movs	r2, #2
   2fc62:	e7dd      	b.n	2fc20 <nrf_cloud_fota_init+0xa0>
	enum fota_validate_status validate = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fc64:	2204      	movs	r2, #4
   2fc66:	e7db      	b.n	2fc20 <nrf_cloud_fota_init+0xa0>
	switch (modem_dfu_res) {
   2fc68:	4b2a      	ldr	r3, [pc, #168]	; (2fd14 <nrf_cloud_fota_init+0x194>)
   2fc6a:	4298      	cmp	r0, r3
   2fc6c:	d11e      	bne.n	2fcac <nrf_cloud_fota_init+0x12c>
		LOG_INF("Modem FOTA update confirmed");
   2fc6e:	492a      	ldr	r1, [pc, #168]	; (2fd18 <nrf_cloud_fota_init+0x198>)
   2fc70:	f045 0003 	orr.w	r0, r5, #3
   2fc74:	f00d fb44 	bl	3d300 <log_string_sync>
		ret = NRF_CLOUD_FOTA_VALIDATE_PASS;
   2fc78:	2202      	movs	r2, #2
		save_validate_status(saved_job.id, saved_job.type, validate);
   2fc7a:	f898 1001 	ldrb.w	r1, [r8, #1]
   2fc7e:	4827      	ldr	r0, [pc, #156]	; (2fd1c <nrf_cloud_fota_init+0x19c>)
   2fc80:	f7ff fd16 	bl	2f6b0 <save_validate_status>
		if (saved_job.type == NRF_CLOUD_FOTA_MODEM) {
   2fc84:	f898 5001 	ldrb.w	r5, [r8, #1]
   2fc88:	2d01      	cmp	r5, #1
   2fc8a:	d118      	bne.n	2fcbe <nrf_cloud_fota_init+0x13e>
   2fc8c:	4b13      	ldr	r3, [pc, #76]	; (2fcdc <nrf_cloud_fota_init+0x15c>)
   2fc8e:	4814      	ldr	r0, [pc, #80]	; (2fce0 <nrf_cloud_fota_init+0x160>)
			LOG_INF("Rebooting to complete modem FOTA");
   2fc90:	4923      	ldr	r1, [pc, #140]	; (2fd20 <nrf_cloud_fota_init+0x1a0>)
   2fc92:	1ac0      	subs	r0, r0, r3
   2fc94:	08c0      	lsrs	r0, r0, #3
   2fc96:	0180      	lsls	r0, r0, #6
   2fc98:	f040 0003 	orr.w	r0, r0, #3
   2fc9c:	f00d fb30 	bl	3d300 <log_string_sync>
			sys_reboot(SYS_REBOOT_COLD);
   2fca0:	4628      	mov	r0, r5
   2fca2:	f7f5 ff01 	bl	25aa8 <sys_reboot>
	initialized = true;
   2fca6:	2301      	movs	r3, #1
   2fca8:	703b      	strb	r3, [r7, #0]
	return ret;
   2fcaa:	e778      	b.n	2fb9e <nrf_cloud_fota_init+0x1e>
		LOG_DBG("Modem FOTA result unknown: %d", modem_dfu_res);
   2fcac:	4613      	mov	r3, r2
   2fcae:	491d      	ldr	r1, [pc, #116]	; (2fd24 <nrf_cloud_fota_init+0x1a4>)
   2fcb0:	4a1d      	ldr	r2, [pc, #116]	; (2fd28 <nrf_cloud_fota_init+0x1a8>)
   2fcb2:	f045 0004 	orr.w	r0, r5, #4
   2fcb6:	f00d fb23 	bl	3d300 <log_string_sync>
	enum fota_validate_status ret = NRF_CLOUD_FOTA_VALIDATE_UNKNOWN;
   2fcba:	2204      	movs	r2, #4
   2fcbc:	e7dd      	b.n	2fc7a <nrf_cloud_fota_init+0xfa>
			ret = 1;
   2fcbe:	2e00      	cmp	r6, #0
   2fcc0:	bf18      	it	ne
   2fcc2:	2401      	movne	r4, #1
   2fcc4:	e7ef      	b.n	2fca6 <nrf_cloud_fota_init+0x126>
	} else if ((saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_PASS ||
   2fcc6:	3d02      	subs	r5, #2
   2fcc8:	2d02      	cmp	r5, #2
   2fcca:	d8ec      	bhi.n	2fca6 <nrf_cloud_fota_init+0x126>
		    saved_job.validate == NRF_CLOUD_FOTA_VALIDATE_UNKNOWN) &&
   2fccc:	785c      	ldrb	r4, [r3, #1]
   2fcce:	1e63      	subs	r3, r4, #1
   2fcd0:	425c      	negs	r4, r3
   2fcd2:	415c      	adcs	r4, r3
   2fcd4:	e7e7      	b.n	2fca6 <nrf_cloud_fota_init+0x126>
		return 0;
   2fcd6:	2400      	movs	r4, #0
   2fcd8:	e761      	b.n	2fb9e <nrf_cloud_fota_init+0x1e>
   2fcda:	bf00      	nop
   2fcdc:	0004339c 	.word	0x0004339c
   2fce0:	0004349c 	.word	0x0004349c
   2fce4:	00049c27 	.word	0x00049c27
   2fce8:	20019d48 	.word	0x20019d48
   2fcec:	2002085d 	.word	0x2002085d
   2fcf0:	0002fa31 	.word	0x0002fa31
   2fcf4:	00049c39 	.word	0x00049c39
   2fcf8:	00049c56 	.word	0x00049c56
   2fcfc:	00049c65 	.word	0x00049c65
   2fd00:	200158f1 	.word	0x200158f1
   2fd04:	00049c7e 	.word	0x00049c7e
   2fd08:	04400004 	.word	0x04400004
   2fd0c:	00049cbe 	.word	0x00049cbe
   2fd10:	00049ca8 	.word	0x00049ca8
   2fd14:	05500001 	.word	0x05500001
   2fd18:	00049ca2 	.word	0x00049ca2
   2fd1c:	200158f3 	.word	0x200158f3
   2fd20:	00049cf5 	.word	0x00049cf5
   2fd24:	00049cd3 	.word	0x00049cd3
   2fd28:	0004a001 	.word	0x0004a001

0002fd2c <nrf_cloud_fota_endpoint_set>:
{
   2fd2c:	b570      	push	{r4, r5, r6, lr}
   2fd2e:	460e      	mov	r6, r1
   2fd30:	4615      	mov	r5, r2
	if (client == NULL || endpoint == NULL ||
   2fd32:	b328      	cbz	r0, 2fd80 <nrf_cloud_fota_endpoint_set+0x54>
   2fd34:	b322      	cbz	r2, 2fd80 <nrf_cloud_fota_endpoint_set+0x54>
   2fd36:	6813      	ldr	r3, [r2, #0]
   2fd38:	b313      	cbz	r3, 2fd80 <nrf_cloud_fota_endpoint_set+0x54>
	    endpoint->utf8 == NULL || endpoint->size == 0 ||
   2fd3a:	6853      	ldr	r3, [r2, #4]
   2fd3c:	b303      	cbz	r3, 2fd80 <nrf_cloud_fota_endpoint_set+0x54>
   2fd3e:	b1f9      	cbz	r1, 2fd80 <nrf_cloud_fota_endpoint_set+0x54>
	client_mqtt = client;
   2fd40:	4b11      	ldr	r3, [pc, #68]	; (2fd88 <nrf_cloud_fota_endpoint_set+0x5c>)
   2fd42:	6018      	str	r0, [r3, #0]
	reset_topics();
   2fd44:	f7ff fd14 	bl	2f770 <reset_topics>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_RCV,
   2fd48:	4629      	mov	r1, r5
   2fd4a:	4630      	mov	r0, r6
   2fd4c:	4b0f      	ldr	r3, [pc, #60]	; (2fd8c <nrf_cloud_fota_endpoint_set+0x60>)
   2fd4e:	4a10      	ldr	r2, [pc, #64]	; (2fd90 <nrf_cloud_fota_endpoint_set+0x64>)
   2fd50:	f7ff fd20 	bl	2f794 <build_topic>
	if (ret) {
   2fd54:	4604      	mov	r4, r0
   2fd56:	b978      	cbnz	r0, 2fd78 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_UPDATE,
   2fd58:	4629      	mov	r1, r5
   2fd5a:	4630      	mov	r0, r6
   2fd5c:	4b0d      	ldr	r3, [pc, #52]	; (2fd94 <nrf_cloud_fota_endpoint_set+0x68>)
   2fd5e:	4a0e      	ldr	r2, [pc, #56]	; (2fd98 <nrf_cloud_fota_endpoint_set+0x6c>)
   2fd60:	f7ff fd18 	bl	2f794 <build_topic>
	if (ret) {
   2fd64:	4604      	mov	r4, r0
   2fd66:	b938      	cbnz	r0, 2fd78 <nrf_cloud_fota_endpoint_set+0x4c>
	ret = build_topic(client_id, endpoint, TOPIC_FOTA_REQ,
   2fd68:	4629      	mov	r1, r5
   2fd6a:	4630      	mov	r0, r6
   2fd6c:	4b0b      	ldr	r3, [pc, #44]	; (2fd9c <nrf_cloud_fota_endpoint_set+0x70>)
   2fd6e:	4a0c      	ldr	r2, [pc, #48]	; (2fda0 <nrf_cloud_fota_endpoint_set+0x74>)
   2fd70:	f7ff fd10 	bl	2f794 <build_topic>
	if (ret) {
   2fd74:	4604      	mov	r4, r0
   2fd76:	b108      	cbz	r0, 2fd7c <nrf_cloud_fota_endpoint_set+0x50>
	reset_topics();
   2fd78:	f7ff fcfa 	bl	2f770 <reset_topics>
}
   2fd7c:	4620      	mov	r0, r4
   2fd7e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2fd80:	f06f 0415 	mvn.w	r4, #21
   2fd84:	e7fa      	b.n	2fd7c <nrf_cloud_fota_endpoint_set+0x50>
   2fd86:	bf00      	nop
   2fd88:	20019d1c 	.word	0x20019d1c
   2fd8c:	20015604 	.word	0x20015604
   2fd90:	00049d16 	.word	0x00049d16
   2fd94:	2001561c 	.word	0x2001561c
   2fd98:	00049d20 	.word	0x00049d20
   2fd9c:	20015610 	.word	0x20015610
   2fda0:	00049d2d 	.word	0x00049d2d

0002fda4 <nrf_cloud_fota_endpoint_set_and_report>:
{
   2fda4:	b570      	push	{r4, r5, r6, lr}
   2fda6:	b08a      	sub	sp, #40	; 0x28
	int ret = nrf_cloud_fota_endpoint_set(client, client_id, endpoint);
   2fda8:	f7ff ffc0 	bl	2fd2c <nrf_cloud_fota_endpoint_set>
	if (ret) {
   2fdac:	4604      	mov	r4, r0
   2fdae:	b158      	cbz	r0, 2fdc8 <nrf_cloud_fota_endpoint_set_and_report+0x24>
		LOG_ERR("Failed to set FOTA endpoint: %d", ret);
   2fdb0:	4622      	mov	r2, r4
   2fdb2:	4824      	ldr	r0, [pc, #144]	; (2fe44 <nrf_cloud_fota_endpoint_set_and_report+0xa0>)
   2fdb4:	4b24      	ldr	r3, [pc, #144]	; (2fe48 <nrf_cloud_fota_endpoint_set_and_report+0xa4>)
   2fdb6:	4925      	ldr	r1, [pc, #148]	; (2fe4c <nrf_cloud_fota_endpoint_set_and_report+0xa8>)
   2fdb8:	1ac0      	subs	r0, r0, r3
   2fdba:	08c0      	lsrs	r0, r0, #3
   2fdbc:	0180      	lsls	r0, r0, #6
				LOG_ERR("Error sending job update: %d", ret);
   2fdbe:	f040 0001 	orr.w	r0, r0, #1
   2fdc2:	f00d fa9d 	bl	3d300 <log_string_sync>
   2fdc6:	e01b      	b.n	2fe00 <nrf_cloud_fota_endpoint_set_and_report+0x5c>
	if (saved_job.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2fdc8:	4d21      	ldr	r5, [pc, #132]	; (2fe50 <nrf_cloud_fota_endpoint_set_and_report+0xac>)
   2fdca:	786e      	ldrb	r6, [r5, #1]
   2fdcc:	2e03      	cmp	r6, #3
   2fdce:	d017      	beq.n	2fe00 <nrf_cloud_fota_endpoint_set_and_report+0x5c>
		struct nrf_cloud_fota_job job = {
   2fdd0:	2228      	movs	r2, #40	; 0x28
   2fdd2:	4601      	mov	r1, r0
   2fdd4:	4668      	mov	r0, sp
   2fdd6:	f011 ff82 	bl	41cde <memset>
		switch (saved_job.validate) {
   2fdda:	782a      	ldrb	r2, [r5, #0]
		struct nrf_cloud_fota_job job = {
   2fddc:	1cab      	adds	r3, r5, #2
		switch (saved_job.validate) {
   2fdde:	2a03      	cmp	r2, #3
		struct nrf_cloud_fota_job job = {
   2fde0:	f88d 6008 	strb.w	r6, [sp, #8]
   2fde4:	9303      	str	r3, [sp, #12]
		switch (saved_job.validate) {
   2fde6:	d012      	beq.n	2fe0e <nrf_cloud_fota_endpoint_set_and_report+0x6a>
   2fde8:	2a04      	cmp	r2, #4
   2fdea:	d00c      	beq.n	2fe06 <nrf_cloud_fota_endpoint_set_and_report+0x62>
   2fdec:	2a02      	cmp	r2, #2
   2fdee:	d110      	bne.n	2fe12 <nrf_cloud_fota_endpoint_set_and_report+0x6e>
			job.status = NRF_CLOUD_FOTA_SUCCEEDED;
   2fdf0:	2303      	movs	r3, #3
			ret = send_job_update(&job);
   2fdf2:	4668      	mov	r0, sp
			job.status = NRF_CLOUD_FOTA_FAILED;
   2fdf4:	f88d 3004 	strb.w	r3, [sp, #4]
			ret = send_job_update(&job);
   2fdf8:	f7ff fda0 	bl	2f93c <send_job_update>
			if (ret) {
   2fdfc:	4604      	mov	r4, r0
   2fdfe:	b9c8      	cbnz	r0, 2fe34 <nrf_cloud_fota_endpoint_set_and_report+0x90>
}
   2fe00:	4620      	mov	r0, r4
   2fe02:	b00a      	add	sp, #40	; 0x28
   2fe04:	bd70      	pop	{r4, r5, r6, pc}
			job.error = NRF_CLOUD_FOTA_ERROR_UNABLE_TO_VALIDATE;
   2fe06:	2303      	movs	r3, #3
   2fe08:	f88d 301c 	strb.w	r3, [sp, #28]
   2fe0c:	e7f0      	b.n	2fdf0 <nrf_cloud_fota_endpoint_set_and_report+0x4c>
			job.status = NRF_CLOUD_FOTA_FAILED;
   2fe0e:	2302      	movs	r3, #2
   2fe10:	e7ef      	b.n	2fdf2 <nrf_cloud_fota_endpoint_set_and_report+0x4e>
   2fe12:	4b0d      	ldr	r3, [pc, #52]	; (2fe48 <nrf_cloud_fota_endpoint_set_and_report+0xa4>)
   2fe14:	480b      	ldr	r0, [pc, #44]	; (2fe44 <nrf_cloud_fota_endpoint_set_and_report+0xa0>)
			LOG_ERR("Unexpected job validation status: %d",
   2fe16:	490f      	ldr	r1, [pc, #60]	; (2fe54 <nrf_cloud_fota_endpoint_set_and_report+0xb0>)
   2fe18:	1ac0      	subs	r0, r0, r3
   2fe1a:	08c0      	lsrs	r0, r0, #3
   2fe1c:	0180      	lsls	r0, r0, #6
   2fe1e:	f040 0001 	orr.w	r0, r0, #1
   2fe22:	f00d fa6d 	bl	3d300 <log_string_sync>
			save_validate_status(job.info.id, job.info.type,
   2fe26:	2205      	movs	r2, #5
   2fe28:	f89d 1008 	ldrb.w	r1, [sp, #8]
   2fe2c:	9803      	ldr	r0, [sp, #12]
   2fe2e:	f7ff fc3f 	bl	2f6b0 <save_validate_status>
		if (job.info.type != NRF_CLOUD_FOTA_TYPE__INVALID) {
   2fe32:	e7e5      	b.n	2fe00 <nrf_cloud_fota_endpoint_set_and_report+0x5c>
   2fe34:	4803      	ldr	r0, [pc, #12]	; (2fe44 <nrf_cloud_fota_endpoint_set_and_report+0xa0>)
   2fe36:	4b04      	ldr	r3, [pc, #16]	; (2fe48 <nrf_cloud_fota_endpoint_set_and_report+0xa4>)
				LOG_ERR("Error sending job update: %d", ret);
   2fe38:	4622      	mov	r2, r4
   2fe3a:	1ac0      	subs	r0, r0, r3
   2fe3c:	08c0      	lsrs	r0, r0, #3
   2fe3e:	4906      	ldr	r1, [pc, #24]	; (2fe58 <nrf_cloud_fota_endpoint_set_and_report+0xb4>)
   2fe40:	0180      	lsls	r0, r0, #6
   2fe42:	e7bc      	b.n	2fdbe <nrf_cloud_fota_endpoint_set_and_report+0x1a>
   2fe44:	0004349c 	.word	0x0004349c
   2fe48:	0004339c 	.word	0x0004339c
   2fe4c:	00049d37 	.word	0x00049d37
   2fe50:	200158f1 	.word	0x200158f1
   2fe54:	00049d57 	.word	0x00049d57
   2fe58:	00049d7c 	.word	0x00049d7c

0002fe5c <nrf_cloud_fota_endpoint_clear>:
	client_mqtt = NULL;
   2fe5c:	2200      	movs	r2, #0
   2fe5e:	4b02      	ldr	r3, [pc, #8]	; (2fe68 <nrf_cloud_fota_endpoint_clear+0xc>)
   2fe60:	601a      	str	r2, [r3, #0]
	reset_topics();
   2fe62:	f7ff bc85 	b.w	2f770 <reset_topics>
   2fe66:	bf00      	nop
   2fe68:	20019d1c 	.word	0x20019d1c

0002fe6c <nrf_cloud_fota_subscribe>:
{
   2fe6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	for (int i = 0; i < sub_list.list_count; ++i) {
   2fe6e:	2500      	movs	r5, #0
	struct mqtt_subscription_list sub_list = {
   2fe70:	4b15      	ldr	r3, [pc, #84]	; (2fec8 <nrf_cloud_fota_subscribe+0x5c>)
   2fe72:	4c16      	ldr	r4, [pc, #88]	; (2fecc <nrf_cloud_fota_subscribe+0x60>)
   2fe74:	9300      	str	r3, [sp, #0]
   2fe76:	4b16      	ldr	r3, [pc, #88]	; (2fed0 <nrf_cloud_fota_subscribe+0x64>)
		LOG_DBG("Subscribing to topic: %s",
   2fe78:	4e16      	ldr	r6, [pc, #88]	; (2fed4 <nrf_cloud_fota_subscribe+0x68>)
	struct mqtt_subscription_list sub_list = {
   2fe7a:	9301      	str	r3, [sp, #4]
   2fe7c:	4b16      	ldr	r3, [pc, #88]	; (2fed8 <nrf_cloud_fota_subscribe+0x6c>)
   2fe7e:	1ae4      	subs	r4, r4, r3
   2fe80:	08e4      	lsrs	r4, r4, #3
		LOG_DBG("Subscribing to topic: %s",
   2fe82:	01a4      	lsls	r4, r4, #6
   2fe84:	f044 0404 	orr.w	r4, r4, #4
		if (sub_list.list[i].topic.size == 0 ||
   2fe88:	230c      	movs	r3, #12
   2fe8a:	436b      	muls	r3, r5
   2fe8c:	9900      	ldr	r1, [sp, #0]
   2fe8e:	18ca      	adds	r2, r1, r3
   2fe90:	6852      	ldr	r2, [r2, #4]
   2fe92:	b1aa      	cbz	r2, 2fec0 <nrf_cloud_fota_subscribe+0x54>
		    sub_list.list[i].topic.utf8 == NULL) {
   2fe94:	58c8      	ldr	r0, [r1, r3]
		if (sub_list.list[i].topic.size == 0 ||
   2fe96:	b198      	cbz	r0, 2fec0 <nrf_cloud_fota_subscribe+0x54>
		LOG_DBG("Subscribing to topic: %s",
   2fe98:	f00d fa45 	bl	3d326 <log_strdup>
   2fe9c:	4632      	mov	r2, r6
   2fe9e:	4603      	mov	r3, r0
   2fea0:	490e      	ldr	r1, [pc, #56]	; (2fedc <nrf_cloud_fota_subscribe+0x70>)
   2fea2:	4620      	mov	r0, r4
   2fea4:	f00d fa2c 	bl	3d300 <log_string_sync>
	for (int i = 0; i < sub_list.list_count; ++i) {
   2fea8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2feac:	3501      	adds	r5, #1
   2feae:	429d      	cmp	r5, r3
   2feb0:	dbea      	blt.n	2fe88 <nrf_cloud_fota_subscribe+0x1c>
	return mqtt_subscribe(client_mqtt, &sub_list);
   2feb2:	4b0b      	ldr	r3, [pc, #44]	; (2fee0 <nrf_cloud_fota_subscribe+0x74>)
   2feb4:	4669      	mov	r1, sp
   2feb6:	6818      	ldr	r0, [r3, #0]
   2feb8:	f00e fe1f 	bl	3eafa <mqtt_subscribe>
}
   2febc:	b002      	add	sp, #8
   2febe:	bd70      	pop	{r4, r5, r6, pc}
			return -EFAULT;
   2fec0:	f06f 000d 	mvn.w	r0, #13
   2fec4:	e7fa      	b.n	2febc <nrf_cloud_fota_subscribe+0x50>
   2fec6:	bf00      	nop
   2fec8:	20015604 	.word	0x20015604
   2fecc:	0004349c 	.word	0x0004349c
   2fed0:	223e0001 	.word	0x223e0001
   2fed4:	0004a019 	.word	0x0004a019
   2fed8:	0004339c 	.word	0x0004339c
   2fedc:	00049d99 	.word	0x00049d99
   2fee0:	20019d1c 	.word	0x20019d1c

0002fee4 <nrf_cloud_fota_unsubscribe>:
{
   2fee4:	b507      	push	{r0, r1, r2, lr}
	struct mqtt_subscription_list sub_list = {
   2fee6:	466b      	mov	r3, sp
   2fee8:	4a0a      	ldr	r2, [pc, #40]	; (2ff14 <nrf_cloud_fota_unsubscribe+0x30>)
   2feea:	e892 0003 	ldmia.w	r2, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2feee:	4a0a      	ldr	r2, [pc, #40]	; (2ff18 <nrf_cloud_fota_unsubscribe+0x34>)
	struct mqtt_subscription_list sub_list = {
   2fef0:	e883 0003 	stmia.w	r3, {r0, r1}
		if (sub_list.list[i].topic.size == 0 ||
   2fef4:	6851      	ldr	r1, [r2, #4]
   2fef6:	b149      	cbz	r1, 2ff0c <nrf_cloud_fota_unsubscribe+0x28>
   2fef8:	6812      	ldr	r2, [r2, #0]
   2fefa:	b13a      	cbz	r2, 2ff0c <nrf_cloud_fota_unsubscribe+0x28>
	return mqtt_unsubscribe(client_mqtt, &sub_list);
   2fefc:	4619      	mov	r1, r3
   2fefe:	4b07      	ldr	r3, [pc, #28]	; (2ff1c <nrf_cloud_fota_unsubscribe+0x38>)
   2ff00:	6818      	ldr	r0, [r3, #0]
   2ff02:	f00e fe21 	bl	3eb48 <mqtt_unsubscribe>
}
   2ff06:	b003      	add	sp, #12
   2ff08:	f85d fb04 	ldr.w	pc, [sp], #4
			return -EFAULT;
   2ff0c:	f06f 000d 	mvn.w	r0, #13
   2ff10:	e7f9      	b.n	2ff06 <nrf_cloud_fota_unsubscribe+0x22>
   2ff12:	bf00      	nop
   2ff14:	00043564 	.word	0x00043564
   2ff18:	20015604 	.word	0x20015604
   2ff1c:	20019d1c 	.word	0x20019d1c

0002ff20 <nrf_cloud_fota_update_check>:

int nrf_cloud_fota_update_check(void)
{
   2ff20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (client_mqtt == NULL) {
   2ff22:	4b10      	ldr	r3, [pc, #64]	; (2ff64 <nrf_cloud_fota_update_check+0x44>)
   2ff24:	681b      	ldr	r3, [r3, #0]
   2ff26:	b1bb      	cbz	r3, 2ff58 <nrf_cloud_fota_update_check+0x38>
		return -ENXIO;
	} else if (topic_req.topic.utf8 == NULL) {
   2ff28:	4a0f      	ldr	r2, [pc, #60]	; (2ff68 <nrf_cloud_fota_update_check+0x48>)
   2ff2a:	6813      	ldr	r3, [r2, #0]
   2ff2c:	b1bb      	cbz	r3, 2ff5e <nrf_cloud_fota_update_check+0x3e>
		.message_id = NRF_CLOUD_FOTA_REQUEST_ID,
		.dup_flag = 0,
		.retain_flag = 0,
	};

	param.message.topic = topic_req;
   2ff2e:	ca07      	ldmia	r2, {r0, r1, r2}
	struct mqtt_publish_param param = {
   2ff30:	2300      	movs	r3, #0
   2ff32:	f8ad 3016 	strh.w	r3, [sp, #22]
   2ff36:	f242 233f 	movw	r3, #8767	; 0x223f
   2ff3a:	f8ad 3014 	strh.w	r3, [sp, #20]
	param.message.topic = topic_req;
   2ff3e:	466b      	mov	r3, sp
   2ff40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2ff44:	4a09      	ldr	r2, [pc, #36]	; (2ff6c <nrf_cloud_fota_update_check+0x4c>)
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;

	return publish(&param);
   2ff46:	4618      	mov	r0, r3
	param.message.payload.data = JOB_REQUEST_LATEST_PAYLOAD;
   2ff48:	9203      	str	r2, [sp, #12]
	param.message.payload.len = sizeof(JOB_REQUEST_LATEST_PAYLOAD)-1;
   2ff4a:	2204      	movs	r2, #4
   2ff4c:	9204      	str	r2, [sp, #16]
	return publish(&param);
   2ff4e:	f7ff fb73 	bl	2f638 <publish>
}
   2ff52:	b007      	add	sp, #28
   2ff54:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENXIO;
   2ff58:	f06f 0005 	mvn.w	r0, #5
   2ff5c:	e7f9      	b.n	2ff52 <nrf_cloud_fota_update_check+0x32>
		return -EHOSTUNREACH;
   2ff5e:	f06f 0075 	mvn.w	r0, #117	; 0x75
   2ff62:	e7f6      	b.n	2ff52 <nrf_cloud_fota_update_check+0x32>
   2ff64:	20019d1c 	.word	0x20019d1c
   2ff68:	20015610 	.word	0x20015610
   2ff6c:	00049db6 	.word	0x00049db6

0002ff70 <nrf_cloud_fota_mqtt_evt_handler>:

	return 0;
}

int nrf_cloud_fota_mqtt_evt_handler(const struct mqtt_evt *evt)
{
   2ff70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2ff74:	4bb3      	ldr	r3, [pc, #716]	; (30244 <CONFIG_FLASH_LOAD_SIZE+0x244>)
{
   2ff76:	4681      	mov	r9, r0
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2ff78:	6818      	ldr	r0, [r3, #0]
{
   2ff7a:	b086      	sub	sp, #24
	if (sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8 == NULL ||
   2ff7c:	2800      	cmp	r0, #0
   2ff7e:	f000 81cd 	beq.w	3031c <CONFIG_FLASH_LOAD_SIZE+0x31c>
   2ff82:	685b      	ldr	r3, [r3, #4]
   2ff84:	2b00      	cmp	r3, #0
   2ff86:	f000 81c9 	beq.w	3031c <CONFIG_FLASH_LOAD_SIZE+0x31c>
	    sub_topics[SUB_TOPIC_IDX_RCV].topic.size == 0) {
		/* Ignore MQTT until a topic has been set */
		return 1;
	}

	switch (evt->type) {
   2ff8a:	f899 3000 	ldrb.w	r3, [r9]
   2ff8e:	2b09      	cmp	r3, #9
   2ff90:	f200 814b 	bhi.w	3022a <CONFIG_FLASH_LOAD_SIZE+0x22a>
   2ff94:	e8df f013 	tbh	[pc, r3, lsl #1]
   2ff98:	01c201c2 	.word	0x01c201c2
   2ff9c:	01b8000a 	.word	0x01b8000a
   2ffa0:	01c201c2 	.word	0x01c201c2
   2ffa4:	019201c2 	.word	0x019201c2
   2ffa8:	01c201a6 	.word	0x01c201a6
	struct mqtt_puback_param ack = {
   2ffac:	f8b9 3018 	ldrh.w	r3, [r9, #24]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2ffb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
	struct mqtt_puback_param ack = {
   2ffb4:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (strstr(sub_topics[SUB_TOPIC_IDX_RCV].topic.utf8,
   2ffb8:	f012 f8ac 	bl	42114 <strstr>
   2ffbc:	2800      	cmp	r0, #0
   2ffbe:	f000 81ad 	beq.w	3031c <CONFIG_FLASH_LOAD_SIZE+0x31c>
   2ffc2:	4ba1      	ldr	r3, [pc, #644]	; (30248 <CONFIG_FLASH_LOAD_SIZE+0x248>)
   2ffc4:	4fa1      	ldr	r7, [pc, #644]	; (3024c <CONFIG_FLASH_LOAD_SIZE+0x24c>)
	return current_fota.parsed_payload != NULL;
   2ffc6:	4da2      	ldr	r5, [pc, #648]	; (30250 <CONFIG_FLASH_LOAD_SIZE+0x250>)
   2ffc8:	1aff      	subs	r7, r7, r3
   2ffca:	08ff      	lsrs	r7, r7, #3
	LOG_DBG("MQTT_EVT_PUBLISH: id = %d len = %d",
   2ffcc:	f8d9 3014 	ldr.w	r3, [r9, #20]
   2ffd0:	01bf      	lsls	r7, r7, #6
   2ffd2:	f047 0a04 	orr.w	sl, r7, #4
   2ffd6:	9300      	str	r3, [sp, #0]
   2ffd8:	4650      	mov	r0, sl
   2ffda:	f8b9 3018 	ldrh.w	r3, [r9, #24]
   2ffde:	4a9d      	ldr	r2, [pc, #628]	; (30254 <CONFIG_FLASH_LOAD_SIZE+0x254>)
   2ffe0:	499d      	ldr	r1, [pc, #628]	; (30258 <CONFIG_FLASH_LOAD_SIZE+0x258>)
   2ffe2:	f00d f98d 	bl	3d300 <log_string_sync>
	return current_fota.parsed_payload != NULL;
   2ffe6:	682e      	ldr	r6, [r5, #0]
	if (is_fota_active() && !ble_id) {
   2ffe8:	b32e      	cbz	r6, 30036 <CONFIG_FLASH_LOAD_SIZE+0x36>
		goto send_ack;
   2ffea:	f04f 0800 	mov.w	r8, #0
		LOG_INF("Job in progress... skipping");
   2ffee:	499b      	ldr	r1, [pc, #620]	; (3025c <CONFIG_FLASH_LOAD_SIZE+0x25c>)
   2fff0:	f047 0003 	orr.w	r0, r7, #3
   2fff4:	f00d f984 	bl	3d300 <log_string_sync>
		skip = true;
   2fff8:	f04f 0a01 	mov.w	sl, #1
	int ret = 0;
   2fffc:	4644      	mov	r4, r8
	if (p->message.topic.qos == MQTT_QOS_0_AT_MOST_ONCE) {
   2fffe:	f899 300c 	ldrb.w	r3, [r9, #12]
   30002:	2b00      	cmp	r3, #0
   30004:	f040 80dd 	bne.w	301c2 <CONFIG_FLASH_LOAD_SIZE+0x1c2>
		LOG_DBG("No ack required");
   30008:	4a92      	ldr	r2, [pc, #584]	; (30254 <CONFIG_FLASH_LOAD_SIZE+0x254>)
   3000a:	4995      	ldr	r1, [pc, #596]	; (30260 <CONFIG_FLASH_LOAD_SIZE+0x260>)
   3000c:	f047 0004 	orr.w	r0, r7, #4
   30010:	f00d f976 	bl	3d300 <log_string_sync>
	if (skip || job_info->type == NRF_CLOUD_FOTA_TYPE__INVALID) {
   30014:	f1ba 0f00 	cmp.w	sl, #0
   30018:	d103      	bne.n	30022 <CONFIG_FLASH_LOAD_SIZE+0x22>
   3001a:	7a2b      	ldrb	r3, [r5, #8]
   3001c:	2b03      	cmp	r3, #3
   3001e:	f040 80e3 	bne.w	301e8 <CONFIG_FLASH_LOAD_SIZE+0x1e8>
		if (payload_array) {
   30022:	f1b8 0f00 	cmp.w	r8, #0
   30026:	d002      	beq.n	3002e <CONFIG_FLASH_LOAD_SIZE+0x2e>
			cJSON_free(payload_array);
   30028:	4640      	mov	r0, r8
   3002a:	f7f8 ffab 	bl	28f84 <cJSON_free>
		return 1;
	break;
	}

	return 0;
}
   3002e:	4620      	mov	r0, r4
   30030:	b006      	add	sp, #24
   30032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	payload = nrf_cloud_calloc(p->message.payload.len + 1, 1);
   30036:	2101      	movs	r1, #1
   30038:	f8d9 0014 	ldr.w	r0, [r9, #20]
   3003c:	4408      	add	r0, r1
   3003e:	f011 fdf5 	bl	41c2c <k_calloc>
	if (!payload) {
   30042:	4680      	mov	r8, r0
   30044:	b940      	cbnz	r0, 30058 <CONFIG_FLASH_LOAD_SIZE+0x58>
		LOG_ERR("Unable to allocate memory for job");
   30046:	4987      	ldr	r1, [pc, #540]	; (30264 <CONFIG_FLASH_LOAD_SIZE+0x264>)
   30048:	f047 0001 	orr.w	r0, r7, #1
   3004c:	f00d f958 	bl	3d300 <log_string_sync>
	bool skip = false;
   30050:	46c2      	mov	sl, r8
		ret = -ENOMEM;
   30052:	f06f 040b 	mvn.w	r4, #11
		goto send_ack;
   30056:	e7d2      	b.n	2fffe <nrf_cloud_fota_mqtt_evt_handler+0x8e>
	ret = mqtt_readall_publish_payload(client_mqtt, payload,
   30058:	4b83      	ldr	r3, [pc, #524]	; (30268 <CONFIG_FLASH_LOAD_SIZE+0x268>)
   3005a:	4601      	mov	r1, r0
   3005c:	f8d9 2014 	ldr.w	r2, [r9, #20]
   30060:	6818      	ldr	r0, [r3, #0]
   30062:	f00e fe25 	bl	3ecb0 <mqtt_readall_publish_payload>
	if (ret) {
   30066:	4604      	mov	r4, r0
   30068:	b138      	cbz	r0, 3007a <CONFIG_FLASH_LOAD_SIZE+0x7a>
		LOG_ERR("Error reading MQTT payload: %d", ret);
   3006a:	4602      	mov	r2, r0
   3006c:	497f      	ldr	r1, [pc, #508]	; (3026c <CONFIG_FLASH_LOAD_SIZE+0x26c>)
   3006e:	f047 0001 	orr.w	r0, r7, #1
   30072:	f00d f945 	bl	3d300 <log_string_sync>
	bool skip = false;
   30076:	46b2      	mov	sl, r6
   30078:	e091      	b.n	3019e <CONFIG_FLASH_LOAD_SIZE+0x19e>
	cJSON *array = cJSON_Parse(payload_in);
   3007a:	4640      	mov	r0, r8
   3007c:	f00f f990 	bl	3f3a0 <cJSON_Parse>
	if (!array || !cJSON_IsArray(array)) {
   30080:	4606      	mov	r6, r0
   30082:	b9a0      	cbnz	r0, 300ae <CONFIG_FLASH_LOAD_SIZE+0xae>
		LOG_ERR("Invalid JSON array");
   30084:	497a      	ldr	r1, [pc, #488]	; (30270 <CONFIG_FLASH_LOAD_SIZE+0x270>)
   30086:	f047 0001 	orr.w	r0, r7, #1
   3008a:	f00d f939 	bl	3d300 <log_string_sync>
		err = -EINVAL;
   3008e:	f06f 0415 	mvn.w	r4, #21
	memset(job_info, 0, sizeof(*job_info));
   30092:	2214      	movs	r2, #20
   30094:	2100      	movs	r1, #0
   30096:	4877      	ldr	r0, [pc, #476]	; (30274 <CONFIG_FLASH_LOAD_SIZE+0x274>)
   30098:	f011 fe21 	bl	41cde <memset>
	job_info->type = NRF_CLOUD_FOTA_TYPE__INVALID;
   3009c:	2303      	movs	r3, #3
   3009e:	722b      	strb	r3, [r5, #8]
	if (array) {
   300a0:	2e00      	cmp	r6, #0
   300a2:	d0e8      	beq.n	30076 <CONFIG_FLASH_LOAD_SIZE+0x76>
		cJSON_free(array);
   300a4:	4630      	mov	r0, r6
   300a6:	f7f8 ff6d 	bl	28f84 <cJSON_free>
   300aa:	2600      	movs	r6, #0
   300ac:	e7e3      	b.n	30076 <CONFIG_FLASH_LOAD_SIZE+0x76>
	if (!array || !cJSON_IsArray(array)) {
   300ae:	f00f fa0b 	bl	3f4c8 <cJSON_IsArray>
   300b2:	2800      	cmp	r0, #0
   300b4:	d0e6      	beq.n	30084 <CONFIG_FLASH_LOAD_SIZE+0x84>
	temp = cJSON_PrintUnformatted(array);
   300b6:	4630      	mov	r0, r6
   300b8:	f00f f976 	bl	3f3a8 <cJSON_PrintUnformatted>
	if (temp) {
   300bc:	4604      	mov	r4, r0
   300be:	b150      	cbz	r0, 300d6 <CONFIG_FLASH_LOAD_SIZE+0xd6>
		LOG_DBG("JSON array: %s", log_strdup(temp));
   300c0:	f00d f931 	bl	3d326 <log_strdup>
   300c4:	4a6c      	ldr	r2, [pc, #432]	; (30278 <CONFIG_FLASH_LOAD_SIZE+0x278>)
   300c6:	4603      	mov	r3, r0
   300c8:	496c      	ldr	r1, [pc, #432]	; (3027c <CONFIG_FLASH_LOAD_SIZE+0x27c>)
   300ca:	4650      	mov	r0, sl
   300cc:	f00d f918 	bl	3d300 <log_string_sync>
		cJSON_free(temp);
   300d0:	4620      	mov	r0, r4
   300d2:	f7f8 ff57 	bl	28f84 <cJSON_free>
	if (get_string_from_array(array, RCV_ITEM_IDX_JOB_ID - offset,
   300d6:	2100      	movs	r1, #0
   300d8:	4630      	mov	r0, r6
   300da:	4a69      	ldr	r2, [pc, #420]	; (30280 <CONFIG_FLASH_LOAD_SIZE+0x280>)
   300dc:	f7ff fb90 	bl	2f800 <get_string_from_array>
   300e0:	b138      	cbz	r0, 300f2 <CONFIG_FLASH_LOAD_SIZE+0xf2>
		LOG_ERR("Error parsing job info");
   300e2:	4968      	ldr	r1, [pc, #416]	; (30284 <CONFIG_FLASH_LOAD_SIZE+0x284>)
   300e4:	f047 0001 	orr.w	r0, r7, #1
   300e8:	f00d f90a 	bl	3d300 <log_string_sync>
	int err = -ENOMSG;
   300ec:	f06f 0422 	mvn.w	r4, #34	; 0x22
		goto cleanup;
   300f0:	e7cf      	b.n	30092 <CONFIG_FLASH_LOAD_SIZE+0x92>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_HOST - offset,
   300f2:	2103      	movs	r1, #3
   300f4:	4630      	mov	r0, r6
   300f6:	4a64      	ldr	r2, [pc, #400]	; (30288 <CONFIG_FLASH_LOAD_SIZE+0x288>)
   300f8:	f7ff fb82 	bl	2f800 <get_string_from_array>
				  &job_info->id) ||
   300fc:	2800      	cmp	r0, #0
   300fe:	d1f0      	bne.n	300e2 <CONFIG_FLASH_LOAD_SIZE+0xe2>
	    get_string_from_array(array, RCV_ITEM_IDX_FILE_PATH - offset,
   30100:	2104      	movs	r1, #4
   30102:	4630      	mov	r0, r6
   30104:	4a61      	ldr	r2, [pc, #388]	; (3028c <CONFIG_FLASH_LOAD_SIZE+0x28c>)
   30106:	f7ff fb7b 	bl	2f800 <get_string_from_array>
				  &job_info->host) ||
   3010a:	2800      	cmp	r0, #0
   3010c:	d1e9      	bne.n	300e2 <CONFIG_FLASH_LOAD_SIZE+0xe2>
	    get_number_from_array(array, RCV_ITEM_IDX_FW_TYPE - offset,
   3010e:	2101      	movs	r1, #1
   30110:	4630      	mov	r0, r6
   30112:	4a58      	ldr	r2, [pc, #352]	; (30274 <CONFIG_FLASH_LOAD_SIZE+0x274>)
   30114:	f7ff fb9a 	bl	2f84c <get_number_from_array>
				  &job_info->path) ||
   30118:	2800      	cmp	r0, #0
   3011a:	d1e2      	bne.n	300e2 <CONFIG_FLASH_LOAD_SIZE+0xe2>
	    get_number_from_array(array, RCV_ITEM_IDX_FILE_SIZE - offset,
   3011c:	2102      	movs	r1, #2
   3011e:	4630      	mov	r0, r6
   30120:	4a5b      	ldr	r2, [pc, #364]	; (30290 <CONFIG_FLASH_LOAD_SIZE+0x290>)
   30122:	f7ff fb93 	bl	2f84c <get_number_from_array>
				  (int *)&job_info->type) ||
   30126:	4604      	mov	r4, r0
   30128:	2800      	cmp	r0, #0
   3012a:	d1da      	bne.n	300e2 <CONFIG_FLASH_LOAD_SIZE+0xe2>
	job_id_len = strlen(job_info->id);
   3012c:	68e8      	ldr	r0, [r5, #12]
   3012e:	f7ed f895 	bl	1d25c <strlen>
	if (job_id_len > (JOB_ID_STRING_SIZE - 1)) {
   30132:	2824      	cmp	r0, #36	; 0x24
	job_id_len = strlen(job_info->id);
   30134:	4602      	mov	r2, r0
	if (job_id_len > (JOB_ID_STRING_SIZE - 1)) {
   30136:	d906      	bls.n	30146 <CONFIG_FLASH_LOAD_SIZE+0x146>
		LOG_ERR("Job ID length: %d, exceeds allowed length: %d",
   30138:	2324      	movs	r3, #36	; 0x24
   3013a:	4956      	ldr	r1, [pc, #344]	; (30294 <CONFIG_FLASH_LOAD_SIZE+0x294>)
   3013c:	f047 0001 	orr.w	r0, r7, #1
   30140:	f00d f8de 	bl	3d300 <log_string_sync>
		goto cleanup;
   30144:	e7d2      	b.n	300ec <CONFIG_FLASH_LOAD_SIZE+0xec>
	    job_info->type >= NRF_CLOUD_FOTA_TYPE__INVALID) {
   30146:	7a2a      	ldrb	r2, [r5, #8]
	if (job_info->type < NRF_CLOUD_FOTA_TYPE__FIRST ||
   30148:	2a02      	cmp	r2, #2
   3014a:	d905      	bls.n	30158 <CONFIG_FLASH_LOAD_SIZE+0x158>
		LOG_ERR("Invalid FOTA type: %d", job_info->type);
   3014c:	4952      	ldr	r1, [pc, #328]	; (30298 <CONFIG_FLASH_LOAD_SIZE+0x298>)
   3014e:	f047 0001 	orr.w	r0, r7, #1
   30152:	f00d f8d5 	bl	3d300 <log_string_sync>
   30156:	e7c9      	b.n	300ec <CONFIG_FLASH_LOAD_SIZE+0xec>
	LOG_DBG("Job ID: %s, type: %d, size: %d",
   30158:	68e8      	ldr	r0, [r5, #12]
   3015a:	f00d f8e4 	bl	3d326 <log_strdup>
   3015e:	69aa      	ldr	r2, [r5, #24]
   30160:	f047 0a04 	orr.w	sl, r7, #4
   30164:	9201      	str	r2, [sp, #4]
   30166:	7a2a      	ldrb	r2, [r5, #8]
   30168:	4603      	mov	r3, r0
   3016a:	494c      	ldr	r1, [pc, #304]	; (3029c <CONFIG_FLASH_LOAD_SIZE+0x29c>)
   3016c:	4650      	mov	r0, sl
   3016e:	9200      	str	r2, [sp, #0]
   30170:	4a41      	ldr	r2, [pc, #260]	; (30278 <CONFIG_FLASH_LOAD_SIZE+0x278>)
   30172:	f00d f8c5 	bl	3d300 <log_string_sync>
	LOG_DBG("File: %s/%s",
   30176:	6928      	ldr	r0, [r5, #16]
   30178:	f00d f8d5 	bl	3d326 <log_strdup>
   3017c:	9003      	str	r0, [sp, #12]
   3017e:	6968      	ldr	r0, [r5, #20]
   30180:	f00d f8d1 	bl	3d326 <log_strdup>
   30184:	4946      	ldr	r1, [pc, #280]	; (302a0 <CONFIG_FLASH_LOAD_SIZE+0x2a0>)
   30186:	9000      	str	r0, [sp, #0]
   30188:	9b03      	ldr	r3, [sp, #12]
   3018a:	4650      	mov	r0, sl
   3018c:	4a3a      	ldr	r2, [pc, #232]	; (30278 <CONFIG_FLASH_LOAD_SIZE+0x278>)
   3018e:	f00d f8b7 	bl	3d300 <log_string_sync>
	if (ret == 0 && strcmp(last_job, job_info->id) == 0) {
   30192:	68e9      	ldr	r1, [r5, #12]
   30194:	4843      	ldr	r0, [pc, #268]	; (302a4 <CONFIG_FLASH_LOAD_SIZE+0x2a4>)
   30196:	f7ed f857 	bl	1d248 <strcmp>
   3019a:	b128      	cbz	r0, 301a8 <CONFIG_FLASH_LOAD_SIZE+0x1a8>
	bool skip = false;
   3019c:	46a2      	mov	sl, r4
		nrf_cloud_free(payload);
   3019e:	4640      	mov	r0, r8
   301a0:	f011 fd3a 	bl	41c18 <k_free>
   301a4:	46b0      	mov	r8, r6
   301a6:	e72a      	b.n	2fffe <nrf_cloud_fota_mqtt_evt_handler+0x8e>
		LOG_INF("Job %s already completed... skipping",
   301a8:	483e      	ldr	r0, [pc, #248]	; (302a4 <CONFIG_FLASH_LOAD_SIZE+0x2a4>)
   301aa:	f00d f8bc 	bl	3d326 <log_strdup>
   301ae:	f047 0a03 	orr.w	sl, r7, #3
   301b2:	4602      	mov	r2, r0
   301b4:	493c      	ldr	r1, [pc, #240]	; (302a8 <CONFIG_FLASH_LOAD_SIZE+0x2a8>)
   301b6:	4650      	mov	r0, sl
   301b8:	f00d f8a2 	bl	3d300 <log_string_sync>
		skip = true;
   301bc:	f04f 0a01 	mov.w	sl, #1
send_ack:
   301c0:	e7ed      	b.n	3019e <CONFIG_FLASH_LOAD_SIZE+0x19e>
		int ack_res = mqtt_publish_qos1_ack(client_mqtt, &ack);
   301c2:	4b29      	ldr	r3, [pc, #164]	; (30268 <CONFIG_FLASH_LOAD_SIZE+0x268>)
   301c4:	a905      	add	r1, sp, #20
   301c6:	6818      	ldr	r0, [r3, #0]
   301c8:	f00e fc47 	bl	3ea5a <mqtt_publish_qos1_ack>
		if (ack_res) {
   301cc:	4606      	mov	r6, r0
   301ce:	2800      	cmp	r0, #0
   301d0:	f43f af20 	beq.w	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
			LOG_ERR("MQTT ACK failed: %d", ack_res);
   301d4:	4602      	mov	r2, r0
   301d6:	4935      	ldr	r1, [pc, #212]	; (302ac <CONFIG_FLASH_LOAD_SIZE+0x2ac>)
   301d8:	f047 0001 	orr.w	r0, r7, #1
   301dc:	f00d f890 	bl	3d300 <log_string_sync>
			if (!ret) {
   301e0:	2c00      	cmp	r4, #0
   301e2:	bf08      	it	eq
   301e4:	4634      	moveq	r4, r6
   301e6:	e715      	b.n	30014 <CONFIG_FLASH_LOAD_SIZE+0x14>
	ret = fota_download_start(job->info.host, job->info.path,
   301e8:	f240 63a4 	movw	r3, #1700	; 0x6a4
   301ec:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   301f0:	9300      	str	r3, [sp, #0]
   301f2:	4a2f      	ldr	r2, [pc, #188]	; (302b0 <CONFIG_FLASH_LOAD_SIZE+0x2b0>)
   301f4:	4653      	mov	r3, sl
		current_fota.parsed_payload = payload_array;
   301f6:	f8c5 8000 	str.w	r8, [r5]
	ret = fota_download_start(job->info.host, job->info.path,
   301fa:	f001 f8dd 	bl	313b8 <fota_download_start>
	if (ret) {
   301fe:	4604      	mov	r4, r0
   30200:	b1a8      	cbz	r0, 3022e <CONFIG_FLASH_LOAD_SIZE+0x22e>
		LOG_ERR("Failed to start FOTA download: %d", ret);
   30202:	4602      	mov	r2, r0
   30204:	492b      	ldr	r1, [pc, #172]	; (302b4 <CONFIG_FLASH_LOAD_SIZE+0x2b4>)
   30206:	f047 0001 	orr.w	r0, r7, #1
   3020a:	f00d f879 	bl	3d300 <log_string_sync>
		job->status = NRF_CLOUD_FOTA_FAILED;
   3020e:	2002      	movs	r0, #2
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   30210:	2301      	movs	r3, #1
		job->status = NRF_CLOUD_FOTA_FAILED;
   30212:	7128      	strb	r0, [r5, #4]
		job->error = NRF_CLOUD_FOTA_ERROR_DOWNLOAD_START;
   30214:	772b      	strb	r3, [r5, #28]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   30216:	f7ff fb3f 	bl	2f898 <send_event.constprop.0>
		(void)send_job_update(&current_fota);
   3021a:	480d      	ldr	r0, [pc, #52]	; (30250 <CONFIG_FLASH_LOAD_SIZE+0x250>)
   3021c:	f7ff fb8e 	bl	2f93c <send_job_update>
		if (ret) {
   30220:	2c00      	cmp	r4, #0
   30222:	f43f af04 	beq.w	3002e <CONFIG_FLASH_LOAD_SIZE+0x2e>
			cleanup_job(&current_fota);
   30226:	f7ff fb59 	bl	2f8dc <cleanup_job.constprop.0>
	return 0;
   3022a:	2400      	movs	r4, #0
   3022c:	e6ff      	b.n	3002e <CONFIG_FLASH_LOAD_SIZE+0x2e>
		LOG_INF("Downloading update");
   3022e:	f047 0003 	orr.w	r0, r7, #3
   30232:	4921      	ldr	r1, [pc, #132]	; (302b8 <CONFIG_FLASH_LOAD_SIZE+0x2b8>)
   30234:	f00d f864 	bl	3d300 <log_string_sync>
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   30238:	2307      	movs	r3, #7
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   3023a:	4620      	mov	r0, r4
		job->sent_dl_progress = 0;
   3023c:	e9c5 4408 	strd	r4, r4, [r5, #32]
		job->status = NRF_CLOUD_FOTA_DOWNLOADING;
   30240:	712b      	strb	r3, [r5, #4]
		send_event(NRF_CLOUD_FOTA_EVT_START, job);
   30242:	e7e8      	b.n	30216 <CONFIG_FLASH_LOAD_SIZE+0x216>
   30244:	20015604 	.word	0x20015604
   30248:	0004339c 	.word	0x0004339c
   3024c:	0004349c 	.word	0x0004349c
   30250:	20019d20 	.word	0x20019d20
   30254:	0004a07c 	.word	0x0004a07c
   30258:	00048e6f 	.word	0x00048e6f
   3025c:	00049dbb 	.word	0x00049dbb
   30260:	00049ef1 	.word	0x00049ef1
   30264:	00049dd7 	.word	0x00049dd7
   30268:	20019d1c 	.word	0x20019d1c
   3026c:	00049df9 	.word	0x00049df9
   30270:	00049e18 	.word	0x00049e18
   30274:	20019d28 	.word	0x20019d28
   30278:	0004a059 	.word	0x0004a059
   3027c:	00049e2b 	.word	0x00049e2b
   30280:	20019d2c 	.word	0x20019d2c
   30284:	00049e3e 	.word	0x00049e3e
   30288:	20019d30 	.word	0x20019d30
   3028c:	20019d34 	.word	0x20019d34
   30290:	20019d38 	.word	0x20019d38
   30294:	00049e55 	.word	0x00049e55
   30298:	00049e83 	.word	0x00049e83
   3029c:	00049e99 	.word	0x00049e99
   302a0:	00049ebc 	.word	0x00049ebc
   302a4:	2002085e 	.word	0x2002085e
   302a8:	00049ecc 	.word	0x00049ecc
   302ac:	00049f05 	.word	0x00049f05
   302b0:	01010001 	.word	0x01010001
   302b4:	00049f19 	.word	0x00049f19
   302b8:	00049f3b 	.word	0x00049f3b
		if (evt->param.suback.message_id !=
   302bc:	f242 233e 	movw	r3, #8766	; 0x223e
   302c0:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   302c4:	429a      	cmp	r2, r3
   302c6:	d129      	bne.n	3031c <CONFIG_FLASH_LOAD_SIZE+0x31c>
   302c8:	4b29      	ldr	r3, [pc, #164]	; (30370 <CONFIG_FLASH_LOAD_SIZE+0x370>)
   302ca:	482a      	ldr	r0, [pc, #168]	; (30374 <CONFIG_FLASH_LOAD_SIZE+0x374>)
		LOG_DBG("MQTT_EVT_SUBACK");
   302cc:	4a2a      	ldr	r2, [pc, #168]	; (30378 <CONFIG_FLASH_LOAD_SIZE+0x378>)
   302ce:	1ac0      	subs	r0, r0, r3
   302d0:	08c0      	lsrs	r0, r0, #3
   302d2:	0180      	lsls	r0, r0, #6
   302d4:	4929      	ldr	r1, [pc, #164]	; (3037c <CONFIG_FLASH_LOAD_SIZE+0x37c>)
   302d6:	f040 0004 	orr.w	r0, r0, #4
   302da:	f00d f811 	bl	3d300 <log_string_sync>
		nrf_cloud_fota_update_check();
   302de:	f7ff fe1f 	bl	2ff20 <nrf_cloud_fota_update_check>
		break;
   302e2:	e7a2      	b.n	3022a <CONFIG_FLASH_LOAD_SIZE+0x22a>
		if (evt->param.unsuback.message_id !=
   302e4:	f242 233e 	movw	r3, #8766	; 0x223e
   302e8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   302ec:	429a      	cmp	r2, r3
   302ee:	d115      	bne.n	3031c <CONFIG_FLASH_LOAD_SIZE+0x31c>
   302f0:	4b1f      	ldr	r3, [pc, #124]	; (30370 <CONFIG_FLASH_LOAD_SIZE+0x370>)
   302f2:	4820      	ldr	r0, [pc, #128]	; (30374 <CONFIG_FLASH_LOAD_SIZE+0x374>)
		LOG_DBG("MQTT_EVT_UNSUBACK");
   302f4:	4a20      	ldr	r2, [pc, #128]	; (30378 <CONFIG_FLASH_LOAD_SIZE+0x378>)
   302f6:	1ac0      	subs	r0, r0, r3
   302f8:	08c0      	lsrs	r0, r0, #3
   302fa:	0180      	lsls	r0, r0, #6
   302fc:	4920      	ldr	r1, [pc, #128]	; (30380 <CONFIG_FLASH_LOAD_SIZE+0x380>)
   302fe:	f040 0004 	orr.w	r0, r0, #4
   30302:	f00c fffd 	bl	3d300 <log_string_sync>
   30306:	e790      	b.n	3022a <CONFIG_FLASH_LOAD_SIZE+0x22a>
		switch (evt->param.puback.message_id) {
   30308:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   3030c:	f5b3 5f09 	cmp.w	r3, #8768	; 0x2240
   30310:	d00e      	beq.n	30330 <CONFIG_FLASH_LOAD_SIZE+0x330>
   30312:	d805      	bhi.n	30320 <CONFIG_FLASH_LOAD_SIZE+0x320>
   30314:	f242 223f 	movw	r2, #8767	; 0x223f
   30318:	4293      	cmp	r3, r2
   3031a:	d007      	beq.n	3032c <CONFIG_FLASH_LOAD_SIZE+0x32c>
   3031c:	2401      	movs	r4, #1
   3031e:	e686      	b.n	3002e <CONFIG_FLASH_LOAD_SIZE+0x2e>
   30320:	f503 425d 	add.w	r2, r3, #56576	; 0xdd00
   30324:	32bf      	adds	r2, #191	; 0xbf
   30326:	b292      	uxth	r2, r2
   30328:	2a01      	cmp	r2, #1
   3032a:	d8f7      	bhi.n	3031c <CONFIG_FLASH_LOAD_SIZE+0x31c>
		bool do_update_check = false;
   3032c:	2400      	movs	r4, #0
   3032e:	e000      	b.n	30332 <CONFIG_FLASH_LOAD_SIZE+0x332>
   30330:	2401      	movs	r4, #1
   30332:	4a0f      	ldr	r2, [pc, #60]	; (30370 <CONFIG_FLASH_LOAD_SIZE+0x370>)
   30334:	480f      	ldr	r0, [pc, #60]	; (30374 <CONFIG_FLASH_LOAD_SIZE+0x374>)
		LOG_DBG("MQTT_EVT_PUBACK: msg id %d",
   30336:	4913      	ldr	r1, [pc, #76]	; (30384 <CONFIG_FLASH_LOAD_SIZE+0x384>)
   30338:	1a80      	subs	r0, r0, r2
   3033a:	08c0      	lsrs	r0, r0, #3
   3033c:	0180      	lsls	r0, r0, #6
   3033e:	4a0e      	ldr	r2, [pc, #56]	; (30378 <CONFIG_FLASH_LOAD_SIZE+0x378>)
   30340:	f040 0004 	orr.w	r0, r0, #4
   30344:	f00c ffdc 	bl	3d300 <log_string_sync>
		if (!do_update_check) {
   30348:	2c00      	cmp	r4, #0
   3034a:	f43f ae70 	beq.w	3002e <CONFIG_FLASH_LOAD_SIZE+0x2e>
		switch (saved_job.validate) {
   3034e:	4b0e      	ldr	r3, [pc, #56]	; (30388 <CONFIG_FLASH_LOAD_SIZE+0x388>)
   30350:	7818      	ldrb	r0, [r3, #0]
   30352:	2801      	cmp	r0, #1
   30354:	d009      	beq.n	3036a <CONFIG_FLASH_LOAD_SIZE+0x36a>
   30356:	3802      	subs	r0, #2
   30358:	2802      	cmp	r0, #2
   3035a:	f63f af66 	bhi.w	3022a <CONFIG_FLASH_LOAD_SIZE+0x22a>
			save_validate_status(saved_job.id, saved_job.type,
   3035e:	2205      	movs	r2, #5
   30360:	7859      	ldrb	r1, [r3, #1]
   30362:	1c98      	adds	r0, r3, #2
   30364:	f7ff f9a4 	bl	2f6b0 <save_validate_status>
			break;
   30368:	e75f      	b.n	3022a <CONFIG_FLASH_LOAD_SIZE+0x22a>
			send_event(NRF_CLOUD_FOTA_EVT_DONE, &current_fota);
   3036a:	f7ff fa95 	bl	2f898 <send_event.constprop.0>
			cleanup_job(&current_fota);
   3036e:	e75a      	b.n	30226 <CONFIG_FLASH_LOAD_SIZE+0x226>
   30370:	0004339c 	.word	0x0004339c
   30374:	0004349c 	.word	0x0004349c
   30378:	0004a094 	.word	0x0004a094
   3037c:	00049f4e 	.word	0x00049f4e
   30380:	00048efd 	.word	0x00048efd
   30384:	00049f62 	.word	0x00049f62
   30388:	200158f1 	.word	0x200158f1

0003038c <fragment_evt_send>:

	return 0;
}

static int fragment_evt_send(const struct download_client *client)
{
   3038c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   3038e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   30392:	4604      	mov	r4, r0
	__ASSERT(client->offset <= CONFIG_DOWNLOAD_CLIENT_BUF_SIZE,
   30394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   30398:	d90e      	bls.n	303b8 <fragment_evt_send+0x2c>
   3039a:	490f      	ldr	r1, [pc, #60]	; (303d8 <fragment_evt_send+0x4c>)
   3039c:	f44f 73b3 	mov.w	r3, #358	; 0x166
   303a0:	4a0e      	ldr	r2, [pc, #56]	; (303dc <fragment_evt_send+0x50>)
   303a2:	480f      	ldr	r0, [pc, #60]	; (303e0 <fragment_evt_send+0x54>)
   303a4:	f00c fce7 	bl	3cd76 <printk>
   303a8:	480e      	ldr	r0, [pc, #56]	; (303e4 <fragment_evt_send+0x58>)
   303aa:	f00c fce4 	bl	3cd76 <printk>
   303ae:	f44f 71b3 	mov.w	r1, #358	; 0x166
   303b2:	480a      	ldr	r0, [pc, #40]	; (303dc <fragment_evt_send+0x50>)
   303b4:	f00c ff93 	bl	3d2de <assert_post_action>
		 "Buffer overflow!");

	const struct download_client_evt evt = {
   303b8:	2300      	movs	r3, #0
   303ba:	f88d 3004 	strb.w	r3, [sp, #4]
		.id = DOWNLOAD_CLIENT_EVT_FRAGMENT,
		.fragment = {
			.buf = client->buf,
   303be:	1d23      	adds	r3, r4, #4
	const struct download_client_evt evt = {
   303c0:	9302      	str	r3, [sp, #8]
   303c2:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
			.len = client->offset,
		}
	};

	return client->callback(&evt);
   303c6:	a801      	add	r0, sp, #4
	const struct download_client_evt evt = {
   303c8:	9303      	str	r3, [sp, #12]
	return client->callback(&evt);
   303ca:	f641 1310 	movw	r3, #6416	; 0x1910
   303ce:	58e3      	ldr	r3, [r4, r3]
   303d0:	4798      	blx	r3
}
   303d2:	b004      	add	sp, #16
   303d4:	bd10      	pop	{r4, pc}
   303d6:	bf00      	nop
   303d8:	0004a0f9 	.word	0x0004a0f9
   303dc:	0004a0b4 	.word	0x0004a0b4
   303e0:	00044dbf 	.word	0x00044dbf
   303e4:	0004a110 	.word	0x0004a110

000303e8 <download_client_init>:
	goto restart_and_suspend;
}

int download_client_init(struct download_client *const client,
			 download_client_callback_t callback)
{
   303e8:	b530      	push	{r4, r5, lr}
	if (client == NULL || callback == NULL) {
   303ea:	4604      	mov	r4, r0
{
   303ec:	b089      	sub	sp, #36	; 0x24
	if (client == NULL || callback == NULL) {
   303ee:	b310      	cbz	r0, 30436 <download_client_init+0x4e>
   303f0:	b309      	cbz	r1, 30436 <download_client_init+0x4e>
		return -EINVAL;
	}

	client->fd = -1;
   303f2:	f04f 33ff 	mov.w	r3, #4294967295
   303f6:	6003      	str	r3, [r0, #0]
	client->callback = callback;
   303f8:	f641 1310 	movw	r3, #6416	; 0x1910
   303fc:	50c1      	str	r1, [r0, r3]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   303fe:	2200      	movs	r2, #0
   30400:	2300      	movs	r3, #0
   30402:	2500      	movs	r5, #0
   30404:	e9cd 2306 	strd	r2, r3, [sp, #24]
   30408:	230e      	movs	r3, #14
   3040a:	9000      	str	r0, [sp, #0]
   3040c:	e9cd 3503 	strd	r3, r5, [sp, #12]
   30410:	f500 6111 	add.w	r1, r0, #2320	; 0x910
   30414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   30418:	e9cd 5501 	strd	r5, r5, [sp, #4]
   3041c:	4b07      	ldr	r3, [pc, #28]	; (3043c <download_client_init+0x54>)
   3041e:	f500 6004 	add.w	r0, r0, #2112	; 0x840
   30422:	f009 f8ab 	bl	3957c <z_impl_k_thread_create>

	/* The thread is spawned now, but it will suspend itself;
	 * it is resumed when the download is started via the API.
	 */
	client->tid =
   30426:	f8c4 083c 	str.w	r0, [r4, #2108]	; 0x83c
	return z_impl_k_thread_name_set(thread_id, value);
   3042a:	4905      	ldr	r1, [pc, #20]	; (30440 <download_client_init+0x58>)
   3042c:	f011 faf2 	bl	41a14 <z_impl_k_thread_name_set>
				download_thread, client, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);

	k_thread_name_set(client->tid, "download_client");

	return 0;
   30430:	4628      	mov	r0, r5
}
   30432:	b009      	add	sp, #36	; 0x24
   30434:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   30436:	f06f 0015 	mvn.w	r0, #21
   3043a:	e7fa      	b.n	30432 <download_client_init+0x4a>
   3043c:	000309a9 	.word	0x000309a9
   30440:	0004a123 	.word	0x0004a123

00030444 <download_client_connect>:

int download_client_connect(struct download_client *client, const char *host,
			    const struct download_client_cfg *config)
{
   30444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30448:	4688      	mov	r8, r1
   3044a:	4616      	mov	r6, r2
	int err;
	struct sockaddr sa;

	if (client == NULL || host == NULL || config == NULL) {
   3044c:	4604      	mov	r4, r0
{
   3044e:	b0c5      	sub	sp, #276	; 0x114
	if (client == NULL || host == NULL || config == NULL) {
   30450:	2800      	cmp	r0, #0
   30452:	f000 8248 	beq.w	308e6 <download_client_connect+0x4a2>
   30456:	2900      	cmp	r1, #0
   30458:	f000 8245 	beq.w	308e6 <download_client_connect+0x4a2>
   3045c:	2a00      	cmp	r2, #0
   3045e:	f000 8242 	beq.w	308e6 <download_client_connect+0x4a2>
		return -EINVAL;
	}

	if (client->fd != -1) {
   30462:	6803      	ldr	r3, [r0, #0]
   30464:	3301      	adds	r3, #1
   30466:	f040 8241 	bne.w	308ec <download_client_connect+0x4a8>
		/* Already connected */
		return 0;
	}

	if (config->frag_size_override > CONFIG_DOWNLOAD_CLIENT_BUF_SIZE) {
   3046a:	6893      	ldr	r3, [r2, #8]
   3046c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   30470:	d90f      	bls.n	30492 <download_client_connect+0x4e>
   30472:	4ba5      	ldr	r3, [pc, #660]	; (30708 <download_client_connect+0x2c4>)
   30474:	48a5      	ldr	r0, [pc, #660]	; (3070c <download_client_connect+0x2c8>)
		LOG_ERR("The configured fragment size is larger than buffer");
   30476:	49a6      	ldr	r1, [pc, #664]	; (30710 <download_client_connect+0x2cc>)
   30478:	1ac0      	subs	r0, r0, r3
   3047a:	08c0      	lsrs	r0, r0, #3
   3047c:	0180      	lsls	r0, r0, #6
   3047e:	f040 0001 	orr.w	r0, r0, #1
   30482:	f00c ff3d 	bl	3d300 <log_string_sync>
		return -E2BIG;
   30486:	f06f 0506 	mvn.w	r5, #6
	if (client->fd < 0) {
		return err;
	}

	return 0;
}
   3048a:	4628      	mov	r0, r5
   3048c:	b045      	add	sp, #276	; 0x114
   3048e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = host_lookup(host, AF_INET, config->apn, &sa);
   30492:	6855      	ldr	r5, [r2, #4]
	struct addrinfo hints = {
   30494:	2100      	movs	r1, #0
   30496:	2250      	movs	r2, #80	; 0x50
   30498:	a81c      	add	r0, sp, #112	; 0x70
   3049a:	f011 fc20 	bl	41cde <memset>
			} : NULL,
   3049e:	b16d      	cbz	r5, 304bc <download_client_connect+0x78>
			&(struct addrinfo) {
   304a0:	2250      	movs	r2, #80	; 0x50
   304a2:	2100      	movs	r1, #0
   304a4:	a830      	add	r0, sp, #192	; 0xc0
   304a6:	f011 fc1a 	bl	41cde <memset>
   304aa:	2304      	movs	r3, #4
   304ac:	2266      	movs	r2, #102	; 0x66
   304ae:	e9cd 2332 	strd	r2, r3, [sp, #200]	; 0xc8
   304b2:	f240 2302 	movw	r3, #514	; 0x202
   304b6:	9537      	str	r5, [sp, #220]	; 0xdc
   304b8:	9334      	str	r3, [sp, #208]	; 0xd0
			} : NULL,
   304ba:	ad30      	add	r5, sp, #192	; 0xc0
	struct addrinfo hints = {
   304bc:	2301      	movs	r3, #1
	err = url_parse_host(host, hostname, sizeof(hostname));
   304be:	2240      	movs	r2, #64	; 0x40
   304c0:	4640      	mov	r0, r8
   304c2:	a90c      	add	r1, sp, #48	; 0x30
	struct addrinfo hints = {
   304c4:	951c      	str	r5, [sp, #112]	; 0x70
   304c6:	931e      	str	r3, [sp, #120]	; 0x78
	err = url_parse_host(host, hostname, sizeof(hostname));
   304c8:	f000 fc02 	bl	30cd0 <url_parse_host>
	if (err) {
   304cc:	4605      	mov	r5, r0
   304ce:	2800      	cmp	r0, #0
   304d0:	d1db      	bne.n	3048a <download_client_connect+0x46>
	return zsock_getaddrinfo(host, service, hints, res);
   304d2:	4601      	mov	r1, r0
   304d4:	ab05      	add	r3, sp, #20
   304d6:	aa1c      	add	r2, sp, #112	; 0x70
   304d8:	a80c      	add	r0, sp, #48	; 0x30
   304da:	f00d fa69 	bl	3d9b0 <zsock_getaddrinfo>
	if (err) {
   304de:	4605      	mov	r5, r0
   304e0:	b190      	cbz	r0, 30508 <download_client_connect+0xc4>
   304e2:	4b89      	ldr	r3, [pc, #548]	; (30708 <download_client_connect+0x2c4>)
   304e4:	4c89      	ldr	r4, [pc, #548]	; (3070c <download_client_connect+0x2c8>)
		LOG_WRN("Failed to resolve hostname %s on %s",
   304e6:	a80c      	add	r0, sp, #48	; 0x30
   304e8:	1ae4      	subs	r4, r4, r3
   304ea:	f00c ff1c 	bl	3d326 <log_strdup>
   304ee:	08e4      	lsrs	r4, r4, #3
   304f0:	01a4      	lsls	r4, r4, #6
   304f2:	f044 0402 	orr.w	r4, r4, #2
   304f6:	4602      	mov	r2, r0
   304f8:	4b86      	ldr	r3, [pc, #536]	; (30714 <download_client_connect+0x2d0>)
   304fa:	4620      	mov	r0, r4
   304fc:	4986      	ldr	r1, [pc, #536]	; (30718 <download_client_connect+0x2d4>)
   304fe:	f00c feff 	bl	3d300 <log_string_sync>
		return -EHOSTUNREACH;
   30502:	f06f 0575 	mvn.w	r5, #117	; 0x75
   30506:	e7c0      	b.n	3048a <download_client_connect+0x46>
	*sa = *(ai->ai_addr);
   30508:	f8dd c014 	ldr.w	ip, [sp, #20]
   3050c:	aa06      	add	r2, sp, #24
   3050e:	f8dc 3018 	ldr.w	r3, [ip, #24]
   30512:	f103 0e18 	add.w	lr, r3, #24
   30516:	4617      	mov	r7, r2
   30518:	6818      	ldr	r0, [r3, #0]
   3051a:	6859      	ldr	r1, [r3, #4]
   3051c:	3308      	adds	r3, #8
   3051e:	c703      	stmia	r7!, {r0, r1}
   30520:	4573      	cmp	r3, lr
   30522:	463a      	mov	r2, r7
   30524:	d1f7      	bne.n	30516 <download_client_connect+0xd2>
	zsock_freeaddrinfo(ai);
   30526:	4660      	mov	r0, ip
	client->config = *config;
   30528:	f604 0718 	addw	r7, r4, #2072	; 0x818
   3052c:	f00d fa42 	bl	3d9b4 <zsock_freeaddrinfo>
   30530:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   30534:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
	err = url_parse_proto(host, &dl->proto, &type);
   30538:	4640      	mov	r0, r8
	client->host = host;
   3053a:	f8c4 8810 	str.w	r8, [r4, #2064]	; 0x810
	err = url_parse_proto(host, &dl->proto, &type);
   3053e:	aa0c      	add	r2, sp, #48	; 0x30
   30540:	f604 0128 	addw	r1, r4, #2088	; 0x828
   30544:	f000 fb8e 	bl	30c64 <url_parse_proto>
	if (err) {
   30548:	b150      	cbz	r0, 30560 <download_client_connect+0x11c>
		type = SOCK_STREAM;
   3054a:	2301      	movs	r3, #1
   3054c:	930c      	str	r3, [sp, #48]	; 0x30
		if (dl->config.sec_tag != -1) {
   3054e:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   30552:	3301      	adds	r3, #1
			dl->proto = IPPROTO_TLS_1_2;
   30554:	bf14      	ite	ne
   30556:	f44f 7381 	movne.w	r3, #258	; 0x102
			dl->proto = IPPROTO_TCP;
   3055a:	2306      	moveq	r3, #6
   3055c:	f8c4 3828 	str.w	r3, [r4, #2088]	; 0x828
	if (dl->proto == IPPROTO_UDP || dl->proto == IPPROTO_DTLS_1_2) {
   30560:	f8d4 2828 	ldr.w	r2, [r4, #2088]	; 0x828
   30564:	f422 7380 	bic.w	r3, r2, #256	; 0x100
   30568:	2b11      	cmp	r3, #17
   3056a:	f000 81b6 	beq.w	308da <download_client_connect+0x496>
	if (dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2) {
   3056e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
   30572:	f8d4 3818 	ldr.w	r3, [r4, #2072]	; 0x818
   30576:	d113      	bne.n	305a0 <download_client_connect+0x15c>
		if (dl->config.sec_tag == -1) {
   30578:	3301      	adds	r3, #1
   3057a:	d11d      	bne.n	305b8 <download_client_connect+0x174>
   3057c:	4863      	ldr	r0, [pc, #396]	; (3070c <download_client_connect+0x2c8>)
   3057e:	4b62      	ldr	r3, [pc, #392]	; (30708 <download_client_connect+0x2c4>)
			LOG_WRN("No security tag provided for TLS/DTLS");
   30580:	4966      	ldr	r1, [pc, #408]	; (3071c <download_client_connect+0x2d8>)
   30582:	1ac0      	subs	r0, r0, r3
   30584:	08c0      	lsrs	r0, r0, #3
   30586:	0180      	lsls	r0, r0, #6
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   30588:	f040 0002 	orr.w	r0, r0, #2
   3058c:	f00c feb8 	bl	3d300 <log_string_sync>
		return -EINVAL;
   30590:	f06f 0a15 	mvn.w	sl, #21
	if (client->fd < 0) {
   30594:	6823      	ldr	r3, [r4, #0]
		return err;
   30596:	ea35 0523 	bics.w	r5, r5, r3, asr #32
   3059a:	bf28      	it	cs
   3059c:	4655      	movcs	r5, sl
   3059e:	e774      	b.n	3048a <download_client_connect+0x46>
	if (dl->config.sec_tag == -1 && dl->config.set_tls_hostname) {
   305a0:	3301      	adds	r3, #1
   305a2:	d109      	bne.n	305b8 <download_client_connect+0x174>
   305a4:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
   305a8:	b133      	cbz	r3, 305b8 <download_client_connect+0x174>
   305aa:	4858      	ldr	r0, [pc, #352]	; (3070c <download_client_connect+0x2c8>)
   305ac:	4b56      	ldr	r3, [pc, #344]	; (30708 <download_client_connect+0x2c4>)
		LOG_WRN("set_tls_hostname flag is set for non-TLS connection");
   305ae:	495c      	ldr	r1, [pc, #368]	; (30720 <download_client_connect+0x2dc>)
   305b0:	1ac0      	subs	r0, r0, r3
   305b2:	08c0      	lsrs	r0, r0, #3
   305b4:	0180      	lsls	r0, r0, #6
   305b6:	e7e7      	b.n	30588 <download_client_connect+0x144>
	err = url_parse_port(host, &port);
   305b8:	4640      	mov	r0, r8
   305ba:	a905      	add	r1, sp, #20
   305bc:	f000 fbc0 	bl	30d40 <url_parse_port>
	if (err) {
   305c0:	b148      	cbz	r0, 305d6 <download_client_connect+0x192>
		switch (dl->proto) {
   305c2:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   305c6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   305ca:	d03b      	beq.n	30644 <download_client_connect+0x200>
   305cc:	dc33      	bgt.n	30636 <download_client_connect+0x1f2>
   305ce:	2b06      	cmp	r3, #6
   305d0:	d03d      	beq.n	3064e <download_client_connect+0x20a>
   305d2:	2b11      	cmp	r3, #17
   305d4:	d03d      	beq.n	30652 <download_client_connect+0x20e>
	switch (sa->sa_family) {
   305d6:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   305da:	2801      	cmp	r0, #1
   305dc:	d03c      	beq.n	30658 <download_client_connect+0x214>
   305de:	2802      	cmp	r0, #2
   305e0:	f040 817e 	bne.w	308e0 <download_client_connect+0x49c>
		SIN6(sa)->sin6_port = htons(port);
   305e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   305e8:	0213      	lsls	r3, r2, #8
   305ea:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   305ee:	f8ad 301a 	strh.w	r3, [sp, #26]
		addrlen = sizeof(struct sockaddr_in6);
   305f2:	2318      	movs	r3, #24
	*fd = socket(sa->sa_family, type, dl->proto);
   305f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   305f6:	f8d4 2828 	ldr.w	r2, [r4, #2088]	; 0x828
		addrlen = sizeof(struct sockaddr_in);
   305fa:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_socket(family, type, proto);
   305fc:	f7f4 fa7a 	bl	24af4 <z_impl_zsock_socket>
   30600:	4f42      	ldr	r7, [pc, #264]	; (3070c <download_client_connect+0x2c8>)
   30602:	4b41      	ldr	r3, [pc, #260]	; (30708 <download_client_connect+0x2c4>)
	if (*fd < 0) {
   30604:	2800      	cmp	r0, #0
   30606:	eba7 0703 	sub.w	r7, r7, r3
   3060a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
	*fd = socket(sa->sa_family, type, dl->proto);
   3060e:	6020      	str	r0, [r4, #0]
	if (*fd < 0) {
   30610:	9302      	str	r3, [sp, #8]
   30612:	ea4f 1683 	mov.w	r6, r3, lsl #6
   30616:	da28      	bge.n	3066a <download_client_connect+0x226>
		LOG_ERR("Failed to create socket, err %d", errno);
   30618:	f00d fd5f 	bl	3e0da <__errno>
   3061c:	f046 0601 	orr.w	r6, r6, #1
   30620:	6802      	ldr	r2, [r0, #0]
   30622:	4940      	ldr	r1, [pc, #256]	; (30724 <download_client_connect+0x2e0>)
   30624:	4630      	mov	r0, r6
   30626:	f00c fe6b 	bl	3d300 <log_string_sync>
		return -errno;
   3062a:	f00d fd56 	bl	3e0da <__errno>
   3062e:	6800      	ldr	r0, [r0, #0]
   30630:	f1c0 0a00 	rsb	sl, r0, #0
   30634:	e7ae      	b.n	30594 <download_client_connect+0x150>
		switch (dl->proto) {
   30636:	f240 1211 	movw	r2, #273	; 0x111
   3063a:	4293      	cmp	r3, r2
   3063c:	d1cb      	bne.n	305d6 <download_client_connect+0x192>
			port = 5684;
   3063e:	f241 6334 	movw	r3, #5684	; 0x1634
   30642:	e001      	b.n	30648 <download_client_connect+0x204>
			port = 443;
   30644:	f240 13bb 	movw	r3, #443	; 0x1bb
			port = 5683;
   30648:	f8ad 3014 	strh.w	r3, [sp, #20]
			break;
   3064c:	e7c3      	b.n	305d6 <download_client_connect+0x192>
			port = 80;
   3064e:	2350      	movs	r3, #80	; 0x50
   30650:	e7fa      	b.n	30648 <download_client_connect+0x204>
			port = 5683;
   30652:	f241 6333 	movw	r3, #5683	; 0x1633
   30656:	e7f7      	b.n	30648 <download_client_connect+0x204>
		SIN(sa)->sin_port = htons(port);
   30658:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   3065c:	0213      	lsls	r3, r2, #8
   3065e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   30662:	f8ad 301a 	strh.w	r3, [sp, #26]
		addrlen = sizeof(struct sockaddr_in);
   30666:	2308      	movs	r3, #8
   30668:	e7c4      	b.n	305f4 <download_client_connect+0x1b0>
	if (dl->config.apn != NULL && strlen(dl->config.apn)) {
   3066a:	f8d4 081c 	ldr.w	r0, [r4, #2076]	; 0x81c
   3066e:	2800      	cmp	r0, #0
   30670:	d066      	beq.n	30740 <download_client_connect+0x2fc>
   30672:	f7ec fdf3 	bl	1d25c <strlen>
   30676:	2800      	cmp	r0, #0
   30678:	d062      	beq.n	30740 <download_client_connect+0x2fc>
		err = socket_apn_set(*fd, dl->config.apn);
   3067a:	f8d4 781c 	ldr.w	r7, [r4, #2076]	; 0x81c
   3067e:	f8d4 a000 	ldr.w	sl, [r4]
	__ASSERT_NO_MSG(apn);
   30682:	b94f      	cbnz	r7, 30698 <download_client_connect+0x254>
   30684:	4928      	ldr	r1, [pc, #160]	; (30728 <download_client_connect+0x2e4>)
   30686:	4829      	ldr	r0, [pc, #164]	; (3072c <download_client_connect+0x2e8>)
   30688:	238b      	movs	r3, #139	; 0x8b
   3068a:	4a29      	ldr	r2, [pc, #164]	; (30730 <download_client_connect+0x2ec>)
   3068c:	f00c fb73 	bl	3cd76 <printk>
   30690:	218b      	movs	r1, #139	; 0x8b
   30692:	4827      	ldr	r0, [pc, #156]	; (30730 <download_client_connect+0x2ec>)
   30694:	f00c fe23 	bl	3d2de <assert_post_action>
	len = strlen(apn);
   30698:	4638      	mov	r0, r7
   3069a:	f7ec fddf 	bl	1d25c <strlen>
	if (len >= IFNAMSIZ) {
   3069e:	283f      	cmp	r0, #63	; 0x3f
	len = strlen(apn);
   306a0:	4681      	mov	r9, r0
	if (len >= IFNAMSIZ) {
   306a2:	d90d      	bls.n	306c0 <download_client_connect+0x27c>
		LOG_ERR("Access point name is too long.");
   306a4:	4923      	ldr	r1, [pc, #140]	; (30734 <download_client_connect+0x2f0>)
   306a6:	f046 0001 	orr.w	r0, r6, #1
   306aa:	f00c fe29 	bl	3d300 <log_string_sync>
		return -EINVAL;
   306ae:	f06f 0a15 	mvn.w	sl, #21
		close(*fd);
   306b2:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_close(sock);
   306b4:	f00d f98f 	bl	3d9d6 <z_impl_zsock_close>
		*fd = -1;
   306b8:	f04f 33ff 	mov.w	r3, #4294967295
   306bc:	6023      	str	r3, [r4, #0]
   306be:	e769      	b.n	30594 <download_client_connect+0x150>
	LOG_INF("Setting up APN: %s", log_strdup(apn));
   306c0:	4638      	mov	r0, r7
   306c2:	f00c fe30 	bl	3d326 <log_strdup>
   306c6:	f046 0b03 	orr.w	fp, r6, #3
   306ca:	4602      	mov	r2, r0
   306cc:	491a      	ldr	r1, [pc, #104]	; (30738 <download_client_connect+0x2f4>)
   306ce:	4658      	mov	r0, fp
   306d0:	f00c fe16 	bl	3d300 <log_string_sync>
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   306d4:	2219      	movs	r2, #25
   306d6:	463b      	mov	r3, r7
   306d8:	2101      	movs	r1, #1
   306da:	4650      	mov	r0, sl
   306dc:	f8cd 9000 	str.w	r9, [sp]
   306e0:	f00d fa11 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err) {
   306e4:	b360      	cbz	r0, 30740 <download_client_connect+0x2fc>
		LOG_ERR("Failed to bind socket to network \"%s\", err %d",
   306e6:	4638      	mov	r0, r7
   306e8:	f00c fe1d 	bl	3d326 <log_strdup>
   306ec:	9002      	str	r0, [sp, #8]
   306ee:	f00d fcf4 	bl	3e0da <__errno>
   306f2:	f046 0601 	orr.w	r6, r6, #1
   306f6:	6803      	ldr	r3, [r0, #0]
   306f8:	9a02      	ldr	r2, [sp, #8]
   306fa:	4630      	mov	r0, r6
   306fc:	490f      	ldr	r1, [pc, #60]	; (3073c <download_client_connect+0x2f8>)
   306fe:	f00c fdff 	bl	3d300 <log_string_sync>
		return -ENETUNREACH;
   30702:	f06f 0a71 	mvn.w	sl, #113	; 0x71
   30706:	e7d4      	b.n	306b2 <download_client_connect+0x26e>
   30708:	0004339c 	.word	0x0004339c
   3070c:	0004340c 	.word	0x0004340c
   30710:	0004a133 	.word	0x0004a133
   30714:	0004a166 	.word	0x0004a166
   30718:	0004a16b 	.word	0x0004a16b
   3071c:	0004a18f 	.word	0x0004a18f
   30720:	0004a1b5 	.word	0x0004a1b5
   30724:	0004a1e9 	.word	0x0004a1e9
   30728:	00047e89 	.word	0x00047e89
   3072c:	00044dbf 	.word	0x00044dbf
   30730:	0004a0b4 	.word	0x0004a0b4
   30734:	0004a209 	.word	0x0004a209
   30738:	0004a228 	.word	0x0004a228
   3073c:	0004a23b 	.word	0x0004a23b
	if ((dl->proto == IPPROTO_TLS_1_2 || dl->proto == IPPROTO_DTLS_1_2)
   30740:	f8d4 3828 	ldr.w	r3, [r4, #2088]	; 0x828
   30744:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30748:	d003      	beq.n	30752 <download_client_connect+0x30e>
   3074a:	f240 1211 	movw	r2, #273	; 0x111
   3074e:	4293      	cmp	r3, r2
   30750:	d177      	bne.n	30842 <download_client_connect+0x3fe>
	     && (dl->config.sec_tag != -1)) {
   30752:	f8d4 9818 	ldr.w	r9, [r4, #2072]	; 0x818
   30756:	f1b9 3fff 	cmp.w	r9, #4294967295
   3075a:	d072      	beq.n	30842 <download_client_connect+0x3fe>
	verify = REQUIRED;
   3075c:	2302      	movs	r3, #2
   3075e:	f8d4 a000 	ldr.w	sl, [r4]
	sec_tag_t sec_tag_list[] = { sec_tag };
   30762:	f8cd 90c0 	str.w	r9, [sp, #192]	; 0xc0
	verify = REQUIRED;
   30766:	931c      	str	r3, [sp, #112]	; 0x70
   30768:	f04f 0b04 	mov.w	fp, #4
   3076c:	ab1c      	add	r3, sp, #112	; 0x70
   3076e:	2205      	movs	r2, #5
   30770:	f44f 718d 	mov.w	r1, #282	; 0x11a
   30774:	4650      	mov	r0, sl
   30776:	f8cd b000 	str.w	fp, [sp]
   3077a:	f00d f9c4 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err) {
   3077e:	9b02      	ldr	r3, [sp, #8]
   30780:	019f      	lsls	r7, r3, #6
   30782:	b320      	cbz	r0, 307ce <download_client_connect+0x38a>
		LOG_ERR("Failed to setup peer verification, errno %d", errno);
   30784:	f00d fca9 	bl	3e0da <__errno>
   30788:	4959      	ldr	r1, [pc, #356]	; (308f0 <download_client_connect+0x4ac>)
   3078a:	6802      	ldr	r2, [r0, #0]
   3078c:	f047 0901 	orr.w	r9, r7, #1
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   30790:	4648      	mov	r0, r9
   30792:	f00c fdb5 	bl	3d300 <log_string_sync>
		return -errno;
   30796:	f00d fca0 	bl	3e0da <__errno>
   3079a:	6800      	ldr	r0, [r0, #0]
   3079c:	f1c0 0a00 	rsb	sl, r0, #0
		if (err) {
   307a0:	f1ba 0f00 	cmp.w	sl, #0
   307a4:	d185      	bne.n	306b2 <download_client_connect+0x26e>
		if (dl->config.set_tls_hostname) {
   307a6:	f894 3824 	ldrb.w	r3, [r4, #2084]	; 0x824
   307aa:	2b00      	cmp	r3, #0
   307ac:	d049      	beq.n	30842 <download_client_connect+0x3fe>
	err = url_parse_host(hostname, parsed_host, sizeof(parsed_host));
   307ae:	2240      	movs	r2, #64	; 0x40
   307b0:	4640      	mov	r0, r8
   307b2:	a930      	add	r1, sp, #192	; 0xc0
   307b4:	f8d4 9000 	ldr.w	r9, [r4]
   307b8:	f000 fa8a 	bl	30cd0 <url_parse_host>
	if (err) {
   307bc:	4682      	mov	sl, r0
   307be:	b1f0      	cbz	r0, 307fe <download_client_connect+0x3ba>
		LOG_ERR("Failed to parse host, err %d", err);
   307c0:	4602      	mov	r2, r0
   307c2:	494c      	ldr	r1, [pc, #304]	; (308f4 <download_client_connect+0x4b0>)
   307c4:	f047 0001 	orr.w	r0, r7, #1
   307c8:	f00c fd9a 	bl	3d300 <log_string_sync>
			if (err) {
   307cc:	e771      	b.n	306b2 <download_client_connect+0x26e>
	LOG_INF("Setting up TLS credentials, tag %d", sec_tag);
   307ce:	464a      	mov	r2, r9
   307d0:	4949      	ldr	r1, [pc, #292]	; (308f8 <download_client_connect+0x4b4>)
   307d2:	f047 0003 	orr.w	r0, r7, #3
   307d6:	f00c fd93 	bl	3d300 <log_string_sync>
   307da:	2201      	movs	r2, #1
   307dc:	f44f 718d 	mov.w	r1, #282	; 0x11a
   307e0:	4650      	mov	r0, sl
   307e2:	f8cd b000 	str.w	fp, [sp]
   307e6:	ab30      	add	r3, sp, #192	; 0xc0
   307e8:	f00d f98d 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err) {
   307ec:	2800      	cmp	r0, #0
   307ee:	d0da      	beq.n	307a6 <download_client_connect+0x362>
		LOG_ERR("Failed to setup socket security tag, errno %d", errno);
   307f0:	f00d fc73 	bl	3e0da <__errno>
   307f4:	f047 0901 	orr.w	r9, r7, #1
   307f8:	6802      	ldr	r2, [r0, #0]
   307fa:	4940      	ldr	r1, [pc, #256]	; (308fc <download_client_connect+0x4b8>)
   307fc:	e7c8      	b.n	30790 <download_client_connect+0x34c>
	err = setsockopt(fd, SOL_TLS, TLS_HOSTNAME, parsed_host,
   307fe:	a830      	add	r0, sp, #192	; 0xc0
   30800:	f7ec fd2c 	bl	1d25c <strlen>
   30804:	2202      	movs	r2, #2
   30806:	9000      	str	r0, [sp, #0]
   30808:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3080c:	4648      	mov	r0, r9
   3080e:	ab30      	add	r3, sp, #192	; 0xc0
   30810:	f00d f979 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err) {
   30814:	b1a8      	cbz	r0, 30842 <download_client_connect+0x3fe>
		LOG_ERR("Failed to setup TLS hostname (%s), errno %d",
   30816:	a830      	add	r0, sp, #192	; 0xc0
   30818:	f00c fd85 	bl	3d326 <log_strdup>
   3081c:	9002      	str	r0, [sp, #8]
   3081e:	f00d fc5c 	bl	3e0da <__errno>
   30822:	f047 0701 	orr.w	r7, r7, #1
   30826:	6803      	ldr	r3, [r0, #0]
   30828:	9a02      	ldr	r2, [sp, #8]
   3082a:	4638      	mov	r0, r7
   3082c:	4934      	ldr	r1, [pc, #208]	; (30900 <download_client_connect+0x4bc>)
   3082e:	f00c fd67 	bl	3d300 <log_string_sync>
		return -errno;
   30832:	f00d fc52 	bl	3e0da <__errno>
   30836:	6803      	ldr	r3, [r0, #0]
   30838:	f1c3 0a00 	rsb	sl, r3, #0
			if (err) {
   3083c:	2b00      	cmp	r3, #0
   3083e:	f47f af38 	bne.w	306b2 <download_client_connect+0x26e>
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   30842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   30844:	492f      	ldr	r1, [pc, #188]	; (30904 <download_client_connect+0x4c0>)
		timeout_ms = CONFIG_DOWNLOAD_CLIENT_UDP_SOCK_TIMEO_MS;
   30846:	2b01      	cmp	r3, #1
		.tv_sec = (timeout_ms / 1000),
   30848:	bf14      	ite	ne
   3084a:	2204      	movne	r2, #4
   3084c:	221e      	moveq	r2, #30
	struct timeval timeo = {
   3084e:	2300      	movs	r3, #0
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   30850:	f046 0003 	orr.w	r0, r6, #3
	err = socket_timeout_set(*fd, type);
   30854:	6827      	ldr	r7, [r4, #0]
	struct timeval timeo = {
   30856:	9230      	str	r2, [sp, #192]	; 0xc0
   30858:	9331      	str	r3, [sp, #196]	; 0xc4
	LOG_INF("Configuring socket timeout (%ld s)", timeo.tv_sec);
   3085a:	f00c fd51 	bl	3d300 <log_string_sync>
   3085e:	2308      	movs	r3, #8
   30860:	2214      	movs	r2, #20
   30862:	9300      	str	r3, [sp, #0]
   30864:	2101      	movs	r1, #1
   30866:	4638      	mov	r0, r7
   30868:	ab30      	add	r3, sp, #192	; 0xc0
   3086a:	f00d f94c 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err) {
   3086e:	b180      	cbz	r0, 30892 <download_client_connect+0x44e>
		LOG_WRN("Failed to set socket timeout, errno %d", errno);
   30870:	f00d fc33 	bl	3e0da <__errno>
   30874:	f046 0702 	orr.w	r7, r6, #2
   30878:	6802      	ldr	r2, [r0, #0]
   3087a:	4923      	ldr	r1, [pc, #140]	; (30908 <download_client_connect+0x4c4>)
   3087c:	4638      	mov	r0, r7
   3087e:	f00c fd3f 	bl	3d300 <log_string_sync>
		return -errno;
   30882:	f00d fc2a 	bl	3e0da <__errno>
   30886:	6803      	ldr	r3, [r0, #0]
   30888:	f1c3 0a00 	rsb	sl, r3, #0
	if (err) {
   3088c:	2b00      	cmp	r3, #0
   3088e:	f47f af10 	bne.w	306b2 <download_client_connect+0x26e>
	LOG_INF("Connecting to %s", log_strdup(host));
   30892:	4640      	mov	r0, r8
   30894:	f00c fd47 	bl	3d326 <log_strdup>
   30898:	f046 0703 	orr.w	r7, r6, #3
   3089c:	4602      	mov	r2, r0
   3089e:	491b      	ldr	r1, [pc, #108]	; (3090c <download_client_connect+0x4c8>)
   308a0:	4638      	mov	r0, r7
   308a2:	f00c fd2d 	bl	3d300 <log_string_sync>
	err = connect(*fd, sa, addrlen);
   308a6:	6820      	ldr	r0, [r4, #0]
	return z_impl_zsock_connect(sock, addr, addrlen);
   308a8:	9a03      	ldr	r2, [sp, #12]
   308aa:	a906      	add	r1, sp, #24
   308ac:	f00d f8aa 	bl	3da04 <z_impl_zsock_connect>
	if (err) {
   308b0:	b910      	cbnz	r0, 308b8 <download_client_connect+0x474>
		return -EINVAL;
   308b2:	f04f 0a00 	mov.w	sl, #0
   308b6:	e66d      	b.n	30594 <download_client_connect+0x150>
		LOG_ERR("Unable to connect, errno %d", errno);
   308b8:	f00d fc0f 	bl	3e0da <__errno>
   308bc:	f046 0601 	orr.w	r6, r6, #1
   308c0:	6802      	ldr	r2, [r0, #0]
   308c2:	4913      	ldr	r1, [pc, #76]	; (30910 <download_client_connect+0x4cc>)
   308c4:	4630      	mov	r0, r6
   308c6:	f00c fd1b 	bl	3d300 <log_string_sync>
		err = -errno;
   308ca:	f00d fc06 	bl	3e0da <__errno>
   308ce:	6803      	ldr	r3, [r0, #0]
   308d0:	f1c3 0a00 	rsb	sl, r3, #0
	if (err) {
   308d4:	2b00      	cmp	r3, #0
   308d6:	d0ec      	beq.n	308b2 <download_client_connect+0x46e>
   308d8:	e6eb      	b.n	306b2 <download_client_connect+0x26e>
			return -EPROTONOSUPPORT;
   308da:	f06f 0a7a 	mvn.w	sl, #122	; 0x7a
   308de:	e659      	b.n	30594 <download_client_connect+0x150>
	switch (sa->sa_family) {
   308e0:	f06f 0a69 	mvn.w	sl, #105	; 0x69
   308e4:	e656      	b.n	30594 <download_client_connect+0x150>
		return -EINVAL;
   308e6:	f06f 0515 	mvn.w	r5, #21
   308ea:	e5ce      	b.n	3048a <download_client_connect+0x46>
		return 0;
   308ec:	2500      	movs	r5, #0
   308ee:	e5cc      	b.n	3048a <download_client_connect+0x46>
   308f0:	0004a269 	.word	0x0004a269
   308f4:	0004a2e6 	.word	0x0004a2e6
   308f8:	0004a295 	.word	0x0004a295
   308fc:	0004a2b8 	.word	0x0004a2b8
   30900:	0004a303 	.word	0x0004a303
   30904:	0004a32f 	.word	0x0004a32f
   30908:	0004a352 	.word	0x0004a352
   3090c:	0004a379 	.word	0x0004a379
   30910:	0004a38a 	.word	0x0004a38a

00030914 <download_client_disconnect>:

int download_client_disconnect(struct download_client *const client)
{
   30914:	b510      	push	{r4, lr}
	int err;

	if (client == NULL || client->fd < 0) {
   30916:	4604      	mov	r4, r0
   30918:	b1e0      	cbz	r0, 30954 <download_client_disconnect+0x40>
   3091a:	6800      	ldr	r0, [r0, #0]
   3091c:	2800      	cmp	r0, #0
   3091e:	db19      	blt.n	30954 <download_client_disconnect+0x40>
	return z_impl_zsock_close(sock);
   30920:	f00d f859 	bl	3d9d6 <z_impl_zsock_close>
		return -EINVAL;
	}

	err = close(client->fd);
	if (err) {
   30924:	b190      	cbz	r0, 3094c <download_client_disconnect+0x38>
   30926:	4b0d      	ldr	r3, [pc, #52]	; (3095c <download_client_disconnect+0x48>)
   30928:	4c0d      	ldr	r4, [pc, #52]	; (30960 <download_client_disconnect+0x4c>)
   3092a:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Failed to close socket, errno %d", errno);
   3092c:	f00d fbd5 	bl	3e0da <__errno>
   30930:	08e4      	lsrs	r4, r4, #3
   30932:	01a4      	lsls	r4, r4, #6
   30934:	f044 0401 	orr.w	r4, r4, #1
   30938:	6802      	ldr	r2, [r0, #0]
   3093a:	490a      	ldr	r1, [pc, #40]	; (30964 <download_client_disconnect+0x50>)
   3093c:	4620      	mov	r0, r4
   3093e:	f00c fcdf 	bl	3d300 <log_string_sync>
		return -errno;
   30942:	f00d fbca 	bl	3e0da <__errno>
   30946:	6800      	ldr	r0, [r0, #0]
   30948:	4240      	negs	r0, r0
	}

	client->fd = -1;

	return 0;
}
   3094a:	bd10      	pop	{r4, pc}
	client->fd = -1;
   3094c:	f04f 33ff 	mov.w	r3, #4294967295
   30950:	6023      	str	r3, [r4, #0]
	return 0;
   30952:	e7fa      	b.n	3094a <download_client_disconnect+0x36>
		return -EINVAL;
   30954:	f06f 0015 	mvn.w	r0, #21
   30958:	e7f7      	b.n	3094a <download_client_disconnect+0x36>
   3095a:	bf00      	nop
   3095c:	0004339c 	.word	0x0004339c
   30960:	0004340c 	.word	0x0004340c
   30964:	0004a3a6 	.word	0x0004a3a6

00030968 <reconnect>:
{
   30968:	b510      	push	{r4, lr}
   3096a:	4604      	mov	r4, r0
   3096c:	4b0b      	ldr	r3, [pc, #44]	; (3099c <reconnect+0x34>)
   3096e:	480c      	ldr	r0, [pc, #48]	; (309a0 <reconnect+0x38>)
	LOG_INF("Reconnecting..");
   30970:	490c      	ldr	r1, [pc, #48]	; (309a4 <reconnect+0x3c>)
   30972:	1a1b      	subs	r3, r3, r0
   30974:	08db      	lsrs	r3, r3, #3
   30976:	019b      	lsls	r3, r3, #6
   30978:	f043 0003 	orr.w	r0, r3, #3
   3097c:	f00c fcc0 	bl	3d300 <log_string_sync>
	err = download_client_disconnect(dl);
   30980:	4620      	mov	r0, r4
   30982:	f7ff ffc7 	bl	30914 <download_client_disconnect>
	if (err) {
   30986:	b940      	cbnz	r0, 3099a <reconnect+0x32>
	err = download_client_connect(dl, dl->host, &dl->config);
   30988:	4620      	mov	r0, r4
   3098a:	f8d4 1810 	ldr.w	r1, [r4, #2064]	; 0x810
   3098e:	f604 0218 	addw	r2, r4, #2072	; 0x818
}
   30992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = download_client_connect(dl, dl->host, &dl->config);
   30996:	f7ff bd55 	b.w	30444 <download_client_connect>
}
   3099a:	bd10      	pop	{r4, pc}
   3099c:	0004340c 	.word	0x0004340c
   309a0:	0004339c 	.word	0x0004339c
   309a4:	0004a3c7 	.word	0x0004a3c7

000309a8 <download_thread>:
{
   309a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   309ac:	4605      	mov	r5, r0
	int rc = 0;
   309ae:	2400      	movs	r4, #0
   309b0:	4e82      	ldr	r6, [pc, #520]	; (30bbc <download_thread+0x214>)
   309b2:	4b83      	ldr	r3, [pc, #524]	; (30bc0 <download_thread+0x218>)
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   309b4:	f8df 822c 	ldr.w	r8, [pc, #556]	; 30be4 <download_thread+0x23c>
   309b8:	1af6      	subs	r6, r6, r3
   309ba:	f8df 922c 	ldr.w	r9, [pc, #556]	; 30be8 <download_thread+0x240>
   309be:	f8df a22c 	ldr.w	sl, [pc, #556]	; 30bec <download_thread+0x244>
{
   309c2:	b087      	sub	sp, #28
   309c4:	08f6      	lsrs	r6, r6, #3
	k_thread_suspend(dl->tid);
   309c6:	f8d5 083c 	ldr.w	r0, [r5, #2108]	; 0x83c
	z_impl_k_thread_suspend(thread);
   309ca:	f007 ff35 	bl	38838 <z_impl_k_thread_suspend>
		__ASSERT(dl->offset < sizeof(dl->buf), "Buffer overflow");
   309ce:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   309d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   309d6:	d30e      	bcc.n	309f6 <download_thread+0x4e>
   309d8:	4649      	mov	r1, r9
   309da:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   309de:	4642      	mov	r2, r8
   309e0:	4650      	mov	r0, sl
   309e2:	f00c f9c8 	bl	3cd76 <printk>
   309e6:	4877      	ldr	r0, [pc, #476]	; (30bc4 <download_thread+0x21c>)
   309e8:	f00c f9c5 	bl	3cd76 <printk>
   309ec:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   309f0:	4640      	mov	r0, r8
   309f2:	f00c fc74 	bl	3d2de <assert_post_action>
		if (sizeof(dl->buf) - dl->offset == 0) {
   309f6:	f8d5 1804 	ldr.w	r1, [r5, #2052]	; 0x804
   309fa:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   309fe:	d10b      	bne.n	30a18 <download_thread+0x70>
			LOG_ERR("Could not fit HTTP header from server (> %d)",
   30a00:	01b0      	lsls	r0, r6, #6
   30a02:	460a      	mov	r2, r1
   30a04:	f040 0001 	orr.w	r0, r0, #1
   30a08:	496f      	ldr	r1, [pc, #444]	; (30bc8 <download_thread+0x220>)
   30a0a:	f00c fc79 	bl	3d300 <log_string_sync>
			error_evt_send(dl, E2BIG);
   30a0e:	2107      	movs	r1, #7
			error_evt_send(dl, EBADMSG);
   30a10:	f505 50c8 	add.w	r0, r5, #6400	; 0x1900
   30a14:	3010      	adds	r0, #16
   30a16:	e04b      	b.n	30ab0 <download_thread+0x108>
		len = recv(dl->fd, dl->buf + dl->offset,
   30a18:	462f      	mov	r7, r5
   30a1a:	f857 0b04 	ldr.w	r0, [r7], #4
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   30a1e:	2300      	movs	r3, #0
   30a20:	f5c1 6200 	rsb	r2, r1, #2048	; 0x800
   30a24:	e9cd 3300 	strd	r3, r3, [sp]
   30a28:	4439      	add	r1, r7
   30a2a:	f00d f834 	bl	3da96 <z_impl_zsock_recvfrom>
		if ((len == 0) || (len == -1)) {
   30a2e:	1e43      	subs	r3, r0, #1
   30a30:	3303      	adds	r3, #3
   30a32:	4607      	mov	r7, r0
   30a34:	d953      	bls.n	30ade <download_thread+0x136>
			if ((dl->offset > 0) && (dl->http.has_header)) {
   30a36:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
   30a3a:	b173      	cbz	r3, 30a5a <download_thread+0xb2>
   30a3c:	f895 382c 	ldrb.w	r3, [r5, #2092]	; 0x82c
   30a40:	b15b      	cbz	r3, 30a5a <download_thread+0xb2>
				rc = fragment_evt_send(dl);
   30a42:	4628      	mov	r0, r5
   30a44:	f7ff fca2 	bl	3038c <fragment_evt_send>
				if (rc) {
   30a48:	4604      	mov	r4, r0
   30a4a:	b130      	cbz	r0, 30a5a <download_thread+0xb2>
					LOG_INF("Fragment refused, download stopped.");
   30a4c:	01b0      	lsls	r0, r6, #6
   30a4e:	495f      	ldr	r1, [pc, #380]	; (30bcc <download_thread+0x224>)
   30a50:	f040 0003 	orr.w	r0, r0, #3
			LOG_INF("Fragment refused, download stopped.");
   30a54:	f00c fc54 	bl	3d300 <log_string_sync>
   30a58:	e7b5      	b.n	309c6 <download_thread+0x1e>
			if (len == -1) {
   30a5a:	3701      	adds	r7, #1
   30a5c:	d137      	bne.n	30ace <download_thread+0x126>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30a5e:	f00d fb3c 	bl	3e0da <__errno>
   30a62:	6803      	ldr	r3, [r0, #0]
   30a64:	2b74      	cmp	r3, #116	; 0x74
   30a66:	d126      	bne.n	30ab6 <download_thread+0x10e>
					if (dl->proto == IPPROTO_UDP ||
   30a68:	f8d5 3828 	ldr.w	r3, [r5, #2088]	; 0x828
   30a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   30a70:	2b11      	cmp	r3, #17
   30a72:	f000 8084 	beq.w	30b7e <download_thread+0x1d6>
					error_cause = ETIMEDOUT;
   30a76:	2474      	movs	r4, #116	; 0x74
				LOG_ERR("Error in recv(), errno %d", errno);
   30a78:	f00d fb2f 	bl	3e0da <__errno>
   30a7c:	01b7      	lsls	r7, r6, #6
   30a7e:	f047 0701 	orr.w	r7, r7, #1
   30a82:	6802      	ldr	r2, [r0, #0]
   30a84:	4952      	ldr	r1, [pc, #328]	; (30bd0 <download_thread+0x228>)
   30a86:	4638      	mov	r0, r7
   30a88:	f00c fc3a 	bl	3d300 <log_string_sync>
			rc = error_evt_send(dl, error_cause);
   30a8c:	f505 57c8 	add.w	r7, r5, #6400	; 0x1900
   30a90:	3710      	adds	r7, #16
   30a92:	4621      	mov	r1, r4
   30a94:	4638      	mov	r0, r7
   30a96:	f00f fa8e 	bl	3ffb6 <error_evt_send.isra.0>
			if (rc) {
   30a9a:	4604      	mov	r4, r0
   30a9c:	2800      	cmp	r0, #0
   30a9e:	d192      	bne.n	309c6 <download_thread+0x1e>
			rc = reconnect(dl);
   30aa0:	4628      	mov	r0, r5
   30aa2:	f7ff ff61 	bl	30968 <reconnect>
			if (rc) {
   30aa6:	4604      	mov	r4, r0
   30aa8:	2800      	cmp	r0, #0
   30aaa:	d068      	beq.n	30b7e <download_thread+0x1d6>
				error_evt_send(dl, EHOSTDOWN);
   30aac:	2175      	movs	r1, #117	; 0x75
   30aae:	4638      	mov	r0, r7
   30ab0:	f00f fa81 	bl	3ffb6 <error_evt_send.isra.0>
				break;
   30ab4:	e787      	b.n	309c6 <download_thread+0x1e>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30ab6:	f00d fb10 	bl	3e0da <__errno>
   30aba:	6803      	ldr	r3, [r0, #0]
   30abc:	2b0b      	cmp	r3, #11
   30abe:	d0d3      	beq.n	30a68 <download_thread+0xc0>
				    (errno == EAGAIN)) {
   30ac0:	f00d fb0b 	bl	3e0da <__errno>
				if ((errno == ETIMEDOUT) || (errno == EWOULDBLOCK) ||
   30ac4:	6803      	ldr	r3, [r0, #0]
   30ac6:	2b0b      	cmp	r3, #11
   30ac8:	d0ce      	beq.n	30a68 <download_thread+0xc0>
			error_cause = ECONNRESET;
   30aca:	2468      	movs	r4, #104	; 0x68
   30acc:	e7d4      	b.n	30a78 <download_thread+0xd0>
				LOG_WRN("Peer closed connection!");
   30ace:	01b0      	lsls	r0, r6, #6
   30ad0:	4940      	ldr	r1, [pc, #256]	; (30bd4 <download_thread+0x22c>)
   30ad2:	f040 0002 	orr.w	r0, r0, #2
   30ad6:	f00c fc13 	bl	3d300 <log_string_sync>
			error_cause = ECONNRESET;
   30ada:	2468      	movs	r4, #104	; 0x68
   30adc:	e7d6      	b.n	30a8c <download_thread+0xe4>
		if (dl->proto == IPPROTO_TCP || dl->proto == IPPROTO_TLS_1_2) {
   30ade:	f8d5 3828 	ldr.w	r3, [r5, #2088]	; 0x828
   30ae2:	2b06      	cmp	r3, #6
   30ae4:	d002      	beq.n	30aec <download_thread+0x144>
   30ae6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   30aea:	d106      	bne.n	30afa <download_thread+0x152>
			rc = http_parse(client, len);
   30aec:	4639      	mov	r1, r7
   30aee:	4628      	mov	r0, r5
   30af0:	f000 fa0a 	bl	30f08 <http_parse>
			if (rc > 0) {
   30af4:	1e04      	subs	r4, r0, #0
   30af6:	f73f af6a 	bgt.w	309ce <download_thread+0x26>
		if (rc < 0) {
   30afa:	2c00      	cmp	r4, #0
   30afc:	da01      	bge.n	30b02 <download_thread+0x15a>
			error_evt_send(dl, EBADMSG);
   30afe:	214d      	movs	r1, #77	; 0x4d
   30b00:	e786      	b.n	30a10 <download_thread+0x68>
		if (dl->file_size) {
   30b02:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   30b06:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   30b0a:	01b7      	lsls	r7, r6, #6
   30b0c:	b193      	cbz	r3, 30b34 <download_thread+0x18c>
			LOG_INF("Downloaded %u/%u bytes (%d%%)",
   30b0e:	2164      	movs	r1, #100	; 0x64
   30b10:	4351      	muls	r1, r2
   30b12:	fbb1 f1f3 	udiv	r1, r1, r3
   30b16:	f047 0003 	orr.w	r0, r7, #3
   30b1a:	9100      	str	r1, [sp, #0]
   30b1c:	492e      	ldr	r1, [pc, #184]	; (30bd8 <download_thread+0x230>)
   30b1e:	f00c fbef 	bl	3d300 <log_string_sync>
		rc = fragment_evt_send(dl);
   30b22:	4628      	mov	r0, r5
   30b24:	f7ff fc32 	bl	3038c <fragment_evt_send>
		if (rc) {
   30b28:	4604      	mov	r4, r0
   30b2a:	b148      	cbz	r0, 30b40 <download_thread+0x198>
			LOG_INF("Fragment refused, download stopped.");
   30b2c:	4927      	ldr	r1, [pc, #156]	; (30bcc <download_thread+0x224>)
   30b2e:	f047 0003 	orr.w	r0, r7, #3
   30b32:	e78f      	b.n	30a54 <download_thread+0xac>
			LOG_INF("Downloaded %u bytes", dl->progress);
   30b34:	4929      	ldr	r1, [pc, #164]	; (30bdc <download_thread+0x234>)
   30b36:	f047 0003 	orr.w	r0, r7, #3
   30b3a:	f00c fbe1 	bl	3d300 <log_string_sync>
   30b3e:	e7f0      	b.n	30b22 <download_thread+0x17a>
		if (dl->progress == dl->file_size) {
   30b40:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   30b44:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
   30b48:	429a      	cmp	r2, r3
   30b4a:	d110      	bne.n	30b6e <download_thread+0x1c6>
			LOG_INF("Download complete");
   30b4c:	f047 0003 	orr.w	r0, r7, #3
   30b50:	4923      	ldr	r1, [pc, #140]	; (30be0 <download_thread+0x238>)
   30b52:	f00c fbd5 	bl	3d300 <log_string_sync>
			const struct download_client_evt evt = {
   30b56:	2302      	movs	r3, #2
   30b58:	e9cd 4403 	strd	r4, r4, [sp, #12]
   30b5c:	f88d 300c 	strb.w	r3, [sp, #12]
			dl->callback(&evt);
   30b60:	f641 1310 	movw	r3, #6416	; 0x1910
			const struct download_client_evt evt = {
   30b64:	9405      	str	r4, [sp, #20]
			dl->callback(&evt);
   30b66:	58eb      	ldr	r3, [r5, r3]
   30b68:	a803      	add	r0, sp, #12
   30b6a:	4798      	blx	r3
			break;
   30b6c:	e72b      	b.n	309c6 <download_thread+0x1e>
		if (dl->http.connection_close) {
   30b6e:	f895 382d 	ldrb.w	r3, [r5, #2093]	; 0x82d
   30b72:	b123      	cbz	r3, 30b7e <download_thread+0x1d6>
			dl->http.connection_close = false;
   30b74:	f885 082d 	strb.w	r0, [r5, #2093]	; 0x82d
			reconnect(dl);
   30b78:	4628      	mov	r0, r5
   30b7a:	f7ff fef5 	bl	30968 <reconnect>
		dl->offset = 0;
   30b7e:	f04f 0b00 	mov.w	fp, #0
   30b82:	f505 57c8 	add.w	r7, r5, #6400	; 0x1900
   30b86:	3710      	adds	r7, #16
			rc = request_send(dl);
   30b88:	4628      	mov	r0, r5
		dl->offset = 0;
   30b8a:	f8c5 b804 	str.w	fp, [r5, #2052]	; 0x804
			dl->http.has_header = false;
   30b8e:	f885 b82c 	strb.w	fp, [r5, #2092]	; 0x82c
			rc = request_send(dl);
   30b92:	f00f fa05 	bl	3ffa0 <request_send>
			if (rc) {
   30b96:	4604      	mov	r4, r0
   30b98:	2800      	cmp	r0, #0
   30b9a:	f43f af18 	beq.w	309ce <download_thread+0x26>
				rc = error_evt_send(dl, ECONNRESET);
   30b9e:	2168      	movs	r1, #104	; 0x68
   30ba0:	4638      	mov	r0, r7
   30ba2:	f00f fa08 	bl	3ffb6 <error_evt_send.isra.0>
				if (rc) {
   30ba6:	4604      	mov	r4, r0
   30ba8:	2800      	cmp	r0, #0
   30baa:	f47f af0c 	bne.w	309c6 <download_thread+0x1e>
				rc = reconnect(dl);
   30bae:	4628      	mov	r0, r5
   30bb0:	f7ff feda 	bl	30968 <reconnect>
				if (rc) {
   30bb4:	4604      	mov	r4, r0
   30bb6:	2800      	cmp	r0, #0
   30bb8:	d0e6      	beq.n	30b88 <download_thread+0x1e0>
   30bba:	e777      	b.n	30aac <download_thread+0x104>
   30bbc:	0004340c 	.word	0x0004340c
   30bc0:	0004339c 	.word	0x0004339c
   30bc4:	0004a3f3 	.word	0x0004a3f3
   30bc8:	0004a405 	.word	0x0004a405
   30bcc:	0004a432 	.word	0x0004a432
   30bd0:	0004a456 	.word	0x0004a456
   30bd4:	0004a470 	.word	0x0004a470
   30bd8:	0004a488 	.word	0x0004a488
   30bdc:	0004a4a6 	.word	0x0004a4a6
   30be0:	00049bee 	.word	0x00049bee
   30be4:	0004a0b4 	.word	0x0004a0b4
   30be8:	0004a3d6 	.word	0x0004a3d6
   30bec:	00044dbf 	.word	0x00044dbf

00030bf0 <download_client_start>:

int download_client_start(struct download_client *client, const char *file,
			  size_t from)
{
   30bf0:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (client == NULL) {
   30bf2:	4604      	mov	r4, r0
   30bf4:	b348      	cbz	r0, 30c4a <download_client_start+0x5a>
		return -EINVAL;
	}

	if (client->fd < 0) {
   30bf6:	6803      	ldr	r3, [r0, #0]
   30bf8:	2b00      	cmp	r3, #0
   30bfa:	db29      	blt.n	30c50 <download_client_start+0x60>
		return -ENOTCONN;
	}

	client->file = file;
	client->file_size = 0;
   30bfc:	2300      	movs	r3, #0
	client->file = file;
   30bfe:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
	client->file_size = 0;
   30c02:	f8c0 3808 	str.w	r3, [r0, #2056]	; 0x808
	client->progress = from;
   30c06:	f8c0 280c 	str.w	r2, [r0, #2060]	; 0x80c

	client->offset = 0;
   30c0a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
	client->http.has_header = false;
   30c0e:	f880 382c 	strb.w	r3, [r0, #2092]	; 0x82c
		if (IS_ENABLED(CONFIG_COAP)) {
			coap_block_init(client, from);
		}
	}

	err = request_send(client);
   30c12:	f00f f9c5 	bl	3ffa0 <request_send>
	if (err) {
   30c16:	4606      	mov	r6, r0
   30c18:	b9a8      	cbnz	r0, 30c46 <download_client_start+0x56>
   30c1a:	4b0f      	ldr	r3, [pc, #60]	; (30c58 <download_client_start+0x68>)
   30c1c:	4d0f      	ldr	r5, [pc, #60]	; (30c5c <download_client_start+0x6c>)
		return err;
	}

	LOG_INF("Downloading: %s [%u]", log_strdup(client->file),
   30c1e:	f8d4 0814 	ldr.w	r0, [r4, #2068]	; 0x814
   30c22:	1aed      	subs	r5, r5, r3
   30c24:	f00c fb7f 	bl	3d326 <log_strdup>
   30c28:	08ed      	lsrs	r5, r5, #3
   30c2a:	01ad      	lsls	r5, r5, #6
   30c2c:	f045 0503 	orr.w	r5, r5, #3
   30c30:	4602      	mov	r2, r0
   30c32:	f8d4 380c 	ldr.w	r3, [r4, #2060]	; 0x80c
   30c36:	4628      	mov	r0, r5
   30c38:	4909      	ldr	r1, [pc, #36]	; (30c60 <download_client_start+0x70>)
   30c3a:	f00c fb61 	bl	3d300 <log_string_sync>
		client->progress);

	/* Let the thread run */
	k_thread_resume(client->tid);
   30c3e:	f8d4 083c 	ldr.w	r0, [r4, #2108]	; 0x83c
	z_impl_k_thread_resume(thread);
   30c42:	f007 fc85 	bl	38550 <z_impl_k_thread_resume>

	return 0;
}
   30c46:	4630      	mov	r0, r6
   30c48:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   30c4a:	f06f 0615 	mvn.w	r6, #21
   30c4e:	e7fa      	b.n	30c46 <download_client_start+0x56>
		return -ENOTCONN;
   30c50:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   30c54:	e7f7      	b.n	30c46 <download_client_start+0x56>
   30c56:	bf00      	nop
   30c58:	0004339c 	.word	0x0004339c
   30c5c:	0004340c 	.word	0x0004340c
   30c60:	0004a4ba 	.word	0x0004a4ba

00030c64 <url_parse_proto>:
	*str = p + strlen(swallow);
	return 0;
}

int url_parse_proto(const char *url, int *proto, int *type)
{
   30c64:	b570      	push	{r4, r5, r6, lr}
   30c66:	460d      	mov	r5, r1
   30c68:	4614      	mov	r4, r2
	if (strncmp(url, "https", 5) == 0) {
   30c6a:	4915      	ldr	r1, [pc, #84]	; (30cc0 <url_parse_proto+0x5c>)
   30c6c:	2205      	movs	r2, #5
{
   30c6e:	4606      	mov	r6, r0
	if (strncmp(url, "https", 5) == 0) {
   30c70:	f011 fa1e 	bl	420b0 <strncmp>
   30c74:	b928      	cbnz	r0, 30c82 <url_parse_proto+0x1e>
		*proto = IPPROTO_TLS_1_2;
   30c76:	f44f 7381 	mov.w	r3, #258	; 0x102
		*type = SOCK_STREAM;
	} else if (strncmp(url, "http", 4) == 0) {
		*proto = IPPROTO_TCP;
   30c7a:	602b      	str	r3, [r5, #0]
		*type = SOCK_STREAM;
   30c7c:	2301      	movs	r3, #1
	} else if (strncmp(url, "coaps", 5) == 0) {
		*proto = IPPROTO_DTLS_1_2;
		*type = SOCK_DGRAM;
	} else if (strncmp(url, "coap", 4) == 0) {
		*proto = IPPROTO_UDP;
		*type = SOCK_DGRAM;
   30c7e:	6023      	str	r3, [r4, #0]
	} else {
		return -EINVAL;
	}
	return 0;
}
   30c80:	bd70      	pop	{r4, r5, r6, pc}
	} else if (strncmp(url, "http", 4) == 0) {
   30c82:	2204      	movs	r2, #4
   30c84:	4630      	mov	r0, r6
   30c86:	490f      	ldr	r1, [pc, #60]	; (30cc4 <url_parse_proto+0x60>)
   30c88:	f011 fa12 	bl	420b0 <strncmp>
   30c8c:	b908      	cbnz	r0, 30c92 <url_parse_proto+0x2e>
		*proto = IPPROTO_TCP;
   30c8e:	2306      	movs	r3, #6
   30c90:	e7f3      	b.n	30c7a <url_parse_proto+0x16>
	} else if (strncmp(url, "coaps", 5) == 0) {
   30c92:	2205      	movs	r2, #5
   30c94:	4630      	mov	r0, r6
   30c96:	490c      	ldr	r1, [pc, #48]	; (30cc8 <url_parse_proto+0x64>)
   30c98:	f011 fa0a 	bl	420b0 <strncmp>
   30c9c:	b920      	cbnz	r0, 30ca8 <url_parse_proto+0x44>
		*proto = IPPROTO_DTLS_1_2;
   30c9e:	f240 1311 	movw	r3, #273	; 0x111
		*proto = IPPROTO_UDP;
   30ca2:	602b      	str	r3, [r5, #0]
		*type = SOCK_DGRAM;
   30ca4:	2302      	movs	r3, #2
   30ca6:	e7ea      	b.n	30c7e <url_parse_proto+0x1a>
	} else if (strncmp(url, "coap", 4) == 0) {
   30ca8:	2204      	movs	r2, #4
   30caa:	4630      	mov	r0, r6
   30cac:	4907      	ldr	r1, [pc, #28]	; (30ccc <url_parse_proto+0x68>)
   30cae:	f011 f9ff 	bl	420b0 <strncmp>
   30cb2:	b908      	cbnz	r0, 30cb8 <url_parse_proto+0x54>
		*proto = IPPROTO_UDP;
   30cb4:	2311      	movs	r3, #17
   30cb6:	e7f4      	b.n	30ca2 <url_parse_proto+0x3e>
		return -EINVAL;
   30cb8:	f06f 0015 	mvn.w	r0, #21
   30cbc:	e7e0      	b.n	30c80 <url_parse_proto+0x1c>
   30cbe:	bf00      	nop
   30cc0:	0004a4cf 	.word	0x0004a4cf
   30cc4:	0004a4d5 	.word	0x0004a4d5
   30cc8:	0004a4da 	.word	0x0004a4da
   30ccc:	0004a4e0 	.word	0x0004a4e0

00030cd0 <url_parse_host>:

int url_parse_host(const char *url, char *host, size_t len)
{
   30cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30cd2:	4604      	mov	r4, r0
	const char *cur;
	const char *end;

	cur = url;
   30cd4:	9001      	str	r0, [sp, #4]
{
   30cd6:	460d      	mov	r5, r1

	(void)swallow(&cur, "://");
   30cd8:	a801      	add	r0, sp, #4
   30cda:	4918      	ldr	r1, [pc, #96]	; (30d3c <url_parse_host+0x6c>)
{
   30cdc:	4616      	mov	r6, r2
	(void)swallow(&cur, "://");
   30cde:	f00f f9a3 	bl	40028 <swallow>

	if (cur[0] == '[') {
   30ce2:	9801      	ldr	r0, [sp, #4]
   30ce4:	7803      	ldrb	r3, [r0, #0]
   30ce6:	2b5b      	cmp	r3, #91	; 0x5b
   30ce8:	d111      	bne.n	30d0e <url_parse_host+0x3e>
		/* literal IPv6 address */
		end = strchr(cur, ']');
   30cea:	215d      	movs	r1, #93	; 0x5d
   30cec:	f011 f9af 	bl	4204e <strchr>

		if (!end) {
   30cf0:	b1f0      	cbz	r0, 30d30 <url_parse_host+0x60>
			return -EINVAL;
		}
		++end;
   30cf2:	3001      	adds	r0, #1
				end = url + strlen(url) + 1;
			}
		}
	}

	if (end - cur + 1 > len) {
   30cf4:	9901      	ldr	r1, [sp, #4]
   30cf6:	1a44      	subs	r4, r0, r1
   30cf8:	1c63      	adds	r3, r4, #1
   30cfa:	42b3      	cmp	r3, r6
   30cfc:	d81b      	bhi.n	30d36 <url_parse_host+0x66>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   30cfe:	4622      	mov	r2, r4
   30d00:	4628      	mov	r0, r5
   30d02:	f010 ffcc 	bl	41c9e <memcpy>
	}

	len = end - cur;

	memcpy(host, cur, len);
	host[len] = '\0';
   30d06:	2000      	movs	r0, #0
   30d08:	5528      	strb	r0, [r5, r4]

	return 0;
}
   30d0a:	b002      	add	sp, #8
   30d0c:	bd70      	pop	{r4, r5, r6, pc}
		end = strchr(cur, ':');
   30d0e:	213a      	movs	r1, #58	; 0x3a
   30d10:	f011 f99d 	bl	4204e <strchr>
		if (!end) {
   30d14:	2800      	cmp	r0, #0
   30d16:	d1ed      	bne.n	30cf4 <url_parse_host+0x24>
			end = strchr(cur, '/');
   30d18:	212f      	movs	r1, #47	; 0x2f
   30d1a:	9801      	ldr	r0, [sp, #4]
   30d1c:	f011 f997 	bl	4204e <strchr>
			if (!end) {
   30d20:	2800      	cmp	r0, #0
   30d22:	d1e7      	bne.n	30cf4 <url_parse_host+0x24>
				end = url + strlen(url) + 1;
   30d24:	4620      	mov	r0, r4
   30d26:	f7ec fa99 	bl	1d25c <strlen>
   30d2a:	1c43      	adds	r3, r0, #1
   30d2c:	18e0      	adds	r0, r4, r3
   30d2e:	e7e1      	b.n	30cf4 <url_parse_host+0x24>
			return -EINVAL;
   30d30:	f06f 0015 	mvn.w	r0, #21
   30d34:	e7e9      	b.n	30d0a <url_parse_host+0x3a>
		return -E2BIG;
   30d36:	f06f 0006 	mvn.w	r0, #6
   30d3a:	e7e6      	b.n	30d0a <url_parse_host+0x3a>
   30d3c:	0004a4e5 	.word	0x0004a4e5

00030d40 <url_parse_port>:

int url_parse_port(const char *url, uint16_t *port)
{
   30d40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   30d42:	460e      	mov	r6, r1
	const char *cur;
	const char *end;
	char aport[8];
	size_t len;

	cur = url;
   30d44:	9001      	str	r0, [sp, #4]

	(void)swallow(&cur, "://");
   30d46:	491b      	ldr	r1, [pc, #108]	; (30db4 <url_parse_port+0x74>)
   30d48:	a801      	add	r0, sp, #4
   30d4a:	f00f f96d 	bl	40028 <swallow>

	if (cur[0] == '[') {
   30d4e:	9b01      	ldr	r3, [sp, #4]
   30d50:	781b      	ldrb	r3, [r3, #0]
   30d52:	2b5b      	cmp	r3, #91	; 0x5b
   30d54:	d103      	bne.n	30d5e <url_parse_port+0x1e>
		/* literal IPv6 address */
		swallow(&cur, "]");
   30d56:	4918      	ldr	r1, [pc, #96]	; (30db8 <url_parse_port+0x78>)
   30d58:	a801      	add	r0, sp, #4
   30d5a:	f00f f965 	bl	40028 <swallow>
	}

	err = swallow(&cur, ":");
   30d5e:	4917      	ldr	r1, [pc, #92]	; (30dbc <url_parse_port+0x7c>)
   30d60:	a801      	add	r0, sp, #4
   30d62:	f00f f961 	bl	40028 <swallow>
	if (err) {
   30d66:	4605      	mov	r5, r0
   30d68:	bb08      	cbnz	r0, 30dae <url_parse_port+0x6e>
		return -EINVAL;
	}

	end = strchr(cur, '/');
   30d6a:	212f      	movs	r1, #47	; 0x2f
   30d6c:	9801      	ldr	r0, [sp, #4]
   30d6e:	f011 f96e 	bl	4204e <strchr>
	if (!end) {
   30d72:	4604      	mov	r4, r0
		len = strlen(cur);
   30d74:	9801      	ldr	r0, [sp, #4]
	if (!end) {
   30d76:	b9c4      	cbnz	r4, 30daa <url_parse_port+0x6a>
		len = strlen(cur);
   30d78:	f7ec fa70 	bl	1d25c <strlen>
   30d7c:	4604      	mov	r4, r0
	} else {
		len = end - cur;
	}

	len = MAX(len, sizeof(aport) - 1);
   30d7e:	2c07      	cmp	r4, #7
   30d80:	bf38      	it	cc
   30d82:	2407      	movcc	r4, #7

	memcpy(aport, cur, len);
   30d84:	2308      	movs	r3, #8
   30d86:	4622      	mov	r2, r4
   30d88:	9901      	ldr	r1, [sp, #4]
   30d8a:	eb0d 0003 	add.w	r0, sp, r3
   30d8e:	f010 ff93 	bl	41cb8 <__memcpy_chk>
	aport[len] = '\0';
   30d92:	ab04      	add	r3, sp, #16
   30d94:	441c      	add	r4, r3
   30d96:	2300      	movs	r3, #0

	*port = atoi(aport);
   30d98:	a802      	add	r0, sp, #8
	aport[len] = '\0';
   30d9a:	f804 3c08 	strb.w	r3, [r4, #-8]
	*port = atoi(aport);
   30d9e:	f010 ff5e 	bl	41c5e <atoi>
   30da2:	8030      	strh	r0, [r6, #0]

	return 0;
}
   30da4:	4628      	mov	r0, r5
   30da6:	b004      	add	sp, #16
   30da8:	bd70      	pop	{r4, r5, r6, pc}
		len = end - cur;
   30daa:	1a24      	subs	r4, r4, r0
   30dac:	e7e7      	b.n	30d7e <url_parse_port+0x3e>
		return -EINVAL;
   30dae:	f06f 0515 	mvn.w	r5, #21
   30db2:	e7f7      	b.n	30da4 <url_parse_port+0x64>
   30db4:	0004a4e5 	.word	0x0004a4e5
   30db8:	00049db9 	.word	0x00049db9
   30dbc:	0004b62b 	.word	0x0004b62b

00030dc0 <url_parse_file>:

int url_parse_file(const char *url, char *file, size_t len)
{
   30dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   30dc2:	460d      	mov	r5, r1
	int err;
	const char *cur;

	cur = url;

	if (strstr(url, "//")) {
   30dc4:	4915      	ldr	r1, [pc, #84]	; (30e1c <url_parse_file+0x5c>)
{
   30dc6:	4614      	mov	r4, r2
	cur = url;
   30dc8:	9001      	str	r0, [sp, #4]
	if (strstr(url, "//")) {
   30dca:	f011 f9a3 	bl	42114 <strstr>
   30dce:	b940      	cbnz	r0, 30de2 <url_parse_file+0x22>
		if (err) {
			return -EINVAL;
		}
	}

	if (strlen(cur) + 1 > len) {
   30dd0:	9801      	ldr	r0, [sp, #4]
   30dd2:	f7ec fa43 	bl	1d25c <strlen>
   30dd6:	3001      	adds	r0, #1
   30dd8:	42a0      	cmp	r0, r4
   30dda:	d912      	bls.n	30e02 <url_parse_file+0x42>
		return -E2BIG;
   30ddc:	f06f 0006 	mvn.w	r0, #6
   30de0:	e006      	b.n	30df0 <url_parse_file+0x30>
		err = swallow(&cur, "://");
   30de2:	490f      	ldr	r1, [pc, #60]	; (30e20 <url_parse_file+0x60>)
   30de4:	a801      	add	r0, sp, #4
   30de6:	f00f f91f 	bl	40028 <swallow>
		if (err) {
   30dea:	b118      	cbz	r0, 30df4 <url_parse_file+0x34>
			return -EINVAL;
   30dec:	f06f 0015 	mvn.w	r0, #21

	memcpy(file, cur, len);
	file[len] = '\0';

	return 0;
}
   30df0:	b003      	add	sp, #12
   30df2:	bd30      	pop	{r4, r5, pc}
		err = swallow(&cur, "/");
   30df4:	490b      	ldr	r1, [pc, #44]	; (30e24 <url_parse_file+0x64>)
   30df6:	a801      	add	r0, sp, #4
   30df8:	f00f f916 	bl	40028 <swallow>
		if (err) {
   30dfc:	2800      	cmp	r0, #0
   30dfe:	d0e7      	beq.n	30dd0 <url_parse_file+0x10>
   30e00:	e7f4      	b.n	30dec <url_parse_file+0x2c>
	len = strlen(cur);
   30e02:	9801      	ldr	r0, [sp, #4]
   30e04:	f7ec fa2a 	bl	1d25c <strlen>
   30e08:	9901      	ldr	r1, [sp, #4]
   30e0a:	4604      	mov	r4, r0
   30e0c:	4602      	mov	r2, r0
   30e0e:	4628      	mov	r0, r5
   30e10:	f010 ff45 	bl	41c9e <memcpy>
	file[len] = '\0';
   30e14:	2300      	movs	r3, #0
	return 0;
   30e16:	4618      	mov	r0, r3
	file[len] = '\0';
   30e18:	552b      	strb	r3, [r5, r4]
	return 0;
   30e1a:	e7e9      	b.n	30df0 <url_parse_file+0x30>
   30e1c:	0004a4e6 	.word	0x0004a4e6
   30e20:	0004a4e5 	.word	0x0004a4e5
   30e24:	0004a4e7 	.word	0x0004a4e7

00030e28 <http_get_request_send>:
int url_parse_host(const char *url, char *host, size_t len);
int url_parse_file(const char *url, char *file, size_t len);
int socket_send(const struct download_client *client, size_t len);

int http_get_request_send(struct download_client *client)
{
   30e28:	b570      	push	{r4, r5, r6, lr}
	int len;
	size_t off;
	char host[HOSTNAME_SIZE];
	char file[FILENAME_SIZE];

	__ASSERT_NO_MSG(client->host);
   30e2a:	f8d0 3810 	ldr.w	r3, [r0, #2064]	; 0x810
{
   30e2e:	4605      	mov	r5, r0
   30e30:	b0c4      	sub	sp, #272	; 0x110
	__ASSERT_NO_MSG(client->host);
   30e32:	b94b      	cbnz	r3, 30e48 <http_get_request_send+0x20>
   30e34:	492c      	ldr	r1, [pc, #176]	; (30ee8 <http_get_request_send+0xc0>)
   30e36:	482d      	ldr	r0, [pc, #180]	; (30eec <http_get_request_send+0xc4>)
   30e38:	232e      	movs	r3, #46	; 0x2e
   30e3a:	4a2d      	ldr	r2, [pc, #180]	; (30ef0 <http_get_request_send+0xc8>)
   30e3c:	f00b ff9b 	bl	3cd76 <printk>
   30e40:	212e      	movs	r1, #46	; 0x2e
   30e42:	482b      	ldr	r0, [pc, #172]	; (30ef0 <http_get_request_send+0xc8>)
   30e44:	f00c fa4b 	bl	3d2de <assert_post_action>
	__ASSERT_NO_MSG(client->file);
   30e48:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
   30e4c:	b94b      	cbnz	r3, 30e62 <http_get_request_send+0x3a>
   30e4e:	4929      	ldr	r1, [pc, #164]	; (30ef4 <http_get_request_send+0xcc>)
   30e50:	4826      	ldr	r0, [pc, #152]	; (30eec <http_get_request_send+0xc4>)
   30e52:	232f      	movs	r3, #47	; 0x2f
   30e54:	4a26      	ldr	r2, [pc, #152]	; (30ef0 <http_get_request_send+0xc8>)
   30e56:	f00b ff8e 	bl	3cd76 <printk>
   30e5a:	212f      	movs	r1, #47	; 0x2f
   30e5c:	4824      	ldr	r0, [pc, #144]	; (30ef0 <http_get_request_send+0xc8>)
   30e5e:	f00c fa3e 	bl	3d2de <assert_post_action>

	err = url_parse_host(client->host, host, sizeof(host));
   30e62:	ae04      	add	r6, sp, #16
   30e64:	2240      	movs	r2, #64	; 0x40
   30e66:	4631      	mov	r1, r6
   30e68:	f8d5 0810 	ldr.w	r0, [r5, #2064]	; 0x810
   30e6c:	f7ff ff30 	bl	30cd0 <url_parse_host>
	if (err) {
   30e70:	4604      	mov	r4, r0
   30e72:	bb90      	cbnz	r0, 30eda <http_get_request_send+0xb2>
		return err;
	}

	err = url_parse_file(client->file, file, sizeof(file));
   30e74:	22c0      	movs	r2, #192	; 0xc0
   30e76:	f8d5 0814 	ldr.w	r0, [r5, #2068]	; 0x814
   30e7a:	a914      	add	r1, sp, #80	; 0x50
   30e7c:	f7ff ffa0 	bl	30dc0 <url_parse_file>
	if (err) {
   30e80:	4604      	mov	r4, r0
   30e82:	bb50      	cbnz	r0, 30eda <http_get_request_send+0xb2>
		return err;
	}

	/* Offset of last byte in range (Content-Range) */
	if (client->config.frag_size_override) {
   30e84:	f8d5 3820 	ldr.w	r3, [r5, #2080]	; 0x820
   30e88:	f8d5 280c 	ldr.w	r2, [r5, #2060]	; 0x80c
   30e8c:	b343      	cbz	r3, 30ee0 <http_get_request_send+0xb8>
		off = client->progress + client->config.frag_size_override - 1;
   30e8e:	4413      	add	r3, r2
   30e90:	3b01      	subs	r3, #1
	} else {
		off = client->progress +
			CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE - 1;
	}

	if (client->file_size != 0) {
   30e92:	f8d5 1808 	ldr.w	r1, [r5, #2056]	; 0x808
   30e96:	b111      	cbz	r1, 30e9e <http_get_request_send+0x76>
		/* Don't request bytes past the end of file */
		off = MIN(off, client->file_size);
   30e98:	428b      	cmp	r3, r1
   30e9a:	bf28      	it	cs
   30e9c:	460b      	movcs	r3, r1
	 * When using HTTP, we request the whole resource to minimize
	 * network usage (only one request/response are sent).
	 */
	if (client->proto == IPPROTO_TLS_1_2
	   || IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_RANGE_REQUESTS)) {
		len = snprintf(client->buf,
   30e9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   30ea2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   30ea6:	4a14      	ldr	r2, [pc, #80]	; (30ef8 <http_get_request_send+0xd0>)
   30ea8:	ab14      	add	r3, sp, #80	; 0x50
   30eaa:	9600      	str	r6, [sp, #0]
   30eac:	1d28      	adds	r0, r5, #4
   30eae:	f00a fb3d 	bl	3b52c <sniprintf>
   30eb2:	4601      	mov	r1, r0

	if (IS_ENABLED(CONFIG_DOWNLOAD_CLIENT_LOG_HEADERS)) {
		LOG_HEXDUMP_DBG(client->buf, len, "HTTP request");
	}

	err = socket_send(client, len);
   30eb4:	4628      	mov	r0, r5
   30eb6:	f00f f88d 	bl	3ffd4 <socket_send>
	if (err) {
   30eba:	4604      	mov	r4, r0
   30ebc:	b168      	cbz	r0, 30eda <http_get_request_send+0xb2>
   30ebe:	4b0f      	ldr	r3, [pc, #60]	; (30efc <http_get_request_send+0xd4>)
   30ec0:	4d0f      	ldr	r5, [pc, #60]	; (30f00 <http_get_request_send+0xd8>)
   30ec2:	1aed      	subs	r5, r5, r3
		LOG_ERR("Failed to send HTTP request, errno %d", errno);
   30ec4:	f00d f909 	bl	3e0da <__errno>
   30ec8:	08ed      	lsrs	r5, r5, #3
   30eca:	01ad      	lsls	r5, r5, #6
   30ecc:	f045 0501 	orr.w	r5, r5, #1
   30ed0:	6802      	ldr	r2, [r0, #0]
   30ed2:	490c      	ldr	r1, [pc, #48]	; (30f04 <http_get_request_send+0xdc>)
   30ed4:	4628      	mov	r0, r5
   30ed6:	f00c fa13 	bl	3d300 <log_string_sync>
		return err;
	}

	return 0;
}
   30eda:	4620      	mov	r0, r4
   30edc:	b044      	add	sp, #272	; 0x110
   30ede:	bd70      	pop	{r4, r5, r6, pc}
		off = client->progress +
   30ee0:	f202 73ff 	addw	r3, r2, #2047	; 0x7ff
   30ee4:	e7d5      	b.n	30e92 <http_get_request_send+0x6a>
   30ee6:	bf00      	nop
   30ee8:	0004a523 	.word	0x0004a523
   30eec:	00044dbf 	.word	0x00044dbf
   30ef0:	0004a4e9 	.word	0x0004a4e9
   30ef4:	0004a530 	.word	0x0004a530
   30ef8:	0004a53d 	.word	0x0004a53d
   30efc:	0004339c 	.word	0x0004339c
   30f00:	0004340c 	.word	0x0004340c
   30f04:	0004a588 	.word	0x0004a588

00030f08 <http_parse>:
{
	int rc;
	size_t hdr_len;

	/* Accumulate buffer offset */
	client->offset += len;
   30f08:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
{
   30f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	client->offset += len;
   30f10:	440b      	add	r3, r1
   30f12:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804

	if (!client->http.has_header) {
   30f16:	f890 382c 	ldrb.w	r3, [r0, #2092]	; 0x82c
{
   30f1a:	4604      	mov	r4, r0
   30f1c:	460f      	mov	r7, r1
	if (!client->http.has_header) {
   30f1e:	2b00      	cmp	r3, #0
   30f20:	d179      	bne.n	31016 <http_parse+0x10e>
	p = strstr(client->buf, "\r\n\r\n");
   30f22:	1d06      	adds	r6, r0, #4
   30f24:	4630      	mov	r0, r6
   30f26:	494b      	ldr	r1, [pc, #300]	; (31054 <http_parse+0x14c>)
   30f28:	f011 f8f4 	bl	42114 <strstr>
	if (!p) {
   30f2c:	4605      	mov	r5, r0
   30f2e:	2800      	cmp	r0, #0
   30f30:	f000 808c 	beq.w	3104c <http_parse+0x144>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   30f34:	4847      	ldr	r0, [pc, #284]	; (31054 <http_parse+0x14c>)
   30f36:	f7ec f991 	bl	1d25c <strlen>
   30f3a:	4405      	add	r5, r0
   30f3c:	4633      	mov	r3, r6
   30f3e:	4628      	mov	r0, r5
		client->buf[i] = tolower(client->buf[i]);
   30f40:	f8df c13c 	ldr.w	ip, [pc, #316]	; 31080 <http_parse+0x178>
	*hdr_len = p + strlen("\r\n\r\n") - client->buf;
   30f44:	eba5 0806 	sub.w	r8, r5, r6
	for (size_t i = 0; i < *hdr_len; i++) {
   30f48:	4298      	cmp	r0, r3
   30f4a:	d112      	bne.n	30f72 <http_parse+0x6a>
	p = strstr(client->buf, "http/1.1 206");
   30f4c:	4630      	mov	r0, r6
   30f4e:	4942      	ldr	r1, [pc, #264]	; (31058 <http_parse+0x150>)
   30f50:	f011 f8e0 	bl	42114 <strstr>
	if (!p) {
   30f54:	b9c0      	cbnz	r0, 30f88 <http_parse+0x80>
   30f56:	4841      	ldr	r0, [pc, #260]	; (3105c <http_parse+0x154>)
   30f58:	4b41      	ldr	r3, [pc, #260]	; (31060 <http_parse+0x158>)
			LOG_ERR("Server did not honor partial content request");
   30f5a:	4942      	ldr	r1, [pc, #264]	; (31064 <http_parse+0x15c>)
   30f5c:	1ac0      	subs	r0, r0, r3
   30f5e:	08c0      	lsrs	r0, r0, #3
   30f60:	0180      	lsls	r0, r0, #6
				LOG_ERR("Server did not send "
   30f62:	f040 0001 	orr.w	r0, r0, #1
   30f66:	f00c f9cb 	bl	3d300 <log_string_sync>
			/* Wait for header */
			return 1;
		}
		if (rc < 0) {
			/* Something is wrong with the header */
			return -1;
   30f6a:	f04f 30ff 	mov.w	r0, #4294967295
			      CONFIG_DOWNLOAD_CLIENT_HTTP_FRAG_SIZE)) {
		return 1;
	}

	return 0;
}
   30f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		client->buf[i] = tolower(client->buf[i]);
   30f72:	781a      	ldrb	r2, [r3, #0]
   30f74:	f812 100c 	ldrb.w	r1, [r2, ip]
   30f78:	f001 0103 	and.w	r1, r1, #3
   30f7c:	2901      	cmp	r1, #1
   30f7e:	bf08      	it	eq
   30f80:	3220      	addeq	r2, #32
   30f82:	f803 2b01 	strb.w	r2, [r3], #1
	for (size_t i = 0; i < *hdr_len; i++) {
   30f86:	e7df      	b.n	30f48 <http_parse+0x40>
	if (client->file_size == 0) {
   30f88:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   30f8c:	b9f3      	cbnz	r3, 30fcc <http_parse+0xc4>
			p = strstr(client->buf, "content-range");
   30f8e:	4630      	mov	r0, r6
   30f90:	4935      	ldr	r1, [pc, #212]	; (31068 <http_parse+0x160>)
   30f92:	f011 f8bf 	bl	42114 <strstr>
			if (!p) {
   30f96:	b930      	cbnz	r0, 30fa6 <http_parse+0x9e>
   30f98:	4830      	ldr	r0, [pc, #192]	; (3105c <http_parse+0x154>)
   30f9a:	4b31      	ldr	r3, [pc, #196]	; (31060 <http_parse+0x158>)
				LOG_ERR("Server did not send "
   30f9c:	4933      	ldr	r1, [pc, #204]	; (3106c <http_parse+0x164>)
   30f9e:	1ac0      	subs	r0, r0, r3
   30fa0:	08c0      	lsrs	r0, r0, #3
   30fa2:	0180      	lsls	r0, r0, #6
   30fa4:	e7dd      	b.n	30f62 <http_parse+0x5a>
			p = strstr(p, "/");
   30fa6:	4932      	ldr	r1, [pc, #200]	; (31070 <http_parse+0x168>)
   30fa8:	f011 f8b4 	bl	42114 <strstr>
			if (!p) {
   30fac:	b930      	cbnz	r0, 30fbc <http_parse+0xb4>
   30fae:	482b      	ldr	r0, [pc, #172]	; (3105c <http_parse+0x154>)
   30fb0:	4b2b      	ldr	r3, [pc, #172]	; (31060 <http_parse+0x158>)
				LOG_ERR("No file size in response");
   30fb2:	4930      	ldr	r1, [pc, #192]	; (31074 <http_parse+0x16c>)
   30fb4:	1ac0      	subs	r0, r0, r3
   30fb6:	08c0      	lsrs	r0, r0, #3
   30fb8:	0180      	lsls	r0, r0, #6
   30fba:	e7d2      	b.n	30f62 <http_parse+0x5a>
		client->file_size += atoi(p + 1);
   30fbc:	3001      	adds	r0, #1
   30fbe:	f010 fe4e 	bl	41c5e <atoi>
   30fc2:	f8d4 3808 	ldr.w	r3, [r4, #2056]	; 0x808
   30fc6:	4418      	add	r0, r3
   30fc8:	f8c4 0808 	str.w	r0, [r4, #2056]	; 0x808
	p = strstr(client->buf, "connection: close");
   30fcc:	4630      	mov	r0, r6
   30fce:	492a      	ldr	r1, [pc, #168]	; (31078 <http_parse+0x170>)
   30fd0:	f011 f8a0 	bl	42114 <strstr>
	if (p) {
   30fd4:	b160      	cbz	r0, 30ff0 <http_parse+0xe8>
   30fd6:	4b22      	ldr	r3, [pc, #136]	; (31060 <http_parse+0x158>)
   30fd8:	4820      	ldr	r0, [pc, #128]	; (3105c <http_parse+0x154>)
		LOG_WRN("Peer closed connection, will re-connect");
   30fda:	4928      	ldr	r1, [pc, #160]	; (3107c <http_parse+0x174>)
   30fdc:	1ac0      	subs	r0, r0, r3
   30fde:	08c0      	lsrs	r0, r0, #3
   30fe0:	0180      	lsls	r0, r0, #6
   30fe2:	f040 0002 	orr.w	r0, r0, #2
   30fe6:	f00c f98b 	bl	3d300 <log_string_sync>
		client->http.connection_close = true;
   30fea:	2301      	movs	r3, #1
   30fec:	f884 382d 	strb.w	r3, [r4, #2093]	; 0x82d
	client->http.has_header = true;
   30ff0:	2301      	movs	r3, #1
		if (client->offset != hdr_len) {
   30ff2:	f8d4 2804 	ldr.w	r2, [r4, #2052]	; 0x804
	client->http.has_header = true;
   30ff6:	f884 382c 	strb.w	r3, [r4, #2092]	; 0x82c
		if (client->offset != hdr_len) {
   30ffa:	4542      	cmp	r2, r8
   30ffc:	d024      	beq.n	31048 <http_parse+0x140>
   30ffe:	4629      	mov	r1, r5
   31000:	4630      	mov	r0, r6
   31002:	eba2 0208 	sub.w	r2, r2, r8
   31006:	f010 fe4a 	bl	41c9e <memcpy>
			client->offset -= hdr_len;
   3100a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
   3100e:	eba3 0308 	sub.w	r3, r3, r8
			client->offset = 0;
   31012:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
	client->progress += MIN(client->offset, len);
   31016:	f8d4 180c 	ldr.w	r1, [r4, #2060]	; 0x80c
   3101a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
	if (client->progress != client->file_size &&
   3101e:	f8d4 2808 	ldr.w	r2, [r4, #2056]	; 0x808
	client->progress += MIN(client->offset, len);
   31022:	429f      	cmp	r7, r3
   31024:	bf94      	ite	ls
   31026:	19cf      	addls	r7, r1, r7
   31028:	18cf      	addhi	r7, r1, r3
	if (client->progress != client->file_size &&
   3102a:	4297      	cmp	r7, r2
	client->progress += MIN(client->offset, len);
   3102c:	f8c4 780c 	str.w	r7, [r4, #2060]	; 0x80c
	if (client->progress != client->file_size &&
   31030:	d00e      	beq.n	31050 <http_parse+0x148>
	    client->offset < (client->config.frag_size_override != 0 ?
   31032:	f8d4 0820 	ldr.w	r0, [r4, #2080]	; 0x820
			      client->config.frag_size_override :
   31036:	2800      	cmp	r0, #0
   31038:	bf08      	it	eq
   3103a:	f44f 6000 	moveq.w	r0, #2048	; 0x800
	if (client->progress != client->file_size &&
   3103e:	4298      	cmp	r0, r3
   31040:	bf94      	ite	ls
   31042:	2000      	movls	r0, #0
   31044:	2001      	movhi	r0, #1
   31046:	e792      	b.n	30f6e <http_parse+0x66>
			client->offset = 0;
   31048:	2300      	movs	r3, #0
   3104a:	e7e2      	b.n	31012 <http_parse+0x10a>
			return 1;
   3104c:	2001      	movs	r0, #1
   3104e:	e78e      	b.n	30f6e <http_parse+0x66>
	return 0;
   31050:	2000      	movs	r0, #0
   31052:	e78c      	b.n	30f6e <http_parse+0x66>
   31054:	0004a583 	.word	0x0004a583
   31058:	0004a5ae 	.word	0x0004a5ae
   3105c:	0004340c 	.word	0x0004340c
   31060:	0004339c 	.word	0x0004339c
   31064:	0004a5bb 	.word	0x0004a5bb
   31068:	0004a5e8 	.word	0x0004a5e8
   3106c:	0004a5f6 	.word	0x0004a5f6
   31070:	0004a4e7 	.word	0x0004a4e7
   31074:	0004a626 	.word	0x0004a626
   31078:	0004a63f 	.word	0x0004a63f
   3107c:	0004a651 	.word	0x0004a651
   31080:	0004c29f 	.word	0x0004c29f

00031084 <download_with_offset>:

	return 0;
}

static void download_with_offset(struct k_work *unused)
{
   31084:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int offset;
	int err = dfu_target_offset_get(&offset);
   31086:	a801      	add	r0, sp, #4
   31088:	f000 fa64 	bl	31554 <dfu_target_offset_get>
	if (err != 0) {
   3108c:	4c16      	ldr	r4, [pc, #88]	; (310e8 <download_with_offset+0x64>)
   3108e:	4b17      	ldr	r3, [pc, #92]	; (310ec <download_with_offset+0x68>)
   31090:	1ae4      	subs	r4, r4, r3
   31092:	08e4      	lsrs	r4, r4, #3
   31094:	4603      	mov	r3, r0
   31096:	01a4      	lsls	r4, r4, #6
   31098:	b138      	cbz	r0, 310aa <download_with_offset+0x26>
		LOG_ERR("%s failed to get offset with error %d", __func__, err);
   3109a:	4a15      	ldr	r2, [pc, #84]	; (310f0 <download_with_offset+0x6c>)
   3109c:	4915      	ldr	r1, [pc, #84]	; (310f4 <download_with_offset+0x70>)
		return;
	}

	err = download_client_start(&dlc, dlc.file, offset);
	if (err != 0) {
		LOG_ERR("%s failed to start download  with error %d", __func__,
   3109e:	f044 0001 	orr.w	r0, r4, #1
   310a2:	f00c f92d 	bl	3d300 <log_string_sync>
			err);
		return;
	}
	LOG_INF("Downloading from offset: 0x%x", offset);
	return;
}
   310a6:	b003      	add	sp, #12
   310a8:	bd30      	pop	{r4, r5, pc}
	err = download_client_connect(&dlc, dlc.host, &dlc.config);
   310aa:	4d13      	ldr	r5, [pc, #76]	; (310f8 <download_with_offset+0x74>)
   310ac:	4628      	mov	r0, r5
   310ae:	f8d5 1810 	ldr.w	r1, [r5, #2064]	; 0x810
   310b2:	f605 0218 	addw	r2, r5, #2072	; 0x818
   310b6:	f7ff f9c5 	bl	30444 <download_client_connect>
	if (err != 0) {
   310ba:	4603      	mov	r3, r0
   310bc:	b110      	cbz	r0, 310c4 <download_with_offset+0x40>
		LOG_ERR("%s failed to connect with error %d", __func__, err);
   310be:	4a0c      	ldr	r2, [pc, #48]	; (310f0 <download_with_offset+0x6c>)
   310c0:	490e      	ldr	r1, [pc, #56]	; (310fc <download_with_offset+0x78>)
   310c2:	e7ec      	b.n	3109e <download_with_offset+0x1a>
	err = download_client_start(&dlc, dlc.file, offset);
   310c4:	4628      	mov	r0, r5
   310c6:	9a01      	ldr	r2, [sp, #4]
   310c8:	f8d5 1814 	ldr.w	r1, [r5, #2068]	; 0x814
   310cc:	f7ff fd90 	bl	30bf0 <download_client_start>
	if (err != 0) {
   310d0:	4603      	mov	r3, r0
   310d2:	b110      	cbz	r0, 310da <download_with_offset+0x56>
		LOG_ERR("%s failed to start download  with error %d", __func__,
   310d4:	4a06      	ldr	r2, [pc, #24]	; (310f0 <download_with_offset+0x6c>)
   310d6:	490a      	ldr	r1, [pc, #40]	; (31100 <download_with_offset+0x7c>)
   310d8:	e7e1      	b.n	3109e <download_with_offset+0x1a>
	LOG_INF("Downloading from offset: 0x%x", offset);
   310da:	9a01      	ldr	r2, [sp, #4]
   310dc:	4909      	ldr	r1, [pc, #36]	; (31104 <download_with_offset+0x80>)
   310de:	f044 0003 	orr.w	r0, r4, #3
   310e2:	f00c f90d 	bl	3d300 <log_string_sync>
   310e6:	e7de      	b.n	310a6 <download_with_offset+0x22>
   310e8:	00043424 	.word	0x00043424
   310ec:	0004339c 	.word	0x0004339c
   310f0:	0004a867 	.word	0x0004a867
   310f4:	0004a679 	.word	0x0004a679
   310f8:	20016cb0 	.word	0x20016cb0
   310fc:	0004a69f 	.word	0x0004a69f
   31100:	0004a6c2 	.word	0x0004a6c2
   31104:	0004a6ed 	.word	0x0004a6ed

00031108 <send_error_evt>:
	const struct fota_download_evt evt = {
   31108:	2300      	movs	r3, #0
{
   3110a:	b507      	push	{r0, r1, r2, lr}
	const struct fota_download_evt evt = {
   3110c:	e9cd 3300 	strd	r3, r3, [sp]
   31110:	2304      	movs	r3, #4
   31112:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   31116:	4b04      	ldr	r3, [pc, #16]	; (31128 <send_error_evt+0x20>)
	const struct fota_download_evt evt = {
   31118:	f88d 0004 	strb.w	r0, [sp, #4]
	callback(&evt);
   3111c:	681b      	ldr	r3, [r3, #0]
   3111e:	4668      	mov	r0, sp
   31120:	4798      	blx	r3
}
   31122:	b003      	add	sp, #12
   31124:	f85d fb04 	ldr.w	pc, [sp], #4
   31128:	20019d4c 	.word	0x20019d4c

0003112c <download_client_callback>:
{
   3112c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (event == NULL) {
   3112e:	4605      	mov	r5, r0
{
   31130:	b085      	sub	sp, #20
	if (event == NULL) {
   31132:	2800      	cmp	r0, #0
   31134:	f000 80fa 	beq.w	3132c <download_client_callback+0x200>
	switch (event->id) {
   31138:	7803      	ldrb	r3, [r0, #0]
   3113a:	2b01      	cmp	r3, #1
   3113c:	f000 80c0 	beq.w	312c0 <download_client_callback+0x194>
   31140:	2b02      	cmp	r3, #2
   31142:	f000 8099 	beq.w	31278 <download_client_callback+0x14c>
   31146:	2b00      	cmp	r3, #0
   31148:	f040 80d0 	bne.w	312ec <download_client_callback+0x1c0>
		if (first_fragment) {
   3114c:	4e79      	ldr	r6, [pc, #484]	; (31334 <download_client_callback+0x208>)
   3114e:	7833      	ldrb	r3, [r6, #0]
   31150:	2b00      	cmp	r3, #0
   31152:	d054      	beq.n	311fe <download_client_callback+0xd2>
			err = download_client_file_size_get(&dlc, &file_size);
   31154:	4f78      	ldr	r7, [pc, #480]	; (31338 <download_client_callback+0x20c>)
   31156:	4879      	ldr	r0, [pc, #484]	; (3133c <download_client_callback+0x210>)
   31158:	4639      	mov	r1, r7
   3115a:	f00e ff5b 	bl	40014 <download_client_file_size_get>
			if (err != 0) {
   3115e:	4604      	mov	r4, r0
   31160:	b108      	cbz	r0, 31166 <download_client_callback+0x3a>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31162:	2001      	movs	r0, #1
   31164:	e06b      	b.n	3123e <download_client_callback+0x112>
			first_fragment = false;
   31166:	7030      	strb	r0, [r6, #0]
			int img_type = dfu_target_img_type(event->fragment.buf,
   31168:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   3116c:	f000 f99a 	bl	314a4 <dfu_target_img_type>
			err = dfu_target_init(img_type, file_size,
   31170:	4a73      	ldr	r2, [pc, #460]	; (31340 <download_client_callback+0x214>)
   31172:	6839      	ldr	r1, [r7, #0]
   31174:	f000 f9bc 	bl	314f0 <dfu_target_init>
			if ((err < 0) && (err != -EBUSY)) {
   31178:	1e04      	subs	r4, r0, #0
   3117a:	da20      	bge.n	311be <download_client_callback+0x92>
   3117c:	f114 0f10 	cmn.w	r4, #16
   31180:	d01d      	beq.n	311be <download_client_callback+0x92>
   31182:	4b70      	ldr	r3, [pc, #448]	; (31344 <download_client_callback+0x218>)
   31184:	4d70      	ldr	r5, [pc, #448]	; (31348 <download_client_callback+0x21c>)
				LOG_ERR("dfu_target_init error %d", err);
   31186:	4622      	mov	r2, r4
   31188:	1aed      	subs	r5, r5, r3
   3118a:	08ed      	lsrs	r5, r5, #3
   3118c:	01ad      	lsls	r5, r5, #6
   3118e:	f045 0501 	orr.w	r5, r5, #1
   31192:	496e      	ldr	r1, [pc, #440]	; (3134c <download_client_callback+0x220>)
   31194:	4628      	mov	r0, r5
   31196:	f00c f8b3 	bl	3d300 <log_string_sync>
				(void)download_client_disconnect(&dlc);
   3119a:	4868      	ldr	r0, [pc, #416]	; (3133c <download_client_callback+0x210>)
   3119c:	f7ff fbba 	bl	30914 <download_client_disconnect>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   311a0:	2001      	movs	r0, #1
   311a2:	f7ff ffb1 	bl	31108 <send_error_evt>
				int res = dfu_target_reset();
   311a6:	f000 fa0f 	bl	315c8 <dfu_target_reset>
				if (res != 0) {
   311aa:	b118      	cbz	r0, 311b4 <download_client_callback+0x88>
					LOG_ERR("Unable to reset DFU target");
   311ac:	4628      	mov	r0, r5
   311ae:	4968      	ldr	r1, [pc, #416]	; (31350 <download_client_callback+0x224>)
   311b0:	f00c f8a6 	bl	3d300 <log_string_sync>
				first_fragment = true;
   311b4:	2301      	movs	r3, #1
   311b6:	7033      	strb	r3, [r6, #0]
}
   311b8:	4620      	mov	r0, r4
   311ba:	b005      	add	sp, #20
   311bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = dfu_target_offset_get(&offset);
   311be:	a801      	add	r0, sp, #4
   311c0:	f000 f9c8 	bl	31554 <dfu_target_offset_get>
			if (err != 0) {
   311c4:	b110      	cbz	r0, 311cc <download_client_callback+0xa0>
				send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   311c6:	2001      	movs	r0, #1
   311c8:	f7ff ff9e 	bl	31108 <send_error_evt>
			if (offset != 0) {
   311cc:	9b01      	ldr	r3, [sp, #4]
   311ce:	b1b3      	cbz	r3, 311fe <download_client_callback+0xd2>
				(void)download_client_disconnect(&dlc);
   311d0:	485a      	ldr	r0, [pc, #360]	; (3133c <download_client_callback+0x210>)
   311d2:	f7ff fb9f 	bl	30914 <download_client_disconnect>
   311d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   311da:	2300      	movs	r3, #0
   311dc:	495d      	ldr	r1, [pc, #372]	; (31354 <download_client_callback+0x228>)
   311de:	485e      	ldr	r0, [pc, #376]	; (31358 <download_client_callback+0x22c>)
   311e0:	f008 fb34 	bl	3984c <k_delayed_work_submit_to_queue>
   311e4:	4b57      	ldr	r3, [pc, #348]	; (31344 <download_client_callback+0x218>)
   311e6:	4858      	ldr	r0, [pc, #352]	; (31348 <download_client_callback+0x21c>)
				LOG_INF("Refuse fragment, restart with offset");
   311e8:	495c      	ldr	r1, [pc, #368]	; (3135c <download_client_callback+0x230>)
   311ea:	1ac0      	subs	r0, r0, r3
   311ec:	08c0      	lsrs	r0, r0, #3
   311ee:	0180      	lsls	r0, r0, #6
   311f0:	f040 0003 	orr.w	r0, r0, #3
   311f4:	f00c f884 	bl	3d300 <log_string_sync>
				return -1;
   311f8:	f04f 34ff 	mov.w	r4, #4294967295
   311fc:	e7dc      	b.n	311b8 <download_client_callback+0x8c>
		err = dfu_target_write(event->fragment.buf,
   311fe:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   31202:	f000 f9b1 	bl	31568 <dfu_target_write>
		if (err != 0) {
   31206:	4604      	mov	r4, r0
   31208:	b1e0      	cbz	r0, 31244 <download_client_callback+0x118>
   3120a:	4b4e      	ldr	r3, [pc, #312]	; (31344 <download_client_callback+0x218>)
   3120c:	4d4e      	ldr	r5, [pc, #312]	; (31348 <download_client_callback+0x21c>)
			LOG_ERR("dfu_target_write error %d", err);
   3120e:	4602      	mov	r2, r0
   31210:	1aed      	subs	r5, r5, r3
   31212:	08ed      	lsrs	r5, r5, #3
   31214:	01ad      	lsls	r5, r5, #6
   31216:	f045 0501 	orr.w	r5, r5, #1
   3121a:	4628      	mov	r0, r5
   3121c:	4950      	ldr	r1, [pc, #320]	; (31360 <download_client_callback+0x234>)
   3121e:	f00c f86f 	bl	3d300 <log_string_sync>
			int res = dfu_target_done(false);
   31222:	2000      	movs	r0, #0
   31224:	f000 f9ac 	bl	31580 <dfu_target_done>
			if (res != 0) {
   31228:	b118      	cbz	r0, 31232 <download_client_callback+0x106>
				LOG_ERR("Unable to free DFU target resources");
   3122a:	4628      	mov	r0, r5
   3122c:	494d      	ldr	r1, [pc, #308]	; (31364 <download_client_callback+0x238>)
   3122e:	f00c f867 	bl	3d300 <log_string_sync>
			first_fragment = true;
   31232:	2301      	movs	r3, #1
			(void) download_client_disconnect(&dlc);
   31234:	4841      	ldr	r0, [pc, #260]	; (3133c <download_client_callback+0x210>)
			first_fragment = true;
   31236:	7033      	strb	r3, [r6, #0]
			(void) download_client_disconnect(&dlc);
   31238:	f7ff fb6c 	bl	30914 <download_client_disconnect>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_INVALID_UPDATE);
   3123c:	2002      	movs	r0, #2
   3123e:	f7ff ff63 	bl	31108 <send_error_evt>
			return err;
   31242:	e7b9      	b.n	311b8 <download_client_callback+0x8c>
		if (IS_ENABLED(CONFIG_FOTA_DOWNLOAD_PROGRESS_EVT) &&
   31244:	7833      	ldrb	r3, [r6, #0]
   31246:	2b00      	cmp	r3, #0
   31248:	d1b6      	bne.n	311b8 <download_client_callback+0x8c>
			err = dfu_target_offset_get(&offset);
   3124a:	a801      	add	r0, sp, #4
   3124c:	f000 f982 	bl	31554 <dfu_target_offset_get>
			if (err != 0) {
   31250:	4604      	mov	r4, r0
   31252:	2800      	cmp	r0, #0
   31254:	d185      	bne.n	31162 <download_client_callback+0x36>
			if (file_size == 0) {
   31256:	4b38      	ldr	r3, [pc, #224]	; (31338 <download_client_callback+0x20c>)
   31258:	681a      	ldr	r2, [r3, #0]
   3125a:	2a00      	cmp	r2, #0
   3125c:	d081      	beq.n	31162 <download_client_callback+0x36>
			send_progress((offset * 100) / file_size);
   3125e:	2364      	movs	r3, #100	; 0x64
   31260:	9901      	ldr	r1, [sp, #4]
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   31262:	f88d 0008 	strb.w	r0, [sp, #8]
			send_progress((offset * 100) / file_size);
   31266:	434b      	muls	r3, r1
   31268:	fbb3 f3f2 	udiv	r3, r3, r2
	const struct fota_download_evt evt = { .id = FOTA_DOWNLOAD_EVT_PROGRESS,
   3126c:	9303      	str	r3, [sp, #12]
	callback(&evt);
   3126e:	4b3e      	ldr	r3, [pc, #248]	; (31368 <download_client_callback+0x23c>)
   31270:	a802      	add	r0, sp, #8
   31272:	681b      	ldr	r3, [r3, #0]
   31274:	4798      	blx	r3
}
   31276:	e79f      	b.n	311b8 <download_client_callback+0x8c>
		err = dfu_target_done(true);
   31278:	2001      	movs	r0, #1
   3127a:	f000 f981 	bl	31580 <dfu_target_done>
		if (err != 0) {
   3127e:	4604      	mov	r4, r0
   31280:	b158      	cbz	r0, 3129a <download_client_callback+0x16e>
   31282:	4b30      	ldr	r3, [pc, #192]	; (31344 <download_client_callback+0x218>)
   31284:	4830      	ldr	r0, [pc, #192]	; (31348 <download_client_callback+0x21c>)
			LOG_ERR("dfu_target_done error: %d", err);
   31286:	4622      	mov	r2, r4
   31288:	1ac0      	subs	r0, r0, r3
   3128a:	08c0      	lsrs	r0, r0, #3
   3128c:	0180      	lsls	r0, r0, #6
   3128e:	4937      	ldr	r1, [pc, #220]	; (3136c <download_client_callback+0x240>)
   31290:	f040 0001 	orr.w	r0, r0, #1
   31294:	f00c f834 	bl	3d300 <log_string_sync>
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31298:	e763      	b.n	31162 <download_client_callback+0x36>
		err = download_client_disconnect(&dlc);
   3129a:	4828      	ldr	r0, [pc, #160]	; (3133c <download_client_callback+0x210>)
   3129c:	f7ff fb3a 	bl	30914 <download_client_disconnect>
		if (err != 0) {
   312a0:	4604      	mov	r4, r0
   312a2:	2800      	cmp	r0, #0
   312a4:	f47f af5d 	bne.w	31162 <download_client_callback+0x36>
	const struct fota_download_evt evt = {
   312a8:	2501      	movs	r5, #1
	callback(&evt);
   312aa:	4b2f      	ldr	r3, [pc, #188]	; (31368 <download_client_callback+0x23c>)
	const struct fota_download_evt evt = {
   312ac:	e9cd 0002 	strd	r0, r0, [sp, #8]
	callback(&evt);
   312b0:	681b      	ldr	r3, [r3, #0]
	const struct fota_download_evt evt = {
   312b2:	f88d 5008 	strb.w	r5, [sp, #8]
	callback(&evt);
   312b6:	a802      	add	r0, sp, #8
   312b8:	4798      	blx	r3
		first_fragment = true;
   312ba:	4b1e      	ldr	r3, [pc, #120]	; (31334 <download_client_callback+0x208>)
   312bc:	701d      	strb	r5, [r3, #0]
		break;
   312be:	e77b      	b.n	311b8 <download_client_callback+0x8c>
		if ((socket_retries_left) && ((event->error == -ENOTCONN) ||
   312c0:	4e2b      	ldr	r6, [pc, #172]	; (31370 <download_client_callback+0x244>)
   312c2:	4c21      	ldr	r4, [pc, #132]	; (31348 <download_client_callback+0x21c>)
   312c4:	6832      	ldr	r2, [r6, #0]
   312c6:	4f1f      	ldr	r7, [pc, #124]	; (31344 <download_client_callback+0x218>)
   312c8:	b192      	cbz	r2, 312f0 <download_client_callback+0x1c4>
   312ca:	6843      	ldr	r3, [r0, #4]
   312cc:	f113 0f80 	cmn.w	r3, #128	; 0x80
   312d0:	d001      	beq.n	312d6 <download_client_callback+0x1aa>
   312d2:	3368      	adds	r3, #104	; 0x68
   312d4:	d10c      	bne.n	312f0 <download_client_callback+0x1c4>
   312d6:	1be0      	subs	r0, r4, r7
   312d8:	08c0      	lsrs	r0, r0, #3
			LOG_WRN("Download socket error. %d retries left...",
   312da:	0180      	lsls	r0, r0, #6
   312dc:	4925      	ldr	r1, [pc, #148]	; (31374 <download_client_callback+0x248>)
   312de:	f040 0002 	orr.w	r0, r0, #2
   312e2:	f00c f80d 	bl	3d300 <log_string_sync>
			socket_retries_left--;
   312e6:	6833      	ldr	r3, [r6, #0]
   312e8:	3b01      	subs	r3, #1
   312ea:	6033      	str	r3, [r6, #0]
	switch (event->id) {
   312ec:	2400      	movs	r4, #0
   312ee:	e763      	b.n	311b8 <download_client_callback+0x8c>
   312f0:	1be4      	subs	r4, r4, r7
   312f2:	08e4      	lsrs	r4, r4, #3
			LOG_ERR("Download client error");
   312f4:	01a4      	lsls	r4, r4, #6
			download_client_disconnect(&dlc);
   312f6:	4811      	ldr	r0, [pc, #68]	; (3133c <download_client_callback+0x210>)
			LOG_ERR("Download client error");
   312f8:	f044 0401 	orr.w	r4, r4, #1
			download_client_disconnect(&dlc);
   312fc:	f7ff fb0a 	bl	30914 <download_client_disconnect>
			LOG_ERR("Download client error");
   31300:	4620      	mov	r0, r4
   31302:	491d      	ldr	r1, [pc, #116]	; (31378 <download_client_callback+0x24c>)
   31304:	f00b fffc 	bl	3d300 <log_string_sync>
			err = dfu_target_done(false);
   31308:	2000      	movs	r0, #0
   3130a:	f000 f939 	bl	31580 <dfu_target_done>
			if (err == -EACCES) {
   3130e:	f110 0f0d 	cmn.w	r0, #13
   31312:	d004      	beq.n	3131e <download_client_callback+0x1f2>
			} else if (err != 0) {
   31314:	b118      	cbz	r0, 3131e <download_client_callback+0x1f2>
				LOG_ERR("Unable to deinitialze resources "
   31316:	4620      	mov	r0, r4
   31318:	4918      	ldr	r1, [pc, #96]	; (3137c <download_client_callback+0x250>)
   3131a:	f00b fff1 	bl	3d300 <log_string_sync>
			first_fragment = true;
   3131e:	2001      	movs	r0, #1
   31320:	4b04      	ldr	r3, [pc, #16]	; (31334 <download_client_callback+0x208>)
   31322:	7018      	strb	r0, [r3, #0]
			send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31324:	f7ff fef0 	bl	31108 <send_error_evt>
			return event->error;
   31328:	686c      	ldr	r4, [r5, #4]
   3132a:	e745      	b.n	311b8 <download_client_callback+0x8c>
		return -EINVAL;
   3132c:	f06f 0415 	mvn.w	r4, #21
   31330:	e742      	b.n	311b8 <download_client_callback+0x8c>
   31332:	bf00      	nop
   31334:	20015918 	.word	0x20015918
   31338:	20019d50 	.word	0x20019d50
   3133c:	20016cb0 	.word	0x20016cb0
   31340:	00031381 	.word	0x00031381
   31344:	0004339c 	.word	0x0004339c
   31348:	00043424 	.word	0x00043424
   3134c:	0004a70b 	.word	0x0004a70b
   31350:	0004a724 	.word	0x0004a724
   31354:	200185c8 	.word	0x200185c8
   31358:	20018af0 	.word	0x20018af0
   3135c:	0004a73f 	.word	0x0004a73f
   31360:	0004a764 	.word	0x0004a764
   31364:	0004a77e 	.word	0x0004a77e
   31368:	20019d4c 	.word	0x20019d4c
   3136c:	0004a7a2 	.word	0x0004a7a2
   31370:	20019d54 	.word	0x20019d54
   31374:	0004a7bc 	.word	0x0004a7bc
   31378:	0004a7e6 	.word	0x0004a7e6
   3137c:	0004a7fc 	.word	0x0004a7fc

00031380 <dfu_target_callback_handler>:
{
   31380:	b507      	push	{r0, r1, r2, lr}
	switch (evt) {
   31382:	b128      	cbz	r0, 31390 <dfu_target_callback_handler+0x10>
   31384:	2801      	cmp	r0, #1
   31386:	d00f      	beq.n	313a8 <dfu_target_callback_handler+0x28>
		send_error_evt(FOTA_DOWNLOAD_ERROR_CAUSE_DOWNLOAD_FAILED);
   31388:	2001      	movs	r0, #1
   3138a:	f7ff febd 	bl	31108 <send_error_evt>
}
   3138e:	e008      	b.n	313a2 <dfu_target_callback_handler+0x22>
	const struct fota_download_evt evt = {
   31390:	2302      	movs	r3, #2
   31392:	e9cd 0000 	strd	r0, r0, [sp]
   31396:	f88d 3000 	strb.w	r3, [sp]
	callback(&evt);
   3139a:	4b06      	ldr	r3, [pc, #24]	; (313b4 <dfu_target_callback_handler+0x34>)
   3139c:	4668      	mov	r0, sp
   3139e:	681b      	ldr	r3, [r3, #0]
   313a0:	4798      	blx	r3
}
   313a2:	b003      	add	sp, #12
   313a4:	f85d fb04 	ldr.w	pc, [sp], #4
	const struct fota_download_evt evt = {
   313a8:	2300      	movs	r3, #0
   313aa:	e9cd 3300 	strd	r3, r3, [sp]
   313ae:	2303      	movs	r3, #3
   313b0:	e7f1      	b.n	31396 <dfu_target_callback_handler+0x16>
   313b2:	bf00      	nop
   313b4:	20019d4c 	.word	0x20019d4c

000313b8 <fota_download_start>:

int fota_download_start(const char *host, const char *file, int sec_tag,
			const char *apn, size_t fragment_size)
{
   313b8:	b530      	push	{r4, r5, lr}
   313ba:	b085      	sub	sp, #20
	 */
	static char file_buf[FILE_BUF_LEN];
	const char *file_buf_ptr = file_buf;
	int err = -1;

	struct download_client_cfg config = {
   313bc:	e9cd 2300 	strd	r2, r3, [sp]
		.sec_tag = sec_tag,
		.apn = apn,
		.frag_size_override = fragment_size,
		.set_tls_hostname = (sec_tag != -1),
   313c0:	3201      	adds	r2, #1
   313c2:	bf18      	it	ne
   313c4:	2201      	movne	r2, #1
	struct download_client_cfg config = {
   313c6:	9b08      	ldr	r3, [sp, #32]
	};

	if (host == NULL || file == NULL || callback == NULL) {
   313c8:	4604      	mov	r4, r0
	struct download_client_cfg config = {
   313ca:	9302      	str	r3, [sp, #8]
		.set_tls_hostname = (sec_tag != -1),
   313cc:	f88d 200c 	strb.w	r2, [sp, #12]
	if (host == NULL || file == NULL || callback == NULL) {
   313d0:	b1f8      	cbz	r0, 31412 <fota_download_start+0x5a>
   313d2:	b1f1      	cbz	r1, 31412 <fota_download_start+0x5a>
   313d4:	4b10      	ldr	r3, [pc, #64]	; (31418 <fota_download_start+0x60>)
   313d6:	681b      	ldr	r3, [r3, #0]
   313d8:	b1db      	cbz	r3, 31412 <fota_download_start+0x5a>
		return -EINVAL;
	}

	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   313da:	2202      	movs	r2, #2
   313dc:	4b0f      	ldr	r3, [pc, #60]	; (3141c <fota_download_start+0x64>)

	strncpy(file_buf, file, sizeof(file_buf));
   313de:	4810      	ldr	r0, [pc, #64]	; (31420 <fota_download_start+0x68>)
	socket_retries_left = CONFIG_FOTA_SOCKET_RETRIES;
   313e0:	601a      	str	r2, [r3, #0]
	strncpy(file_buf, file, sizeof(file_buf));
   313e2:	f240 1281 	movw	r2, #385	; 0x181
   313e6:	f010 fe75 	bl	420d4 <strncpy>
		LOG_INF("B1 update, selected file:\n%s", update);
		file_buf_ptr = update;
	}
#endif /* PM_S1_ADDRESS */

	err = download_client_connect(&dlc, host, &config);
   313ea:	4621      	mov	r1, r4
   313ec:	466a      	mov	r2, sp
   313ee:	480d      	ldr	r0, [pc, #52]	; (31424 <fota_download_start+0x6c>)
   313f0:	f7ff f828 	bl	30444 <download_client_connect>
	if (err != 0) {
   313f4:	4604      	mov	r4, r0
   313f6:	b948      	cbnz	r0, 3140c <fota_download_start+0x54>
		return err;
	}

	err = download_client_start(&dlc, file_buf_ptr, 0);
   313f8:	4602      	mov	r2, r0
   313fa:	4909      	ldr	r1, [pc, #36]	; (31420 <fota_download_start+0x68>)
   313fc:	4809      	ldr	r0, [pc, #36]	; (31424 <fota_download_start+0x6c>)
   313fe:	f7ff fbf7 	bl	30bf0 <download_client_start>
	if (err != 0) {
   31402:	4604      	mov	r4, r0
   31404:	b110      	cbz	r0, 3140c <fota_download_start+0x54>
		download_client_disconnect(&dlc);
   31406:	4807      	ldr	r0, [pc, #28]	; (31424 <fota_download_start+0x6c>)
   31408:	f7ff fa84 	bl	30914 <download_client_disconnect>
		return err;
	}

	return 0;
}
   3140c:	4620      	mov	r0, r4
   3140e:	b005      	add	sp, #20
   31410:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   31412:	f06f 0415 	mvn.w	r4, #21
   31416:	e7f9      	b.n	3140c <fota_download_start+0x54>
   31418:	20019d4c 	.word	0x20019d4c
   3141c:	20019d54 	.word	0x20019d54
   31420:	20020883 	.word	0x20020883
   31424:	20016cb0 	.word	0x20016cb0

00031428 <fota_download_init>:

int fota_download_init(fota_download_callback_t client_callback)
{
   31428:	b510      	push	{r4, lr}
	if (client_callback == NULL) {
   3142a:	b320      	cbz	r0, 31476 <fota_download_init+0x4e>
		return -EINVAL;
	}

	int err;

	callback = client_callback;
   3142c:	4b13      	ldr	r3, [pc, #76]	; (3147c <fota_download_init+0x54>)

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	/* Set the required buffer for MCUboot targets */
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   3142e:	f44f 7100 	mov.w	r1, #512	; 0x200
	callback = client_callback;
   31432:	6018      	str	r0, [r3, #0]
	err = dfu_target_mcuboot_set_buf(mcuboot_buf, sizeof(mcuboot_buf));
   31434:	4812      	ldr	r0, [pc, #72]	; (31480 <fota_download_init+0x58>)
   31436:	f000 fba7 	bl	31b88 <dfu_target_mcuboot_set_buf>
	if (err) {
   3143a:	4604      	mov	r4, r0
   3143c:	b168      	cbz	r0, 3145a <fota_download_init+0x32>
   3143e:	4b11      	ldr	r3, [pc, #68]	; (31484 <fota_download_init+0x5c>)
   31440:	4811      	ldr	r0, [pc, #68]	; (31488 <fota_download_init+0x60>)
		LOG_ERR("%s failed to set MCUboot flash buffer %d",
   31442:	4a12      	ldr	r2, [pc, #72]	; (3148c <fota_download_init+0x64>)
   31444:	1ac0      	subs	r0, r0, r3
   31446:	08c0      	lsrs	r0, r0, #3
   31448:	0180      	lsls	r0, r0, #6
   3144a:	4623      	mov	r3, r4
   3144c:	4910      	ldr	r1, [pc, #64]	; (31490 <fota_download_init+0x68>)
   3144e:	f040 0001 	orr.w	r0, r0, #1
   31452:	f00b ff55 	bl	3d300 <log_string_sync>
	if (err != 0) {
		return err;
	}

	return 0;
}
   31456:	4620      	mov	r0, r4
   31458:	bd10      	pop	{r4, pc}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   3145a:	4b0e      	ldr	r3, [pc, #56]	; (31494 <fota_download_init+0x6c>)
   3145c:	4601      	mov	r1, r0
   3145e:	2230      	movs	r2, #48	; 0x30
   31460:	4618      	mov	r0, r3
   31462:	f010 fc3c 	bl	41cde <memset>
   31466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3146a:	4a0b      	ldr	r2, [pc, #44]	; (31498 <fota_download_init+0x70>)
	err = download_client_init(&dlc, download_client_callback);
   3146c:	490b      	ldr	r1, [pc, #44]	; (3149c <fota_download_init+0x74>)
   3146e:	6042      	str	r2, [r0, #4]
   31470:	480b      	ldr	r0, [pc, #44]	; (314a0 <fota_download_init+0x78>)
   31472:	f7fe bfb9 	b.w	303e8 <download_client_init>
		return -EINVAL;
   31476:	f06f 0415 	mvn.w	r4, #21
   3147a:	e7ec      	b.n	31456 <fota_download_init+0x2e>
   3147c:	20019d4c 	.word	0x20019d4c
   31480:	20020a04 	.word	0x20020a04
   31484:	0004339c 	.word	0x0004339c
   31488:	00043424 	.word	0x00043424
   3148c:	0004a87c 	.word	0x0004a87c
   31490:	0004a830 	.word	0x0004a830
   31494:	200185c8 	.word	0x200185c8
   31498:	00031085 	.word	0x00031085
   3149c:	0003112d 	.word	0x0003112d
   314a0:	20016cb0 	.word	0x20016cb0

000314a4 <dfu_target_img_type>:

static const struct dfu_target *current_target;

int dfu_target_img_type(const void *const buf, size_t len)
{
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   314a4:	291f      	cmp	r1, #31
{
   314a6:	b510      	push	{r4, lr}
   314a8:	4604      	mov	r4, r0
	if (len < MIN_SIZE_IDENTIFY_BUF) {
   314aa:	d913      	bls.n	314d4 <dfu_target_img_type+0x30>
		return -EAGAIN;
	}
#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (dfu_target_mcuboot_identify(buf)) {
   314ac:	f000 fb64 	bl	31b78 <dfu_target_mcuboot_identify>
   314b0:	b998      	cbnz	r0, 314da <dfu_target_img_type+0x36>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (dfu_target_modem_delta_identify(buf)) {
   314b2:	4620      	mov	r0, r4
   314b4:	f000 f9ce 	bl	31854 <dfu_target_modem_delta_identify>
   314b8:	b988      	cbnz	r0, 314de <dfu_target_img_type+0x3a>
   314ba:	4b0a      	ldr	r3, [pc, #40]	; (314e4 <dfu_target_img_type+0x40>)
   314bc:	480a      	ldr	r0, [pc, #40]	; (314e8 <dfu_target_img_type+0x44>)
#ifdef CONFIG_DFU_TARGET_FULL_MODEM
	if (dfu_target_full_modem_identify(buf)) {
		return DFU_TARGET_IMAGE_TYPE_FULL_MODEM;
	}
#endif
	LOG_ERR("No supported image type found");
   314be:	490b      	ldr	r1, [pc, #44]	; (314ec <dfu_target_img_type+0x48>)
   314c0:	1ac0      	subs	r0, r0, r3
   314c2:	08c0      	lsrs	r0, r0, #3
   314c4:	0180      	lsls	r0, r0, #6
   314c6:	f040 0001 	orr.w	r0, r0, #1
   314ca:	f00b ff19 	bl	3d300 <log_string_sync>
	return -ENOTSUP;
   314ce:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   314d2:	bd10      	pop	{r4, pc}
		return -EAGAIN;
   314d4:	f06f 000a 	mvn.w	r0, #10
   314d8:	e7fb      	b.n	314d2 <dfu_target_img_type+0x2e>
		return DFU_TARGET_IMAGE_TYPE_MCUBOOT;
   314da:	2001      	movs	r0, #1
   314dc:	e7f9      	b.n	314d2 <dfu_target_img_type+0x2e>
		return DFU_TARGET_IMAGE_TYPE_MODEM_DELTA;
   314de:	2002      	movs	r0, #2
   314e0:	e7f7      	b.n	314d2 <dfu_target_img_type+0x2e>
   314e2:	bf00      	nop
   314e4:	0004339c 	.word	0x0004339c
   314e8:	000433e4 	.word	0x000433e4
   314ec:	0004a88f 	.word	0x0004a88f

000314f0 <dfu_target_init>:

int dfu_target_init(int img_type, size_t file_size, dfu_target_callback_t cb)
{
   314f0:	4603      	mov	r3, r0
	const struct dfu_target *new_target = NULL;

#ifdef CONFIG_DFU_TARGET_MCUBOOT
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   314f2:	2b01      	cmp	r3, #1
{
   314f4:	4608      	mov	r0, r1
   314f6:	b570      	push	{r4, r5, r6, lr}
   314f8:	4611      	mov	r1, r2
	if (img_type == DFU_TARGET_IMAGE_TYPE_MCUBOOT) {
   314fa:	d00e      	beq.n	3151a <dfu_target_init+0x2a>
		new_target = &dfu_target_mcuboot;
	}
#endif
#ifdef CONFIG_DFU_TARGET_MODEM_DELTA
	if (img_type == DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   314fc:	2b02      	cmp	r3, #2
   314fe:	d018      	beq.n	31532 <dfu_target_init+0x42>
   31500:	4b0e      	ldr	r3, [pc, #56]	; (3153c <dfu_target_init+0x4c>)
   31502:	480f      	ldr	r0, [pc, #60]	; (31540 <dfu_target_init+0x50>)
	if (img_type == DFU_TARGET_IMAGE_TYPE_FULL_MODEM) {
		new_target = &dfu_target_full_modem;
	}
#endif
	if (new_target == NULL) {
		LOG_ERR("Unknown image type");
   31504:	490f      	ldr	r1, [pc, #60]	; (31544 <dfu_target_init+0x54>)
   31506:	1ac0      	subs	r0, r0, r3
   31508:	08c0      	lsrs	r0, r0, #3
   3150a:	0180      	lsls	r0, r0, #6
   3150c:	f040 0001 	orr.w	r0, r0, #1
   31510:	f00b fef6 	bl	3d300 <log_string_sync>
		return -ENOTSUP;
   31514:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	current_target = new_target;

	return current_target->init(file_size, cb);
}
   31518:	bd70      	pop	{r4, r5, r6, pc}
		new_target = &dfu_target_mcuboot;
   3151a:	4c0b      	ldr	r4, [pc, #44]	; (31548 <dfu_target_init+0x58>)
	if (new_target == current_target
   3151c:	4d0b      	ldr	r5, [pc, #44]	; (3154c <dfu_target_init+0x5c>)
   3151e:	682a      	ldr	r2, [r5, #0]
   31520:	42a2      	cmp	r2, r4
   31522:	d101      	bne.n	31528 <dfu_target_init+0x38>
	   && img_type != DFU_TARGET_IMAGE_TYPE_MODEM_DELTA) {
   31524:	2b02      	cmp	r3, #2
   31526:	d106      	bne.n	31536 <dfu_target_init+0x46>
	return current_target->init(file_size, cb);
   31528:	6823      	ldr	r3, [r4, #0]
	current_target = new_target;
   3152a:	602c      	str	r4, [r5, #0]
}
   3152c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return current_target->init(file_size, cb);
   31530:	4718      	bx	r3
		new_target = &dfu_target_modem_delta;
   31532:	4c07      	ldr	r4, [pc, #28]	; (31550 <dfu_target_init+0x60>)
   31534:	e7f2      	b.n	3151c <dfu_target_init+0x2c>
		return 0;
   31536:	2000      	movs	r0, #0
   31538:	e7ee      	b.n	31518 <dfu_target_init+0x28>
   3153a:	bf00      	nop
   3153c:	0004339c 	.word	0x0004339c
   31540:	000433e4 	.word	0x000433e4
   31544:	0004a8ad 	.word	0x0004a8ad
   31548:	00043ea4 	.word	0x00043ea4
   3154c:	20019d58 	.word	0x20019d58
   31550:	00043eb4 	.word	0x00043eb4

00031554 <dfu_target_offset_get>:

int dfu_target_offset_get(size_t *offset)
{
	if (current_target == NULL) {
   31554:	4b03      	ldr	r3, [pc, #12]	; (31564 <dfu_target_offset_get+0x10>)
   31556:	681b      	ldr	r3, [r3, #0]
   31558:	b10b      	cbz	r3, 3155e <dfu_target_offset_get+0xa>
		return -EACCES;
	}

	return current_target->offset_get(offset);
   3155a:	685b      	ldr	r3, [r3, #4]
   3155c:	4718      	bx	r3
}
   3155e:	f06f 000c 	mvn.w	r0, #12
   31562:	4770      	bx	lr
   31564:	20019d58 	.word	0x20019d58

00031568 <dfu_target_write>:

int dfu_target_write(const void *const buf, size_t len)
{
	if (current_target == NULL || buf == NULL) {
   31568:	4a04      	ldr	r2, [pc, #16]	; (3157c <dfu_target_write+0x14>)
   3156a:	6812      	ldr	r2, [r2, #0]
   3156c:	b112      	cbz	r2, 31574 <dfu_target_write+0xc>
   3156e:	b108      	cbz	r0, 31574 <dfu_target_write+0xc>
		return -EACCES;
	}

	return current_target->write(buf, len);
   31570:	6893      	ldr	r3, [r2, #8]
   31572:	4718      	bx	r3
}
   31574:	f06f 000c 	mvn.w	r0, #12
   31578:	4770      	bx	lr
   3157a:	bf00      	nop
   3157c:	20019d58 	.word	0x20019d58

00031580 <dfu_target_done>:

int dfu_target_done(bool successful)
{
   31580:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (current_target == NULL) {
   31582:	4e0d      	ldr	r6, [pc, #52]	; (315b8 <dfu_target_done+0x38>)
{
   31584:	4605      	mov	r5, r0
	if (current_target == NULL) {
   31586:	6833      	ldr	r3, [r6, #0]
   31588:	b19b      	cbz	r3, 315b2 <dfu_target_done+0x32>
		return -EACCES;
	}

	err = current_target->done(successful);
   3158a:	68db      	ldr	r3, [r3, #12]
   3158c:	4798      	blx	r3
	if (err != 0) {
   3158e:	4604      	mov	r4, r0
   31590:	b158      	cbz	r0, 315aa <dfu_target_done+0x2a>
   31592:	480a      	ldr	r0, [pc, #40]	; (315bc <dfu_target_done+0x3c>)
   31594:	4b0a      	ldr	r3, [pc, #40]	; (315c0 <dfu_target_done+0x40>)
		LOG_ERR("Unable to clean up dfu_target");
   31596:	490b      	ldr	r1, [pc, #44]	; (315c4 <dfu_target_done+0x44>)
   31598:	1a1b      	subs	r3, r3, r0
   3159a:	08db      	lsrs	r3, r3, #3
   3159c:	019b      	lsls	r3, r3, #6
   3159e:	f043 0001 	orr.w	r0, r3, #1
   315a2:	f00b fead 	bl	3d300 <log_string_sync>
	if (successful) {
		current_target = NULL;
	}

	return 0;
}
   315a6:	4620      	mov	r0, r4
   315a8:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   315aa:	2d00      	cmp	r5, #0
   315ac:	d0fb      	beq.n	315a6 <dfu_target_done+0x26>
		current_target = NULL;
   315ae:	6030      	str	r0, [r6, #0]
   315b0:	e7f9      	b.n	315a6 <dfu_target_done+0x26>
		return -EACCES;
   315b2:	f06f 040c 	mvn.w	r4, #12
   315b6:	e7f6      	b.n	315a6 <dfu_target_done+0x26>
   315b8:	20019d58 	.word	0x20019d58
   315bc:	0004339c 	.word	0x0004339c
   315c0:	000433e4 	.word	0x000433e4
   315c4:	0004a8c0 	.word	0x0004a8c0

000315c8 <dfu_target_reset>:

int dfu_target_reset(void)
{
   315c8:	b538      	push	{r3, r4, r5, lr}
	if (current_target != NULL) {
   315ca:	4d0b      	ldr	r5, [pc, #44]	; (315f8 <dfu_target_reset+0x30>)
   315cc:	682a      	ldr	r2, [r5, #0]
   315ce:	b182      	cbz	r2, 315f2 <dfu_target_reset+0x2a>
		int err = current_target->done(false);
   315d0:	2000      	movs	r0, #0
   315d2:	68d3      	ldr	r3, [r2, #12]
   315d4:	4798      	blx	r3

		if (err != 0) {
   315d6:	4604      	mov	r4, r0
   315d8:	b158      	cbz	r0, 315f2 <dfu_target_reset+0x2a>
   315da:	4808      	ldr	r0, [pc, #32]	; (315fc <dfu_target_reset+0x34>)
   315dc:	4b08      	ldr	r3, [pc, #32]	; (31600 <dfu_target_reset+0x38>)
			LOG_ERR("Unable to clean up dfu_target");
   315de:	4909      	ldr	r1, [pc, #36]	; (31604 <dfu_target_reset+0x3c>)
   315e0:	1ac0      	subs	r0, r0, r3
   315e2:	08c0      	lsrs	r0, r0, #3
   315e4:	0180      	lsls	r0, r0, #6
   315e6:	f040 0001 	orr.w	r0, r0, #1
   315ea:	f00b fe89 	bl	3d300 <log_string_sync>
			return err;
		}
	}
	current_target = NULL;
	return 0;
}
   315ee:	4620      	mov	r0, r4
   315f0:	bd38      	pop	{r3, r4, r5, pc}
	current_target = NULL;
   315f2:	2400      	movs	r4, #0
   315f4:	602c      	str	r4, [r5, #0]
	return 0;
   315f6:	e7fa      	b.n	315ee <dfu_target_reset+0x26>
   315f8:	20019d58 	.word	0x20019d58
   315fc:	000433e4 	.word	0x000433e4
   31600:	0004339c 	.word	0x0004339c
   31604:	0004a8c0 	.word	0x0004a8c0

00031608 <dfu_target_stream_get_stream>:
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

struct stream_flash_ctx *dfu_target_stream_get_stream(void)
{
	return &stream;
}
   31608:	4800      	ldr	r0, [pc, #0]	; (3160c <dfu_target_stream_get_stream+0x4>)
   3160a:	4770      	bx	lr
   3160c:	20019d60 	.word	0x20019d60

00031610 <dfu_target_stream_init>:

int dfu_target_stream_init(const struct dfu_target_stream_init *init)
{
   31610:	b530      	push	{r4, r5, lr}
	int err;

	if (current_id != NULL) {
   31612:	4c15      	ldr	r4, [pc, #84]	; (31668 <dfu_target_stream_init+0x58>)
{
   31614:	b085      	sub	sp, #20
	if (current_id != NULL) {
   31616:	6823      	ldr	r3, [r4, #0]
   31618:	bb03      	cbnz	r3, 3165c <dfu_target_stream_init+0x4c>
		return -EFAULT;
	}

	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   3161a:	b310      	cbz	r0, 31662 <dfu_target_stream_init+0x52>
   3161c:	6805      	ldr	r5, [r0, #0]
   3161e:	b305      	cbz	r5, 31662 <dfu_target_stream_init+0x52>
   31620:	6841      	ldr	r1, [r0, #4]
   31622:	b1f1      	cbz	r1, 31662 <dfu_target_stream_init+0x52>
	    init->buf == NULL) {
   31624:	6882      	ldr	r2, [r0, #8]
	if (init == NULL || init->id == NULL || init->fdev == NULL ||
   31626:	b1e2      	cbz	r2, 31662 <dfu_target_stream_init+0x52>
		return -EINVAL;
	}

	current_id = init->id;
   31628:	6025      	str	r5, [r4, #0]

	err = stream_flash_init(&stream, init->fdev, init->buf, init->len,
   3162a:	9302      	str	r3, [sp, #8]
   3162c:	6943      	ldr	r3, [r0, #20]
   3162e:	9301      	str	r3, [sp, #4]
   31630:	6903      	ldr	r3, [r0, #16]
   31632:	9300      	str	r3, [sp, #0]
   31634:	68c3      	ldr	r3, [r0, #12]
   31636:	480d      	ldr	r0, [pc, #52]	; (3166c <dfu_target_stream_init+0x5c>)
   31638:	f7f3 fd5e 	bl	250f8 <stream_flash_init>
				init->offset, init->size, NULL);
	if (err) {
   3163c:	4604      	mov	r4, r0
   3163e:	b150      	cbz	r0, 31656 <dfu_target_stream_init+0x46>
   31640:	480b      	ldr	r0, [pc, #44]	; (31670 <dfu_target_stream_init+0x60>)
   31642:	4b0c      	ldr	r3, [pc, #48]	; (31674 <dfu_target_stream_init+0x64>)
		LOG_ERR("stream_flash_init failed (err %d)", err);
   31644:	4622      	mov	r2, r4
   31646:	1ac0      	subs	r0, r0, r3
   31648:	08c0      	lsrs	r0, r0, #3
   3164a:	0180      	lsls	r0, r0, #6
   3164c:	490a      	ldr	r1, [pc, #40]	; (31678 <dfu_target_stream_init+0x68>)
   3164e:	f040 0001 	orr.w	r0, r0, #1
   31652:	f00b fe55 	bl	3d300 <log_string_sync>
		return err;
	}
#endif /* CONFIG_DFU_TARGET_STREAM_SAVE_PROGRESS */

	return 0;
}
   31656:	4620      	mov	r0, r4
   31658:	b005      	add	sp, #20
   3165a:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   3165c:	f06f 040d 	mvn.w	r4, #13
   31660:	e7f9      	b.n	31656 <dfu_target_stream_init+0x46>
		return -EINVAL;
   31662:	f06f 0415 	mvn.w	r4, #21
   31666:	e7f6      	b.n	31656 <dfu_target_stream_init+0x46>
   31668:	20019d5c 	.word	0x20019d5c
   3166c:	20019d60 	.word	0x20019d60
   31670:	000433fc 	.word	0x000433fc
   31674:	0004339c 	.word	0x0004339c
   31678:	0004a8de 	.word	0x0004a8de

0003167c <dfu_target_stream_offset_get>:

int dfu_target_stream_offset_get(size_t *out)
{
   3167c:	b510      	push	{r4, lr}
   3167e:	4604      	mov	r4, r0
	*out = stream_flash_bytes_written(&stream);
   31680:	4802      	ldr	r0, [pc, #8]	; (3168c <dfu_target_stream_offset_get+0x10>)
   31682:	f00c fb70 	bl	3dd66 <stream_flash_bytes_written>
   31686:	6020      	str	r0, [r4, #0]

	return 0;
}
   31688:	2000      	movs	r0, #0
   3168a:	bd10      	pop	{r4, pc}
   3168c:	20019d60 	.word	0x20019d60

00031690 <dfu_target_stream_write>:

int dfu_target_stream_write(const uint8_t *buf, size_t len)
{
   31690:	460a      	mov	r2, r1
   31692:	b510      	push	{r4, lr}
	int err = stream_flash_buffered_write(&stream, buf, len, false);
   31694:	4601      	mov	r1, r0
   31696:	2300      	movs	r3, #0
   31698:	4808      	ldr	r0, [pc, #32]	; (316bc <dfu_target_stream_write+0x2c>)
   3169a:	f00c fafa 	bl	3dc92 <stream_flash_buffered_write>

	if (err != 0) {
   3169e:	4604      	mov	r4, r0
   316a0:	b150      	cbz	r0, 316b8 <dfu_target_stream_write+0x28>
   316a2:	4807      	ldr	r0, [pc, #28]	; (316c0 <dfu_target_stream_write+0x30>)
   316a4:	4b07      	ldr	r3, [pc, #28]	; (316c4 <dfu_target_stream_write+0x34>)
		LOG_ERR("stream_flash_buffered_write error %d", err);
   316a6:	4622      	mov	r2, r4
   316a8:	1a1b      	subs	r3, r3, r0
   316aa:	08db      	lsrs	r3, r3, #3
   316ac:	019b      	lsls	r3, r3, #6
   316ae:	4906      	ldr	r1, [pc, #24]	; (316c8 <dfu_target_stream_write+0x38>)
   316b0:	f043 0001 	orr.w	r0, r3, #1
   316b4:	f00b fe24 	bl	3d300 <log_string_sync>
		LOG_WRN("Unable to store write progress: %d", err);
	}
#endif

	return err;
}
   316b8:	4620      	mov	r0, r4
   316ba:	bd10      	pop	{r4, pc}
   316bc:	20019d60 	.word	0x20019d60
   316c0:	0004339c 	.word	0x0004339c
   316c4:	000433fc 	.word	0x000433fc
   316c8:	0004a900 	.word	0x0004a900

000316cc <dfu_target_stream_done>:

int dfu_target_stream_done(bool successful)
{
   316cc:	b510      	push	{r4, lr}
	int err = 0;

	if (successful) {
   316ce:	b1b8      	cbz	r0, 31700 <dfu_target_stream_done+0x34>
		err = stream_flash_buffered_write(&stream, NULL, 0, true);
   316d0:	2200      	movs	r2, #0
   316d2:	2301      	movs	r3, #1
   316d4:	4611      	mov	r1, r2
   316d6:	480b      	ldr	r0, [pc, #44]	; (31704 <dfu_target_stream_done+0x38>)
   316d8:	f00c fadb 	bl	3dc92 <stream_flash_buffered_write>
		if (err != 0) {
   316dc:	4604      	mov	r4, r0
   316de:	b150      	cbz	r0, 316f6 <dfu_target_stream_done+0x2a>
   316e0:	4809      	ldr	r0, [pc, #36]	; (31708 <dfu_target_stream_done+0x3c>)
   316e2:	4b0a      	ldr	r3, [pc, #40]	; (3170c <dfu_target_stream_done+0x40>)
			LOG_ERR("stream_flash_buffered_write error %d", err);
   316e4:	4622      	mov	r2, r4
   316e6:	1ac0      	subs	r0, r0, r3
   316e8:	08c0      	lsrs	r0, r0, #3
   316ea:	0180      	lsls	r0, r0, #6
   316ec:	4908      	ldr	r1, [pc, #32]	; (31710 <dfu_target_stream_done+0x44>)
   316ee:	f040 0001 	orr.w	r0, r0, #1
   316f2:	f00b fe05 	bl	3d300 <log_string_sync>
			LOG_ERR("Unable to reset write progress: %d", err);
		}
#endif
	}

	current_id = NULL;
   316f6:	2200      	movs	r2, #0
   316f8:	4b06      	ldr	r3, [pc, #24]	; (31714 <dfu_target_stream_done+0x48>)

	return err;
}
   316fa:	4620      	mov	r0, r4
	current_id = NULL;
   316fc:	601a      	str	r2, [r3, #0]
}
   316fe:	bd10      	pop	{r4, pc}
	int err = 0;
   31700:	4604      	mov	r4, r0
   31702:	e7f8      	b.n	316f6 <dfu_target_stream_done+0x2a>
   31704:	20019d60 	.word	0x20019d60
   31708:	000433fc 	.word	0x000433fc
   3170c:	0004339c 	.word	0x0004339c
   31710:	0004a900 	.word	0x0004a900
   31714:	20019d5c 	.word	0x20019d5c

00031718 <get_modem_error>:
static int  fd;
static int  offset;
static dfu_target_callback_t callback;

static int get_modem_error(void)
{
   31718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int rc;
	int err = 0;
	socklen_t len;

	len = sizeof(err);
   3171a:	2200      	movs	r2, #0
   3171c:	2304      	movs	r3, #4
   3171e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	rc = getsockopt(fd, SOL_DFU, SO_DFU_ERROR, &err, &len);
   31722:	4b0e      	ldr	r3, [pc, #56]	; (3175c <get_modem_error+0x44>)
   31724:	6818      	ldr	r0, [r3, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   31726:	ab03      	add	r3, sp, #12
   31728:	9300      	str	r3, [sp, #0]
   3172a:	2214      	movs	r2, #20
   3172c:	f240 2103 	movw	r1, #515	; 0x203
   31730:	ab02      	add	r3, sp, #8
   31732:	f00c f9cd 	bl	3dad0 <z_impl_zsock_getsockopt>
	if (rc) {
   31736:	b168      	cbz	r0, 31754 <get_modem_error+0x3c>
   31738:	4b09      	ldr	r3, [pc, #36]	; (31760 <get_modem_error+0x48>)
   3173a:	4c0a      	ldr	r4, [pc, #40]	; (31764 <get_modem_error+0x4c>)
   3173c:	1ae4      	subs	r4, r4, r3
		LOG_ERR("Unable to fetch modem error, errno %d", errno);
   3173e:	f00c fccc 	bl	3e0da <__errno>
   31742:	08e4      	lsrs	r4, r4, #3
   31744:	01a4      	lsls	r4, r4, #6
   31746:	f044 0401 	orr.w	r4, r4, #1
   3174a:	6802      	ldr	r2, [r0, #0]
   3174c:	4906      	ldr	r1, [pc, #24]	; (31768 <get_modem_error+0x50>)
   3174e:	4620      	mov	r0, r4
   31750:	f00b fdd6 	bl	3d300 <log_string_sync>
	}

	return err;
}
   31754:	9802      	ldr	r0, [sp, #8]
   31756:	b004      	add	sp, #16
   31758:	bd10      	pop	{r4, pc}
   3175a:	bf00      	nop
   3175c:	20019d88 	.word	0x20019d88
   31760:	0004339c 	.word	0x0004339c
   31764:	000433f4 	.word	0x000433f4
   31768:	0004a937 	.word	0x0004a937

0003176c <delete_banked_modem_delta_fw>:
}
#define SLEEP_TIME 1
static int delete_banked_modem_delta_fw(void)
{
	int err;
	socklen_t len = sizeof(offset);
   3176c:	2304      	movs	r3, #4
{
   3176e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   31772:	b085      	sub	sp, #20
	socklen_t len = sizeof(offset);
   31774:	9303      	str	r3, [sp, #12]
   31776:	4c2e      	ldr	r4, [pc, #184]	; (31830 <delete_banked_modem_delta_fw+0xc4>)
   31778:	4b2e      	ldr	r3, [pc, #184]	; (31834 <delete_banked_modem_delta_fw+0xc8>)
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;

	LOG_INF("Deleting firmware image, this can take several minutes");
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   3177a:	4e2f      	ldr	r6, [pc, #188]	; (31838 <delete_banked_modem_delta_fw+0xcc>)
   3177c:	1ae4      	subs	r4, r4, r3
   3177e:	08e4      	lsrs	r4, r4, #3
	LOG_INF("Deleting firmware image, this can take several minutes");
   31780:	01a4      	lsls	r4, r4, #6
   31782:	f044 0003 	orr.w	r0, r4, #3
   31786:	492d      	ldr	r1, [pc, #180]	; (3183c <delete_banked_modem_delta_fw+0xd0>)
   31788:	f00b fdba 	bl	3d300 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_BACKUP_DELETE, NULL, 0);
   3178c:	6830      	ldr	r0, [r6, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3178e:	2300      	movs	r3, #0
   31790:	2206      	movs	r2, #6
   31792:	f240 2103 	movw	r1, #515	; 0x203
   31796:	9300      	str	r3, [sp, #0]
   31798:	f00c f9b5 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err < 0) {
   3179c:	2800      	cmp	r0, #0
   3179e:	da0d      	bge.n	317bc <delete_banked_modem_delta_fw+0x50>
		LOG_ERR("Failed to delete backup, errno %d", errno);
   317a0:	f00c fc9b 	bl	3e0da <__errno>
   317a4:	f044 0401 	orr.w	r4, r4, #1
   317a8:	6802      	ldr	r2, [r0, #0]
   317aa:	4925      	ldr	r1, [pc, #148]	; (31840 <delete_banked_modem_delta_fw+0xd4>)
   317ac:	4620      	mov	r0, r4
   317ae:	f00b fda7 	bl	3d300 <log_string_sync>
		return -EFAULT;
   317b2:	f06f 000d 	mvn.w	r0, #13
			break;
		}
	}

	return 0;
}
   317b6:	b005      	add	sp, #20
   317b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	int timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   317bc:	253c      	movs	r5, #60	; 0x3c
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   317be:	4f21      	ldr	r7, [pc, #132]	; (31844 <delete_banked_modem_delta_fw+0xd8>)
				callback(DFU_TARGET_EVT_TIMEOUT);
   317c0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 31848 <delete_banked_modem_delta_fw+0xdc>
					LOG_ERR("DFU error: %d", err);
   317c4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 31850 <delete_banked_modem_delta_fw+0xe4>
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   317c8:	6830      	ldr	r0, [r6, #0]
   317ca:	ab03      	add	r3, sp, #12
   317cc:	9300      	str	r3, [sp, #0]
   317ce:	2207      	movs	r2, #7
   317d0:	463b      	mov	r3, r7
   317d2:	f240 2103 	movw	r1, #515	; 0x203
   317d6:	f00c f97b 	bl	3dad0 <z_impl_zsock_getsockopt>
		if (err < 0) {
   317da:	2800      	cmp	r0, #0
   317dc:	da1d      	bge.n	3181a <delete_banked_modem_delta_fw+0xae>
			if (timeout < 0) {
   317de:	2d00      	cmp	r5, #0
   317e0:	da04      	bge.n	317ec <delete_banked_modem_delta_fw+0x80>
				callback(DFU_TARGET_EVT_TIMEOUT);
   317e2:	2000      	movs	r0, #0
   317e4:	f8d8 3000 	ldr.w	r3, [r8]
   317e8:	4798      	blx	r3
				timeout = CONFIG_DFU_TARGET_MODEM_TIMEOUT;
   317ea:	253c      	movs	r5, #60	; 0x3c
			if (errno == ENOEXEC) {
   317ec:	f00c fc75 	bl	3e0da <__errno>
   317f0:	6803      	ldr	r3, [r0, #0]
   317f2:	2b08      	cmp	r3, #8
   317f4:	d10f      	bne.n	31816 <delete_banked_modem_delta_fw+0xaa>
				err = get_modem_error();
   317f6:	f7ff ff8f 	bl	31718 <get_modem_error>
				if (err != DFU_ERASE_PENDING) {
   317fa:	f110 0f11 	cmn.w	r0, #17
				err = get_modem_error();
   317fe:	4602      	mov	r2, r0
				if (err != DFU_ERASE_PENDING) {
   31800:	d004      	beq.n	3180c <delete_banked_modem_delta_fw+0xa0>
					LOG_ERR("DFU error: %d", err);
   31802:	4649      	mov	r1, r9
   31804:	f044 0001 	orr.w	r0, r4, #1
   31808:	f00b fd7a 	bl	3d300 <log_string_sync>
	return z_impl_k_sleep(timeout);
   3180c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   31810:	2100      	movs	r1, #0
   31812:	f007 fd11 	bl	39238 <z_impl_k_sleep>
			timeout -= SLEEP_TIME;
   31816:	3d01      	subs	r5, #1
		err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   31818:	e7d6      	b.n	317c8 <delete_banked_modem_delta_fw+0x5c>
			callback(DFU_TARGET_EVT_ERASE_DONE);
   3181a:	4b0b      	ldr	r3, [pc, #44]	; (31848 <delete_banked_modem_delta_fw+0xdc>)
   3181c:	2001      	movs	r0, #1
   3181e:	681b      	ldr	r3, [r3, #0]
   31820:	4798      	blx	r3
			LOG_INF("Modem FW delete complete");
   31822:	f044 0003 	orr.w	r0, r4, #3
   31826:	4909      	ldr	r1, [pc, #36]	; (3184c <delete_banked_modem_delta_fw+0xe0>)
   31828:	f00b fd6a 	bl	3d300 <log_string_sync>
	return 0;
   3182c:	2000      	movs	r0, #0
   3182e:	e7c2      	b.n	317b6 <delete_banked_modem_delta_fw+0x4a>
   31830:	000433f4 	.word	0x000433f4
   31834:	0004339c 	.word	0x0004339c
   31838:	20019d88 	.word	0x20019d88
   3183c:	0004a95d 	.word	0x0004a95d
   31840:	0004a994 	.word	0x0004a994
   31844:	20019d8c 	.word	0x20019d8c
   31848:	20019d84 	.word	0x20019d84
   3184c:	0004a9c4 	.word	0x0004a9c4
   31850:	0004a9b6 	.word	0x0004a9b6

00031854 <dfu_target_modem_delta_identify>:
	return err;
}

bool dfu_target_modem_delta_identify(const void *const buf)
{
	return ((const struct modem_delta_header *)buf)->magic == MODEM_MAGIC;
   31854:	6840      	ldr	r0, [r0, #4]

}
   31856:	4b02      	ldr	r3, [pc, #8]	; (31860 <dfu_target_modem_delta_identify+0xc>)
   31858:	1ac3      	subs	r3, r0, r3
   3185a:	4258      	negs	r0, r3
   3185c:	4158      	adcs	r0, r3
   3185e:	4770      	bx	lr
   31860:	7544656d 	.word	0x7544656d

00031864 <dfu_target_modem_delta_init>:

int dfu_target_modem_delta_init(size_t file_size, dfu_target_callback_t cb)
{
	int err;
	size_t scratch_space;
	socklen_t len = sizeof(offset);
   31864:	2304      	movs	r3, #4
{
   31866:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3186a:	b099      	sub	sp, #100	; 0x64
	socklen_t len = sizeof(offset);
   3186c:	9303      	str	r3, [sp, #12]

	callback = cb;
   3186e:	4b5d      	ldr	r3, [pc, #372]	; (319e4 <_flash_used+0xac>)
{
   31870:	4606      	mov	r6, r0
	callback = cb;
   31872:	6019      	str	r1, [r3, #0]
	return z_impl_zsock_socket(family, type, proto);
   31874:	f240 2203 	movw	r2, #515	; 0x203
   31878:	2101      	movs	r1, #1
   3187a:	2006      	movs	r0, #6
   3187c:	f7f3 f93a 	bl	24af4 <z_impl_zsock_socket>
   31880:	4c59      	ldr	r4, [pc, #356]	; (319e8 <_flash_used+0xb0>)
   31882:	4b5a      	ldr	r3, [pc, #360]	; (319ec <_flash_used+0xb4>)
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   31884:	4f5a      	ldr	r7, [pc, #360]	; (319f0 <_flash_used+0xb8>)
   31886:	1ae4      	subs	r4, r4, r3
   31888:	08e4      	lsrs	r4, r4, #3
	if (fd < 0) {
   3188a:	2800      	cmp	r0, #0
   3188c:	463d      	mov	r5, r7
	fd = socket(AF_LOCAL, SOCK_STREAM, NPROTO_DFU);
   3188e:	6038      	str	r0, [r7, #0]
	if (fd < 0) {
   31890:	ea4f 1484 	mov.w	r4, r4, lsl #6
   31894:	da2c      	bge.n	318f0 <dfu_target_modem_delta_init+0x8c>
		LOG_ERR("Failed to open Modem DFU socket.");
   31896:	f044 0001 	orr.w	r0, r4, #1
   3189a:	4956      	ldr	r1, [pc, #344]	; (319f4 <_flash_used+0xbc>)
   3189c:	f00b fd30 	bl	3d300 <log_string_sync>
		return fd;
   318a0:	6838      	ldr	r0, [r7, #0]

	err = modem_delta_dfu_socket_init();
	if (err < 0) {
   318a2:	2800      	cmp	r0, #0
   318a4:	db45      	blt.n	31932 <dfu_target_modem_delta_init+0xce>
		return err;
	}

	err = getsockopt(fd, SOL_DFU, SO_DFU_RESOURCES, &scratch_space, &len);
   318a6:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_getsockopt(sock, level, optname, optval, optlen);
   318a8:	af03      	add	r7, sp, #12
   318aa:	2202      	movs	r2, #2
   318ac:	f240 2103 	movw	r1, #515	; 0x203
   318b0:	9700      	str	r7, [sp, #0]
   318b2:	ab0e      	add	r3, sp, #56	; 0x38
   318b4:	f00c f90c 	bl	3dad0 <z_impl_zsock_getsockopt>
	if (err < 0) {
   318b8:	2800      	cmp	r0, #0
   318ba:	da0d      	bge.n	318d8 <dfu_target_modem_delta_init+0x74>
		if (errno == ENOEXEC) {
   318bc:	f00c fc0d 	bl	3e0da <__errno>
   318c0:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   318c2:	f044 0801 	orr.w	r8, r4, #1
		if (errno == ENOEXEC) {
   318c6:	2b08      	cmp	r3, #8
   318c8:	d146      	bne.n	31958 <_flash_used+0x20>
			LOG_ERR("Modem error: %d", get_modem_error());
   318ca:	f7ff ff25 	bl	31718 <get_modem_error>
   318ce:	4602      	mov	r2, r0
   318d0:	4949      	ldr	r1, [pc, #292]	; (319f8 <_flash_used+0xc0>)
		} else {
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   318d2:	4640      	mov	r0, r8
   318d4:	f00b fd14 	bl	3d300 <log_string_sync>
		}
	}

	if (file_size > scratch_space) {
   318d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   318da:	42b3      	cmp	r3, r6
   318dc:	d241      	bcs.n	31962 <_flash_used+0x2a>
		LOG_ERR("Requested file too big to fit in flash %d > %d",
   318de:	f044 0001 	orr.w	r0, r4, #1
   318e2:	4632      	mov	r2, r6
   318e4:	4945      	ldr	r1, [pc, #276]	; (319fc <_flash_used+0xc4>)
   318e6:	f00b fd0b 	bl	3d300 <log_string_sync>
			file_size, scratch_space);
		return -EFBIG;
   318ea:	f06f 001a 	mvn.w	r0, #26
   318ee:	e020      	b.n	31932 <dfu_target_modem_delta_init+0xce>
	len = sizeof(version);
   318f0:	f04f 0924 	mov.w	r9, #36	; 0x24
	LOG_INF("Modem DFU Socket created");
   318f4:	f044 0803 	orr.w	r8, r4, #3
   318f8:	4640      	mov	r0, r8
   318fa:	4941      	ldr	r1, [pc, #260]	; (31a00 <_flash_used+0xc8>)
   318fc:	f00b fd00 	bl	3d300 <log_string_sync>
	err = getsockopt(fd, SOL_DFU, SO_DFU_FW_VERSION, &version,
   31900:	6838      	ldr	r0, [r7, #0]
	len = sizeof(version);
   31902:	f8cd 9010 	str.w	r9, [sp, #16]
   31906:	ab04      	add	r3, sp, #16
   31908:	af05      	add	r7, sp, #20
   3190a:	9300      	str	r3, [sp, #0]
   3190c:	2201      	movs	r2, #1
   3190e:	463b      	mov	r3, r7
   31910:	f240 2103 	movw	r1, #515	; 0x203
   31914:	f00c f8dc 	bl	3dad0 <z_impl_zsock_getsockopt>
	if (err < 0) {
   31918:	2800      	cmp	r0, #0
   3191a:	da0d      	bge.n	31938 <_flash_used>
		LOG_ERR("Firmware version request failed, errno %d", errno);
   3191c:	f00c fbdd 	bl	3e0da <__errno>
   31920:	f044 0401 	orr.w	r4, r4, #1
   31924:	6802      	ldr	r2, [r0, #0]
   31926:	4937      	ldr	r1, [pc, #220]	; (31a04 <_flash_used+0xcc>)
   31928:	4620      	mov	r0, r4
   3192a:	f00b fce9 	bl	3d300 <log_string_sync>
		return -1;
   3192e:	f04f 30ff 	mov.w	r0, #4294967295
			LOG_INF("Error while setting offset: %d", offset);
		}
	}

	return 0;
}
   31932:	b019      	add	sp, #100	; 0x64
   31934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	snprintf(version_string, sizeof(version_string), "%.*s",
   31938:	464b      	mov	r3, r9
   3193a:	2125      	movs	r1, #37	; 0x25
   3193c:	4a32      	ldr	r2, [pc, #200]	; (31a08 <_flash_used+0xd0>)
   3193e:	9700      	str	r7, [sp, #0]
   31940:	a80e      	add	r0, sp, #56	; 0x38
   31942:	f009 fdf3 	bl	3b52c <sniprintf>
	LOG_INF("Modem firmware version: %s", log_strdup(version_string));
   31946:	a80e      	add	r0, sp, #56	; 0x38
   31948:	f00b fced 	bl	3d326 <log_strdup>
   3194c:	492f      	ldr	r1, [pc, #188]	; (31a0c <_flash_used+0xd4>)
   3194e:	4602      	mov	r2, r0
   31950:	4640      	mov	r0, r8
   31952:	f00b fcd5 	bl	3d300 <log_string_sync>
	if (err < 0) {
   31956:	e7a6      	b.n	318a6 <dfu_target_modem_delta_init+0x42>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   31958:	f00c fbbf 	bl	3e0da <__errno>
   3195c:	492c      	ldr	r1, [pc, #176]	; (31a10 <_flash_used+0xd8>)
   3195e:	6802      	ldr	r2, [r0, #0]
   31960:	e7b7      	b.n	318d2 <dfu_target_modem_delta_init+0x6e>
	err = getsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, &len);
   31962:	6828      	ldr	r0, [r5, #0]
   31964:	2207      	movs	r2, #7
   31966:	f240 2103 	movw	r1, #515	; 0x203
   3196a:	4b2a      	ldr	r3, [pc, #168]	; (31a14 <_flash_used+0xdc>)
   3196c:	9700      	str	r7, [sp, #0]
   3196e:	f00c f8af 	bl	3dad0 <z_impl_zsock_getsockopt>
	if (err < 0) {
   31972:	2800      	cmp	r0, #0
   31974:	da0d      	bge.n	31992 <_flash_used+0x5a>
		if (errno == ENOEXEC) {
   31976:	f00c fbb0 	bl	3e0da <__errno>
   3197a:	6803      	ldr	r3, [r0, #0]
			LOG_ERR("Modem error: %d", get_modem_error());
   3197c:	f044 0601 	orr.w	r6, r4, #1
		if (errno == ENOEXEC) {
   31980:	2b08      	cmp	r3, #8
   31982:	d10f      	bne.n	319a4 <_flash_used+0x6c>
			LOG_ERR("Modem error: %d", get_modem_error());
   31984:	f7ff fec8 	bl	31718 <get_modem_error>
   31988:	4602      	mov	r2, r0
   3198a:	491b      	ldr	r1, [pc, #108]	; (319f8 <_flash_used+0xc0>)
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   3198c:	4630      	mov	r0, r6
   3198e:	f00b fcb7 	bl	3d300 <log_string_sync>
	if (offset == DIRTY_IMAGE) {
   31992:	4e20      	ldr	r6, [pc, #128]	; (31a14 <_flash_used+0xdc>)
   31994:	6832      	ldr	r2, [r6, #0]
   31996:	f5b2 1f20 	cmp.w	r2, #2621440	; 0x280000
   3199a:	d108      	bne.n	319ae <_flash_used+0x76>
		delete_banked_modem_delta_fw();
   3199c:	f7ff fee6 	bl	3176c <delete_banked_modem_delta_fw>
	return 0;
   319a0:	2000      	movs	r0, #0
   319a2:	e7c6      	b.n	31932 <dfu_target_modem_delta_init+0xce>
			LOG_ERR("getsockopt(OFFSET) errno: %d", errno);
   319a4:	f00c fb99 	bl	3e0da <__errno>
   319a8:	4919      	ldr	r1, [pc, #100]	; (31a10 <_flash_used+0xd8>)
   319aa:	6802      	ldr	r2, [r0, #0]
   319ac:	e7ee      	b.n	3198c <_flash_used+0x54>
	} else if (offset != 0) {
   319ae:	2a00      	cmp	r2, #0
   319b0:	d0f6      	beq.n	319a0 <_flash_used+0x68>
		LOG_INF("Setting offset to 0x%x", offset);
   319b2:	f044 0403 	orr.w	r4, r4, #3
   319b6:	4620      	mov	r0, r4
   319b8:	4917      	ldr	r1, [pc, #92]	; (31a18 <_flash_used+0xe0>)
   319ba:	f00b fca1 	bl	3d300 <log_string_sync>
		len = sizeof(offset);
   319be:	2304      	movs	r3, #4
		err = setsockopt(fd, SOL_DFU, SO_DFU_OFFSET, &offset, len);
   319c0:	6828      	ldr	r0, [r5, #0]
		len = sizeof(offset);
   319c2:	9303      	str	r3, [sp, #12]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   319c4:	2207      	movs	r2, #7
   319c6:	9300      	str	r3, [sp, #0]
   319c8:	f240 2103 	movw	r1, #515	; 0x203
   319cc:	4633      	mov	r3, r6
   319ce:	f00c f89a 	bl	3db06 <z_impl_zsock_setsockopt>
		if (err != 0) {
   319d2:	2800      	cmp	r0, #0
   319d4:	d0e4      	beq.n	319a0 <_flash_used+0x68>
			LOG_INF("Error while setting offset: %d", offset);
   319d6:	4620      	mov	r0, r4
   319d8:	6832      	ldr	r2, [r6, #0]
   319da:	4910      	ldr	r1, [pc, #64]	; (31a1c <_flash_used+0xe4>)
   319dc:	f00b fc90 	bl	3d300 <log_string_sync>
   319e0:	e7de      	b.n	319a0 <_flash_used+0x68>
   319e2:	bf00      	nop
   319e4:	20019d84 	.word	0x20019d84
   319e8:	000433f4 	.word	0x000433f4
   319ec:	0004339c 	.word	0x0004339c
   319f0:	20019d88 	.word	0x20019d88
   319f4:	0004a9dd 	.word	0x0004a9dd
   319f8:	0004aa5c 	.word	0x0004aa5c
   319fc:	0004aa89 	.word	0x0004aa89
   31a00:	0004a9fe 	.word	0x0004a9fe
   31a04:	0004aa17 	.word	0x0004aa17
   31a08:	0004903b 	.word	0x0004903b
   31a0c:	0004aa41 	.word	0x0004aa41
   31a10:	0004aa6c 	.word	0x0004aa6c
   31a14:	20019d8c 	.word	0x20019d8c
   31a18:	0004aab8 	.word	0x0004aab8
   31a1c:	0004aacf 	.word	0x0004aacf

00031a20 <dfu_target_modem_delta_offset_get>:

int dfu_target_modem_delta_offset_get(size_t *out)
{
	*out = offset;
   31a20:	4b02      	ldr	r3, [pc, #8]	; (31a2c <dfu_target_modem_delta_offset_get+0xc>)
   31a22:	681b      	ldr	r3, [r3, #0]
   31a24:	6003      	str	r3, [r0, #0]
	return 0;
}
   31a26:	2000      	movs	r0, #0
   31a28:	4770      	bx	lr
   31a2a:	bf00      	nop
   31a2c:	20019d8c 	.word	0x20019d8c

00031a30 <dfu_target_modem_delta_write>:

int dfu_target_modem_delta_write(const void *const buf, size_t len)
{
   31a30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	int err = 0;
	int sent = 0;
   31a34:	2400      	movs	r4, #0
{
   31a36:	4607      	mov	r7, r0
   31a38:	460d      	mov	r5, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   31a3a:	4626      	mov	r6, r4
	int modem_error = 0;
	int send_result = 0;

	while (send_result >= 0) {
		send_result = send(fd, (((uint8_t *)buf) + sent),
   31a3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 31ae0 <dfu_target_modem_delta_write+0xb0>
   31a40:	f8d8 0000 	ldr.w	r0, [r8]
   31a44:	2300      	movs	r3, #0
   31a46:	e9cd 6600 	strd	r6, r6, [sp]
   31a4a:	1b2a      	subs	r2, r5, r4
   31a4c:	1939      	adds	r1, r7, r4
   31a4e:	f00b ffef 	bl	3da30 <z_impl_zsock_sendto>
				   (len - sent), 0);
		if (send_result > 0) {
   31a52:	2800      	cmp	r0, #0
   31a54:	dd0a      	ble.n	31a6c <dfu_target_modem_delta_write+0x3c>
			sent += send_result;
   31a56:	4404      	add	r4, r0
			if (sent >= len) {
   31a58:	42ac      	cmp	r4, r5
   31a5a:	d3f1      	bcc.n	31a40 <dfu_target_modem_delta_write+0x10>
				offset += len;
				return 0;
   31a5c:	2000      	movs	r0, #0
				offset += len;
   31a5e:	4b1c      	ldr	r3, [pc, #112]	; (31ad0 <dfu_target_modem_delta_write+0xa0>)
   31a60:	6819      	ldr	r1, [r3, #0]
   31a62:	4429      	add	r1, r5
   31a64:	6019      	str	r1, [r3, #0]
			return 0;
		}
	default:
		return -EFAULT;
	}
}
   31a66:	b002      	add	sp, #8
   31a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (send_result >= 0) {
   31a6c:	d0e8      	beq.n	31a40 <dfu_target_modem_delta_write+0x10>
	if (errno != ENOEXEC) {
   31a6e:	f00c fb34 	bl	3e0da <__errno>
   31a72:	6803      	ldr	r3, [r0, #0]
   31a74:	2b08      	cmp	r3, #8
   31a76:	d128      	bne.n	31aca <dfu_target_modem_delta_write+0x9a>
	modem_error = get_modem_error();
   31a78:	f7ff fe4e 	bl	31718 <get_modem_error>
   31a7c:	4c15      	ldr	r4, [pc, #84]	; (31ad4 <dfu_target_modem_delta_write+0xa4>)
   31a7e:	4b16      	ldr	r3, [pc, #88]	; (31ad8 <dfu_target_modem_delta_write+0xa8>)
   31a80:	4606      	mov	r6, r0
   31a82:	1ae4      	subs	r4, r4, r3
	LOG_ERR("send failed, modem errno %d, dfu err %d", errno, modem_error);
   31a84:	f00c fb29 	bl	3e0da <__errno>
   31a88:	08e4      	lsrs	r4, r4, #3
   31a8a:	01a4      	lsls	r4, r4, #6
   31a8c:	f044 0401 	orr.w	r4, r4, #1
   31a90:	6802      	ldr	r2, [r0, #0]
   31a92:	4633      	mov	r3, r6
   31a94:	4620      	mov	r0, r4
   31a96:	4911      	ldr	r1, [pc, #68]	; (31adc <dfu_target_modem_delta_write+0xac>)
   31a98:	f00b fc32 	bl	3d300 <log_string_sync>
	switch (modem_error) {
   31a9c:	f116 0f0b 	cmn.w	r6, #11
   31aa0:	d004      	beq.n	31aac <dfu_target_modem_delta_write+0x7c>
   31aa2:	f116 0f09 	cmn.w	r6, #9
   31aa6:	d00d      	beq.n	31ac4 <dfu_target_modem_delta_write+0x94>
   31aa8:	360e      	adds	r6, #14
   31aaa:	d10e      	bne.n	31aca <dfu_target_modem_delta_write+0x9a>
		delete_banked_modem_delta_fw();
   31aac:	f7ff fe5e 	bl	3176c <delete_banked_modem_delta_fw>
		err = dfu_target_modem_delta_write(buf, len);
   31ab0:	4629      	mov	r1, r5
   31ab2:	4638      	mov	r0, r7
   31ab4:	f7ff ffbc 	bl	31a30 <dfu_target_modem_delta_write>
			return 0;
   31ab8:	2800      	cmp	r0, #0
   31aba:	bfb4      	ite	lt
   31abc:	f06f 0015 	mvnlt.w	r0, #21
   31ac0:	2000      	movge	r0, #0
   31ac2:	e7d0      	b.n	31a66 <dfu_target_modem_delta_write+0x36>
		return -EINVAL;
   31ac4:	f06f 0015 	mvn.w	r0, #21
   31ac8:	e7cd      	b.n	31a66 <dfu_target_modem_delta_write+0x36>
	switch (modem_error) {
   31aca:	f06f 000d 	mvn.w	r0, #13
   31ace:	e7ca      	b.n	31a66 <dfu_target_modem_delta_write+0x36>
   31ad0:	20019d8c 	.word	0x20019d8c
   31ad4:	000433f4 	.word	0x000433f4
   31ad8:	0004339c 	.word	0x0004339c
   31adc:	0004aaee 	.word	0x0004aaee
   31ae0:	20019d88 	.word	0x20019d88

00031ae4 <dfu_target_modem_delta_done>:

int dfu_target_modem_delta_done(bool successful)
{
   31ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   31ae6:	4c1d      	ldr	r4, [pc, #116]	; (31b5c <dfu_target_modem_delta_done+0x78>)
   31ae8:	4b1d      	ldr	r3, [pc, #116]	; (31b60 <dfu_target_modem_delta_done+0x7c>)
   31aea:	4d1e      	ldr	r5, [pc, #120]	; (31b64 <dfu_target_modem_delta_done+0x80>)
   31aec:	1ae4      	subs	r4, r4, r3
   31aee:	08e4      	lsrs	r4, r4, #3
   31af0:	01a4      	lsls	r4, r4, #6
	int err = 0;

	if (successful) {
   31af2:	b358      	cbz	r0, 31b4c <dfu_target_modem_delta_done+0x68>
	LOG_INF("Scheduling modem firmware upgrade at next boot");
   31af4:	f044 0003 	orr.w	r0, r4, #3
   31af8:	491b      	ldr	r1, [pc, #108]	; (31b68 <dfu_target_modem_delta_done+0x84>)
   31afa:	f00b fc01 	bl	3d300 <log_string_sync>
	err = setsockopt(fd, SOL_DFU, SO_DFU_APPLY, NULL, 0);
   31afe:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   31b00:	2300      	movs	r3, #0
   31b02:	2204      	movs	r2, #4
   31b04:	f240 2103 	movw	r1, #515	; 0x203
   31b08:	9300      	str	r3, [sp, #0]
   31b0a:	f00b fffc 	bl	3db06 <z_impl_zsock_setsockopt>
	if (err < 0) {
   31b0e:	1e02      	subs	r2, r0, #0
   31b10:	da0f      	bge.n	31b32 <dfu_target_modem_delta_done+0x4e>
   31b12:	9203      	str	r2, [sp, #12]
		if (errno == ENOEXEC) {
   31b14:	f00c fae1 	bl	3e0da <__errno>
   31b18:	6803      	ldr	r3, [r0, #0]
   31b1a:	9a03      	ldr	r2, [sp, #12]
   31b1c:	2b08      	cmp	r3, #8
   31b1e:	f044 0601 	orr.w	r6, r4, #1
   31b22:	d102      	bne.n	31b2a <dfu_target_modem_delta_done+0x46>
			LOG_ERR("SO_DFU_APPLY failed, modem error %d",
   31b24:	f7ff fdf8 	bl	31718 <get_modem_error>
   31b28:	4602      	mov	r2, r0
			LOG_ERR("SO_DFU_APPLY failed, modem error %d", err);
   31b2a:	4630      	mov	r0, r6
   31b2c:	490f      	ldr	r1, [pc, #60]	; (31b6c <dfu_target_modem_delta_done+0x88>)
   31b2e:	f00b fbe7 	bl	3d300 <log_string_sync>
	} else {
		LOG_INF("Modem upgrade aborted.");
	}


	err = close(fd);
   31b32:	6828      	ldr	r0, [r5, #0]
	return z_impl_zsock_close(sock);
   31b34:	f00b ff4f 	bl	3d9d6 <z_impl_zsock_close>
	if (err < 0) {
   31b38:	1e05      	subs	r5, r0, #0
   31b3a:	da0d      	bge.n	31b58 <dfu_target_modem_delta_done+0x74>
		LOG_ERR("Failed to close modem DFU socket.");
   31b3c:	490c      	ldr	r1, [pc, #48]	; (31b70 <dfu_target_modem_delta_done+0x8c>)
   31b3e:	f044 0001 	orr.w	r0, r4, #1
   31b42:	f00b fbdd 	bl	3d300 <log_string_sync>
		return err;
	}

	return 0;
}
   31b46:	4628      	mov	r0, r5
   31b48:	b004      	add	sp, #16
   31b4a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Modem upgrade aborted.");
   31b4c:	4909      	ldr	r1, [pc, #36]	; (31b74 <dfu_target_modem_delta_done+0x90>)
   31b4e:	f044 0003 	orr.w	r0, r4, #3
   31b52:	f00b fbd5 	bl	3d300 <log_string_sync>
   31b56:	e7ec      	b.n	31b32 <dfu_target_modem_delta_done+0x4e>
	return 0;
   31b58:	2500      	movs	r5, #0
   31b5a:	e7f4      	b.n	31b46 <dfu_target_modem_delta_done+0x62>
   31b5c:	000433f4 	.word	0x000433f4
   31b60:	0004339c 	.word	0x0004339c
   31b64:	20019d88 	.word	0x20019d88
   31b68:	0004ab16 	.word	0x0004ab16
   31b6c:	0004ab45 	.word	0x0004ab45
   31b70:	0004ab80 	.word	0x0004ab80
   31b74:	0004ab69 	.word	0x0004ab69

00031b78 <dfu_target_mcuboot_identify>:
}

bool dfu_target_mcuboot_identify(const void *const buf)
{
	/* MCUBoot headers starts with 4 byte magic word */
	return *((const uint32_t *)buf) == MCUBOOT_HEADER_MAGIC;
   31b78:	6800      	ldr	r0, [r0, #0]
}
   31b7a:	4b02      	ldr	r3, [pc, #8]	; (31b84 <dfu_target_mcuboot_identify+0xc>)
   31b7c:	1ac3      	subs	r3, r0, r3
   31b7e:	4258      	negs	r0, r3
   31b80:	4158      	adcs	r0, r3
   31b82:	4770      	bx	lr
   31b84:	96f3b83d 	.word	0x96f3b83d

00031b88 <dfu_target_mcuboot_set_buf>:

int dfu_target_mcuboot_set_buf(uint8_t *buf, size_t len)
{
	if (buf == NULL) {
   31b88:	b128      	cbz	r0, 31b96 <dfu_target_mcuboot_set_buf+0xe>
		return -EINVAL;
	}

	stream_buf = buf;
   31b8a:	4b04      	ldr	r3, [pc, #16]	; (31b9c <dfu_target_mcuboot_set_buf+0x14>)
   31b8c:	6018      	str	r0, [r3, #0]
	stream_buf_len = len;
   31b8e:	4b04      	ldr	r3, [pc, #16]	; (31ba0 <dfu_target_mcuboot_set_buf+0x18>)

	return 0;
   31b90:	2000      	movs	r0, #0
	stream_buf_len = len;
   31b92:	6019      	str	r1, [r3, #0]
	return 0;
   31b94:	4770      	bx	lr
		return -EINVAL;
   31b96:	f06f 0015 	mvn.w	r0, #21
}
   31b9a:	4770      	bx	lr
   31b9c:	20019d90 	.word	0x20019d90
   31ba0:	20019d94 	.word	0x20019d94

00031ba4 <dfu_target_mcuboot_init>:

int dfu_target_mcuboot_init(size_t file_size, dfu_target_callback_t cb)
{
   31ba4:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(cb);
	const struct device *flash_dev;
	int err;

	if (stream_buf == NULL) {
   31ba6:	4c2d      	ldr	r4, [pc, #180]	; (31c5c <dfu_target_mcuboot_init+0xb8>)
{
   31ba8:	4602      	mov	r2, r0
	if (stream_buf == NULL) {
   31baa:	6823      	ldr	r3, [r4, #0]
{
   31bac:	b089      	sub	sp, #36	; 0x24
	if (stream_buf == NULL) {
   31bae:	b973      	cbnz	r3, 31bce <dfu_target_mcuboot_init+0x2a>
   31bb0:	4b2b      	ldr	r3, [pc, #172]	; (31c60 <dfu_target_mcuboot_init+0xbc>)
   31bb2:	482c      	ldr	r0, [pc, #176]	; (31c64 <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("Missing stream_buf, call '..set_buf' before '..init");
   31bb4:	492c      	ldr	r1, [pc, #176]	; (31c68 <dfu_target_mcuboot_init+0xc4>)
   31bb6:	1ac0      	subs	r0, r0, r3
   31bb8:	08c0      	lsrs	r0, r0, #3
   31bba:	0180      	lsls	r0, r0, #6
   31bbc:	f040 0001 	orr.w	r0, r0, #1
   31bc0:	f00b fb9e 	bl	3d300 <log_string_sync>
		return -ENODEV;
   31bc4:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("dfu_target_stream_init failed %d", err);
		return err;
	}

	return 0;
}
   31bc8:	4620      	mov	r0, r4
   31bca:	b009      	add	sp, #36	; 0x24
   31bcc:	bd30      	pop	{r4, r5, pc}
	if (file_size > PM_MCUBOOT_SECONDARY_SIZE) {
   31bce:	f5b0 2fe0 	cmp.w	r0, #458752	; 0x70000
   31bd2:	d90e      	bls.n	31bf2 <dfu_target_mcuboot_init+0x4e>
   31bd4:	4b22      	ldr	r3, [pc, #136]	; (31c60 <dfu_target_mcuboot_init+0xbc>)
   31bd6:	4c23      	ldr	r4, [pc, #140]	; (31c64 <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("Requested file too big to fit in flash %zu > 0x%x",
   31bd8:	4924      	ldr	r1, [pc, #144]	; (31c6c <dfu_target_mcuboot_init+0xc8>)
   31bda:	1ae4      	subs	r4, r4, r3
   31bdc:	08e4      	lsrs	r4, r4, #3
   31bde:	01a4      	lsls	r4, r4, #6
   31be0:	f044 0001 	orr.w	r0, r4, #1
   31be4:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
   31be8:	f00b fb8a 	bl	3d300 <log_string_sync>
		return -EFBIG;
   31bec:	f06f 041a 	mvn.w	r4, #26
   31bf0:	e7ea      	b.n	31bc8 <dfu_target_mcuboot_init+0x24>
   31bf2:	481f      	ldr	r0, [pc, #124]	; (31c70 <dfu_target_mcuboot_init+0xcc>)
   31bf4:	f005 fa36 	bl	37064 <z_impl_device_get_binding>
	if (flash_dev == NULL) {
   31bf8:	b968      	cbnz	r0, 31c16 <dfu_target_mcuboot_init+0x72>
   31bfa:	4b19      	ldr	r3, [pc, #100]	; (31c60 <dfu_target_mcuboot_init+0xbc>)
   31bfc:	4819      	ldr	r0, [pc, #100]	; (31c64 <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("Failed to get device '%s'",
   31bfe:	4a1c      	ldr	r2, [pc, #112]	; (31c70 <dfu_target_mcuboot_init+0xcc>)
   31c00:	1ac0      	subs	r0, r0, r3
   31c02:	08c0      	lsrs	r0, r0, #3
   31c04:	0180      	lsls	r0, r0, #6
   31c06:	491b      	ldr	r1, [pc, #108]	; (31c74 <dfu_target_mcuboot_init+0xd0>)
   31c08:	f040 0001 	orr.w	r0, r0, #1
   31c0c:	f00b fb78 	bl	3d300 <log_string_sync>
		return -EFAULT;
   31c10:	f06f 040d 	mvn.w	r4, #13
   31c14:	e7d8      	b.n	31bc8 <dfu_target_mcuboot_init+0x24>
	err = dfu_target_stream_init(&(struct dfu_target_stream_init){
   31c16:	4b18      	ldr	r3, [pc, #96]	; (31c78 <dfu_target_mcuboot_init+0xd4>)
   31c18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   31c1c:	e9cd 3001 	strd	r3, r0, [sp, #4]
   31c20:	6823      	ldr	r3, [r4, #0]
   31c22:	2500      	movs	r5, #0
   31c24:	9303      	str	r3, [sp, #12]
   31c26:	4b15      	ldr	r3, [pc, #84]	; (31c7c <dfu_target_mcuboot_init+0xd8>)
   31c28:	a801      	add	r0, sp, #4
   31c2a:	681b      	ldr	r3, [r3, #0]
   31c2c:	9507      	str	r5, [sp, #28]
   31c2e:	9304      	str	r3, [sp, #16]
   31c30:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
   31c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
   31c38:	f7ff fcea 	bl	31610 <dfu_target_stream_init>
	if (err < 0) {
   31c3c:	1e04      	subs	r4, r0, #0
   31c3e:	da0b      	bge.n	31c58 <dfu_target_mcuboot_init+0xb4>
   31c40:	4b07      	ldr	r3, [pc, #28]	; (31c60 <dfu_target_mcuboot_init+0xbc>)
   31c42:	4808      	ldr	r0, [pc, #32]	; (31c64 <dfu_target_mcuboot_init+0xc0>)
		LOG_ERR("dfu_target_stream_init failed %d", err);
   31c44:	4622      	mov	r2, r4
   31c46:	1ac0      	subs	r0, r0, r3
   31c48:	08c0      	lsrs	r0, r0, #3
   31c4a:	0180      	lsls	r0, r0, #6
   31c4c:	490c      	ldr	r1, [pc, #48]	; (31c80 <dfu_target_mcuboot_init+0xdc>)
   31c4e:	f040 0001 	orr.w	r0, r0, #1
   31c52:	f00b fb55 	bl	3d300 <log_string_sync>
		return err;
   31c56:	e7b7      	b.n	31bc8 <dfu_target_mcuboot_init+0x24>
	return 0;
   31c58:	462c      	mov	r4, r5
   31c5a:	e7b5      	b.n	31bc8 <dfu_target_mcuboot_init+0x24>
   31c5c:	20019d90 	.word	0x20019d90
   31c60:	0004339c 	.word	0x0004339c
   31c64:	000433ec 	.word	0x000433ec
   31c68:	0004abb9 	.word	0x0004abb9
   31c6c:	0004abed 	.word	0x0004abed
   31c70:	00045d59 	.word	0x00045d59
   31c74:	0004ac1f 	.word	0x0004ac1f
   31c78:	0004ac39 	.word	0x0004ac39
   31c7c:	20019d94 	.word	0x20019d94
   31c80:	0004ac41 	.word	0x0004ac41

00031c84 <dfu_target_mcuboot_done>:
{
	return dfu_target_stream_write(buf, len);
}

int dfu_target_mcuboot_done(bool successful)
{
   31c84:	b570      	push	{r4, r5, r6, lr}
   31c86:	4606      	mov	r6, r0
	int err = 0;

	err = dfu_target_stream_done(successful);
   31c88:	f7ff fd20 	bl	316cc <dfu_target_stream_done>
	if (err != 0) {
   31c8c:	4d14      	ldr	r5, [pc, #80]	; (31ce0 <dfu_target_mcuboot_done+0x5c>)
   31c8e:	4b15      	ldr	r3, [pc, #84]	; (31ce4 <dfu_target_mcuboot_done+0x60>)
   31c90:	4604      	mov	r4, r0
   31c92:	1aed      	subs	r5, r5, r3
   31c94:	08ed      	lsrs	r5, r5, #3
   31c96:	01ad      	lsls	r5, r5, #6
   31c98:	b138      	cbz	r0, 31caa <dfu_target_mcuboot_done+0x26>
		LOG_ERR("dfu_target_stream_done error %d", err);
   31c9a:	4602      	mov	r2, r0
   31c9c:	4912      	ldr	r1, [pc, #72]	; (31ce8 <dfu_target_mcuboot_done+0x64>)
			LOG_ERR("Unable to delete last page: %d", err);
			return err;
		}
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
		if (err != 0) {
			LOG_ERR("boot_request_upgrade error %d", err);
   31c9e:	f045 0001 	orr.w	r0, r5, #1
   31ca2:	f00b fb2d 	bl	3d300 <log_string_sync>
	} else {
		LOG_INF("MCUBoot image upgrade aborted.");
	}

	return err;
}
   31ca6:	4620      	mov	r0, r4
   31ca8:	bd70      	pop	{r4, r5, r6, pc}
	if (successful) {
   31caa:	b1b6      	cbz	r6, 31cda <dfu_target_mcuboot_done+0x56>
		err = stream_flash_erase_page(dfu_target_stream_get_stream(),
   31cac:	f7ff fcac 	bl	31608 <dfu_target_stream_get_stream>
   31cb0:	490e      	ldr	r1, [pc, #56]	; (31cec <dfu_target_mcuboot_done+0x68>)
   31cb2:	f7f3 f969 	bl	24f88 <stream_flash_erase_page>
		if (err != 0) {
   31cb6:	4604      	mov	r4, r0
   31cb8:	b110      	cbz	r0, 31cc0 <dfu_target_mcuboot_done+0x3c>
			LOG_ERR("Unable to delete last page: %d", err);
   31cba:	4602      	mov	r2, r0
   31cbc:	490c      	ldr	r1, [pc, #48]	; (31cf0 <dfu_target_mcuboot_done+0x6c>)
   31cbe:	e7ee      	b.n	31c9e <dfu_target_mcuboot_done+0x1a>
		err = boot_request_upgrade(BOOT_UPGRADE_TEST);
   31cc0:	f00c fa0d 	bl	3e0de <boot_request_upgrade>
		if (err != 0) {
   31cc4:	4604      	mov	r4, r0
   31cc6:	b110      	cbz	r0, 31cce <dfu_target_mcuboot_done+0x4a>
			LOG_ERR("boot_request_upgrade error %d", err);
   31cc8:	4602      	mov	r2, r0
   31cca:	490a      	ldr	r1, [pc, #40]	; (31cf4 <dfu_target_mcuboot_done+0x70>)
   31ccc:	e7e7      	b.n	31c9e <dfu_target_mcuboot_done+0x1a>
		LOG_INF("MCUBoot image upgrade scheduled. "
   31cce:	490a      	ldr	r1, [pc, #40]	; (31cf8 <dfu_target_mcuboot_done+0x74>)
		LOG_INF("MCUBoot image upgrade aborted.");
   31cd0:	f045 0003 	orr.w	r0, r5, #3
   31cd4:	f00b fb14 	bl	3d300 <log_string_sync>
   31cd8:	e7e5      	b.n	31ca6 <dfu_target_mcuboot_done+0x22>
   31cda:	4908      	ldr	r1, [pc, #32]	; (31cfc <dfu_target_mcuboot_done+0x78>)
   31cdc:	e7f8      	b.n	31cd0 <dfu_target_mcuboot_done+0x4c>
   31cde:	bf00      	nop
   31ce0:	000433ec 	.word	0x000433ec
   31ce4:	0004339c 	.word	0x0004339c
   31ce8:	0004ac62 	.word	0x0004ac62
   31cec:	000effff 	.word	0x000effff
   31cf0:	0004ac82 	.word	0x0004ac82
   31cf4:	0004aca1 	.word	0x0004aca1
   31cf8:	0004acbf 	.word	0x0004acbf
   31cfc:	0004acf6 	.word	0x0004acf6

00031d00 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(const struct device *dev)
{
   31d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31d04:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   31d06:	4c21      	ldr	r4, [pc, #132]	; (31d8c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							uint32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const uint32_t ext_api_magic[] = {EXT_API_MAGIC};
   31d08:	4e21      	ldr	r6, [pc, #132]	; (31d90 <check_ext_api_requests+0x90>)
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31d0a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   31d0e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 31d98 <check_ext_api_requests+0x98>
{
   31d12:	b085      	sub	sp, #20
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31d14:	45a8      	cmp	r8, r5
   31d16:	d803      	bhi.n	31d20 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   31d18:	2000      	movs	r0, #0
   31d1a:	b005      	add	sp, #20
   31d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((uint32_t)*(ext_api_req->ext_api))
   31d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31d22:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   31d26:	681f      	ldr	r7, [r3, #0]
   31d28:	ab01      	add	r3, sp, #4
   31d2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   31d2e:	220c      	movs	r2, #12
   31d30:	4619      	mov	r1, r3
   31d32:	4638      	mov	r0, r7
   31d34:	f00f ffa5 	bl	41c82 <memcmp>
   31d38:	b990      	cbnz	r0, 31d60 <check_ext_api_requests+0x60>
   31d3a:	b18f      	cbz	r7, 31d60 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   31d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const uint32_t req_id = ext_api_req->request.ext_api_id;
   31d3e:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   31d40:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   31d42:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   31d44:	4291      	cmp	r1, r2
   31d46:	d10b      	bne.n	31d60 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   31d48:	699a      	ldr	r2, [r3, #24]
	const uint32_t req_min_version = ext_api_req->request.ext_api_version;
   31d4a:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   31d4c:	4291      	cmp	r1, r2
   31d4e:	d807      	bhi.n	31d60 <check_ext_api_requests+0x60>
	const uint32_t req_max_version = ext_api_req->ext_api_max_version;
   31d50:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   31d52:	4291      	cmp	r1, r2
   31d54:	d904      	bls.n	31d60 <check_ext_api_requests+0x60>
	const uint32_t req_flags = ext_api_req->request.ext_api_flags;
   31d56:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   31d58:	695b      	ldr	r3, [r3, #20]
   31d5a:	ea32 0303 	bics.w	r3, r2, r3
   31d5e:	d00a      	beq.n	31d76 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   31d60:	6a27      	ldr	r7, [r4, #32]
   31d62:	b167      	cbz	r7, 31d7e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   31d64:	480b      	ldr	r0, [pc, #44]	; (31d94 <check_ext_api_requests+0x94>)
   31d66:	f00b f806 	bl	3cd76 <printk>
			k_panic();
   31d6a:	4040      	eors	r0, r0
   31d6c:	f380 8811 	msr	BASEPRI, r0
   31d70:	f04f 0004 	mov.w	r0, #4
   31d74:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   31d76:	68e3      	ldr	r3, [r4, #12]
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31d78:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   31d7a:	441c      	add	r4, r3
	for (uint32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   31d7c:	e7ca      	b.n	31d14 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   31d7e:	4648      	mov	r0, r9
   31d80:	f00a fff9 	bl	3cd76 <printk>
			*ext_api_req->ext_api = NULL;
   31d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   31d86:	601f      	str	r7, [r3, #0]
   31d88:	e7f5      	b.n	31d76 <check_ext_api_requests+0x76>
   31d8a:	bf00      	nop
   31d8c:	0001c43c 	.word	0x0001c43c
   31d90:	0004356c 	.word	0x0004356c
   31d94:	0004ad28 	.word	0x0004ad28
   31d98:	0004ad51 	.word	0x0004ad51

00031d9c <sensor_sim_channel_get>:

static int sensor_sim_channel_get(const struct device *dev,
				  enum sensor_channel chan,
				  struct sensor_value *sample)
{
   31d9c:	b538      	push	{r3, r4, r5, lr}
   31d9e:	4614      	mov	r4, r2
   31da0:	2910      	cmp	r1, #16
   31da2:	d82f      	bhi.n	31e04 <sensor_sim_channel_get+0x68>
   31da4:	e8df f001 	tbb	[pc, r1]
   31da8:	18140d09 	.word	0x18140d09
   31dac:	2e2e2e2e 	.word	0x2e2e2e2e
   31db0:	2e2e2e2e 	.word	0x2e2e2e2e
   31db4:	2e2c282e 	.word	0x2e2c282e
   31db8:	2a          	.byte	0x2a
   31db9:	00          	.byte	0x00
	switch (chan) {
	case SENSOR_CHAN_ACCEL_X:
		double_to_sensor_value(accel_samples[0], sample);
   31dba:	4b14      	ldr	r3, [pc, #80]	; (31e0c <sensor_sim_channel_get+0x70>)
		break;
	case SENSOR_CHAN_HUMIDITY:
		double_to_sensor_value(humidity_sample, sample);
		break;
	case SENSOR_CHAN_PRESS:
		double_to_sensor_value(pressure_sample, sample);
   31dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
   31dc0:	e002      	b.n	31dc8 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[1], sample);
   31dc2:	4b12      	ldr	r3, [pc, #72]	; (31e0c <sensor_sim_channel_get+0x70>)
   31dc4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
		double_to_sensor_value(pressure_sample, sample);
   31dc8:	f7ec fa0e 	bl	1e1e8 <double_to_sensor_value>
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   31dcc:	2000      	movs	r0, #0
}
   31dce:	bd38      	pop	{r3, r4, r5, pc}
		double_to_sensor_value(accel_samples[2], sample);
   31dd0:	4b0e      	ldr	r3, [pc, #56]	; (31e0c <sensor_sim_channel_get+0x70>)
   31dd2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
   31dd6:	e7f7      	b.n	31dc8 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(accel_samples[0], sample);
   31dd8:	4d0c      	ldr	r5, [pc, #48]	; (31e0c <sensor_sim_channel_get+0x70>)
   31dda:	e9d5 0100 	ldrd	r0, r1, [r5]
   31dde:	f7ec fa03 	bl	1e1e8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[1], ++sample);
   31de2:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
   31de6:	f104 0208 	add.w	r2, r4, #8
   31dea:	f7ec f9fd 	bl	1e1e8 <double_to_sensor_value>
		double_to_sensor_value(accel_samples[2], ++sample);
   31dee:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
   31df2:	f104 0210 	add.w	r2, r4, #16
   31df6:	e7e7      	b.n	31dc8 <sensor_sim_channel_get+0x2c>
		double_to_sensor_value(temp_sample, sample);
   31df8:	4b05      	ldr	r3, [pc, #20]	; (31e10 <sensor_sim_channel_get+0x74>)
   31dfa:	e7df      	b.n	31dbc <sensor_sim_channel_get+0x20>
		double_to_sensor_value(humidity_sample, sample);
   31dfc:	4b05      	ldr	r3, [pc, #20]	; (31e14 <sensor_sim_channel_get+0x78>)
   31dfe:	e7dd      	b.n	31dbc <sensor_sim_channel_get+0x20>
		double_to_sensor_value(pressure_sample, sample);
   31e00:	4b05      	ldr	r3, [pc, #20]	; (31e18 <sensor_sim_channel_get+0x7c>)
   31e02:	e7db      	b.n	31dbc <sensor_sim_channel_get+0x20>
	return 0;
   31e04:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31e08:	e7e1      	b.n	31dce <sensor_sim_channel_get+0x32>
   31e0a:	bf00      	nop
   31e0c:	200185f8 	.word	0x200185f8
   31e10:	20018928 	.word	0x20018928
   31e14:	20018610 	.word	0x20018610
   31e18:	20018618 	.word	0x20018618

00031e1c <sensor_sim_trigger_set>:
{
   31e1c:	b508      	push	{r3, lr}
	struct sensor_sim_data *drv_data = dev->data;
   31e1e:	68c3      	ldr	r3, [r0, #12]
	switch (trig->type) {
   31e20:	8808      	ldrh	r0, [r1, #0]
   31e22:	2801      	cmp	r0, #1
   31e24:	d104      	bne.n	31e30 <sensor_sim_trigger_set+0x14>
		drv_data->drdy_trigger = *trig;
   31e26:	6808      	ldr	r0, [r1, #0]
		drv_data->drdy_handler = handler;
   31e28:	631a      	str	r2, [r3, #48]	; 0x30
		drv_data->drdy_trigger = *trig;
   31e2a:	6358      	str	r0, [r3, #52]	; 0x34
	int ret = 0;
   31e2c:	2000      	movs	r0, #0
}
   31e2e:	bd08      	pop	{r3, pc}
   31e30:	4b06      	ldr	r3, [pc, #24]	; (31e4c <sensor_sim_trigger_set+0x30>)
   31e32:	4807      	ldr	r0, [pc, #28]	; (31e50 <sensor_sim_trigger_set+0x34>)
		LOG_ERR("Unsupported sensor trigger");
   31e34:	4907      	ldr	r1, [pc, #28]	; (31e54 <sensor_sim_trigger_set+0x38>)
   31e36:	1ac0      	subs	r0, r0, r3
   31e38:	08c0      	lsrs	r0, r0, #3
   31e3a:	0180      	lsls	r0, r0, #6
   31e3c:	f040 0001 	orr.w	r0, r0, #1
   31e40:	f00b fa5e 	bl	3d300 <log_string_sync>
	return ret;
   31e44:	f06f 0085 	mvn.w	r0, #133	; 0x85
   31e48:	e7f1      	b.n	31e2e <sensor_sim_trigger_set+0x12>
   31e4a:	bf00      	nop
   31e4c:	0004339c 	.word	0x0004339c
   31e50:	000434cc 	.word	0x000434cc
   31e54:	0004ad84 	.word	0x0004ad84

00031e58 <sensor_sim_init>:
{
   31e58:	b530      	push	{r4, r5, lr}
	struct sensor_sim_data *drv_data = dev->data;
   31e5a:	68c5      	ldr	r5, [r0, #12]
{
   31e5c:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   31e5e:	2200      	movs	r2, #0
   31e60:	2300      	movs	r3, #0
   31e62:	2400      	movs	r4, #0
   31e64:	e9cd 2306 	strd	r2, r3, [sp, #24]
   31e68:	f06f 0305 	mvn.w	r3, #5
   31e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   31e70:	f105 0138 	add.w	r1, r5, #56	; 0x38
   31e74:	e9cd 3403 	strd	r3, r4, [sp, #12]
   31e78:	9000      	str	r0, [sp, #0]
   31e7a:	4b07      	ldr	r3, [pc, #28]	; (31e98 <sensor_sim_init+0x40>)
   31e7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   31e80:	f505 700e 	add.w	r0, r5, #568	; 0x238
   31e84:	f007 fb7a 	bl	3957c <z_impl_k_thread_create>
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   31e88:	f7f4 fa24 	bl	262d4 <z_timer_cycle_get_32>
	srand(k_cycle_get_32());
   31e8c:	f009 fade 	bl	3b44c <srand>
}
   31e90:	4620      	mov	r0, r4
   31e92:	b009      	add	sp, #36	; 0x24
   31e94:	bd30      	pop	{r4, r5, pc}
   31e96:	bf00      	nop
   31e98:	00040057 	.word	0x00040057

00031e9c <gps_priority_set.isra.0>:
{
	k_delayed_work_cancel(&drv_data->timeout_work);
	k_delayed_work_cancel(&drv_data->blocked_work);
}

static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   31e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	int retval;
	nrf_gnss_delete_mask_t delete_mask = 0;
   31e9e:	2300      	movs	r3, #0
static int gps_priority_set(struct gps_drv_data *drv_data, bool enable)
   31ea0:	4604      	mov	r4, r0
	nrf_gnss_delete_mask_t delete_mask = 0;
   31ea2:	9303      	str	r3, [sp, #12]

	if (enable) {
   31ea4:	6800      	ldr	r0, [r0, #0]
   31ea6:	b359      	cbz	r1, 31f00 <gps_priority_set.isra.0+0x64>
		retval = nrf_setsockopt(drv_data->socket,
   31ea8:	220a      	movs	r2, #10
   31eaa:	f44f 7101 	mov.w	r1, #516	; 0x204
   31eae:	9300      	str	r3, [sp, #0]
   31eb0:	f00f fca2 	bl	417f8 <nrf_setsockopt>
					NRF_SOL_GNSS,
					NRF_SO_GNSS_ENABLE_PRIORITY, NULL, 0);
		if (retval != 0) {
   31eb4:	b118      	cbz	r0, 31ebe <gps_priority_set.isra.0+0x22>
				NRF_SO_GNSS_START,
				&delete_mask,
				sizeof(delete_mask));
	if (retval != 0) {
		LOG_ERR("Failed to start GPS");
		return -EIO;
   31eb6:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   31eba:	b004      	add	sp, #16
   31ebc:	bd10      	pop	{r4, pc}
   31ebe:	4b19      	ldr	r3, [pc, #100]	; (31f24 <gps_priority_set.isra.0+0x88>)
   31ec0:	4819      	ldr	r0, [pc, #100]	; (31f28 <gps_priority_set.isra.0+0x8c>)
		LOG_DBG("GPS priority enabled");
   31ec2:	4a1a      	ldr	r2, [pc, #104]	; (31f2c <gps_priority_set.isra.0+0x90>)
   31ec4:	1a1b      	subs	r3, r3, r0
   31ec6:	08db      	lsrs	r3, r3, #3
   31ec8:	4919      	ldr	r1, [pc, #100]	; (31f30 <gps_priority_set.isra.0+0x94>)
   31eca:	019b      	lsls	r3, r3, #6
		LOG_DBG("GPS priority disabled");
   31ecc:	f043 0004 	orr.w	r0, r3, #4
   31ed0:	f00b fa16 	bl	3d300 <log_string_sync>
	retval = nrf_setsockopt(drv_data->socket,
   31ed4:	2304      	movs	r3, #4
   31ed6:	2207      	movs	r2, #7
   31ed8:	9300      	str	r3, [sp, #0]
   31eda:	f44f 7101 	mov.w	r1, #516	; 0x204
   31ede:	6820      	ldr	r0, [r4, #0]
   31ee0:	ab03      	add	r3, sp, #12
   31ee2:	f00f fc89 	bl	417f8 <nrf_setsockopt>
	if (retval != 0) {
   31ee6:	2800      	cmp	r0, #0
   31ee8:	d0e7      	beq.n	31eba <gps_priority_set.isra.0+0x1e>
   31eea:	4b0f      	ldr	r3, [pc, #60]	; (31f28 <gps_priority_set.isra.0+0x8c>)
   31eec:	480d      	ldr	r0, [pc, #52]	; (31f24 <gps_priority_set.isra.0+0x88>)
		LOG_ERR("Failed to start GPS");
   31eee:	4911      	ldr	r1, [pc, #68]	; (31f34 <gps_priority_set.isra.0+0x98>)
   31ef0:	1ac0      	subs	r0, r0, r3
   31ef2:	08c0      	lsrs	r0, r0, #3
   31ef4:	0180      	lsls	r0, r0, #6
   31ef6:	f040 0001 	orr.w	r0, r0, #1
   31efa:	f00b fa01 	bl	3d300 <log_string_sync>
   31efe:	e7da      	b.n	31eb6 <gps_priority_set.isra.0+0x1a>
		retval = nrf_setsockopt(drv_data->socket,
   31f00:	460b      	mov	r3, r1
   31f02:	9100      	str	r1, [sp, #0]
   31f04:	220b      	movs	r2, #11
   31f06:	f44f 7101 	mov.w	r1, #516	; 0x204
   31f0a:	f00f fc75 	bl	417f8 <nrf_setsockopt>
		if (retval != 0) {
   31f0e:	2800      	cmp	r0, #0
   31f10:	d1d1      	bne.n	31eb6 <gps_priority_set.isra.0+0x1a>
   31f12:	4b04      	ldr	r3, [pc, #16]	; (31f24 <gps_priority_set.isra.0+0x88>)
   31f14:	4804      	ldr	r0, [pc, #16]	; (31f28 <gps_priority_set.isra.0+0x8c>)
		LOG_DBG("GPS priority disabled");
   31f16:	4a05      	ldr	r2, [pc, #20]	; (31f2c <gps_priority_set.isra.0+0x90>)
   31f18:	1a1b      	subs	r3, r3, r0
   31f1a:	08db      	lsrs	r3, r3, #3
   31f1c:	4906      	ldr	r1, [pc, #24]	; (31f38 <gps_priority_set.isra.0+0x9c>)
   31f1e:	019b      	lsls	r3, r3, #6
   31f20:	e7d4      	b.n	31ecc <gps_priority_set.isra.0+0x30>
   31f22:	bf00      	nop
   31f24:	0004347c 	.word	0x0004347c
   31f28:	0004339c 	.word	0x0004339c
   31f2c:	0004b499 	.word	0x0004b499
   31f30:	0004adaa 	.word	0x0004adaa
   31f34:	0004addd 	.word	0x0004addd
   31f38:	0004adc3 	.word	0x0004adc3

00031f3c <blocked_work_fn>:
	atomic_set(&drv_data->timeout_occurred, 1);
	notify_event(dev, &evt);
}

static void blocked_work_fn(struct k_work *work)
{
   31f3c:	b508      	push	{r3, lr}
	int retval;
	struct gps_drv_data *drv_data =
		CONTAINER_OF(work, struct gps_drv_data, blocked_work);

	retval = gps_priority_set(drv_data, true);
   31f3e:	2101      	movs	r1, #1
   31f40:	f6a0 1058 	subw	r0, r0, #2392	; 0x958
   31f44:	f7ff ffaa 	bl	31e9c <gps_priority_set.isra.0>
	if (retval != 0) {
   31f48:	b160      	cbz	r0, 31f64 <blocked_work_fn+0x28>
   31f4a:	4a07      	ldr	r2, [pc, #28]	; (31f68 <blocked_work_fn+0x2c>)
   31f4c:	4b07      	ldr	r3, [pc, #28]	; (31f6c <blocked_work_fn+0x30>)
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   31f4e:	4908      	ldr	r1, [pc, #32]	; (31f70 <blocked_work_fn+0x34>)
   31f50:	1a9b      	subs	r3, r3, r2
   31f52:	08db      	lsrs	r3, r3, #3
   31f54:	019b      	lsls	r3, r3, #6
   31f56:	4602      	mov	r2, r0
   31f58:	f043 0001 	orr.w	r0, r3, #1
	}
}
   31f5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		LOG_ERR("Failed to set GPS priority, error: %d", retval);
   31f60:	f00b b9ce 	b.w	3d300 <log_string_sync>
}
   31f64:	bd08      	pop	{r3, pc}
   31f66:	bf00      	nop
   31f68:	0004339c 	.word	0x0004339c
   31f6c:	0004347c 	.word	0x0004347c
   31f70:	0004adf1 	.word	0x0004adf1

00031f74 <open_socket.isra.0>:
static int open_socket(struct gps_drv_data *drv_data)
   31f74:	b510      	push	{r4, lr}
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   31f76:	f44f 7201 	mov.w	r2, #516	; 0x204
static int open_socket(struct gps_drv_data *drv_data)
   31f7a:	4604      	mov	r4, r0
	drv_data->socket = nrf_socket(NRF_AF_LOCAL, NRF_SOCK_DGRAM,
   31f7c:	2102      	movs	r1, #2
   31f7e:	2001      	movs	r0, #1
   31f80:	f00f fb94 	bl	416ac <nrf_socket>
   31f84:	4603      	mov	r3, r0
   31f86:	6020      	str	r0, [r4, #0]
	if (drv_data->socket >= 0) {
   31f88:	4c0e      	ldr	r4, [pc, #56]	; (31fc4 <open_socket.isra.0+0x50>)
   31f8a:	480f      	ldr	r0, [pc, #60]	; (31fc8 <open_socket.isra.0+0x54>)
   31f8c:	2b00      	cmp	r3, #0
   31f8e:	eba4 0400 	sub.w	r4, r4, r0
   31f92:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   31f96:	ea4f 1484 	mov.w	r4, r4, lsl #6
   31f9a:	db07      	blt.n	31fac <open_socket.isra.0+0x38>
		LOG_DBG("GPS socket created, fd: %d", drv_data->socket);
   31f9c:	f044 0004 	orr.w	r0, r4, #4
   31fa0:	4a0a      	ldr	r2, [pc, #40]	; (31fcc <open_socket.isra.0+0x58>)
   31fa2:	490b      	ldr	r1, [pc, #44]	; (31fd0 <open_socket.isra.0+0x5c>)
   31fa4:	f00b f9ac 	bl	3d300 <log_string_sync>
	return 0;
   31fa8:	2000      	movs	r0, #0
}
   31faa:	bd10      	pop	{r4, pc}
		LOG_ERR("Could not initialize socket, error: %d)",
   31fac:	f00c f895 	bl	3e0da <__errno>
   31fb0:	f044 0401 	orr.w	r4, r4, #1
   31fb4:	6802      	ldr	r2, [r0, #0]
   31fb6:	4907      	ldr	r1, [pc, #28]	; (31fd4 <open_socket.isra.0+0x60>)
   31fb8:	4620      	mov	r0, r4
   31fba:	f00b f9a1 	bl	3d300 <log_string_sync>
		return -EIO;
   31fbe:	f06f 0004 	mvn.w	r0, #4
   31fc2:	e7f2      	b.n	31faa <open_socket.isra.0+0x36>
   31fc4:	0004347c 	.word	0x0004347c
   31fc8:	0004339c 	.word	0x0004339c
   31fcc:	0004b48d 	.word	0x0004b48d
   31fd0:	0004ae17 	.word	0x0004ae17
   31fd4:	0004ae36 	.word	0x0004ae36

00031fd8 <agps_write>:

static int agps_write(const struct device *dev, enum gps_agps_type type,
		      void *data, size_t data_len)
{
   31fd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   31fda:	460c      	mov	r4, r1
   31fdc:	4611      	mov	r1, r2
   31fde:	461a      	mov	r2, r3
	int err;
	struct gps_drv_data *drv_data = dev->data;
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   31fe0:	4b18      	ldr	r3, [pc, #96]	; (32044 <agps_write+0x6c>)
	struct gps_drv_data *drv_data = dev->data;
   31fe2:	68c0      	ldr	r0, [r0, #12]
	nrf_gnss_agps_data_type_t data_type = type_lookup_gps2socket[type];
   31fe4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   31fe8:	f8ad 300e 	strh.w	r3, [sp, #14]

	err = nrf_sendto(drv_data->socket, data, data_len, 0, &data_type,
   31fec:	2302      	movs	r3, #2
   31fee:	9301      	str	r3, [sp, #4]
   31ff0:	f10d 030e 	add.w	r3, sp, #14
   31ff4:	9300      	str	r3, [sp, #0]
   31ff6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   31ff8:	2300      	movs	r3, #0
   31ffa:	f00f fb75 	bl	416e8 <nrf_sendto>
			 sizeof(data_type));
	if (err < 0) {
   31ffe:	4b12      	ldr	r3, [pc, #72]	; (32048 <agps_write+0x70>)
   32000:	4a12      	ldr	r2, [pc, #72]	; (3204c <agps_write+0x74>)
   32002:	2800      	cmp	r0, #0
   32004:	eba3 0302 	sub.w	r3, r3, r2
   32008:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   3200c:	ea4f 1083 	mov.w	r0, r3, lsl #6
   32010:	da0e      	bge.n	32030 <agps_write+0x58>
		LOG_ERR("Failed to send A-GPS data to modem, errno: %d", errno);
   32012:	f040 0401 	orr.w	r4, r0, #1
   32016:	f00c f860 	bl	3e0da <__errno>
   3201a:	490d      	ldr	r1, [pc, #52]	; (32050 <agps_write+0x78>)
   3201c:	6802      	ldr	r2, [r0, #0]
   3201e:	4620      	mov	r0, r4
   32020:	f00b f96e 	bl	3d300 <log_string_sync>
		return -errno;
   32024:	f00c f859 	bl	3e0da <__errno>
   32028:	6800      	ldr	r0, [r0, #0]
   3202a:	4240      	negs	r0, r0
	}

	LOG_DBG("Sent A-GPS data to modem, type: %d", type);

	return 0;
}
   3202c:	b004      	add	sp, #16
   3202e:	bd10      	pop	{r4, pc}
	LOG_DBG("Sent A-GPS data to modem, type: %d", type);
   32030:	f040 0004 	orr.w	r0, r0, #4
   32034:	4623      	mov	r3, r4
   32036:	4a07      	ldr	r2, [pc, #28]	; (32054 <agps_write+0x7c>)
   32038:	4907      	ldr	r1, [pc, #28]	; (32058 <agps_write+0x80>)
   3203a:	f00b f961 	bl	3d300 <log_string_sync>
	return 0;
   3203e:	2000      	movs	r0, #0
   32040:	e7f4      	b.n	3202c <agps_write+0x54>
   32042:	bf00      	nop
   32044:	000441d4 	.word	0x000441d4
   32048:	0004347c 	.word	0x0004347c
   3204c:	0004339c 	.word	0x0004339c
   32050:	0004ae5e 	.word	0x0004ae5e
   32054:	0004b4e1 	.word	0x0004b4e1
   32058:	0004ae8c 	.word	0x0004ae8c

0003205c <start>:
	struct nrf9160_gps_config gps_cfg = { 0 };
   3205c:	2210      	movs	r2, #16
{
   3205e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct gps_drv_data *drv_data = dev->data;
   32062:	68c6      	ldr	r6, [r0, #12]
{
   32064:	b089      	sub	sp, #36	; 0x24
	struct nrf9160_gps_config gps_cfg = { 0 };
   32066:	eb0d 0002 	add.w	r0, sp, r2
{
   3206a:	460d      	mov	r5, r1
	struct nrf9160_gps_config gps_cfg = { 0 };
   3206c:	2100      	movs	r1, #0
   3206e:	f00f fe36 	bl	41cde <memset>
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   32072:	f106 0020 	add.w	r0, r6, #32
   32076:	f00e f817 	bl	400a8 <atomic_get>
   3207a:	2801      	cmp	r0, #1
   3207c:	f000 81a4 	beq.w	323c8 <start+0x36c>
	if (atomic_get(&drv_data->is_active)) {
   32080:	f106 071c 	add.w	r7, r6, #28
   32084:	4638      	mov	r0, r7
   32086:	f00e f80f 	bl	400a8 <atomic_get>
   3208a:	4cac      	ldr	r4, [pc, #688]	; (3233c <start+0x2e0>)
   3208c:	4bac      	ldr	r3, [pc, #688]	; (32340 <start+0x2e4>)
   3208e:	1ae4      	subs	r4, r4, r3
   32090:	08e4      	lsrs	r4, r4, #3
   32092:	b170      	cbz	r0, 320b2 <start+0x56>
		LOG_DBG("GPS is already active. Clean up before restart");
   32094:	01a0      	lsls	r0, r4, #6
   32096:	4aab      	ldr	r2, [pc, #684]	; (32344 <start+0x2e8>)
   32098:	49ab      	ldr	r1, [pc, #684]	; (32348 <start+0x2ec>)
   3209a:	f040 0004 	orr.w	r0, r0, #4
   3209e:	f00b f92f 	bl	3d300 <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   320a2:	f506 6015 	add.w	r0, r6, #2384	; 0x950
   320a6:	f007 fc5b 	bl	39960 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   320aa:	f506 6018 	add.w	r0, r6, #2432	; 0x980
   320ae:	f007 fc57 	bl	39960 <k_delayed_work_cancel>
	if (atomic_get(&drv_data->is_init) != 1) {
   320b2:	f106 0018 	add.w	r0, r6, #24
   320b6:	f00d fff7 	bl	400a8 <atomic_get>
   320ba:	2801      	cmp	r0, #1
   320bc:	d00b      	beq.n	320d6 <start+0x7a>
		LOG_WRN("GPS must be initialized first");
   320be:	01a4      	lsls	r4, r4, #6
   320c0:	49a2      	ldr	r1, [pc, #648]	; (3234c <start+0x2f0>)
   320c2:	f044 0002 	orr.w	r0, r4, #2
   320c6:	f00b f91b 	bl	3d300 <log_string_sync>
		return -ENODEV;
   320ca:	f06f 0512 	mvn.w	r5, #18
}
   320ce:	4628      	mov	r0, r5
   320d0:	b009      	add	sp, #36	; 0x24
   320d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (cfg_src->nav_mode) {
   320d6:	782a      	ldrb	r2, [r5, #0]
   320d8:	2a01      	cmp	r2, #1
   320da:	d016      	beq.n	3210a <start+0xae>
   320dc:	2a02      	cmp	r2, #2
   320de:	d018      	beq.n	32112 <start+0xb6>
   320e0:	bb7a      	cbnz	r2, 32142 <start+0xe6>
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   320e2:	68ab      	ldr	r3, [r5, #8]
		cfg_dst->interval = 0;
   320e4:	f8ad 2012 	strh.w	r2, [sp, #18]
		cfg_dst->retry = cfg_src->timeout < 0 ? 0 : cfg_src->timeout;
   320e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   320ec:	f8ad 3010 	strh.w	r3, [sp, #16]
	if (cfg_src->delete_agps_data) {
   320f0:	7b2b      	ldrb	r3, [r5, #12]
   320f2:	b10b      	cbz	r3, 320f8 <start+0x9c>
		cfg_dst->delete_mask = 0x7F;
   320f4:	237f      	movs	r3, #127	; 0x7f
   320f6:	9306      	str	r3, [sp, #24]
	*nmea_mask |= NRF_GNSS_NMEA_GGA_MASK;
   320f8:	2301      	movs	r3, #1
   320fa:	f8ad 3014 	strh.w	r3, [sp, #20]
	if (cfg_src->power_mode == GPS_POWER_MODE_PERFORMANCE) {
   320fe:	786b      	ldrb	r3, [r5, #1]
   32100:	2b01      	cmp	r3, #1
   32102:	d125      	bne.n	32150 <start+0xf4>
		cfg_dst->power_mode = NRF_GNSS_PSM_DUTY_CYCLING_POWER;
   32104:	f88d 301c 	strb.w	r3, [sp, #28]
   32108:	e024      	b.n	32154 <start+0xf8>
		cfg_dst->retry = 0;
   3210a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   3210e:	9304      	str	r3, [sp, #16]
		break;
   32110:	e7ee      	b.n	320f0 <start+0x94>
		if (cfg_src->interval < 10) {
   32112:	686b      	ldr	r3, [r5, #4]
   32114:	2b09      	cmp	r3, #9
   32116:	d80e      	bhi.n	32136 <start+0xda>
			LOG_ERR("Minimum periodic interval is 10 sec");
   32118:	01a0      	lsls	r0, r4, #6
   3211a:	498d      	ldr	r1, [pc, #564]	; (32350 <start+0x2f4>)
   3211c:	f040 0001 	orr.w	r0, r0, #1
   32120:	f00b f8ee 	bl	3d300 <log_string_sync>
		LOG_ERR("Invalid GPS configuration");
   32124:	01a4      	lsls	r4, r4, #6
   32126:	498b      	ldr	r1, [pc, #556]	; (32354 <start+0x2f8>)
   32128:	f044 0001 	orr.w	r0, r4, #1
   3212c:	f00b f8e8 	bl	3d300 <log_string_sync>
		return err;
   32130:	f06f 0515 	mvn.w	r5, #21
   32134:	e7cb      	b.n	320ce <start+0x72>
		cfg_dst->retry = cfg_src->timeout;
   32136:	68aa      	ldr	r2, [r5, #8]
		cfg_dst->interval = cfg_src->interval;
   32138:	f8ad 3012 	strh.w	r3, [sp, #18]
		cfg_dst->retry = cfg_src->timeout;
   3213c:	f8ad 2010 	strh.w	r2, [sp, #16]
		break;
   32140:	e7d6      	b.n	320f0 <start+0x94>
		LOG_ERR("Invalid operation mode (%d), GPS will not start",
   32142:	01a0      	lsls	r0, r4, #6
   32144:	4984      	ldr	r1, [pc, #528]	; (32358 <start+0x2fc>)
   32146:	f040 0001 	orr.w	r0, r0, #1
   3214a:	f00b f8d9 	bl	3d300 <log_string_sync>
	if (err) {
   3214e:	e7e9      	b.n	32124 <start+0xc8>
	} else if (cfg_src->power_mode == GPS_POWER_MODE_SAVE) {
   32150:	2b02      	cmp	r3, #2
   32152:	d0d7      	beq.n	32104 <start+0xa8>
	cfg_dst->priority = cfg_src->priority;
   32154:	7b6b      	ldrb	r3, [r5, #13]
   32156:	f88d 301e 	strb.w	r3, [sp, #30]
	if (cfg_src->use_case == GPS_USE_CASE_SINGLE_COLD_START) {
   3215a:	78ab      	ldrb	r3, [r5, #2]
   3215c:	b913      	cbnz	r3, 32164 <start+0x108>
		cfg_dst->use_case = NRF_GNSS_USE_CASE_MULTIPLE_HOT_START;
   3215e:	f88d 301d 	strb.w	r3, [sp, #29]
   32162:	e001      	b.n	32168 <start+0x10c>
	} else if (cfg_src->use_case == GPS_USE_CASE_MULTIPLE_HOT_START) {
   32164:	2b01      	cmp	r3, #1
   32166:	d0fa      	beq.n	3215e <start+0x102>
	} else if (cfg_src->accuracy == GPS_ACCURACY_LOW) {
   32168:	78eb      	ldrb	r3, [r5, #3]
   3216a:	2b01      	cmp	r3, #1
   3216c:	d105      	bne.n	3217a <start+0x11e>
		cfg_dst->use_case |= NRF_GNSS_USE_CASE_LOW_ACCURACY;
   3216e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   32172:	f043 0302 	orr.w	r3, r3, #2
   32176:	f88d 301d 	strb.w	r3, [sp, #29]
	if (cfg != &drv_data->current_cfg) {
   3217a:	f106 0308 	add.w	r3, r6, #8
   3217e:	42ab      	cmp	r3, r5
   32180:	d007      	beq.n	32192 <start+0x136>
   32182:	f105 0210 	add.w	r2, r5, #16
   32186:	f855 1b04 	ldr.w	r1, [r5], #4
   3218a:	4295      	cmp	r5, r2
   3218c:	f843 1b04 	str.w	r1, [r3], #4
   32190:	d1f9      	bne.n	32186 <start+0x12a>
	err = lte_lc_system_mode_get(&system_mode);
   32192:	f10d 000e 	add.w	r0, sp, #14
   32196:	f7f9 fcc3 	bl	2bb20 <lte_lc_system_mode_get>
	if (err) {
   3219a:	01a4      	lsls	r4, r4, #6
   3219c:	4602      	mov	r2, r0
   3219e:	b140      	cbz	r0, 321b2 <start+0x156>
		LOG_ERR("Could not get modem system mode, error: %d", err);
   321a0:	496e      	ldr	r1, [pc, #440]	; (3235c <start+0x300>)
		LOG_ERR("Could not get modem's functional mode, error: %d",
   321a2:	f044 0001 	orr.w	r0, r4, #1
   321a6:	f00b f8ab 	bl	3d300 <log_string_sync>
		LOG_ERR("Failed to enable GPS");
   321aa:	496d      	ldr	r1, [pc, #436]	; (32360 <start+0x304>)
		LOG_ERR("Failed to set fix interval value");
   321ac:	f044 0001 	orr.w	r0, r4, #1
   321b0:	e059      	b.n	32266 <start+0x20a>
	    (system_mode != LTE_LC_SYSTEM_MODE_LTEM_GPS) &&
   321b2:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((system_mode != LTE_LC_SYSTEM_MODE_GPS) &&
   321b6:	1eda      	subs	r2, r3, #3
   321b8:	2a02      	cmp	r2, #2
   321ba:	d914      	bls.n	321e6 <start+0x18a>
		if (system_mode == LTE_LC_SYSTEM_MODE_LTEM) {
   321bc:	2b01      	cmp	r3, #1
   321be:	d010      	beq.n	321e2 <start+0x186>
			new_mode = LTE_LC_SYSTEM_MODE_NBIOT_GPS;
   321c0:	2b02      	cmp	r3, #2
   321c2:	bf14      	ite	ne
   321c4:	2503      	movne	r5, #3
   321c6:	2505      	moveq	r5, #5
		LOG_DBG("GPS mode is not enabled, attempting to enable it");
   321c8:	4a66      	ldr	r2, [pc, #408]	; (32364 <start+0x308>)
   321ca:	4967      	ldr	r1, [pc, #412]	; (32368 <start+0x30c>)
   321cc:	f044 0004 	orr.w	r0, r4, #4
   321d0:	f00b f896 	bl	3d300 <log_string_sync>
		err = lte_lc_system_mode_set(new_mode);
   321d4:	4628      	mov	r0, r5
   321d6:	f7f9 fbef 	bl	2b9b8 <lte_lc_system_mode_set>
		if (err) {
   321da:	4602      	mov	r2, r0
   321dc:	b118      	cbz	r0, 321e6 <start+0x18a>
			LOG_ERR("Could not enable GPS mode, error: %d", err);
   321de:	4963      	ldr	r1, [pc, #396]	; (3236c <start+0x310>)
   321e0:	e7df      	b.n	321a2 <start+0x146>
			new_mode = LTE_LC_SYSTEM_MODE_LTEM_GPS;
   321e2:	2504      	movs	r5, #4
   321e4:	e7f0      	b.n	321c8 <start+0x16c>
	LOG_DBG("GPS mode is enabled");
   321e6:	4a5f      	ldr	r2, [pc, #380]	; (32364 <start+0x308>)
   321e8:	4961      	ldr	r1, [pc, #388]	; (32370 <start+0x314>)
   321ea:	f044 0004 	orr.w	r0, r4, #4
   321ee:	f00b f887 	bl	3d300 <log_string_sync>
	err = lte_lc_func_mode_get(&functional_mode);
   321f2:	f10d 000f 	add.w	r0, sp, #15
   321f6:	f7f9 fe3d 	bl	2be74 <lte_lc_func_mode_get>
	if (err) {
   321fa:	4602      	mov	r2, r0
   321fc:	b108      	cbz	r0, 32202 <start+0x1a6>
		LOG_ERR("Could not get modem's functional mode, error: %d",
   321fe:	495d      	ldr	r1, [pc, #372]	; (32374 <start+0x318>)
   32200:	e7cf      	b.n	321a2 <start+0x146>
	if (functional_mode != LTE_LC_FUNC_MODE_NORMAL) {
   32202:	f89d 300f 	ldrb.w	r3, [sp, #15]
   32206:	2b01      	cmp	r3, #1
   32208:	d005      	beq.n	32216 <start+0x1ba>
		LOG_ERR("GPS is not supported in current functional mode");
   3220a:	495b      	ldr	r1, [pc, #364]	; (32378 <start+0x31c>)
   3220c:	f044 0001 	orr.w	r0, r4, #1
   32210:	f00b f876 	bl	3d300 <log_string_sync>
		return -EIO;
   32214:	e7c9      	b.n	321aa <start+0x14e>
	retval = nrf_setsockopt(drv_data->socket,
   32216:	2502      	movs	r5, #2
		LOG_DBG("Failed to set fix retry value, "
   32218:	f8df 8128 	ldr.w	r8, [pc, #296]	; 32344 <start+0x2e8>
   3221c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 3239c <start+0x340>
	retval = nrf_setsockopt(drv_data->socket,
   32220:	9500      	str	r5, [sp, #0]
   32222:	ab04      	add	r3, sp, #16
   32224:	2202      	movs	r2, #2
   32226:	f44f 7101 	mov.w	r1, #516	; 0x204
   3222a:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3222c:	f00f fae4 	bl	417f8 <nrf_setsockopt>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   32230:	1c43      	adds	r3, r0, #1
   32232:	d12a      	bne.n	3228a <start+0x22e>
   32234:	f00b ff51 	bl	3e0da <__errno>
   32238:	6803      	ldr	r3, [r0, #0]
   3223a:	2b0e      	cmp	r3, #14
   3223c:	d116      	bne.n	3226c <start+0x210>
		nrf_close(drv_data->socket);
   3223e:	46b2      	mov	sl, r6
		LOG_DBG("Failed to set fix retry value, "
   32240:	4642      	mov	r2, r8
   32242:	4649      	mov	r1, r9
   32244:	f044 0004 	orr.w	r0, r4, #4
   32248:	f00b f85a 	bl	3d300 <log_string_sync>
		nrf_close(drv_data->socket);
   3224c:	f85a 0f28 	ldr.w	r0, [sl, #40]!
   32250:	f00f fa3d 	bl	416ce <nrf_close>
		if (open_socket(drv_data) != 0) {
   32254:	4650      	mov	r0, sl
		LOG_DBG("Failed to set fix retry value, "
   32256:	46a3      	mov	fp, r4
		if (open_socket(drv_data) != 0) {
   32258:	f7ff fe8c 	bl	31f74 <open_socket.isra.0>
   3225c:	2800      	cmp	r0, #0
   3225e:	d0df      	beq.n	32220 <start+0x1c4>
			LOG_ERR("Failed to re-init GPS service");
   32260:	4946      	ldr	r1, [pc, #280]	; (3237c <start+0x320>)
   32262:	f04b 0001 	orr.w	r0, fp, #1
   32266:	f00b f84b 	bl	3d300 <log_string_sync>
			return -EIO;
   3226a:	e00b      	b.n	32284 <start+0x228>
	if ((retval == -1) && ((errno == EFAULT) || (errno == EBADF))) {
   3226c:	f00b ff35 	bl	3e0da <__errno>
   32270:	6803      	ldr	r3, [r0, #0]
   32272:	2b09      	cmp	r3, #9
   32274:	d0e3      	beq.n	3223e <start+0x1e2>
		LOG_ERR("Failed to set fix retry value: %d", gps_cfg.retry);
   32276:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   3227a:	4941      	ldr	r1, [pc, #260]	; (32380 <start+0x324>)
   3227c:	f044 0001 	orr.w	r0, r4, #1
   32280:	f00b f83e 	bl	3d300 <log_string_sync>
		return -EIO;
   32284:	f06f 0504 	mvn.w	r5, #4
   32288:	e721      	b.n	320ce <start+0x72>
	} else if (retval != 0) {
   3228a:	2800      	cmp	r0, #0
   3228c:	d1f3      	bne.n	32276 <start+0x21a>
	retval = nrf_setsockopt(drv_data->socket,
   3228e:	9500      	str	r5, [sp, #0]
   32290:	2201      	movs	r2, #1
   32292:	f44f 7101 	mov.w	r1, #516	; 0x204
   32296:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   32298:	f10d 0312 	add.w	r3, sp, #18
   3229c:	f00f faac 	bl	417f8 <nrf_setsockopt>
	if (retval != 0) {
   322a0:	b108      	cbz	r0, 322a6 <start+0x24a>
		LOG_ERR("Failed to set fix interval value");
   322a2:	4938      	ldr	r1, [pc, #224]	; (32384 <start+0x328>)
   322a4:	e782      	b.n	321ac <start+0x150>
	retval = nrf_setsockopt(drv_data->socket,
   322a6:	9500      	str	r5, [sp, #0]
   322a8:	2204      	movs	r2, #4
   322aa:	f44f 7101 	mov.w	r1, #516	; 0x204
   322ae:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   322b0:	ab05      	add	r3, sp, #20
   322b2:	f00f faa1 	bl	417f8 <nrf_setsockopt>
	if (retval != 0) {
   322b6:	b108      	cbz	r0, 322bc <start+0x260>
		LOG_ERR("Failed to set nmea mask");
   322b8:	4933      	ldr	r1, [pc, #204]	; (32388 <start+0x32c>)
   322ba:	e777      	b.n	321ac <start+0x150>
	if (gps_cfg.power_mode != NRF_GNSS_PSM_DISABLED) {
   322bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   322c0:	b15b      	cbz	r3, 322da <start+0x27e>
		retval = nrf_setsockopt(drv_data->socket,
   322c2:	2301      	movs	r3, #1
   322c4:	9300      	str	r3, [sp, #0]
   322c6:	2209      	movs	r2, #9
   322c8:	f44f 7101 	mov.w	r1, #516	; 0x204
   322cc:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   322ce:	ab07      	add	r3, sp, #28
   322d0:	f00f fa92 	bl	417f8 <nrf_setsockopt>
		if (retval != 0) {
   322d4:	b108      	cbz	r0, 322da <start+0x27e>
			LOG_ERR("Failed to set GPS power mode");
   322d6:	492d      	ldr	r1, [pc, #180]	; (3238c <start+0x330>)
   322d8:	e768      	b.n	321ac <start+0x150>
	if (gps_cfg.use_case) {
   322da:	f89d 301d 	ldrb.w	r3, [sp, #29]
   322de:	b163      	cbz	r3, 322fa <start+0x29e>
		retval = nrf_setsockopt(drv_data->socket,
   322e0:	2301      	movs	r3, #1
   322e2:	9300      	str	r3, [sp, #0]
   322e4:	2206      	movs	r2, #6
   322e6:	f44f 7101 	mov.w	r1, #516	; 0x204
   322ea:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   322ec:	f10d 031d 	add.w	r3, sp, #29
   322f0:	f00f fa82 	bl	417f8 <nrf_setsockopt>
		if (retval) {
   322f4:	b108      	cbz	r0, 322fa <start+0x29e>
			LOG_ERR("Failed to set use case and accuracy");
   322f6:	4926      	ldr	r1, [pc, #152]	; (32390 <start+0x334>)
   322f8:	e758      	b.n	321ac <start+0x150>
	retval = nrf_setsockopt(drv_data->socket,
   322fa:	2304      	movs	r3, #4
   322fc:	9300      	str	r3, [sp, #0]
   322fe:	2207      	movs	r2, #7
   32300:	f44f 7101 	mov.w	r1, #516	; 0x204
   32304:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   32306:	ab06      	add	r3, sp, #24
   32308:	f00f fa76 	bl	417f8 <nrf_setsockopt>
	if (retval != 0) {
   3230c:	4605      	mov	r5, r0
   3230e:	b108      	cbz	r0, 32314 <start+0x2b8>
		LOG_ERR("Failed to start GPS");
   32310:	4920      	ldr	r1, [pc, #128]	; (32394 <start+0x338>)
   32312:	e74b      	b.n	321ac <start+0x150>
	if (!gps_cfg.priority) {
   32314:	f89d 301e 	ldrb.w	r3, [sp, #30]
   32318:	2b00      	cmp	r3, #0
   3231a:	d141      	bne.n	323a0 <start+0x344>
		retval = gps_priority_set(drv_data, false);
   3231c:	4601      	mov	r1, r0
   3231e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   32322:	f7ff fdbb 	bl	31e9c <gps_priority_set.isra.0>
		if (retval != 0) {
   32326:	4680      	mov	r8, r0
   32328:	b3d0      	cbz	r0, 323a0 <start+0x344>
			LOG_ERR("Failed to set GPS priority, error: %d",
   3232a:	4602      	mov	r2, r0
   3232c:	491a      	ldr	r1, [pc, #104]	; (32398 <start+0x33c>)
   3232e:	f044 0001 	orr.w	r0, r4, #1
   32332:	f00a ffe5 	bl	3d300 <log_string_sync>
			return retval;
   32336:	4645      	mov	r5, r8
   32338:	e6c9      	b.n	320ce <start+0x72>
   3233a:	bf00      	nop
   3233c:	0004347c 	.word	0x0004347c
   32340:	0004339c 	.word	0x0004339c
   32344:	0004b4c0 	.word	0x0004b4c0
   32348:	0004aeb3 	.word	0x0004aeb3
   3234c:	0004aee6 	.word	0x0004aee6
   32350:	0004af04 	.word	0x0004af04
   32354:	0004af58 	.word	0x0004af58
   32358:	0004af28 	.word	0x0004af28
   3235c:	0004af72 	.word	0x0004af72
   32360:	0004b070 	.word	0x0004b070
   32364:	0004b4b5 	.word	0x0004b4b5
   32368:	0004af9d 	.word	0x0004af9d
   3236c:	0004afd2 	.word	0x0004afd2
   32370:	0004aff7 	.word	0x0004aff7
   32374:	0004b00f 	.word	0x0004b00f
   32378:	0004b040 	.word	0x0004b040
   3237c:	0004b0ea 	.word	0x0004b0ea
   32380:	0004b0c8 	.word	0x0004b0c8
   32384:	0004b108 	.word	0x0004b108
   32388:	0004b129 	.word	0x0004b129
   3238c:	0004b141 	.word	0x0004b141
   32390:	0004b15e 	.word	0x0004b15e
   32394:	0004addd 	.word	0x0004addd
   32398:	0004adf1 	.word	0x0004adf1
   3239c:	0004b085 	.word	0x0004b085
	atomic_set(&drv_data->is_active, 1);
   323a0:	2101      	movs	r1, #1
   323a2:	4638      	mov	r0, r7
   323a4:	f00d fe83 	bl	400ae <atomic_set>
	atomic_set(&drv_data->timeout_occurred, 0);
   323a8:	2100      	movs	r1, #0
   323aa:	f106 0024 	add.w	r0, r6, #36	; 0x24
   323ae:	f00d fe7e 	bl	400ae <atomic_set>
	z_impl_k_sem_give(sem);
   323b2:	f606 1004 	addw	r0, r6, #2308	; 0x904
   323b6:	f006 ff7d 	bl	392b4 <z_impl_k_sem_give>
	LOG_DBG("GPS operational");
   323ba:	4a05      	ldr	r2, [pc, #20]	; (323d0 <start+0x374>)
   323bc:	4905      	ldr	r1, [pc, #20]	; (323d4 <start+0x378>)
   323be:	f044 0004 	orr.w	r0, r4, #4
   323c2:	f00a ff9d 	bl	3d300 <log_string_sync>
	return retval;
   323c6:	e682      	b.n	320ce <start+0x72>
		return -EHOSTDOWN;
   323c8:	f06f 0574 	mvn.w	r5, #116	; 0x74
   323cc:	e67f      	b.n	320ce <start+0x72>
   323ce:	bf00      	nop
   323d0:	0004b4c0 	.word	0x0004b4c0
   323d4:	0004b182 	.word	0x0004b182

000323d8 <init>:

static int init(const struct device *dev, gps_event_handler_t handler)
{
   323d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct gps_drv_data *drv_data = dev->data;
   323dc:	68c5      	ldr	r5, [r0, #12]
{
   323de:	4607      	mov	r7, r0
	int err;

	if (atomic_get(&drv_data->is_init)) {
   323e0:	f105 0818 	add.w	r8, r5, #24
   323e4:	4640      	mov	r0, r8
{
   323e6:	b089      	sub	sp, #36	; 0x24
	if (atomic_get(&drv_data->is_init)) {
   323e8:	f00d fe5e 	bl	400a8 <atomic_get>
   323ec:	4e48      	ldr	r6, [pc, #288]	; (32510 <init+0x138>)
   323ee:	4b49      	ldr	r3, [pc, #292]	; (32514 <init+0x13c>)
   323f0:	1af6      	subs	r6, r6, r3
   323f2:	08f6      	lsrs	r6, r6, #3
   323f4:	4603      	mov	r3, r0
   323f6:	01b6      	lsls	r6, r6, #6
   323f8:	b150      	cbz	r0, 32410 <init+0x38>
		LOG_WRN("GPS is already initialized");
   323fa:	4947      	ldr	r1, [pc, #284]	; (32518 <init+0x140>)
   323fc:	f046 0002 	orr.w	r0, r6, #2
   32400:	f00a ff7e 	bl	3d300 <log_string_sync>

		return -EALREADY;
   32404:	f06f 0477 	mvn.w	r4, #119	; 0x77
	}

	atomic_set(&drv_data->is_init, 1);

	return 0;
}
   32408:	4620      	mov	r0, r4
   3240a:	b009      	add	sp, #36	; 0x24
   3240c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (handler == NULL) {
   32410:	b939      	cbnz	r1, 32422 <init+0x4a>
		LOG_ERR("No event handler provided");
   32412:	4942      	ldr	r1, [pc, #264]	; (3251c <init+0x144>)
   32414:	f046 0001 	orr.w	r0, r6, #1
   32418:	f00a ff72 	bl	3d300 <log_string_sync>
		return -EINVAL;
   3241c:	f06f 0415 	mvn.w	r4, #21
   32420:	e7f2      	b.n	32408 <init+0x30>
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   32422:	4602      	mov	r2, r0
	drv_data->handler = handler;
   32424:	6069      	str	r1, [r5, #4]
	err = at_cmd_write(CONFIG_NRF9160_GPS_MAGPIO_STRING,
   32426:	4601      	mov	r1, r0
   32428:	483d      	ldr	r0, [pc, #244]	; (32520 <init+0x148>)
   3242a:	f7f8 fabb 	bl	2a9a4 <at_cmd_write>
	if (err) {
   3242e:	4604      	mov	r4, r0
   32430:	b130      	cbz	r0, 32440 <init+0x68>
		LOG_ERR("Could not configure MAGPIO, error: %d", err);
   32432:	4602      	mov	r2, r0
   32434:	493b      	ldr	r1, [pc, #236]	; (32524 <init+0x14c>)
		LOG_ERR("Could not configure COEX0, error: %d", err);
   32436:	f046 0001 	orr.w	r0, r6, #1
   3243a:	f00a ff61 	bl	3d300 <log_string_sync>
		return err;
   3243e:	e7e3      	b.n	32408 <init+0x30>
	LOG_DBG("MAGPIO set: %s",
   32440:	4837      	ldr	r0, [pc, #220]	; (32520 <init+0x148>)
   32442:	f00a ff70 	bl	3d326 <log_strdup>
   32446:	f046 0904 	orr.w	r9, r6, #4
   3244a:	4603      	mov	r3, r0
   3244c:	4a36      	ldr	r2, [pc, #216]	; (32528 <init+0x150>)
   3244e:	4648      	mov	r0, r9
   32450:	4936      	ldr	r1, [pc, #216]	; (3252c <init+0x154>)
   32452:	f00a ff55 	bl	3d300 <log_string_sync>
	err = at_cmd_write(CONFIG_NRF9160_GPS_COEX0_STRING,
   32456:	4623      	mov	r3, r4
   32458:	4622      	mov	r2, r4
   3245a:	4621      	mov	r1, r4
   3245c:	4834      	ldr	r0, [pc, #208]	; (32530 <init+0x158>)
   3245e:	f7f8 faa1 	bl	2a9a4 <at_cmd_write>
	if (err) {
   32462:	4604      	mov	r4, r0
   32464:	b110      	cbz	r0, 3246c <init+0x94>
		LOG_ERR("Could not configure COEX0, error: %d", err);
   32466:	4602      	mov	r2, r0
   32468:	4932      	ldr	r1, [pc, #200]	; (32534 <init+0x15c>)
   3246a:	e7e4      	b.n	32436 <init+0x5e>
	LOG_DBG("COEX0 set: %s",
   3246c:	4830      	ldr	r0, [pc, #192]	; (32530 <init+0x158>)
   3246e:	f00a ff5a 	bl	3d326 <log_strdup>
   32472:	4a2d      	ldr	r2, [pc, #180]	; (32528 <init+0x150>)
   32474:	4603      	mov	r3, r0
   32476:	4930      	ldr	r1, [pc, #192]	; (32538 <init+0x160>)
   32478:	4648      	mov	r0, r9
   3247a:	f00a ff41 	bl	3d300 <log_string_sync>
	if (drv_data->socket < 0) {
   3247e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   32480:	2b00      	cmp	r3, #0
   32482:	db3c      	blt.n	324fe <init+0x126>
   32484:	2230      	movs	r2, #48	; 0x30
   32486:	2100      	movs	r1, #0
   32488:	f505 6012 	add.w	r0, r5, #2336	; 0x920
   3248c:	f00f fc27 	bl	41cde <memset>
   32490:	4b2a      	ldr	r3, [pc, #168]	; (3253c <init+0x164>)
   32492:	2230      	movs	r2, #48	; 0x30
   32494:	f8c5 3924 	str.w	r3, [r5, #2340]	; 0x924
   32498:	2100      	movs	r1, #0
   3249a:	f505 6015 	add.w	r0, r5, #2384	; 0x950
   3249e:	f00f fc1e 	bl	41cde <memset>
   324a2:	4b27      	ldr	r3, [pc, #156]	; (32540 <init+0x168>)
   324a4:	2230      	movs	r2, #48	; 0x30
   324a6:	f8c5 3954 	str.w	r3, [r5, #2388]	; 0x954
   324aa:	2100      	movs	r1, #0
   324ac:	f505 6018 	add.w	r0, r5, #2432	; 0x980
   324b0:	f00f fc15 	bl	41cde <memset>
   324b4:	4b23      	ldr	r3, [pc, #140]	; (32544 <init+0x16c>)
   324b6:	f8c5 3984 	str.w	r3, [r5, #2436]	; 0x984
	return z_impl_k_sem_init(sem, initial_count, limit);
   324ba:	2201      	movs	r2, #1
   324bc:	2100      	movs	r1, #0
   324be:	f605 1004 	addw	r0, r5, #2308	; 0x904
   324c2:	f00f fa8d 	bl	419e0 <z_impl_k_sem_init>
	struct gps_drv_data *drv_data = dev->data;
   324c6:	68fd      	ldr	r5, [r7, #12]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   324c8:	2200      	movs	r2, #0
   324ca:	2300      	movs	r3, #0
   324cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
   324d0:	2300      	movs	r3, #0
   324d2:	220a      	movs	r2, #10
   324d4:	e9cd 3301 	strd	r3, r3, [sp, #4]
   324d8:	e9cd 2303 	strd	r2, r3, [sp, #12]
   324dc:	f105 0130 	add.w	r1, r5, #48	; 0x30
   324e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   324e4:	4b18      	ldr	r3, [pc, #96]	; (32548 <init+0x170>)
   324e6:	9700      	str	r7, [sp, #0]
   324e8:	f505 6003 	add.w	r0, r5, #2096	; 0x830
   324ec:	f007 f846 	bl	3957c <z_impl_k_thread_create>
	atomic_set(&drv_data->is_init, 1);
   324f0:	2101      	movs	r1, #1
	drv_data->thread_id = k_thread_create(
   324f2:	f8c5 0900 	str.w	r0, [r5, #2304]	; 0x900
	atomic_set(&drv_data->is_init, 1);
   324f6:	4640      	mov	r0, r8
   324f8:	f00d fdd9 	bl	400ae <atomic_set>
	return 0;
   324fc:	e784      	b.n	32408 <init+0x30>
		int ret = open_socket(drv_data);
   324fe:	f105 0028 	add.w	r0, r5, #40	; 0x28
   32502:	f7ff fd37 	bl	31f74 <open_socket.isra.0>
		if (ret != 0) {
   32506:	2800      	cmp	r0, #0
   32508:	d0bc      	beq.n	32484 <init+0xac>
   3250a:	4604      	mov	r4, r0
   3250c:	e77c      	b.n	32408 <init+0x30>
   3250e:	bf00      	nop
   32510:	0004347c 	.word	0x0004347c
   32514:	0004339c 	.word	0x0004339c
   32518:	0004b196 	.word	0x0004b196
   3251c:	0004b1b1 	.word	0x0004b1b1
   32520:	0004b1cb 	.word	0x0004b1cb
   32524:	0004b1ea 	.word	0x0004b1ea
   32528:	0004b4c6 	.word	0x0004b4c6
   3252c:	0004b210 	.word	0x0004b210
   32530:	0004b223 	.word	0x0004b223
   32534:	0004b23b 	.word	0x0004b23b
   32538:	0004b260 	.word	0x0004b260
   3253c:	00040083 	.word	0x00040083
   32540:	000400bf 	.word	0x000400bf
   32544:	00031f3d 	.word	0x00031f3d
   32548:	0003254d 	.word	0x0003254d

0003254c <gps_thread>:
{
   3254c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool has_fix = false;
   32550:	2600      	movs	r6, #0
	bool operation_blocked = false;
   32552:	46b1      	mov	r9, r6
{
   32554:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
	struct gps_drv_data *drv_data = dev->data;
   32558:	68c4      	ldr	r4, [r0, #12]
{
   3255a:	4607      	mov	r7, r0
	struct gps_event evt = {
   3255c:	22c0      	movs	r2, #192	; 0xc0
   3255e:	2100      	movs	r1, #0
   32560:	a804      	add	r0, sp, #16
   32562:	f00f fbbc 	bl	41cde <memset>
   32566:	4d66      	ldr	r5, [pc, #408]	; (32700 <gps_thread+0x1b4>)
   32568:	4b66      	ldr	r3, [pc, #408]	; (32704 <gps_thread+0x1b8>)
   3256a:	1aed      	subs	r5, r5, r3
   3256c:	08ed      	lsrs	r5, r5, #3
	return z_impl_k_sem_take(sem, timeout);
   3256e:	f04f 33ff 	mov.w	r3, #4294967295
   32572:	f04f 32ff 	mov.w	r2, #4294967295
   32576:	f604 1004 	addw	r0, r4, #2308	; 0x904
   3257a:	f006 fedf 	bl	3933c <z_impl_k_sem_take>
	evt.type = GPS_EVT_SEARCH_STARTED;
   3257e:	f04f 0300 	mov.w	r3, #0
	notify_event(dev, &evt);
   32582:	a904      	add	r1, sp, #16
	evt.type = GPS_EVT_SEARCH_STARTED;
   32584:	f88d 3010 	strb.w	r3, [sp, #16]
	notify_event(dev, &evt);
   32588:	4638      	mov	r0, r7
   3258a:	f00d fd75 	bl	40078 <notify_event>
		nrf_gnss_data_frame_t raw_gps_data = {0};
   3258e:	22d8      	movs	r2, #216	; 0xd8
   32590:	2100      	movs	r1, #0
   32592:	a864      	add	r0, sp, #400	; 0x190
   32594:	f00f fba3 	bl	41cde <memset>
		struct gps_event evt = {0};
   32598:	22c0      	movs	r2, #192	; 0xc0
   3259a:	2100      	movs	r1, #0
   3259c:	a834      	add	r0, sp, #208	; 0xd0
   3259e:	f00f fb9e 	bl	41cde <memset>
		if (!has_fix) {
   325a2:	f504 6a15 	add.w	sl, r4, #2384	; 0x950
   325a6:	b936      	cbnz	r6, 325b6 <gps_thread+0x6a>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   325a8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   325ac:	2300      	movs	r3, #0
   325ae:	4651      	mov	r1, sl
   325b0:	4855      	ldr	r0, [pc, #340]	; (32708 <gps_thread+0x1bc>)
   325b2:	f007 f94b 	bl	3984c <k_delayed_work_submit_to_queue>
		len = nrf_recv(drv_data->socket, &raw_gps_data,
   325b6:	2300      	movs	r3, #0
   325b8:	22d8      	movs	r2, #216	; 0xd8
   325ba:	a964      	add	r1, sp, #400	; 0x190
   325bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   325be:	f00f f8c7 	bl	41750 <nrf_recv>
   325c2:	4680      	mov	r8, r0
		k_delayed_work_cancel(&drv_data->timeout_work);
   325c4:	4650      	mov	r0, sl
   325c6:	f007 f9cb 	bl	39960 <k_delayed_work_cancel>
		if (len <= 0) {
   325ca:	f1b8 0f00 	cmp.w	r8, #0
   325ce:	dc4c      	bgt.n	3266a <gps_thread+0x11e>
   325d0:	f104 0b1c 	add.w	fp, r4, #28
			if (!atomic_get(&drv_data->is_active)) {
   325d4:	4658      	mov	r0, fp
   325d6:	f00d fd67 	bl	400a8 <atomic_get>
   325da:	2800      	cmp	r0, #0
   325dc:	d0c7      	beq.n	3256e <gps_thread+0x22>
			if (errno == EHOSTDOWN) {
   325de:	f00b fd7c 	bl	3e0da <__errno>
   325e2:	6803      	ldr	r3, [r0, #0]
   325e4:	01a8      	lsls	r0, r5, #6
   325e6:	2b75      	cmp	r3, #117	; 0x75
   325e8:	d138      	bne.n	3265c <gps_thread+0x110>
				LOG_DBG("GPS host is going down, sleeping");
   325ea:	4603      	mov	r3, r0
   325ec:	f040 0804 	orr.w	r8, r0, #4
   325f0:	4a46      	ldr	r2, [pc, #280]	; (3270c <gps_thread+0x1c0>)
   325f2:	4947      	ldr	r1, [pc, #284]	; (32710 <gps_thread+0x1c4>)
   325f4:	4640      	mov	r0, r8
   325f6:	9302      	str	r3, [sp, #8]
   325f8:	f00a fe82 	bl	3d300 <log_string_sync>
	k_delayed_work_cancel(&drv_data->timeout_work);
   325fc:	4650      	mov	r0, sl
   325fe:	f007 f9af 	bl	39960 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   32602:	f504 6018 	add.w	r0, r4, #2432	; 0x980
   32606:	f007 f9ab 	bl	39960 <k_delayed_work_cancel>
	return atomic_set(target, 0);
   3260a:	4658      	mov	r0, fp
				nrf_close(drv_data->socket);
   3260c:	46a3      	mov	fp, r4
   3260e:	2100      	movs	r1, #0
				atomic_set(&drv_data->is_shutdown, 1);
   32610:	f104 0a20 	add.w	sl, r4, #32
   32614:	f00d fd4b 	bl	400ae <atomic_set>
   32618:	2101      	movs	r1, #1
   3261a:	4650      	mov	r0, sl
   3261c:	f00d fd47 	bl	400ae <atomic_set>
				nrf_close(drv_data->socket);
   32620:	f85b 0f28 	ldr.w	r0, [fp, #40]!
   32624:	f00f f853 	bl	416ce <nrf_close>
				nrf_modem_lib_shutdown_wait();
   32628:	f7f6 fcfe 	bl	29028 <nrf_modem_lib_shutdown_wait>
				if (open_socket(drv_data) != 0) {
   3262c:	4658      	mov	r0, fp
   3262e:	f7ff fca1 	bl	31f74 <open_socket.isra.0>
   32632:	9b02      	ldr	r3, [sp, #8]
   32634:	4601      	mov	r1, r0
   32636:	b140      	cbz	r0, 3264a <gps_thread+0xfe>
					LOG_ERR("Failed to open socket after "
   32638:	4936      	ldr	r1, [pc, #216]	; (32714 <gps_thread+0x1c8>)
   3263a:	f043 0001 	orr.w	r0, r3, #1
   3263e:	f00a fe5f 	bl	3d300 <log_string_sync>
}
   32642:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
   32646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3264a:	4650      	mov	r0, sl
   3264c:	f00d fd2f 	bl	400ae <atomic_set>
				LOG_DBG("GPS host available, going back to "
   32650:	4640      	mov	r0, r8
   32652:	4a2e      	ldr	r2, [pc, #184]	; (3270c <gps_thread+0x1c0>)
   32654:	4930      	ldr	r1, [pc, #192]	; (32718 <gps_thread+0x1cc>)
   32656:	f00a fe53 	bl	3d300 <log_string_sync>
				goto wait;
   3265a:	e788      	b.n	3256e <gps_thread+0x22>
				LOG_ERR("recv() returned error: %d", len);
   3265c:	4642      	mov	r2, r8
   3265e:	492f      	ldr	r1, [pc, #188]	; (3271c <gps_thread+0x1d0>)
   32660:	f040 0001 	orr.w	r0, r0, #1
   32664:	f00a fe4c 	bl	3d300 <log_string_sync>
			continue;
   32668:	e791      	b.n	3258e <gps_thread+0x42>
		switch (raw_gps_data.data_id) {
   3266a:	f89d 3190 	ldrb.w	r3, [sp, #400]	; 0x190
   3266e:	2b02      	cmp	r3, #2
   32670:	f000 8160 	beq.w	32934 <gps_thread+0x3e8>
   32674:	2b03      	cmp	r3, #3
   32676:	f000 817d 	beq.w	32974 <gps_thread+0x428>
   3267a:	2b01      	cmp	r3, #1
   3267c:	d187      	bne.n	3258e <gps_thread+0x42>
			if (atomic_get(&drv_data->timeout_occurred) ||
   3267e:	f104 0324 	add.w	r3, r4, #36	; 0x24
   32682:	4618      	mov	r0, r3
   32684:	f00d fd10 	bl	400a8 <atomic_get>
   32688:	b918      	cbnz	r0, 32692 <gps_thread+0x146>
   3268a:	7a22      	ldrb	r2, [r4, #8]
   3268c:	2a01      	cmp	r2, #1
   3268e:	d00c      	beq.n	326aa <gps_thread+0x15e>
			    ((drv_data->current_cfg.nav_mode != GPS_NAV_MODE_CONTINUOUS) &&
   32690:	b15e      	cbz	r6, 326aa <gps_thread+0x15e>
				atomic_set(&drv_data->timeout_occurred, 0);
   32692:	2100      	movs	r1, #0
   32694:	4618      	mov	r0, r3
   32696:	f00d fd0a 	bl	400ae <atomic_set>
				evt.type = GPS_EVT_SEARCH_STARTED;
   3269a:	f04f 0300 	mov.w	r3, #0
				notify_event(dev, &evt);
   3269e:	4638      	mov	r0, r7
   326a0:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_SEARCH_STARTED;
   326a2:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
				notify_event(dev, &evt);
   326a6:	f00d fce7 	bl	40078 <notify_event>
	return ((pvt->flags & NRF_GNSS_PVT_FLAG_DEADLINE_MISSED)
   326aa:	f89d a1d4 	ldrb.w	sl, [sp, #468]	; 0x1d4
			if (has_no_time_window(&raw_gps_data.pvt) ||
   326ae:	f01a 0a18 	ands.w	sl, sl, #24
   326b2:	d037      	beq.n	32724 <gps_thread+0x1d8>
				if (operation_blocked) {
   326b4:	f1b9 0f00 	cmp.w	r9, #0
   326b8:	d003      	beq.n	326c2 <gps_thread+0x176>
			has_fix = false;
   326ba:	2600      	movs	r6, #0
   326bc:	f04f 0901 	mov.w	r9, #1
   326c0:	e765      	b.n	3258e <gps_thread+0x42>
				LOG_DBG("Waiting for time window to operate");
   326c2:	01a8      	lsls	r0, r5, #6
   326c4:	4a11      	ldr	r2, [pc, #68]	; (3270c <gps_thread+0x1c0>)
   326c6:	4916      	ldr	r1, [pc, #88]	; (32720 <gps_thread+0x1d4>)
   326c8:	f040 0004 	orr.w	r0, r0, #4
   326cc:	f00a fe18 	bl	3d300 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   326d0:	2307      	movs	r3, #7
				notify_event(dev, &evt);
   326d2:	4638      	mov	r0, r7
   326d4:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_OPERATION_BLOCKED;
   326d6:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
				notify_event(dev, &evt);
   326da:	f00d fccd 	bl	40078 <notify_event>
				if (drv_data->current_cfg.priority) {
   326de:	f894 8015 	ldrb.w	r8, [r4, #21]
   326e2:	f1b8 0f00 	cmp.w	r8, #0
   326e6:	d0e8      	beq.n	326ba <gps_thread+0x16e>
   326e8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   326ec:	2300      	movs	r3, #0
   326ee:	4806      	ldr	r0, [pc, #24]	; (32708 <gps_thread+0x1bc>)
   326f0:	f504 6118 	add.w	r1, r4, #2432	; 0x980
			has_fix = false;
   326f4:	464e      	mov	r6, r9
   326f6:	f007 f8a9 	bl	3984c <k_delayed_work_submit_to_queue>
				operation_blocked = true;
   326fa:	46c1      	mov	r9, r8
   326fc:	e747      	b.n	3258e <gps_thread+0x42>
   326fe:	bf00      	nop
   32700:	0004347c 	.word	0x0004347c
   32704:	0004339c 	.word	0x0004339c
   32708:	20018af0 	.word	0x20018af0
   3270c:	0004b4aa 	.word	0x0004b4aa
   32710:	0004b29c 	.word	0x0004b29c
   32714:	0004b2c1 	.word	0x0004b2c1
   32718:	0004b2fc 	.word	0x0004b2fc
   3271c:	0004b334 	.word	0x0004b334
   32720:	0004b34e 	.word	0x0004b34e
			} else if (operation_blocked) {
   32724:	f1b9 0f00 	cmp.w	r9, #0
   32728:	d011      	beq.n	3274e <gps_thread+0x202>
				LOG_DBG("GPS has time window to operate");
   3272a:	01a8      	lsls	r0, r5, #6
   3272c:	4a9e      	ldr	r2, [pc, #632]	; (329a8 <gps_thread+0x45c>)
   3272e:	499f      	ldr	r1, [pc, #636]	; (329ac <gps_thread+0x460>)
   32730:	f040 0004 	orr.w	r0, r0, #4
   32734:	f00a fde4 	bl	3d300 <log_string_sync>
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   32738:	2308      	movs	r3, #8
				notify_event(dev, &evt);
   3273a:	4638      	mov	r0, r7
   3273c:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_OPERATION_UNBLOCKED;
   3273e:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
				notify_event(dev, &evt);
   32742:	f00d fc99 	bl	40078 <notify_event>
				k_delayed_work_cancel(&drv_data->blocked_work);
   32746:	f504 6018 	add.w	r0, r4, #2432	; 0x980
   3274a:	f007 f909 	bl	39960 <k_delayed_work_cancel>
	dest->latitude = src->latitude;
   3274e:	e9dd 2366 	ldrd	r2, r3, [sp, #408]	; 0x198
   32752:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
	dest->longitude = src->longitude;
   32756:	e9dd 2368 	ldrd	r2, r3, [sp, #416]	; 0x1a0
   3275a:	e9cd 2338 	strd	r2, r3, [sp, #224]	; 0xe0
	dest->altitude = src->altitude;
   3275e:	9b6a      	ldr	r3, [sp, #424]	; 0x1a8
   32760:	f50d 78c8 	add.w	r8, sp, #400	; 0x190
   32764:	933a      	str	r3, [sp, #232]	; 0xe8
	dest->accuracy = src->accuracy;
   32766:	9b6b      	ldr	r3, [sp, #428]	; 0x1ac
	for (size_t i = 0;
   32768:	2000      	movs	r0, #0
	dest->accuracy = src->accuracy;
   3276a:	933b      	str	r3, [sp, #236]	; 0xec
	dest->speed = src->speed;
   3276c:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
   3276e:	f04f 0e0a 	mov.w	lr, #10
   32772:	933c      	str	r3, [sp, #240]	; 0xf0
	dest->heading = src->heading;
   32774:	9b6d      	ldr	r3, [sp, #436]	; 0x1b4
	dest->datetime.year = src->datetime.year;
   32776:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
	dest->heading = src->heading;
   32778:	933d      	str	r3, [sp, #244]	; 0xf4
	dest->datetime.seconds = src->datetime.seconds;
   3277a:	f89d 31be 	ldrb.w	r3, [sp, #446]	; 0x1be
	dest->datetime.year = src->datetime.year;
   3277e:	9243      	str	r2, [sp, #268]	; 0x10c
	dest->datetime.seconds = src->datetime.seconds;
   32780:	f88d 3112 	strb.w	r3, [sp, #274]	; 0x112
	dest->datetime.ms = src->datetime.ms;
   32784:	f8bd 31c0 	ldrh.w	r3, [sp, #448]	; 0x1c0
	dest->datetime.hour = src->datetime.hour;
   32788:	f8bd 21bc 	ldrh.w	r2, [sp, #444]	; 0x1bc
	dest->datetime.ms = src->datetime.ms;
   3278c:	f8ad 3114 	strh.w	r3, [sp, #276]	; 0x114
	dest->pdop = src->pdop;
   32790:	9b71      	ldr	r3, [sp, #452]	; 0x1c4
	dest->datetime.hour = src->datetime.hour;
   32792:	f8ad 2110 	strh.w	r2, [sp, #272]	; 0x110
	dest->pdop = src->pdop;
   32796:	933e      	str	r3, [sp, #248]	; 0xf8
	dest->hdop = src->hdop;
   32798:	9b72      	ldr	r3, [sp, #456]	; 0x1c8
   3279a:	a934      	add	r1, sp, #208	; 0xd0
   3279c:	933f      	str	r3, [sp, #252]	; 0xfc
	dest->vdop = src->vdop;
   3279e:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
   327a0:	9340      	str	r3, [sp, #256]	; 0x100
	dest->tdop = src->tdop;
   327a2:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
   327a4:	9341      	str	r3, [sp, #260]	; 0x104
   327a6:	4643      	mov	r3, r8
		dest->sv[i].sv = src->sv[i].sv;
   327a8:	f8b3 2046 	ldrh.w	r2, [r3, #70]	; 0x46
   327ac:	ae34      	add	r6, sp, #208	; 0xd0
   327ae:	f8a1 2046 	strh.w	r2, [r1, #70]	; 0x46
		dest->sv[i].cn0 = src->sv[i].cn0;
   327b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
   327b6:	fb0e 6600 	mla	r6, lr, r0, r6
   327ba:	f8a1 2048 	strh.w	r2, [r1, #72]	; 0x48
		dest->sv[i].elevation = src->sv[i].elevation;
   327be:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
	     i < MIN(NRF_GNSS_MAX_SATELLITES, GPS_PVT_MAX_SV_COUNT); i++) {
   327c2:	3001      	adds	r0, #1
		dest->sv[i].elevation = src->sv[i].elevation;
   327c4:	f8a1 204a 	strh.w	r2, [r1, #74]	; 0x4a
		dest->sv[i].azimuth = src->sv[i].azimuth;
   327c8:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
	for (size_t i = 0;
   327cc:	280c      	cmp	r0, #12
		dest->sv[i].azimuth = src->sv[i].azimuth;
   327ce:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		dest->sv[i].signal = src->sv[i].signal;
   327d2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
   327d6:	f101 010a 	add.w	r1, r1, #10
   327da:	f881 2044 	strb.w	r2, [r1, #68]	; 0x44
			(src->sv[i].flags & NRF_GNSS_SV_FLAG_USED_IN_FIX) ==
   327de:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
		dest->sv[i].unhealthy =
   327e2:	f103 030c 	add.w	r3, r3, #12
			(src->sv[i].flags & NRF_GNSS_SV_FLAG_UNHEALTHY) ==
   327e6:	f3c2 0cc0 	ubfx	ip, r2, #3, #1
			(src->sv[i].flags & NRF_GNSS_SV_FLAG_USED_IN_FIX) ==
   327ea:	f3c2 0240 	ubfx	r2, r2, #1, #1
		dest->sv[i].in_fix =
   327ee:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
   327f2:	f896 c04f 	ldrb.w	ip, [r6, #79]	; 0x4f
   327f6:	f02c 0c03 	bic.w	ip, ip, #3
   327fa:	ea42 020c 	orr.w	r2, r2, ip
   327fe:	f886 204f 	strb.w	r2, [r6, #79]	; 0x4f
	for (size_t i = 0;
   32802:	d1d1      	bne.n	327a8 <gps_thread+0x25c>
		== NRF_GNSS_PVT_FLAG_FIX_VALID_BIT);
   32804:	f89d 61d4 	ldrb.w	r6, [sp, #468]	; 0x1d4
			if (is_fix(&raw_gps_data.pvt)) {
   32808:	f016 0601 	ands.w	r6, r6, #1
   3280c:	f000 808e 	beq.w	3292c <gps_thread+0x3e0>
				LOG_DBG("PVT: Position fix");
   32810:	01a8      	lsls	r0, r5, #6
   32812:	4a65      	ldr	r2, [pc, #404]	; (329a8 <gps_thread+0x45c>)
   32814:	4966      	ldr	r1, [pc, #408]	; (329b0 <gps_thread+0x464>)
   32816:	f040 0004 	orr.w	r0, r0, #4
   3281a:	f00a fd71 	bl	3d300 <log_string_sync>
				evt.type = GPS_EVT_PVT_FIX;
   3281e:	2304      	movs	r3, #4
   32820:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
	return z_impl_k_uptime_ticks();
   32824:	f00f f958 	bl	41ad8 <z_impl_k_uptime_ticks>
   32828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3282c:	468c      	mov	ip, r1
   3282e:	fba0 0103 	umull	r0, r1, r0, r3
   32832:	fb03 110c 	mla	r1, r3, ip, r1
				fix_timestamp = k_uptime_get();
   32836:	4a5f      	ldr	r2, [pc, #380]	; (329b4 <gps_thread+0x468>)
   32838:	0bc3      	lsrs	r3, r0, #15
   3283a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   3283e:	0bc9      	lsrs	r1, r1, #15
   32840:	e9c2 3100 	strd	r3, r1, [r2]
	uint8_t  n_unhealthy = 0;
   32844:	f04f 0900 	mov.w	r9, #0
	uint8_t  n_used = 0;
   32848:	46cb      	mov	fp, r9
			notify_event(dev, &evt);
   3284a:	4638      	mov	r0, r7
   3284c:	a934      	add	r1, sp, #208	; 0xd0
   3284e:	f00d fc13 	bl	40078 <notify_event>
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   32852:	01ab      	lsls	r3, r5, #6
   32854:	f043 0304 	orr.w	r3, r3, #4
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   32858:	f8cd 9008 	str.w	r9, [sp, #8]
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   3285c:	9303      	str	r3, [sp, #12]
		uint8_t sv = pvt_data->pvt.sv[i].sv;
   3285e:	f898 3046 	ldrb.w	r3, [r8, #70]	; 0x46
		if (sv) { /* SV number 0 indicates no satellite */
   32862:	b353      	cbz	r3, 328ba <gps_thread+0x36e>
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   32864:	f898 2050 	ldrb.w	r2, [r8, #80]	; 0x50
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   32868:	f8df c170 	ldr.w	ip, [pc, #368]	; 329dc <gps_thread+0x490>
			if (used) {
   3286c:	0790      	lsls	r0, r2, #30
				n_used++;
   3286e:	bf48      	it	mi
   32870:	f10b 0b01 	addmi.w	fp, fp, #1
			     NRF_GNSS_SV_FLAG_USED_IN_FIX) ? true : false;
   32874:	f3c2 0140 	ubfx	r1, r2, #1, #1
				  NRF_GNSS_SV_FLAG_UNHEALTHY) ? true : false;
   32878:	f3c2 0ec0 	ubfx	lr, r2, #3, #1
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   3287c:	484e      	ldr	r0, [pc, #312]	; (329b8 <gps_thread+0x46c>)
				n_used++;
   3287e:	bf48      	it	mi
   32880:	fa5f fb8b 	uxtbmi.w	fp, fp
			if (unhealthy) {
   32884:	0712      	lsls	r2, r2, #28
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   32886:	4a4d      	ldr	r2, [pc, #308]	; (329bc <gps_thread+0x470>)
				n_unhealthy++;
   32888:	bf44      	itt	mi
   3288a:	f109 0901 	addmi.w	r9, r9, #1
   3288e:	fa5f f989 	uxtbmi.w	r9, r9
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   32892:	2900      	cmp	r1, #0
   32894:	bf18      	it	ne
   32896:	4602      	movne	r2, r0
   32898:	4949      	ldr	r1, [pc, #292]	; (329c0 <gps_thread+0x474>)
			n_tracked++;
   3289a:	f10a 0a01 	add.w	sl, sl, #1
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   3289e:	f1be 0f00 	cmp.w	lr, #0
   328a2:	bf08      	it	eq
   328a4:	4661      	moveq	r1, ip
   328a6:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   328aa:	e9cd 2100 	strd	r2, r1, [sp]
   328ae:	4a45      	ldr	r2, [pc, #276]	; (329c4 <gps_thread+0x478>)
   328b0:	4945      	ldr	r1, [pc, #276]	; (329c8 <gps_thread+0x47c>)
			n_tracked++;
   328b2:	fa5f fa8a 	uxtb.w	sl, sl
			LOG_DBG("Tracking SV %2u: %s, %s", sv,
   328b6:	f00a fd23 	bl	3d300 <log_string_sync>
	for (int i = 0; i < NRF_GNSS_MAX_SATELLITES; ++i) {
   328ba:	9b02      	ldr	r3, [sp, #8]
   328bc:	f108 080c 	add.w	r8, r8, #12
   328c0:	3301      	adds	r3, #1
   328c2:	2b0c      	cmp	r3, #12
   328c4:	9302      	str	r3, [sp, #8]
   328c6:	d1ca      	bne.n	3285e <gps_thread+0x312>
	LOG_DBG("Tracking: %d Using: %d Unhealthy: %d", n_tracked,
   328c8:	ea4f 1885 	mov.w	r8, r5, lsl #6
   328cc:	f048 0804 	orr.w	r8, r8, #4
   328d0:	4653      	mov	r3, sl
   328d2:	4640      	mov	r0, r8
   328d4:	e9cd b900 	strd	fp, r9, [sp]
   328d8:	4a3a      	ldr	r2, [pc, #232]	; (329c4 <gps_thread+0x478>)
   328da:	493c      	ldr	r1, [pc, #240]	; (329cc <gps_thread+0x480>)
   328dc:	f00a fd10 	bl	3d300 <log_string_sync>
   328e0:	f00f f8fa 	bl	41ad8 <z_impl_k_uptime_ticks>
   328e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   328e8:	460a      	mov	r2, r1
   328ea:	fba0 0103 	umull	r0, r1, r0, r3
   328ee:	fb03 1102 	mla	r1, r3, r2, r1
   328f2:	ea4f 3cd0 	mov.w	ip, r0, lsr #15
	LOG_DBG("Seconds since last fix %lld",
   328f6:	4b2f      	ldr	r3, [pc, #188]	; (329b4 <gps_thread+0x468>)
   328f8:	ea4c 4c41 	orr.w	ip, ip, r1, lsl #17
   328fc:	ea4f 3ed1 	mov.w	lr, r1, lsr #15
   32900:	e9d3 0100 	ldrd	r0, r1, [r3]
   32904:	ebbc 0000 	subs.w	r0, ip, r0
   32908:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   3290c:	f04f 0300 	mov.w	r3, #0
   32910:	eb6e 0101 	sbc.w	r1, lr, r1
   32914:	f7ea fad2 	bl	1cebc <__aeabi_uldivmod>
   32918:	4a2a      	ldr	r2, [pc, #168]	; (329c4 <gps_thread+0x478>)
   3291a:	e9cd 0100 	strd	r0, r1, [sp]
   3291e:	4640      	mov	r0, r8
   32920:	492b      	ldr	r1, [pc, #172]	; (329d0 <gps_thread+0x484>)
   32922:	f00a fced 	bl	3d300 <log_string_sync>
   32926:	f04f 0900 	mov.w	r9, #0
   3292a:	e630      	b.n	3258e <gps_thread+0x42>
				evt.type = GPS_EVT_PVT;
   3292c:	2303      	movs	r3, #3
   3292e:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
   32932:	e787      	b.n	32844 <gps_thread+0x2f8>
			if (operation_blocked) {
   32934:	f1b9 0f00 	cmp.w	r9, #0
   32938:	f47f ae29 	bne.w	3258e <gps_thread+0x42>
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   3293c:	4642      	mov	r2, r8
   3293e:	23b8      	movs	r3, #184	; 0xb8
   32940:	a966      	add	r1, sp, #408	; 0x198
   32942:	a836      	add	r0, sp, #216	; 0xd8
			evt.nmea.len = len - 1;
   32944:	f108 38ff 	add.w	r8, r8, #4294967295
			memcpy(evt.nmea.buf, raw_gps_data.nmea, len);
   32948:	f00f f9b6 	bl	41cb8 <__memcpy_chk>
			evt.nmea.len = len - 1;
   3294c:	f88d 812b 	strb.w	r8, [sp, #299]	; 0x12b
			if (has_fix) {
   32950:	b176      	cbz	r6, 32970 <gps_thread+0x424>
				LOG_DBG("NMEA: Position fix");
   32952:	01a8      	lsls	r0, r5, #6
   32954:	4a14      	ldr	r2, [pc, #80]	; (329a8 <gps_thread+0x45c>)
   32956:	491f      	ldr	r1, [pc, #124]	; (329d4 <gps_thread+0x488>)
   32958:	f040 0004 	orr.w	r0, r0, #4
   3295c:	f00a fcd0 	bl	3d300 <log_string_sync>
				evt.type = GPS_EVT_NMEA_FIX;
   32960:	2306      	movs	r3, #6
			notify_event(dev, &evt);
   32962:	4638      	mov	r0, r7
   32964:	a934      	add	r1, sp, #208	; 0xd0
				evt.type = GPS_EVT_NMEA;
   32966:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
			notify_event(dev, &evt);
   3296a:	f00d fb85 	bl	40078 <notify_event>
			break;
   3296e:	e7da      	b.n	32926 <gps_thread+0x3da>
				evt.type = GPS_EVT_NMEA;
   32970:	2305      	movs	r3, #5
   32972:	e7f6      	b.n	32962 <gps_thread+0x416>
			LOG_DBG("A-GPS data update needed");
   32974:	01a8      	lsls	r0, r5, #6
   32976:	4a0c      	ldr	r2, [pc, #48]	; (329a8 <gps_thread+0x45c>)
   32978:	4917      	ldr	r1, [pc, #92]	; (329d8 <gps_thread+0x48c>)
   3297a:	f040 0004 	orr.w	r0, r0, #4
   3297e:	f00a fcbf 	bl	3d300 <log_string_sync>
			evt.type = GPS_EVT_AGPS_DATA_NEEDED;
   32982:	2309      	movs	r3, #9
   32984:	f88d 30d0 	strb.w	r3, [sp, #208]	; 0xd0
			evt.agps_request.sv_mask_ephe =
   32988:	9b66      	ldr	r3, [sp, #408]	; 0x198
			evt.agps_request.utc =
   3298a:	f89d 20e0 	ldrb.w	r2, [sp, #224]	; 0xe0
			evt.agps_request.sv_mask_ephe =
   3298e:	9336      	str	r3, [sp, #216]	; 0xd8
			evt.agps_request.sv_mask_alm =
   32990:	9b67      	ldr	r3, [sp, #412]	; 0x19c
			evt.agps_request.utc =
   32992:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
			evt.agps_request.sv_mask_alm =
   32996:	9337      	str	r3, [sp, #220]	; 0xdc
			evt.agps_request.utc =
   32998:	9b68      	ldr	r3, [sp, #416]	; 0x1a0
			notify_event(dev, &evt);
   3299a:	a934      	add	r1, sp, #208	; 0xd0
			evt.agps_request.utc =
   3299c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   329a0:	4313      	orrs	r3, r2
   329a2:	f88d 30e0 	strb.w	r3, [sp, #224]	; 0xe0
			notify_event(dev, &evt);
   329a6:	e5ef      	b.n	32588 <gps_thread+0x3c>
   329a8:	0004b4aa 	.word	0x0004b4aa
   329ac:	0004b375 	.word	0x0004b375
   329b0:	0004b398 	.word	0x0004b398
   329b4:	20018930 	.word	0x20018930
   329b8:	0004b272 	.word	0x0004b272
   329bc:	0004b27b 	.word	0x0004b27b
   329c0:	0004b284 	.word	0x0004b284
   329c4:	0004b477 	.word	0x0004b477
   329c8:	0004b3ae 	.word	0x0004b3ae
   329cc:	0004b3ca 	.word	0x0004b3ca
   329d0:	0004b3f3 	.word	0x0004b3f3
   329d4:	0004b413 	.word	0x0004b413
   329d8:	0004b42a 	.word	0x0004b42a
   329dc:	0004b290 	.word	0x0004b290

000329e0 <stop>:
{
   329e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct gps_drv_data *drv_data = dev->data;
   329e2:	68c5      	ldr	r5, [r0, #12]
{
   329e4:	4604      	mov	r4, r0
   329e6:	b085      	sub	sp, #20
	if (atomic_get(&drv_data->is_shutdown) == 1) {
   329e8:	f105 0020 	add.w	r0, r5, #32
   329ec:	f00d fb5c 	bl	400a8 <atomic_get>
   329f0:	2801      	cmp	r0, #1
   329f2:	d03b      	beq.n	32a6c <stop+0x8c>
	k_delayed_work_cancel(&drv_data->timeout_work);
   329f4:	f505 6015 	add.w	r0, r5, #2384	; 0x950
   329f8:	f006 ffb2 	bl	39960 <k_delayed_work_cancel>
	k_delayed_work_cancel(&drv_data->blocked_work);
   329fc:	f505 6018 	add.w	r0, r5, #2432	; 0x980
   32a00:	f006 ffae 	bl	39960 <k_delayed_work_cancel>
	if (atomic_get(&drv_data->is_active) == 0) {
   32a04:	f105 001c 	add.w	r0, r5, #28
   32a08:	f00d fb4e 	bl	400a8 <atomic_get>
   32a0c:	b328      	cbz	r0, 32a5a <stop+0x7a>
	nrf_gnss_delete_mask_t delete_mask = 0;
   32a0e:	2700      	movs	r7, #0
	err = stop_gps(dev, false);
   32a10:	68e6      	ldr	r6, [r4, #12]
   32a12:	4b18      	ldr	r3, [pc, #96]	; (32a74 <stop+0x94>)
   32a14:	4c18      	ldr	r4, [pc, #96]	; (32a78 <stop+0x98>)
		LOG_DBG("Stopping GPS");
   32a16:	4a19      	ldr	r2, [pc, #100]	; (32a7c <stop+0x9c>)
   32a18:	1ae4      	subs	r4, r4, r3
   32a1a:	08e4      	lsrs	r4, r4, #3
   32a1c:	01a4      	lsls	r4, r4, #6
   32a1e:	4918      	ldr	r1, [pc, #96]	; (32a80 <stop+0xa0>)
   32a20:	f044 0004 	orr.w	r0, r4, #4
	nrf_gnss_delete_mask_t delete_mask = 0;
   32a24:	9703      	str	r7, [sp, #12]
		LOG_DBG("Stopping GPS");
   32a26:	f00a fc6b 	bl	3d300 <log_string_sync>
	atomic_set(&drv_data->is_active, 0);
   32a2a:	4639      	mov	r1, r7
   32a2c:	f106 001c 	add.w	r0, r6, #28
   32a30:	f00d fb3d 	bl	400ae <atomic_set>
	retval = nrf_setsockopt(drv_data->socket,
   32a34:	2304      	movs	r3, #4
   32a36:	9300      	str	r3, [sp, #0]
   32a38:	2208      	movs	r2, #8
   32a3a:	f44f 7101 	mov.w	r1, #516	; 0x204
   32a3e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   32a40:	ab03      	add	r3, sp, #12
   32a42:	f00e fed9 	bl	417f8 <nrf_setsockopt>
	if (retval != 0) {
   32a46:	b140      	cbz	r0, 32a5a <stop+0x7a>
		LOG_ERR("Failed to stop GPS");
   32a48:	f044 0001 	orr.w	r0, r4, #1
   32a4c:	490d      	ldr	r1, [pc, #52]	; (32a84 <stop+0xa4>)
   32a4e:	f00a fc57 	bl	3d300 <log_string_sync>
		return -EIO;
   32a52:	f06f 0004 	mvn.w	r0, #4
}
   32a56:	b005      	add	sp, #20
   32a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32a5a:	2200      	movs	r2, #0
   32a5c:	2300      	movs	r3, #0
   32a5e:	480a      	ldr	r0, [pc, #40]	; (32a88 <stop+0xa8>)
   32a60:	f505 6112 	add.w	r1, r5, #2336	; 0x920
   32a64:	f006 fef2 	bl	3984c <k_delayed_work_submit_to_queue>
	return 0;
   32a68:	2000      	movs	r0, #0
   32a6a:	e7f4      	b.n	32a56 <stop+0x76>
		return -EHOSTDOWN;
   32a6c:	f06f 0074 	mvn.w	r0, #116	; 0x74
   32a70:	e7f1      	b.n	32a56 <stop+0x76>
   32a72:	bf00      	nop
   32a74:	0004339c 	.word	0x0004339c
   32a78:	0004347c 	.word	0x0004347c
   32a7c:	0004b4d8 	.word	0x0004b4d8
   32a80:	0004b447 	.word	0x0004b447
   32a84:	0004b458 	.word	0x0004b458
   32a88:	20018af0 	.word	0x20018af0

00032a8c <boot_write_magic>:
}

static inline uint32_t
boot_magic_off(const struct flash_area *fap)
{
    return fap->fa_size - BOOT_MAGIC_SZ;
   32a8c:	6881      	ldr	r1, [r0, #8]
    return rc;
}

int
boot_write_magic(const struct flash_area *fap)
{
   32a8e:	b508      	push	{r3, lr}
    off = boot_magic_off(fap);

    BOOT_LOG_DBG("writing magic; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   32a90:	4a04      	ldr	r2, [pc, #16]	; (32aa4 <boot_write_magic+0x18>)
   32a92:	2310      	movs	r3, #16
   32a94:	3910      	subs	r1, #16
   32a96:	f00b f892 	bl	3dbbe <flash_area_write>
    if (rc != 0) {
        return BOOT_EFLASH;
    }

    return 0;
}
   32a9a:	3800      	subs	r0, #0
   32a9c:	bf18      	it	ne
   32a9e:	2001      	movne	r0, #1
   32aa0:	bd08      	pop	{r3, pc}
   32aa2:	bf00      	nop
   32aa4:	00043eec 	.word	0x00043eec

00032aa8 <boot_read_swap_state>:
{
   32aa8:	b530      	push	{r4, r5, lr}
   32aaa:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   32aac:	6881      	ldr	r1, [r0, #8]
{
   32aae:	b087      	sub	sp, #28
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   32ab0:	2310      	movs	r3, #16
   32ab2:	aa02      	add	r2, sp, #8
   32ab4:	3910      	subs	r1, #16
{
   32ab6:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, magic, BOOT_MAGIC_SZ);
   32ab8:	f00b f864 	bl	3db84 <flash_area_read>
    if (rc < 0) {
   32abc:	2800      	cmp	r0, #0
   32abe:	db11      	blt.n	32ae4 <boot_read_swap_state+0x3c>
    if (buffer == NULL || len == 0) {
   32ac0:	2210      	movs	r2, #16
   32ac2:	4628      	mov	r0, r5
   32ac4:	a902      	add	r1, sp, #8
   32ac6:	f00d fb26 	bl	40116 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, magic, BOOT_MAGIC_SZ)) {
   32aca:	b168      	cbz	r0, 32ae8 <boot_read_swap_state+0x40>
        state->magic = BOOT_MAGIC_UNSET;
   32acc:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
   32ace:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   32ad0:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read(fap, off, &swap_info, sizeof swap_info);
   32ad2:	2301      	movs	r3, #1
   32ad4:	4628      	mov	r0, r5
   32ad6:	f10d 0207 	add.w	r2, sp, #7
   32ada:	3928      	subs	r1, #40	; 0x28
   32adc:	f00b f852 	bl	3db84 <flash_area_read>
    if (rc < 0) {
   32ae0:	2800      	cmp	r0, #0
   32ae2:	da0b      	bge.n	32afc <boot_read_swap_state+0x54>
        return BOOT_EFLASH;
   32ae4:	2001      	movs	r0, #1
   32ae6:	e02a      	b.n	32b3e <boot_read_swap_state+0x96>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   32ae8:	2210      	movs	r2, #16
   32aea:	4916      	ldr	r1, [pc, #88]	; (32b44 <boot_read_swap_state+0x9c>)
   32aec:	a802      	add	r0, sp, #8
   32aee:	f00f f8c8 	bl	41c82 <memcmp>
   32af2:	2800      	cmp	r0, #0
        return BOOT_MAGIC_GOOD;
   32af4:	bf14      	ite	ne
   32af6:	2302      	movne	r3, #2
   32af8:	2301      	moveq	r3, #1
   32afa:	e7e8      	b.n	32ace <boot_read_swap_state+0x26>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   32afc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   32b00:	4628      	mov	r0, r5
   32b02:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   32b06:	091b      	lsrs	r3, r3, #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   32b08:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   32b0a:	7123      	strb	r3, [r4, #4]
    if (buffer == NULL || len == 0) {
   32b0c:	2201      	movs	r2, #1
   32b0e:	f10d 0107 	add.w	r1, sp, #7
   32b12:	f00d fb00 	bl	40116 <bootutil_buffer_is_erased.part.0>
    if (bootutil_buffer_is_erased(fap, &swap_info, sizeof swap_info) ||
   32b16:	b910      	cbnz	r0, 32b1e <boot_read_swap_state+0x76>
   32b18:	7863      	ldrb	r3, [r4, #1]
   32b1a:	2b04      	cmp	r3, #4
   32b1c:	d903      	bls.n	32b26 <boot_read_swap_state+0x7e>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   32b1e:	2301      	movs	r3, #1
   32b20:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
   32b22:	2300      	movs	r3, #0
   32b24:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
   32b26:	68aa      	ldr	r2, [r5, #8]
    return boot_read_flag(fap, copy_done, boot_copy_done_off(fap));
   32b28:	4628      	mov	r0, r5
   32b2a:	3a20      	subs	r2, #32
   32b2c:	1ca1      	adds	r1, r4, #2
   32b2e:	f00d fb31 	bl	40194 <boot_read_flag>
    if (rc) {
   32b32:	2800      	cmp	r0, #0
   32b34:	d1d6      	bne.n	32ae4 <boot_read_swap_state+0x3c>
    return boot_read_image_ok(fap, &state->image_ok);
   32b36:	4628      	mov	r0, r5
   32b38:	1ce1      	adds	r1, r4, #3
   32b3a:	f00d fb54 	bl	401e6 <boot_read_image_ok>
}
   32b3e:	b007      	add	sp, #28
   32b40:	bd30      	pop	{r4, r5, pc}
   32b42:	bf00      	nop
   32b44:	00043eec 	.word	0x00043eec

00032b48 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   32b48:	2a0e      	cmp	r2, #14
{
   32b4a:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   32b4c:	d906      	bls.n	32b5c <boot_write_swap_info+0x14>
   32b4e:	4b0c      	ldr	r3, [pc, #48]	; (32b80 <boot_write_swap_info+0x38>)
   32b50:	f240 1193 	movw	r1, #403	; 0x193
   32b54:	4a0b      	ldr	r2, [pc, #44]	; (32b84 <boot_write_swap_info+0x3c>)
   32b56:	480c      	ldr	r0, [pc, #48]	; (32b88 <boot_write_swap_info+0x40>)
   32b58:	f007 ff02 	bl	3a960 <__assert_func>
   32b5c:	290e      	cmp	r1, #14
   32b5e:	d901      	bls.n	32b64 <boot_write_swap_info+0x1c>
   32b60:	4b0a      	ldr	r3, [pc, #40]	; (32b8c <boot_write_swap_info+0x44>)
   32b62:	e7f5      	b.n	32b50 <boot_write_swap_info+0x8>
   32b64:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
   32b68:	6881      	ldr	r1, [r0, #8]
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   32b6a:	f88d 2007 	strb.w	r2, [sp, #7]
    off = boot_swap_info_off(fap);
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   32b6e:	3928      	subs	r1, #40	; 0x28
   32b70:	f10d 0207 	add.w	r2, sp, #7
   32b74:	f00d fae0 	bl	40138 <boot_write_trailer.constprop.0>
}
   32b78:	b003      	add	sp, #12
   32b7a:	f85d fb04 	ldr.w	pc, [sp], #4
   32b7e:	bf00      	nop
   32b80:	0004b4ec 	.word	0x0004b4ec
   32b84:	0004b560 	.word	0x0004b560
   32b88:	0004b4fe 	.word	0x0004b4fe
   32b8c:	0004b541 	.word	0x0004b541

00032b90 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   32b90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   32b92:	4606      	mov	r6, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
   32b94:	a902      	add	r1, sp, #8
   32b96:	2007      	movs	r0, #7
   32b98:	f00d fb29 	bl	401ee <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   32b9c:	4604      	mov	r4, r0
   32b9e:	b938      	cbnz	r0, 32bb0 <boot_set_pending+0x20>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   32ba0:	f89d 5008 	ldrb.w	r5, [sp, #8]
   32ba4:	2d02      	cmp	r5, #2
   32ba6:	d024      	beq.n	32bf2 <boot_set_pending+0x62>
   32ba8:	2d03      	cmp	r5, #3
   32baa:	d004      	beq.n	32bb6 <boot_set_pending+0x26>
   32bac:	2d01      	cmp	r5, #1
   32bae:	d12f      	bne.n	32c10 <boot_set_pending+0x80>

    default:
        assert(0);
        return BOOT_EBADIMAGE;
    }
}
   32bb0:	4620      	mov	r0, r4
   32bb2:	b004      	add	sp, #16
   32bb4:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   32bb6:	2007      	movs	r0, #7
   32bb8:	a901      	add	r1, sp, #4
   32bba:	f7f2 f98b 	bl	24ed4 <flash_area_open>
        if (rc != 0) {
   32bbe:	b9b0      	cbnz	r0, 32bee <boot_set_pending+0x5e>
            rc = boot_write_magic(fap);
   32bc0:	9801      	ldr	r0, [sp, #4]
   32bc2:	f7ff ff63 	bl	32a8c <boot_write_magic>
        if (rc == 0 && permanent) {
   32bc6:	4604      	mov	r4, r0
   32bc8:	b928      	cbnz	r0, 32bd6 <boot_set_pending+0x46>
   32bca:	9801      	ldr	r0, [sp, #4]
   32bcc:	b13e      	cbz	r6, 32bde <boot_set_pending+0x4e>
            rc = boot_write_image_ok(fap);
   32bce:	f00d fafe 	bl	401ce <boot_write_image_ok>
        if (rc == 0) {
   32bd2:	4604      	mov	r4, r0
   32bd4:	b120      	cbz	r0, 32be0 <boot_set_pending+0x50>
        flash_area_close(fap);
   32bd6:	9801      	ldr	r0, [sp, #4]
   32bd8:	f00a ffd3 	bl	3db82 <flash_area_close>
        return rc;
   32bdc:	e7e8      	b.n	32bb0 <boot_set_pending+0x20>
                swap_type = BOOT_SWAP_TYPE_TEST;
   32bde:	2502      	movs	r5, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   32be0:	2200      	movs	r2, #0
   32be2:	4629      	mov	r1, r5
   32be4:	9801      	ldr	r0, [sp, #4]
   32be6:	f7ff ffaf 	bl	32b48 <boot_write_swap_info>
   32bea:	4604      	mov	r4, r0
   32bec:	e7f3      	b.n	32bd6 <boot_set_pending+0x46>
            rc = BOOT_EFLASH;
   32bee:	2401      	movs	r4, #1
   32bf0:	e7f1      	b.n	32bd6 <boot_set_pending+0x46>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   32bf2:	2007      	movs	r0, #7
   32bf4:	a901      	add	r1, sp, #4
   32bf6:	f7f2 f96d 	bl	24ed4 <flash_area_open>
        if (rc != 0) {
   32bfa:	b980      	cbnz	r0, 32c1e <boot_set_pending+0x8e>
        flash_area_erase(fap, 0, fap->fa_size);
   32bfc:	9801      	ldr	r0, [sp, #4]
   32bfe:	4621      	mov	r1, r4
   32c00:	6882      	ldr	r2, [r0, #8]
   32c02:	f00b f805 	bl	3dc10 <flash_area_erase>
        flash_area_close(fap);
   32c06:	9801      	ldr	r0, [sp, #4]
   32c08:	f00a ffbb 	bl	3db82 <flash_area_close>
        return BOOT_EBADIMAGE;
   32c0c:	2403      	movs	r4, #3
   32c0e:	e7cf      	b.n	32bb0 <boot_set_pending+0x20>
        assert(0);
   32c10:	f240 211e 	movw	r1, #542	; 0x21e
   32c14:	4b03      	ldr	r3, [pc, #12]	; (32c24 <boot_set_pending+0x94>)
   32c16:	4a04      	ldr	r2, [pc, #16]	; (32c28 <boot_set_pending+0x98>)
   32c18:	4804      	ldr	r0, [pc, #16]	; (32c2c <boot_set_pending+0x9c>)
   32c1a:	f007 fea1 	bl	3a960 <__assert_func>
            return BOOT_EFLASH;
   32c1e:	2401      	movs	r4, #1
   32c20:	e7c6      	b.n	32bb0 <boot_set_pending+0x20>
   32c22:	bf00      	nop
   32c24:	0004bcc7 	.word	0x0004bcc7
   32c28:	0004b575 	.word	0x0004b575
   32c2c:	0004b4fe 	.word	0x0004b4fe

00032c30 <rpc_handle_data_message>:
   32c30:	6803      	ldr	r3, [r0, #0]
   32c32:	b510      	push	{r4, lr}
   32c34:	b29b      	uxth	r3, r3
   32c36:	2b04      	cmp	r3, #4
   32c38:	d009      	beq.n	32c4e <rpc_handle_data_message+0x1e>
   32c3a:	2b03      	cmp	r3, #3
   32c3c:	d010      	beq.n	32c60 <rpc_handle_data_message+0x30>
   32c3e:	2b06      	cmp	r3, #6
   32c40:	d010      	beq.n	32c64 <rpc_handle_data_message+0x34>
   32c42:	2b07      	cmp	r3, #7
   32c44:	d010      	beq.n	32c68 <rpc_handle_data_message+0x38>
   32c46:	6880      	ldr	r0, [r0, #8]
   32c48:	b980      	cbnz	r0, 32c6c <rpc_handle_data_message+0x3c>
   32c4a:	2000      	movs	r0, #0
   32c4c:	bd10      	pop	{r4, pc}
   32c4e:	2300      	movs	r3, #0
   32c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32c54:	4a07      	ldr	r2, [pc, #28]	; (32c74 <rpc_handle_data_message+0x44>)
   32c56:	2100      	movs	r1, #0
   32c58:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   32c5c:	685b      	ldr	r3, [r3, #4]
   32c5e:	4718      	bx	r3
   32c60:	2301      	movs	r3, #1
   32c62:	e7f5      	b.n	32c50 <rpc_handle_data_message+0x20>
   32c64:	2302      	movs	r3, #2
   32c66:	e7f3      	b.n	32c50 <rpc_handle_data_message+0x20>
   32c68:	2303      	movs	r3, #3
   32c6a:	e7f1      	b.n	32c50 <rpc_handle_data_message+0x20>
   32c6c:	f00d fb68 	bl	40340 <rpc_transport_data_free>
   32c70:	e7eb      	b.n	32c4a <rpc_handle_data_message+0x1a>
   32c72:	bf00      	nop
   32c74:	00043efc 	.word	0x00043efc

00032c78 <ipc_trace_init>:
   32c78:	4b01      	ldr	r3, [pc, #4]	; (32c80 <ipc_trace_init+0x8>)
   32c7a:	6018      	str	r0, [r3, #0]
   32c7c:	4770      	bx	lr
   32c7e:	bf00      	nop
   32c80:	20019da4 	.word	0x20019da4

00032c84 <nrf_modem_os_trace_irq_handler>:
   32c84:	b508      	push	{r3, lr}
   32c86:	4b11      	ldr	r3, [pc, #68]	; (32ccc <nrf_modem_os_trace_irq_handler+0x48>)
   32c88:	781b      	ldrb	r3, [r3, #0]
   32c8a:	b90b      	cbnz	r3, 32c90 <nrf_modem_os_trace_irq_handler+0xc>
   32c8c:	f7f6 fcc0 	bl	29610 <nrf_modem_os_trace_irq_clear>
   32c90:	4b0f      	ldr	r3, [pc, #60]	; (32cd0 <nrf_modem_os_trace_irq_handler+0x4c>)
   32c92:	6818      	ldr	r0, [r3, #0]
   32c94:	b128      	cbz	r0, 32ca2 <nrf_modem_os_trace_irq_handler+0x1e>
   32c96:	6882      	ldr	r2, [r0, #8]
   32c98:	6843      	ldr	r3, [r0, #4]
   32c9a:	429a      	cmp	r2, r3
   32c9c:	d001      	beq.n	32ca2 <nrf_modem_os_trace_irq_handler+0x1e>
   32c9e:	f00d fb59 	bl	40354 <trace_write>
   32ca2:	4b0c      	ldr	r3, [pc, #48]	; (32cd4 <nrf_modem_os_trace_irq_handler+0x50>)
   32ca4:	6818      	ldr	r0, [r3, #0]
   32ca6:	b128      	cbz	r0, 32cb4 <nrf_modem_os_trace_irq_handler+0x30>
   32ca8:	6882      	ldr	r2, [r0, #8]
   32caa:	6843      	ldr	r3, [r0, #4]
   32cac:	429a      	cmp	r2, r3
   32cae:	d001      	beq.n	32cb4 <nrf_modem_os_trace_irq_handler+0x30>
   32cb0:	f00d fb50 	bl	40354 <trace_write>
   32cb4:	4b08      	ldr	r3, [pc, #32]	; (32cd8 <nrf_modem_os_trace_irq_handler+0x54>)
   32cb6:	6818      	ldr	r0, [r3, #0]
   32cb8:	b138      	cbz	r0, 32cca <nrf_modem_os_trace_irq_handler+0x46>
   32cba:	6882      	ldr	r2, [r0, #8]
   32cbc:	6843      	ldr	r3, [r0, #4]
   32cbe:	429a      	cmp	r2, r3
   32cc0:	d003      	beq.n	32cca <nrf_modem_os_trace_irq_handler+0x46>
   32cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   32cc6:	f00d bb45 	b.w	40354 <trace_write>
   32cca:	bd08      	pop	{r3, pc}
   32ccc:	20020c04 	.word	0x20020c04
   32cd0:	20019da0 	.word	0x20019da0
   32cd4:	20019d98 	.word	0x20019d98
   32cd8:	20019d9c 	.word	0x20019d9c

00032cdc <ipc_trace_handle>:
   32cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32ce0:	4b43      	ldr	r3, [pc, #268]	; (32df0 <ipc_trace_handle+0x114>)
   32ce2:	681b      	ldr	r3, [r3, #0]
   32ce4:	6919      	ldr	r1, [r3, #16]
   32ce6:	f8d3 a014 	ldr.w	sl, [r3, #20]
   32cea:	7c1a      	ldrb	r2, [r3, #16]
   32cec:	2200      	movs	r2, #0
   32cee:	741a      	strb	r2, [r3, #16]
   32cf0:	7c58      	ldrb	r0, [r3, #17]
   32cf2:	745a      	strb	r2, [r3, #17]
   32cf4:	7c98      	ldrb	r0, [r3, #18]
   32cf6:	749a      	strb	r2, [r3, #18]
   32cf8:	7cd8      	ldrb	r0, [r3, #19]
   32cfa:	74da      	strb	r2, [r3, #19]
   32cfc:	7d18      	ldrb	r0, [r3, #20]
   32cfe:	751a      	strb	r2, [r3, #20]
   32d00:	7d58      	ldrb	r0, [r3, #21]
   32d02:	755a      	strb	r2, [r3, #21]
   32d04:	7d98      	ldrb	r0, [r3, #22]
   32d06:	759a      	strb	r2, [r3, #22]
   32d08:	7dd8      	ldrb	r0, [r3, #23]
   32d0a:	75da      	strb	r2, [r3, #23]
   32d0c:	2900      	cmp	r1, #0
   32d0e:	d033      	beq.n	32d78 <ipc_trace_handle+0x9c>
   32d10:	3901      	subs	r1, #1
   32d12:	2903      	cmp	r1, #3
   32d14:	d830      	bhi.n	32d78 <ipc_trace_handle+0x9c>
   32d16:	e8df f001 	tbb	[pc, r1]
   32d1a:	6502      	.short	0x6502
   32d1c:	534c      	.short	0x534c
   32d1e:	4a35      	ldr	r2, [pc, #212]	; (32df4 <ipc_trace_handle+0x118>)
   32d20:	7811      	ldrb	r1, [r2, #0]
   32d22:	b109      	cbz	r1, 32d28 <ipc_trace_handle+0x4c>
   32d24:	2100      	movs	r1, #0
   32d26:	7011      	strb	r1, [r2, #0]
   32d28:	2200      	movs	r2, #0
   32d2a:	4691      	mov	r9, r2
   32d2c:	4617      	mov	r7, r2
   32d2e:	4614      	mov	r4, r2
   32d30:	4d31      	ldr	r5, [pc, #196]	; (32df8 <ipc_trace_handle+0x11c>)
   32d32:	4932      	ldr	r1, [pc, #200]	; (32dfc <ipc_trace_handle+0x120>)
   32d34:	4832      	ldr	r0, [pc, #200]	; (32e00 <ipc_trace_handle+0x124>)
   32d36:	f8d5 e000 	ldr.w	lr, [r5]
   32d3a:	f8d1 8000 	ldr.w	r8, [r1]
   32d3e:	6806      	ldr	r6, [r0, #0]
   32d40:	f8da b008 	ldr.w	fp, [sl, #8]
   32d44:	9501      	str	r5, [sp, #4]
   32d46:	45a3      	cmp	fp, r4
   32d48:	d119      	bne.n	32d7e <ipc_trace_handle+0xa2>
   32d4a:	b107      	cbz	r7, 32d4e <ipc_trace_handle+0x72>
   32d4c:	6006      	str	r6, [r0, #0]
   32d4e:	f1b9 0f00 	cmp.w	r9, #0
   32d52:	d001      	beq.n	32d58 <ipc_trace_handle+0x7c>
   32d54:	f8c1 8000 	str.w	r8, [r1]
   32d58:	b112      	cbz	r2, 32d60 <ipc_trace_handle+0x84>
   32d5a:	9a01      	ldr	r2, [sp, #4]
   32d5c:	f8c2 e000 	str.w	lr, [r2]
   32d60:	7a1a      	ldrb	r2, [r3, #8]
   32d62:	2101      	movs	r1, #1
   32d64:	2200      	movs	r2, #0
   32d66:	7219      	strb	r1, [r3, #8]
   32d68:	7a59      	ldrb	r1, [r3, #9]
   32d6a:	725a      	strb	r2, [r3, #9]
   32d6c:	7a99      	ldrb	r1, [r3, #10]
   32d6e:	729a      	strb	r2, [r3, #10]
   32d70:	7ada      	ldrb	r2, [r3, #11]
   32d72:	f06f 025f 	mvn.w	r2, #95	; 0x5f
   32d76:	72da      	strb	r2, [r3, #11]
   32d78:	b003      	add	sp, #12
   32d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d7e:	1ca5      	adds	r5, r4, #2
   32d80:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
   32d84:	686d      	ldr	r5, [r5, #4]
   32d86:	f895 c000 	ldrb.w	ip, [r5]
   32d8a:	f1bc 0f62 	cmp.w	ip, #98	; 0x62
   32d8e:	d009      	beq.n	32da4 <ipc_trace_handle+0xc8>
   32d90:	f1bc 0f63 	cmp.w	ip, #99	; 0x63
   32d94:	d00a      	beq.n	32dac <ipc_trace_handle+0xd0>
   32d96:	f1bc 0f61 	cmp.w	ip, #97	; 0x61
   32d9a:	bf04      	itt	eq
   32d9c:	462e      	moveq	r6, r5
   32d9e:	2701      	moveq	r7, #1
   32da0:	3401      	adds	r4, #1
   32da2:	e7d0      	b.n	32d46 <ipc_trace_handle+0x6a>
   32da4:	46a8      	mov	r8, r5
   32da6:	f04f 0901 	mov.w	r9, #1
   32daa:	e7f9      	b.n	32da0 <ipc_trace_handle+0xc4>
   32dac:	46ae      	mov	lr, r5
   32dae:	2201      	movs	r2, #1
   32db0:	e7f6      	b.n	32da0 <ipc_trace_handle+0xc4>
   32db2:	2101      	movs	r1, #1
   32db4:	4a0f      	ldr	r2, [pc, #60]	; (32df4 <ipc_trace_handle+0x118>)
   32db6:	7011      	strb	r1, [r2, #0]
   32db8:	7a1a      	ldrb	r2, [r3, #8]
   32dba:	2103      	movs	r1, #3
   32dbc:	2200      	movs	r2, #0
   32dbe:	e7d2      	b.n	32d66 <ipc_trace_handle+0x8a>
   32dc0:	7a19      	ldrb	r1, [r3, #8]
   32dc2:	2104      	movs	r1, #4
   32dc4:	7219      	strb	r1, [r3, #8]
   32dc6:	7a59      	ldrb	r1, [r3, #9]
   32dc8:	725a      	strb	r2, [r3, #9]
   32dca:	7a99      	ldrb	r1, [r3, #10]
   32dcc:	729a      	strb	r2, [r3, #10]
   32dce:	7ad9      	ldrb	r1, [r3, #11]
   32dd0:	f06f 015f 	mvn.w	r1, #95	; 0x5f
   32dd4:	72d9      	strb	r1, [r3, #11]
   32dd6:	4b07      	ldr	r3, [pc, #28]	; (32df4 <ipc_trace_handle+0x118>)
   32dd8:	701a      	strb	r2, [r3, #0]
   32dda:	b003      	add	sp, #12
   32ddc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32de0:	f7ff bf50 	b.w	32c84 <nrf_modem_os_trace_irq_handler>
   32de4:	b003      	add	sp, #12
   32de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32dea:	f7f6 bc09 	b.w	29600 <nrf_modem_os_trace_irq_set>
   32dee:	bf00      	nop
   32df0:	20019da4 	.word	0x20019da4
   32df4:	20020c04 	.word	0x20020c04
   32df8:	20019d9c 	.word	0x20019d9c
   32dfc:	20019d98 	.word	0x20019d98
   32e00:	20019da0 	.word	0x20019da0

00032e04 <rpc_trace_coredump_in_progress>:
   32e04:	4b01      	ldr	r3, [pc, #4]	; (32e0c <rpc_trace_coredump_in_progress+0x8>)
   32e06:	7818      	ldrb	r0, [r3, #0]
   32e08:	4770      	bx	lr
   32e0a:	bf00      	nop
   32e0c:	20020c04 	.word	0x20020c04

00032e10 <handle_modem_rpc_msg>:
   32e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   32e14:	4606      	mov	r6, r0
   32e16:	460f      	mov	r7, r1
   32e18:	2500      	movs	r5, #0
   32e1a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 32e90 <handle_modem_rpc_msg+0x80>
   32e1e:	6833      	ldr	r3, [r6, #0]
   32e20:	42ab      	cmp	r3, r5
   32e22:	d801      	bhi.n	32e28 <handle_modem_rpc_msg+0x18>
   32e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   32e28:	eb06 04c5 	add.w	r4, r6, r5, lsl #3
   32e2c:	68a3      	ldr	r3, [r4, #8]
   32e2e:	b1fb      	cbz	r3, 32e70 <handle_modem_rpc_msg+0x60>
   32e30:	6863      	ldr	r3, [r4, #4]
   32e32:	b2db      	uxtb	r3, r3
   32e34:	2b01      	cmp	r3, #1
   32e36:	d11b      	bne.n	32e70 <handle_modem_rpc_msg+0x60>
   32e38:	6862      	ldr	r2, [r4, #4]
   32e3a:	f8b8 3000 	ldrh.w	r3, [r8]
   32e3e:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   32e42:	d115      	bne.n	32e70 <handle_modem_rpc_msg+0x60>
   32e44:	2f02      	cmp	r7, #2
   32e46:	68a0      	ldr	r0, [r4, #8]
   32e48:	d114      	bne.n	32e74 <handle_modem_rpc_msg+0x64>
   32e4a:	f7ff fef1 	bl	32c30 <rpc_handle_data_message>
   32e4e:	2802      	cmp	r0, #2
   32e50:	d00e      	beq.n	32e70 <handle_modem_rpc_msg+0x60>
   32e52:	2801      	cmp	r0, #1
   32e54:	d113      	bne.n	32e7e <handle_modem_rpc_msg+0x6e>
   32e56:	6863      	ldr	r3, [r4, #4]
   32e58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32e5c:	f043 0302 	orr.w	r3, r3, #2
   32e60:	6063      	str	r3, [r4, #4]
   32e62:	f8b8 3000 	ldrh.w	r3, [r8]
   32e66:	3301      	adds	r3, #1
   32e68:	f8a8 3000 	strh.w	r3, [r8]
   32e6c:	f7f6 fbb8 	bl	295e0 <nrf_modem_os_application_irq_set>
   32e70:	3501      	adds	r5, #1
   32e72:	e7d4      	b.n	32e1e <handle_modem_rpc_msg+0xe>
   32e74:	6801      	ldr	r1, [r0, #0]
   32e76:	0c09      	lsrs	r1, r1, #16
   32e78:	f00d f9f8 	bl	4026c <rpc_handle_ctrl_message>
   32e7c:	e7e7      	b.n	32e4e <handle_modem_rpc_msg+0x3e>
   32e7e:	2800      	cmp	r0, #0
   32e80:	d1ef      	bne.n	32e62 <handle_modem_rpc_msg+0x52>
   32e82:	6863      	ldr	r3, [r4, #4]
   32e84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32e88:	f043 0303 	orr.w	r3, r3, #3
   32e8c:	e7e8      	b.n	32e60 <handle_modem_rpc_msg+0x50>
   32e8e:	bf00      	nop
   32e90:	2001e0e4 	.word	0x2001e0e4

00032e94 <rpc_transport_ipc_data_msg_send>:
   32e94:	4b11      	ldr	r3, [pc, #68]	; (32edc <rpc_transport_ipc_data_msg_send+0x48>)
   32e96:	b530      	push	{r4, r5, lr}
   32e98:	7819      	ldrb	r1, [r3, #0]
   32e9a:	b9e1      	cbnz	r1, 32ed6 <rpc_transport_ipc_data_msg_send+0x42>
   32e9c:	4b10      	ldr	r3, [pc, #64]	; (32ee0 <rpc_transport_ipc_data_msg_send+0x4c>)
   32e9e:	4a11      	ldr	r2, [pc, #68]	; (32ee4 <rpc_transport_ipc_data_msg_send+0x50>)
   32ea0:	681b      	ldr	r3, [r3, #0]
   32ea2:	6812      	ldr	r2, [r2, #0]
   32ea4:	1ac0      	subs	r0, r0, r3
   32ea6:	f3c0 1389 	ubfx	r3, r0, #6, #10
   32eaa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   32eae:	4d0e      	ldr	r5, [pc, #56]	; (32ee8 <rpc_transport_ipc_data_msg_send+0x54>)
   32eb0:	685a      	ldr	r2, [r3, #4]
   32eb2:	882c      	ldrh	r4, [r5, #0]
   32eb4:	b292      	uxth	r2, r2
   32eb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   32eba:	605a      	str	r2, [r3, #4]
   32ebc:	685a      	ldr	r2, [r3, #4]
   32ebe:	4608      	mov	r0, r1
   32ec0:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   32ec4:	f042 0201 	orr.w	r2, r2, #1
   32ec8:	605a      	str	r2, [r3, #4]
   32eca:	2201      	movs	r2, #1
   32ecc:	4b07      	ldr	r3, [pc, #28]	; (32eec <rpc_transport_ipc_data_msg_send+0x58>)
   32ece:	3401      	adds	r4, #1
   32ed0:	802c      	strh	r4, [r5, #0]
   32ed2:	601a      	str	r2, [r3, #0]
   32ed4:	bd30      	pop	{r4, r5, pc}
   32ed6:	f04f 30ff 	mov.w	r0, #4294967295
   32eda:	e7fb      	b.n	32ed4 <rpc_transport_ipc_data_msg_send+0x40>
   32edc:	20020c06 	.word	0x20020c06
   32ee0:	20019dc0 	.word	0x20019dc0
   32ee4:	20019dc4 	.word	0x20019dc4
   32ee8:	2001e0e6 	.word	0x2001e0e6
   32eec:	4002a00c 	.word	0x4002a00c

00032ef0 <rpc_transport_ipc_ctrl_msg_send>:
   32ef0:	4b0e      	ldr	r3, [pc, #56]	; (32f2c <rpc_transport_ipc_ctrl_msg_send+0x3c>)
   32ef2:	490f      	ldr	r1, [pc, #60]	; (32f30 <rpc_transport_ipc_ctrl_msg_send+0x40>)
   32ef4:	681b      	ldr	r3, [r3, #0]
   32ef6:	880a      	ldrh	r2, [r1, #0]
   32ef8:	1ac0      	subs	r0, r0, r3
   32efa:	f3c0 1389 	ubfx	r3, r0, #6, #10
   32efe:	480d      	ldr	r0, [pc, #52]	; (32f34 <rpc_transport_ipc_ctrl_msg_send+0x44>)
   32f00:	6800      	ldr	r0, [r0, #0]
   32f02:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   32f06:	6843      	ldr	r3, [r0, #4]
   32f08:	b29b      	uxth	r3, r3
   32f0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   32f0e:	3201      	adds	r2, #1
   32f10:	800a      	strh	r2, [r1, #0]
   32f12:	2201      	movs	r2, #1
   32f14:	6043      	str	r3, [r0, #4]
   32f16:	6843      	ldr	r3, [r0, #4]
   32f18:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   32f1c:	f043 0301 	orr.w	r3, r3, #1
   32f20:	6043      	str	r3, [r0, #4]
   32f22:	4b05      	ldr	r3, [pc, #20]	; (32f38 <rpc_transport_ipc_ctrl_msg_send+0x48>)
   32f24:	2000      	movs	r0, #0
   32f26:	601a      	str	r2, [r3, #0]
   32f28:	4770      	bx	lr
   32f2a:	bf00      	nop
   32f2c:	20019db8 	.word	0x20019db8
   32f30:	2001e0e6 	.word	0x2001e0e6
   32f34:	20019dbc 	.word	0x20019dbc
   32f38:	4002a004 	.word	0x4002a004

00032f3c <rpc_transport_ipc_data_msg_alloc>:
   32f3c:	4b05      	ldr	r3, [pc, #20]	; (32f54 <rpc_transport_ipc_data_msg_alloc+0x18>)
   32f3e:	781b      	ldrb	r3, [r3, #0]
   32f40:	b933      	cbnz	r3, 32f50 <rpc_transport_ipc_data_msg_alloc+0x14>
   32f42:	4b05      	ldr	r3, [pc, #20]	; (32f58 <rpc_transport_ipc_data_msg_alloc+0x1c>)
   32f44:	2202      	movs	r2, #2
   32f46:	6819      	ldr	r1, [r3, #0]
   32f48:	4b04      	ldr	r3, [pc, #16]	; (32f5c <rpc_transport_ipc_data_msg_alloc+0x20>)
   32f4a:	6818      	ldr	r0, [r3, #0]
   32f4c:	f00d ba41 	b.w	403d2 <rpc_transport_ipc_msg_alloc>
   32f50:	2000      	movs	r0, #0
   32f52:	4770      	bx	lr
   32f54:	20020c06 	.word	0x20020c06
   32f58:	20019dc0 	.word	0x20019dc0
   32f5c:	20019dc4 	.word	0x20019dc4

00032f60 <rpc_transport_ipc_ctrl_msg_alloc>:
   32f60:	4b03      	ldr	r3, [pc, #12]	; (32f70 <rpc_transport_ipc_ctrl_msg_alloc+0x10>)
   32f62:	2201      	movs	r2, #1
   32f64:	6819      	ldr	r1, [r3, #0]
   32f66:	4b03      	ldr	r3, [pc, #12]	; (32f74 <rpc_transport_ipc_ctrl_msg_alloc+0x14>)
   32f68:	6818      	ldr	r0, [r3, #0]
   32f6a:	f00d ba32 	b.w	403d2 <rpc_transport_ipc_msg_alloc>
   32f6e:	bf00      	nop
   32f70:	20019db8 	.word	0x20019db8
   32f74:	20019dbc 	.word	0x20019dbc

00032f78 <rpc_transport_ipc_data_alloc>:
   32f78:	4b03      	ldr	r3, [pc, #12]	; (32f88 <rpc_transport_ipc_data_alloc+0x10>)
   32f7a:	781b      	ldrb	r3, [r3, #0]
   32f7c:	b90b      	cbnz	r3, 32f82 <rpc_transport_ipc_data_alloc+0xa>
   32f7e:	f7f6 bb65 	b.w	2964c <nrf_modem_os_shm_tx_alloc>
   32f82:	2000      	movs	r0, #0
   32f84:	4770      	bx	lr
   32f86:	bf00      	nop
   32f88:	20020c06 	.word	0x20020c06

00032f8c <nrf_modem_os_application_irq_handler>:
   32f8c:	b510      	push	{r4, lr}
   32f8e:	4c06      	ldr	r4, [pc, #24]	; (32fa8 <nrf_modem_os_application_irq_handler+0x1c>)
   32f90:	f7f6 fb2e 	bl	295f0 <nrf_modem_os_application_irq_clear>
   32f94:	6820      	ldr	r0, [r4, #0]
   32f96:	2101      	movs	r1, #1
   32f98:	f7ff ff3a 	bl	32e10 <handle_modem_rpc_msg>
   32f9c:	6860      	ldr	r0, [r4, #4]
   32f9e:	2102      	movs	r1, #2
   32fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   32fa4:	f7ff bf34 	b.w	32e10 <handle_modem_rpc_msg>
   32fa8:	20019dac 	.word	0x20019dac

00032fac <rpc_transport_ipc_msg_free>:
   32fac:	2300      	movs	r3, #0
   32fae:	4911      	ldr	r1, [pc, #68]	; (32ff4 <rpc_transport_ipc_msg_free+0x48>)
   32fb0:	b530      	push	{r4, r5, lr}
   32fb2:	680a      	ldr	r2, [r1, #0]
   32fb4:	6814      	ldr	r4, [r2, #0]
   32fb6:	42a3      	cmp	r3, r4
   32fb8:	d10b      	bne.n	32fd2 <rpc_transport_ipc_msg_free+0x26>
   32fba:	2300      	movs	r3, #0
   32fbc:	684a      	ldr	r2, [r1, #4]
   32fbe:	6811      	ldr	r1, [r2, #0]
   32fc0:	428b      	cmp	r3, r1
   32fc2:	d015      	beq.n	32ff0 <rpc_transport_ipc_msg_free+0x44>
   32fc4:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
   32fc8:	68a4      	ldr	r4, [r4, #8]
   32fca:	42a0      	cmp	r0, r4
   32fcc:	d008      	beq.n	32fe0 <rpc_transport_ipc_msg_free+0x34>
   32fce:	3301      	adds	r3, #1
   32fd0:	e7f6      	b.n	32fc0 <rpc_transport_ipc_msg_free+0x14>
   32fd2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
   32fd6:	68ad      	ldr	r5, [r5, #8]
   32fd8:	42a8      	cmp	r0, r5
   32fda:	d001      	beq.n	32fe0 <rpc_transport_ipc_msg_free+0x34>
   32fdc:	3301      	adds	r3, #1
   32fde:	e7ea      	b.n	32fb6 <rpc_transport_ipc_msg_free+0xa>
   32fe0:	00db      	lsls	r3, r3, #3
   32fe2:	3304      	adds	r3, #4
   32fe4:	58d1      	ldr	r1, [r2, r3]
   32fe6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
   32fea:	f041 0103 	orr.w	r1, r1, #3
   32fee:	50d1      	str	r1, [r2, r3]
   32ff0:	bd30      	pop	{r4, r5, pc}
   32ff2:	bf00      	nop
   32ff4:	20019dac 	.word	0x20019dac

00032ff8 <rpc_transport_ipc_data_free>:
   32ff8:	4b0d      	ldr	r3, [pc, #52]	; (33030 <rpc_transport_ipc_data_free+0x38>)
   32ffa:	b510      	push	{r4, lr}
   32ffc:	681b      	ldr	r3, [r3, #0]
   32ffe:	4604      	mov	r4, r0
   33000:	4298      	cmp	r0, r3
   33002:	d30a      	bcc.n	3301a <rpc_transport_ipc_data_free+0x22>
   33004:	4b0b      	ldr	r3, [pc, #44]	; (33034 <rpc_transport_ipc_data_free+0x3c>)
   33006:	681b      	ldr	r3, [r3, #0]
   33008:	4298      	cmp	r0, r3
   3300a:	d206      	bcs.n	3301a <rpc_transport_ipc_data_free+0x22>
   3300c:	f7ff ffa8 	bl	32f60 <rpc_transport_ipc_ctrl_msg_alloc>
   33010:	b938      	cbnz	r0, 33022 <rpc_transport_ipc_data_free+0x2a>
   33012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   33016:	f7f6 bae3 	b.w	295e0 <nrf_modem_os_application_irq_set>
   3301a:	4620      	mov	r0, r4
   3301c:	f7f6 fb26 	bl	2966c <nrf_modem_os_shm_tx_free>
   33020:	e7f7      	b.n	33012 <rpc_transport_ipc_data_free+0x1a>
   33022:	4a05      	ldr	r2, [pc, #20]	; (33038 <rpc_transport_ipc_data_free+0x40>)
   33024:	6084      	str	r4, [r0, #8]
   33026:	6002      	str	r2, [r0, #0]
   33028:	f7ff ff62 	bl	32ef0 <rpc_transport_ipc_ctrl_msg_send>
   3302c:	e7f1      	b.n	33012 <rpc_transport_ipc_data_free+0x1a>
   3302e:	bf00      	nop
   33030:	20019dcc 	.word	0x20019dcc
   33034:	20019dc8 	.word	0x20019dc8
   33038:	00020001 	.word	0x00020001

0003303c <rpc_transport_ipc_request_shutdown>:
   3303c:	b508      	push	{r3, lr}
   3303e:	f7ff ff8f 	bl	32f60 <rpc_transport_ipc_ctrl_msg_alloc>
   33042:	b158      	cbz	r0, 3305c <rpc_transport_ipc_request_shutdown+0x20>
   33044:	4a07      	ldr	r2, [pc, #28]	; (33064 <rpc_transport_ipc_request_shutdown+0x28>)
   33046:	6002      	str	r2, [r0, #0]
   33048:	f7ff ff52 	bl	32ef0 <rpc_transport_ipc_ctrl_msg_send>
   3304c:	2201      	movs	r2, #1
   3304e:	4b06      	ldr	r3, [pc, #24]	; (33068 <rpc_transport_ipc_request_shutdown+0x2c>)
   33050:	2004      	movs	r0, #4
   33052:	701a      	strb	r2, [r3, #0]
   33054:	f003 fdf4 	bl	36c40 <nrfx_ipc_receive_event_disable>
   33058:	2000      	movs	r0, #0
   3305a:	bd08      	pop	{r3, pc}
   3305c:	f04f 30ff 	mov.w	r0, #4294967295
   33060:	e7fb      	b.n	3305a <rpc_transport_ipc_request_shutdown+0x1e>
   33062:	bf00      	nop
   33064:	00030001 	.word	0x00030001
   33068:	20020c06 	.word	0x20020c06

0003306c <rpc_transport_ipc_shutdown_done>:
   3306c:	4b02      	ldr	r3, [pc, #8]	; (33078 <rpc_transport_ipc_shutdown_done+0xc>)
   3306e:	7818      	ldrb	r0, [r3, #0]
   33070:	1e83      	subs	r3, r0, #2
   33072:	4258      	negs	r0, r3
   33074:	4158      	adcs	r0, r3
   33076:	4770      	bx	lr
   33078:	20020c05 	.word	0x20020c05

0003307c <rpc_transport_ipc_init>:
   3307c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33080:	2200      	movs	r2, #0
   33082:	b095      	sub	sp, #84	; 0x54
   33084:	4605      	mov	r5, r0
   33086:	494f      	ldr	r1, [pc, #316]	; (331c4 <rpc_transport_ipc_init+0x148>)
   33088:	7900      	ldrb	r0, [r0, #4]
   3308a:	f003 fd29 	bl	36ae0 <nrfx_ipc_init>
   3308e:	2238      	movs	r2, #56	; 0x38
   33090:	2100      	movs	r1, #0
   33092:	a803      	add	r0, sp, #12
   33094:	f00e fe23 	bl	41cde <memset>
   33098:	2302      	movs	r3, #2
   3309a:	9304      	str	r3, [sp, #16]
   3309c:	2308      	movs	r3, #8
   3309e:	9306      	str	r3, [sp, #24]
   330a0:	2320      	movs	r3, #32
   330a2:	9308      	str	r3, [sp, #32]
   330a4:	2301      	movs	r3, #1
   330a6:	930b      	str	r3, [sp, #44]	; 0x2c
   330a8:	2304      	movs	r3, #4
   330aa:	930d      	str	r3, [sp, #52]	; 0x34
   330ac:	2310      	movs	r3, #16
   330ae:	f04f 0c40 	mov.w	ip, #64	; 0x40
   330b2:	930f      	str	r3, [sp, #60]	; 0x3c
   330b4:	2380      	movs	r3, #128	; 0x80
   330b6:	e9cd c311 	strd	ip, r3, [sp, #68]	; 0x44
   330ba:	23d5      	movs	r3, #213	; 0xd5
   330bc:	a803      	add	r0, sp, #12
   330be:	9313      	str	r3, [sp, #76]	; 0x4c
   330c0:	f003 fd36 	bl	36b30 <nrfx_ipc_config_load>
   330c4:	682b      	ldr	r3, [r5, #0]
   330c6:	2100      	movs	r1, #0
   330c8:	685a      	ldr	r2, [r3, #4]
   330ca:	6818      	ldr	r0, [r3, #0]
   330cc:	f00e fe07 	bl	41cde <memset>
   330d0:	682a      	ldr	r2, [r5, #0]
   330d2:	6814      	ldr	r4, [r2, #0]
   330d4:	69d3      	ldr	r3, [r2, #28]
   330d6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   330da:	f104 07a4 	add.w	r7, r4, #164	; 0xa4
   330de:	f104 0ae8 	add.w	sl, r4, #232	; 0xe8
   330e2:	f504 7b3a 	add.w	fp, r4, #744	; 0x2e8
   330e6:	f104 0920 	add.w	r9, r4, #32
   330ea:	2b00      	cmp	r3, #0
   330ec:	d065      	beq.n	331ba <rpc_transport_ipc_init+0x13e>
   330ee:	f104 0840 	add.w	r8, r4, #64	; 0x40
   330f2:	4935      	ldr	r1, [pc, #212]	; (331c8 <rpc_transport_ipc_init+0x14c>)
   330f4:	f8c1 9000 	str.w	r9, [r1]
   330f8:	b13b      	cbz	r3, 3310a <rpc_transport_ipc_init+0x8e>
   330fa:	6992      	ldr	r2, [r2, #24]
   330fc:	4640      	mov	r0, r8
   330fe:	f8c8 2004 	str.w	r2, [r8, #4]
   33102:	f8c8 3000 	str.w	r3, [r8]
   33106:	f7ff fdb7 	bl	32c78 <ipc_trace_init>
   3310a:	6828      	ldr	r0, [r5, #0]
   3310c:	4d2f      	ldr	r5, [pc, #188]	; (331cc <rpc_transport_ipc_init+0x150>)
   3310e:	2300      	movs	r3, #0
   33110:	602f      	str	r7, [r5, #0]
   33112:	4d2f      	ldr	r5, [pc, #188]	; (331d0 <rpc_transport_ipc_init+0x154>)
   33114:	2101      	movs	r1, #1
   33116:	602e      	str	r6, [r5, #0]
   33118:	2508      	movs	r5, #8
   3311a:	6902      	ldr	r2, [r0, #16]
   3311c:	6940      	ldr	r0, [r0, #20]
   3311e:	7023      	strb	r3, [r4, #0]
   33120:	7063      	strb	r3, [r4, #1]
   33122:	70a1      	strb	r1, [r4, #2]
   33124:	70e3      	strb	r3, [r4, #3]
   33126:	6062      	str	r2, [r4, #4]
   33128:	60a0      	str	r0, [r4, #8]
   3312a:	60e6      	str	r6, [r4, #12]
   3312c:	6127      	str	r7, [r4, #16]
   3312e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   33132:	f8c4 9014 	str.w	r9, [r4, #20]
   33136:	f8c4 8018 	str.w	r8, [r4, #24]
   3313a:	707b      	strb	r3, [r7, #1]
   3313c:	70bb      	strb	r3, [r7, #2]
   3313e:	70fb      	strb	r3, [r7, #3]
   33140:	2714      	movs	r7, #20
   33142:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
   33146:	4d23      	ldr	r5, [pc, #140]	; (331d4 <rpc_transport_ipc_init+0x158>)
   33148:	7073      	strb	r3, [r6, #1]
   3314a:	f8c5 b000 	str.w	fp, [r5]
   3314e:	4d22      	ldr	r5, [pc, #136]	; (331d8 <rpc_transport_ipc_init+0x15c>)
   33150:	70b3      	strb	r3, [r6, #2]
   33152:	f8c5 a000 	str.w	sl, [r5]
   33156:	4d21      	ldr	r5, [pc, #132]	; (331dc <rpc_transport_ipc_init+0x160>)
   33158:	70f3      	strb	r3, [r6, #3]
   3315a:	602a      	str	r2, [r5, #0]
   3315c:	4402      	add	r2, r0
   3315e:	4820      	ldr	r0, [pc, #128]	; (331e0 <rpc_transport_ipc_init+0x164>)
   33160:	4d20      	ldr	r5, [pc, #128]	; (331e4 <rpc_transport_ipc_init+0x168>)
   33162:	6002      	str	r2, [r0, #0]
   33164:	4a20      	ldr	r2, [pc, #128]	; (331e8 <rpc_transport_ipc_init+0x16c>)
   33166:	4e21      	ldr	r6, [pc, #132]	; (331ec <rpc_transport_ipc_init+0x170>)
   33168:	f8c2 4610 	str.w	r4, [r2, #1552]	; 0x610
   3316c:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
   33170:	4c1f      	ldr	r4, [pc, #124]	; (331f0 <rpc_transport_ipc_init+0x174>)
   33172:	7029      	strb	r1, [r5, #0]
   33174:	491f      	ldr	r1, [pc, #124]	; (331f4 <rpc_transport_ipc_init+0x178>)
   33176:	6023      	str	r3, [r4, #0]
   33178:	9302      	str	r3, [sp, #8]
   3317a:	600b      	str	r3, [r1, #0]
   3317c:	680b      	ldr	r3, [r1, #0]
   3317e:	9302      	str	r3, [sp, #8]
   33180:	9b02      	ldr	r3, [sp, #8]
   33182:	2000      	movs	r0, #0
   33184:	a901      	add	r1, sp, #4
   33186:	9701      	str	r7, [sp, #4]
   33188:	f7f5 ffe6 	bl	29158 <nrf_modem_os_timedwait>
   3318c:	9b01      	ldr	r3, [sp, #4]
   3318e:	3b14      	subs	r3, #20
   33190:	441e      	add	r6, r3
   33192:	782b      	ldrb	r3, [r5, #0]
   33194:	2b01      	cmp	r3, #1
   33196:	d104      	bne.n	331a2 <rpc_transport_ipc_init+0x126>
   33198:	2e00      	cmp	r6, #0
   3319a:	d1f2      	bne.n	33182 <rpc_transport_ipc_init+0x106>
   3319c:	f06f 033b 	mvn.w	r3, #59	; 0x3b
   331a0:	6023      	str	r3, [r4, #0]
   331a2:	6824      	ldr	r4, [r4, #0]
   331a4:	b95c      	cbnz	r4, 331be <rpc_transport_ipc_init+0x142>
   331a6:	4b14      	ldr	r3, [pc, #80]	; (331f8 <rpc_transport_ipc_init+0x17c>)
   331a8:	701c      	strb	r4, [r3, #0]
   331aa:	4b14      	ldr	r3, [pc, #80]	; (331fc <rpc_transport_ipc_init+0x180>)
   331ac:	801c      	strh	r4, [r3, #0]
   331ae:	4b14      	ldr	r3, [pc, #80]	; (33200 <rpc_transport_ipc_init+0x184>)
   331b0:	801c      	strh	r4, [r3, #0]
   331b2:	4620      	mov	r0, r4
   331b4:	b015      	add	sp, #84	; 0x54
   331b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   331ba:	4698      	mov	r8, r3
   331bc:	e799      	b.n	330f2 <rpc_transport_ipc_init+0x76>
   331be:	f003 fcfb 	bl	36bb8 <nrfx_ipc_uninit>
   331c2:	e7f6      	b.n	331b2 <rpc_transport_ipc_init+0x136>
   331c4:	00033205 	.word	0x00033205
   331c8:	20019db4 	.word	0x20019db4
   331cc:	20019dc4 	.word	0x20019dc4
   331d0:	20019dbc 	.word	0x20019dbc
   331d4:	20019dc0 	.word	0x20019dc0
   331d8:	20019db8 	.word	0x20019db8
   331dc:	20019dcc 	.word	0x20019dcc
   331e0:	20019dc8 	.word	0x20019dc8
   331e4:	20020c05 	.word	0x20020c05
   331e8:	4002a000 	.word	0x4002a000
   331ec:	000249f0 	.word	0x000249f0
   331f0:	20019da8 	.word	0x20019da8
   331f4:	40005610 	.word	0x40005610
   331f8:	20020c06 	.word	0x20020c06
   331fc:	2001e0e6 	.word	0x2001e0e6
   33200:	2001e0e4 	.word	0x2001e0e4

00033204 <ipc_irq_handler>:
   33204:	b570      	push	{r4, r5, r6, lr}
   33206:	4604      	mov	r4, r0
   33208:	0620      	lsls	r0, r4, #24
   3320a:	d50c      	bpl.n	33226 <ipc_irq_handler+0x22>
   3320c:	f7ff fd66 	bl	32cdc <ipc_trace_handle>
   33210:	f7ff fdf8 	bl	32e04 <rpc_trace_coredump_in_progress>
   33214:	b138      	cbz	r0, 33226 <ipc_irq_handler+0x22>
   33216:	22e0      	movs	r2, #224	; 0xe0
   33218:	4b3f      	ldr	r3, [pc, #252]	; (33318 <ipc_irq_handler+0x114>)
   3321a:	f883 232a 	strb.w	r2, [r3, #810]	; 0x32a
   3321e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   33222:	605a      	str	r2, [r3, #4]
   33224:	bd70      	pop	{r4, r5, r6, pc}
   33226:	07e1      	lsls	r1, r4, #31
   33228:	d548      	bpl.n	332bc <ipc_irq_handler+0xb8>
   3322a:	f248 0202 	movw	r2, #32770	; 0x8002
   3322e:	4b3b      	ldr	r3, [pc, #236]	; (3331c <ipc_irq_handler+0x118>)
   33230:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
   33234:	4293      	cmp	r3, r2
   33236:	d035      	beq.n	332a4 <ipc_irq_handler+0xa0>
   33238:	d81b      	bhi.n	33272 <ipc_irq_handler+0x6e>
   3323a:	f243 0232 	movw	r2, #12338	; 0x3032
   3323e:	4293      	cmp	r3, r2
   33240:	d036      	beq.n	332b0 <ipc_irq_handler+0xac>
   33242:	d80b      	bhi.n	3325c <ipc_irq_handler+0x58>
   33244:	3b01      	subs	r3, #1
   33246:	2b01      	cmp	r3, #1
   33248:	d8ec      	bhi.n	33224 <ipc_irq_handler+0x20>
   3324a:	2203      	movs	r2, #3
   3324c:	200e      	movs	r0, #14
   3324e:	4b34      	ldr	r3, [pc, #208]	; (33320 <ipc_irq_handler+0x11c>)
   33250:	701a      	strb	r2, [r3, #0]
   33252:	4b34      	ldr	r3, [pc, #208]	; (33324 <ipc_irq_handler+0x120>)
   33254:	6018      	str	r0, [r3, #0]
   33256:	f00e f9b1 	bl	415bc <rpc_transport_ipc_fault_handler>
   3325a:	e7e3      	b.n	33224 <ipc_irq_handler+0x20>
   3325c:	f248 0201 	movw	r2, #32769	; 0x8001
   33260:	4293      	cmp	r3, r2
   33262:	d1df      	bne.n	33224 <ipc_irq_handler+0x20>
   33264:	2203      	movs	r2, #3
   33266:	4b2e      	ldr	r3, [pc, #184]	; (33320 <ipc_irq_handler+0x11c>)
   33268:	701a      	strb	r2, [r3, #0]
   3326a:	2216      	movs	r2, #22
   3326c:	4b2d      	ldr	r3, [pc, #180]	; (33324 <ipc_irq_handler+0x120>)
   3326e:	601a      	str	r2, [r3, #0]
   33270:	e7d8      	b.n	33224 <ipc_irq_handler+0x20>
   33272:	4a2d      	ldr	r2, [pc, #180]	; (33328 <ipc_irq_handler+0x124>)
   33274:	4293      	cmp	r3, r2
   33276:	d80c      	bhi.n	33292 <ipc_irq_handler+0x8e>
   33278:	f1b3 6f88 	cmp.w	r3, #71303168	; 0x4400000
   3327c:	d80c      	bhi.n	33298 <ipc_irq_handler+0x94>
   3327e:	f248 0203 	movw	r2, #32771	; 0x8003
   33282:	4293      	cmp	r3, r2
   33284:	d1ce      	bne.n	33224 <ipc_irq_handler+0x20>
   33286:	2203      	movs	r2, #3
   33288:	4b25      	ldr	r3, [pc, #148]	; (33320 <ipc_irq_handler+0x11c>)
   3328a:	701a      	strb	r2, [r3, #0]
   3328c:	220c      	movs	r2, #12
   3328e:	4b25      	ldr	r3, [pc, #148]	; (33324 <ipc_irq_handler+0x120>)
   33290:	e7ed      	b.n	3326e <ipc_irq_handler+0x6a>
   33292:	4a26      	ldr	r2, [pc, #152]	; (3332c <ipc_irq_handler+0x128>)
   33294:	4293      	cmp	r3, r2
   33296:	d1c5      	bne.n	33224 <ipc_irq_handler+0x20>
   33298:	2103      	movs	r1, #3
   3329a:	4a21      	ldr	r2, [pc, #132]	; (33320 <ipc_irq_handler+0x11c>)
   3329c:	7011      	strb	r1, [r2, #0]
   3329e:	4a21      	ldr	r2, [pc, #132]	; (33324 <ipc_irq_handler+0x120>)
   332a0:	6013      	str	r3, [r2, #0]
   332a2:	e7bf      	b.n	33224 <ipc_irq_handler+0x20>
   332a4:	2203      	movs	r2, #3
   332a6:	4b1e      	ldr	r3, [pc, #120]	; (33320 <ipc_irq_handler+0x11c>)
   332a8:	701a      	strb	r2, [r3, #0]
   332aa:	222d      	movs	r2, #45	; 0x2d
   332ac:	4b1d      	ldr	r3, [pc, #116]	; (33324 <ipc_irq_handler+0x120>)
   332ae:	e7de      	b.n	3326e <ipc_irq_handler+0x6a>
   332b0:	2203      	movs	r2, #3
   332b2:	4b1b      	ldr	r3, [pc, #108]	; (33320 <ipc_irq_handler+0x11c>)
   332b4:	701a      	strb	r2, [r3, #0]
   332b6:	2205      	movs	r2, #5
   332b8:	4b1a      	ldr	r3, [pc, #104]	; (33324 <ipc_irq_handler+0x120>)
   332ba:	e7d8      	b.n	3326e <ipc_irq_handler+0x6a>
   332bc:	f014 0540 	ands.w	r5, r4, #64	; 0x40
   332c0:	d003      	beq.n	332ca <ipc_irq_handler+0xc6>
   332c2:	2202      	movs	r2, #2
   332c4:	4b16      	ldr	r3, [pc, #88]	; (33320 <ipc_irq_handler+0x11c>)
   332c6:	701a      	strb	r2, [r3, #0]
   332c8:	e7ac      	b.n	33224 <ipc_irq_handler+0x20>
   332ca:	0762      	lsls	r2, r4, #29
   332cc:	d505      	bpl.n	332da <ipc_irq_handler+0xd6>
   332ce:	4b14      	ldr	r3, [pc, #80]	; (33320 <ipc_irq_handler+0x11c>)
   332d0:	781a      	ldrb	r2, [r3, #0]
   332d2:	461e      	mov	r6, r3
   332d4:	b93a      	cbnz	r2, 332e6 <ipc_irq_handler+0xe2>
   332d6:	f7f6 f983 	bl	295e0 <nrf_modem_os_application_irq_set>
   332da:	06e3      	lsls	r3, r4, #27
   332dc:	d5a2      	bpl.n	33224 <ipc_irq_handler+0x20>
   332de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   332e2:	f7f6 b97d 	b.w	295e0 <nrf_modem_os_application_irq_set>
   332e6:	2a01      	cmp	r2, #1
   332e8:	d1f7      	bne.n	332da <ipc_irq_handler+0xd6>
   332ea:	4a11      	ldr	r2, [pc, #68]	; (33330 <ipc_irq_handler+0x12c>)
   332ec:	4811      	ldr	r0, [pc, #68]	; (33334 <ipc_irq_handler+0x130>)
   332ee:	6812      	ldr	r2, [r2, #0]
   332f0:	6891      	ldr	r1, [r2, #8]
   332f2:	6041      	str	r1, [r0, #4]
   332f4:	6852      	ldr	r2, [r2, #4]
   332f6:	6002      	str	r2, [r0, #0]
   332f8:	b101      	cbz	r1, 332fc <ipc_irq_handler+0xf8>
   332fa:	b92a      	cbnz	r2, 33308 <ipc_irq_handler+0x104>
   332fc:	2303      	movs	r3, #3
   332fe:	2216      	movs	r2, #22
   33300:	7033      	strb	r3, [r6, #0]
   33302:	4b08      	ldr	r3, [pc, #32]	; (33324 <ipc_irq_handler+0x120>)
   33304:	601a      	str	r2, [r3, #0]
   33306:	e7e8      	b.n	332da <ipc_irq_handler+0xd6>
   33308:	6809      	ldr	r1, [r1, #0]
   3330a:	2910      	cmp	r1, #16
   3330c:	d8f6      	bhi.n	332fc <ipc_irq_handler+0xf8>
   3330e:	6812      	ldr	r2, [r2, #0]
   33310:	2a10      	cmp	r2, #16
   33312:	d8f3      	bhi.n	332fc <ipc_irq_handler+0xf8>
   33314:	701d      	strb	r5, [r3, #0]
   33316:	e7e0      	b.n	332da <ipc_irq_handler+0xd6>
   33318:	e000e100 	.word	0xe000e100
   3331c:	4002a000 	.word	0x4002a000
   33320:	20020c05 	.word	0x20020c05
   33324:	20019da8 	.word	0x20019da8
   33328:	04400004 	.word	0x04400004
   3332c:	05500001 	.word	0x05500001
   33330:	20019db4 	.word	0x20019db4
   33334:	20019dac 	.word	0x20019dac

00033338 <interface_init>:
   33338:	b508      	push	{r3, lr}
   3333a:	f44f 72b4 	mov.w	r2, #360	; 0x168
   3333e:	2100      	movs	r1, #0
   33340:	4802      	ldr	r0, [pc, #8]	; (3334c <interface_init+0x14>)
   33342:	f00e fccc 	bl	41cde <memset>
   33346:	2000      	movs	r0, #0
   33348:	bd08      	pop	{r3, pc}
   3334a:	bf00      	nop
   3334c:	20019dd0 	.word	0x20019dd0

00033350 <interface_socket_allocate>:
   33350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33352:	4606      	mov	r6, r0
   33354:	2400      	movs	r4, #0
   33356:	2728      	movs	r7, #40	; 0x28
   33358:	4b0f      	ldr	r3, [pc, #60]	; (33398 <interface_socket_allocate+0x48>)
   3335a:	fb07 f004 	mul.w	r0, r7, r4
   3335e:	181d      	adds	r5, r3, r0
   33360:	5818      	ldr	r0, [r3, r0]
   33362:	b988      	cbnz	r0, 33388 <interface_socket_allocate+0x38>
   33364:	f04f 37ff 	mov.w	r7, #4294967295
   33368:	2301      	movs	r3, #1
   3336a:	4628      	mov	r0, r5
   3336c:	61af      	str	r7, [r5, #24]
   3336e:	602b      	str	r3, [r5, #0]
   33370:	f00d fa40 	bl	407f4 <packet_handler_alloc_and_init>
   33374:	b168      	cbz	r0, 33392 <interface_socket_allocate+0x42>
   33376:	4628      	mov	r0, r5
   33378:	f00d fa53 	bl	40822 <socket_free>
   3337c:	200c      	movs	r0, #12
   3337e:	f7f5 ffa3 	bl	292c8 <nrf_modem_os_errno_set>
   33382:	f04f 34ff 	mov.w	r4, #4294967295
   33386:	e005      	b.n	33394 <interface_socket_allocate+0x44>
   33388:	3401      	adds	r4, #1
   3338a:	2c09      	cmp	r4, #9
   3338c:	d1e5      	bne.n	3335a <interface_socket_allocate+0xa>
   3338e:	2069      	movs	r0, #105	; 0x69
   33390:	e7f5      	b.n	3337e <interface_socket_allocate+0x2e>
   33392:	6035      	str	r5, [r6, #0]
   33394:	4620      	mov	r0, r4
   33396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33398:	20019dd0 	.word	0x20019dd0

0003339c <interface_socket_free>:
   3339c:	2808      	cmp	r0, #8
   3339e:	d805      	bhi.n	333ac <interface_socket_free+0x10>
   333a0:	2228      	movs	r2, #40	; 0x28
   333a2:	4b03      	ldr	r3, [pc, #12]	; (333b0 <interface_socket_free+0x14>)
   333a4:	fb02 3000 	mla	r0, r2, r0, r3
   333a8:	f00d ba3b 	b.w	40822 <socket_free>
   333ac:	4770      	bx	lr
   333ae:	bf00      	nop
   333b0:	20019dd0 	.word	0x20019dd0

000333b4 <interface_socket_packet_handler_update>:
   333b4:	2808      	cmp	r0, #8
   333b6:	b570      	push	{r4, r5, r6, lr}
   333b8:	d812      	bhi.n	333e0 <interface_socket_packet_handler_update+0x2c>
   333ba:	2328      	movs	r3, #40	; 0x28
   333bc:	4358      	muls	r0, r3
   333be:	4c09      	ldr	r4, [pc, #36]	; (333e4 <interface_socket_packet_handler_update+0x30>)
   333c0:	5823      	ldr	r3, [r4, r0]
   333c2:	1825      	adds	r5, r4, r0
   333c4:	b163      	cbz	r3, 333e0 <interface_socket_packet_handler_update+0x2c>
   333c6:	4628      	mov	r0, r5
   333c8:	69ee      	ldr	r6, [r5, #28]
   333ca:	f00d fa13 	bl	407f4 <packet_handler_alloc_and_init>
   333ce:	4604      	mov	r4, r0
   333d0:	b920      	cbnz	r0, 333dc <interface_socket_packet_handler_update+0x28>
   333d2:	4630      	mov	r0, r6
   333d4:	f00e f8d5 	bl	41582 <packet_handler_delete>
   333d8:	4620      	mov	r0, r4
   333da:	bd70      	pop	{r4, r5, r6, pc}
   333dc:	61ee      	str	r6, [r5, #28]
   333de:	e7fb      	b.n	333d8 <interface_socket_packet_handler_update+0x24>
   333e0:	2402      	movs	r4, #2
   333e2:	e7f9      	b.n	333d8 <interface_socket_packet_handler_update+0x24>
   333e4:	20019dd0 	.word	0x20019dd0

000333e8 <interface_socket_wait>:
   333e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   333ec:	4615      	mov	r5, r2
   333ee:	2228      	movs	r2, #40	; 0x28
   333f0:	4350      	muls	r0, r2
   333f2:	461e      	mov	r6, r3
   333f4:	4b0e      	ldr	r3, [pc, #56]	; (33430 <interface_socket_wait+0x48>)
   333f6:	460c      	mov	r4, r1
   333f8:	181f      	adds	r7, r3, r0
   333fa:	581b      	ldr	r3, [r3, r0]
   333fc:	402b      	ands	r3, r5
   333fe:	428b      	cmp	r3, r1
   33400:	d102      	bne.n	33408 <interface_socket_wait+0x20>
   33402:	2000      	movs	r0, #0
   33404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33408:	687b      	ldr	r3, [r7, #4]
   3340a:	2b00      	cmp	r3, #0
   3340c:	d1f9      	bne.n	33402 <interface_socket_wait+0x1a>
   3340e:	46b8      	mov	r8, r7
   33410:	f8d8 3000 	ldr.w	r3, [r8]
   33414:	402b      	ands	r3, r5
   33416:	42a3      	cmp	r3, r4
   33418:	d0f3      	beq.n	33402 <interface_socket_wait+0x1a>
   3341a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3341e:	2b00      	cmp	r3, #0
   33420:	d1ef      	bne.n	33402 <interface_socket_wait+0x1a>
   33422:	4631      	mov	r1, r6
   33424:	4638      	mov	r0, r7
   33426:	f7f5 fe97 	bl	29158 <nrf_modem_os_timedwait>
   3342a:	2800      	cmp	r0, #0
   3342c:	d0f0      	beq.n	33410 <interface_socket_wait+0x28>
   3342e:	e7e9      	b.n	33404 <interface_socket_wait+0x1c>
   33430:	20019dd0 	.word	0x20019dd0

00033434 <interface_from_internal_id_search>:
   33434:	4b0a      	ldr	r3, [pc, #40]	; (33460 <interface_from_internal_id_search+0x2c>)
   33436:	4602      	mov	r2, r0
   33438:	b530      	push	{r4, r5, lr}
   3343a:	2000      	movs	r0, #0
   3343c:	461c      	mov	r4, r3
   3343e:	2128      	movs	r1, #40	; 0x28
   33440:	fb01 f500 	mul.w	r5, r1, r0
   33444:	5965      	ldr	r5, [r4, r5]
   33446:	b115      	cbz	r5, 3344e <interface_from_internal_id_search+0x1a>
   33448:	699d      	ldr	r5, [r3, #24]
   3344a:	4295      	cmp	r5, r2
   3344c:	d006      	beq.n	3345c <interface_from_internal_id_search+0x28>
   3344e:	3001      	adds	r0, #1
   33450:	2809      	cmp	r0, #9
   33452:	f103 0328 	add.w	r3, r3, #40	; 0x28
   33456:	d1f3      	bne.n	33440 <interface_from_internal_id_search+0xc>
   33458:	f04f 30ff 	mov.w	r0, #4294967295
   3345c:	bd30      	pop	{r4, r5, pc}
   3345e:	bf00      	nop
   33460:	20019dd0 	.word	0x20019dd0

00033464 <interface_socket_from_handle_get>:
   33464:	2808      	cmp	r0, #8
   33466:	d809      	bhi.n	3347c <interface_socket_from_handle_get+0x18>
   33468:	2328      	movs	r3, #40	; 0x28
   3346a:	4358      	muls	r0, r3
   3346c:	4a04      	ldr	r2, [pc, #16]	; (33480 <interface_socket_from_handle_get+0x1c>)
   3346e:	1813      	adds	r3, r2, r0
   33470:	5812      	ldr	r2, [r2, r0]
   33472:	2a00      	cmp	r2, #0
   33474:	bf14      	ite	ne
   33476:	4618      	movne	r0, r3
   33478:	2000      	moveq	r0, #0
   3347a:	4770      	bx	lr
   3347c:	2000      	movs	r0, #0
   3347e:	4770      	bx	lr
   33480:	20019dd0 	.word	0x20019dd0

00033484 <interface_socket_setopt>:
   33484:	2808      	cmp	r0, #8
   33486:	b538      	push	{r3, r4, r5, lr}
   33488:	d82c      	bhi.n	334e4 <interface_socket_setopt+0x60>
   3348a:	2428      	movs	r4, #40	; 0x28
   3348c:	4360      	muls	r0, r4
   3348e:	4d16      	ldr	r5, [pc, #88]	; (334e8 <interface_socket_setopt+0x64>)
   33490:	182c      	adds	r4, r5, r0
   33492:	5828      	ldr	r0, [r5, r0]
   33494:	b330      	cbz	r0, 334e4 <interface_socket_setopt+0x60>
   33496:	2901      	cmp	r1, #1
   33498:	d005      	beq.n	334a6 <interface_socket_setopt+0x22>
   3349a:	202a      	movs	r0, #42	; 0x2a
   3349c:	f7f5 ff14 	bl	292c8 <nrf_modem_os_errno_set>
   334a0:	f04f 30ff 	mov.w	r0, #4294967295
   334a4:	e01b      	b.n	334de <interface_socket_setopt+0x5a>
   334a6:	f1a2 0114 	sub.w	r1, r2, #20
   334aa:	2901      	cmp	r1, #1
   334ac:	d8f5      	bhi.n	3349a <interface_socket_setopt+0x16>
   334ae:	9904      	ldr	r1, [sp, #16]
   334b0:	2908      	cmp	r1, #8
   334b2:	d115      	bne.n	334e0 <interface_socket_setopt+0x5c>
   334b4:	b1a3      	cbz	r3, 334e0 <interface_socket_setopt+0x5c>
   334b6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   334ba:	6858      	ldr	r0, [r3, #4]
   334bc:	2100      	movs	r1, #0
   334be:	fbb0 f0f5 	udiv	r0, r0, r5
   334c2:	681b      	ldr	r3, [r3, #0]
   334c4:	fbe5 0103 	umlal	r0, r1, r5, r3
   334c8:	2901      	cmp	r1, #1
   334ca:	bf08      	it	eq
   334cc:	2800      	cmpeq	r0, #0
   334ce:	d301      	bcc.n	334d4 <interface_socket_setopt+0x50>
   334d0:	2025      	movs	r0, #37	; 0x25
   334d2:	e7e3      	b.n	3349c <interface_socket_setopt+0x18>
   334d4:	2a14      	cmp	r2, #20
   334d6:	bf0c      	ite	eq
   334d8:	6220      	streq	r0, [r4, #32]
   334da:	6260      	strne	r0, [r4, #36]	; 0x24
   334dc:	2000      	movs	r0, #0
   334de:	bd38      	pop	{r3, r4, r5, pc}
   334e0:	2016      	movs	r0, #22
   334e2:	e7db      	b.n	3349c <interface_socket_setopt+0x18>
   334e4:	2009      	movs	r0, #9
   334e6:	e7d9      	b.n	3349c <interface_socket_setopt+0x18>
   334e8:	20019dd0 	.word	0x20019dd0

000334ec <interface_socket_getopt>:
   334ec:	b570      	push	{r4, r5, r6, lr}
   334ee:	2808      	cmp	r0, #8
   334f0:	9d04      	ldr	r5, [sp, #16]
   334f2:	d832      	bhi.n	3355a <interface_socket_getopt+0x6e>
   334f4:	2428      	movs	r4, #40	; 0x28
   334f6:	4360      	muls	r0, r4
   334f8:	4e19      	ldr	r6, [pc, #100]	; (33560 <interface_socket_getopt+0x74>)
   334fa:	1834      	adds	r4, r6, r0
   334fc:	5830      	ldr	r0, [r6, r0]
   334fe:	b360      	cbz	r0, 3355a <interface_socket_getopt+0x6e>
   33500:	2901      	cmp	r1, #1
   33502:	d005      	beq.n	33510 <interface_socket_getopt+0x24>
   33504:	202a      	movs	r0, #42	; 0x2a
   33506:	f7f5 fedf 	bl	292c8 <nrf_modem_os_errno_set>
   3350a:	f04f 30ff 	mov.w	r0, #4294967295
   3350e:	e00c      	b.n	3352a <interface_socket_getopt+0x3e>
   33510:	b103      	cbz	r3, 33514 <interface_socket_getopt+0x28>
   33512:	b90d      	cbnz	r5, 33518 <interface_socket_getopt+0x2c>
   33514:	2016      	movs	r0, #22
   33516:	e7f6      	b.n	33506 <interface_socket_getopt+0x1a>
   33518:	2a04      	cmp	r2, #4
   3351a:	d107      	bne.n	3352c <interface_socket_getopt+0x40>
   3351c:	682a      	ldr	r2, [r5, #0]
   3351e:	2a04      	cmp	r2, #4
   33520:	d1f8      	bne.n	33514 <interface_socket_getopt+0x28>
   33522:	2000      	movs	r0, #0
   33524:	6862      	ldr	r2, [r4, #4]
   33526:	601a      	str	r2, [r3, #0]
   33528:	6060      	str	r0, [r4, #4]
   3352a:	bd70      	pop	{r4, r5, r6, pc}
   3352c:	f1a2 0114 	sub.w	r1, r2, #20
   33530:	2901      	cmp	r1, #1
   33532:	d8e7      	bhi.n	33504 <interface_socket_getopt+0x18>
   33534:	6829      	ldr	r1, [r5, #0]
   33536:	2908      	cmp	r1, #8
   33538:	d1ec      	bne.n	33514 <interface_socket_getopt+0x28>
   3353a:	e9d4 0108 	ldrd	r0, r1, [r4, #32]
   3353e:	2a14      	cmp	r2, #20
   33540:	bf18      	it	ne
   33542:	4608      	movne	r0, r1
   33544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   33548:	fbb0 f1f2 	udiv	r1, r0, r2
   3354c:	6019      	str	r1, [r3, #0]
   3354e:	fb02 0111 	mls	r1, r2, r1, r0
   33552:	434a      	muls	r2, r1
   33554:	2000      	movs	r0, #0
   33556:	605a      	str	r2, [r3, #4]
   33558:	e7e7      	b.n	3352a <interface_socket_getopt+0x3e>
   3355a:	2009      	movs	r0, #9
   3355c:	e7d3      	b.n	33506 <interface_socket_getopt+0x1a>
   3355e:	bf00      	nop
   33560:	20019dd0 	.word	0x20019dd0

00033564 <interface_shutdown>:
   33564:	b537      	push	{r0, r1, r2, r4, r5, lr}
   33566:	2300      	movs	r3, #0
   33568:	2028      	movs	r0, #40	; 0x28
   3356a:	2470      	movs	r4, #112	; 0x70
   3356c:	4a11      	ldr	r2, [pc, #68]	; (335b4 <interface_shutdown+0x50>)
   3356e:	fb00 f103 	mul.w	r1, r0, r3
   33572:	1855      	adds	r5, r2, r1
   33574:	5851      	ldr	r1, [r2, r1]
   33576:	b101      	cbz	r1, 3357a <interface_shutdown+0x16>
   33578:	606c      	str	r4, [r5, #4]
   3357a:	3301      	adds	r3, #1
   3357c:	2b09      	cmp	r3, #9
   3357e:	d1f6      	bne.n	3356e <interface_shutdown+0xa>
   33580:	f7f6 f82e 	bl	295e0 <nrf_modem_os_application_irq_set>
   33584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   33588:	9301      	str	r3, [sp, #4]
   3358a:	2000      	movs	r0, #0
   3358c:	a901      	add	r1, sp, #4
   3358e:	f7f5 fde3 	bl	29158 <nrf_modem_os_timedwait>
   33592:	9b01      	ldr	r3, [sp, #4]
   33594:	2b00      	cmp	r3, #0
   33596:	dcf8      	bgt.n	3358a <interface_shutdown+0x26>
   33598:	2400      	movs	r4, #0
   3359a:	4d06      	ldr	r5, [pc, #24]	; (335b4 <interface_shutdown+0x50>)
   3359c:	4628      	mov	r0, r5
   3359e:	3401      	adds	r4, #1
   335a0:	f00d f93f 	bl	40822 <socket_free>
   335a4:	2c09      	cmp	r4, #9
   335a6:	f105 0528 	add.w	r5, r5, #40	; 0x28
   335aa:	d1f7      	bne.n	3359c <interface_shutdown+0x38>
   335ac:	2000      	movs	r0, #0
   335ae:	b003      	add	sp, #12
   335b0:	bd30      	pop	{r4, r5, pc}
   335b2:	bf00      	nop
   335b4:	20019dd0 	.word	0x20019dd0

000335b8 <interface_socket_fcntl>:
   335b8:	2808      	cmp	r0, #8
   335ba:	b510      	push	{r4, lr}
   335bc:	d82c      	bhi.n	33618 <interface_socket_fcntl+0x60>
   335be:	2328      	movs	r3, #40	; 0x28
   335c0:	4343      	muls	r3, r0
   335c2:	4c16      	ldr	r4, [pc, #88]	; (3361c <interface_socket_fcntl+0x64>)
   335c4:	58e0      	ldr	r0, [r4, r3]
   335c6:	b338      	cbz	r0, 33618 <interface_socket_fcntl+0x60>
   335c8:	2901      	cmp	r1, #1
   335ca:	d11d      	bne.n	33608 <interface_socket_fcntl+0x50>
   335cc:	f012 0001 	ands.w	r0, r2, #1
   335d0:	58e2      	ldr	r2, [r4, r3]
   335d2:	d004      	beq.n	335de <interface_socket_fcntl+0x26>
   335d4:	2000      	movs	r0, #0
   335d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   335da:	50e2      	str	r2, [r4, r3]
   335dc:	bd10      	pop	{r4, pc}
   335de:	0092      	lsls	r2, r2, #2
   335e0:	d407      	bmi.n	335f2 <interface_socket_fcntl+0x3a>
   335e2:	58e2      	ldr	r2, [r4, r3]
   335e4:	b292      	uxth	r2, r2
   335e6:	2a0a      	cmp	r2, #10
   335e8:	d003      	beq.n	335f2 <interface_socket_fcntl+0x3a>
   335ea:	58e2      	ldr	r2, [r4, r3]
   335ec:	b292      	uxth	r2, r2
   335ee:	2a0b      	cmp	r2, #11
   335f0:	d105      	bne.n	335fe <interface_socket_fcntl+0x46>
   335f2:	2023      	movs	r0, #35	; 0x23
   335f4:	f7f5 fe68 	bl	292c8 <nrf_modem_os_errno_set>
   335f8:	f04f 30ff 	mov.w	r0, #4294967295
   335fc:	e7ee      	b.n	335dc <interface_socket_fcntl+0x24>
   335fe:	58e2      	ldr	r2, [r4, r3]
   33600:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   33604:	50e2      	str	r2, [r4, r3]
   33606:	e7e9      	b.n	335dc <interface_socket_fcntl+0x24>
   33608:	2902      	cmp	r1, #2
   3360a:	d103      	bne.n	33614 <interface_socket_fcntl+0x5c>
   3360c:	58e0      	ldr	r0, [r4, r3]
   3360e:	f3c0 7000 	ubfx	r0, r0, #28, #1
   33612:	e7e3      	b.n	335dc <interface_socket_fcntl+0x24>
   33614:	2016      	movs	r0, #22
   33616:	e7ed      	b.n	335f4 <interface_socket_fcntl+0x3c>
   33618:	2009      	movs	r0, #9
   3361a:	e7eb      	b.n	335f4 <interface_socket_fcntl+0x3c>
   3361c:	20019dd0 	.word	0x20019dd0

00033620 <rpc_error_to_nrf_errno>:
   33620:	2810      	cmp	r0, #16
   33622:	bf9a      	itte	ls
   33624:	4b01      	ldrls	r3, [pc, #4]	; (3362c <rpc_error_to_nrf_errno+0xc>)
   33626:	5618      	ldrsbls	r0, [r3, r0]
   33628:	202d      	movhi	r0, #45	; 0x2d
   3362a:	4770      	bx	lr
   3362c:	0004b586 	.word	0x0004b586

00033630 <ip_interface_init>:
   33630:	b510      	push	{r4, lr}
   33632:	2400      	movs	r4, #0
   33634:	4b06      	ldr	r3, [pc, #24]	; (33650 <ip_interface_init+0x20>)
   33636:	2224      	movs	r2, #36	; 0x24
   33638:	601c      	str	r4, [r3, #0]
   3363a:	4b06      	ldr	r3, [pc, #24]	; (33654 <ip_interface_init+0x24>)
   3363c:	4621      	mov	r1, r4
   3363e:	4806      	ldr	r0, [pc, #24]	; (33658 <ip_interface_init+0x28>)
   33640:	601c      	str	r4, [r3, #0]
   33642:	f00e fb4c 	bl	41cde <memset>
   33646:	2201      	movs	r2, #1
   33648:	4b04      	ldr	r3, [pc, #16]	; (3365c <ip_interface_init+0x2c>)
   3364a:	4620      	mov	r0, r4
   3364c:	701a      	strb	r2, [r3, #0]
   3364e:	bd10      	pop	{r4, pc}
   33650:	20019f48 	.word	0x20019f48
   33654:	20019f44 	.word	0x20019f44
   33658:	20019f4c 	.word	0x20019f4c
   3365c:	20020c07 	.word	0x20020c07

00033660 <ip_interface_deinit>:
   33660:	2000      	movs	r0, #0
   33662:	4b01      	ldr	r3, [pc, #4]	; (33668 <ip_interface_deinit+0x8>)
   33664:	7018      	strb	r0, [r3, #0]
   33666:	4770      	bx	lr
   33668:	20020c07 	.word	0x20020c07

0003366c <ip_interface_open>:
   3366c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3366e:	2300      	movs	r3, #0
   33670:	f04f 34ff 	mov.w	r4, #4294967295
   33674:	e9cd 3400 	strd	r3, r4, [sp]
   33678:	4b3c      	ldr	r3, [pc, #240]	; (3376c <ip_interface_open+0x100>)
   3367a:	4607      	mov	r7, r0
   3367c:	781b      	ldrb	r3, [r3, #0]
   3367e:	460d      	mov	r5, r1
   33680:	4616      	mov	r6, r2
   33682:	b92b      	cbnz	r3, 33690 <ip_interface_open+0x24>
   33684:	2070      	movs	r0, #112	; 0x70
   33686:	f7f5 fe1f 	bl	292c8 <nrf_modem_os_errno_set>
   3368a:	4620      	mov	r0, r4
   3368c:	b003      	add	sp, #12
   3368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33690:	f020 0308 	bic.w	r3, r0, #8
   33694:	2b02      	cmp	r3, #2
   33696:	d003      	beq.n	336a0 <ip_interface_open+0x34>
   33698:	2805      	cmp	r0, #5
   3369a:	d001      	beq.n	336a0 <ip_interface_open+0x34>
   3369c:	202f      	movs	r0, #47	; 0x2f
   3369e:	e7f2      	b.n	33686 <ip_interface_open+0x1a>
   336a0:	1e6b      	subs	r3, r5, #1
   336a2:	2b02      	cmp	r3, #2
   336a4:	d905      	bls.n	336b2 <ip_interface_open+0x46>
   336a6:	2016      	movs	r0, #22
   336a8:	f7f5 fe0e 	bl	292c8 <nrf_modem_os_errno_set>
   336ac:	f04f 34ff 	mov.w	r4, #4294967295
   336b0:	e7eb      	b.n	3368a <ip_interface_open+0x1e>
   336b2:	b15e      	cbz	r6, 336cc <ip_interface_open+0x60>
   336b4:	2d01      	cmp	r5, #1
   336b6:	d103      	bne.n	336c0 <ip_interface_open+0x54>
   336b8:	2e01      	cmp	r6, #1
   336ba:	d105      	bne.n	336c8 <ip_interface_open+0x5c>
   336bc:	2602      	movs	r6, #2
   336be:	e00a      	b.n	336d6 <ip_interface_open+0x6a>
   336c0:	2d02      	cmp	r5, #2
   336c2:	d1fb      	bne.n	336bc <ip_interface_open+0x50>
   336c4:	2e02      	cmp	r6, #2
   336c6:	d006      	beq.n	336d6 <ip_interface_open+0x6a>
   336c8:	2029      	movs	r0, #41	; 0x29
   336ca:	e7ed      	b.n	336a8 <ip_interface_open+0x3c>
   336cc:	2d01      	cmp	r5, #1
   336ce:	d010      	beq.n	336f2 <ip_interface_open+0x86>
   336d0:	2d03      	cmp	r5, #3
   336d2:	bf18      	it	ne
   336d4:	2602      	movne	r6, #2
   336d6:	4629      	mov	r1, r5
   336d8:	4668      	mov	r0, sp
   336da:	4a25      	ldr	r2, [pc, #148]	; (33770 <ip_interface_open+0x104>)
   336dc:	f7ff fe38 	bl	33350 <interface_socket_allocate>
   336e0:	9b00      	ldr	r3, [sp, #0]
   336e2:	4604      	mov	r4, r0
   336e4:	b93b      	cbnz	r3, 336f6 <ip_interface_open+0x8a>
   336e6:	2669      	movs	r6, #105	; 0x69
   336e8:	4620      	mov	r0, r4
   336ea:	f7ff fe57 	bl	3339c <interface_socket_free>
   336ee:	4630      	mov	r0, r6
   336f0:	e7da      	b.n	336a8 <ip_interface_open+0x3c>
   336f2:	462e      	mov	r6, r5
   336f4:	e7ef      	b.n	336d6 <ip_interface_open+0x6a>
   336f6:	f04f 31ff 	mov.w	r1, #4294967295
   336fa:	e9c3 7503 	strd	r7, r5, [r3, #12]
   336fe:	615e      	str	r6, [r3, #20]
   33700:	f247 0201 	movw	r2, #28673	; 0x7001
   33704:	2300      	movs	r3, #0
   33706:	f00d f8dd 	bl	408c4 <ip_interface_request_create>
   3370a:	4601      	mov	r1, r0
   3370c:	2800      	cmp	r0, #0
   3370e:	d0ea      	beq.n	336e6 <ip_interface_open+0x7a>
   33710:	6883      	ldr	r3, [r0, #8]
   33712:	2f05      	cmp	r7, #5
   33714:	f103 030c 	add.w	r3, r3, #12
   33718:	6083      	str	r3, [r0, #8]
   3371a:	d003      	beq.n	33724 <ip_interface_open+0xb8>
   3371c:	2f0a      	cmp	r7, #10
   3371e:	bf0c      	ite	eq
   33720:	2702      	moveq	r7, #2
   33722:	2701      	movne	r7, #1
   33724:	61ce      	str	r6, [r1, #28]
   33726:	2301      	movs	r3, #1
   33728:	f247 0201 	movw	r2, #28673	; 0x7001
   3372c:	9800      	ldr	r0, [sp, #0]
   3372e:	614f      	str	r7, [r1, #20]
   33730:	618d      	str	r5, [r1, #24]
   33732:	f00d f8df 	bl	408f4 <ip_interface_request_send>
   33736:	4606      	mov	r6, r0
   33738:	2800      	cmp	r0, #0
   3373a:	d1d5      	bne.n	336e8 <ip_interface_open+0x7c>
   3373c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33740:	2102      	movs	r1, #2
   33742:	4620      	mov	r0, r4
   33744:	ab01      	add	r3, sp, #4
   33746:	f00d f8e8 	bl	4091a <ip_interface_wait>
   3374a:	4606      	mov	r6, r0
   3374c:	2800      	cmp	r0, #0
   3374e:	d1cb      	bne.n	336e8 <ip_interface_open+0x7c>
   33750:	3d02      	subs	r5, #2
   33752:	2d01      	cmp	r5, #1
   33754:	d899      	bhi.n	3368a <ip_interface_open+0x1e>
   33756:	9b00      	ldr	r3, [sp, #0]
   33758:	681a      	ldr	r2, [r3, #0]
   3375a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3375e:	601a      	str	r2, [r3, #0]
   33760:	681a      	ldr	r2, [r3, #0]
   33762:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   33766:	601a      	str	r2, [r3, #0]
   33768:	e78f      	b.n	3368a <ip_interface_open+0x1e>
   3376a:	bf00      	nop
   3376c:	20020c07 	.word	0x20020c07
   33770:	00040863 	.word	0x00040863

00033774 <ip_interface_close>:
   33774:	f04f 33ff 	mov.w	r3, #4294967295
   33778:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3377a:	4605      	mov	r5, r0
   3377c:	9301      	str	r3, [sp, #4]
   3377e:	f7ff fe71 	bl	33464 <interface_socket_from_handle_get>
   33782:	4604      	mov	r4, r0
   33784:	b3a0      	cbz	r0, 337f0 <ip_interface_close+0x7c>
   33786:	6981      	ldr	r1, [r0, #24]
   33788:	6806      	ldr	r6, [r0, #0]
   3378a:	2300      	movs	r3, #0
   3378c:	f247 0209 	movw	r2, #28681	; 0x7009
   33790:	4628      	mov	r0, r5
   33792:	f00d f897 	bl	408c4 <ip_interface_request_create>
   33796:	4601      	mov	r1, r0
   33798:	b388      	cbz	r0, 337fe <ip_interface_close+0x8a>
   3379a:	6823      	ldr	r3, [r4, #0]
   3379c:	4620      	mov	r0, r4
   3379e:	0c1b      	lsrs	r3, r3, #16
   337a0:	041b      	lsls	r3, r3, #16
   337a2:	f043 030d 	orr.w	r3, r3, #13
   337a6:	6023      	str	r3, [r4, #0]
   337a8:	6823      	ldr	r3, [r4, #0]
   337aa:	f247 0209 	movw	r2, #28681	; 0x7009
   337ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   337b2:	6023      	str	r3, [r4, #0]
   337b4:	6823      	ldr	r3, [r4, #0]
   337b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   337ba:	6023      	str	r3, [r4, #0]
   337bc:	4633      	mov	r3, r6
   337be:	f00d f899 	bl	408f4 <ip_interface_request_send>
   337c2:	4604      	mov	r4, r0
   337c4:	b9a8      	cbnz	r0, 337f2 <ip_interface_close+0x7e>
   337c6:	4e0f      	ldr	r6, [pc, #60]	; (33804 <ip_interface_close+0x90>)
   337c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   337cc:	210e      	movs	r1, #14
   337ce:	4628      	mov	r0, r5
   337d0:	ab01      	add	r3, sp, #4
   337d2:	f00d f8a2 	bl	4091a <ip_interface_wait>
   337d6:	f856 0025 	ldr.w	r0, [r6, r5, lsl #2]
   337da:	b118      	cbz	r0, 337e4 <ip_interface_close+0x70>
   337dc:	f00c fe77 	bl	404ce <rpc_ip_client_message_free>
   337e0:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
   337e4:	4628      	mov	r0, r5
   337e6:	f7ff fdd9 	bl	3339c <interface_socket_free>
   337ea:	4620      	mov	r0, r4
   337ec:	b002      	add	sp, #8
   337ee:	bd70      	pop	{r4, r5, r6, pc}
   337f0:	2409      	movs	r4, #9
   337f2:	4620      	mov	r0, r4
   337f4:	f7f5 fd68 	bl	292c8 <nrf_modem_os_errno_set>
   337f8:	f04f 34ff 	mov.w	r4, #4294967295
   337fc:	e7f5      	b.n	337ea <ip_interface_close+0x76>
   337fe:	240c      	movs	r4, #12
   33800:	e7f7      	b.n	337f2 <ip_interface_close+0x7e>
   33802:	bf00      	nop
   33804:	20019f4c 	.word	0x20019f4c

00033808 <ip_interface_sendto>:
   33808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3380c:	4698      	mov	r8, r3
   3380e:	2300      	movs	r3, #0
   33810:	b089      	sub	sp, #36	; 0x24
   33812:	4606      	mov	r6, r0
   33814:	4689      	mov	r9, r1
   33816:	4615      	mov	r5, r2
   33818:	9305      	str	r3, [sp, #20]
   3381a:	f7ff fe23 	bl	33464 <interface_socket_from_handle_get>
   3381e:	4604      	mov	r4, r0
   33820:	2800      	cmp	r0, #0
   33822:	f000 80e2 	beq.w	339ea <ip_interface_sendto+0x1e2>
   33826:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   3382a:	f300 80e1 	bgt.w	339f0 <ip_interface_sendto+0x1e8>
   3382e:	6903      	ldr	r3, [r0, #16]
   33830:	2b01      	cmp	r3, #1
   33832:	d103      	bne.n	3383c <ip_interface_sendto+0x34>
   33834:	9a12      	ldr	r2, [sp, #72]	; 0x48
   33836:	2a00      	cmp	r2, #0
   33838:	f040 80dd 	bne.w	339f6 <ip_interface_sendto+0x1ee>
   3383c:	6822      	ldr	r2, [r4, #0]
   3383e:	0391      	lsls	r1, r2, #14
   33840:	d428      	bmi.n	33894 <ip_interface_sendto+0x8c>
   33842:	6822      	ldr	r2, [r4, #0]
   33844:	0092      	lsls	r2, r2, #2
   33846:	d409      	bmi.n	3385c <ip_interface_sendto+0x54>
   33848:	2b01      	cmp	r3, #1
   3384a:	d103      	bne.n	33854 <ip_interface_sendto+0x4c>
   3384c:	6823      	ldr	r3, [r4, #0]
   3384e:	b29b      	uxth	r3, r3
   33850:	2b05      	cmp	r3, #5
   33852:	d103      	bne.n	3385c <ip_interface_sendto+0x54>
   33854:	6823      	ldr	r3, [r4, #0]
   33856:	031f      	lsls	r7, r3, #12
   33858:	f140 80d0 	bpl.w	339fc <ip_interface_sendto+0x1f4>
   3385c:	6823      	ldr	r3, [r4, #0]
   3385e:	0318      	lsls	r0, r3, #12
   33860:	f140 80cf 	bpl.w	33a02 <ip_interface_sendto+0x1fa>
   33864:	f8d4 b008 	ldr.w	fp, [r4, #8]
   33868:	f1bb 0f00 	cmp.w	fp, #0
   3386c:	f000 80cf 	beq.w	33a0e <ip_interface_sendto+0x206>
   33870:	4658      	mov	r0, fp
   33872:	f7f5 fd29 	bl	292c8 <nrf_modem_os_errno_set>
   33876:	f04f 35ff 	mov.w	r5, #4294967295
   3387a:	4c72      	ldr	r4, [pc, #456]	; (33a44 <ip_interface_sendto+0x23c>)
   3387c:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
   33880:	b120      	cbz	r0, 3388c <ip_interface_sendto+0x84>
   33882:	f00c fe24 	bl	404ce <rpc_ip_client_message_free>
   33886:	2300      	movs	r3, #0
   33888:	f844 3026 	str.w	r3, [r4, r6, lsl #2]
   3388c:	4628      	mov	r0, r5
   3388e:	b009      	add	sp, #36	; 0x24
   33890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33894:	f1b8 0f00 	cmp.w	r8, #0
   33898:	d03a      	beq.n	33910 <ip_interface_sendto+0x108>
   3389a:	f018 0f02 	tst.w	r8, #2
   3389e:	f000 80b3 	beq.w	33a08 <ip_interface_sendto+0x200>
   338a2:	2700      	movs	r7, #0
   338a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   338a6:	f247 0a06 	movw	sl, #28678	; 0x7006
   338aa:	2b00      	cmp	r3, #0
   338ac:	bf08      	it	eq
   338ae:	f04f 33ff 	moveq.w	r3, #4294967295
   338b2:	9306      	str	r3, [sp, #24]
   338b4:	0433      	lsls	r3, r6, #16
   338b6:	9303      	str	r3, [sp, #12]
   338b8:	4629      	mov	r1, r5
   338ba:	a805      	add	r0, sp, #20
   338bc:	f00c fde1 	bl	40482 <rpc_ip_client_request_alloc>
   338c0:	280c      	cmp	r0, #12
   338c2:	f040 80b9 	bne.w	33a38 <ip_interface_sendto+0x230>
   338c6:	2f00      	cmp	r7, #0
   338c8:	f000 8086 	beq.w	339d8 <ip_interface_sendto+0x1d0>
   338cc:	9b06      	ldr	r3, [sp, #24]
   338ce:	3301      	adds	r3, #1
   338d0:	d0f2      	beq.n	338b8 <ip_interface_sendto+0xb0>
   338d2:	230a      	movs	r3, #10
   338d4:	2000      	movs	r0, #0
   338d6:	a907      	add	r1, sp, #28
   338d8:	9307      	str	r3, [sp, #28]
   338da:	f7f5 fc3d 	bl	29158 <nrf_modem_os_timedwait>
   338de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   338e2:	4413      	add	r3, r2
   338e4:	3b0a      	subs	r3, #10
   338e6:	2b00      	cmp	r3, #0
   338e8:	9306      	str	r3, [sp, #24]
   338ea:	dce5      	bgt.n	338b8 <ip_interface_sendto+0xb0>
   338ec:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
   338f0:	6822      	ldr	r2, [r4, #0]
   338f2:	0313      	lsls	r3, r2, #12
   338f4:	d4b8      	bmi.n	33868 <ip_interface_sendto+0x60>
   338f6:	6822      	ldr	r2, [r4, #0]
   338f8:	b292      	uxth	r2, r2
   338fa:	2a0d      	cmp	r2, #13
   338fc:	d0b4      	beq.n	33868 <ip_interface_sendto+0x60>
   338fe:	6822      	ldr	r2, [r4, #0]
   33900:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   33904:	6022      	str	r2, [r4, #0]
   33906:	6822      	ldr	r2, [r4, #0]
   33908:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3390c:	6022      	str	r2, [r4, #0]
   3390e:	e7ab      	b.n	33868 <ip_interface_sendto+0x60>
   33910:	6827      	ldr	r7, [r4, #0]
   33912:	f087 5780 	eor.w	r7, r7, #268435456	; 0x10000000
   33916:	f3c7 7700 	ubfx	r7, r7, #28, #1
   3391a:	e7c3      	b.n	338a4 <ip_interface_sendto+0x9c>
   3391c:	f04f 020c 	mov.w	r2, #12
   33920:	9b05      	ldr	r3, [sp, #20]
   33922:	721a      	strb	r2, [r3, #8]
   33924:	9a12      	ldr	r2, [sp, #72]	; 0x48
   33926:	7258      	strb	r0, [r3, #9]
   33928:	7298      	strb	r0, [r3, #10]
   3392a:	72d8      	strb	r0, [r3, #11]
   3392c:	2a00      	cmp	r2, #0
   3392e:	d056      	beq.n	339de <ip_interface_sendto+0x1d6>
   33930:	f103 021c 	add.w	r2, r3, #28
   33934:	9201      	str	r2, [sp, #4]
   33936:	f103 0218 	add.w	r2, r3, #24
   3393a:	9200      	str	r2, [sp, #0]
   3393c:	68e0      	ldr	r0, [r4, #12]
   3393e:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
   33942:	331a      	adds	r3, #26
   33944:	f00c ff99 	bl	4087a <ip_addr_parse>
   33948:	9a05      	ldr	r2, [sp, #20]
   3394a:	4683      	mov	fp, r0
   3394c:	2800      	cmp	r0, #0
   3394e:	d16b      	bne.n	33a28 <ip_interface_sendto+0x220>
   33950:	f247 0a07 	movw	sl, #28679	; 0x7007
   33954:	6893      	ldr	r3, [r2, #8]
   33956:	8b51      	ldrh	r1, [r2, #26]
   33958:	3304      	adds	r3, #4
   3395a:	440b      	add	r3, r1
   3395c:	f8c2 8014 	str.w	r8, [r2, #20]
   33960:	6093      	str	r3, [r2, #8]
   33962:	69a2      	ldr	r2, [r4, #24]
   33964:	9b05      	ldr	r3, [sp, #20]
   33966:	611a      	str	r2, [r3, #16]
   33968:	9a03      	ldr	r2, [sp, #12]
   3396a:	605d      	str	r5, [r3, #4]
   3396c:	ea4a 0202 	orr.w	r2, sl, r2
   33970:	60da      	str	r2, [r3, #12]
   33972:	f1b9 0f00 	cmp.w	r9, #0
   33976:	d004      	beq.n	33982 <ip_interface_sendto+0x17a>
   33978:	462a      	mov	r2, r5
   3397a:	4649      	mov	r1, r9
   3397c:	6818      	ldr	r0, [r3, #0]
   3397e:	f00e f98e 	bl	41c9e <memcpy>
   33982:	6823      	ldr	r3, [r4, #0]
   33984:	6822      	ldr	r2, [r4, #0]
   33986:	4620      	mov	r0, r4
   33988:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   3398c:	6022      	str	r2, [r4, #0]
   3398e:	6822      	ldr	r2, [r4, #0]
   33990:	9905      	ldr	r1, [sp, #20]
   33992:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
   33996:	6022      	str	r2, [r4, #0]
   33998:	4652      	mov	r2, sl
   3399a:	f00c ffab 	bl	408f4 <ip_interface_request_send>
   3399e:	4683      	mov	fp, r0
   339a0:	2800      	cmp	r0, #0
   339a2:	d1a5      	bne.n	338f0 <ip_interface_sendto+0xe8>
   339a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   339a8:	4630      	mov	r0, r6
   339aa:	4611      	mov	r1, r2
   339ac:	ab06      	add	r3, sp, #24
   339ae:	f00c ffb4 	bl	4091a <ip_interface_wait>
   339b2:	4683      	mov	fp, r0
   339b4:	2800      	cmp	r0, #0
   339b6:	d09b      	beq.n	338f0 <ip_interface_sendto+0xe8>
   339b8:	6822      	ldr	r2, [r4, #0]
   339ba:	0311      	lsls	r1, r2, #12
   339bc:	d412      	bmi.n	339e4 <ip_interface_sendto+0x1dc>
   339be:	283c      	cmp	r0, #60	; 0x3c
   339c0:	d096      	beq.n	338f0 <ip_interface_sendto+0xe8>
   339c2:	280c      	cmp	r0, #12
   339c4:	d194      	bne.n	338f0 <ip_interface_sendto+0xe8>
   339c6:	4b1f      	ldr	r3, [pc, #124]	; (33a44 <ip_interface_sendto+0x23c>)
   339c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   339cc:	b108      	cbz	r0, 339d2 <ip_interface_sendto+0x1ca>
   339ce:	f00c fd7e 	bl	404ce <rpc_ip_client_message_free>
   339d2:	2f00      	cmp	r7, #0
   339d4:	f47f af70 	bne.w	338b8 <ip_interface_sendto+0xb0>
   339d8:	f04f 0b23 	mov.w	fp, #35	; 0x23
   339dc:	e788      	b.n	338f0 <ip_interface_sendto+0xe8>
   339de:	f8c3 8014 	str.w	r8, [r3, #20]
   339e2:	e7be      	b.n	33962 <ip_interface_sendto+0x15a>
   339e4:	f8d4 b008 	ldr.w	fp, [r4, #8]
   339e8:	e782      	b.n	338f0 <ip_interface_sendto+0xe8>
   339ea:	f04f 0b09 	mov.w	fp, #9
   339ee:	e73f      	b.n	33870 <ip_interface_sendto+0x68>
   339f0:	f04f 0b28 	mov.w	fp, #40	; 0x28
   339f4:	e73c      	b.n	33870 <ip_interface_sendto+0x68>
   339f6:	f04f 0b38 	mov.w	fp, #56	; 0x38
   339fa:	e739      	b.n	33870 <ip_interface_sendto+0x68>
   339fc:	f04f 0b23 	mov.w	fp, #35	; 0x23
   33a00:	e736      	b.n	33870 <ip_interface_sendto+0x68>
   33a02:	f04f 0b39 	mov.w	fp, #57	; 0x39
   33a06:	e733      	b.n	33870 <ip_interface_sendto+0x68>
   33a08:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   33a0c:	e730      	b.n	33870 <ip_interface_sendto+0x68>
   33a0e:	6823      	ldr	r3, [r4, #0]
   33a10:	011a      	lsls	r2, r3, #4
   33a12:	bf55      	itete	pl
   33a14:	4b0b      	ldrpl	r3, [pc, #44]	; (33a44 <ip_interface_sendto+0x23c>)
   33a16:	6823      	ldrmi	r3, [r4, #0]
   33a18:	f853 3026 	ldrpl.w	r3, [r3, r6, lsl #2]
   33a1c:	f023 6300 	bicmi.w	r3, r3, #134217728	; 0x8000000
   33a20:	bf54      	ite	pl
   33a22:	699d      	ldrpl	r5, [r3, #24]
   33a24:	6023      	strmi	r3, [r4, #0]
   33a26:	e728      	b.n	3387a <ip_interface_sendto+0x72>
   33a28:	6810      	ldr	r0, [r2, #0]
   33a2a:	b108      	cbz	r0, 33a30 <ip_interface_sendto+0x228>
   33a2c:	f00c fd57 	bl	404de <rpc_ip_client_data_free>
   33a30:	9805      	ldr	r0, [sp, #20]
   33a32:	f00c fd4c 	bl	404ce <rpc_ip_client_message_free>
   33a36:	e75b      	b.n	338f0 <ip_interface_sendto+0xe8>
   33a38:	2800      	cmp	r0, #0
   33a3a:	f43f af6f 	beq.w	3391c <ip_interface_sendto+0x114>
   33a3e:	f04f 0b0c 	mov.w	fp, #12
   33a42:	e755      	b.n	338f0 <ip_interface_sendto+0xe8>
   33a44:	20019f4c 	.word	0x20019f4c

00033a48 <ip_interface_socketoption_get>:
   33a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33a4c:	461c      	mov	r4, r3
   33a4e:	f04f 33ff 	mov.w	r3, #4294967295
   33a52:	9301      	str	r3, [sp, #4]
   33a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   33a56:	4607      	mov	r7, r0
   33a58:	460d      	mov	r5, r1
   33a5a:	4693      	mov	fp, r2
   33a5c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   33a60:	2b00      	cmp	r3, #0
   33a62:	d06a      	beq.n	33b3a <ip_interface_socketoption_get+0xf2>
   33a64:	f8d8 3000 	ldr.w	r3, [r8]
   33a68:	2b00      	cmp	r3, #0
   33a6a:	d066      	beq.n	33b3a <ip_interface_socketoption_get+0xf2>
   33a6c:	680b      	ldr	r3, [r1, #0]
   33a6e:	025e      	lsls	r6, r3, #9
   33a70:	d465      	bmi.n	33b3e <ip_interface_socketoption_get+0xf6>
   33a72:	680b      	ldr	r3, [r1, #0]
   33a74:	0219      	lsls	r1, r3, #8
   33a76:	d462      	bmi.n	33b3e <ip_interface_socketoption_get+0xf6>
   33a78:	682b      	ldr	r3, [r5, #0]
   33a7a:	01da      	lsls	r2, r3, #7
   33a7c:	d45f      	bmi.n	33b3e <ip_interface_socketoption_get+0xf6>
   33a7e:	682b      	ldr	r3, [r5, #0]
   33a80:	019b      	lsls	r3, r3, #6
   33a82:	d45c      	bmi.n	33b3e <ip_interface_socketoption_get+0xf6>
   33a84:	f8d5 a000 	ldr.w	sl, [r5]
   33a88:	682b      	ldr	r3, [r5, #0]
   33a8a:	f247 0204 	movw	r2, #28676	; 0x7004
   33a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   33a92:	602b      	str	r3, [r5, #0]
   33a94:	f8d8 3000 	ldr.w	r3, [r8]
   33a98:	69a9      	ldr	r1, [r5, #24]
   33a9a:	f00c ff13 	bl	408c4 <ip_interface_request_create>
   33a9e:	4606      	mov	r6, r0
   33aa0:	2800      	cmp	r0, #0
   33aa2:	d048      	beq.n	33b36 <ip_interface_socketoption_get+0xee>
   33aa4:	6883      	ldr	r3, [r0, #8]
   33aa6:	f8c0 b014 	str.w	fp, [r0, #20]
   33aaa:	3308      	adds	r3, #8
   33aac:	6083      	str	r3, [r0, #8]
   33aae:	6184      	str	r4, [r0, #24]
   33ab0:	4601      	mov	r1, r0
   33ab2:	f8d0 b000 	ldr.w	fp, [r0]
   33ab6:	4653      	mov	r3, sl
   33ab8:	f247 0204 	movw	r2, #28676	; 0x7004
   33abc:	4628      	mov	r0, r5
   33abe:	f00c ff19 	bl	408f4 <ip_interface_request_send>
   33ac2:	4604      	mov	r4, r0
   33ac4:	bb20      	cbnz	r0, 33b10 <ip_interface_socketoption_get+0xc8>
   33ac6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   33aca:	4638      	mov	r0, r7
   33acc:	4611      	mov	r1, r2
   33ace:	ab01      	add	r3, sp, #4
   33ad0:	f00c ff23 	bl	4091a <ip_interface_wait>
   33ad4:	4604      	mov	r4, r0
   33ad6:	b9d8      	cbnz	r0, 33b10 <ip_interface_socketoption_get+0xc8>
   33ad8:	4b1a      	ldr	r3, [pc, #104]	; (33b44 <ip_interface_socketoption_get+0xfc>)
   33ada:	f8d8 2000 	ldr.w	r2, [r8]
   33ade:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
   33ae2:	4699      	mov	r9, r3
   33ae4:	b1f9      	cbz	r1, 33b26 <ip_interface_socketoption_get+0xde>
   33ae6:	6848      	ldr	r0, [r1, #4]
   33ae8:	4290      	cmp	r0, r2
   33aea:	d81a      	bhi.n	33b22 <ip_interface_socketoption_get+0xda>
   33aec:	6809      	ldr	r1, [r1, #0]
   33aee:	b1c1      	cbz	r1, 33b22 <ip_interface_socketoption_get+0xda>
   33af0:	4602      	mov	r2, r0
   33af2:	980c      	ldr	r0, [sp, #48]	; 0x30
   33af4:	f00e f8d3 	bl	41c9e <memcpy>
   33af8:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
   33afc:	6852      	ldr	r2, [r2, #4]
   33afe:	f8c8 2000 	str.w	r2, [r8]
   33b02:	f859 0027 	ldr.w	r0, [r9, r7, lsl #2]
   33b06:	f00c fce2 	bl	404ce <rpc_ip_client_message_free>
   33b0a:	2200      	movs	r2, #0
   33b0c:	f849 2027 	str.w	r2, [r9, r7, lsl #2]
   33b10:	4658      	mov	r0, fp
   33b12:	f00c fce4 	bl	404de <rpc_ip_client_data_free>
   33b16:	f8c5 a000 	str.w	sl, [r5]
   33b1a:	4620      	mov	r0, r4
   33b1c:	b003      	add	sp, #12
   33b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33b22:	2416      	movs	r4, #22
   33b24:	e7ed      	b.n	33b02 <ip_interface_socketoption_get+0xba>
   33b26:	4659      	mov	r1, fp
   33b28:	980c      	ldr	r0, [sp, #48]	; 0x30
   33b2a:	f00e f8b8 	bl	41c9e <memcpy>
   33b2e:	6873      	ldr	r3, [r6, #4]
   33b30:	f8c8 3000 	str.w	r3, [r8]
   33b34:	e7ec      	b.n	33b10 <ip_interface_socketoption_get+0xc8>
   33b36:	240c      	movs	r4, #12
   33b38:	e7ed      	b.n	33b16 <ip_interface_socketoption_get+0xce>
   33b3a:	2416      	movs	r4, #22
   33b3c:	e7ed      	b.n	33b1a <ip_interface_socketoption_get+0xd2>
   33b3e:	2423      	movs	r4, #35	; 0x23
   33b40:	e7eb      	b.n	33b1a <ip_interface_socketoption_get+0xd2>
   33b42:	bf00      	nop
   33b44:	20019f4c 	.word	0x20019f4c

00033b48 <ip_interface_bind>:
   33b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   33b4c:	f04f 33ff 	mov.w	r3, #4294967295
   33b50:	4607      	mov	r7, r0
   33b52:	4690      	mov	r8, r2
   33b54:	460e      	mov	r6, r1
   33b56:	9303      	str	r3, [sp, #12]
   33b58:	2900      	cmp	r1, #0
   33b5a:	d04e      	beq.n	33bfa <ip_interface_bind+0xb2>
   33b5c:	2a00      	cmp	r2, #0
   33b5e:	d04c      	beq.n	33bfa <ip_interface_bind+0xb2>
   33b60:	f7ff fc80 	bl	33464 <interface_socket_from_handle_get>
   33b64:	4604      	mov	r4, r0
   33b66:	2800      	cmp	r0, #0
   33b68:	d049      	beq.n	33bfe <ip_interface_bind+0xb6>
   33b6a:	6803      	ldr	r3, [r0, #0]
   33b6c:	b29b      	uxth	r3, r3
   33b6e:	2b02      	cmp	r3, #2
   33b70:	d145      	bne.n	33bfe <ip_interface_bind+0xb6>
   33b72:	6981      	ldr	r1, [r0, #24]
   33b74:	2300      	movs	r3, #0
   33b76:	f247 0205 	movw	r2, #28677	; 0x7005
   33b7a:	4638      	mov	r0, r7
   33b7c:	f00c fea2 	bl	408c4 <ip_interface_request_create>
   33b80:	4605      	mov	r5, r0
   33b82:	2800      	cmp	r0, #0
   33b84:	d03d      	beq.n	33c02 <ip_interface_bind+0xba>
   33b86:	6883      	ldr	r3, [r0, #8]
   33b88:	4642      	mov	r2, r8
   33b8a:	3304      	adds	r3, #4
   33b8c:	6083      	str	r3, [r0, #8]
   33b8e:	f100 0318 	add.w	r3, r0, #24
   33b92:	9301      	str	r3, [sp, #4]
   33b94:	f100 0314 	add.w	r3, r0, #20
   33b98:	9300      	str	r3, [sp, #0]
   33b9a:	4631      	mov	r1, r6
   33b9c:	f100 0316 	add.w	r3, r0, #22
   33ba0:	68e0      	ldr	r0, [r4, #12]
   33ba2:	f00c fe6a 	bl	4087a <ip_addr_parse>
   33ba6:	bb08      	cbnz	r0, 33bec <ip_interface_bind+0xa4>
   33ba8:	68ab      	ldr	r3, [r5, #8]
   33baa:	8aea      	ldrh	r2, [r5, #22]
   33bac:	4e16      	ldr	r6, [pc, #88]	; (33c08 <ip_interface_bind+0xc0>)
   33bae:	4413      	add	r3, r2
   33bb0:	60ab      	str	r3, [r5, #8]
   33bb2:	6823      	ldr	r3, [r4, #0]
   33bb4:	f247 0205 	movw	r2, #28677	; 0x7005
   33bb8:	4033      	ands	r3, r6
   33bba:	f043 0303 	orr.w	r3, r3, #3
   33bbe:	6023      	str	r3, [r4, #0]
   33bc0:	6823      	ldr	r3, [r4, #0]
   33bc2:	4629      	mov	r1, r5
   33bc4:	4033      	ands	r3, r6
   33bc6:	4620      	mov	r0, r4
   33bc8:	f043 0302 	orr.w	r3, r3, #2
   33bcc:	f00c fe92 	bl	408f4 <ip_interface_request_send>
   33bd0:	b960      	cbnz	r0, 33bec <ip_interface_bind+0xa4>
   33bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33bd6:	2104      	movs	r1, #4
   33bd8:	4638      	mov	r0, r7
   33bda:	ab03      	add	r3, sp, #12
   33bdc:	f00c fe9d 	bl	4091a <ip_interface_wait>
   33be0:	b140      	cbz	r0, 33bf4 <ip_interface_bind+0xac>
   33be2:	6823      	ldr	r3, [r4, #0]
   33be4:	4033      	ands	r3, r6
   33be6:	f043 0302 	orr.w	r3, r3, #2
   33bea:	6023      	str	r3, [r4, #0]
   33bec:	f7f5 fb6c 	bl	292c8 <nrf_modem_os_errno_set>
   33bf0:	f04f 30ff 	mov.w	r0, #4294967295
   33bf4:	b004      	add	sp, #16
   33bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   33bfa:	2016      	movs	r0, #22
   33bfc:	e7f6      	b.n	33bec <ip_interface_bind+0xa4>
   33bfe:	2009      	movs	r0, #9
   33c00:	e7f4      	b.n	33bec <ip_interface_bind+0xa4>
   33c02:	200c      	movs	r0, #12
   33c04:	e7f2      	b.n	33bec <ip_interface_bind+0xa4>
   33c06:	bf00      	nop
   33c08:	ffff0000 	.word	0xffff0000

00033c0c <ip_interface_listen>:
   33c0c:	f04f 33ff 	mov.w	r3, #4294967295
   33c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   33c12:	4605      	mov	r5, r0
   33c14:	9301      	str	r3, [sp, #4]
   33c16:	f7ff fc25 	bl	33464 <interface_socket_from_handle_get>
   33c1a:	4604      	mov	r4, r0
   33c1c:	2800      	cmp	r0, #0
   33c1e:	d03c      	beq.n	33c9a <ip_interface_listen+0x8e>
   33c20:	6803      	ldr	r3, [r0, #0]
   33c22:	b29b      	uxth	r3, r3
   33c24:	2b04      	cmp	r3, #4
   33c26:	d003      	beq.n	33c30 <ip_interface_listen+0x24>
   33c28:	6803      	ldr	r3, [r0, #0]
   33c2a:	b29b      	uxth	r3, r3
   33c2c:	2b0b      	cmp	r3, #11
   33c2e:	d134      	bne.n	33c9a <ip_interface_listen+0x8e>
   33c30:	2100      	movs	r1, #0
   33c32:	4628      	mov	r0, r5
   33c34:	4a1c      	ldr	r2, [pc, #112]	; (33ca8 <ip_interface_listen+0x9c>)
   33c36:	f7ff fbbd 	bl	333b4 <interface_socket_packet_handler_update>
   33c3a:	4603      	mov	r3, r0
   33c3c:	bb78      	cbnz	r0, 33c9e <ip_interface_listen+0x92>
   33c3e:	69a1      	ldr	r1, [r4, #24]
   33c40:	f247 0208 	movw	r2, #28680	; 0x7008
   33c44:	4628      	mov	r0, r5
   33c46:	f00c fe3d 	bl	408c4 <ip_interface_request_create>
   33c4a:	4601      	mov	r1, r0
   33c4c:	b348      	cbz	r0, 33ca2 <ip_interface_listen+0x96>
   33c4e:	6883      	ldr	r3, [r0, #8]
   33c50:	4e16      	ldr	r6, [pc, #88]	; (33cac <ip_interface_listen+0xa0>)
   33c52:	3304      	adds	r3, #4
   33c54:	6083      	str	r3, [r0, #8]
   33c56:	6823      	ldr	r3, [r4, #0]
   33c58:	f247 0208 	movw	r2, #28680	; 0x7008
   33c5c:	4033      	ands	r3, r6
   33c5e:	f043 0306 	orr.w	r3, r3, #6
   33c62:	6023      	str	r3, [r4, #0]
   33c64:	6823      	ldr	r3, [r4, #0]
   33c66:	4620      	mov	r0, r4
   33c68:	4033      	ands	r3, r6
   33c6a:	f043 0304 	orr.w	r3, r3, #4
   33c6e:	f00c fe41 	bl	408f4 <ip_interface_request_send>
   33c72:	b960      	cbnz	r0, 33c8e <ip_interface_listen+0x82>
   33c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33c78:	2107      	movs	r1, #7
   33c7a:	4628      	mov	r0, r5
   33c7c:	ab01      	add	r3, sp, #4
   33c7e:	f00c fe4c 	bl	4091a <ip_interface_wait>
   33c82:	b140      	cbz	r0, 33c96 <ip_interface_listen+0x8a>
   33c84:	6823      	ldr	r3, [r4, #0]
   33c86:	4033      	ands	r3, r6
   33c88:	f043 0304 	orr.w	r3, r3, #4
   33c8c:	6023      	str	r3, [r4, #0]
   33c8e:	f7f5 fb1b 	bl	292c8 <nrf_modem_os_errno_set>
   33c92:	f04f 30ff 	mov.w	r0, #4294967295
   33c96:	b002      	add	sp, #8
   33c98:	bd70      	pop	{r4, r5, r6, pc}
   33c9a:	2009      	movs	r0, #9
   33c9c:	e7f7      	b.n	33c8e <ip_interface_listen+0x82>
   33c9e:	2023      	movs	r0, #35	; 0x23
   33ca0:	e7f5      	b.n	33c8e <ip_interface_listen+0x82>
   33ca2:	200c      	movs	r0, #12
   33ca4:	e7f3      	b.n	33c8e <ip_interface_listen+0x82>
   33ca6:	bf00      	nop
   33ca8:	00040863 	.word	0x00040863
   33cac:	ffff0000 	.word	0xffff0000

00033cb0 <ip_interface_accept>:
   33cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33cb4:	f04f 33ff 	mov.w	r3, #4294967295
   33cb8:	2600      	movs	r6, #0
   33cba:	4680      	mov	r8, r0
   33cbc:	460f      	mov	r7, r1
   33cbe:	4692      	mov	sl, r2
   33cc0:	e9cd 6300 	strd	r6, r3, [sp]
   33cc4:	f7ff fbce 	bl	33464 <interface_socket_from_handle_get>
   33cc8:	4604      	mov	r4, r0
   33cca:	2800      	cmp	r0, #0
   33ccc:	f000 80b2 	beq.w	33e34 <ip_interface_accept+0x184>
   33cd0:	6803      	ldr	r3, [r0, #0]
   33cd2:	b29b      	uxth	r3, r3
   33cd4:	2b07      	cmp	r3, #7
   33cd6:	f040 80b0 	bne.w	33e3a <ip_interface_accept+0x18a>
   33cda:	6803      	ldr	r3, [r0, #0]
   33cdc:	f013 5980 	ands.w	r9, r3, #268435456	; 0x10000000
   33ce0:	d165      	bne.n	33dae <ip_interface_accept+0xfe>
   33ce2:	6803      	ldr	r3, [r0, #0]
   33ce4:	03db      	lsls	r3, r3, #15
   33ce6:	d466      	bmi.n	33db6 <ip_interface_accept+0x106>
   33ce8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   33cec:	4640      	mov	r0, r8
   33cee:	4611      	mov	r1, r2
   33cf0:	ab01      	add	r3, sp, #4
   33cf2:	f00c fe12 	bl	4091a <ip_interface_wait>
   33cf6:	4605      	mov	r5, r0
   33cf8:	6826      	ldr	r6, [r4, #0]
   33cfa:	f416 3680 	ands.w	r6, r6, #65536	; 0x10000
   33cfe:	d05c      	beq.n	33dba <ip_interface_accept+0x10a>
   33d00:	4668      	mov	r0, sp
   33d02:	4a59      	ldr	r2, [pc, #356]	; (33e68 <ip_interface_accept+0x1b8>)
   33d04:	6921      	ldr	r1, [r4, #16]
   33d06:	f7ff fb23 	bl	33350 <interface_socket_allocate>
   33d0a:	9b00      	ldr	r3, [sp, #0]
   33d0c:	4606      	mov	r6, r0
   33d0e:	2b00      	cmp	r3, #0
   33d10:	f000 8095 	beq.w	33e3e <ip_interface_accept+0x18e>
   33d14:	6962      	ldr	r2, [r4, #20]
   33d16:	69a1      	ldr	r1, [r4, #24]
   33d18:	615a      	str	r2, [r3, #20]
   33d1a:	68e2      	ldr	r2, [r4, #12]
   33d1c:	4640      	mov	r0, r8
   33d1e:	60da      	str	r2, [r3, #12]
   33d20:	6922      	ldr	r2, [r4, #16]
   33d22:	611a      	str	r2, [r3, #16]
   33d24:	2300      	movs	r3, #0
   33d26:	f247 020c 	movw	r2, #28684	; 0x700c
   33d2a:	f00c fdcb 	bl	408c4 <ip_interface_request_create>
   33d2e:	4601      	mov	r1, r0
   33d30:	2800      	cmp	r0, #0
   33d32:	f000 8084 	beq.w	33e3e <ip_interface_accept+0x18e>
   33d36:	6823      	ldr	r3, [r4, #0]
   33d38:	f8df b134 	ldr.w	fp, [pc, #308]	; 33e70 <ip_interface_accept+0x1c0>
   33d3c:	f247 020c 	movw	r2, #28684	; 0x700c
   33d40:	ea03 030b 	and.w	r3, r3, fp
   33d44:	f043 0308 	orr.w	r3, r3, #8
   33d48:	6023      	str	r3, [r4, #0]
   33d4a:	6823      	ldr	r3, [r4, #0]
   33d4c:	4620      	mov	r0, r4
   33d4e:	ea03 030b 	and.w	r3, r3, fp
   33d52:	f043 0307 	orr.w	r3, r3, #7
   33d56:	f00c fdcd 	bl	408f4 <ip_interface_request_send>
   33d5a:	4605      	mov	r5, r0
   33d5c:	b9d0      	cbnz	r0, 33d94 <ip_interface_accept+0xe4>
   33d5e:	6823      	ldr	r3, [r4, #0]
   33d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   33d64:	ea23 0309 	bic.w	r3, r3, r9
   33d68:	6023      	str	r3, [r4, #0]
   33d6a:	2109      	movs	r1, #9
   33d6c:	ab01      	add	r3, sp, #4
   33d6e:	4640      	mov	r0, r8
   33d70:	f00c fdd3 	bl	4091a <ip_interface_wait>
   33d74:	6823      	ldr	r3, [r4, #0]
   33d76:	4605      	mov	r5, r0
   33d78:	ea43 0309 	orr.w	r3, r3, r9
   33d7c:	6023      	str	r3, [r4, #0]
   33d7e:	b1f0      	cbz	r0, 33dbe <ip_interface_accept+0x10e>
   33d80:	6823      	ldr	r3, [r4, #0]
   33d82:	ea03 030b 	and.w	r3, r3, fp
   33d86:	f043 0307 	orr.w	r3, r3, #7
   33d8a:	6023      	str	r3, [r4, #0]
   33d8c:	6823      	ldr	r3, [r4, #0]
   33d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33d92:	6023      	str	r3, [r4, #0]
   33d94:	9b00      	ldr	r3, [sp, #0]
   33d96:	b113      	cbz	r3, 33d9e <ip_interface_accept+0xee>
   33d98:	4630      	mov	r0, r6
   33d9a:	f7ff faff 	bl	3339c <interface_socket_free>
   33d9e:	4628      	mov	r0, r5
   33da0:	f7f5 fa92 	bl	292c8 <nrf_modem_os_errno_set>
   33da4:	f04f 30ff 	mov.w	r0, #4294967295
   33da8:	b003      	add	sp, #12
   33daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dae:	2523      	movs	r5, #35	; 0x23
   33db0:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
   33db4:	e7a0      	b.n	33cf8 <ip_interface_accept+0x48>
   33db6:	2509      	movs	r5, #9
   33db8:	e79e      	b.n	33cf8 <ip_interface_accept+0x48>
   33dba:	2d00      	cmp	r5, #0
   33dbc:	d1ea      	bne.n	33d94 <ip_interface_accept+0xe4>
   33dbe:	4d2b      	ldr	r5, [pc, #172]	; (33e6c <ip_interface_accept+0x1bc>)
   33dc0:	9b00      	ldr	r3, [sp, #0]
   33dc2:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
   33dc6:	698a      	ldr	r2, [r1, #24]
   33dc8:	619a      	str	r2, [r3, #24]
   33dca:	b197      	cbz	r7, 33df2 <ip_interface_accept+0x142>
   33dcc:	68db      	ldr	r3, [r3, #12]
   33dce:	2b0a      	cmp	r3, #10
   33dd0:	d137      	bne.n	33e42 <ip_interface_accept+0x192>
   33dd2:	f8da 2000 	ldr.w	r2, [sl]
   33dd6:	2a24      	cmp	r2, #36	; 0x24
   33dd8:	d10b      	bne.n	33df2 <ip_interface_accept+0x142>
   33dda:	703a      	strb	r2, [r7, #0]
   33ddc:	607b      	str	r3, [r7, #4]
   33dde:	7f4a      	ldrb	r2, [r1, #29]
   33de0:	7f0b      	ldrb	r3, [r1, #28]
   33de2:	3120      	adds	r1, #32
   33de4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   33de8:	2210      	movs	r2, #16
   33dea:	813b      	strh	r3, [r7, #8]
   33dec:	18b8      	adds	r0, r7, r2
   33dee:	f00d ff56 	bl	41c9e <memcpy>
   33df2:	9b00      	ldr	r3, [sp, #0]
   33df4:	491e      	ldr	r1, [pc, #120]	; (33e70 <ip_interface_accept+0x1c0>)
   33df6:	681a      	ldr	r2, [r3, #0]
   33df8:	f855 0028 	ldr.w	r0, [r5, r8, lsl #2]
   33dfc:	400a      	ands	r2, r1
   33dfe:	f042 0205 	orr.w	r2, r2, #5
   33e02:	601a      	str	r2, [r3, #0]
   33e04:	681a      	ldr	r2, [r3, #0]
   33e06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   33e0a:	601a      	str	r2, [r3, #0]
   33e0c:	681a      	ldr	r2, [r3, #0]
   33e0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
   33e12:	601a      	str	r2, [r3, #0]
   33e14:	6823      	ldr	r3, [r4, #0]
   33e16:	400b      	ands	r3, r1
   33e18:	f043 0307 	orr.w	r3, r3, #7
   33e1c:	6023      	str	r3, [r4, #0]
   33e1e:	6823      	ldr	r3, [r4, #0]
   33e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   33e24:	6023      	str	r3, [r4, #0]
   33e26:	f00c fb52 	bl	404ce <rpc_ip_client_message_free>
   33e2a:	2300      	movs	r3, #0
   33e2c:	4630      	mov	r0, r6
   33e2e:	f845 3028 	str.w	r3, [r5, r8, lsl #2]
   33e32:	e7b9      	b.n	33da8 <ip_interface_accept+0xf8>
   33e34:	2509      	movs	r5, #9
   33e36:	4606      	mov	r6, r0
   33e38:	e7ac      	b.n	33d94 <ip_interface_accept+0xe4>
   33e3a:	2509      	movs	r5, #9
   33e3c:	e7aa      	b.n	33d94 <ip_interface_accept+0xe4>
   33e3e:	250c      	movs	r5, #12
   33e40:	e7a8      	b.n	33d94 <ip_interface_accept+0xe4>
   33e42:	2b02      	cmp	r3, #2
   33e44:	d1d5      	bne.n	33df2 <ip_interface_accept+0x142>
   33e46:	f8da 2000 	ldr.w	r2, [sl]
   33e4a:	2a10      	cmp	r2, #16
   33e4c:	d1d1      	bne.n	33df2 <ip_interface_accept+0x142>
   33e4e:	703a      	strb	r2, [r7, #0]
   33e50:	607b      	str	r3, [r7, #4]
   33e52:	7f4a      	ldrb	r2, [r1, #29]
   33e54:	7f0b      	ldrb	r3, [r1, #28]
   33e56:	f107 000c 	add.w	r0, r7, #12
   33e5a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   33e5e:	813b      	strh	r3, [r7, #8]
   33e60:	2204      	movs	r2, #4
   33e62:	3120      	adds	r1, #32
   33e64:	e7c3      	b.n	33dee <ip_interface_accept+0x13e>
   33e66:	bf00      	nop
   33e68:	00040863 	.word	0x00040863
   33e6c:	20019f4c 	.word	0x20019f4c
   33e70:	ffff0000 	.word	0xffff0000

00033e74 <ip_interface_getaddrinfo>:
   33e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33e78:	2601      	movs	r6, #1
   33e7a:	4607      	mov	r7, r0
   33e7c:	4608      	mov	r0, r1
   33e7e:	2100      	movs	r1, #0
   33e80:	b085      	sub	sp, #20
   33e82:	4614      	mov	r4, r2
   33e84:	9300      	str	r3, [sp, #0]
   33e86:	4a5e      	ldr	r2, [pc, #376]	; (34000 <ip_interface_getaddrinfo+0x18c>)
   33e88:	4b5e      	ldr	r3, [pc, #376]	; (34004 <ip_interface_getaddrinfo+0x190>)
   33e8a:	6016      	str	r6, [r2, #0]
   33e8c:	601e      	str	r6, [r3, #0]
   33e8e:	4e5e      	ldr	r6, [pc, #376]	; (34008 <ip_interface_getaddrinfo+0x194>)
   33e90:	4d5e      	ldr	r5, [pc, #376]	; (3400c <ip_interface_getaddrinfo+0x198>)
   33e92:	7836      	ldrb	r6, [r6, #0]
   33e94:	469b      	mov	fp, r3
   33e96:	8029      	strh	r1, [r5, #0]
   33e98:	9201      	str	r2, [sp, #4]
   33e9a:	2e00      	cmp	r6, #0
   33e9c:	f000 80a9 	beq.w	33ff2 <ip_interface_getaddrinfo+0x17e>
   33ea0:	b150      	cbz	r0, 33eb8 <ip_interface_getaddrinfo+0x44>
   33ea2:	220a      	movs	r2, #10
   33ea4:	f007 fc26 	bl	3b6f4 <strtol>
   33ea8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
   33eac:	1e42      	subs	r2, r0, #1
   33eae:	429a      	cmp	r2, r3
   33eb0:	f200 80a1 	bhi.w	33ff6 <ip_interface_getaddrinfo+0x182>
   33eb4:	ba40      	rev16	r0, r0
   33eb6:	8028      	strh	r0, [r5, #0]
   33eb8:	4e55      	ldr	r6, [pc, #340]	; (34010 <ip_interface_getaddrinfo+0x19c>)
   33eba:	f8d6 a000 	ldr.w	sl, [r6]
   33ebe:	f1ba 0f00 	cmp.w	sl, #0
   33ec2:	f040 809a 	bne.w	33ffa <ip_interface_getaddrinfo+0x186>
   33ec6:	4953      	ldr	r1, [pc, #332]	; (34014 <ip_interface_getaddrinfo+0x1a0>)
   33ec8:	4a53      	ldr	r2, [pc, #332]	; (34018 <ip_interface_getaddrinfo+0x1a4>)
   33eca:	4689      	mov	r9, r1
   33ecc:	4690      	mov	r8, r2
   33ece:	f8c1 a000 	str.w	sl, [r1]
   33ed2:	f8c2 a000 	str.w	sl, [r2]
   33ed6:	b11f      	cbz	r7, 33ee0 <ip_interface_getaddrinfo+0x6c>
   33ed8:	4638      	mov	r0, r7
   33eda:	f7e9 f9bf 	bl	1d25c <strlen>
   33ede:	4682      	mov	sl, r0
   33ee0:	2c00      	cmp	r4, #0
   33ee2:	d142      	bne.n	33f6a <ip_interface_getaddrinfo+0xf6>
   33ee4:	f04f 31ff 	mov.w	r1, #4294967295
   33ee8:	4653      	mov	r3, sl
   33eea:	f247 020d 	movw	r2, #28685	; 0x700d
   33eee:	4608      	mov	r0, r1
   33ef0:	f00c fce8 	bl	408c4 <ip_interface_request_create>
   33ef4:	4605      	mov	r5, r0
   33ef6:	2800      	cmp	r0, #0
   33ef8:	d074      	beq.n	33fe4 <ip_interface_getaddrinfo+0x170>
   33efa:	2c00      	cmp	r4, #0
   33efc:	d064      	beq.n	33fc8 <ip_interface_getaddrinfo+0x154>
   33efe:	6862      	ldr	r2, [r4, #4]
   33f00:	f022 0108 	bic.w	r1, r2, #8
   33f04:	2902      	cmp	r1, #2
   33f06:	d049      	beq.n	33f9c <ip_interface_getaddrinfo+0x128>
   33f08:	2a05      	cmp	r2, #5
   33f0a:	d047      	beq.n	33f9c <ip_interface_getaddrinfo+0x128>
   33f0c:	202f      	movs	r0, #47	; 0x2f
   33f0e:	f7f5 f9db 	bl	292c8 <nrf_modem_os_errno_set>
   33f12:	f04f 34ff 	mov.w	r4, #4294967295
   33f16:	68aa      	ldr	r2, [r5, #8]
   33f18:	3210      	adds	r2, #16
   33f1a:	60aa      	str	r2, [r5, #8]
   33f1c:	b12f      	cbz	r7, 33f2a <ip_interface_getaddrinfo+0xb6>
   33f1e:	6828      	ldr	r0, [r5, #0]
   33f20:	b118      	cbz	r0, 33f2a <ip_interface_getaddrinfo+0xb6>
   33f22:	4652      	mov	r2, sl
   33f24:	4639      	mov	r1, r7
   33f26:	f00d feba 	bl	41c9e <memcpy>
   33f2a:	2c00      	cmp	r4, #0
   33f2c:	d15c      	bne.n	33fe8 <ip_interface_getaddrinfo+0x174>
   33f2e:	2301      	movs	r3, #1
   33f30:	f247 010d 	movw	r1, #28685	; 0x700d
   33f34:	4628      	mov	r0, r5
   33f36:	6033      	str	r3, [r6, #0]
   33f38:	f00c fab5 	bl	404a6 <rpc_ip_client_request_send>
   33f3c:	2800      	cmp	r0, #0
   33f3e:	d156      	bne.n	33fee <ip_interface_getaddrinfo+0x17a>
   33f40:	f04f 33ff 	mov.w	r3, #4294967295
   33f44:	9303      	str	r3, [sp, #12]
   33f46:	4628      	mov	r0, r5
   33f48:	a903      	add	r1, sp, #12
   33f4a:	f7f5 f905 	bl	29158 <nrf_modem_os_timedwait>
   33f4e:	6833      	ldr	r3, [r6, #0]
   33f50:	2b01      	cmp	r3, #1
   33f52:	d0f8      	beq.n	33f46 <ip_interface_getaddrinfo+0xd2>
   33f54:	f8d8 3000 	ldr.w	r3, [r8]
   33f58:	2b00      	cmp	r3, #0
   33f5a:	d03b      	beq.n	33fd4 <ip_interface_getaddrinfo+0x160>
   33f5c:	f8d8 4000 	ldr.w	r4, [r8]
   33f60:	2c00      	cmp	r4, #0
   33f62:	d03b      	beq.n	33fdc <ip_interface_getaddrinfo+0x168>
   33f64:	2300      	movs	r3, #0
   33f66:	6033      	str	r3, [r6, #0]
   33f68:	e038      	b.n	33fdc <ip_interface_getaddrinfo+0x168>
   33f6a:	69e2      	ldr	r2, [r4, #28]
   33f6c:	2a00      	cmp	r2, #0
   33f6e:	d0b9      	beq.n	33ee4 <ip_interface_getaddrinfo+0x70>
   33f70:	6851      	ldr	r1, [r2, #4]
   33f72:	2966      	cmp	r1, #102	; 0x66
   33f74:	d1b6      	bne.n	33ee4 <ip_interface_getaddrinfo+0x70>
   33f76:	6891      	ldr	r1, [r2, #8]
   33f78:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   33f7c:	d1b2      	bne.n	33ee4 <ip_interface_getaddrinfo+0x70>
   33f7e:	f240 2102 	movw	r1, #514	; 0x202
   33f82:	68d0      	ldr	r0, [r2, #12]
   33f84:	4288      	cmp	r0, r1
   33f86:	d1ad      	bne.n	33ee4 <ip_interface_getaddrinfo+0x70>
   33f88:	6991      	ldr	r1, [r2, #24]
   33f8a:	2900      	cmp	r1, #0
   33f8c:	d0aa      	beq.n	33ee4 <ip_interface_getaddrinfo+0x70>
   33f8e:	6860      	ldr	r0, [r4, #4]
   33f90:	f002 f948 	bl	36224 <pdn_interface_pdn_id_get>
   33f94:	1c43      	adds	r3, r0, #1
   33f96:	d0a5      	beq.n	33ee4 <ip_interface_getaddrinfo+0x70>
   33f98:	4601      	mov	r1, r0
   33f9a:	e7a5      	b.n	33ee8 <ip_interface_getaddrinfo+0x74>
   33f9c:	68a1      	ldr	r1, [r4, #8]
   33f9e:	2902      	cmp	r1, #2
   33fa0:	bf08      	it	eq
   33fa2:	9b01      	ldreq	r3, [sp, #4]
   33fa4:	f8cb 1000 	str.w	r1, [fp]
   33fa8:	bf08      	it	eq
   33faa:	6019      	streq	r1, [r3, #0]
   33fac:	2a05      	cmp	r2, #5
   33fae:	d003      	beq.n	33fb8 <ip_interface_getaddrinfo+0x144>
   33fb0:	2a0a      	cmp	r2, #10
   33fb2:	bf0c      	ite	eq
   33fb4:	2202      	moveq	r2, #2
   33fb6:	2201      	movne	r2, #1
   33fb8:	61aa      	str	r2, [r5, #24]
   33fba:	68e2      	ldr	r2, [r4, #12]
   33fbc:	61e9      	str	r1, [r5, #28]
   33fbe:	622a      	str	r2, [r5, #32]
   33fc0:	6822      	ldr	r2, [r4, #0]
   33fc2:	2400      	movs	r4, #0
   33fc4:	616a      	str	r2, [r5, #20]
   33fc6:	e7a6      	b.n	33f16 <ip_interface_getaddrinfo+0xa2>
   33fc8:	2210      	movs	r2, #16
   33fca:	4621      	mov	r1, r4
   33fcc:	3014      	adds	r0, #20
   33fce:	f00d fe86 	bl	41cde <memset>
   33fd2:	e7a0      	b.n	33f16 <ip_interface_getaddrinfo+0xa2>
   33fd4:	f8d9 3000 	ldr.w	r3, [r9]
   33fd8:	9a00      	ldr	r2, [sp, #0]
   33fda:	6013      	str	r3, [r2, #0]
   33fdc:	4620      	mov	r0, r4
   33fde:	b005      	add	sp, #20
   33fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33fe4:	240c      	movs	r4, #12
   33fe6:	e7bd      	b.n	33f64 <ip_interface_getaddrinfo+0xf0>
   33fe8:	f04f 34ff 	mov.w	r4, #4294967295
   33fec:	e7ba      	b.n	33f64 <ip_interface_getaddrinfo+0xf0>
   33fee:	2423      	movs	r4, #35	; 0x23
   33ff0:	e7b8      	b.n	33f64 <ip_interface_getaddrinfo+0xf0>
   33ff2:	2470      	movs	r4, #112	; 0x70
   33ff4:	e7f2      	b.n	33fdc <ip_interface_getaddrinfo+0x168>
   33ff6:	2416      	movs	r4, #22
   33ff8:	e7f0      	b.n	33fdc <ip_interface_getaddrinfo+0x168>
   33ffa:	2473      	movs	r4, #115	; 0x73
   33ffc:	e7ee      	b.n	33fdc <ip_interface_getaddrinfo+0x168>
   33ffe:	bf00      	nop
   34000:	20019f38 	.word	0x20019f38
   34004:	20019f3c 	.word	0x20019f3c
   34008:	20020c07 	.word	0x20020c07
   3400c:	2001e0e8 	.word	0x2001e0e8
   34010:	20019f44 	.word	0x20019f44
   34014:	20019f48 	.word	0x20019f48
   34018:	20019f40 	.word	0x20019f40

0003401c <ip_interface_freeaddrinfo>:
   3401c:	b538      	push	{r3, r4, r5, lr}
   3401e:	4d0a      	ldr	r5, [pc, #40]	; (34048 <ip_interface_freeaddrinfo+0x2c>)
   34020:	4604      	mov	r4, r0
   34022:	682a      	ldr	r2, [r5, #0]
   34024:	2a02      	cmp	r2, #2
   34026:	d10e      	bne.n	34046 <ip_interface_freeaddrinfo+0x2a>
   34028:	b148      	cbz	r0, 3403e <ip_interface_freeaddrinfo+0x22>
   3402a:	6940      	ldr	r0, [r0, #20]
   3402c:	f7f5 fb08 	bl	29640 <nrf_modem_os_free>
   34030:	69a0      	ldr	r0, [r4, #24]
   34032:	b108      	cbz	r0, 34038 <ip_interface_freeaddrinfo+0x1c>
   34034:	f7f5 fb04 	bl	29640 <nrf_modem_os_free>
   34038:	4620      	mov	r0, r4
   3403a:	f7f5 fb01 	bl	29640 <nrf_modem_os_free>
   3403e:	2300      	movs	r3, #0
   34040:	4a02      	ldr	r2, [pc, #8]	; (3404c <ip_interface_freeaddrinfo+0x30>)
   34042:	602b      	str	r3, [r5, #0]
   34044:	6013      	str	r3, [r2, #0]
   34046:	bd38      	pop	{r3, r4, r5, pc}
   34048:	20019f44 	.word	0x20019f44
   3404c:	20019f40 	.word	0x20019f40

00034050 <rpc_ip_event_handler>:
   34050:	f248 030d 	movw	r3, #32781	; 0x800d
   34054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34058:	4299      	cmp	r1, r3
   3405a:	4604      	mov	r4, r0
   3405c:	460e      	mov	r6, r1
   3405e:	b089      	sub	sp, #36	; 0x24
   34060:	d038      	beq.n	340d4 <rpc_ip_event_handler+0x84>
   34062:	f248 030f 	movw	r3, #32783	; 0x800f
   34066:	4299      	cmp	r1, r3
   34068:	f000 80c8 	beq.w	341fc <rpc_ip_event_handler+0x1ac>
   3406c:	f401 4310 	and.w	r3, r1, #36864	; 0x9000
   34070:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
   34074:	68c0      	ldr	r0, [r0, #12]
   34076:	f040 80ce 	bne.w	34216 <rpc_ip_event_handler+0x1c6>
   3407a:	f7ff f9db 	bl	33434 <interface_from_internal_id_search>
   3407e:	4607      	mov	r7, r0
   34080:	4638      	mov	r0, r7
   34082:	f7ff f9ef 	bl	33464 <interface_socket_from_handle_get>
   34086:	4605      	mov	r5, r0
   34088:	2800      	cmp	r0, #0
   3408a:	d056      	beq.n	3413a <rpc_ip_event_handler+0xea>
   3408c:	4601      	mov	r1, r0
   3408e:	4633      	mov	r3, r6
   34090:	4622      	mov	r2, r4
   34092:	4638      	mov	r0, r7
   34094:	f000 fd9a 	bl	34bcc <tls_rpc_ip_event_handler>
   34098:	2800      	cmp	r0, #0
   3409a:	f000 80ba 	beq.w	34212 <rpc_ip_event_handler+0x1c2>
   3409e:	f248 030c 	movw	r3, #32780	; 0x800c
   340a2:	429e      	cmp	r6, r3
   340a4:	f200 80b9 	bhi.w	3421a <rpc_ip_event_handler+0x1ca>
   340a8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   340ac:	d945      	bls.n	3413a <rpc_ip_event_handler+0xea>
   340ae:	f5a6 4600 	sub.w	r6, r6, #32768	; 0x8000
   340b2:	3e01      	subs	r6, #1
   340b4:	2e0b      	cmp	r6, #11
   340b6:	d840      	bhi.n	3413a <rpc_ip_event_handler+0xea>
   340b8:	e8df f016 	tbh	[pc, r6, lsl #1]
   340bc:	013e00f1 	.word	0x013e00f1
   340c0:	01f501e6 	.word	0x01f501e6
   340c4:	01b9012f 	.word	0x01b9012f
   340c8:	015d01b9 	.word	0x015d01b9
   340cc:	003f00ff 	.word	0x003f00ff
   340d0:	0188003f 	.word	0x0188003f
   340d4:	4baf      	ldr	r3, [pc, #700]	; (34394 <rpc_ip_event_handler+0x344>)
   340d6:	681a      	ldr	r2, [r3, #0]
   340d8:	9303      	str	r3, [sp, #12]
   340da:	2a01      	cmp	r2, #1
   340dc:	d12d      	bne.n	3413a <rpc_ip_event_handler+0xea>
   340de:	6943      	ldr	r3, [r0, #20]
   340e0:	2b00      	cmp	r3, #0
   340e2:	f040 8083 	bne.w	341ec <rpc_ip_event_handler+0x19c>
   340e6:	f8d0 9018 	ldr.w	r9, [r0, #24]
   340ea:	f8d0 a000 	ldr.w	sl, [r0]
   340ee:	ea4f 1349 	mov.w	r3, r9, lsl #5
   340f2:	4618      	mov	r0, r3
   340f4:	9301      	str	r3, [sp, #4]
   340f6:	f7f5 fa93 	bl	29620 <nrf_modem_os_alloc>
   340fa:	4680      	mov	r8, r0
   340fc:	b310      	cbz	r0, 34144 <rpc_ip_event_handler+0xf4>
   340fe:	2024      	movs	r0, #36	; 0x24
   34100:	fb00 f009 	mul.w	r0, r0, r9
   34104:	f7f5 fa8c 	bl	29620 <nrf_modem_os_alloc>
   34108:	b1f0      	cbz	r0, 34148 <rpc_ip_event_handler+0xf8>
   3410a:	4605      	mov	r5, r0
   3410c:	2704      	movs	r7, #4
   3410e:	eb00 03c9 	add.w	r3, r0, r9, lsl #3
   34112:	f108 0620 	add.w	r6, r8, #32
   34116:	9302      	str	r3, [sp, #8]
   34118:	9b02      	ldr	r3, [sp, #8]
   3411a:	42ab      	cmp	r3, r5
   3411c:	d118      	bne.n	34150 <rpc_ip_event_handler+0x100>
   3411e:	f1b9 0f00 	cmp.w	r9, #0
   34122:	d004      	beq.n	3412e <rpc_ip_event_handler+0xde>
   34124:	2200      	movs	r2, #0
   34126:	9b01      	ldr	r3, [sp, #4]
   34128:	4443      	add	r3, r8
   3412a:	f843 2c04 	str.w	r2, [r3, #-4]
   3412e:	4b9a      	ldr	r3, [pc, #616]	; (34398 <rpc_ip_event_handler+0x348>)
   34130:	f8c3 8000 	str.w	r8, [r3]
   34134:	2302      	movs	r3, #2
   34136:	9a03      	ldr	r2, [sp, #12]
   34138:	6013      	str	r3, [r2, #0]
   3413a:	6820      	ldr	r0, [r4, #0]
   3413c:	2800      	cmp	r0, #0
   3413e:	f040 8173 	bne.w	34428 <rpc_ip_event_handler+0x3d8>
   34142:	e066      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   34144:	f7f5 fa7c 	bl	29640 <nrf_modem_os_free>
   34148:	220c      	movs	r2, #12
   3414a:	4b94      	ldr	r3, [pc, #592]	; (3439c <rpc_ip_event_handler+0x34c>)
   3414c:	601a      	str	r2, [r3, #0]
   3414e:	e7ee      	b.n	3412e <rpc_ip_event_handler+0xde>
   34150:	f85a 3007 	ldr.w	r3, [sl, r7]
   34154:	f846 3c20 	str.w	r3, [r6, #-32]
   34158:	eb0a 0307 	add.w	r3, sl, r7
   3415c:	685a      	ldr	r2, [r3, #4]
   3415e:	f8b3 b012 	ldrh.w	fp, [r3, #18]
   34162:	2a02      	cmp	r2, #2
   34164:	bf0c      	ite	eq
   34166:	220a      	moveq	r2, #10
   34168:	2202      	movne	r2, #2
   3416a:	f846 2c1c 	str.w	r2, [r6, #-28]
   3416e:	4a8c      	ldr	r2, [pc, #560]	; (343a0 <rpc_ip_event_handler+0x350>)
   34170:	3714      	adds	r7, #20
   34172:	6812      	ldr	r2, [r2, #0]
   34174:	eb0a 0107 	add.w	r1, sl, r7
   34178:	f846 2c18 	str.w	r2, [r6, #-24]
   3417c:	4a89      	ldr	r2, [pc, #548]	; (343a4 <rpc_ip_event_handler+0x354>)
   3417e:	6812      	ldr	r2, [r2, #0]
   34180:	f846 2c14 	str.w	r2, [r6, #-20]
   34184:	8a1a      	ldrh	r2, [r3, #16]
   34186:	4b88      	ldr	r3, [pc, #544]	; (343a8 <rpc_ip_event_handler+0x358>)
   34188:	2a04      	cmp	r2, #4
   3418a:	881b      	ldrh	r3, [r3, #0]
   3418c:	f846 2c10 	str.w	r2, [r6, #-16]
   34190:	f846 5c0c 	str.w	r5, [r6, #-12]
   34194:	d122      	bne.n	341dc <rpc_ip_event_handler+0x18c>
   34196:	2002      	movs	r0, #2
   34198:	6068      	str	r0, [r5, #4]
   3419a:	2010      	movs	r0, #16
   3419c:	812b      	strh	r3, [r5, #8]
   3419e:	7028      	strb	r0, [r5, #0]
   341a0:	f105 000c 	add.w	r0, r5, #12
   341a4:	f00d fd7b 	bl	41c9e <memcpy>
   341a8:	f856 3c10 	ldr.w	r3, [r6, #-16]
   341ac:	f10b 0001 	add.w	r0, fp, #1
   341b0:	441f      	add	r7, r3
   341b2:	f7f5 fa35 	bl	29620 <nrf_modem_os_alloc>
   341b6:	f846 0c08 	str.w	r0, [r6, #-8]
   341ba:	b148      	cbz	r0, 341d0 <rpc_ip_event_handler+0x180>
   341bc:	465a      	mov	r2, fp
   341be:	eb0a 0107 	add.w	r1, sl, r7
   341c2:	f00d fd6c 	bl	41c9e <memcpy>
   341c6:	2200      	movs	r2, #0
   341c8:	f856 3c08 	ldr.w	r3, [r6, #-8]
   341cc:	f803 200b 	strb.w	r2, [r3, fp]
   341d0:	f846 6c04 	str.w	r6, [r6, #-4]
   341d4:	445f      	add	r7, fp
   341d6:	3620      	adds	r6, #32
   341d8:	3508      	adds	r5, #8
   341da:	e79d      	b.n	34118 <rpc_ip_event_handler+0xc8>
   341dc:	200a      	movs	r0, #10
   341de:	6068      	str	r0, [r5, #4]
   341e0:	2024      	movs	r0, #36	; 0x24
   341e2:	812b      	strh	r3, [r5, #8]
   341e4:	7028      	strb	r0, [r5, #0]
   341e6:	f105 0010 	add.w	r0, r5, #16
   341ea:	e7db      	b.n	341a4 <rpc_ip_event_handler+0x154>
   341ec:	2b10      	cmp	r3, #16
   341ee:	bf8e      	itee	hi
   341f0:	232d      	movhi	r3, #45	; 0x2d
   341f2:	4a6e      	ldrls	r2, [pc, #440]	; (343ac <rpc_ip_event_handler+0x35c>)
   341f4:	56d3      	ldrsbls	r3, [r2, r3]
   341f6:	4a69      	ldr	r2, [pc, #420]	; (3439c <rpc_ip_event_handler+0x34c>)
   341f8:	6013      	str	r3, [r2, #0]
   341fa:	e79b      	b.n	34134 <rpc_ip_event_handler+0xe4>
   341fc:	6943      	ldr	r3, [r0, #20]
   341fe:	2b10      	cmp	r3, #16
   34200:	bf8e      	itee	hi
   34202:	232d      	movhi	r3, #45	; 0x2d
   34204:	4a69      	ldrls	r2, [pc, #420]	; (343ac <rpc_ip_event_handler+0x35c>)
   34206:	56d3      	ldrsbls	r3, [r2, r3]
   34208:	4a69      	ldr	r2, [pc, #420]	; (343b0 <rpc_ip_event_handler+0x360>)
   3420a:	6013      	str	r3, [r2, #0]
   3420c:	2201      	movs	r2, #1
   3420e:	4b69      	ldr	r3, [pc, #420]	; (343b4 <rpc_ip_event_handler+0x364>)
   34210:	701a      	strb	r2, [r3, #0]
   34212:	2000      	movs	r0, #0
   34214:	e04e      	b.n	342b4 <rpc_ip_event_handler+0x264>
   34216:	0c07      	lsrs	r7, r0, #16
   34218:	e732      	b.n	34080 <rpc_ip_event_handler+0x30>
   3421a:	f249 0302 	movw	r3, #36866	; 0x9002
   3421e:	429e      	cmp	r6, r3
   34220:	f000 80ca 	beq.w	343b8 <rpc_ip_event_handler+0x368>
   34224:	f249 0303 	movw	r3, #36867	; 0x9003
   34228:	429e      	cmp	r6, r3
   3422a:	d055      	beq.n	342d8 <rpc_ip_event_handler+0x288>
   3422c:	f249 0301 	movw	r3, #36865	; 0x9001
   34230:	429e      	cmp	r6, r3
   34232:	d182      	bne.n	3413a <rpc_ip_event_handler+0xea>
   34234:	682e      	ldr	r6, [r5, #0]
   34236:	f416 1680 	ands.w	r6, r6, #1048576	; 0x100000
   3423a:	f000 80f4 	beq.w	34426 <rpc_ip_event_handler+0x3d6>
   3423e:	68a3      	ldr	r3, [r4, #8]
   34240:	2b04      	cmp	r3, #4
   34242:	f240 80ed 	bls.w	34420 <rpc_ip_event_handler+0x3d0>
   34246:	8a66      	ldrh	r6, [r4, #18]
   34248:	2e00      	cmp	r6, #0
   3424a:	f000 80ea 	beq.w	34422 <rpc_ip_event_handler+0x3d2>
   3424e:	2024      	movs	r0, #36	; 0x24
   34250:	f7f5 f9e6 	bl	29620 <nrf_modem_os_alloc>
   34254:	4607      	mov	r7, r0
   34256:	b300      	cbz	r0, 3429a <rpc_ip_event_handler+0x24a>
   34258:	8a62      	ldrh	r2, [r4, #18]
   3425a:	2a10      	cmp	r2, #16
   3425c:	f040 80c9 	bne.w	343f2 <rpc_ip_event_handler+0x3a2>
   34260:	230a      	movs	r3, #10
   34262:	2624      	movs	r6, #36	; 0x24
   34264:	6043      	str	r3, [r0, #4]
   34266:	7006      	strb	r6, [r0, #0]
   34268:	7c61      	ldrb	r1, [r4, #17]
   3426a:	7c23      	ldrb	r3, [r4, #16]
   3426c:	3010      	adds	r0, #16
   3426e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   34272:	f820 3c08 	strh.w	r3, [r0, #-8]
   34276:	f104 0114 	add.w	r1, r4, #20
   3427a:	f00d fd10 	bl	41c9e <memcpy>
   3427e:	6822      	ldr	r2, [r4, #0]
   34280:	69e8      	ldr	r0, [r5, #28]
   34282:	9204      	str	r2, [sp, #16]
   34284:	6803      	ldr	r3, [r0, #0]
   34286:	6862      	ldr	r2, [r4, #4]
   34288:	685b      	ldr	r3, [r3, #4]
   3428a:	e9cd 2705 	strd	r2, r7, [sp, #20]
   3428e:	9607      	str	r6, [sp, #28]
   34290:	a904      	add	r1, sp, #16
   34292:	4798      	blx	r3
   34294:	3001      	adds	r0, #1
   34296:	f040 8094 	bne.w	343c2 <rpc_ip_event_handler+0x372>
   3429a:	2002      	movs	r0, #2
   3429c:	e00a      	b.n	342b4 <rpc_ip_event_handler+0x264>
   3429e:	682b      	ldr	r3, [r5, #0]
   342a0:	2b01      	cmp	r3, #1
   342a2:	d1b6      	bne.n	34212 <rpc_ip_event_handler+0x1c2>
   342a4:	6960      	ldr	r0, [r4, #20]
   342a6:	2800      	cmp	r0, #0
   342a8:	f040 80f8 	bne.w	3449c <rpc_ip_event_handler+0x44c>
   342ac:	2302      	movs	r3, #2
   342ae:	602b      	str	r3, [r5, #0]
   342b0:	69a3      	ldr	r3, [r4, #24]
   342b2:	61ab      	str	r3, [r5, #24]
   342b4:	b009      	add	sp, #36	; 0x24
   342b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   342ba:	682b      	ldr	r3, [r5, #0]
   342bc:	b29b      	uxth	r3, r3
   342be:	2b0d      	cmp	r3, #13
   342c0:	d1a7      	bne.n	34212 <rpc_ip_event_handler+0x1c2>
   342c2:	6960      	ldr	r0, [r4, #20]
   342c4:	2800      	cmp	r0, #0
   342c6:	f040 80e9 	bne.w	3449c <rpc_ip_event_handler+0x44c>
   342ca:	682b      	ldr	r3, [r5, #0]
   342cc:	0c1b      	lsrs	r3, r3, #16
   342ce:	041b      	lsls	r3, r3, #16
   342d0:	f043 030e 	orr.w	r3, r3, #14
   342d4:	602b      	str	r3, [r5, #0]
   342d6:	e7ed      	b.n	342b4 <rpc_ip_event_handler+0x264>
   342d8:	682b      	ldr	r3, [r5, #0]
   342da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   342de:	602b      	str	r3, [r5, #0]
   342e0:	682b      	ldr	r3, [r5, #0]
   342e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   342e6:	602b      	str	r3, [r5, #0]
   342e8:	682b      	ldr	r3, [r5, #0]
   342ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   342ee:	602b      	str	r3, [r5, #0]
   342f0:	682b      	ldr	r3, [r5, #0]
   342f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   342f6:	602b      	str	r3, [r5, #0]
   342f8:	6923      	ldr	r3, [r4, #16]
   342fa:	2b6c      	cmp	r3, #108	; 0x6c
   342fc:	d107      	bne.n	3430e <rpc_ip_event_handler+0x2be>
   342fe:	682b      	ldr	r3, [r5, #0]
   34300:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
   34304:	602b      	str	r3, [r5, #0]
   34306:	2339      	movs	r3, #57	; 0x39
   34308:	606b      	str	r3, [r5, #4]
   3430a:	60ab      	str	r3, [r5, #8]
   3430c:	e781      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   3430e:	2b10      	cmp	r3, #16
   34310:	bf96      	itet	ls
   34312:	4a26      	ldrls	r2, [pc, #152]	; (343ac <rpc_ip_event_handler+0x35c>)
   34314:	232d      	movhi	r3, #45	; 0x2d
   34316:	56d3      	ldrsbls	r3, [r2, r3]
   34318:	e7f6      	b.n	34308 <rpc_ip_event_handler+0x2b8>
   3431a:	682b      	ldr	r3, [r5, #0]
   3431c:	b29b      	uxth	r3, r3
   3431e:	2b03      	cmp	r3, #3
   34320:	f47f af77 	bne.w	34212 <rpc_ip_event_handler+0x1c2>
   34324:	6960      	ldr	r0, [r4, #20]
   34326:	2800      	cmp	r0, #0
   34328:	f040 80b8 	bne.w	3449c <rpc_ip_event_handler+0x44c>
   3432c:	682b      	ldr	r3, [r5, #0]
   3432e:	0c1b      	lsrs	r3, r3, #16
   34330:	041b      	lsls	r3, r3, #16
   34332:	f043 0304 	orr.w	r3, r3, #4
   34336:	e7cd      	b.n	342d4 <rpc_ip_event_handler+0x284>
   34338:	682b      	ldr	r3, [r5, #0]
   3433a:	0098      	lsls	r0, r3, #2
   3433c:	f57f af69 	bpl.w	34212 <rpc_ip_event_handler+0x1c2>
   34340:	682b      	ldr	r3, [r5, #0]
   34342:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   34346:	602b      	str	r3, [r5, #0]
   34348:	6960      	ldr	r0, [r4, #20]
   3434a:	b968      	cbnz	r0, 34368 <rpc_ip_event_handler+0x318>
   3434c:	682b      	ldr	r3, [r5, #0]
   3434e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34352:	602b      	str	r3, [r5, #0]
   34354:	682b      	ldr	r3, [r5, #0]
   34356:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   3435a:	602b      	str	r3, [r5, #0]
   3435c:	682b      	ldr	r3, [r5, #0]
   3435e:	0c1b      	lsrs	r3, r3, #16
   34360:	041b      	lsls	r3, r3, #16
   34362:	f043 0305 	orr.w	r3, r3, #5
   34366:	e7b5      	b.n	342d4 <rpc_ip_event_handler+0x284>
   34368:	2810      	cmp	r0, #16
   3436a:	f200 808b 	bhi.w	34484 <rpc_ip_event_handler+0x434>
   3436e:	4b0f      	ldr	r3, [pc, #60]	; (343ac <rpc_ip_event_handler+0x35c>)
   34370:	561b      	ldrsb	r3, [r3, r0]
   34372:	606b      	str	r3, [r5, #4]
   34374:	e076      	b.n	34464 <rpc_ip_event_handler+0x414>
   34376:	682b      	ldr	r3, [r5, #0]
   34378:	b29b      	uxth	r3, r3
   3437a:	2b06      	cmp	r3, #6
   3437c:	f47f af49 	bne.w	34212 <rpc_ip_event_handler+0x1c2>
   34380:	6960      	ldr	r0, [r4, #20]
   34382:	2800      	cmp	r0, #0
   34384:	f040 808a 	bne.w	3449c <rpc_ip_event_handler+0x44c>
   34388:	682b      	ldr	r3, [r5, #0]
   3438a:	0c1b      	lsrs	r3, r3, #16
   3438c:	041b      	lsls	r3, r3, #16
   3438e:	f043 0307 	orr.w	r3, r3, #7
   34392:	e79f      	b.n	342d4 <rpc_ip_event_handler+0x284>
   34394:	20019f44 	.word	0x20019f44
   34398:	20019f48 	.word	0x20019f48
   3439c:	20019f40 	.word	0x20019f40
   343a0:	20019f3c 	.word	0x20019f3c
   343a4:	20019f38 	.word	0x20019f38
   343a8:	2001e0e8 	.word	0x2001e0e8
   343ac:	0004b586 	.word	0x0004b586
   343b0:	20019f70 	.word	0x20019f70
   343b4:	20020c08 	.word	0x20020c08
   343b8:	682b      	ldr	r3, [r5, #0]
   343ba:	b29b      	uxth	r3, r3
   343bc:	2b07      	cmp	r3, #7
   343be:	f47f af28 	bne.w	34212 <rpc_ip_event_handler+0x1c2>
   343c2:	682b      	ldr	r3, [r5, #0]
   343c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   343c8:	602b      	str	r3, [r5, #0]
   343ca:	e722      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   343cc:	682b      	ldr	r3, [r5, #0]
   343ce:	b29b      	uxth	r3, r3
   343d0:	2b08      	cmp	r3, #8
   343d2:	f47f af1e 	bne.w	34212 <rpc_ip_event_handler+0x1c2>
   343d6:	6963      	ldr	r3, [r4, #20]
   343d8:	2b00      	cmp	r3, #0
   343da:	d174      	bne.n	344c6 <rpc_ip_event_handler+0x476>
   343dc:	4b3d      	ldr	r3, [pc, #244]	; (344d4 <rpc_ip_event_handler+0x484>)
   343de:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   343e2:	682b      	ldr	r3, [r5, #0]
   343e4:	0c1b      	lsrs	r3, r3, #16
   343e6:	041b      	lsls	r3, r3, #16
   343e8:	f043 0309 	orr.w	r3, r3, #9
   343ec:	602b      	str	r3, [r5, #0]
   343ee:	2001      	movs	r0, #1
   343f0:	e760      	b.n	342b4 <rpc_ip_event_handler+0x264>
   343f2:	2a04      	cmp	r2, #4
   343f4:	d10d      	bne.n	34412 <rpc_ip_event_handler+0x3c2>
   343f6:	2302      	movs	r3, #2
   343f8:	2610      	movs	r6, #16
   343fa:	6043      	str	r3, [r0, #4]
   343fc:	7006      	strb	r6, [r0, #0]
   343fe:	7c61      	ldrb	r1, [r4, #17]
   34400:	7c23      	ldrb	r3, [r4, #16]
   34402:	300c      	adds	r0, #12
   34404:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   34408:	f820 3c04 	strh.w	r3, [r0, #-4]
   3440c:	f104 0114 	add.w	r1, r4, #20
   34410:	e733      	b.n	3427a <rpc_ip_event_handler+0x22a>
   34412:	6820      	ldr	r0, [r4, #0]
   34414:	f00c f863 	bl	404de <rpc_ip_client_data_free>
   34418:	4638      	mov	r0, r7
   3441a:	f7f5 f911 	bl	29640 <nrf_modem_os_free>
   3441e:	e6f8      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   34420:	2600      	movs	r6, #0
   34422:	4637      	mov	r7, r6
   34424:	e72b      	b.n	3427e <rpc_ip_event_handler+0x22e>
   34426:	6820      	ldr	r0, [r4, #0]
   34428:	f00c f859 	bl	404de <rpc_ip_client_data_free>
   3442c:	e6f1      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   3442e:	682b      	ldr	r3, [r5, #0]
   34430:	0299      	lsls	r1, r3, #10
   34432:	f57f aeee 	bpl.w	34212 <rpc_ip_event_handler+0x1c2>
   34436:	6963      	ldr	r3, [r4, #20]
   34438:	b93b      	cbnz	r3, 3444a <rpc_ip_event_handler+0x3fa>
   3443a:	682b      	ldr	r3, [r5, #0]
   3443c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34440:	602b      	str	r3, [r5, #0]
   34442:	4b24      	ldr	r3, [pc, #144]	; (344d4 <rpc_ip_event_handler+0x484>)
   34444:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   34448:	e7d1      	b.n	343ee <rpc_ip_event_handler+0x39e>
   3444a:	2b6b      	cmp	r3, #107	; 0x6b
   3444c:	d10e      	bne.n	3446c <rpc_ip_event_handler+0x41c>
   3444e:	692b      	ldr	r3, [r5, #16]
   34450:	220c      	movs	r2, #12
   34452:	2b01      	cmp	r3, #1
   34454:	d105      	bne.n	34462 <rpc_ip_event_handler+0x412>
   34456:	682b      	ldr	r3, [r5, #0]
   34458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   3445c:	602b      	str	r3, [r5, #0]
   3445e:	606a      	str	r2, [r5, #4]
   34460:	e6d7      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   34462:	606a      	str	r2, [r5, #4]
   34464:	682b      	ldr	r3, [r5, #0]
   34466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   3446a:	e7ad      	b.n	343c8 <rpc_ip_event_handler+0x378>
   3446c:	f023 0202 	bic.w	r2, r3, #2
   34470:	2a01      	cmp	r2, #1
   34472:	d102      	bne.n	3447a <rpc_ip_event_handler+0x42a>
   34474:	230c      	movs	r3, #12
   34476:	606b      	str	r3, [r5, #4]
   34478:	e6cb      	b.n	34212 <rpc_ip_event_handler+0x1c2>
   3447a:	2b10      	cmp	r3, #16
   3447c:	d802      	bhi.n	34484 <rpc_ip_event_handler+0x434>
   3447e:	4a16      	ldr	r2, [pc, #88]	; (344d8 <rpc_ip_event_handler+0x488>)
   34480:	56d3      	ldrsb	r3, [r2, r3]
   34482:	e776      	b.n	34372 <rpc_ip_event_handler+0x322>
   34484:	232d      	movs	r3, #45	; 0x2d
   34486:	e774      	b.n	34372 <rpc_ip_event_handler+0x322>
   34488:	682b      	ldr	r3, [r5, #0]
   3448a:	025a      	lsls	r2, r3, #9
   3448c:	f57f aec1 	bpl.w	34212 <rpc_ip_event_handler+0x1c2>
   34490:	6960      	ldr	r0, [r4, #20]
   34492:	b918      	cbnz	r0, 3449c <rpc_ip_event_handler+0x44c>
   34494:	682b      	ldr	r3, [r5, #0]
   34496:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
   3449a:	e71b      	b.n	342d4 <rpc_ip_event_handler+0x284>
   3449c:	2810      	cmp	r0, #16
   3449e:	d817      	bhi.n	344d0 <rpc_ip_event_handler+0x480>
   344a0:	4b0d      	ldr	r3, [pc, #52]	; (344d8 <rpc_ip_event_handler+0x488>)
   344a2:	561b      	ldrsb	r3, [r3, r0]
   344a4:	e7e7      	b.n	34476 <rpc_ip_event_handler+0x426>
   344a6:	682b      	ldr	r3, [r5, #0]
   344a8:	01db      	lsls	r3, r3, #7
   344aa:	f57f aeb2 	bpl.w	34212 <rpc_ip_event_handler+0x1c2>
   344ae:	6963      	ldr	r3, [r4, #20]
   344b0:	b94b      	cbnz	r3, 344c6 <rpc_ip_event_handler+0x476>
   344b2:	6820      	ldr	r0, [r4, #0]
   344b4:	b118      	cbz	r0, 344be <rpc_ip_event_handler+0x46e>
   344b6:	2001      	movs	r0, #1
   344b8:	4b06      	ldr	r3, [pc, #24]	; (344d4 <rpc_ip_event_handler+0x484>)
   344ba:	f843 4027 	str.w	r4, [r3, r7, lsl #2]
   344be:	682b      	ldr	r3, [r5, #0]
   344c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   344c4:	e706      	b.n	342d4 <rpc_ip_event_handler+0x284>
   344c6:	2b10      	cmp	r3, #16
   344c8:	d802      	bhi.n	344d0 <rpc_ip_event_handler+0x480>
   344ca:	4a03      	ldr	r2, [pc, #12]	; (344d8 <rpc_ip_event_handler+0x488>)
   344cc:	56d3      	ldrsb	r3, [r2, r3]
   344ce:	e7d2      	b.n	34476 <rpc_ip_event_handler+0x426>
   344d0:	232d      	movs	r3, #45	; 0x2d
   344d2:	e7d0      	b.n	34476 <rpc_ip_event_handler+0x426>
   344d4:	20019f4c 	.word	0x20019f4c
   344d8:	0004b586 	.word	0x0004b586

000344dc <hostname_free>:
   344dc:	b538      	push	{r3, r4, r5, lr}
   344de:	4c07      	ldr	r4, [pc, #28]	; (344fc <hostname_free+0x20>)
   344e0:	4605      	mov	r5, r0
   344e2:	f854 0030 	ldr.w	r0, [r4, r0, lsl #3]
   344e6:	b138      	cbz	r0, 344f8 <hostname_free+0x1c>
   344e8:	f7f5 f8aa 	bl	29640 <nrf_modem_os_free>
   344ec:	2300      	movs	r3, #0
   344ee:	f844 3035 	str.w	r3, [r4, r5, lsl #3]
   344f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   344f6:	6063      	str	r3, [r4, #4]
   344f8:	bd38      	pop	{r3, r4, r5, pc}
   344fa:	bf00      	nop
   344fc:	20019f74 	.word	0x20019f74

00034500 <secure_socket_attach_initiate>:
   34500:	f04f 33ff 	mov.w	r3, #4294967295
   34504:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   34508:	f8df 808c 	ldr.w	r8, [pc, #140]	; 34598 <secure_socket_attach_initiate+0x98>
   3450c:	9301      	str	r3, [sp, #4]
   3450e:	eb08 09c0 	add.w	r9, r8, r0, lsl #3
   34512:	460c      	mov	r4, r1
   34514:	4616      	mov	r6, r2
   34516:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3451a:	f247 0281 	movw	r2, #28801	; 0x7081
   3451e:	6989      	ldr	r1, [r1, #24]
   34520:	4607      	mov	r7, r0
   34522:	f00c f9cf 	bl	408c4 <ip_interface_request_create>
   34526:	4605      	mov	r5, r0
   34528:	b378      	cbz	r0, 3458a <secure_socket_attach_initiate+0x8a>
   3452a:	f8d9 2004 	ldr.w	r2, [r9, #4]
   3452e:	b122      	cbz	r2, 3453a <secure_socket_attach_initiate+0x3a>
   34530:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
   34534:	6800      	ldr	r0, [r0, #0]
   34536:	f00d fbb2 	bl	41c9e <memcpy>
   3453a:	2224      	movs	r2, #36	; 0x24
   3453c:	4915      	ldr	r1, [pc, #84]	; (34594 <secure_socket_attach_initiate+0x94>)
   3453e:	f105 0014 	add.w	r0, r5, #20
   34542:	fb02 1107 	mla	r1, r2, r7, r1
   34546:	f00d fbaa 	bl	41c9e <memcpy>
   3454a:	68ab      	ldr	r3, [r5, #8]
   3454c:	f247 0281 	movw	r2, #28801	; 0x7081
   34550:	3324      	adds	r3, #36	; 0x24
   34552:	60ab      	str	r3, [r5, #8]
   34554:	6823      	ldr	r3, [r4, #0]
   34556:	4629      	mov	r1, r5
   34558:	0c1b      	lsrs	r3, r3, #16
   3455a:	041b      	lsls	r3, r3, #16
   3455c:	f043 030a 	orr.w	r3, r3, #10
   34560:	6023      	str	r3, [r4, #0]
   34562:	4620      	mov	r0, r4
   34564:	4633      	mov	r3, r6
   34566:	f00c f9c5 	bl	408f4 <ip_interface_request_send>
   3456a:	b958      	cbnz	r0, 34584 <secure_socket_attach_initiate+0x84>
   3456c:	6823      	ldr	r3, [r4, #0]
   3456e:	00db      	lsls	r3, r3, #3
   34570:	d40d      	bmi.n	3458e <secure_socket_attach_initiate+0x8e>
   34572:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34576:	210b      	movs	r1, #11
   34578:	4638      	mov	r0, r7
   3457a:	ab01      	add	r3, sp, #4
   3457c:	f00c f9cd 	bl	4091a <ip_interface_wait>
   34580:	b100      	cbz	r0, 34584 <secure_socket_attach_initiate+0x84>
   34582:	6026      	str	r6, [r4, #0]
   34584:	b003      	add	sp, #12
   34586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3458a:	200c      	movs	r0, #12
   3458c:	e7fa      	b.n	34584 <secure_socket_attach_initiate+0x84>
   3458e:	2073      	movs	r0, #115	; 0x73
   34590:	e7f8      	b.n	34584 <secure_socket_attach_initiate+0x84>
   34592:	bf00      	nop
   34594:	20020c0a 	.word	0x20020c0a
   34598:	20019f74 	.word	0x20019f74

0003459c <tls_interface_init>:
   3459c:	2201      	movs	r2, #1
   3459e:	4b02      	ldr	r3, [pc, #8]	; (345a8 <tls_interface_init+0xc>)
   345a0:	2000      	movs	r0, #0
   345a2:	701a      	strb	r2, [r3, #0]
   345a4:	4770      	bx	lr
   345a6:	bf00      	nop
   345a8:	20020c09 	.word	0x20020c09

000345ac <tls_interface_deinit>:
   345ac:	2000      	movs	r0, #0
   345ae:	4b01      	ldr	r3, [pc, #4]	; (345b4 <tls_interface_deinit+0x8>)
   345b0:	7018      	strb	r0, [r3, #0]
   345b2:	4770      	bx	lr
   345b4:	20020c09 	.word	0x20020c09

000345b8 <tls_interface_open>:
   345b8:	b538      	push	{r3, r4, r5, lr}
   345ba:	4b1e      	ldr	r3, [pc, #120]	; (34634 <tls_interface_open+0x7c>)
   345bc:	4615      	mov	r5, r2
   345be:	781b      	ldrb	r3, [r3, #0]
   345c0:	b92b      	cbnz	r3, 345ce <tls_interface_open+0x16>
   345c2:	2070      	movs	r0, #112	; 0x70
   345c4:	f7f4 fe80 	bl	292c8 <nrf_modem_os_errno_set>
   345c8:	f04f 34ff 	mov.w	r4, #4294967295
   345cc:	e02b      	b.n	34626 <tls_interface_open+0x6e>
   345ce:	1e4b      	subs	r3, r1, #1
   345d0:	2b01      	cmp	r3, #1
   345d2:	d809      	bhi.n	345e8 <tls_interface_open+0x30>
   345d4:	b952      	cbnz	r2, 345ec <tls_interface_open+0x34>
   345d6:	2901      	cmp	r1, #1
   345d8:	bf0b      	itete	eq
   345da:	2201      	moveq	r2, #1
   345dc:	2202      	movne	r2, #2
   345de:	f44f 7582 	moveq.w	r5, #260	; 0x104
   345e2:	f44f 7587 	movne.w	r5, #270	; 0x10e
   345e6:	e007      	b.n	345f8 <tls_interface_open+0x40>
   345e8:	2029      	movs	r0, #41	; 0x29
   345ea:	e7eb      	b.n	345c4 <tls_interface_open+0xc>
   345ec:	2901      	cmp	r1, #1
   345ee:	d11c      	bne.n	3462a <tls_interface_open+0x72>
   345f0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   345f4:	d1f8      	bne.n	345e8 <tls_interface_open+0x30>
   345f6:	460a      	mov	r2, r1
   345f8:	f7ff f838 	bl	3366c <ip_interface_open>
   345fc:	1e04      	subs	r4, r0, #0
   345fe:	dbe3      	blt.n	345c8 <tls_interface_open+0x10>
   34600:	2224      	movs	r2, #36	; 0x24
   34602:	480d      	ldr	r0, [pc, #52]	; (34638 <tls_interface_open+0x80>)
   34604:	490d      	ldr	r1, [pc, #52]	; (3463c <tls_interface_open+0x84>)
   34606:	fb02 0004 	mla	r0, r2, r4, r0
   3460a:	f00d fb48 	bl	41c9e <memcpy>
   3460e:	4620      	mov	r0, r4
   34610:	f7fe ff28 	bl	33464 <interface_socket_from_handle_get>
   34614:	6803      	ldr	r3, [r0, #0]
   34616:	6145      	str	r5, [r0, #20]
   34618:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   3461c:	6003      	str	r3, [r0, #0]
   3461e:	6803      	ldr	r3, [r0, #0]
   34620:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   34624:	6003      	str	r3, [r0, #0]
   34626:	4620      	mov	r0, r4
   34628:	bd38      	pop	{r3, r4, r5, pc}
   3462a:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   3462e:	d1db      	bne.n	345e8 <tls_interface_open+0x30>
   34630:	2202      	movs	r2, #2
   34632:	e7e1      	b.n	345f8 <tls_interface_open+0x40>
   34634:	20020c09 	.word	0x20020c09
   34638:	20020c0a 	.word	0x20020c0a
   3463c:	0004b597 	.word	0x0004b597

00034640 <tls_interface_sendto>:
   34640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34644:	b085      	sub	sp, #20
   34646:	4606      	mov	r6, r0
   34648:	4691      	mov	r9, r2
   3464a:	461f      	mov	r7, r3
   3464c:	9103      	str	r1, [sp, #12]
   3464e:	f7fe ff09 	bl	33464 <interface_socket_from_handle_get>
   34652:	4605      	mov	r5, r0
   34654:	2800      	cmp	r0, #0
   34656:	d06c      	beq.n	34732 <tls_interface_sendto+0xf2>
   34658:	f04f 0a24 	mov.w	sl, #36	; 0x24
   3465c:	07bb      	lsls	r3, r7, #30
   3465e:	bf48      	it	mi
   34660:	2300      	movmi	r3, #0
   34662:	f04f 0400 	mov.w	r4, #0
   34666:	f04f 3bff 	mov.w	fp, #4294967295
   3466a:	bf58      	it	pl
   3466c:	6803      	ldrpl	r3, [r0, #0]
   3466e:	fb0a fa06 	mul.w	sl, sl, r6
   34672:	bf5c      	itt	pl
   34674:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   34678:	f3c3 7300 	ubfxpl	r3, r3, #28, #1
   3467c:	9302      	str	r3, [sp, #8]
   3467e:	6829      	ldr	r1, [r5, #0]
   34680:	eba9 0804 	sub.w	r8, r9, r4
   34684:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
   34688:	b289      	uxth	r1, r1
   3468a:	bfa8      	it	ge
   3468c:	f44f 6800 	movge.w	r8, #2048	; 0x800
   34690:	290c      	cmp	r1, #12
   34692:	d110      	bne.n	346b6 <tls_interface_sendto+0x76>
   34694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   34696:	9903      	ldr	r1, [sp, #12]
   34698:	9301      	str	r3, [sp, #4]
   3469a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3469c:	4642      	mov	r2, r8
   3469e:	9300      	str	r3, [sp, #0]
   346a0:	4630      	mov	r0, r6
   346a2:	463b      	mov	r3, r7
   346a4:	4421      	add	r1, r4
   346a6:	f7ff f8af 	bl	33808 <ip_interface_sendto>
   346aa:	f1b0 0b00 	subs.w	fp, r0, #0
   346ae:	da32      	bge.n	34716 <tls_interface_sendto+0xd6>
   346b0:	f04f 34ff 	mov.w	r4, #4294967295
   346b4:	e034      	b.n	34720 <tls_interface_sendto+0xe0>
   346b6:	6829      	ldr	r1, [r5, #0]
   346b8:	b289      	uxth	r1, r1
   346ba:	290b      	cmp	r1, #11
   346bc:	d109      	bne.n	346d2 <tls_interface_sendto+0x92>
   346be:	4b22      	ldr	r3, [pc, #136]	; (34748 <tls_interface_sendto+0x108>)
   346c0:	f813 200a 	ldrb.w	r2, [r3, sl]
   346c4:	2a02      	cmp	r2, #2
   346c6:	d036      	beq.n	34736 <tls_interface_sendto+0xf6>
   346c8:	692a      	ldr	r2, [r5, #16]
   346ca:	2a01      	cmp	r2, #1
   346cc:	d135      	bne.n	3473a <tls_interface_sendto+0xfa>
   346ce:	202a      	movs	r0, #42	; 0x2a
   346d0:	e02c      	b.n	3472c <tls_interface_sendto+0xec>
   346d2:	4628      	mov	r0, r5
   346d4:	f00c fbf0 	bl	40eb8 <attach_trigger_condition_verify>
   346d8:	b398      	cbz	r0, 34742 <tls_interface_sendto+0x102>
   346da:	4b1b      	ldr	r3, [pc, #108]	; (34748 <tls_interface_sendto+0x108>)
   346dc:	f813 100a 	ldrb.w	r1, [r3, sl]
   346e0:	2902      	cmp	r1, #2
   346e2:	d110      	bne.n	34706 <tls_interface_sendto+0xc6>
   346e4:	4629      	mov	r1, r5
   346e6:	4630      	mov	r0, r6
   346e8:	f00c fbfd 	bl	40ee6 <secure_client_socket>
   346ec:	b970      	cbnz	r0, 3470c <tls_interface_sendto+0xcc>
   346ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   346f0:	9903      	ldr	r1, [sp, #12]
   346f2:	9301      	str	r3, [sp, #4]
   346f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   346f6:	4642      	mov	r2, r8
   346f8:	9300      	str	r3, [sp, #0]
   346fa:	4630      	mov	r0, r6
   346fc:	463b      	mov	r3, r7
   346fe:	4421      	add	r1, r4
   34700:	f7ff f882 	bl	33808 <ip_interface_sendto>
   34704:	4683      	mov	fp, r0
   34706:	f1bb 0f00 	cmp.w	fp, #0
   3470a:	e7d0      	b.n	346ae <tls_interface_sendto+0x6e>
   3470c:	f1bb 3fff 	cmp.w	fp, #4294967295
   34710:	d00a      	beq.n	34728 <tls_interface_sendto+0xe8>
   34712:	2800      	cmp	r0, #0
   34714:	dc0a      	bgt.n	3472c <tls_interface_sendto+0xec>
   34716:	9b02      	ldr	r3, [sp, #8]
   34718:	445c      	add	r4, fp
   3471a:	b10b      	cbz	r3, 34720 <tls_interface_sendto+0xe0>
   3471c:	45a1      	cmp	r9, r4
   3471e:	dcae      	bgt.n	3467e <tls_interface_sendto+0x3e>
   34720:	4620      	mov	r0, r4
   34722:	b005      	add	sp, #20
   34724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34728:	2800      	cmp	r0, #0
   3472a:	ddc1      	ble.n	346b0 <tls_interface_sendto+0x70>
   3472c:	f7f4 fdcc 	bl	292c8 <nrf_modem_os_errno_set>
   34730:	e7be      	b.n	346b0 <tls_interface_sendto+0x70>
   34732:	2009      	movs	r0, #9
   34734:	e7fa      	b.n	3472c <tls_interface_sendto+0xec>
   34736:	2023      	movs	r0, #35	; 0x23
   34738:	e7f8      	b.n	3472c <tls_interface_sendto+0xec>
   3473a:	f1bb 3fff 	cmp.w	fp, #4294967295
   3473e:	d1ea      	bne.n	34716 <tls_interface_sendto+0xd6>
   34740:	e7b6      	b.n	346b0 <tls_interface_sendto+0x70>
   34742:	2039      	movs	r0, #57	; 0x39
   34744:	e7f2      	b.n	3472c <tls_interface_sendto+0xec>
   34746:	bf00      	nop
   34748:	20020c0a 	.word	0x20020c0a

0003474c <tls_interface_recvfrom>:
   3474c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3474e:	460d      	mov	r5, r1
   34750:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
   34754:	4604      	mov	r4, r0
   34756:	e9cd 3200 	strd	r3, r2, [sp]
   3475a:	f7fe fe83 	bl	33464 <interface_socket_from_handle_get>
   3475e:	4601      	mov	r1, r0
   34760:	b388      	cbz	r0, 347c6 <tls_interface_recvfrom+0x7a>
   34762:	e9dd 3200 	ldrd	r3, r2, [sp]
   34766:	f8d0 c000 	ldr.w	ip, [r0]
   3476a:	fa1f fc8c 	uxth.w	ip, ip
   3476e:	f1bc 0f0c 	cmp.w	ip, #12
   34772:	d006      	beq.n	34782 <tls_interface_recvfrom+0x36>
   34774:	f8d0 c000 	ldr.w	ip, [r0]
   34778:	fa1f fc8c 	uxth.w	ip, ip
   3477c:	f1bc 0f0d 	cmp.w	ip, #13
   34780:	d108      	bne.n	34794 <tls_interface_recvfrom+0x48>
   34782:	4629      	mov	r1, r5
   34784:	4620      	mov	r0, r4
   34786:	e9cd 6708 	strd	r6, r7, [sp, #32]
   3478a:	b003      	add	sp, #12
   3478c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   34790:	f00c b8d3 	b.w	4093a <ip_interface_recvfrom>
   34794:	e9cd 2300 	strd	r2, r3, [sp]
   34798:	f00c fb8e 	bl	40eb8 <attach_trigger_condition_verify>
   3479c:	b1b8      	cbz	r0, 347ce <tls_interface_recvfrom+0x82>
   3479e:	2024      	movs	r0, #36	; 0x24
   347a0:	4360      	muls	r0, r4
   347a2:	f8df c030 	ldr.w	ip, [pc, #48]	; 347d4 <tls_interface_recvfrom+0x88>
   347a6:	f81c 0000 	ldrb.w	r0, [ip, r0]
   347aa:	2802      	cmp	r0, #2
   347ac:	d10f      	bne.n	347ce <tls_interface_recvfrom+0x82>
   347ae:	4620      	mov	r0, r4
   347b0:	f00c fb99 	bl	40ee6 <secure_client_socket>
   347b4:	e9dd 2300 	ldrd	r2, r3, [sp]
   347b8:	2800      	cmp	r0, #0
   347ba:	d0e2      	beq.n	34782 <tls_interface_recvfrom+0x36>
   347bc:	dc04      	bgt.n	347c8 <tls_interface_recvfrom+0x7c>
   347be:	f04f 30ff 	mov.w	r0, #4294967295
   347c2:	b003      	add	sp, #12
   347c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   347c6:	2009      	movs	r0, #9
   347c8:	f7f4 fd7e 	bl	292c8 <nrf_modem_os_errno_set>
   347cc:	e7f7      	b.n	347be <tls_interface_recvfrom+0x72>
   347ce:	2023      	movs	r0, #35	; 0x23
   347d0:	e7fa      	b.n	347c8 <tls_interface_recvfrom+0x7c>
   347d2:	bf00      	nop
   347d4:	20020c0a 	.word	0x20020c0a

000347d8 <tls_interface_bind>:
   347d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   347da:	4604      	mov	r4, r0
   347dc:	e9cd 2100 	strd	r2, r1, [sp]
   347e0:	f7fe fe40 	bl	33464 <interface_socket_from_handle_get>
   347e4:	4605      	mov	r5, r0
   347e6:	b1e0      	cbz	r0, 34822 <tls_interface_bind+0x4a>
   347e8:	6803      	ldr	r3, [r0, #0]
   347ea:	b29b      	uxth	r3, r3
   347ec:	2b02      	cmp	r3, #2
   347ee:	d11a      	bne.n	34826 <tls_interface_bind+0x4e>
   347f0:	e9dd 2100 	ldrd	r2, r1, [sp]
   347f4:	4620      	mov	r0, r4
   347f6:	f7ff f9a7 	bl	33b48 <ip_interface_bind>
   347fa:	b950      	cbnz	r0, 34812 <tls_interface_bind+0x3a>
   347fc:	2324      	movs	r3, #36	; 0x24
   347fe:	4363      	muls	r3, r4
   34800:	4a0a      	ldr	r2, [pc, #40]	; (3482c <tls_interface_bind+0x54>)
   34802:	5cd3      	ldrb	r3, [r2, r3]
   34804:	2b01      	cmp	r3, #1
   34806:	d10a      	bne.n	3481e <tls_interface_bind+0x46>
   34808:	2204      	movs	r2, #4
   3480a:	4629      	mov	r1, r5
   3480c:	4620      	mov	r0, r4
   3480e:	f7ff fe77 	bl	34500 <secure_socket_attach_initiate>
   34812:	2800      	cmp	r0, #0
   34814:	dd03      	ble.n	3481e <tls_interface_bind+0x46>
   34816:	f7f4 fd57 	bl	292c8 <nrf_modem_os_errno_set>
   3481a:	f04f 30ff 	mov.w	r0, #4294967295
   3481e:	b003      	add	sp, #12
   34820:	bd30      	pop	{r4, r5, pc}
   34822:	2009      	movs	r0, #9
   34824:	e7f7      	b.n	34816 <tls_interface_bind+0x3e>
   34826:	202d      	movs	r0, #45	; 0x2d
   34828:	e7f5      	b.n	34816 <tls_interface_bind+0x3e>
   3482a:	bf00      	nop
   3482c:	20020c0a 	.word	0x20020c0a

00034830 <tls_interface_connect>:
   34830:	b537      	push	{r0, r1, r2, r4, r5, lr}
   34832:	4605      	mov	r5, r0
   34834:	e9cd 2100 	strd	r2, r1, [sp]
   34838:	f7fe fe14 	bl	33464 <interface_socket_from_handle_get>
   3483c:	4604      	mov	r4, r0
   3483e:	b1f8      	cbz	r0, 34880 <tls_interface_connect+0x50>
   34840:	2324      	movs	r3, #36	; 0x24
   34842:	436b      	muls	r3, r5
   34844:	4810      	ldr	r0, [pc, #64]	; (34888 <tls_interface_connect+0x58>)
   34846:	5cc3      	ldrb	r3, [r0, r3]
   34848:	2b02      	cmp	r3, #2
   3484a:	d11b      	bne.n	34884 <tls_interface_connect+0x54>
   3484c:	e9dd 2100 	ldrd	r2, r1, [sp]
   34850:	6823      	ldr	r3, [r4, #0]
   34852:	b29b      	uxth	r3, r3
   34854:	2b02      	cmp	r3, #2
   34856:	d003      	beq.n	34860 <tls_interface_connect+0x30>
   34858:	6823      	ldr	r3, [r4, #0]
   3485a:	b29b      	uxth	r3, r3
   3485c:	2b04      	cmp	r3, #4
   3485e:	d111      	bne.n	34884 <tls_interface_connect+0x54>
   34860:	4628      	mov	r0, r5
   34862:	f00c f972 	bl	40b4a <ip_interface_connect>
   34866:	b918      	cbnz	r0, 34870 <tls_interface_connect+0x40>
   34868:	4621      	mov	r1, r4
   3486a:	4628      	mov	r0, r5
   3486c:	f00c fb3b 	bl	40ee6 <secure_client_socket>
   34870:	2800      	cmp	r0, #0
   34872:	dd03      	ble.n	3487c <tls_interface_connect+0x4c>
   34874:	f7f4 fd28 	bl	292c8 <nrf_modem_os_errno_set>
   34878:	f04f 30ff 	mov.w	r0, #4294967295
   3487c:	b003      	add	sp, #12
   3487e:	bd30      	pop	{r4, r5, pc}
   34880:	2009      	movs	r0, #9
   34882:	e7f7      	b.n	34874 <tls_interface_connect+0x44>
   34884:	202d      	movs	r0, #45	; 0x2d
   34886:	e7f5      	b.n	34874 <tls_interface_connect+0x44>
   34888:	20020c0a 	.word	0x20020c0a

0003488c <tls_interface_listen>:
   3488c:	b538      	push	{r3, r4, r5, lr}
   3488e:	4604      	mov	r4, r0
   34890:	460d      	mov	r5, r1
   34892:	f7fe fde7 	bl	33464 <interface_socket_from_handle_get>
   34896:	2800      	cmp	r0, #0
   34898:	d034      	beq.n	34904 <tls_interface_listen+0x78>
   3489a:	6803      	ldr	r3, [r0, #0]
   3489c:	00db      	lsls	r3, r3, #3
   3489e:	d433      	bmi.n	34908 <tls_interface_listen+0x7c>
   348a0:	6903      	ldr	r3, [r0, #16]
   348a2:	2b01      	cmp	r3, #1
   348a4:	d130      	bne.n	34908 <tls_interface_listen+0x7c>
   348a6:	6803      	ldr	r3, [r0, #0]
   348a8:	b29b      	uxth	r3, r3
   348aa:	2b04      	cmp	r3, #4
   348ac:	d105      	bne.n	348ba <tls_interface_listen+0x2e>
   348ae:	2324      	movs	r3, #36	; 0x24
   348b0:	4363      	muls	r3, r4
   348b2:	4a16      	ldr	r2, [pc, #88]	; (3490c <tls_interface_listen+0x80>)
   348b4:	5cd3      	ldrb	r3, [r2, r3]
   348b6:	2b02      	cmp	r3, #2
   348b8:	d009      	beq.n	348ce <tls_interface_listen+0x42>
   348ba:	6803      	ldr	r3, [r0, #0]
   348bc:	b29b      	uxth	r3, r3
   348be:	2b0b      	cmp	r3, #11
   348c0:	d122      	bne.n	34908 <tls_interface_listen+0x7c>
   348c2:	2324      	movs	r3, #36	; 0x24
   348c4:	4363      	muls	r3, r4
   348c6:	4a11      	ldr	r2, [pc, #68]	; (3490c <tls_interface_listen+0x80>)
   348c8:	5cd3      	ldrb	r3, [r2, r3]
   348ca:	2b01      	cmp	r3, #1
   348cc:	d11c      	bne.n	34908 <tls_interface_listen+0x7c>
   348ce:	2324      	movs	r3, #36	; 0x24
   348d0:	2101      	movs	r1, #1
   348d2:	4363      	muls	r3, r4
   348d4:	4a0d      	ldr	r2, [pc, #52]	; (3490c <tls_interface_listen+0x80>)
   348d6:	54d1      	strb	r1, [r2, r3]
   348d8:	6803      	ldr	r3, [r0, #0]
   348da:	2b0b      	cmp	r3, #11
   348dc:	d10a      	bne.n	348f4 <tls_interface_listen+0x68>
   348de:	4629      	mov	r1, r5
   348e0:	4620      	mov	r0, r4
   348e2:	f7ff f993 	bl	33c0c <ip_interface_listen>
   348e6:	2800      	cmp	r0, #0
   348e8:	dd03      	ble.n	348f2 <tls_interface_listen+0x66>
   348ea:	f7f4 fced 	bl	292c8 <nrf_modem_os_errno_set>
   348ee:	f04f 30ff 	mov.w	r0, #4294967295
   348f2:	bd38      	pop	{r3, r4, r5, pc}
   348f4:	4601      	mov	r1, r0
   348f6:	6802      	ldr	r2, [r0, #0]
   348f8:	4620      	mov	r0, r4
   348fa:	f7ff fe01 	bl	34500 <secure_socket_attach_initiate>
   348fe:	2800      	cmp	r0, #0
   34900:	d0ed      	beq.n	348de <tls_interface_listen+0x52>
   34902:	e7f0      	b.n	348e6 <tls_interface_listen+0x5a>
   34904:	2009      	movs	r0, #9
   34906:	e7f0      	b.n	348ea <tls_interface_listen+0x5e>
   34908:	202d      	movs	r0, #45	; 0x2d
   3490a:	e7ee      	b.n	348ea <tls_interface_listen+0x5e>
   3490c:	20020c0a 	.word	0x20020c0a

00034910 <tls_interface_accept>:
   34910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   34914:	b086      	sub	sp, #24
   34916:	4606      	mov	r6, r0
   34918:	f04f 34ff 	mov.w	r4, #4294967295
   3491c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   34920:	9301      	str	r3, [sp, #4]
   34922:	f7fe fd9f 	bl	33464 <interface_socket_from_handle_get>
   34926:	9405      	str	r4, [sp, #20]
   34928:	2800      	cmp	r0, #0
   3492a:	d048      	beq.n	349be <tls_interface_accept+0xae>
   3492c:	6805      	ldr	r5, [r0, #0]
   3492e:	b2ad      	uxth	r5, r5
   34930:	2d07      	cmp	r5, #7
   34932:	d144      	bne.n	349be <tls_interface_accept+0xae>
   34934:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   34938:	6800      	ldr	r0, [r0, #0]
   3493a:	9903      	ldr	r1, [sp, #12]
   3493c:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
   34940:	d006      	beq.n	34950 <tls_interface_accept+0x40>
   34942:	202d      	movs	r0, #45	; 0x2d
   34944:	f7f4 fcc0 	bl	292c8 <nrf_modem_os_errno_set>
   34948:	4620      	mov	r0, r4
   3494a:	b006      	add	sp, #24
   3494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34950:	4630      	mov	r0, r6
   34952:	f7ff f9ad 	bl	33cb0 <ip_interface_accept>
   34956:	1e04      	subs	r4, r0, #0
   34958:	db2b      	blt.n	349b2 <tls_interface_accept+0xa2>
   3495a:	f7fe fd83 	bl	33464 <interface_socket_from_handle_get>
   3495e:	2224      	movs	r2, #36	; 0x24
   34960:	6803      	ldr	r3, [r0, #0]
   34962:	fb02 f804 	mul.w	r8, r2, r4
   34966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   3496a:	6003      	str	r3, [r0, #0]
   3496c:	6803      	ldr	r3, [r0, #0]
   3496e:	4f15      	ldr	r7, [pc, #84]	; (349c4 <tls_interface_accept+0xb4>)
   34970:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   34974:	4605      	mov	r5, r0
   34976:	fb02 7106 	mla	r1, r2, r6, r7
   3497a:	6003      	str	r3, [r0, #0]
   3497c:	eb07 0008 	add.w	r0, r7, r8
   34980:	f00d f98d 	bl	41c9e <memcpy>
   34984:	2302      	movs	r3, #2
   34986:	f807 3008 	strb.w	r3, [r7, r8]
   3498a:	682b      	ldr	r3, [r5, #0]
   3498c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   34990:	0c1b      	lsrs	r3, r3, #16
   34992:	041b      	lsls	r3, r3, #16
   34994:	f043 030b 	orr.w	r3, r3, #11
   34998:	602b      	str	r3, [r5, #0]
   3499a:	210c      	movs	r1, #12
   3499c:	4620      	mov	r0, r4
   3499e:	ab05      	add	r3, sp, #20
   349a0:	f00b ffbb 	bl	4091a <ip_interface_wait>
   349a4:	4605      	mov	r5, r0
   349a6:	2800      	cmp	r0, #0
   349a8:	d0ce      	beq.n	34948 <tls_interface_accept+0x38>
   349aa:	4620      	mov	r0, r4
   349ac:	f7fe fee2 	bl	33774 <ip_interface_close>
   349b0:	462c      	mov	r4, r5
   349b2:	4620      	mov	r0, r4
   349b4:	f7f4 fc88 	bl	292c8 <nrf_modem_os_errno_set>
   349b8:	f04f 34ff 	mov.w	r4, #4294967295
   349bc:	e7c4      	b.n	34948 <tls_interface_accept+0x38>
   349be:	2409      	movs	r4, #9
   349c0:	e7f7      	b.n	349b2 <tls_interface_accept+0xa2>
   349c2:	bf00      	nop
   349c4:	20020c0a 	.word	0x20020c0a

000349c8 <tls_interface_setopt>:
   349c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   349ca:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   349ce:	4606      	mov	r6, r0
   349d0:	4614      	mov	r4, r2
   349d2:	461f      	mov	r7, r3
   349d4:	9d08      	ldr	r5, [sp, #32]
   349d6:	d004      	beq.n	349e2 <tls_interface_setopt+0x1a>
   349d8:	b003      	add	sp, #12
   349da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   349de:	f00c b9b1 	b.w	40d44 <ip_interface_setopt>
   349e2:	b92b      	cbnz	r3, 349f0 <tls_interface_setopt+0x28>
   349e4:	200e      	movs	r0, #14
   349e6:	f7f4 fc6f 	bl	292c8 <nrf_modem_os_errno_set>
   349ea:	f04f 30ff 	mov.w	r0, #4294967295
   349ee:	e021      	b.n	34a34 <tls_interface_setopt+0x6c>
   349f0:	f7fe fd38 	bl	33464 <interface_socket_from_handle_get>
   349f4:	4601      	mov	r1, r0
   349f6:	2800      	cmp	r0, #0
   349f8:	d06d      	beq.n	34ad6 <tls_interface_setopt+0x10e>
   349fa:	6803      	ldr	r3, [r0, #0]
   349fc:	b29b      	uxth	r3, r3
   349fe:	2b02      	cmp	r3, #2
   34a00:	d007      	beq.n	34a12 <tls_interface_setopt+0x4a>
   34a02:	6803      	ldr	r3, [r0, #0]
   34a04:	b29b      	uxth	r3, r3
   34a06:	2b04      	cmp	r3, #4
   34a08:	d003      	beq.n	34a12 <tls_interface_setopt+0x4a>
   34a0a:	6803      	ldr	r3, [r0, #0]
   34a0c:	b29b      	uxth	r3, r3
   34a0e:	2b05      	cmp	r3, #5
   34a10:	d161      	bne.n	34ad6 <tls_interface_setopt+0x10e>
   34a12:	1e62      	subs	r2, r4, #1
   34a14:	2a05      	cmp	r2, #5
   34a16:	d860      	bhi.n	34ada <tls_interface_setopt+0x112>
   34a18:	e8df f002 	tbb	[pc, r2]
   34a1c:	34162203 	.word	0x34162203
   34a20:	513f      	.short	0x513f
   34a22:	2d04      	cmp	r5, #4
   34a24:	d15b      	bne.n	34ade <tls_interface_setopt+0x116>
   34a26:	6838      	ldr	r0, [r7, #0]
   34a28:	b930      	cbnz	r0, 34a38 <tls_interface_setopt+0x70>
   34a2a:	2324      	movs	r3, #36	; 0x24
   34a2c:	2202      	movs	r2, #2
   34a2e:	435e      	muls	r6, r3
   34a30:	4b2d      	ldr	r3, [pc, #180]	; (34ae8 <tls_interface_setopt+0x120>)
   34a32:	559a      	strb	r2, [r3, r6]
   34a34:	b003      	add	sp, #12
   34a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34a38:	2801      	cmp	r0, #1
   34a3a:	d150      	bne.n	34ade <tls_interface_setopt+0x116>
   34a3c:	2324      	movs	r3, #36	; 0x24
   34a3e:	435e      	muls	r6, r3
   34a40:	4b29      	ldr	r3, [pc, #164]	; (34ae8 <tls_interface_setopt+0x120>)
   34a42:	5598      	strb	r0, [r3, r6]
   34a44:	2000      	movs	r0, #0
   34a46:	e7f5      	b.n	34a34 <tls_interface_setopt+0x6c>
   34a48:	2d01      	cmp	r5, #1
   34a4a:	d148      	bne.n	34ade <tls_interface_setopt+0x116>
   34a4c:	2024      	movs	r0, #36	; 0x24
   34a4e:	783b      	ldrb	r3, [r7, #0]
   34a50:	4a25      	ldr	r2, [pc, #148]	; (34ae8 <tls_interface_setopt+0x120>)
   34a52:	3b00      	subs	r3, #0
   34a54:	bf18      	it	ne
   34a56:	2301      	movne	r3, #1
   34a58:	fb00 2606 	mla	r6, r0, r6, r2
   34a5c:	7073      	strb	r3, [r6, #1]
   34a5e:	e7f1      	b.n	34a44 <tls_interface_setopt+0x7c>
   34a60:	2d03      	cmp	r5, #3
   34a62:	d93c      	bls.n	34ade <tls_interface_setopt+0x116>
   34a64:	f015 0403 	ands.w	r4, r5, #3
   34a68:	d139      	bne.n	34ade <tls_interface_setopt+0x116>
   34a6a:	2324      	movs	r3, #36	; 0x24
   34a6c:	435e      	muls	r6, r3
   34a6e:	481e      	ldr	r0, [pc, #120]	; (34ae8 <tls_interface_setopt+0x120>)
   34a70:	08aa      	lsrs	r2, r5, #2
   34a72:	1983      	adds	r3, r0, r6
   34a74:	70da      	strb	r2, [r3, #3]
   34a76:	4639      	mov	r1, r7
   34a78:	462a      	mov	r2, r5
   34a7a:	3604      	adds	r6, #4
   34a7c:	4430      	add	r0, r6
   34a7e:	f00d f90e 	bl	41c9e <memcpy>
   34a82:	e7df      	b.n	34a44 <tls_interface_setopt+0x7c>
   34a84:	2d04      	cmp	r5, #4
   34a86:	d12a      	bne.n	34ade <tls_interface_setopt+0x116>
   34a88:	683b      	ldr	r3, [r7, #0]
   34a8a:	2b02      	cmp	r3, #2
   34a8c:	d827      	bhi.n	34ade <tls_interface_setopt+0x116>
   34a8e:	2024      	movs	r0, #36	; 0x24
   34a90:	4a15      	ldr	r2, [pc, #84]	; (34ae8 <tls_interface_setopt+0x120>)
   34a92:	fb00 2606 	mla	r6, r0, r6, r2
   34a96:	70b3      	strb	r3, [r6, #2]
   34a98:	e7d4      	b.n	34a44 <tls_interface_setopt+0x7c>
   34a9a:	4630      	mov	r0, r6
   34a9c:	f7ff fd1e 	bl	344dc <hostname_free>
   34aa0:	2d00      	cmp	r5, #0
   34aa2:	d0cf      	beq.n	34a44 <tls_interface_setopt+0x7c>
   34aa4:	4628      	mov	r0, r5
   34aa6:	f7f4 fdbb 	bl	29620 <nrf_modem_os_alloc>
   34aaa:	4b10      	ldr	r3, [pc, #64]	; (34aec <tls_interface_setopt+0x124>)
   34aac:	f843 0036 	str.w	r0, [r3, r6, lsl #3]
   34ab0:	b1b8      	cbz	r0, 34ae2 <tls_interface_setopt+0x11a>
   34ab2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   34ab6:	462a      	mov	r2, r5
   34ab8:	4639      	mov	r1, r7
   34aba:	6075      	str	r5, [r6, #4]
   34abc:	e7df      	b.n	34a7e <tls_interface_setopt+0xb6>
   34abe:	f247 0301 	movw	r3, #28673	; 0x7001
   34ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
   34ac6:	4630      	mov	r0, r6
   34ac8:	e9cd 7500 	strd	r7, r5, [sp]
   34acc:	f00c f8d2 	bl	40c74 <ip_interface_socketoption_send>
   34ad0:	2800      	cmp	r0, #0
   34ad2:	d0b7      	beq.n	34a44 <tls_interface_setopt+0x7c>
   34ad4:	e787      	b.n	349e6 <tls_interface_setopt+0x1e>
   34ad6:	2009      	movs	r0, #9
   34ad8:	e785      	b.n	349e6 <tls_interface_setopt+0x1e>
   34ada:	202a      	movs	r0, #42	; 0x2a
   34adc:	e783      	b.n	349e6 <tls_interface_setopt+0x1e>
   34ade:	2016      	movs	r0, #22
   34ae0:	e781      	b.n	349e6 <tls_interface_setopt+0x1e>
   34ae2:	200c      	movs	r0, #12
   34ae4:	e77f      	b.n	349e6 <tls_interface_setopt+0x1e>
   34ae6:	bf00      	nop
   34ae8:	20020c0a 	.word	0x20020c0a
   34aec:	20019f74 	.word	0x20019f74

00034af0 <tls_interface_getopt>:
   34af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   34af2:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   34af6:	4604      	mov	r4, r0
   34af8:	4617      	mov	r7, r2
   34afa:	461d      	mov	r5, r3
   34afc:	9e08      	ldr	r6, [sp, #32]
   34afe:	d004      	beq.n	34b0a <tls_interface_getopt+0x1a>
   34b00:	b003      	add	sp, #12
   34b02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   34b06:	f00c b990 	b.w	40e2a <ip_interface_getopt>
   34b0a:	2b00      	cmp	r3, #0
   34b0c:	d054      	beq.n	34bb8 <tls_interface_getopt+0xc8>
   34b0e:	2e00      	cmp	r6, #0
   34b10:	d052      	beq.n	34bb8 <tls_interface_getopt+0xc8>
   34b12:	f7fe fca7 	bl	33464 <interface_socket_from_handle_get>
   34b16:	4601      	mov	r1, r0
   34b18:	2800      	cmp	r0, #0
   34b1a:	d04f      	beq.n	34bbc <tls_interface_getopt+0xcc>
   34b1c:	1e7a      	subs	r2, r7, #1
   34b1e:	2a05      	cmp	r2, #5
   34b20:	d84e      	bhi.n	34bc0 <tls_interface_getopt+0xd0>
   34b22:	e8df f002 	tbb	[pc, r2]
   34b26:	1b03      	.short	0x1b03
   34b28:	3f4d360f 	.word	0x3f4d360f
   34b2c:	6833      	ldr	r3, [r6, #0]
   34b2e:	2b04      	cmp	r3, #4
   34b30:	d148      	bne.n	34bc4 <tls_interface_getopt+0xd4>
   34b32:	2024      	movs	r0, #36	; 0x24
   34b34:	4344      	muls	r4, r0
   34b36:	4b24      	ldr	r3, [pc, #144]	; (34bc8 <tls_interface_getopt+0xd8>)
   34b38:	5d1b      	ldrb	r3, [r3, r4]
   34b3a:	1e59      	subs	r1, r3, #1
   34b3c:	424b      	negs	r3, r1
   34b3e:	414b      	adcs	r3, r1
   34b40:	602b      	str	r3, [r5, #0]
   34b42:	e008      	b.n	34b56 <tls_interface_getopt+0x66>
   34b44:	6833      	ldr	r3, [r6, #0]
   34b46:	2b01      	cmp	r3, #1
   34b48:	d13c      	bne.n	34bc4 <tls_interface_getopt+0xd4>
   34b4a:	2024      	movs	r0, #36	; 0x24
   34b4c:	491e      	ldr	r1, [pc, #120]	; (34bc8 <tls_interface_getopt+0xd8>)
   34b4e:	fb00 1404 	mla	r4, r0, r4, r1
   34b52:	7863      	ldrb	r3, [r4, #1]
   34b54:	702b      	strb	r3, [r5, #0]
   34b56:	2000      	movs	r0, #0
   34b58:	b003      	add	sp, #12
   34b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34b5c:	2224      	movs	r2, #36	; 0x24
   34b5e:	491a      	ldr	r1, [pc, #104]	; (34bc8 <tls_interface_getopt+0xd8>)
   34b60:	6833      	ldr	r3, [r6, #0]
   34b62:	fb02 1204 	mla	r2, r2, r4, r1
   34b66:	78d0      	ldrb	r0, [r2, #3]
   34b68:	079a      	lsls	r2, r3, #30
   34b6a:	bf14      	ite	ne
   34b6c:	2300      	movne	r3, #0
   34b6e:	089b      	lsreq	r3, r3, #2
   34b70:	4283      	cmp	r3, r0
   34b72:	bf28      	it	cs
   34b74:	4603      	movcs	r3, r0
   34b76:	009a      	lsls	r2, r3, #2
   34b78:	b143      	cbz	r3, 34b8c <tls_interface_getopt+0x9c>
   34b7a:	2024      	movs	r0, #36	; 0x24
   34b7c:	fb00 1104 	mla	r1, r0, r4, r1
   34b80:	6032      	str	r2, [r6, #0]
   34b82:	4628      	mov	r0, r5
   34b84:	3104      	adds	r1, #4
   34b86:	f00d f88a 	bl	41c9e <memcpy>
   34b8a:	e7e4      	b.n	34b56 <tls_interface_getopt+0x66>
   34b8c:	b9d0      	cbnz	r0, 34bc4 <tls_interface_getopt+0xd4>
   34b8e:	6030      	str	r0, [r6, #0]
   34b90:	e7e2      	b.n	34b58 <tls_interface_getopt+0x68>
   34b92:	6833      	ldr	r3, [r6, #0]
   34b94:	2b04      	cmp	r3, #4
   34b96:	d115      	bne.n	34bc4 <tls_interface_getopt+0xd4>
   34b98:	2024      	movs	r0, #36	; 0x24
   34b9a:	490b      	ldr	r1, [pc, #44]	; (34bc8 <tls_interface_getopt+0xd8>)
   34b9c:	fb00 1404 	mla	r4, r0, r4, r1
   34ba0:	78a3      	ldrb	r3, [r4, #2]
   34ba2:	e7cd      	b.n	34b40 <tls_interface_getopt+0x50>
   34ba4:	f247 0301 	movw	r3, #28673	; 0x7001
   34ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
   34bac:	4620      	mov	r0, r4
   34bae:	e9cd 5600 	strd	r5, r6, [sp]
   34bb2:	f7fe ff49 	bl	33a48 <ip_interface_socketoption_get>
   34bb6:	e7cf      	b.n	34b58 <tls_interface_getopt+0x68>
   34bb8:	200e      	movs	r0, #14
   34bba:	e7cd      	b.n	34b58 <tls_interface_getopt+0x68>
   34bbc:	2009      	movs	r0, #9
   34bbe:	e7cb      	b.n	34b58 <tls_interface_getopt+0x68>
   34bc0:	202a      	movs	r0, #42	; 0x2a
   34bc2:	e7c9      	b.n	34b58 <tls_interface_getopt+0x68>
   34bc4:	2016      	movs	r0, #22
   34bc6:	e7c7      	b.n	34b58 <tls_interface_getopt+0x68>
   34bc8:	20020c0a 	.word	0x20020c0a

00034bcc <tls_rpc_ip_event_handler>:
   34bcc:	b570      	push	{r4, r5, r6, lr}
   34bce:	460c      	mov	r4, r1
   34bd0:	f248 0181 	movw	r1, #32897	; 0x8081
   34bd4:	428b      	cmp	r3, r1
   34bd6:	4606      	mov	r6, r0
   34bd8:	d035      	beq.n	34c46 <tls_rpc_ip_event_handler+0x7a>
   34bda:	f249 0182 	movw	r1, #36994	; 0x9082
   34bde:	428b      	cmp	r3, r1
   34be0:	d040      	beq.n	34c64 <tls_rpc_ip_event_handler+0x98>
   34be2:	f248 0102 	movw	r1, #32770	; 0x8002
   34be6:	428b      	cmp	r3, r1
   34be8:	d161      	bne.n	34cae <tls_rpc_ip_event_handler+0xe2>
   34bea:	2c00      	cmp	r4, #0
   34bec:	d05f      	beq.n	34cae <tls_rpc_ip_event_handler+0xe2>
   34bee:	6963      	ldr	r3, [r4, #20]
   34bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
   34bf4:	d002      	beq.n	34bfc <tls_rpc_ip_event_handler+0x30>
   34bf6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
   34bfa:	d158      	bne.n	34cae <tls_rpc_ip_event_handler+0xe2>
   34bfc:	6823      	ldr	r3, [r4, #0]
   34bfe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
   34c02:	6023      	str	r3, [r4, #0]
   34c04:	6955      	ldr	r5, [r2, #20]
   34c06:	2d00      	cmp	r5, #0
   34c08:	d14d      	bne.n	34ca6 <tls_rpc_ip_event_handler+0xda>
   34c0a:	6823      	ldr	r3, [r4, #0]
   34c0c:	0c1b      	lsrs	r3, r3, #16
   34c0e:	041b      	lsls	r3, r3, #16
   34c10:	f043 0305 	orr.w	r3, r3, #5
   34c14:	6023      	str	r3, [r4, #0]
   34c16:	6823      	ldr	r3, [r4, #0]
   34c18:	00db      	lsls	r3, r3, #3
   34c1a:	d401      	bmi.n	34c20 <tls_rpc_ip_event_handler+0x54>
   34c1c:	2000      	movs	r0, #0
   34c1e:	e020      	b.n	34c62 <tls_rpc_ip_event_handler+0x96>
   34c20:	2324      	movs	r3, #36	; 0x24
   34c22:	4373      	muls	r3, r6
   34c24:	4a23      	ldr	r2, [pc, #140]	; (34cb4 <tls_rpc_ip_event_handler+0xe8>)
   34c26:	5cd3      	ldrb	r3, [r2, r3]
   34c28:	2b02      	cmp	r3, #2
   34c2a:	d1f7      	bne.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c2c:	4621      	mov	r1, r4
   34c2e:	4630      	mov	r0, r6
   34c30:	f00c f959 	bl	40ee6 <secure_client_socket>
   34c34:	2800      	cmp	r0, #0
   34c36:	d0f1      	beq.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c38:	2873      	cmp	r0, #115	; 0x73
   34c3a:	d0ef      	beq.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c3c:	6060      	str	r0, [r4, #4]
   34c3e:	6823      	ldr	r3, [r4, #0]
   34c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   34c44:	e02d      	b.n	34ca2 <tls_rpc_ip_event_handler+0xd6>
   34c46:	2c00      	cmp	r4, #0
   34c48:	d0e8      	beq.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c4a:	6823      	ldr	r3, [r4, #0]
   34c4c:	b29b      	uxth	r3, r3
   34c4e:	2b0a      	cmp	r3, #10
   34c50:	d1e4      	bne.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c52:	6950      	ldr	r0, [r2, #20]
   34c54:	bb40      	cbnz	r0, 34ca8 <tls_rpc_ip_event_handler+0xdc>
   34c56:	6823      	ldr	r3, [r4, #0]
   34c58:	0c1b      	lsrs	r3, r3, #16
   34c5a:	041b      	lsls	r3, r3, #16
   34c5c:	f043 030b 	orr.w	r3, r3, #11
   34c60:	6023      	str	r3, [r4, #0]
   34c62:	bd70      	pop	{r4, r5, r6, pc}
   34c64:	2c00      	cmp	r4, #0
   34c66:	d0d9      	beq.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c68:	6823      	ldr	r3, [r4, #0]
   34c6a:	b29b      	uxth	r3, r3
   34c6c:	2b0b      	cmp	r3, #11
   34c6e:	d1d5      	bne.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34c70:	6915      	ldr	r5, [r2, #16]
   34c72:	b9c5      	cbnz	r5, 34ca6 <tls_rpc_ip_event_handler+0xda>
   34c74:	6823      	ldr	r3, [r4, #0]
   34c76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   34c7a:	6023      	str	r3, [r4, #0]
   34c7c:	f7ff fc2e 	bl	344dc <hostname_free>
   34c80:	6823      	ldr	r3, [r4, #0]
   34c82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   34c86:	6023      	str	r3, [r4, #0]
   34c88:	6823      	ldr	r3, [r4, #0]
   34c8a:	0c1b      	lsrs	r3, r3, #16
   34c8c:	041b      	lsls	r3, r3, #16
   34c8e:	f043 030c 	orr.w	r3, r3, #12
   34c92:	6023      	str	r3, [r4, #0]
   34c94:	6823      	ldr	r3, [r4, #0]
   34c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34c9a:	6023      	str	r3, [r4, #0]
   34c9c:	6823      	ldr	r3, [r4, #0]
   34c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   34ca2:	6023      	str	r3, [r4, #0]
   34ca4:	e7ba      	b.n	34c1c <tls_rpc_ip_event_handler+0x50>
   34ca6:	4628      	mov	r0, r5
   34ca8:	f7fe fcba 	bl	33620 <rpc_error_to_nrf_errno>
   34cac:	e7c6      	b.n	34c3c <tls_rpc_ip_event_handler+0x70>
   34cae:	2001      	movs	r0, #1
   34cb0:	e7d7      	b.n	34c62 <tls_rpc_ip_event_handler+0x96>
   34cb2:	bf00      	nop
   34cb4:	20020c0a 	.word	0x20020c0a

00034cb8 <at_interface_init>:
   34cb8:	2201      	movs	r2, #1
   34cba:	4b02      	ldr	r3, [pc, #8]	; (34cc4 <at_interface_init+0xc>)
   34cbc:	2000      	movs	r0, #0
   34cbe:	701a      	strb	r2, [r3, #0]
   34cc0:	4770      	bx	lr
   34cc2:	bf00      	nop
   34cc4:	20020d4e 	.word	0x20020d4e

00034cc8 <at_interface_deinit>:
   34cc8:	2000      	movs	r0, #0
   34cca:	4b01      	ldr	r3, [pc, #4]	; (34cd0 <at_interface_deinit+0x8>)
   34ccc:	7018      	strb	r0, [r3, #0]
   34cce:	4770      	bx	lr
   34cd0:	20020d4e 	.word	0x20020d4e

00034cd4 <at_interface_open>:
   34cd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   34cd8:	f04f 0800 	mov.w	r8, #0
   34cdc:	4b19      	ldr	r3, [pc, #100]	; (34d44 <at_interface_open+0x70>)
   34cde:	4607      	mov	r7, r0
   34ce0:	781b      	ldrb	r3, [r3, #0]
   34ce2:	460d      	mov	r5, r1
   34ce4:	4616      	mov	r6, r2
   34ce6:	f8cd 800c 	str.w	r8, [sp, #12]
   34cea:	b943      	cbnz	r3, 34cfe <at_interface_open+0x2a>
   34cec:	2070      	movs	r0, #112	; 0x70
   34cee:	f7f4 faeb 	bl	292c8 <nrf_modem_os_errno_set>
   34cf2:	f04f 34ff 	mov.w	r4, #4294967295
   34cf6:	4620      	mov	r0, r4
   34cf8:	b004      	add	sp, #16
   34cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   34cfe:	2902      	cmp	r1, #2
   34d00:	d001      	beq.n	34d06 <at_interface_open+0x32>
   34d02:	2029      	movs	r0, #41	; 0x29
   34d04:	e7f3      	b.n	34cee <at_interface_open+0x1a>
   34d06:	4a10      	ldr	r2, [pc, #64]	; (34d48 <at_interface_open+0x74>)
   34d08:	a803      	add	r0, sp, #12
   34d0a:	f7fe fb21 	bl	33350 <interface_socket_allocate>
   34d0e:	9b03      	ldr	r3, [sp, #12]
   34d10:	4604      	mov	r4, r0
   34d12:	2b00      	cmp	r3, #0
   34d14:	d0ef      	beq.n	34cf6 <at_interface_open+0x22>
   34d16:	e9c3 7503 	strd	r7, r5, [r3, #12]
   34d1a:	615e      	str	r6, [r3, #20]
   34d1c:	4642      	mov	r2, r8
   34d1e:	9500      	str	r5, [sp, #0]
   34d20:	2305      	movs	r3, #5
   34d22:	4641      	mov	r1, r8
   34d24:	f00c f93d 	bl	40fa2 <send_message>
   34d28:	4605      	mov	r5, r0
   34d2a:	b120      	cbz	r0, 34d36 <at_interface_open+0x62>
   34d2c:	4620      	mov	r0, r4
   34d2e:	f7fe fb35 	bl	3339c <interface_socket_free>
   34d32:	4628      	mov	r0, r5
   34d34:	e7db      	b.n	34cee <at_interface_open+0x1a>
   34d36:	9a03      	ldr	r2, [sp, #12]
   34d38:	6813      	ldr	r3, [r2, #0]
   34d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   34d3e:	6013      	str	r3, [r2, #0]
   34d40:	e7d9      	b.n	34cf6 <at_interface_open+0x22>
   34d42:	bf00      	nop
   34d44:	20020d4e 	.word	0x20020d4e
   34d48:	00040f7d 	.word	0x00040f7d

00034d4c <rpc_dfu_message_send>:
   34d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   34d4e:	4605      	mov	r5, r0
   34d50:	460e      	mov	r6, r1
   34d52:	4668      	mov	r0, sp
   34d54:	4611      	mov	r1, r2
   34d56:	4614      	mov	r4, r2
   34d58:	f00b fbcd 	bl	404f6 <rpc_dfu_client_request_alloc>
   34d5c:	b138      	cbz	r0, 34d6e <rpc_dfu_message_send+0x22>
   34d5e:	200c      	movs	r0, #12
   34d60:	f7f4 fab2 	bl	292c8 <nrf_modem_os_errno_set>
   34d64:	f04f 34ff 	mov.w	r4, #4294967295
   34d68:	4620      	mov	r0, r4
   34d6a:	b002      	add	sp, #8
   34d6c:	bd70      	pop	{r4, r5, r6, pc}
   34d6e:	b12c      	cbz	r4, 34d7c <rpc_dfu_message_send+0x30>
   34d70:	9b00      	ldr	r3, [sp, #0]
   34d72:	4622      	mov	r2, r4
   34d74:	4631      	mov	r1, r6
   34d76:	6818      	ldr	r0, [r3, #0]
   34d78:	f00c ff91 	bl	41c9e <memcpy>
   34d7c:	4a1c      	ldr	r2, [pc, #112]	; (34df0 <rpc_dfu_message_send+0xa4>)
   34d7e:	9800      	ldr	r0, [sp, #0]
   34d80:	8813      	ldrh	r3, [r2, #0]
   34d82:	2d03      	cmp	r5, #3
   34d84:	f103 0301 	add.w	r3, r3, #1
   34d88:	b29b      	uxth	r3, r3
   34d8a:	8013      	strh	r3, [r2, #0]
   34d8c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   34d90:	60c3      	str	r3, [r0, #12]
   34d92:	f04f 0300 	mov.w	r3, #0
   34d96:	bf0a      	itet	eq
   34d98:	4a16      	ldreq	r2, [pc, #88]	; (34df4 <rpc_dfu_message_send+0xa8>)
   34d9a:	2204      	movne	r2, #4
   34d9c:	6812      	ldreq	r2, [r2, #0]
   34d9e:	7243      	strb	r3, [r0, #9]
   34da0:	bf04      	itt	eq
   34da2:	6102      	streq	r2, [r0, #16]
   34da4:	2208      	moveq	r2, #8
   34da6:	7283      	strb	r3, [r0, #10]
   34da8:	72c3      	strb	r3, [r0, #11]
   34daa:	2300      	movs	r3, #0
   34dac:	4e12      	ldr	r6, [pc, #72]	; (34df8 <rpc_dfu_message_send+0xac>)
   34dae:	6044      	str	r4, [r0, #4]
   34db0:	4629      	mov	r1, r5
   34db2:	7202      	strb	r2, [r0, #8]
   34db4:	6033      	str	r3, [r6, #0]
   34db6:	f00b fbb0 	bl	4051a <rpc_dfu_client_request_send>
   34dba:	4604      	mov	r4, r0
   34dbc:	b140      	cbz	r0, 34dd0 <rpc_dfu_message_send+0x84>
   34dbe:	9b00      	ldr	r3, [sp, #0]
   34dc0:	6818      	ldr	r0, [r3, #0]
   34dc2:	b108      	cbz	r0, 34dc8 <rpc_dfu_message_send+0x7c>
   34dc4:	f00b fbc3 	bl	4054e <rpc_dfu_client_data_free>
   34dc8:	9800      	ldr	r0, [sp, #0]
   34dca:	f00b fbb8 	bl	4053e <rpc_dfu_client_message_free>
   34dce:	e7c6      	b.n	34d5e <rpc_dfu_message_send+0x12>
   34dd0:	f04f 33ff 	mov.w	r3, #4294967295
   34dd4:	4d09      	ldr	r5, [pc, #36]	; (34dfc <rpc_dfu_message_send+0xb0>)
   34dd6:	9301      	str	r3, [sp, #4]
   34dd8:	6833      	ldr	r3, [r6, #0]
   34dda:	2b00      	cmp	r3, #0
   34ddc:	d1c4      	bne.n	34d68 <rpc_dfu_message_send+0x1c>
   34dde:	4628      	mov	r0, r5
   34de0:	a901      	add	r1, sp, #4
   34de2:	f7f4 f9b9 	bl	29158 <nrf_modem_os_timedwait>
   34de6:	2800      	cmp	r0, #0
   34de8:	d0f6      	beq.n	34dd8 <rpc_dfu_message_send+0x8c>
   34dea:	203c      	movs	r0, #60	; 0x3c
   34dec:	e7b8      	b.n	34d60 <rpc_dfu_message_send+0x14>
   34dee:	bf00      	nop
   34df0:	2001e0ea 	.word	0x2001e0ea
   34df4:	20019fbc 	.word	0x20019fbc
   34df8:	20019fc0 	.word	0x20019fc0
   34dfc:	20019fb4 	.word	0x20019fb4

00034e00 <rpc_dfu_event_handler>:
   34e00:	b508      	push	{r3, lr}
   34e02:	4b08      	ldr	r3, [pc, #32]	; (34e24 <rpc_dfu_event_handler+0x24>)
   34e04:	68c2      	ldr	r2, [r0, #12]
   34e06:	881b      	ldrh	r3, [r3, #0]
   34e08:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   34e0c:	d103      	bne.n	34e16 <rpc_dfu_event_handler+0x16>
   34e0e:	4b06      	ldr	r3, [pc, #24]	; (34e28 <rpc_dfu_event_handler+0x28>)
   34e10:	6018      	str	r0, [r3, #0]
   34e12:	2001      	movs	r0, #1
   34e14:	bd08      	pop	{r3, pc}
   34e16:	6800      	ldr	r0, [r0, #0]
   34e18:	2800      	cmp	r0, #0
   34e1a:	d0fb      	beq.n	34e14 <rpc_dfu_event_handler+0x14>
   34e1c:	f00b fb97 	bl	4054e <rpc_dfu_client_data_free>
   34e20:	2000      	movs	r0, #0
   34e22:	e7f7      	b.n	34e14 <rpc_dfu_event_handler+0x14>
   34e24:	2001e0ea 	.word	0x2001e0ea
   34e28:	20019fc0 	.word	0x20019fc0

00034e2c <mfu_interface_init>:
   34e2c:	2000      	movs	r0, #0
   34e2e:	2201      	movs	r2, #1
   34e30:	4b04      	ldr	r3, [pc, #16]	; (34e44 <mfu_interface_init+0x18>)
   34e32:	8018      	strh	r0, [r3, #0]
   34e34:	4b04      	ldr	r3, [pc, #16]	; (34e48 <mfu_interface_init+0x1c>)
   34e36:	6018      	str	r0, [r3, #0]
   34e38:	4b04      	ldr	r3, [pc, #16]	; (34e4c <mfu_interface_init+0x20>)
   34e3a:	6018      	str	r0, [r3, #0]
   34e3c:	4b04      	ldr	r3, [pc, #16]	; (34e50 <mfu_interface_init+0x24>)
   34e3e:	601a      	str	r2, [r3, #0]
   34e40:	4770      	bx	lr
   34e42:	bf00      	nop
   34e44:	2001e0ea 	.word	0x2001e0ea
   34e48:	20019fc0 	.word	0x20019fc0
   34e4c:	20019fbc 	.word	0x20019fbc
   34e50:	20019fb4 	.word	0x20019fb4

00034e54 <mfu_interface_deinit>:
   34e54:	2000      	movs	r0, #0
   34e56:	4b01      	ldr	r3, [pc, #4]	; (34e5c <mfu_interface_deinit+0x8>)
   34e58:	6018      	str	r0, [r3, #0]
   34e5a:	4770      	bx	lr
   34e5c:	20019fb4 	.word	0x20019fb4

00034e60 <mfu_interface_open>:
   34e60:	b508      	push	{r3, lr}
   34e62:	4b07      	ldr	r3, [pc, #28]	; (34e80 <mfu_interface_open+0x20>)
   34e64:	681a      	ldr	r2, [r3, #0]
   34e66:	2a01      	cmp	r2, #1
   34e68:	d005      	beq.n	34e76 <mfu_interface_open+0x16>
   34e6a:	2001      	movs	r0, #1
   34e6c:	f7f4 fa2c 	bl	292c8 <nrf_modem_os_errno_set>
   34e70:	f04f 30ff 	mov.w	r0, #4294967295
   34e74:	bd08      	pop	{r3, pc}
   34e76:	2202      	movs	r2, #2
   34e78:	4802      	ldr	r0, [pc, #8]	; (34e84 <mfu_interface_open+0x24>)
   34e7a:	601a      	str	r2, [r3, #0]
   34e7c:	e7fa      	b.n	34e74 <mfu_interface_open+0x14>
   34e7e:	bf00      	nop
   34e80:	20019fb4 	.word	0x20019fb4
   34e84:	49765432 	.word	0x49765432

00034e88 <mfu_interface_close>:
   34e88:	b538      	push	{r3, r4, r5, lr}
   34e8a:	4c11      	ldr	r4, [pc, #68]	; (34ed0 <mfu_interface_close+0x48>)
   34e8c:	6822      	ldr	r2, [r4, #0]
   34e8e:	1e91      	subs	r1, r2, #2
   34e90:	2901      	cmp	r1, #1
   34e92:	d905      	bls.n	34ea0 <mfu_interface_close+0x18>
   34e94:	2001      	movs	r0, #1
   34e96:	f7f4 fa17 	bl	292c8 <nrf_modem_os_errno_set>
   34e9a:	f04f 30ff 	mov.w	r0, #4294967295
   34e9e:	e015      	b.n	34ecc <mfu_interface_close+0x44>
   34ea0:	2a03      	cmp	r2, #3
   34ea2:	d110      	bne.n	34ec6 <mfu_interface_close+0x3e>
   34ea4:	2200      	movs	r2, #0
   34ea6:	2006      	movs	r0, #6
   34ea8:	4611      	mov	r1, r2
   34eaa:	f7ff ff4f 	bl	34d4c <rpc_dfu_message_send>
   34eae:	2800      	cmp	r0, #0
   34eb0:	d1f3      	bne.n	34e9a <mfu_interface_close+0x12>
   34eb2:	4b08      	ldr	r3, [pc, #32]	; (34ed4 <mfu_interface_close+0x4c>)
   34eb4:	6818      	ldr	r0, [r3, #0]
   34eb6:	6905      	ldr	r5, [r0, #16]
   34eb8:	f00b fb41 	bl	4053e <rpc_dfu_client_message_free>
   34ebc:	b11d      	cbz	r5, 34ec6 <mfu_interface_close+0x3e>
   34ebe:	4b06      	ldr	r3, [pc, #24]	; (34ed8 <mfu_interface_close+0x50>)
   34ec0:	2008      	movs	r0, #8
   34ec2:	601d      	str	r5, [r3, #0]
   34ec4:	e7e7      	b.n	34e96 <mfu_interface_close+0xe>
   34ec6:	2301      	movs	r3, #1
   34ec8:	2000      	movs	r0, #0
   34eca:	6023      	str	r3, [r4, #0]
   34ecc:	bd38      	pop	{r3, r4, r5, pc}
   34ece:	bf00      	nop
   34ed0:	20019fb4 	.word	0x20019fb4
   34ed4:	20019fc0 	.word	0x20019fc0
   34ed8:	20019fb8 	.word	0x20019fb8

00034edc <mfu_interface_sendto>:
   34edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34ede:	4e1f      	ldr	r6, [pc, #124]	; (34f5c <mfu_interface_sendto+0x80>)
   34ee0:	460d      	mov	r5, r1
   34ee2:	6831      	ldr	r1, [r6, #0]
   34ee4:	4614      	mov	r4, r2
   34ee6:	1e88      	subs	r0, r1, #2
   34ee8:	2801      	cmp	r0, #1
   34eea:	9a06      	ldr	r2, [sp, #24]
   34eec:	d903      	bls.n	34ef6 <mfu_interface_sendto+0x1a>
   34eee:	2001      	movs	r0, #1
   34ef0:	f7f4 f9ea 	bl	292c8 <nrf_modem_os_errno_set>
   34ef4:	e010      	b.n	34f18 <mfu_interface_sendto+0x3c>
   34ef6:	b105      	cbz	r5, 34efa <mfu_interface_sendto+0x1e>
   34ef8:	b90c      	cbnz	r4, 34efe <mfu_interface_sendto+0x22>
   34efa:	2016      	movs	r0, #22
   34efc:	e7f8      	b.n	34ef0 <mfu_interface_sendto+0x14>
   34efe:	b10b      	cbz	r3, 34f04 <mfu_interface_sendto+0x28>
   34f00:	202d      	movs	r0, #45	; 0x2d
   34f02:	e7f5      	b.n	34ef0 <mfu_interface_sendto+0x14>
   34f04:	b10a      	cbz	r2, 34f0a <mfu_interface_sendto+0x2e>
   34f06:	2038      	movs	r0, #56	; 0x38
   34f08:	e7f2      	b.n	34ef0 <mfu_interface_sendto+0x14>
   34f0a:	2902      	cmp	r1, #2
   34f0c:	d114      	bne.n	34f38 <mfu_interface_sendto+0x5c>
   34f0e:	4611      	mov	r1, r2
   34f10:	2003      	movs	r0, #3
   34f12:	f7ff ff1b 	bl	34d4c <rpc_dfu_message_send>
   34f16:	b118      	cbz	r0, 34f20 <mfu_interface_sendto+0x44>
   34f18:	f04f 34ff 	mov.w	r4, #4294967295
   34f1c:	4620      	mov	r0, r4
   34f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34f20:	4b0f      	ldr	r3, [pc, #60]	; (34f60 <mfu_interface_sendto+0x84>)
   34f22:	6818      	ldr	r0, [r3, #0]
   34f24:	6907      	ldr	r7, [r0, #16]
   34f26:	f00b fb0a 	bl	4053e <rpc_dfu_client_message_free>
   34f2a:	b11f      	cbz	r7, 34f34 <mfu_interface_sendto+0x58>
   34f2c:	4b0d      	ldr	r3, [pc, #52]	; (34f64 <mfu_interface_sendto+0x88>)
   34f2e:	601f      	str	r7, [r3, #0]
   34f30:	2008      	movs	r0, #8
   34f32:	e7dd      	b.n	34ef0 <mfu_interface_sendto+0x14>
   34f34:	2303      	movs	r3, #3
   34f36:	6033      	str	r3, [r6, #0]
   34f38:	4622      	mov	r2, r4
   34f3a:	4629      	mov	r1, r5
   34f3c:	2004      	movs	r0, #4
   34f3e:	f7ff ff05 	bl	34d4c <rpc_dfu_message_send>
   34f42:	2800      	cmp	r0, #0
   34f44:	d1e8      	bne.n	34f18 <mfu_interface_sendto+0x3c>
   34f46:	4b06      	ldr	r3, [pc, #24]	; (34f60 <mfu_interface_sendto+0x84>)
   34f48:	6818      	ldr	r0, [r3, #0]
   34f4a:	6905      	ldr	r5, [r0, #16]
   34f4c:	f00b faf7 	bl	4053e <rpc_dfu_client_message_free>
   34f50:	2d00      	cmp	r5, #0
   34f52:	d0e3      	beq.n	34f1c <mfu_interface_sendto+0x40>
   34f54:	4b03      	ldr	r3, [pc, #12]	; (34f64 <mfu_interface_sendto+0x88>)
   34f56:	601d      	str	r5, [r3, #0]
   34f58:	e7ea      	b.n	34f30 <mfu_interface_sendto+0x54>
   34f5a:	bf00      	nop
   34f5c:	20019fb4 	.word	0x20019fb4
   34f60:	20019fc0 	.word	0x20019fc0
   34f64:	20019fb8 	.word	0x20019fb8

00034f68 <mfu_interface_setopt>:
   34f68:	481d      	ldr	r0, [pc, #116]	; (34fe0 <mfu_interface_setopt+0x78>)
   34f6a:	b510      	push	{r4, lr}
   34f6c:	6800      	ldr	r0, [r0, #0]
   34f6e:	3802      	subs	r0, #2
   34f70:	2801      	cmp	r0, #1
   34f72:	d905      	bls.n	34f80 <mfu_interface_setopt+0x18>
   34f74:	2001      	movs	r0, #1
   34f76:	f7f4 f9a7 	bl	292c8 <nrf_modem_os_errno_set>
   34f7a:	f04f 30ff 	mov.w	r0, #4294967295
   34f7e:	e026      	b.n	34fce <mfu_interface_setopt+0x66>
   34f80:	f240 2003 	movw	r0, #515	; 0x203
   34f84:	4281      	cmp	r1, r0
   34f86:	d001      	beq.n	34f8c <mfu_interface_setopt+0x24>
   34f88:	2016      	movs	r0, #22
   34f8a:	e7f4      	b.n	34f76 <mfu_interface_setopt+0xe>
   34f8c:	3a04      	subs	r2, #4
   34f8e:	2a03      	cmp	r2, #3
   34f90:	d81e      	bhi.n	34fd0 <mfu_interface_setopt+0x68>
   34f92:	e8df f002 	tbb	[pc, r2]
   34f96:	021f      	.short	0x021f
   34f98:	1321      	.short	0x1321
   34f9a:	2007      	movs	r0, #7
   34f9c:	2200      	movs	r2, #0
   34f9e:	4611      	mov	r1, r2
   34fa0:	f7ff fed4 	bl	34d4c <rpc_dfu_message_send>
   34fa4:	2800      	cmp	r0, #0
   34fa6:	d1e8      	bne.n	34f7a <mfu_interface_setopt+0x12>
   34fa8:	4b0e      	ldr	r3, [pc, #56]	; (34fe4 <mfu_interface_setopt+0x7c>)
   34faa:	6818      	ldr	r0, [r3, #0]
   34fac:	6904      	ldr	r4, [r0, #16]
   34fae:	f00b fac6 	bl	4053e <rpc_dfu_client_message_free>
   34fb2:	b19c      	cbz	r4, 34fdc <mfu_interface_setopt+0x74>
   34fb4:	4b0c      	ldr	r3, [pc, #48]	; (34fe8 <mfu_interface_setopt+0x80>)
   34fb6:	2008      	movs	r0, #8
   34fb8:	601c      	str	r4, [r3, #0]
   34fba:	e7dc      	b.n	34f76 <mfu_interface_setopt+0xe>
   34fbc:	2b00      	cmp	r3, #0
   34fbe:	d0e3      	beq.n	34f88 <mfu_interface_setopt+0x20>
   34fc0:	9a02      	ldr	r2, [sp, #8]
   34fc2:	2a04      	cmp	r2, #4
   34fc4:	d1e0      	bne.n	34f88 <mfu_interface_setopt+0x20>
   34fc6:	2000      	movs	r0, #0
   34fc8:	681a      	ldr	r2, [r3, #0]
   34fca:	4b08      	ldr	r3, [pc, #32]	; (34fec <mfu_interface_setopt+0x84>)
   34fcc:	601a      	str	r2, [r3, #0]
   34fce:	bd10      	pop	{r4, pc}
   34fd0:	202a      	movs	r0, #42	; 0x2a
   34fd2:	e7d0      	b.n	34f76 <mfu_interface_setopt+0xe>
   34fd4:	2005      	movs	r0, #5
   34fd6:	e7e1      	b.n	34f9c <mfu_interface_setopt+0x34>
   34fd8:	2008      	movs	r0, #8
   34fda:	e7df      	b.n	34f9c <mfu_interface_setopt+0x34>
   34fdc:	4620      	mov	r0, r4
   34fde:	e7f6      	b.n	34fce <mfu_interface_setopt+0x66>
   34fe0:	20019fb4 	.word	0x20019fb4
   34fe4:	20019fc0 	.word	0x20019fc0
   34fe8:	20019fb8 	.word	0x20019fb8
   34fec:	20019fbc 	.word	0x20019fbc

00034ff0 <mfu_interface_getopt>:
   34ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34ff2:	461e      	mov	r6, r3
   34ff4:	f240 2303 	movw	r3, #515	; 0x203
   34ff8:	4299      	cmp	r1, r3
   34ffa:	9d06      	ldr	r5, [sp, #24]
   34ffc:	d101      	bne.n	35002 <mfu_interface_getopt+0x12>
   34ffe:	b106      	cbz	r6, 35002 <mfu_interface_getopt+0x12>
   35000:	b92d      	cbnz	r5, 3500e <mfu_interface_getopt+0x1e>
   35002:	2016      	movs	r0, #22
   35004:	f7f4 f960 	bl	292c8 <nrf_modem_os_errno_set>
   35008:	f04f 30ff 	mov.w	r0, #4294967295
   3500c:	e019      	b.n	35042 <mfu_interface_getopt+0x52>
   3500e:	4b22      	ldr	r3, [pc, #136]	; (35098 <mfu_interface_getopt+0xa8>)
   35010:	681b      	ldr	r3, [r3, #0]
   35012:	3b02      	subs	r3, #2
   35014:	2b01      	cmp	r3, #1
   35016:	d901      	bls.n	3501c <mfu_interface_getopt+0x2c>
   35018:	2001      	movs	r0, #1
   3501a:	e7f3      	b.n	35004 <mfu_interface_getopt+0x14>
   3501c:	2a07      	cmp	r2, #7
   3501e:	d02b      	beq.n	35078 <mfu_interface_getopt+0x88>
   35020:	dc05      	bgt.n	3502e <mfu_interface_getopt+0x3e>
   35022:	2a01      	cmp	r2, #1
   35024:	d00e      	beq.n	35044 <mfu_interface_getopt+0x54>
   35026:	2a02      	cmp	r2, #2
   35028:	d023      	beq.n	35072 <mfu_interface_getopt+0x82>
   3502a:	202a      	movs	r0, #42	; 0x2a
   3502c:	e7ea      	b.n	35004 <mfu_interface_getopt+0x14>
   3502e:	2a14      	cmp	r2, #20
   35030:	d1fb      	bne.n	3502a <mfu_interface_getopt+0x3a>
   35032:	682b      	ldr	r3, [r5, #0]
   35034:	2b04      	cmp	r3, #4
   35036:	d1e4      	bne.n	35002 <mfu_interface_getopt+0x12>
   35038:	2000      	movs	r0, #0
   3503a:	4b18      	ldr	r3, [pc, #96]	; (3509c <mfu_interface_getopt+0xac>)
   3503c:	681a      	ldr	r2, [r3, #0]
   3503e:	6018      	str	r0, [r3, #0]
   35040:	6032      	str	r2, [r6, #0]
   35042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35044:	682b      	ldr	r3, [r5, #0]
   35046:	2b24      	cmp	r3, #36	; 0x24
   35048:	d1db      	bne.n	35002 <mfu_interface_getopt+0x12>
   3504a:	4610      	mov	r0, r2
   3504c:	2200      	movs	r2, #0
   3504e:	4611      	mov	r1, r2
   35050:	f7ff fe7c 	bl	34d4c <rpc_dfu_message_send>
   35054:	2800      	cmp	r0, #0
   35056:	d1d7      	bne.n	35008 <mfu_interface_getopt+0x18>
   35058:	4f11      	ldr	r7, [pc, #68]	; (350a0 <mfu_interface_getopt+0xb0>)
   3505a:	6839      	ldr	r1, [r7, #0]
   3505c:	690c      	ldr	r4, [r1, #16]
   3505e:	b184      	cbz	r4, 35082 <mfu_interface_getopt+0x92>
   35060:	4b0e      	ldr	r3, [pc, #56]	; (3509c <mfu_interface_getopt+0xac>)
   35062:	2008      	movs	r0, #8
   35064:	601c      	str	r4, [r3, #0]
   35066:	f7f4 f92f 	bl	292c8 <nrf_modem_os_errno_set>
   3506a:	6838      	ldr	r0, [r7, #0]
   3506c:	f00b fa67 	bl	4053e <rpc_dfu_client_message_free>
   35070:	e7ca      	b.n	35008 <mfu_interface_getopt+0x18>
   35072:	682b      	ldr	r3, [r5, #0]
   35074:	2b04      	cmp	r3, #4
   35076:	e7e7      	b.n	35048 <mfu_interface_getopt+0x58>
   35078:	682b      	ldr	r3, [r5, #0]
   3507a:	2b04      	cmp	r3, #4
   3507c:	d1c1      	bne.n	35002 <mfu_interface_getopt+0x12>
   3507e:	2009      	movs	r0, #9
   35080:	e7e4      	b.n	3504c <mfu_interface_getopt+0x5c>
   35082:	682a      	ldr	r2, [r5, #0]
   35084:	3114      	adds	r1, #20
   35086:	4630      	mov	r0, r6
   35088:	f00c fe09 	bl	41c9e <memcpy>
   3508c:	6838      	ldr	r0, [r7, #0]
   3508e:	f00b fa56 	bl	4053e <rpc_dfu_client_message_free>
   35092:	4620      	mov	r0, r4
   35094:	e7d5      	b.n	35042 <mfu_interface_getopt+0x52>
   35096:	bf00      	nop
   35098:	20019fb4 	.word	0x20019fb4
   3509c:	20019fb8 	.word	0x20019fb8
   350a0:	20019fc0 	.word	0x20019fc0

000350a4 <send_message>:
   350a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   350a6:	b085      	sub	sp, #20
   350a8:	4606      	mov	r6, r0
   350aa:	460f      	mov	r7, r1
   350ac:	a803      	add	r0, sp, #12
   350ae:	4611      	mov	r1, r2
   350b0:	9201      	str	r2, [sp, #4]
   350b2:	f00b fa58 	bl	40566 <rpc_gnss_client_request_alloc>
   350b6:	9b03      	ldr	r3, [sp, #12]
   350b8:	4604      	mov	r4, r0
   350ba:	b958      	cbnz	r0, 350d4 <send_message+0x30>
   350bc:	9a01      	ldr	r2, [sp, #4]
   350be:	b98b      	cbnz	r3, 350e4 <send_message+0x40>
   350c0:	9803      	ldr	r0, [sp, #12]
   350c2:	f00b fa76 	bl	405b2 <rpc_gnss_client_message_free>
   350c6:	2023      	movs	r0, #35	; 0x23
   350c8:	f7f4 f8fe 	bl	292c8 <nrf_modem_os_errno_set>
   350cc:	f04f 30ff 	mov.w	r0, #4294967295
   350d0:	b005      	add	sp, #20
   350d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   350d4:	2b00      	cmp	r3, #0
   350d6:	d0f3      	beq.n	350c0 <send_message+0x1c>
   350d8:	6818      	ldr	r0, [r3, #0]
   350da:	2800      	cmp	r0, #0
   350dc:	d0f0      	beq.n	350c0 <send_message+0x1c>
   350de:	f00b fa70 	bl	405c2 <rpc_gnss_client_data_free>
   350e2:	e7ed      	b.n	350c0 <send_message+0x1c>
   350e4:	490f      	ldr	r1, [pc, #60]	; (35124 <send_message+0x80>)
   350e6:	880d      	ldrh	r5, [r1, #0]
   350e8:	3501      	adds	r5, #1
   350ea:	b2ad      	uxth	r5, r5
   350ec:	800d      	strh	r5, [r1, #0]
   350ee:	2143      	movs	r1, #67	; 0x43
   350f0:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
   350f4:	603d      	str	r5, [r7, #0]
   350f6:	7319      	strb	r1, [r3, #12]
   350f8:	2154      	movs	r1, #84	; 0x54
   350fa:	7359      	strb	r1, [r3, #13]
   350fc:	2176      	movs	r1, #118	; 0x76
   350fe:	7399      	strb	r1, [r3, #14]
   35100:	2149      	movs	r1, #73	; 0x49
   35102:	605a      	str	r2, [r3, #4]
   35104:	7218      	strb	r0, [r3, #8]
   35106:	7258      	strb	r0, [r3, #9]
   35108:	7298      	strb	r0, [r3, #10]
   3510a:	72d8      	strb	r0, [r3, #11]
   3510c:	73d9      	strb	r1, [r3, #15]
   3510e:	6818      	ldr	r0, [r3, #0]
   35110:	4639      	mov	r1, r7
   35112:	f00c fdc4 	bl	41c9e <memcpy>
   35116:	4b04      	ldr	r3, [pc, #16]	; (35128 <send_message+0x84>)
   35118:	4631      	mov	r1, r6
   3511a:	9803      	ldr	r0, [sp, #12]
   3511c:	601c      	str	r4, [r3, #0]
   3511e:	f00b fa34 	bl	4058a <rpc_gnss_client_request_send>
   35122:	e7d5      	b.n	350d0 <send_message+0x2c>
   35124:	2001e0ec 	.word	0x2001e0ec
   35128:	20019fc8 	.word	0x20019fc8

0003512c <rpc_gnss_event_handler>:
   3512c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3512e:	4b5b      	ldr	r3, [pc, #364]	; (3529c <rpc_gnss_event_handler+0x170>)
   35130:	4605      	mov	r5, r0
   35132:	6800      	ldr	r0, [r0, #0]
   35134:	881b      	ldrh	r3, [r3, #0]
   35136:	6802      	ldr	r2, [r0, #0]
   35138:	460c      	mov	r4, r1
   3513a:	ebb3 4f12 	cmp.w	r3, r2, lsr #16
   3513e:	b085      	sub	sp, #20
   35140:	d134      	bne.n	351ac <rpc_gnss_event_handler+0x80>
   35142:	4b57      	ldr	r3, [pc, #348]	; (352a0 <rpc_gnss_event_handler+0x174>)
   35144:	4e57      	ldr	r6, [pc, #348]	; (352a4 <rpc_gnss_event_handler+0x178>)
   35146:	681a      	ldr	r2, [r3, #0]
   35148:	6030      	str	r0, [r6, #0]
   3514a:	01d2      	lsls	r2, r2, #7
   3514c:	d50d      	bpl.n	3516a <rpc_gnss_event_handler+0x3e>
   3514e:	f242 1202 	movw	r2, #8450	; 0x2102
   35152:	4291      	cmp	r1, r2
   35154:	d109      	bne.n	3516a <rpc_gnss_event_handler+0x3e>
   35156:	6842      	ldr	r2, [r0, #4]
   35158:	b91a      	cbnz	r2, 35162 <rpc_gnss_event_handler+0x36>
   3515a:	681a      	ldr	r2, [r3, #0]
   3515c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   35160:	601a      	str	r2, [r3, #0]
   35162:	681a      	ldr	r2, [r3, #0]
   35164:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   35168:	601a      	str	r2, [r3, #0]
   3516a:	681a      	ldr	r2, [r3, #0]
   3516c:	0257      	lsls	r7, r2, #9
   3516e:	d50d      	bpl.n	3518c <rpc_gnss_event_handler+0x60>
   35170:	f242 1203 	movw	r2, #8451	; 0x2103
   35174:	4294      	cmp	r4, r2
   35176:	d109      	bne.n	3518c <rpc_gnss_event_handler+0x60>
   35178:	6842      	ldr	r2, [r0, #4]
   3517a:	b91a      	cbnz	r2, 35184 <rpc_gnss_event_handler+0x58>
   3517c:	681a      	ldr	r2, [r3, #0]
   3517e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   35182:	601a      	str	r2, [r3, #0]
   35184:	681a      	ldr	r2, [r3, #0]
   35186:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   3518a:	e04a      	b.n	35222 <rpc_gnss_event_handler+0xf6>
   3518c:	f242 0201 	movw	r2, #8193	; 0x2001
   35190:	4294      	cmp	r4, r2
   35192:	d03e      	beq.n	35212 <rpc_gnss_event_handler+0xe6>
   35194:	f242 0204 	movw	r2, #8196	; 0x2004
   35198:	4294      	cmp	r4, r2
   3519a:	d044      	beq.n	35226 <rpc_gnss_event_handler+0xfa>
   3519c:	f242 0205 	movw	r2, #8197	; 0x2005
   351a0:	4294      	cmp	r4, r2
   351a2:	d05d      	beq.n	35260 <rpc_gnss_event_handler+0x134>
   351a4:	f00b fa0d 	bl	405c2 <rpc_gnss_client_data_free>
   351a8:	2300      	movs	r3, #0
   351aa:	6033      	str	r3, [r6, #0]
   351ac:	f504 433f 	add.w	r3, r4, #48896	; 0xbf00
   351b0:	33ff      	adds	r3, #255	; 0xff
   351b2:	b29b      	uxth	r3, r3
   351b4:	2b02      	cmp	r3, #2
   351b6:	d869      	bhi.n	3528c <rpc_gnss_event_handler+0x160>
   351b8:	4f39      	ldr	r7, [pc, #228]	; (352a0 <rpc_gnss_event_handler+0x174>)
   351ba:	683b      	ldr	r3, [r7, #0]
   351bc:	075a      	lsls	r2, r3, #29
   351be:	d406      	bmi.n	351ce <rpc_gnss_event_handler+0xa2>
   351c0:	683b      	ldr	r3, [r7, #0]
   351c2:	079b      	lsls	r3, r3, #30
   351c4:	d51c      	bpl.n	35200 <rpc_gnss_event_handler+0xd4>
   351c6:	f244 0303 	movw	r3, #16387	; 0x4003
   351ca:	429c      	cmp	r4, r3
   351cc:	d118      	bne.n	35200 <rpc_gnss_event_handler+0xd4>
   351ce:	2002      	movs	r0, #2
   351d0:	f7f4 fa26 	bl	29620 <nrf_modem_os_alloc>
   351d4:	4606      	mov	r6, r0
   351d6:	6828      	ldr	r0, [r5, #0]
   351d8:	2e00      	cmp	r6, #0
   351da:	d052      	beq.n	35282 <rpc_gnss_event_handler+0x156>
   351dc:	8034      	strh	r4, [r6, #0]
   351de:	686b      	ldr	r3, [r5, #4]
   351e0:	9000      	str	r0, [sp, #0]
   351e2:	e9cd 3601 	strd	r3, r6, [sp, #4]
   351e6:	2302      	movs	r3, #2
   351e8:	9303      	str	r3, [sp, #12]
   351ea:	4b2f      	ldr	r3, [pc, #188]	; (352a8 <rpc_gnss_event_handler+0x17c>)
   351ec:	4669      	mov	r1, sp
   351ee:	6818      	ldr	r0, [r3, #0]
   351f0:	6803      	ldr	r3, [r0, #0]
   351f2:	685b      	ldr	r3, [r3, #4]
   351f4:	4798      	blx	r3
   351f6:	3001      	adds	r0, #1
   351f8:	d14b      	bne.n	35292 <rpc_gnss_event_handler+0x166>
   351fa:	4630      	mov	r0, r6
   351fc:	f7f4 fa20 	bl	29640 <nrf_modem_os_free>
   35200:	6828      	ldr	r0, [r5, #0]
   35202:	2800      	cmp	r0, #0
   35204:	d042      	beq.n	3528c <rpc_gnss_event_handler+0x160>
   35206:	f00b f9dc 	bl	405c2 <rpc_gnss_client_data_free>
   3520a:	2200      	movs	r2, #0
   3520c:	4b25      	ldr	r3, [pc, #148]	; (352a4 <rpc_gnss_event_handler+0x178>)
   3520e:	601a      	str	r2, [r3, #0]
   35210:	e03c      	b.n	3528c <rpc_gnss_event_handler+0x160>
   35212:	6842      	ldr	r2, [r0, #4]
   35214:	2a00      	cmp	r2, #0
   35216:	d1c5      	bne.n	351a4 <rpc_gnss_event_handler+0x78>
   35218:	681a      	ldr	r2, [r3, #0]
   3521a:	0c12      	lsrs	r2, r2, #16
   3521c:	0412      	lsls	r2, r2, #16
   3521e:	f042 0202 	orr.w	r2, r2, #2
   35222:	601a      	str	r2, [r3, #0]
   35224:	e7be      	b.n	351a4 <rpc_gnss_event_handler+0x78>
   35226:	6842      	ldr	r2, [r0, #4]
   35228:	b9b2      	cbnz	r2, 35258 <rpc_gnss_event_handler+0x12c>
   3522a:	681a      	ldr	r2, [r3, #0]
   3522c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   35230:	601a      	str	r2, [r3, #0]
   35232:	681a      	ldr	r2, [r3, #0]
   35234:	b292      	uxth	r2, r2
   35236:	2a03      	cmp	r2, #3
   35238:	681a      	ldr	r2, [r3, #0]
   3523a:	d104      	bne.n	35246 <rpc_gnss_event_handler+0x11a>
   3523c:	0c12      	lsrs	r2, r2, #16
   3523e:	0412      	lsls	r2, r2, #16
   35240:	f042 0204 	orr.w	r2, r2, #4
   35244:	e79d      	b.n	35182 <rpc_gnss_event_handler+0x56>
   35246:	b292      	uxth	r2, r2
   35248:	2a04      	cmp	r2, #4
   3524a:	d19b      	bne.n	35184 <rpc_gnss_event_handler+0x58>
   3524c:	681a      	ldr	r2, [r3, #0]
   3524e:	0c12      	lsrs	r2, r2, #16
   35250:	0412      	lsls	r2, r2, #16
   35252:	f042 0202 	orr.w	r2, r2, #2
   35256:	e794      	b.n	35182 <rpc_gnss_event_handler+0x56>
   35258:	681a      	ldr	r2, [r3, #0]
   3525a:	b292      	uxth	r2, r2
   3525c:	2a03      	cmp	r2, #3
   3525e:	e7f4      	b.n	3524a <rpc_gnss_event_handler+0x11e>
   35260:	681a      	ldr	r2, [r3, #0]
   35262:	0291      	lsls	r1, r2, #10
   35264:	d59e      	bpl.n	351a4 <rpc_gnss_event_handler+0x78>
   35266:	6842      	ldr	r2, [r0, #4]
   35268:	b93a      	cbnz	r2, 3527a <rpc_gnss_event_handler+0x14e>
   3526a:	681a      	ldr	r2, [r3, #0]
   3526c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   35270:	601a      	str	r2, [r3, #0]
   35272:	681a      	ldr	r2, [r3, #0]
   35274:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   35278:	e7d3      	b.n	35222 <rpc_gnss_event_handler+0xf6>
   3527a:	681a      	ldr	r2, [r3, #0]
   3527c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   35280:	e7cf      	b.n	35222 <rpc_gnss_event_handler+0xf6>
   35282:	b118      	cbz	r0, 3528c <rpc_gnss_event_handler+0x160>
   35284:	f00b f99d 	bl	405c2 <rpc_gnss_client_data_free>
   35288:	4b06      	ldr	r3, [pc, #24]	; (352a4 <rpc_gnss_event_handler+0x178>)
   3528a:	601e      	str	r6, [r3, #0]
   3528c:	2000      	movs	r0, #0
   3528e:	b005      	add	sp, #20
   35290:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35292:	683b      	ldr	r3, [r7, #0]
   35294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   35298:	603b      	str	r3, [r7, #0]
   3529a:	e7f7      	b.n	3528c <rpc_gnss_event_handler+0x160>
   3529c:	2001e0ec 	.word	0x2001e0ec
   352a0:	20019fc4 	.word	0x20019fc4
   352a4:	20019fc8 	.word	0x20019fc8
   352a8:	20019fcc 	.word	0x20019fcc

000352ac <gnss_interface_write>:
   352ac:	b570      	push	{r4, r5, r6, lr}
   352ae:	4604      	mov	r4, r0
   352b0:	4a40      	ldr	r2, [pc, #256]	; (353b4 <gnss_interface_write+0x108>)
   352b2:	b09e      	sub	sp, #120	; 0x78
   352b4:	4294      	cmp	r4, r2
   352b6:	4608      	mov	r0, r1
   352b8:	9d22      	ldr	r5, [sp, #136]	; 0x88
   352ba:	d005      	beq.n	352c8 <gnss_interface_write+0x1c>
   352bc:	2009      	movs	r0, #9
   352be:	f7f4 f803 	bl	292c8 <nrf_modem_os_errno_set>
   352c2:	f04f 33ff 	mov.w	r3, #4294967295
   352c6:	e061      	b.n	3538c <gnss_interface_write+0xe0>
   352c8:	b119      	cbz	r1, 352d2 <gnss_interface_write+0x26>
   352ca:	b115      	cbz	r5, 352d2 <gnss_interface_write+0x26>
   352cc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   352ce:	2a02      	cmp	r2, #2
   352d0:	d001      	beq.n	352d6 <gnss_interface_write+0x2a>
   352d2:	2016      	movs	r0, #22
   352d4:	e7f3      	b.n	352be <gnss_interface_write+0x12>
   352d6:	4a38      	ldr	r2, [pc, #224]	; (353b8 <gnss_interface_write+0x10c>)
   352d8:	6811      	ldr	r1, [r2, #0]
   352da:	4614      	mov	r4, r2
   352dc:	b289      	uxth	r1, r1
   352de:	2902      	cmp	r1, #2
   352e0:	d005      	beq.n	352ee <gnss_interface_write+0x42>
   352e2:	6812      	ldr	r2, [r2, #0]
   352e4:	b292      	uxth	r2, r2
   352e6:	2a04      	cmp	r2, #4
   352e8:	d001      	beq.n	352ee <gnss_interface_write+0x42>
   352ea:	2039      	movs	r0, #57	; 0x39
   352ec:	e7e7      	b.n	352be <gnss_interface_write+0x12>
   352ee:	b10b      	cbz	r3, 352f4 <gnss_interface_write+0x48>
   352f0:	202d      	movs	r0, #45	; 0x2d
   352f2:	e7e4      	b.n	352be <gnss_interface_write+0x12>
   352f4:	6822      	ldr	r2, [r4, #0]
   352f6:	0396      	lsls	r6, r2, #14
   352f8:	d548      	bpl.n	3538c <gnss_interface_write+0xe0>
   352fa:	6823      	ldr	r3, [r4, #0]
   352fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   35300:	6023      	str	r3, [r4, #0]
   35302:	6823      	ldr	r3, [r4, #0]
   35304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   35308:	6023      	str	r3, [r4, #0]
   3530a:	882b      	ldrh	r3, [r5, #0]
   3530c:	3b01      	subs	r3, #1
   3530e:	2b07      	cmp	r3, #7
   35310:	d8df      	bhi.n	352d2 <gnss_interface_write+0x26>
   35312:	e8df f003 	tbb	[pc, r3]
   35316:	1704      	.short	0x1704
   35318:	27231f1b 	.word	0x27231f1b
   3531c:	2f2b      	.short	0x2f2b
   3531e:	a902      	add	r1, sp, #8
   35320:	f00b f956 	bl	405d0 <rpc_gnss_serialize_utc>
   35324:	2272      	movs	r2, #114	; 0x72
   35326:	f241 0005 	movw	r0, #4101	; 0x1005
   3532a:	a901      	add	r1, sp, #4
   3532c:	f7ff feba 	bl	350a4 <send_message>
   35330:	4603      	mov	r3, r0
   35332:	bb18      	cbnz	r0, 3537c <gnss_interface_write+0xd0>
   35334:	4d21      	ldr	r5, [pc, #132]	; (353bc <gnss_interface_write+0x110>)
   35336:	4e1f      	ldr	r6, [pc, #124]	; (353b4 <gnss_interface_write+0x108>)
   35338:	6822      	ldr	r2, [r4, #0]
   3533a:	0291      	lsls	r1, r2, #10
   3533c:	d52f      	bpl.n	3539e <gnss_interface_write+0xf2>
   3533e:	b343      	cbz	r3, 35392 <gnss_interface_write+0xe6>
   35340:	4618      	mov	r0, r3
   35342:	e7bc      	b.n	352be <gnss_interface_write+0x12>
   35344:	a902      	add	r1, sp, #8
   35346:	f00b f960 	bl	4060a <rpc_gnss_serialize_ephe>
   3534a:	e7eb      	b.n	35324 <gnss_interface_write+0x78>
   3534c:	a902      	add	r1, sp, #8
   3534e:	f00b f9a6 	bl	4069e <rpc_gnss_serialize_alm>
   35352:	e7e7      	b.n	35324 <gnss_interface_write+0x78>
   35354:	a902      	add	r1, sp, #8
   35356:	f00b f9cf 	bl	406f8 <rpc_gnss_serialize_klob>
   3535a:	e7e3      	b.n	35324 <gnss_interface_write+0x78>
   3535c:	a902      	add	r1, sp, #8
   3535e:	f00b f9e6 	bl	4072e <rpc_gnss_serialize_nequick>
   35362:	e7df      	b.n	35324 <gnss_interface_write+0x78>
   35364:	a902      	add	r1, sp, #8
   35366:	f00b f9f7 	bl	40758 <rpc_gnss_serialize_time_and_sv_tow>
   3536a:	e7db      	b.n	35324 <gnss_interface_write+0x78>
   3536c:	a902      	add	r1, sp, #8
   3536e:	f00b fa16 	bl	4079e <rpc_gnss_serialize_location>
   35372:	e7d7      	b.n	35324 <gnss_interface_write+0x78>
   35374:	a902      	add	r1, sp, #8
   35376:	f00b fa2f 	bl	407d8 <rpc_gnss_serialize_integrity>
   3537a:	e7d3      	b.n	35324 <gnss_interface_write+0x78>
   3537c:	6822      	ldr	r2, [r4, #0]
   3537e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   35382:	6022      	str	r2, [r4, #0]
   35384:	6822      	ldr	r2, [r4, #0]
   35386:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3538a:	6022      	str	r2, [r4, #0]
   3538c:	4618      	mov	r0, r3
   3538e:	b01e      	add	sp, #120	; 0x78
   35390:	bd70      	pop	{r4, r5, r6, pc}
   35392:	4629      	mov	r1, r5
   35394:	4630      	mov	r0, r6
   35396:	f7f3 fedf 	bl	29158 <nrf_modem_os_timedwait>
   3539a:	4603      	mov	r3, r0
   3539c:	e7cc      	b.n	35338 <gnss_interface_write+0x8c>
   3539e:	2b00      	cmp	r3, #0
   353a0:	d1ce      	bne.n	35340 <gnss_interface_write+0x94>
   353a2:	6822      	ldr	r2, [r4, #0]
   353a4:	0392      	lsls	r2, r2, #14
   353a6:	d4f1      	bmi.n	3538c <gnss_interface_write+0xe0>
   353a8:	6823      	ldr	r3, [r4, #0]
   353aa:	2005      	movs	r0, #5
   353ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   353b0:	6023      	str	r3, [r4, #0]
   353b2:	e784      	b.n	352be <gnss_interface_write+0x12>
   353b4:	49765443 	.word	0x49765443
   353b8:	20019fc4 	.word	0x20019fc4
   353bc:	2001562c 	.word	0x2001562c

000353c0 <gnss_interface_read>:
   353c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   353c4:	469a      	mov	sl, r3
   353c6:	4b7d      	ldr	r3, [pc, #500]	; (355bc <gnss_interface_read+0x1fc>)
   353c8:	460c      	mov	r4, r1
   353ca:	4298      	cmp	r0, r3
   353cc:	b0b5      	sub	sp, #212	; 0xd4
   353ce:	d008      	beq.n	353e2 <gnss_interface_read+0x22>
   353d0:	2009      	movs	r0, #9
   353d2:	f7f3 ff79 	bl	292c8 <nrf_modem_os_errno_set>
   353d6:	f04f 35ff 	mov.w	r5, #4294967295
   353da:	4628      	mov	r0, r5
   353dc:	b035      	add	sp, #212	; 0xd4
   353de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   353e2:	b109      	cbz	r1, 353e8 <gnss_interface_read+0x28>
   353e4:	2ad7      	cmp	r2, #215	; 0xd7
   353e6:	d801      	bhi.n	353ec <gnss_interface_read+0x2c>
   353e8:	2016      	movs	r0, #22
   353ea:	e7f2      	b.n	353d2 <gnss_interface_read+0x12>
   353ec:	4b74      	ldr	r3, [pc, #464]	; (355c0 <gnss_interface_read+0x200>)
   353ee:	681a      	ldr	r2, [r3, #0]
   353f0:	461e      	mov	r6, r3
   353f2:	b292      	uxth	r2, r2
   353f4:	2a04      	cmp	r2, #4
   353f6:	d005      	beq.n	35404 <gnss_interface_read+0x44>
   353f8:	681b      	ldr	r3, [r3, #0]
   353fa:	b29b      	uxth	r3, r3
   353fc:	2b02      	cmp	r3, #2
   353fe:	d001      	beq.n	35404 <gnss_interface_read+0x44>
   35400:	2039      	movs	r0, #57	; 0x39
   35402:	e7e6      	b.n	353d2 <gnss_interface_read+0x12>
   35404:	f1ba 0f00 	cmp.w	sl, #0
   35408:	d004      	beq.n	35414 <gnss_interface_read+0x54>
   3540a:	f01a 0f2a 	tst.w	sl, #42	; 0x2a
   3540e:	d101      	bne.n	35414 <gnss_interface_read+0x54>
   35410:	202d      	movs	r0, #45	; 0x2d
   35412:	e7de      	b.n	353d2 <gnss_interface_read+0x12>
   35414:	6833      	ldr	r3, [r6, #0]
   35416:	f04f 0900 	mov.w	r9, #0
   3541a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   3541e:	6033      	str	r3, [r6, #0]
   35420:	23b6      	movs	r3, #182	; 0xb6
   35422:	9303      	str	r3, [sp, #12]
   35424:	f10d 0306 	add.w	r3, sp, #6
   35428:	9304      	str	r3, [sp, #16]
   3542a:	2302      	movs	r3, #2
   3542c:	f10d 0818 	add.w	r8, sp, #24
   35430:	4f64      	ldr	r7, [pc, #400]	; (355c4 <gnss_interface_read+0x204>)
   35432:	f8df b188 	ldr.w	fp, [pc, #392]	; 355bc <gnss_interface_read+0x1fc>
   35436:	f8cd 8008 	str.w	r8, [sp, #8]
   3543a:	9305      	str	r3, [sp, #20]
   3543c:	6838      	ldr	r0, [r7, #0]
   3543e:	a902      	add	r1, sp, #8
   35440:	6802      	ldr	r2, [r0, #0]
   35442:	6895      	ldr	r5, [r2, #8]
   35444:	4652      	mov	r2, sl
   35446:	47a8      	blx	r5
   35448:	1e05      	subs	r5, r0, #0
   3544a:	da13      	bge.n	35474 <gnss_interface_read+0xb4>
   3544c:	f01a 0f02 	tst.w	sl, #2
   35450:	d10e      	bne.n	35470 <gnss_interface_read+0xb0>
   35452:	4d5d      	ldr	r5, [pc, #372]	; (355c8 <gnss_interface_read+0x208>)
   35454:	6832      	ldr	r2, [r6, #0]
   35456:	495d      	ldr	r1, [pc, #372]	; (355cc <gnss_interface_read+0x20c>)
   35458:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
   3545c:	ea52 0309 	orrs.w	r3, r2, r9
   35460:	7828      	ldrb	r0, [r5, #0]
   35462:	d027      	beq.n	354b4 <gnss_interface_read+0xf4>
   35464:	2800      	cmp	r0, #0
   35466:	d1e9      	bne.n	3543c <gnss_interface_read+0x7c>
   35468:	f04f 0970 	mov.w	r9, #112	; 0x70
   3546c:	4648      	mov	r0, r9
   3546e:	e7b0      	b.n	353d2 <gnss_interface_read+0x12>
   35470:	1c6b      	adds	r3, r5, #1
   35472:	d026      	beq.n	354c2 <gnss_interface_read+0x102>
   35474:	f244 0202 	movw	r2, #16386	; 0x4002
   35478:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   3547c:	4293      	cmp	r3, r2
   3547e:	d127      	bne.n	354d0 <gnss_interface_read+0x110>
   35480:	4640      	mov	r0, r8
   35482:	f7e7 feeb 	bl	1d25c <strlen>
   35486:	2302      	movs	r3, #2
   35488:	1c45      	adds	r5, r0, #1
   3548a:	f804 3b08 	strb.w	r3, [r4], #8
   3548e:	b2ad      	uxth	r5, r5
   35490:	462a      	mov	r2, r5
   35492:	4641      	mov	r1, r8
   35494:	4620      	mov	r0, r4
   35496:	f00c fc02 	bl	41c9e <memcpy>
   3549a:	3508      	adds	r5, #8
   3549c:	4b49      	ldr	r3, [pc, #292]	; (355c4 <gnss_interface_read+0x204>)
   3549e:	6818      	ldr	r0, [r3, #0]
   354a0:	6803      	ldr	r3, [r0, #0]
   354a2:	68db      	ldr	r3, [r3, #12]
   354a4:	4798      	blx	r3
   354a6:	2800      	cmp	r0, #0
   354a8:	bfc2      	ittt	gt
   354aa:	6833      	ldrgt	r3, [r6, #0]
   354ac:	f443 3380 	orrgt.w	r3, r3, #65536	; 0x10000
   354b0:	6033      	strgt	r3, [r6, #0]
   354b2:	e792      	b.n	353da <gnss_interface_read+0x1a>
   354b4:	2800      	cmp	r0, #0
   354b6:	d0d7      	beq.n	35468 <gnss_interface_read+0xa8>
   354b8:	4658      	mov	r0, fp
   354ba:	f7f3 fe4d 	bl	29158 <nrf_modem_os_timedwait>
   354be:	4681      	mov	r9, r0
   354c0:	e7c8      	b.n	35454 <gnss_interface_read+0x94>
   354c2:	f1b9 0f00 	cmp.w	r9, #0
   354c6:	d1d1      	bne.n	3546c <gnss_interface_read+0xac>
   354c8:	2023      	movs	r0, #35	; 0x23
   354ca:	f7f3 fefd 	bl	292c8 <nrf_modem_os_errno_set>
   354ce:	e784      	b.n	353da <gnss_interface_read+0x1a>
   354d0:	f244 0201 	movw	r2, #16385	; 0x4001
   354d4:	4293      	cmp	r3, r2
   354d6:	d160      	bne.n	3559a <gnss_interface_read+0x1da>
   354d8:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
   354dc:	2301      	movs	r3, #1
   354de:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
   354e2:	7023      	strb	r3, [r4, #0]
   354e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   354e8:	e9c4 2304 	strd	r2, r3, [r4, #16]
   354ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   354ee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
   354f2:	61a3      	str	r3, [r4, #24]
   354f4:	f8dd 5045 	ldr.w	r5, [sp, #69]	; 0x45
   354f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   354fa:	6365      	str	r5, [r4, #52]	; 0x34
   354fc:	61e3      	str	r3, [r4, #28]
   354fe:	f8dd 5049 	ldr.w	r5, [sp, #73]	; 0x49
   35502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   35504:	63a5      	str	r5, [r4, #56]	; 0x38
   35506:	6223      	str	r3, [r4, #32]
   35508:	f8dd 504d 	ldr.w	r5, [sp, #77]	; 0x4d
   3550c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   3550e:	63e5      	str	r5, [r4, #60]	; 0x3c
   35510:	6263      	str	r3, [r4, #36]	; 0x24
   35512:	f8dd 5051 	ldr.w	r5, [sp, #81]	; 0x51
   35516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   35518:	6425      	str	r5, [r4, #64]	; 0x40
   3551a:	62a3      	str	r3, [r4, #40]	; 0x28
   3551c:	f89d 5042 	ldrb.w	r5, [sp, #66]	; 0x42
   35520:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   35524:	e9c4 0102 	strd	r0, r1, [r4, #8]
   35528:	85a3      	strh	r3, [r4, #44]	; 0x2c
   3552a:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
   3552e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   35532:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   35536:	200a      	movs	r0, #10
   35538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3553c:	2200      	movs	r2, #0
   3553e:	8623      	strh	r3, [r4, #48]	; 0x30
   35540:	f8b8 303e 	ldrh.w	r3, [r8, #62]	; 0x3e
   35544:	340c      	adds	r4, #12
   35546:	8763      	strh	r3, [r4, #58]	; 0x3a
   35548:	f898 3040 	ldrb.w	r3, [r8, #64]	; 0x40
   3554c:	f108 080a 	add.w	r8, r8, #10
   35550:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   35554:	ab34      	add	r3, sp, #208	; 0xd0
   35556:	fb00 3302 	mla	r3, r0, r2, r3
   3555a:	f813 5c76 	ldrb.w	r5, [r3, #-118]
   3555e:	f813 1c77 	ldrb.w	r1, [r3, #-119]
   35562:	3201      	adds	r2, #1
   35564:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   35568:	87e1      	strh	r1, [r4, #62]	; 0x3e
   3556a:	f813 1c75 	ldrb.w	r1, [r3, #-117]
   3556e:	f813 5c74 	ldrb.w	r5, [r3, #-116]
   35572:	2a0c      	cmp	r2, #12
   35574:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   35578:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
   3557c:	f813 1c73 	ldrb.w	r1, [r3, #-115]
   35580:	f813 3c72 	ldrb.w	r3, [r3, #-114]
   35584:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
   35588:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
   3558c:	f898 303d 	ldrb.w	r3, [r8, #61]	; 0x3d
   35590:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
   35594:	d1d4      	bne.n	35540 <gnss_interface_read+0x180>
   35596:	25d8      	movs	r5, #216	; 0xd8
   35598:	e780      	b.n	3549c <gnss_interface_read+0xdc>
   3559a:	f244 0203 	movw	r2, #16387	; 0x4003
   3559e:	4293      	cmp	r3, r2
   355a0:	f47f af22 	bne.w	353e8 <gnss_interface_read+0x28>
   355a4:	2303      	movs	r3, #3
   355a6:	7023      	strb	r3, [r4, #0]
   355a8:	9b06      	ldr	r3, [sp, #24]
   355aa:	2514      	movs	r5, #20
   355ac:	60a3      	str	r3, [r4, #8]
   355ae:	9b07      	ldr	r3, [sp, #28]
   355b0:	60e3      	str	r3, [r4, #12]
   355b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   355b6:	6123      	str	r3, [r4, #16]
   355b8:	e770      	b.n	3549c <gnss_interface_read+0xdc>
   355ba:	bf00      	nop
   355bc:	49765443 	.word	0x49765443
   355c0:	20019fc4 	.word	0x20019fc4
   355c4:	20019fcc 	.word	0x20019fcc
   355c8:	20020d4f 	.word	0x20020d4f
   355cc:	2001562c 	.word	0x2001562c

000355d0 <gnss_interface_setopt>:
   355d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   355d4:	4c75      	ldr	r4, [pc, #468]	; (357ac <gnss_interface_setopt+0x1dc>)
   355d6:	4616      	mov	r6, r2
   355d8:	6822      	ldr	r2, [r4, #0]
   355da:	b087      	sub	sp, #28
   355dc:	b292      	uxth	r2, r2
   355de:	2a02      	cmp	r2, #2
   355e0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   355e2:	d007      	beq.n	355f4 <gnss_interface_setopt+0x24>
   355e4:	2e08      	cmp	r6, #8
   355e6:	d005      	beq.n	355f4 <gnss_interface_setopt+0x24>
   355e8:	f1a6 020a 	sub.w	r2, r6, #10
   355ec:	2a01      	cmp	r2, #1
   355ee:	d901      	bls.n	355f4 <gnss_interface_setopt+0x24>
   355f0:	200e      	movs	r0, #14
   355f2:	e003      	b.n	355fc <gnss_interface_setopt+0x2c>
   355f4:	6822      	ldr	r2, [r4, #0]
   355f6:	0252      	lsls	r2, r2, #9
   355f8:	d508      	bpl.n	3560c <gnss_interface_setopt+0x3c>
   355fa:	2073      	movs	r0, #115	; 0x73
   355fc:	f7f3 fe64 	bl	292c8 <nrf_modem_os_errno_set>
   35600:	f04f 35ff 	mov.w	r5, #4294967295
   35604:	4628      	mov	r0, r5
   35606:	b007      	add	sp, #28
   35608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3560c:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   35610:	d001      	beq.n	35616 <gnss_interface_setopt+0x46>
   35612:	202a      	movs	r0, #42	; 0x2a
   35614:	e7f2      	b.n	355fc <gnss_interface_setopt+0x2c>
   35616:	4a66      	ldr	r2, [pc, #408]	; (357b0 <gnss_interface_setopt+0x1e0>)
   35618:	4290      	cmp	r0, r2
   3561a:	d001      	beq.n	35620 <gnss_interface_setopt+0x50>
   3561c:	2009      	movs	r0, #9
   3561e:	e7ed      	b.n	355fc <gnss_interface_setopt+0x2c>
   35620:	f1a6 020a 	sub.w	r2, r6, #10
   35624:	2a01      	cmp	r2, #1
   35626:	d902      	bls.n	3562e <gnss_interface_setopt+0x5e>
   35628:	b90b      	cbnz	r3, 3562e <gnss_interface_setopt+0x5e>
   3562a:	2016      	movs	r0, #22
   3562c:	e7e6      	b.n	355fc <gnss_interface_setopt+0x2c>
   3562e:	1e72      	subs	r2, r6, #1
   35630:	2a0a      	cmp	r2, #10
   35632:	d8fa      	bhi.n	3562a <gnss_interface_setopt+0x5a>
   35634:	e8df f002 	tbb	[pc, r2]
   35638:	4b45063d 	.word	0x4b45063d
   3563c:	806a5a53 	.word	0x806a5a53
   35640:	9362      	.short	0x9362
   35642:	a5          	.byte	0xa5
   35643:	00          	.byte	0x00
   35644:	2d02      	cmp	r5, #2
   35646:	d1f0      	bne.n	3562a <gnss_interface_setopt+0x5a>
   35648:	2210      	movs	r2, #16
   3564a:	881b      	ldrh	r3, [r3, #0]
   3564c:	9202      	str	r2, [sp, #8]
   3564e:	f8ad 3011 	strh.w	r3, [sp, #17]
   35652:	f241 1003 	movw	r0, #4355	; 0x1103
   35656:	6823      	ldr	r3, [r4, #0]
   35658:	2212      	movs	r2, #18
   3565a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   3565e:	a901      	add	r1, sp, #4
   35660:	6023      	str	r3, [r4, #0]
   35662:	f7ff fd1f 	bl	350a4 <send_message>
   35666:	4605      	mov	r5, r0
   35668:	2800      	cmp	r0, #0
   3566a:	f040 8091 	bne.w	35790 <gnss_interface_setopt+0x1c0>
   3566e:	f8df 9148 	ldr.w	r9, [pc, #328]	; 357b8 <gnss_interface_setopt+0x1e8>
   35672:	f8df 813c 	ldr.w	r8, [pc, #316]	; 357b0 <gnss_interface_setopt+0x1e0>
   35676:	4649      	mov	r1, r9
   35678:	4640      	mov	r0, r8
   3567a:	f7f3 fd6d 	bl	29158 <nrf_modem_os_timedwait>
   3567e:	6827      	ldr	r7, [r4, #0]
   35680:	f417 0780 	ands.w	r7, r7, #4194304	; 0x400000
   35684:	d1f7      	bne.n	35676 <gnss_interface_setopt+0xa6>
   35686:	f8df 8134 	ldr.w	r8, [pc, #308]	; 357bc <gnss_interface_setopt+0x1ec>
   3568a:	f8d8 0000 	ldr.w	r0, [r8]
   3568e:	b118      	cbz	r0, 35698 <gnss_interface_setopt+0xc8>
   35690:	f00a ff97 	bl	405c2 <rpc_gnss_client_data_free>
   35694:	f8c8 7000 	str.w	r7, [r8]
   35698:	6823      	ldr	r3, [r4, #0]
   3569a:	021b      	lsls	r3, r3, #8
   3569c:	d47d      	bmi.n	3579a <gnss_interface_setopt+0x1ca>
   3569e:	200e      	movs	r0, #14
   356a0:	f7f3 fe12 	bl	292c8 <nrf_modem_os_errno_set>
   356a4:	f04f 35ff 	mov.w	r5, #4294967295
   356a8:	6823      	ldr	r3, [r4, #0]
   356aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   356ae:	6023      	str	r3, [r4, #0]
   356b0:	e7a8      	b.n	35604 <gnss_interface_setopt+0x34>
   356b2:	2d02      	cmp	r5, #2
   356b4:	d1b9      	bne.n	3562a <gnss_interface_setopt+0x5a>
   356b6:	2208      	movs	r2, #8
   356b8:	881b      	ldrh	r3, [r3, #0]
   356ba:	9202      	str	r2, [sp, #8]
   356bc:	f8ad 300f 	strh.w	r3, [sp, #15]
   356c0:	e7c7      	b.n	35652 <gnss_interface_setopt+0x82>
   356c2:	2d01      	cmp	r5, #1
   356c4:	d1b1      	bne.n	3562a <gnss_interface_setopt+0x5a>
   356c6:	781b      	ldrb	r3, [r3, #0]
   356c8:	2b01      	cmp	r3, #1
   356ca:	d0c2      	beq.n	35652 <gnss_interface_setopt+0x82>
   356cc:	e7ad      	b.n	3562a <gnss_interface_setopt+0x5a>
   356ce:	2d02      	cmp	r5, #2
   356d0:	d1ab      	bne.n	3562a <gnss_interface_setopt+0x5a>
   356d2:	2220      	movs	r2, #32
   356d4:	881b      	ldrh	r3, [r3, #0]
   356d6:	9202      	str	r2, [sp, #8]
   356d8:	f8ad 3013 	strh.w	r3, [sp, #19]
   356dc:	e7b9      	b.n	35652 <gnss_interface_setopt+0x82>
   356de:	2d01      	cmp	r5, #1
   356e0:	d1a3      	bne.n	3562a <gnss_interface_setopt+0x5a>
   356e2:	781b      	ldrb	r3, [r3, #0]
   356e4:	9502      	str	r5, [sp, #8]
   356e6:	f88d 300c 	strb.w	r3, [sp, #12]
   356ea:	e7b2      	b.n	35652 <gnss_interface_setopt+0x82>
   356ec:	2d01      	cmp	r5, #1
   356ee:	d19c      	bne.n	3562a <gnss_interface_setopt+0x5a>
   356f0:	2202      	movs	r2, #2
   356f2:	781b      	ldrb	r3, [r3, #0]
   356f4:	9202      	str	r2, [sp, #8]
   356f6:	f88d 300d 	strb.w	r3, [sp, #13]
   356fa:	e7aa      	b.n	35652 <gnss_interface_setopt+0x82>
   356fc:	2d01      	cmp	r5, #1
   356fe:	d194      	bne.n	3562a <gnss_interface_setopt+0x5a>
   35700:	2240      	movs	r2, #64	; 0x40
   35702:	781b      	ldrb	r3, [r3, #0]
   35704:	9202      	str	r2, [sp, #8]
   35706:	f88d 3015 	strb.w	r3, [sp, #21]
   3570a:	e7a2      	b.n	35652 <gnss_interface_setopt+0x82>
   3570c:	6822      	ldr	r2, [r4, #0]
   3570e:	b292      	uxth	r2, r2
   35710:	2a02      	cmp	r2, #2
   35712:	f47f af6d 	bne.w	355f0 <gnss_interface_setopt+0x20>
   35716:	2d04      	cmp	r5, #4
   35718:	d187      	bne.n	3562a <gnss_interface_setopt+0x5a>
   3571a:	2201      	movs	r2, #1
   3571c:	681b      	ldr	r3, [r3, #0]
   3571e:	f88d 2008 	strb.w	r2, [sp, #8]
   35722:	f8cd 3009 	str.w	r3, [sp, #9]
   35726:	6823      	ldr	r3, [r4, #0]
   35728:	0c1b      	lsrs	r3, r3, #16
   3572a:	041b      	lsls	r3, r3, #16
   3572c:	f043 0303 	orr.w	r3, r3, #3
   35730:	6023      	str	r3, [r4, #0]
   35732:	f241 0004 	movw	r0, #4100	; 0x1004
   35736:	e78e      	b.n	35656 <gnss_interface_setopt+0x86>
   35738:	6822      	ldr	r2, [r4, #0]
   3573a:	b292      	uxth	r2, r2
   3573c:	2a04      	cmp	r2, #4
   3573e:	d004      	beq.n	3574a <gnss_interface_setopt+0x17a>
   35740:	6822      	ldr	r2, [r4, #0]
   35742:	b292      	uxth	r2, r2
   35744:	2a02      	cmp	r2, #2
   35746:	f47f af53 	bne.w	355f0 <gnss_interface_setopt+0x20>
   3574a:	2200      	movs	r2, #0
   3574c:	2d04      	cmp	r5, #4
   3574e:	f88d 2008 	strb.w	r2, [sp, #8]
   35752:	f47f af6a 	bne.w	3562a <gnss_interface_setopt+0x5a>
   35756:	681b      	ldr	r3, [r3, #0]
   35758:	f8cd 3009 	str.w	r3, [sp, #9]
   3575c:	e7e9      	b.n	35732 <gnss_interface_setopt+0x162>
   3575e:	6823      	ldr	r3, [r4, #0]
   35760:	b29b      	uxth	r3, r3
   35762:	2b04      	cmp	r3, #4
   35764:	f47f af44 	bne.w	355f0 <gnss_interface_setopt+0x20>
   35768:	2302      	movs	r3, #2
   3576a:	f88d 3008 	strb.w	r3, [sp, #8]
   3576e:	2300      	movs	r3, #0
   35770:	f88d 3009 	strb.w	r3, [sp, #9]
   35774:	f88d 300a 	strb.w	r3, [sp, #10]
   35778:	f88d 300b 	strb.w	r3, [sp, #11]
   3577c:	f88d 300c 	strb.w	r3, [sp, #12]
   35780:	e7d7      	b.n	35732 <gnss_interface_setopt+0x162>
   35782:	6823      	ldr	r3, [r4, #0]
   35784:	b29b      	uxth	r3, r3
   35786:	2b04      	cmp	r3, #4
   35788:	f47f af32 	bne.w	355f0 <gnss_interface_setopt+0x20>
   3578c:	2303      	movs	r3, #3
   3578e:	e7ec      	b.n	3576a <gnss_interface_setopt+0x19a>
   35790:	6823      	ldr	r3, [r4, #0]
   35792:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
   35796:	6023      	str	r3, [r4, #0]
   35798:	e72a      	b.n	355f0 <gnss_interface_setopt+0x20>
   3579a:	2e08      	cmp	r6, #8
   3579c:	d184      	bne.n	356a8 <gnss_interface_setopt+0xd8>
   3579e:	4b05      	ldr	r3, [pc, #20]	; (357b4 <gnss_interface_setopt+0x1e4>)
   357a0:	6818      	ldr	r0, [r3, #0]
   357a2:	6803      	ldr	r3, [r0, #0]
   357a4:	691b      	ldr	r3, [r3, #16]
   357a6:	4798      	blx	r3
   357a8:	e77e      	b.n	356a8 <gnss_interface_setopt+0xd8>
   357aa:	bf00      	nop
   357ac:	20019fc4 	.word	0x20019fc4
   357b0:	49765443 	.word	0x49765443
   357b4:	20019fcc 	.word	0x20019fcc
   357b8:	2001562c 	.word	0x2001562c
   357bc:	20019fc8 	.word	0x20019fc8

000357c0 <gnss_interface_getopt>:
   357c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   357c4:	461d      	mov	r5, r3
   357c6:	4b44      	ldr	r3, [pc, #272]	; (358d8 <gnss_interface_getopt+0x118>)
   357c8:	b087      	sub	sp, #28
   357ca:	681e      	ldr	r6, [r3, #0]
   357cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   357ce:	b2b6      	uxth	r6, r6
   357d0:	2e02      	cmp	r6, #2
   357d2:	461e      	mov	r6, r3
   357d4:	d001      	beq.n	357da <gnss_interface_getopt+0x1a>
   357d6:	200e      	movs	r0, #14
   357d8:	e003      	b.n	357e2 <gnss_interface_getopt+0x22>
   357da:	681f      	ldr	r7, [r3, #0]
   357dc:	03ff      	lsls	r7, r7, #15
   357de:	d508      	bpl.n	357f2 <gnss_interface_getopt+0x32>
   357e0:	2005      	movs	r0, #5
   357e2:	f7f3 fd71 	bl	292c8 <nrf_modem_os_errno_set>
   357e6:	f04f 34ff 	mov.w	r4, #4294967295
   357ea:	4620      	mov	r0, r4
   357ec:	b007      	add	sp, #28
   357ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   357f2:	681b      	ldr	r3, [r3, #0]
   357f4:	01df      	lsls	r7, r3, #7
   357f6:	d501      	bpl.n	357fc <gnss_interface_getopt+0x3c>
   357f8:	2073      	movs	r0, #115	; 0x73
   357fa:	e7f2      	b.n	357e2 <gnss_interface_getopt+0x22>
   357fc:	f5b1 7f01 	cmp.w	r1, #516	; 0x204
   35800:	d001      	beq.n	35806 <gnss_interface_getopt+0x46>
   35802:	202a      	movs	r0, #42	; 0x2a
   35804:	e7ed      	b.n	357e2 <gnss_interface_getopt+0x22>
   35806:	4b35      	ldr	r3, [pc, #212]	; (358dc <gnss_interface_getopt+0x11c>)
   35808:	4298      	cmp	r0, r3
   3580a:	d001      	beq.n	35810 <gnss_interface_getopt+0x50>
   3580c:	2009      	movs	r0, #9
   3580e:	e7e8      	b.n	357e2 <gnss_interface_getopt+0x22>
   35810:	b105      	cbz	r5, 35814 <gnss_interface_getopt+0x54>
   35812:	b90c      	cbnz	r4, 35818 <gnss_interface_getopt+0x58>
   35814:	2016      	movs	r0, #22
   35816:	e7e4      	b.n	357e2 <gnss_interface_getopt+0x22>
   35818:	1e57      	subs	r7, r2, #1
   3581a:	2f05      	cmp	r7, #5
   3581c:	d8fa      	bhi.n	35814 <gnss_interface_getopt+0x54>
   3581e:	e8df f007 	tbb	[pc, r7]
   35822:	0303      	.short	0x0303
   35824:	30300330 	.word	0x30300330
   35828:	6823      	ldr	r3, [r4, #0]
   3582a:	2b02      	cmp	r3, #2
   3582c:	d1f2      	bne.n	35814 <gnss_interface_getopt+0x54>
   3582e:	6833      	ldr	r3, [r6, #0]
   35830:	2212      	movs	r2, #18
   35832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   35836:	2100      	movs	r1, #0
   35838:	a801      	add	r0, sp, #4
   3583a:	6033      	str	r3, [r6, #0]
   3583c:	f00c fa4f 	bl	41cde <memset>
   35840:	2212      	movs	r2, #18
   35842:	f241 1002 	movw	r0, #4354	; 0x1102
   35846:	a901      	add	r1, sp, #4
   35848:	f7ff fc2c 	bl	350a4 <send_message>
   3584c:	4604      	mov	r4, r0
   3584e:	b9d8      	cbnz	r0, 35888 <gnss_interface_getopt+0xc8>
   35850:	f8df 9090 	ldr.w	r9, [pc, #144]	; 358e4 <gnss_interface_getopt+0x124>
   35854:	f8df 8084 	ldr.w	r8, [pc, #132]	; 358dc <gnss_interface_getopt+0x11c>
   35858:	4649      	mov	r1, r9
   3585a:	4640      	mov	r0, r8
   3585c:	f7f3 fc7c 	bl	29158 <nrf_modem_os_timedwait>
   35860:	6833      	ldr	r3, [r6, #0]
   35862:	01d9      	lsls	r1, r3, #7
   35864:	d4f8      	bmi.n	35858 <gnss_interface_getopt+0x98>
   35866:	4a1e      	ldr	r2, [pc, #120]	; (358e0 <gnss_interface_getopt+0x120>)
   35868:	6813      	ldr	r3, [r2, #0]
   3586a:	4690      	mov	r8, r2
   3586c:	b1db      	cbz	r3, 358a6 <gnss_interface_getopt+0xe6>
   3586e:	6832      	ldr	r2, [r6, #0]
   35870:	0192      	lsls	r2, r2, #6
   35872:	d518      	bpl.n	358a6 <gnss_interface_getopt+0xe6>
   35874:	2f05      	cmp	r7, #5
   35876:	d828      	bhi.n	358ca <gnss_interface_getopt+0x10a>
   35878:	e8df f007 	tbb	[pc, r7]
   3587c:	201d1a0b 	.word	0x201d1a0b
   35880:	2523      	.short	0x2523
   35882:	6823      	ldr	r3, [r4, #0]
   35884:	2b01      	cmp	r3, #1
   35886:	e7d1      	b.n	3582c <gnss_interface_getopt+0x6c>
   35888:	6833      	ldr	r3, [r6, #0]
   3588a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   3588e:	6033      	str	r3, [r6, #0]
   35890:	e7a1      	b.n	357d6 <gnss_interface_getopt+0x16>
   35892:	f8b3 300f 	ldrh.w	r3, [r3, #15]
   35896:	802b      	strh	r3, [r5, #0]
   35898:	f8d8 0000 	ldr.w	r0, [r8]
   3589c:	f00a fe91 	bl	405c2 <rpc_gnss_client_data_free>
   358a0:	2300      	movs	r3, #0
   358a2:	f8c8 3000 	str.w	r3, [r8]
   358a6:	6833      	ldr	r3, [r6, #0]
   358a8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   358ac:	6033      	str	r3, [r6, #0]
   358ae:	e79c      	b.n	357ea <gnss_interface_getopt+0x2a>
   358b0:	f8b3 3011 	ldrh.w	r3, [r3, #17]
   358b4:	e7ef      	b.n	35896 <gnss_interface_getopt+0xd6>
   358b6:	7b9b      	ldrb	r3, [r3, #14]
   358b8:	702b      	strb	r3, [r5, #0]
   358ba:	e7ed      	b.n	35898 <gnss_interface_getopt+0xd8>
   358bc:	f8b3 3013 	ldrh.w	r3, [r3, #19]
   358c0:	e7e9      	b.n	35896 <gnss_interface_getopt+0xd6>
   358c2:	7b1b      	ldrb	r3, [r3, #12]
   358c4:	e7f8      	b.n	358b8 <gnss_interface_getopt+0xf8>
   358c6:	7b5b      	ldrb	r3, [r3, #13]
   358c8:	e7f6      	b.n	358b8 <gnss_interface_getopt+0xf8>
   358ca:	2016      	movs	r0, #22
   358cc:	f7f3 fcfc 	bl	292c8 <nrf_modem_os_errno_set>
   358d0:	f04f 34ff 	mov.w	r4, #4294967295
   358d4:	e7e0      	b.n	35898 <gnss_interface_getopt+0xd8>
   358d6:	bf00      	nop
   358d8:	20019fc4 	.word	0x20019fc4
   358dc:	49765443 	.word	0x49765443
   358e0:	20019fc8 	.word	0x20019fc8
   358e4:	2001562c 	.word	0x2001562c

000358e8 <gnss_interface_init>:
   358e8:	2000      	movs	r0, #0
   358ea:	4a09      	ldr	r2, [pc, #36]	; (35910 <gnss_interface_init+0x28>)
   358ec:	b510      	push	{r4, lr}
   358ee:	6811      	ldr	r1, [r2, #0]
   358f0:	4c08      	ldr	r4, [pc, #32]	; (35914 <gnss_interface_init+0x2c>)
   358f2:	4b09      	ldr	r3, [pc, #36]	; (35918 <gnss_interface_init+0x30>)
   358f4:	4021      	ands	r1, r4
   358f6:	8018      	strh	r0, [r3, #0]
   358f8:	4b08      	ldr	r3, [pc, #32]	; (3591c <gnss_interface_init+0x34>)
   358fa:	6011      	str	r1, [r2, #0]
   358fc:	6018      	str	r0, [r3, #0]
   358fe:	6813      	ldr	r3, [r2, #0]
   35900:	4023      	ands	r3, r4
   35902:	f043 0301 	orr.w	r3, r3, #1
   35906:	6013      	str	r3, [r2, #0]
   35908:	2201      	movs	r2, #1
   3590a:	4b05      	ldr	r3, [pc, #20]	; (35920 <gnss_interface_init+0x38>)
   3590c:	701a      	strb	r2, [r3, #0]
   3590e:	bd10      	pop	{r4, pc}
   35910:	20019fc4 	.word	0x20019fc4
   35914:	ffff0000 	.word	0xffff0000
   35918:	2001e0ec 	.word	0x2001e0ec
   3591c:	20019fc8 	.word	0x20019fc8
   35920:	20020d4f 	.word	0x20020d4f

00035924 <gnss_interface_deinit>:
   35924:	b538      	push	{r3, r4, r5, lr}
   35926:	4b07      	ldr	r3, [pc, #28]	; (35944 <gnss_interface_deinit+0x20>)
   35928:	681b      	ldr	r3, [r3, #0]
   3592a:	b29b      	uxth	r3, r3
   3592c:	b143      	cbz	r3, 35940 <gnss_interface_deinit+0x1c>
   3592e:	2500      	movs	r5, #0
   35930:	4c05      	ldr	r4, [pc, #20]	; (35948 <gnss_interface_deinit+0x24>)
   35932:	4b06      	ldr	r3, [pc, #24]	; (3594c <gnss_interface_deinit+0x28>)
   35934:	6820      	ldr	r0, [r4, #0]
   35936:	701d      	strb	r5, [r3, #0]
   35938:	b110      	cbz	r0, 35940 <gnss_interface_deinit+0x1c>
   3593a:	f00b fe22 	bl	41582 <packet_handler_delete>
   3593e:	6025      	str	r5, [r4, #0]
   35940:	2000      	movs	r0, #0
   35942:	bd38      	pop	{r3, r4, r5, pc}
   35944:	20019fc4 	.word	0x20019fc4
   35948:	20019fcc 	.word	0x20019fcc
   3594c:	20020d4f 	.word	0x20020d4f

00035950 <gnss_interface_open>:
   35950:	4b16      	ldr	r3, [pc, #88]	; (359ac <gnss_interface_open+0x5c>)
   35952:	4608      	mov	r0, r1
   35954:	781b      	ldrb	r3, [r3, #0]
   35956:	b510      	push	{r4, lr}
   35958:	b92b      	cbnz	r3, 35966 <gnss_interface_open+0x16>
   3595a:	2070      	movs	r0, #112	; 0x70
   3595c:	f7f3 fcb4 	bl	292c8 <nrf_modem_os_errno_set>
   35960:	f04f 30ff 	mov.w	r0, #4294967295
   35964:	e01f      	b.n	359a6 <gnss_interface_open+0x56>
   35966:	2902      	cmp	r1, #2
   35968:	d001      	beq.n	3596e <gnss_interface_open+0x1e>
   3596a:	2029      	movs	r0, #41	; 0x29
   3596c:	e7f6      	b.n	3595c <gnss_interface_open+0xc>
   3596e:	4c10      	ldr	r4, [pc, #64]	; (359b0 <gnss_interface_open+0x60>)
   35970:	6823      	ldr	r3, [r4, #0]
   35972:	b29b      	uxth	r3, r3
   35974:	2b01      	cmp	r3, #1
   35976:	d001      	beq.n	3597c <gnss_interface_open+0x2c>
   35978:	2005      	movs	r0, #5
   3597a:	e7ef      	b.n	3595c <gnss_interface_open+0xc>
   3597c:	6823      	ldr	r3, [r4, #0]
   3597e:	2200      	movs	r2, #0
   35980:	0c1b      	lsrs	r3, r3, #16
   35982:	041b      	lsls	r3, r3, #16
   35984:	f043 0302 	orr.w	r3, r3, #2
   35988:	490a      	ldr	r1, [pc, #40]	; (359b4 <gnss_interface_open+0x64>)
   3598a:	6023      	str	r3, [r4, #0]
   3598c:	f000 fd30 	bl	363f0 <packet_handler_create>
   35990:	4a09      	ldr	r2, [pc, #36]	; (359b8 <gnss_interface_open+0x68>)
   35992:	6010      	str	r0, [r2, #0]
   35994:	b140      	cbz	r0, 359a8 <gnss_interface_open+0x58>
   35996:	6822      	ldr	r2, [r4, #0]
   35998:	6803      	ldr	r3, [r0, #0]
   3599a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   3599e:	681b      	ldr	r3, [r3, #0]
   359a0:	6022      	str	r2, [r4, #0]
   359a2:	4798      	blx	r3
   359a4:	4805      	ldr	r0, [pc, #20]	; (359bc <gnss_interface_open+0x6c>)
   359a6:	bd10      	pop	{r4, pc}
   359a8:	200e      	movs	r0, #14
   359aa:	e7d7      	b.n	3595c <gnss_interface_open+0xc>
   359ac:	20020d4f 	.word	0x20020d4f
   359b0:	20019fc4 	.word	0x20019fc4
   359b4:	00041235 	.word	0x00041235
   359b8:	20019fcc 	.word	0x20019fcc
   359bc:	49765443 	.word	0x49765443

000359c0 <gnss_interface_close>:
   359c0:	b530      	push	{r4, r5, lr}
   359c2:	4b14      	ldr	r3, [pc, #80]	; (35a14 <gnss_interface_close+0x54>)
   359c4:	b085      	sub	sp, #20
   359c6:	4298      	cmp	r0, r3
   359c8:	d006      	beq.n	359d8 <gnss_interface_close+0x18>
   359ca:	2009      	movs	r0, #9
   359cc:	f7f3 fc7c 	bl	292c8 <nrf_modem_os_errno_set>
   359d0:	f04f 30ff 	mov.w	r0, #4294967295
   359d4:	b005      	add	sp, #20
   359d6:	bd30      	pop	{r4, r5, pc}
   359d8:	4c0f      	ldr	r4, [pc, #60]	; (35a18 <gnss_interface_close+0x58>)
   359da:	6823      	ldr	r3, [r4, #0]
   359dc:	b29b      	uxth	r3, r3
   359de:	2b04      	cmp	r3, #4
   359e0:	d108      	bne.n	359f4 <gnss_interface_close+0x34>
   359e2:	2200      	movs	r2, #0
   359e4:	9300      	str	r3, [sp, #0]
   359e6:	9203      	str	r2, [sp, #12]
   359e8:	f44f 7101 	mov.w	r1, #516	; 0x204
   359ec:	2208      	movs	r2, #8
   359ee:	ab03      	add	r3, sp, #12
   359f0:	f00b ff02 	bl	417f8 <nrf_setsockopt>
   359f4:	4d09      	ldr	r5, [pc, #36]	; (35a1c <gnss_interface_close+0x5c>)
   359f6:	6828      	ldr	r0, [r5, #0]
   359f8:	b118      	cbz	r0, 35a02 <gnss_interface_close+0x42>
   359fa:	f00b fdc2 	bl	41582 <packet_handler_delete>
   359fe:	2300      	movs	r3, #0
   35a00:	602b      	str	r3, [r5, #0]
   35a02:	6823      	ldr	r3, [r4, #0]
   35a04:	2000      	movs	r0, #0
   35a06:	0c1b      	lsrs	r3, r3, #16
   35a08:	041b      	lsls	r3, r3, #16
   35a0a:	f043 0301 	orr.w	r3, r3, #1
   35a0e:	6023      	str	r3, [r4, #0]
   35a10:	e7e0      	b.n	359d4 <gnss_interface_close+0x14>
   35a12:	bf00      	nop
   35a14:	49765443 	.word	0x49765443
   35a18:	20019fc4 	.word	0x20019fc4
   35a1c:	20019fcc 	.word	0x20019fcc

00035a20 <handle_verify_and_covert>:
   35a20:	4a0b      	ldr	r2, [pc, #44]	; (35a50 <handle_verify_and_covert+0x30>)
   35a22:	0c03      	lsrs	r3, r0, #16
   35a24:	041b      	lsls	r3, r3, #16
   35a26:	4293      	cmp	r3, r2
   35a28:	d10f      	bne.n	35a4a <handle_verify_and_covert+0x2a>
   35a2a:	f020 40f1 	bic.w	r0, r0, #2021654528	; 0x78800000
   35a2e:	f420 10d0 	bic.w	r0, r0, #1703936	; 0x1a0000
   35a32:	2809      	cmp	r0, #9
   35a34:	dc09      	bgt.n	35a4a <handle_verify_and_covert+0x2a>
   35a36:	4b07      	ldr	r3, [pc, #28]	; (35a54 <handle_verify_and_covert+0x34>)
   35a38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   35a3c:	b12b      	cbz	r3, 35a4a <handle_verify_and_covert+0x2a>
   35a3e:	689b      	ldr	r3, [r3, #8]
   35a40:	2b00      	cmp	r3, #0
   35a42:	bf08      	it	eq
   35a44:	f06f 0008 	mvneq.w	r0, #8
   35a48:	4770      	bx	lr
   35a4a:	f06f 0008 	mvn.w	r0, #8
   35a4e:	4770      	bx	lr
   35a50:	789a0000 	.word	0x789a0000
   35a54:	20019fd4 	.word	0x20019fd4

00035a58 <command_write>:
   35a58:	4b0c      	ldr	r3, [pc, #48]	; (35a8c <command_write+0x34>)
   35a5a:	b513      	push	{r0, r1, r4, lr}
   35a5c:	480c      	ldr	r0, [pc, #48]	; (35a90 <command_write+0x38>)
   35a5e:	681c      	ldr	r4, [r3, #0]
   35a60:	f7e7 fbfc 	bl	1d25c <strlen>
   35a64:	2300      	movs	r3, #0
   35a66:	4602      	mov	r2, r0
   35a68:	e9cd 3300 	strd	r3, r3, [sp]
   35a6c:	4908      	ldr	r1, [pc, #32]	; (35a90 <command_write+0x38>)
   35a6e:	4620      	mov	r0, r4
   35a70:	f00b fad4 	bl	4101c <at_interface_write>
   35a74:	4604      	mov	r4, r0
   35a76:	4806      	ldr	r0, [pc, #24]	; (35a90 <command_write+0x38>)
   35a78:	f7e7 fbf0 	bl	1d25c <strlen>
   35a7c:	42a0      	cmp	r0, r4
   35a7e:	bf14      	ite	ne
   35a80:	f06f 0004 	mvnne.w	r0, #4
   35a84:	2000      	moveq	r0, #0
   35a86:	b002      	add	sp, #8
   35a88:	bd10      	pop	{r4, pc}
   35a8a:	bf00      	nop
   35a8c:	20019fd0 	.word	0x20019fd0
   35a90:	20020d51 	.word	0x20020d51

00035a94 <event_wait>:
   35a94:	2300      	movs	r3, #0
   35a96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   35a9a:	e9cd 3300 	strd	r3, r3, [sp]
   35a9e:	4606      	mov	r6, r0
   35aa0:	4818      	ldr	r0, [pc, #96]	; (35b04 <event_wait+0x70>)
   35aa2:	460d      	mov	r5, r1
   35aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
   35aa8:	4917      	ldr	r1, [pc, #92]	; (35b08 <event_wait+0x74>)
   35aaa:	6800      	ldr	r0, [r0, #0]
   35aac:	f00b fb20 	bl	410f0 <at_interface_read>
   35ab0:	4c16      	ldr	r4, [pc, #88]	; (35b0c <event_wait+0x78>)
   35ab2:	4607      	mov	r7, r0
   35ab4:	f854 8035 	ldr.w	r8, [r4, r5, lsl #3]
   35ab8:	4640      	mov	r0, r8
   35aba:	f7e7 fbcf 	bl	1d25c <strlen>
   35abe:	4287      	cmp	r7, r0
   35ac0:	4602      	mov	r2, r0
   35ac2:	db0d      	blt.n	35ae0 <event_wait+0x4c>
   35ac4:	4640      	mov	r0, r8
   35ac6:	4910      	ldr	r1, [pc, #64]	; (35b08 <event_wait+0x74>)
   35ac8:	f00c faf2 	bl	420b0 <strncmp>
   35acc:	b940      	cbnz	r0, 35ae0 <event_wait+0x4c>
   35ace:	4630      	mov	r0, r6
   35ad0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   35ad4:	684b      	ldr	r3, [r1, #4]
   35ad6:	490c      	ldr	r1, [pc, #48]	; (35b08 <event_wait+0x74>)
   35ad8:	b002      	add	sp, #8
   35ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   35ade:	4718      	bx	r3
   35ae0:	480b      	ldr	r0, [pc, #44]	; (35b10 <event_wait+0x7c>)
   35ae2:	f7e7 fbbb 	bl	1d25c <strlen>
   35ae6:	4908      	ldr	r1, [pc, #32]	; (35b08 <event_wait+0x74>)
   35ae8:	4602      	mov	r2, r0
   35aea:	4809      	ldr	r0, [pc, #36]	; (35b10 <event_wait+0x7c>)
   35aec:	f00c fae0 	bl	420b0 <strncmp>
   35af0:	2800      	cmp	r0, #0
   35af2:	bf14      	ite	ne
   35af4:	f06f 0004 	mvnne.w	r0, #4
   35af8:	f06f 0007 	mvneq.w	r0, #7
   35afc:	b002      	add	sp, #8
   35afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   35b02:	bf00      	nop
   35b04:	20019fd0 	.word	0x20019fd0
   35b08:	20020d51 	.word	0x20020d51
   35b0c:	00043f3c 	.word	0x00043f3c
   35b10:	00044d51 	.word	0x00044d51

00035b14 <pdn_state_get_parser>:
   35b14:	2300      	movs	r3, #0
   35b16:	b530      	push	{r4, r5, lr}
   35b18:	4605      	mov	r5, r0
   35b1a:	460c      	mov	r4, r1
   35b1c:	b085      	sub	sp, #20
   35b1e:	4608      	mov	r0, r1
   35b20:	e9cd 3300 	strd	r3, r3, [sp]
   35b24:	e9cd 3302 	strd	r3, r3, [sp, #8]
   35b28:	f00b fb92 	bl	41250 <spaces_remove>
   35b2c:	4b08      	ldr	r3, [pc, #32]	; (35b50 <pdn_state_get_parser+0x3c>)
   35b2e:	4a09      	ldr	r2, [pc, #36]	; (35b54 <pdn_state_get_parser+0x40>)
   35b30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   35b34:	2110      	movs	r1, #16
   35b36:	681b      	ldr	r3, [r3, #0]
   35b38:	4668      	mov	r0, sp
   35b3a:	f005 fcf7 	bl	3b52c <sniprintf>
   35b3e:	4669      	mov	r1, sp
   35b40:	4620      	mov	r0, r4
   35b42:	f00c fae7 	bl	42114 <strstr>
   35b46:	3800      	subs	r0, #0
   35b48:	bf18      	it	ne
   35b4a:	2001      	movne	r0, #1
   35b4c:	b005      	add	sp, #20
   35b4e:	bd30      	pop	{r4, r5, pc}
   35b50:	20019fd4 	.word	0x20019fd4
   35b54:	0004b5bb 	.word	0x0004b5bb

00035b58 <pdn_id_get_parser>:
   35b58:	b510      	push	{r4, lr}
   35b5a:	4604      	mov	r4, r0
   35b5c:	4608      	mov	r0, r1
   35b5e:	f00b fb77 	bl	41250 <spaces_remove>
   35b62:	213a      	movs	r1, #58	; 0x3a
   35b64:	f00c fa73 	bl	4204e <strchr>
   35b68:	b130      	cbz	r0, 35b78 <pdn_id_get_parser+0x20>
   35b6a:	3001      	adds	r0, #1
   35b6c:	f00c f877 	bl	41c5e <atoi>
   35b70:	4b02      	ldr	r3, [pc, #8]	; (35b7c <pdn_id_get_parser+0x24>)
   35b72:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   35b76:	6058      	str	r0, [r3, #4]
   35b78:	2000      	movs	r0, #0
   35b7a:	bd10      	pop	{r4, pc}
   35b7c:	20019fd4 	.word	0x20019fd4

00035b80 <context_create_parser>:
   35b80:	b510      	push	{r4, lr}
   35b82:	4604      	mov	r4, r0
   35b84:	4608      	mov	r0, r1
   35b86:	f00b fb63 	bl	41250 <spaces_remove>
   35b8a:	213a      	movs	r1, #58	; 0x3a
   35b8c:	f00c fa5f 	bl	4204e <strchr>
   35b90:	b130      	cbz	r0, 35ba0 <context_create_parser+0x20>
   35b92:	4b04      	ldr	r3, [pc, #16]	; (35ba4 <context_create_parser+0x24>)
   35b94:	3001      	adds	r0, #1
   35b96:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
   35b9a:	f00c f860 	bl	41c5e <atoi>
   35b9e:	6020      	str	r0, [r4, #0]
   35ba0:	2000      	movs	r0, #0
   35ba2:	bd10      	pop	{r4, pc}
   35ba4:	20019fd4 	.word	0x20019fd4

00035ba8 <connection_free>:
   35ba8:	b538      	push	{r3, r4, r5, lr}
   35baa:	4d05      	ldr	r5, [pc, #20]	; (35bc0 <connection_free+0x18>)
   35bac:	4604      	mov	r4, r0
   35bae:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   35bb2:	f7f3 fd45 	bl	29640 <nrf_modem_os_free>
   35bb6:	2300      	movs	r3, #0
   35bb8:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
   35bbc:	bd38      	pop	{r3, r4, r5, pc}
   35bbe:	bf00      	nop
   35bc0:	20019fd4 	.word	0x20019fd4

00035bc4 <pdn_id_get>:
   35bc4:	b538      	push	{r3, r4, r5, lr}
   35bc6:	4d0e      	ldr	r5, [pc, #56]	; (35c00 <pdn_id_get+0x3c>)
   35bc8:	4604      	mov	r4, r0
   35bca:	f44f 7180 	mov.w	r1, #256	; 0x100
   35bce:	4b0d      	ldr	r3, [pc, #52]	; (35c04 <pdn_id_get+0x40>)
   35bd0:	4a0d      	ldr	r2, [pc, #52]	; (35c08 <pdn_id_get+0x44>)
   35bd2:	4628      	mov	r0, r5
   35bd4:	f005 fcaa 	bl	3b52c <sniprintf>
   35bd8:	4b0c      	ldr	r3, [pc, #48]	; (35c0c <pdn_id_get+0x48>)
   35bda:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35bde:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   35be2:	4a0b      	ldr	r2, [pc, #44]	; (35c10 <pdn_id_get+0x4c>)
   35be4:	681b      	ldr	r3, [r3, #0]
   35be6:	4428      	add	r0, r5
   35be8:	f005 fca0 	bl	3b52c <sniprintf>
   35bec:	f7ff ff34 	bl	35a58 <command_write>
   35bf0:	b928      	cbnz	r0, 35bfe <pdn_id_get+0x3a>
   35bf2:	4620      	mov	r0, r4
   35bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   35bf8:	2102      	movs	r1, #2
   35bfa:	f7ff bf4b 	b.w	35a94 <event_wait>
   35bfe:	bd38      	pop	{r3, r4, r5, pc}
   35c00:	20020d51 	.word	0x20020d51
   35c04:	0004b5c7 	.word	0x0004b5c7
   35c08:	0004b3c7 	.word	0x0004b3c7
   35c0c:	20019fd4 	.word	0x20019fd4
   35c10:	00048e4c 	.word	0x00048e4c

00035c14 <pdn_interface_init>:
   35c14:	b538      	push	{r3, r4, r5, lr}
   35c16:	f04f 34ff 	mov.w	r4, #4294967295
   35c1a:	4d0b      	ldr	r5, [pc, #44]	; (35c48 <pdn_interface_init+0x34>)
   35c1c:	2228      	movs	r2, #40	; 0x28
   35c1e:	2100      	movs	r1, #0
   35c20:	480a      	ldr	r0, [pc, #40]	; (35c4c <pdn_interface_init+0x38>)
   35c22:	602c      	str	r4, [r5, #0]
   35c24:	f00c f85b 	bl	41cde <memset>
   35c28:	f240 2201 	movw	r2, #513	; 0x201
   35c2c:	2102      	movs	r1, #2
   35c2e:	2066      	movs	r0, #102	; 0x66
   35c30:	f7ff f850 	bl	34cd4 <at_interface_open>
   35c34:	2800      	cmp	r0, #0
   35c36:	bfa4      	itt	ge
   35c38:	2201      	movge	r2, #1
   35c3a:	4b05      	ldrge	r3, [pc, #20]	; (35c50 <pdn_interface_init+0x3c>)
   35c3c:	6028      	str	r0, [r5, #0]
   35c3e:	bfa6      	itte	ge
   35c40:	701a      	strbge	r2, [r3, #0]
   35c42:	2000      	movge	r0, #0
   35c44:	4620      	movlt	r0, r4
   35c46:	bd38      	pop	{r3, r4, r5, pc}
   35c48:	20019fd0 	.word	0x20019fd0
   35c4c:	20019fd4 	.word	0x20019fd4
   35c50:	20020d50 	.word	0x20020d50

00035c54 <pdn_interface_deinit>:
   35c54:	4b05      	ldr	r3, [pc, #20]	; (35c6c <pdn_interface_deinit+0x18>)
   35c56:	781a      	ldrb	r2, [r3, #0]
   35c58:	b12a      	cbz	r2, 35c66 <pdn_interface_deinit+0x12>
   35c5a:	f04f 31ff 	mov.w	r1, #4294967295
   35c5e:	4a04      	ldr	r2, [pc, #16]	; (35c70 <pdn_interface_deinit+0x1c>)
   35c60:	6011      	str	r1, [r2, #0]
   35c62:	2200      	movs	r2, #0
   35c64:	701a      	strb	r2, [r3, #0]
   35c66:	2000      	movs	r0, #0
   35c68:	4770      	bx	lr
   35c6a:	bf00      	nop
   35c6c:	20020d50 	.word	0x20020d50
   35c70:	20019fd0 	.word	0x20019fd0

00035c74 <pdn_interface_open>:
   35c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35c76:	4b28      	ldr	r3, [pc, #160]	; (35d18 <pdn_interface_open+0xa4>)
   35c78:	781b      	ldrb	r3, [r3, #0]
   35c7a:	b92b      	cbnz	r3, 35c88 <pdn_interface_open+0x14>
   35c7c:	2070      	movs	r0, #112	; 0x70
   35c7e:	f7f3 fb23 	bl	292c8 <nrf_modem_os_errno_set>
   35c82:	f04f 30ff 	mov.w	r0, #4294967295
   35c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c88:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   35c8c:	d141      	bne.n	35d12 <pdn_interface_open+0x9e>
   35c8e:	4b23      	ldr	r3, [pc, #140]	; (35d1c <pdn_interface_open+0xa8>)
   35c90:	2500      	movs	r5, #0
   35c92:	461e      	mov	r6, r3
   35c94:	f853 4b04 	ldr.w	r4, [r3], #4
   35c98:	bb24      	cbnz	r4, 35ce4 <pdn_interface_open+0x70>
   35c9a:	2020      	movs	r0, #32
   35c9c:	f7f3 fcc0 	bl	29620 <nrf_modem_os_alloc>
   35ca0:	f846 0025 	str.w	r0, [r6, r5, lsl #2]
   35ca4:	b308      	cbz	r0, 35cea <pdn_interface_open+0x76>
   35ca6:	4621      	mov	r1, r4
   35ca8:	2220      	movs	r2, #32
   35caa:	f00c f818 	bl	41cde <memset>
   35cae:	2203      	movs	r2, #3
   35cb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   35cb4:	2701      	movs	r7, #1
   35cb6:	60da      	str	r2, [r3, #12]
   35cb8:	f04f 32ff 	mov.w	r2, #4294967295
   35cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
   35cc0:	605a      	str	r2, [r3, #4]
   35cc2:	609f      	str	r7, [r3, #8]
   35cc4:	4a16      	ldr	r2, [pc, #88]	; (35d20 <pdn_interface_open+0xac>)
   35cc6:	4b17      	ldr	r3, [pc, #92]	; (35d24 <pdn_interface_open+0xb0>)
   35cc8:	4817      	ldr	r0, [pc, #92]	; (35d28 <pdn_interface_open+0xb4>)
   35cca:	f005 fc2f 	bl	3b52c <sniprintf>
   35cce:	f7ff fec3 	bl	35a58 <command_write>
   35cd2:	4604      	mov	r4, r0
   35cd4:	b160      	cbz	r0, 35cf0 <pdn_interface_open+0x7c>
   35cd6:	4628      	mov	r0, r5
   35cd8:	f7ff ff66 	bl	35ba8 <connection_free>
   35cdc:	2c00      	cmp	r4, #0
   35cde:	da13      	bge.n	35d08 <pdn_interface_open+0x94>
   35ce0:	4260      	negs	r0, r4
   35ce2:	e7cc      	b.n	35c7e <pdn_interface_open+0xa>
   35ce4:	3501      	adds	r5, #1
   35ce6:	2d0a      	cmp	r5, #10
   35ce8:	d1d4      	bne.n	35c94 <pdn_interface_open+0x20>
   35cea:	f06f 040b 	mvn.w	r4, #11
   35cee:	e7f7      	b.n	35ce0 <pdn_interface_open+0x6c>
   35cf0:	4639      	mov	r1, r7
   35cf2:	4628      	mov	r0, r5
   35cf4:	f7ff fece 	bl	35a94 <event_wait>
   35cf8:	4604      	mov	r4, r0
   35cfa:	2800      	cmp	r0, #0
   35cfc:	d1eb      	bne.n	35cd6 <pdn_interface_open+0x62>
   35cfe:	2202      	movs	r2, #2
   35d00:	462c      	mov	r4, r5
   35d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   35d06:	609a      	str	r2, [r3, #8]
   35d08:	f044 40f1 	orr.w	r0, r4, #2021654528	; 0x78800000
   35d0c:	f440 10d0 	orr.w	r0, r0, #1703936	; 0x1a0000
   35d10:	e7b9      	b.n	35c86 <pdn_interface_open+0x12>
   35d12:	2029      	movs	r0, #41	; 0x29
   35d14:	e7b3      	b.n	35c7e <pdn_interface_open+0xa>
   35d16:	bf00      	nop
   35d18:	20020d50 	.word	0x20020d50
   35d1c:	20019fd4 	.word	0x20019fd4
   35d20:	0004b3c7 	.word	0x0004b3c7
   35d24:	0004b5d5 	.word	0x0004b5d5
   35d28:	20020d51 	.word	0x20020d51

00035d2c <pdn_interface_connect>:
   35d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   35d30:	4691      	mov	r9, r2
   35d32:	468a      	mov	sl, r1
   35d34:	b109      	cbz	r1, 35d3a <pdn_interface_connect+0xe>
   35d36:	2a64      	cmp	r2, #100	; 0x64
   35d38:	d905      	bls.n	35d46 <pdn_interface_connect+0x1a>
   35d3a:	2016      	movs	r0, #22
   35d3c:	f7f3 fac4 	bl	292c8 <nrf_modem_os_errno_set>
   35d40:	f04f 30ff 	mov.w	r0, #4294967295
   35d44:	e0ec      	b.n	35f20 <pdn_interface_connect+0x1f4>
   35d46:	f7ff fe6b 	bl	35a20 <handle_verify_and_covert>
   35d4a:	1e04      	subs	r4, r0, #0
   35d4c:	da01      	bge.n	35d52 <pdn_interface_connect+0x26>
   35d4e:	4260      	negs	r0, r4
   35d50:	e7f4      	b.n	35d3c <pdn_interface_connect+0x10>
   35d52:	4f76      	ldr	r7, [pc, #472]	; (35f2c <pdn_interface_connect+0x200>)
   35d54:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35d58:	689b      	ldr	r3, [r3, #8]
   35d5a:	2b02      	cmp	r3, #2
   35d5c:	d001      	beq.n	35d62 <pdn_interface_connect+0x36>
   35d5e:	2009      	movs	r0, #9
   35d60:	e7ec      	b.n	35d3c <pdn_interface_connect+0x10>
   35d62:	4e73      	ldr	r6, [pc, #460]	; (35f30 <pdn_interface_connect+0x204>)
   35d64:	f44f 7180 	mov.w	r1, #256	; 0x100
   35d68:	4b72      	ldr	r3, [pc, #456]	; (35f34 <pdn_interface_connect+0x208>)
   35d6a:	4a73      	ldr	r2, [pc, #460]	; (35f38 <pdn_interface_connect+0x20c>)
   35d6c:	4630      	mov	r0, r6
   35d6e:	f005 fbdd 	bl	3b52c <sniprintf>
   35d72:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35d76:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35d7a:	4605      	mov	r5, r0
   35d7c:	681b      	ldr	r3, [r3, #0]
   35d7e:	4a6f      	ldr	r2, [pc, #444]	; (35f3c <pdn_interface_connect+0x210>)
   35d80:	1830      	adds	r0, r6, r0
   35d82:	f005 fbd3 	bl	3b52c <sniprintf>
   35d86:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35d8a:	4405      	add	r5, r0
   35d8c:	68db      	ldr	r3, [r3, #12]
   35d8e:	46b0      	mov	r8, r6
   35d90:	f003 0203 	and.w	r2, r3, #3
   35d94:	2a03      	cmp	r2, #3
   35d96:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   35d9a:	eb06 0005 	add.w	r0, r6, r5
   35d9e:	d159      	bne.n	35e54 <pdn_interface_connect+0x128>
   35da0:	4b67      	ldr	r3, [pc, #412]	; (35f40 <pdn_interface_connect+0x214>)
   35da2:	4a68      	ldr	r2, [pc, #416]	; (35f44 <pdn_interface_connect+0x218>)
   35da4:	f005 fbc2 	bl	3b52c <sniprintf>
   35da8:	f109 0303 	add.w	r3, r9, #3
   35dac:	4428      	add	r0, r5
   35dae:	4403      	add	r3, r0
   35db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   35db4:	f300 80b6 	bgt.w	35f24 <pdn_interface_connect+0x1f8>
   35db8:	2622      	movs	r6, #34	; 0x22
   35dba:	1c45      	adds	r5, r0, #1
   35dbc:	464a      	mov	r2, r9
   35dbe:	f808 6000 	strb.w	r6, [r8, r0]
   35dc2:	4651      	mov	r1, sl
   35dc4:	eb08 0005 	add.w	r0, r8, r5
   35dc8:	f00c f984 	bl	420d4 <strncpy>
   35dcc:	eb09 0305 	add.w	r3, r9, r5
   35dd0:	eb08 0203 	add.w	r2, r8, r3
   35dd4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   35dd8:	b902      	cbnz	r2, 35ddc <pdn_interface_connect+0xb0>
   35dda:	3b01      	subs	r3, #1
   35ddc:	2200      	movs	r2, #0
   35dde:	f808 6003 	strb.w	r6, [r8, r3]
   35de2:	4443      	add	r3, r8
   35de4:	705a      	strb	r2, [r3, #1]
   35de6:	f7ff fe37 	bl	35a58 <command_write>
   35dea:	2800      	cmp	r0, #0
   35dec:	d176      	bne.n	35edc <pdn_interface_connect+0x1b0>
   35dee:	4601      	mov	r1, r0
   35df0:	4620      	mov	r0, r4
   35df2:	f7ff fe4f 	bl	35a94 <event_wait>
   35df6:	2800      	cmp	r0, #0
   35df8:	d170      	bne.n	35edc <pdn_interface_connect+0x1b0>
   35dfa:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35dfe:	7c1b      	ldrb	r3, [r3, #16]
   35e00:	bb6b      	cbnz	r3, 35e5e <pdn_interface_connect+0x132>
   35e02:	f44f 7180 	mov.w	r1, #256	; 0x100
   35e06:	4b50      	ldr	r3, [pc, #320]	; (35f48 <pdn_interface_connect+0x21c>)
   35e08:	4a4b      	ldr	r2, [pc, #300]	; (35f38 <pdn_interface_connect+0x20c>)
   35e0a:	4849      	ldr	r0, [pc, #292]	; (35f30 <pdn_interface_connect+0x204>)
   35e0c:	f005 fb8e 	bl	3b52c <sniprintf>
   35e10:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35e14:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35e18:	681b      	ldr	r3, [r3, #0]
   35e1a:	4a4c      	ldr	r2, [pc, #304]	; (35f4c <pdn_interface_connect+0x220>)
   35e1c:	4440      	add	r0, r8
   35e1e:	f005 fb85 	bl	3b52c <sniprintf>
   35e22:	f7ff fe19 	bl	35a58 <command_write>
   35e26:	2800      	cmp	r0, #0
   35e28:	d158      	bne.n	35edc <pdn_interface_connect+0x1b0>
   35e2a:	4601      	mov	r1, r0
   35e2c:	4620      	mov	r0, r4
   35e2e:	f7ff fe31 	bl	35a94 <event_wait>
   35e32:	2800      	cmp	r0, #0
   35e34:	d152      	bne.n	35edc <pdn_interface_connect+0x1b0>
   35e36:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   35e3a:	f109 0320 	add.w	r3, r9, #32
   35e3e:	6950      	ldr	r0, [r2, #20]
   35e40:	4403      	add	r3, r0
   35e42:	6990      	ldr	r0, [r2, #24]
   35e44:	4418      	add	r0, r3
   35e46:	f7f3 fbeb 	bl	29620 <nrf_modem_os_alloc>
   35e4a:	4605      	mov	r5, r0
   35e4c:	2800      	cmp	r0, #0
   35e4e:	d147      	bne.n	35ee0 <pdn_interface_connect+0x1b4>
   35e50:	200c      	movs	r0, #12
   35e52:	e773      	b.n	35d3c <pdn_interface_connect+0x10>
   35e54:	079b      	lsls	r3, r3, #30
   35e56:	bf4c      	ite	mi
   35e58:	4b3d      	ldrmi	r3, [pc, #244]	; (35f50 <pdn_interface_connect+0x224>)
   35e5a:	4b3e      	ldrpl	r3, [pc, #248]	; (35f54 <pdn_interface_connect+0x228>)
   35e5c:	e7a1      	b.n	35da2 <pdn_interface_connect+0x76>
   35e5e:	f44f 7180 	mov.w	r1, #256	; 0x100
   35e62:	4b3d      	ldr	r3, [pc, #244]	; (35f58 <pdn_interface_connect+0x22c>)
   35e64:	4a34      	ldr	r2, [pc, #208]	; (35f38 <pdn_interface_connect+0x20c>)
   35e66:	4832      	ldr	r0, [pc, #200]	; (35f30 <pdn_interface_connect+0x204>)
   35e68:	f005 fb60 	bl	3b52c <sniprintf>
   35e6c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35e70:	4a32      	ldr	r2, [pc, #200]	; (35f3c <pdn_interface_connect+0x210>)
   35e72:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35e76:	4606      	mov	r6, r0
   35e78:	681b      	ldr	r3, [r3, #0]
   35e7a:	4440      	add	r0, r8
   35e7c:	f005 fb56 	bl	3b52c <sniprintf>
   35e80:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35e84:	4406      	add	r6, r0
   35e86:	7c1b      	ldrb	r3, [r3, #16]
   35e88:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   35e8c:	2b01      	cmp	r3, #1
   35e8e:	bf0c      	ite	eq
   35e90:	4a32      	ldreq	r2, [pc, #200]	; (35f5c <pdn_interface_connect+0x230>)
   35e92:	4a33      	ldrne	r2, [pc, #204]	; (35f60 <pdn_interface_connect+0x234>)
   35e94:	eb08 0006 	add.w	r0, r8, r6
   35e98:	f005 fb48 	bl	3b52c <sniprintf>
   35e9c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35ea0:	4406      	add	r6, r0
   35ea2:	4a28      	ldr	r2, [pc, #160]	; (35f44 <pdn_interface_connect+0x218>)
   35ea4:	3320      	adds	r3, #32
   35ea6:	f5c6 7180 	rsb	r1, r6, #256	; 0x100
   35eaa:	eb08 0006 	add.w	r0, r8, r6
   35eae:	f005 fb3d 	bl	3b52c <sniprintf>
   35eb2:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   35eb6:	4430      	add	r0, r6
   35eb8:	695a      	ldr	r2, [r3, #20]
   35eba:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35ebe:	3220      	adds	r2, #32
   35ec0:	4413      	add	r3, r2
   35ec2:	4440      	add	r0, r8
   35ec4:	4a27      	ldr	r2, [pc, #156]	; (35f64 <pdn_interface_connect+0x238>)
   35ec6:	f005 fb31 	bl	3b52c <sniprintf>
   35eca:	f7ff fdc5 	bl	35a58 <command_write>
   35ece:	b928      	cbnz	r0, 35edc <pdn_interface_connect+0x1b0>
   35ed0:	4601      	mov	r1, r0
   35ed2:	4620      	mov	r0, r4
   35ed4:	f7ff fdde 	bl	35a94 <event_wait>
   35ed8:	2800      	cmp	r0, #0
   35eda:	d092      	beq.n	35e02 <pdn_interface_connect+0xd6>
   35edc:	4240      	negs	r0, r0
   35ede:	e72d      	b.n	35d3c <pdn_interface_connect+0x10>
   35ee0:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
   35ee4:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
   35ee8:	441a      	add	r2, r3
   35eea:	3220      	adds	r2, #32
   35eec:	f00b fed7 	bl	41c9e <memcpy>
   35ef0:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
   35ef4:	f7f3 fba4 	bl	29640 <nrf_modem_os_free>
   35ef8:	2303      	movs	r3, #3
   35efa:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
   35efe:	60ab      	str	r3, [r5, #8]
   35f00:	e9d5 3005 	ldrd	r3, r0, [r5, #20]
   35f04:	4403      	add	r3, r0
   35f06:	3320      	adds	r3, #32
   35f08:	464a      	mov	r2, r9
   35f0a:	4651      	mov	r1, sl
   35f0c:	f8c5 901c 	str.w	r9, [r5, #28]
   35f10:	18e8      	adds	r0, r5, r3
   35f12:	f00b fec4 	bl	41c9e <memcpy>
   35f16:	4620      	mov	r0, r4
   35f18:	f7ff fe54 	bl	35bc4 <pdn_id_get>
   35f1c:	2800      	cmp	r0, #0
   35f1e:	d1dd      	bne.n	35edc <pdn_interface_connect+0x1b0>
   35f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   35f24:	f04f 30ff 	mov.w	r0, #4294967295
   35f28:	e7d8      	b.n	35edc <pdn_interface_connect+0x1b0>
   35f2a:	bf00      	nop
   35f2c:	20019fd4 	.word	0x20019fd4
   35f30:	20020d51 	.word	0x20020d51
   35f34:	0004b5e1 	.word	0x0004b5e1
   35f38:	0004b3c7 	.word	0x0004b3c7
   35f3c:	000494de 	.word	0x000494de
   35f40:	00047dbf 	.word	0x00047dbf
   35f44:	0004b5ed 	.word	0x0004b5ed
   35f48:	0004b5f3 	.word	0x0004b5f3
   35f4c:	00048e4c 	.word	0x00048e4c
   35f50:	00047dba 	.word	0x00047dba
   35f54:	000441ea 	.word	0x000441ea
   35f58:	0004b5ff 	.word	0x0004b5ff
   35f5c:	0004b5fc 	.word	0x0004b5fc
   35f60:	0004b60a 	.word	0x0004b60a
   35f64:	000479ba 	.word	0x000479ba

00035f68 <pdn_interface_close>:
   35f68:	b570      	push	{r4, r5, r6, lr}
   35f6a:	f7ff fd59 	bl	35a20 <handle_verify_and_covert>
   35f6e:	1e04      	subs	r4, r0, #0
   35f70:	da05      	bge.n	35f7e <pdn_interface_close+0x16>
   35f72:	4260      	negs	r0, r4
   35f74:	f7f3 f9a8 	bl	292c8 <nrf_modem_os_errno_set>
   35f78:	f04f 30ff 	mov.w	r0, #4294967295
   35f7c:	bd70      	pop	{r4, r5, r6, pc}
   35f7e:	4d22      	ldr	r5, [pc, #136]	; (36008 <pdn_interface_close+0xa0>)
   35f80:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   35f84:	689b      	ldr	r3, [r3, #8]
   35f86:	2b03      	cmp	r3, #3
   35f88:	d11b      	bne.n	35fc2 <pdn_interface_close+0x5a>
   35f8a:	4e20      	ldr	r6, [pc, #128]	; (3600c <pdn_interface_close+0xa4>)
   35f8c:	f44f 7180 	mov.w	r1, #256	; 0x100
   35f90:	4b1f      	ldr	r3, [pc, #124]	; (36010 <pdn_interface_close+0xa8>)
   35f92:	4a20      	ldr	r2, [pc, #128]	; (36014 <pdn_interface_close+0xac>)
   35f94:	4630      	mov	r0, r6
   35f96:	f005 fac9 	bl	3b52c <sniprintf>
   35f9a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   35f9e:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35fa2:	681b      	ldr	r3, [r3, #0]
   35fa4:	4a1c      	ldr	r2, [pc, #112]	; (36018 <pdn_interface_close+0xb0>)
   35fa6:	4430      	add	r0, r6
   35fa8:	f005 fac0 	bl	3b52c <sniprintf>
   35fac:	f7ff fd54 	bl	35a58 <command_write>
   35fb0:	4601      	mov	r1, r0
   35fb2:	b910      	cbnz	r0, 35fba <pdn_interface_close+0x52>
   35fb4:	4620      	mov	r0, r4
   35fb6:	f7ff fd6d 	bl	35a94 <event_wait>
   35fba:	2202      	movs	r2, #2
   35fbc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   35fc0:	609a      	str	r2, [r3, #8]
   35fc2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   35fc6:	689b      	ldr	r3, [r3, #8]
   35fc8:	2b02      	cmp	r3, #2
   35fca:	d117      	bne.n	35ffc <pdn_interface_close+0x94>
   35fcc:	4e0f      	ldr	r6, [pc, #60]	; (3600c <pdn_interface_close+0xa4>)
   35fce:	f44f 7180 	mov.w	r1, #256	; 0x100
   35fd2:	4b12      	ldr	r3, [pc, #72]	; (3601c <pdn_interface_close+0xb4>)
   35fd4:	4a0f      	ldr	r2, [pc, #60]	; (36014 <pdn_interface_close+0xac>)
   35fd6:	4630      	mov	r0, r6
   35fd8:	f005 faa8 	bl	3b52c <sniprintf>
   35fdc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   35fe0:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
   35fe4:	681b      	ldr	r3, [r3, #0]
   35fe6:	4a0c      	ldr	r2, [pc, #48]	; (36018 <pdn_interface_close+0xb0>)
   35fe8:	4430      	add	r0, r6
   35fea:	f005 fa9f 	bl	3b52c <sniprintf>
   35fee:	f7ff fd33 	bl	35a58 <command_write>
   35ff2:	4601      	mov	r1, r0
   35ff4:	b910      	cbnz	r0, 35ffc <pdn_interface_close+0x94>
   35ff6:	4620      	mov	r0, r4
   35ff8:	f7ff fd4c 	bl	35a94 <event_wait>
   35ffc:	4620      	mov	r0, r4
   35ffe:	f7ff fdd3 	bl	35ba8 <connection_free>
   36002:	2000      	movs	r0, #0
   36004:	e7ba      	b.n	35f7c <pdn_interface_close+0x14>
   36006:	bf00      	nop
   36008:	20019fd4 	.word	0x20019fd4
   3600c:	20020d51 	.word	0x20020d51
   36010:	0004b60d 	.word	0x0004b60d
   36014:	0004b3c7 	.word	0x0004b3c7
   36018:	00048e4c 	.word	0x00048e4c
   3601c:	0004b5e1 	.word	0x0004b5e1

00036020 <pdn_interface_setopt>:
   36020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36024:	4614      	mov	r4, r2
   36026:	f240 2202 	movw	r2, #514	; 0x202
   3602a:	4291      	cmp	r1, r2
   3602c:	461e      	mov	r6, r3
   3602e:	9b08      	ldr	r3, [sp, #32]
   36030:	d101      	bne.n	36036 <pdn_interface_setopt+0x16>
   36032:	b106      	cbz	r6, 36036 <pdn_interface_setopt+0x16>
   36034:	b92b      	cbnz	r3, 36042 <pdn_interface_setopt+0x22>
   36036:	2016      	movs	r0, #22
   36038:	f7f3 f946 	bl	292c8 <nrf_modem_os_errno_set>
   3603c:	f04f 30ff 	mov.w	r0, #4294967295
   36040:	e067      	b.n	36112 <pdn_interface_setopt+0xf2>
   36042:	f7ff fced 	bl	35a20 <handle_verify_and_covert>
   36046:	1e05      	subs	r5, r0, #0
   36048:	da01      	bge.n	3604e <pdn_interface_setopt+0x2e>
   3604a:	4268      	negs	r0, r5
   3604c:	e7f4      	b.n	36038 <pdn_interface_setopt+0x18>
   3604e:	2c01      	cmp	r4, #1
   36050:	d005      	beq.n	3605e <pdn_interface_setopt+0x3e>
   36052:	2c04      	cmp	r4, #4
   36054:	d014      	beq.n	36080 <pdn_interface_setopt+0x60>
   36056:	f06f 002c 	mvn.w	r0, #44	; 0x2c
   3605a:	4240      	negs	r0, r0
   3605c:	e7ec      	b.n	36038 <pdn_interface_setopt+0x18>
   3605e:	4b32      	ldr	r3, [pc, #200]	; (36128 <pdn_interface_setopt+0x108>)
   36060:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
   36064:	689a      	ldr	r2, [r3, #8]
   36066:	b14a      	cbz	r2, 3607c <pdn_interface_setopt+0x5c>
   36068:	689a      	ldr	r2, [r3, #8]
   3606a:	2a03      	cmp	r2, #3
   3606c:	d006      	beq.n	3607c <pdn_interface_setopt+0x5c>
   3606e:	689b      	ldr	r3, [r3, #8]
   36070:	2b04      	cmp	r3, #4
   36072:	bf14      	ite	ne
   36074:	2016      	movne	r0, #22
   36076:	200e      	moveq	r0, #14
   36078:	4240      	negs	r0, r0
   3607a:	e7ee      	b.n	3605a <pdn_interface_setopt+0x3a>
   3607c:	200e      	movs	r0, #14
   3607e:	e7fb      	b.n	36078 <pdn_interface_setopt+0x58>
   36080:	4f29      	ldr	r7, [pc, #164]	; (36128 <pdn_interface_setopt+0x108>)
   36082:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   36086:	689a      	ldr	r2, [r3, #8]
   36088:	2a00      	cmp	r2, #0
   3608a:	d044      	beq.n	36116 <pdn_interface_setopt+0xf6>
   3608c:	689a      	ldr	r2, [r3, #8]
   3608e:	2a03      	cmp	r2, #3
   36090:	d041      	beq.n	36116 <pdn_interface_setopt+0xf6>
   36092:	689b      	ldr	r3, [r3, #8]
   36094:	2b04      	cmp	r3, #4
   36096:	d03e      	beq.n	36116 <pdn_interface_setopt+0xf6>
   36098:	4630      	mov	r0, r6
   3609a:	f7e7 f8df 	bl	1d25c <strlen>
   3609e:	f106 0a64 	add.w	sl, r6, #100	; 0x64
   360a2:	f100 0801 	add.w	r8, r0, #1
   360a6:	4650      	mov	r0, sl
   360a8:	f7e7 f8d8 	bl	1d25c <strlen>
   360ac:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   360b0:	f100 0901 	add.w	r9, r0, #1
   360b4:	3b01      	subs	r3, #1
   360b6:	2b01      	cmp	r3, #1
   360b8:	d830      	bhi.n	3611c <pdn_interface_setopt+0xfc>
   360ba:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   360be:	d82d      	bhi.n	3611c <pdn_interface_setopt+0xfc>
   360c0:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
   360c4:	d82a      	bhi.n	3611c <pdn_interface_setopt+0xfc>
   360c6:	eb08 0009 	add.w	r0, r8, r9
   360ca:	3020      	adds	r0, #32
   360cc:	f7f3 faa8 	bl	29620 <nrf_modem_os_alloc>
   360d0:	4604      	mov	r4, r0
   360d2:	b330      	cbz	r0, 36122 <pdn_interface_setopt+0x102>
   360d4:	2220      	movs	r2, #32
   360d6:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
   360da:	f00b fde0 	bl	41c9e <memcpy>
   360de:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
   360e2:	f7f3 faad 	bl	29640 <nrf_modem_os_free>
   360e6:	e9c4 8905 	strd	r8, r9, [r4, #20]
   360ea:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
   360ee:	4641      	mov	r1, r8
   360f0:	4a0e      	ldr	r2, [pc, #56]	; (3612c <pdn_interface_setopt+0x10c>)
   360f2:	7423      	strb	r3, [r4, #16]
   360f4:	f104 0020 	add.w	r0, r4, #32
   360f8:	4633      	mov	r3, r6
   360fa:	f005 fa17 	bl	3b52c <sniprintf>
   360fe:	3021      	adds	r0, #33	; 0x21
   36100:	4653      	mov	r3, sl
   36102:	4a0a      	ldr	r2, [pc, #40]	; (3612c <pdn_interface_setopt+0x10c>)
   36104:	69a1      	ldr	r1, [r4, #24]
   36106:	4420      	add	r0, r4
   36108:	f005 fa10 	bl	3b52c <sniprintf>
   3610c:	2000      	movs	r0, #0
   3610e:	f847 4025 	str.w	r4, [r7, r5, lsl #2]
   36112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   36116:	f06f 000d 	mvn.w	r0, #13
   3611a:	e79e      	b.n	3605a <pdn_interface_setopt+0x3a>
   3611c:	f06f 0015 	mvn.w	r0, #21
   36120:	e79b      	b.n	3605a <pdn_interface_setopt+0x3a>
   36122:	f06f 000b 	mvn.w	r0, #11
   36126:	e798      	b.n	3605a <pdn_interface_setopt+0x3a>
   36128:	20019fd4 	.word	0x20019fd4
   3612c:	0004b3c7 	.word	0x0004b3c7

00036130 <pdn_interface_getopt>:
   36130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36134:	461e      	mov	r6, r3
   36136:	f240 2302 	movw	r3, #514	; 0x202
   3613a:	4299      	cmp	r1, r3
   3613c:	4690      	mov	r8, r2
   3613e:	9d06      	ldr	r5, [sp, #24]
   36140:	d101      	bne.n	36146 <pdn_interface_getopt+0x16>
   36142:	b106      	cbz	r6, 36146 <pdn_interface_getopt+0x16>
   36144:	b92d      	cbnz	r5, 36152 <pdn_interface_getopt+0x22>
   36146:	2016      	movs	r0, #22
   36148:	f7f3 f8be 	bl	292c8 <nrf_modem_os_errno_set>
   3614c:	f04f 34ff 	mov.w	r4, #4294967295
   36150:	e02d      	b.n	361ae <pdn_interface_getopt+0x7e>
   36152:	f7ff fc65 	bl	35a20 <handle_verify_and_covert>
   36156:	1e07      	subs	r7, r0, #0
   36158:	da01      	bge.n	3615e <pdn_interface_getopt+0x2e>
   3615a:	4278      	negs	r0, r7
   3615c:	e7f4      	b.n	36148 <pdn_interface_getopt+0x18>
   3615e:	f1b8 0f02 	cmp.w	r8, #2
   36162:	d027      	beq.n	361b4 <pdn_interface_getopt+0x84>
   36164:	f1b8 0f03 	cmp.w	r8, #3
   36168:	d02e      	beq.n	361c8 <pdn_interface_getopt+0x98>
   3616a:	f1b8 0f01 	cmp.w	r8, #1
   3616e:	d142      	bne.n	361f6 <pdn_interface_getopt+0xc6>
   36170:	4b28      	ldr	r3, [pc, #160]	; (36214 <pdn_interface_getopt+0xe4>)
   36172:	6829      	ldr	r1, [r5, #0]
   36174:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   36178:	689a      	ldr	r2, [r3, #8]
   3617a:	2a00      	cmp	r2, #0
   3617c:	d03f      	beq.n	361fe <pdn_interface_getopt+0xce>
   3617e:	689a      	ldr	r2, [r3, #8]
   36180:	2a04      	cmp	r2, #4
   36182:	d03c      	beq.n	361fe <pdn_interface_getopt+0xce>
   36184:	2907      	cmp	r1, #7
   36186:	f001 0203 	and.w	r2, r1, #3
   3618a:	d93b      	bls.n	36204 <pdn_interface_getopt+0xd4>
   3618c:	2a00      	cmp	r2, #0
   3618e:	d139      	bne.n	36204 <pdn_interface_getopt+0xd4>
   36190:	68db      	ldr	r3, [r3, #12]
   36192:	0799      	lsls	r1, r3, #30
   36194:	bf42      	ittt	mi
   36196:	220a      	movmi	r2, #10
   36198:	6032      	strmi	r2, [r6, #0]
   3619a:	2201      	movmi	r2, #1
   3619c:	07db      	lsls	r3, r3, #31
   3619e:	bf42      	ittt	mi
   361a0:	2302      	movmi	r3, #2
   361a2:	f846 3022 	strmi.w	r3, [r6, r2, lsl #2]
   361a6:	3201      	addmi	r2, #1
   361a8:	0092      	lsls	r2, r2, #2
   361aa:	602a      	str	r2, [r5, #0]
   361ac:	2400      	movs	r4, #0
   361ae:	4620      	mov	r0, r4
   361b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   361b4:	682b      	ldr	r3, [r5, #0]
   361b6:	b343      	cbz	r3, 3620a <pdn_interface_getopt+0xda>
   361b8:	4b16      	ldr	r3, [pc, #88]	; (36214 <pdn_interface_getopt+0xe4>)
   361ba:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   361be:	681b      	ldr	r3, [r3, #0]
   361c0:	7033      	strb	r3, [r6, #0]
   361c2:	2301      	movs	r3, #1
   361c4:	602b      	str	r3, [r5, #0]
   361c6:	e7f1      	b.n	361ac <pdn_interface_getopt+0x7c>
   361c8:	682b      	ldr	r3, [r5, #0]
   361ca:	b1f3      	cbz	r3, 3620a <pdn_interface_getopt+0xda>
   361cc:	f44f 7180 	mov.w	r1, #256	; 0x100
   361d0:	4b11      	ldr	r3, [pc, #68]	; (36218 <pdn_interface_getopt+0xe8>)
   361d2:	4a12      	ldr	r2, [pc, #72]	; (3621c <pdn_interface_getopt+0xec>)
   361d4:	4812      	ldr	r0, [pc, #72]	; (36220 <pdn_interface_getopt+0xf0>)
   361d6:	f005 f9a9 	bl	3b52c <sniprintf>
   361da:	f7ff fc3d 	bl	35a58 <command_write>
   361de:	4604      	mov	r4, r0
   361e0:	b958      	cbnz	r0, 361fa <pdn_interface_getopt+0xca>
   361e2:	4641      	mov	r1, r8
   361e4:	4638      	mov	r0, r7
   361e6:	f7ff fc55 	bl	35a94 <event_wait>
   361ea:	2800      	cmp	r0, #0
   361ec:	db0f      	blt.n	3620e <pdn_interface_getopt+0xde>
   361ee:	2301      	movs	r3, #1
   361f0:	7030      	strb	r0, [r6, #0]
   361f2:	602b      	str	r3, [r5, #0]
   361f4:	e7db      	b.n	361ae <pdn_interface_getopt+0x7e>
   361f6:	f06f 042c 	mvn.w	r4, #44	; 0x2c
   361fa:	4260      	negs	r0, r4
   361fc:	e7a4      	b.n	36148 <pdn_interface_getopt+0x18>
   361fe:	f06f 040d 	mvn.w	r4, #13
   36202:	e7fa      	b.n	361fa <pdn_interface_getopt+0xca>
   36204:	f06f 0415 	mvn.w	r4, #21
   36208:	e7f7      	b.n	361fa <pdn_interface_getopt+0xca>
   3620a:	2416      	movs	r4, #22
   3620c:	e7f5      	b.n	361fa <pdn_interface_getopt+0xca>
   3620e:	4604      	mov	r4, r0
   36210:	e7f3      	b.n	361fa <pdn_interface_getopt+0xca>
   36212:	bf00      	nop
   36214:	20019fd4 	.word	0x20019fd4
   36218:	0004b619 	.word	0x0004b619
   3621c:	0004b3c7 	.word	0x0004b3c7
   36220:	20020d51 	.word	0x20020d51

00036224 <pdn_interface_pdn_id_get>:
   36224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36228:	4680      	mov	r8, r0
   3622a:	460e      	mov	r6, r1
   3622c:	2900      	cmp	r1, #0
   3622e:	d043      	beq.n	362b8 <pdn_interface_pdn_id_get+0x94>
   36230:	4c22      	ldr	r4, [pc, #136]	; (362bc <pdn_interface_pdn_id_get+0x98>)
   36232:	2500      	movs	r5, #0
   36234:	4627      	mov	r7, r4
   36236:	f854 3b04 	ldr.w	r3, [r4], #4
   3623a:	2b00      	cmp	r3, #0
   3623c:	d039      	beq.n	362b2 <pdn_interface_pdn_id_get+0x8e>
   3623e:	689b      	ldr	r3, [r3, #8]
   36240:	2b03      	cmp	r3, #3
   36242:	d136      	bne.n	362b2 <pdn_interface_pdn_id_get+0x8e>
   36244:	4630      	mov	r0, r6
   36246:	f7e7 f809 	bl	1d25c <strlen>
   3624a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   3624e:	69ca      	ldr	r2, [r1, #28]
   36250:	4282      	cmp	r2, r0
   36252:	d12e      	bne.n	362b2 <pdn_interface_pdn_id_get+0x8e>
   36254:	e9d1 3005 	ldrd	r3, r0, [r1, #20]
   36258:	4403      	add	r3, r0
   3625a:	3320      	adds	r3, #32
   3625c:	4630      	mov	r0, r6
   3625e:	4419      	add	r1, r3
   36260:	f00b ff26 	bl	420b0 <strncmp>
   36264:	bb28      	cbnz	r0, 362b2 <pdn_interface_pdn_id_get+0x8e>
   36266:	f1b8 0f0a 	cmp.w	r8, #10
   3626a:	d114      	bne.n	36296 <pdn_interface_pdn_id_get+0x72>
   3626c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   36270:	68db      	ldr	r3, [r3, #12]
   36272:	f3c3 0340 	ubfx	r3, r3, #1, #1
   36276:	b1e3      	cbz	r3, 362b2 <pdn_interface_pdn_id_get+0x8e>
   36278:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   3627c:	685c      	ldr	r4, [r3, #4]
   3627e:	3401      	adds	r4, #1
   36280:	d112      	bne.n	362a8 <pdn_interface_pdn_id_get+0x84>
   36282:	4628      	mov	r0, r5
   36284:	f7ff fc9e 	bl	35bc4 <pdn_id_get>
   36288:	b170      	cbz	r0, 362a8 <pdn_interface_pdn_id_get+0x84>
   3628a:	4240      	negs	r0, r0
   3628c:	f7f3 f81c 	bl	292c8 <nrf_modem_os_errno_set>
   36290:	f04f 30ff 	mov.w	r0, #4294967295
   36294:	e00b      	b.n	362ae <pdn_interface_pdn_id_get+0x8a>
   36296:	f1b8 0f02 	cmp.w	r8, #2
   3629a:	d10a      	bne.n	362b2 <pdn_interface_pdn_id_get+0x8e>
   3629c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   362a0:	68db      	ldr	r3, [r3, #12]
   362a2:	f003 0301 	and.w	r3, r3, #1
   362a6:	e7e6      	b.n	36276 <pdn_interface_pdn_id_get+0x52>
   362a8:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   362ac:	6858      	ldr	r0, [r3, #4]
   362ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   362b2:	3501      	adds	r5, #1
   362b4:	2d0a      	cmp	r5, #10
   362b6:	d1be      	bne.n	36236 <pdn_interface_pdn_id_get+0x12>
   362b8:	2016      	movs	r0, #22
   362ba:	e7e7      	b.n	3628c <pdn_interface_pdn_id_get+0x68>
   362bc:	20019fd4 	.word	0x20019fd4

000362c0 <full_dfu_ipc_irq_handler>:
   362c0:	2301      	movs	r3, #1
   362c2:	4a03      	ldr	r2, [pc, #12]	; (362d0 <full_dfu_ipc_irq_handler+0x10>)
   362c4:	6013      	str	r3, [r2, #0]
   362c6:	07c2      	lsls	r2, r0, #31
   362c8:	bf44      	itt	mi
   362ca:	4a02      	ldrmi	r2, [pc, #8]	; (362d4 <full_dfu_ipc_irq_handler+0x14>)
   362cc:	7013      	strbmi	r3, [r2, #0]
   362ce:	4770      	bx	lr
   362d0:	20019ffc 	.word	0x20019ffc
   362d4:	20020e51 	.word	0x20020e51

000362d8 <modem_ipc_wait_for_event>:
   362d8:	b538      	push	{r3, r4, r5, lr}
   362da:	2300      	movs	r3, #0
   362dc:	f44f 65fa 	mov.w	r5, #2000	; 0x7d0
   362e0:	4c0a      	ldr	r4, [pc, #40]	; (3630c <modem_ipc_wait_for_event+0x34>)
   362e2:	6023      	str	r3, [r4, #0]
   362e4:	6823      	ldr	r3, [r4, #0]
   362e6:	b92b      	cbnz	r3, 362f4 <modem_ipc_wait_for_event+0x1c>
   362e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   362ec:	f000 f9e2 	bl	366b4 <nrf_modem_busy_wait_us>
   362f0:	3d01      	subs	r5, #1
   362f2:	d1f7      	bne.n	362e4 <modem_ipc_wait_for_event+0xc>
   362f4:	6823      	ldr	r3, [r4, #0]
   362f6:	b90b      	cbnz	r3, 362fc <modem_ipc_wait_for_event+0x24>
   362f8:	203c      	movs	r0, #60	; 0x3c
   362fa:	e005      	b.n	36308 <modem_ipc_wait_for_event+0x30>
   362fc:	4b04      	ldr	r3, [pc, #16]	; (36310 <modem_ipc_wait_for_event+0x38>)
   362fe:	781b      	ldrb	r3, [r3, #0]
   36300:	2b01      	cmp	r3, #1
   36302:	bf14      	ite	ne
   36304:	2000      	movne	r0, #0
   36306:	2005      	moveq	r0, #5
   36308:	bd38      	pop	{r3, r4, r5, pc}
   3630a:	bf00      	nop
   3630c:	20019ffc 	.word	0x20019ffc
   36310:	20020e51 	.word	0x20020e51

00036314 <nrf_modem_full_dfu_setup>:
   36314:	2200      	movs	r2, #0
   36316:	2300      	movs	r3, #0
   36318:	b5f0      	push	{r4, r5, r6, r7, lr}
   3631a:	4d2d      	ldr	r5, [pc, #180]	; (363d0 <nrf_modem_full_dfu_setup+0xbc>)
   3631c:	4f2d      	ldr	r7, [pc, #180]	; (363d4 <nrf_modem_full_dfu_setup+0xc0>)
   3631e:	e9c5 2302 	strd	r2, r3, [r5, #8]
   36322:	e9c5 2304 	strd	r2, r3, [r5, #16]
   36326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   3632a:	4b2b      	ldr	r3, [pc, #172]	; (363d8 <nrf_modem_full_dfu_setup+0xc4>)
   3632c:	2400      	movs	r4, #0
   3632e:	601a      	str	r2, [r3, #0]
   36330:	f100 031c 	add.w	r3, r0, #28
   36334:	603b      	str	r3, [r7, #0]
   36336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   3633a:	6043      	str	r3, [r0, #4]
   3633c:	231c      	movs	r3, #28
   3633e:	7203      	strb	r3, [r0, #8]
   36340:	2320      	movs	r3, #32
   36342:	2601      	movs	r6, #1
   36344:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   36348:	7243      	strb	r3, [r0, #9]
   3634a:	4b24      	ldr	r3, [pc, #144]	; (363dc <nrf_modem_full_dfu_setup+0xc8>)
   3634c:	7086      	strb	r6, [r0, #2]
   3634e:	70c2      	strb	r2, [r0, #3]
   36350:	7004      	strb	r4, [r0, #0]
   36352:	7044      	strb	r4, [r0, #1]
   36354:	7284      	strb	r4, [r0, #10]
   36356:	72c4      	strb	r4, [r0, #11]
   36358:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   3635c:	702c      	strb	r4, [r5, #0]
   3635e:	f8c3 0610 	str.w	r0, [r3, #1552]	; 0x610
   36362:	f8c3 4614 	str.w	r4, [r3, #1556]	; 0x614
   36366:	4b1e      	ldr	r3, [pc, #120]	; (363e0 <nrf_modem_full_dfu_setup+0xcc>)
   36368:	b093      	sub	sp, #76	; 0x4c
   3636a:	4622      	mov	r2, r4
   3636c:	491d      	ldr	r1, [pc, #116]	; (363e4 <nrf_modem_full_dfu_setup+0xd0>)
   3636e:	4620      	mov	r0, r4
   36370:	701c      	strb	r4, [r3, #0]
   36372:	f000 fbb5 	bl	36ae0 <nrfx_ipc_init>
   36376:	2240      	movs	r2, #64	; 0x40
   36378:	4621      	mov	r1, r4
   3637a:	a801      	add	r0, sp, #4
   3637c:	f00b fcaf 	bl	41cde <memset>
   36380:	2302      	movs	r3, #2
   36382:	9302      	str	r3, [sp, #8]
   36384:	2304      	movs	r3, #4
   36386:	9609      	str	r6, [sp, #36]	; 0x24
   36388:	2605      	movs	r6, #5
   3638a:	eb0d 0003 	add.w	r0, sp, r3
   3638e:	930b      	str	r3, [sp, #44]	; 0x2c
   36390:	9611      	str	r6, [sp, #68]	; 0x44
   36392:	f000 fbcd 	bl	36b30 <nrfx_ipc_config_load>
   36396:	4b14      	ldr	r3, [pc, #80]	; (363e8 <nrf_modem_full_dfu_setup+0xd4>)
   36398:	9400      	str	r4, [sp, #0]
   3639a:	683f      	ldr	r7, [r7, #0]
   3639c:	601c      	str	r4, [r3, #0]
   3639e:	681b      	ldr	r3, [r3, #0]
   363a0:	9300      	str	r3, [sp, #0]
   363a2:	9b00      	ldr	r3, [sp, #0]
   363a4:	f7ff ff98 	bl	362d8 <modem_ipc_wait_for_event>
   363a8:	4603      	mov	r3, r0
   363aa:	b150      	cbz	r0, 363c2 <nrf_modem_full_dfu_setup+0xae>
   363ac:	2303      	movs	r3, #3
   363ae:	702b      	strb	r3, [r5, #0]
   363b0:	f7f2 ff8a 	bl	292c8 <nrf_modem_os_errno_set>
   363b4:	f000 fc00 	bl	36bb8 <nrfx_ipc_uninit>
   363b8:	f04f 33ff 	mov.w	r3, #4294967295
   363bc:	4618      	mov	r0, r3
   363be:	b013      	add	sp, #76	; 0x4c
   363c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   363c2:	6839      	ldr	r1, [r7, #0]
   363c4:	4a09      	ldr	r2, [pc, #36]	; (363ec <nrf_modem_full_dfu_setup+0xd8>)
   363c6:	4291      	cmp	r1, r2
   363c8:	d0f8      	beq.n	363bc <nrf_modem_full_dfu_setup+0xa8>
   363ca:	4630      	mov	r0, r6
   363cc:	e7f0      	b.n	363b0 <nrf_modem_full_dfu_setup+0x9c>
   363ce:	bf00      	nop
   363d0:	20018938 	.word	0x20018938
   363d4:	2001a000 	.word	0x2001a000
   363d8:	2001a004 	.word	0x2001a004
   363dc:	4002a000 	.word	0x4002a000
   363e0:	20020e51 	.word	0x20020e51
   363e4:	000362c1 	.word	0x000362c1
   363e8:	40005610 	.word	0x40005610
   363ec:	a5000001 	.word	0xa5000001

000363f0 <packet_handler_create>:
   363f0:	2801      	cmp	r0, #1
   363f2:	b570      	push	{r4, r5, r6, lr}
   363f4:	4604      	mov	r4, r0
   363f6:	460e      	mov	r6, r1
   363f8:	4615      	mov	r5, r2
   363fa:	d00f      	beq.n	3641c <packet_handler_create+0x2c>
   363fc:	1e84      	subs	r4, r0, #2
   363fe:	2c01      	cmp	r4, #1
   36400:	d810      	bhi.n	36424 <packet_handler_create+0x34>
   36402:	2010      	movs	r0, #16
   36404:	f7f3 f90c 	bl	29620 <nrf_modem_os_alloc>
   36408:	2400      	movs	r4, #0
   3640a:	b130      	cbz	r0, 3641a <packet_handler_create+0x2a>
   3640c:	2218      	movs	r2, #24
   3640e:	4b08      	ldr	r3, [pc, #32]	; (36430 <packet_handler_create+0x40>)
   36410:	6085      	str	r5, [r0, #8]
   36412:	fb02 3404 	mla	r4, r2, r4, r3
   36416:	e9c0 4600 	strd	r4, r6, [r0]
   3641a:	bd70      	pop	{r4, r5, r6, pc}
   3641c:	2014      	movs	r0, #20
   3641e:	f7f3 f8ff 	bl	29620 <nrf_modem_os_alloc>
   36422:	e7f2      	b.n	3640a <packet_handler_create+0x1a>
   36424:	200c      	movs	r0, #12
   36426:	f7f3 f8fb 	bl	29620 <nrf_modem_os_alloc>
   3642a:	2402      	movs	r4, #2
   3642c:	e7ed      	b.n	3640a <packet_handler_create+0x1a>
   3642e:	bf00      	nop
   36430:	00043f64 	.word	0x00043f64

00036434 <modem_off>:
   36434:	b537      	push	{r0, r1, r2, r4, r5, lr}
   36436:	2501      	movs	r5, #1
   36438:	4c07      	ldr	r4, [pc, #28]	; (36458 <modem_off+0x24>)
   3643a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   3643e:	6065      	str	r5, [r4, #4]
   36440:	f000 f938 	bl	366b4 <nrf_modem_busy_wait_us>
   36444:	2300      	movs	r3, #0
   36446:	6063      	str	r3, [r4, #4]
   36448:	9301      	str	r3, [sp, #4]
   3644a:	6025      	str	r5, [r4, #0]
   3644c:	6823      	ldr	r3, [r4, #0]
   3644e:	9301      	str	r3, [sp, #4]
   36450:	9b01      	ldr	r3, [sp, #4]
   36452:	b003      	add	sp, #12
   36454:	bd30      	pop	{r4, r5, pc}
   36456:	bf00      	nop
   36458:	40005610 	.word	0x40005610

0003645c <nrf_modem_init>:
   3645c:	b570      	push	{r4, r5, r6, lr}
   3645e:	460d      	mov	r5, r1
   36460:	b300      	cbz	r0, 364a4 <nrf_modem_init+0x48>
   36462:	4e13      	ldr	r6, [pc, #76]	; (364b0 <nrf_modem_init+0x54>)
   36464:	7832      	ldrb	r2, [r6, #0]
   36466:	b9ea      	cbnz	r2, 364a4 <nrf_modem_init+0x48>
   36468:	2901      	cmp	r1, #1
   3646a:	d113      	bne.n	36494 <nrf_modem_init+0x38>
   3646c:	68c1      	ldr	r1, [r0, #12]
   3646e:	6842      	ldr	r2, [r0, #4]
   36470:	440a      	add	r2, r1
   36472:	6941      	ldr	r1, [r0, #20]
   36474:	440a      	add	r2, r1
   36476:	69c1      	ldr	r1, [r0, #28]
   36478:	440a      	add	r2, r1
   3647a:	f242 011b 	movw	r1, #8219	; 0x201b
   3647e:	428a      	cmp	r2, r1
   36480:	d913      	bls.n	364aa <nrf_modem_init+0x4e>
   36482:	6800      	ldr	r0, [r0, #0]
   36484:	f7ff ff46 	bl	36314 <nrf_modem_full_dfu_setup>
   36488:	4604      	mov	r4, r0
   3648a:	b130      	cbz	r0, 3649a <nrf_modem_init+0x3e>
   3648c:	f7ff ffd2 	bl	36434 <modem_off>
   36490:	4620      	mov	r0, r4
   36492:	bd70      	pop	{r4, r5, r6, pc}
   36494:	f00b f894 	bl	415c0 <nrf_modem_platform_init>
   36498:	e7f6      	b.n	36488 <nrf_modem_init+0x2c>
   3649a:	4b06      	ldr	r3, [pc, #24]	; (364b4 <nrf_modem_init+0x58>)
   3649c:	701d      	strb	r5, [r3, #0]
   3649e:	2301      	movs	r3, #1
   364a0:	7033      	strb	r3, [r6, #0]
   364a2:	e7f5      	b.n	36490 <nrf_modem_init+0x34>
   364a4:	f04f 34ff 	mov.w	r4, #4294967295
   364a8:	e7f2      	b.n	36490 <nrf_modem_init+0x34>
   364aa:	240c      	movs	r4, #12
   364ac:	e7f0      	b.n	36490 <nrf_modem_init+0x34>
   364ae:	bf00      	nop
   364b0:	20020e52 	.word	0x20020e52
   364b4:	20020e53 	.word	0x20020e53

000364b8 <nrf_modem_shutdown>:
   364b8:	4b0c      	ldr	r3, [pc, #48]	; (364ec <nrf_modem_shutdown+0x34>)
   364ba:	b510      	push	{r4, lr}
   364bc:	781a      	ldrb	r2, [r3, #0]
   364be:	b18a      	cbz	r2, 364e4 <nrf_modem_shutdown+0x2c>
   364c0:	2400      	movs	r4, #0
   364c2:	701c      	strb	r4, [r3, #0]
   364c4:	4b0a      	ldr	r3, [pc, #40]	; (364f0 <nrf_modem_shutdown+0x38>)
   364c6:	781b      	ldrb	r3, [r3, #0]
   364c8:	b12b      	cbz	r3, 364d6 <nrf_modem_shutdown+0x1e>
   364ca:	2b01      	cmp	r3, #1
   364cc:	d007      	beq.n	364de <nrf_modem_shutdown+0x26>
   364ce:	f7ff ffb1 	bl	36434 <modem_off>
   364d2:	4620      	mov	r0, r4
   364d4:	bd10      	pop	{r4, pc}
   364d6:	f000 f80d 	bl	364f4 <nrf_modem_platform_shutdown>
   364da:	4604      	mov	r4, r0
   364dc:	e7f7      	b.n	364ce <nrf_modem_shutdown+0x16>
   364de:	f000 fb6b 	bl	36bb8 <nrfx_ipc_uninit>
   364e2:	e7f4      	b.n	364ce <nrf_modem_shutdown+0x16>
   364e4:	f04f 34ff 	mov.w	r4, #4294967295
   364e8:	e7f3      	b.n	364d2 <nrf_modem_shutdown+0x1a>
   364ea:	bf00      	nop
   364ec:	20020e52 	.word	0x20020e52
   364f0:	20020e53 	.word	0x20020e53

000364f4 <nrf_modem_platform_shutdown>:
   364f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   364f6:	f7ff fa15 	bl	35924 <gnss_interface_deinit>
   364fa:	2800      	cmp	r0, #0
   364fc:	bf14      	ite	ne
   364fe:	2416      	movne	r4, #22
   36500:	2400      	moveq	r4, #0
   36502:	f7fd f8ad 	bl	33660 <ip_interface_deinit>
   36506:	2800      	cmp	r0, #0
   36508:	bf18      	it	ne
   3650a:	2416      	movne	r4, #22
   3650c:	f7fe fca2 	bl	34e54 <mfu_interface_deinit>
   36510:	2800      	cmp	r0, #0
   36512:	bf18      	it	ne
   36514:	2416      	movne	r4, #22
   36516:	f7ff fb9d 	bl	35c54 <pdn_interface_deinit>
   3651a:	2800      	cmp	r0, #0
   3651c:	bf18      	it	ne
   3651e:	2416      	movne	r4, #22
   36520:	f7fe f844 	bl	345ac <tls_interface_deinit>
   36524:	2800      	cmp	r0, #0
   36526:	bf18      	it	ne
   36528:	2416      	movne	r4, #22
   3652a:	f7fe fbcd 	bl	34cc8 <at_interface_deinit>
   3652e:	2800      	cmp	r0, #0
   36530:	bf18      	it	ne
   36532:	2416      	movne	r4, #22
   36534:	f247 5530 	movw	r5, #30000	; 0x7530
   36538:	f7fd f814 	bl	33564 <interface_shutdown>
   3653c:	2664      	movs	r6, #100	; 0x64
   3653e:	f009 ff03 	bl	40348 <rpc_transport_request_shutdown>
   36542:	f009 ff03 	bl	4034c <rpc_transport_shutdown_done>
   36546:	b908      	cbnz	r0, 3654c <nrf_modem_platform_shutdown+0x58>
   36548:	2d00      	cmp	r5, #0
   3654a:	dc16      	bgt.n	3657a <nrf_modem_platform_shutdown+0x86>
   3654c:	f009 ff00 	bl	40350 <rpc_transport_shutdown>
   36550:	f64b 3580 	movw	r5, #48000	; 0xbb80
   36554:	2764      	movs	r7, #100	; 0x64
   36556:	4e0d      	ldr	r6, [pc, #52]	; (3658c <nrf_modem_platform_shutdown+0x98>)
   36558:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
   3655c:	2b01      	cmp	r3, #1
   3655e:	d109      	bne.n	36574 <nrf_modem_platform_shutdown+0x80>
   36560:	2000      	movs	r0, #0
   36562:	a901      	add	r1, sp, #4
   36564:	9701      	str	r7, [sp, #4]
   36566:	f7f2 fdf7 	bl	29158 <nrf_modem_os_timedwait>
   3656a:	9b01      	ldr	r3, [sp, #4]
   3656c:	3b64      	subs	r3, #100	; 0x64
   3656e:	441d      	add	r5, r3
   36570:	2d00      	cmp	r5, #0
   36572:	dcf1      	bgt.n	36558 <nrf_modem_platform_shutdown+0x64>
   36574:	4620      	mov	r0, r4
   36576:	b003      	add	sp, #12
   36578:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3657a:	a901      	add	r1, sp, #4
   3657c:	9601      	str	r6, [sp, #4]
   3657e:	f7f2 fdeb 	bl	29158 <nrf_modem_os_timedwait>
   36582:	9b01      	ldr	r3, [sp, #4]
   36584:	3b64      	subs	r3, #100	; 0x64
   36586:	441d      	add	r5, r3
   36588:	e7db      	b.n	36542 <nrf_modem_platform_shutdown+0x4e>
   3658a:	bf00      	nop
   3658c:	40005000 	.word	0x40005000

00036590 <nrf_modem_platform_af_method_table_get>:
   36590:	280a      	cmp	r0, #10
   36592:	b508      	push	{r3, lr}
   36594:	d80b      	bhi.n	365ae <nrf_modem_platform_af_method_table_get+0x1e>
   36596:	2800      	cmp	r0, #0
   36598:	d036      	beq.n	36608 <nrf_modem_platform_af_method_table_get+0x78>
   3659a:	3801      	subs	r0, #1
   3659c:	2809      	cmp	r0, #9
   3659e:	d833      	bhi.n	36608 <nrf_modem_platform_af_method_table_get+0x78>
   365a0:	e8df f000 	tbb	[pc, r0]
   365a4:	32321429 	.word	0x32321429
   365a8:	32323224 	.word	0x32323224
   365ac:	1432      	.short	0x1432
   365ae:	2866      	cmp	r0, #102	; 0x66
   365b0:	d12a      	bne.n	36608 <nrf_modem_platform_af_method_table_get+0x78>
   365b2:	f240 2301 	movw	r3, #513	; 0x201
   365b6:	429a      	cmp	r2, r3
   365b8:	d028      	beq.n	3660c <nrf_modem_platform_af_method_table_get+0x7c>
   365ba:	f240 2302 	movw	r3, #514	; 0x202
   365be:	429a      	cmp	r2, r3
   365c0:	d026      	beq.n	36610 <nrf_modem_platform_af_method_table_get+0x80>
   365c2:	202b      	movs	r0, #43	; 0x2b
   365c4:	f7f2 fe80 	bl	292c8 <nrf_modem_os_errno_set>
   365c8:	2000      	movs	r0, #0
   365ca:	e009      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   365cc:	f5b2 7f83 	cmp.w	r2, #262	; 0x106
   365d0:	d207      	bcs.n	365e2 <nrf_modem_platform_af_method_table_get+0x52>
   365d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
   365d6:	d207      	bcs.n	365e8 <nrf_modem_platform_af_method_table_get+0x58>
   365d8:	3a01      	subs	r2, #1
   365da:	2a01      	cmp	r2, #1
   365dc:	d8f1      	bhi.n	365c2 <nrf_modem_platform_af_method_table_get+0x32>
   365de:	480e      	ldr	r0, [pc, #56]	; (36618 <nrf_modem_platform_af_method_table_get+0x88>)
   365e0:	bd08      	pop	{r3, pc}
   365e2:	f5b2 7f87 	cmp.w	r2, #270	; 0x10e
   365e6:	d1ec      	bne.n	365c2 <nrf_modem_platform_af_method_table_get+0x32>
   365e8:	480c      	ldr	r0, [pc, #48]	; (3661c <nrf_modem_platform_af_method_table_get+0x8c>)
   365ea:	e7f9      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   365ec:	2903      	cmp	r1, #3
   365ee:	480c      	ldr	r0, [pc, #48]	; (36620 <nrf_modem_platform_af_method_table_get+0x90>)
   365f0:	bf18      	it	ne
   365f2:	2000      	movne	r0, #0
   365f4:	e7f4      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   365f6:	f240 2303 	movw	r3, #515	; 0x203
   365fa:	429a      	cmp	r2, r3
   365fc:	d00a      	beq.n	36614 <nrf_modem_platform_af_method_table_get+0x84>
   365fe:	f5b2 7f01 	cmp.w	r2, #516	; 0x204
   36602:	d1de      	bne.n	365c2 <nrf_modem_platform_af_method_table_get+0x32>
   36604:	4807      	ldr	r0, [pc, #28]	; (36624 <nrf_modem_platform_af_method_table_get+0x94>)
   36606:	e7eb      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   36608:	2016      	movs	r0, #22
   3660a:	e7db      	b.n	365c4 <nrf_modem_platform_af_method_table_get+0x34>
   3660c:	4806      	ldr	r0, [pc, #24]	; (36628 <nrf_modem_platform_af_method_table_get+0x98>)
   3660e:	e7e7      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   36610:	4806      	ldr	r0, [pc, #24]	; (3662c <nrf_modem_platform_af_method_table_get+0x9c>)
   36612:	e7e5      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   36614:	4806      	ldr	r0, [pc, #24]	; (36630 <nrf_modem_platform_af_method_table_get+0xa0>)
   36616:	e7e3      	b.n	365e0 <nrf_modem_platform_af_method_table_get+0x50>
   36618:	00043fd4 	.word	0x00043fd4
   3661c:	00043ffc 	.word	0x00043ffc
   36620:	0004409c 	.word	0x0004409c
   36624:	00044074 	.word	0x00044074
   36628:	00043fac 	.word	0x00043fac
   3662c:	0004404c 	.word	0x0004404c
   36630:	00044024 	.word	0x00044024

00036634 <nrf_modem_platform_fd_method_table_get>:
   36634:	b538      	push	{r3, r4, r5, lr}
   36636:	4605      	mov	r5, r0
   36638:	f7fc ff14 	bl	33464 <interface_socket_from_handle_get>
   3663c:	4604      	mov	r4, r0
   3663e:	b130      	cbz	r0, 3664e <nrf_modem_platform_fd_method_table_get+0x1a>
   36640:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
   36644:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   36648:	68c0      	ldr	r0, [r0, #12]
   3664a:	f7ff bfa1 	b.w	36590 <nrf_modem_platform_af_method_table_get>
   3664e:	4b0b      	ldr	r3, [pc, #44]	; (3667c <nrf_modem_platform_fd_method_table_get+0x48>)
   36650:	429d      	cmp	r5, r3
   36652:	d00c      	beq.n	3666e <nrf_modem_platform_fd_method_table_get+0x3a>
   36654:	4a0a      	ldr	r2, [pc, #40]	; (36680 <nrf_modem_platform_fd_method_table_get+0x4c>)
   36656:	0c2b      	lsrs	r3, r5, #16
   36658:	041b      	lsls	r3, r3, #16
   3665a:	4293      	cmp	r3, r2
   3665c:	d009      	beq.n	36672 <nrf_modem_platform_fd_method_table_get+0x3e>
   3665e:	4b09      	ldr	r3, [pc, #36]	; (36684 <nrf_modem_platform_fd_method_table_get+0x50>)
   36660:	429d      	cmp	r5, r3
   36662:	d008      	beq.n	36676 <nrf_modem_platform_fd_method_table_get+0x42>
   36664:	2009      	movs	r0, #9
   36666:	f7f2 fe2f 	bl	292c8 <nrf_modem_os_errno_set>
   3666a:	4620      	mov	r0, r4
   3666c:	bd38      	pop	{r3, r4, r5, pc}
   3666e:	4c06      	ldr	r4, [pc, #24]	; (36688 <nrf_modem_platform_fd_method_table_get+0x54>)
   36670:	e7fb      	b.n	3666a <nrf_modem_platform_fd_method_table_get+0x36>
   36672:	4c06      	ldr	r4, [pc, #24]	; (3668c <nrf_modem_platform_fd_method_table_get+0x58>)
   36674:	e7f9      	b.n	3666a <nrf_modem_platform_fd_method_table_get+0x36>
   36676:	4c06      	ldr	r4, [pc, #24]	; (36690 <nrf_modem_platform_fd_method_table_get+0x5c>)
   36678:	e7f7      	b.n	3666a <nrf_modem_platform_fd_method_table_get+0x36>
   3667a:	bf00      	nop
   3667c:	49765432 	.word	0x49765432
   36680:	789a0000 	.word	0x789a0000
   36684:	49765443 	.word	0x49765443
   36688:	00044024 	.word	0x00044024
   3668c:	0004404c 	.word	0x0004404c
   36690:	00044074 	.word	0x00044074

00036694 <nrf_modem_platform_fcntl>:
   36694:	b508      	push	{r3, lr}
   36696:	4b06      	ldr	r3, [pc, #24]	; (366b0 <nrf_modem_platform_fcntl+0x1c>)
   36698:	4298      	cmp	r0, r3
   3669a:	d003      	beq.n	366a4 <nrf_modem_platform_fcntl+0x10>
   3669c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   366a0:	f7fc bf8a 	b.w	335b8 <interface_socket_fcntl>
   366a4:	202d      	movs	r0, #45	; 0x2d
   366a6:	f7f2 fe0f 	bl	292c8 <nrf_modem_os_errno_set>
   366aa:	f04f 30ff 	mov.w	r0, #4294967295
   366ae:	bd08      	pop	{r3, pc}
   366b0:	49765432 	.word	0x49765432

000366b4 <nrf_modem_busy_wait_us>:
   366b4:	b508      	push	{r3, lr}
   366b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   366ba:	4358      	muls	r0, r3
   366bc:	f7e6 f802 	bl	1c6c4 <__aeabi_ui2d>
   366c0:	4b0a      	ldr	r3, [pc, #40]	; (366ec <nrf_modem_busy_wait_us+0x38>)
   366c2:	2200      	movs	r2, #0
   366c4:	f7e6 f9a2 	bl	1ca0c <__aeabi_ddiv>
   366c8:	f7e6 fb58 	bl	1cd7c <__aeabi_d2f>
   366cc:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   366d0:	ee07 0a90 	vmov	s15, r0
   366d4:	eec7 7a87 	vdiv.f32	s15, s15, s14
   366d8:	2300      	movs	r3, #0
   366da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   366de:	ee17 2a90 	vmov	r2, s15
   366e2:	4293      	cmp	r3, r2
   366e4:	d100      	bne.n	366e8 <nrf_modem_busy_wait_us+0x34>
   366e6:	bd08      	pop	{r3, pc}
   366e8:	3301      	adds	r3, #1
   366ea:	e7f8      	b.n	366de <nrf_modem_busy_wait_us+0x2a>
   366ec:	402f4000 	.word	0x402f4000

000366f0 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   366f0:	4a07      	ldr	r2, [pc, #28]	; (36710 <SystemInit+0x20>)
   366f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   366f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   366fa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   366fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   36702:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   36706:	4b03      	ldr	r3, [pc, #12]	; (36714 <SystemInit+0x24>)
   36708:	4a03      	ldr	r2, [pc, #12]	; (36718 <SystemInit+0x28>)
   3670a:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   3670c:	4770      	bx	lr
   3670e:	bf00      	nop
   36710:	e000ed00 	.word	0xe000ed00
   36714:	20015630 	.word	0x20015630
   36718:	03d09000 	.word	0x03d09000

0003671c <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
   3671c:	b508      	push	{r3, lr}
    switch (domain)
   3671e:	b178      	cbz	r0, 36740 <nrf_clock_is_running.constprop.0+0x24>
   36720:	2801      	cmp	r0, #1
   36722:	d019      	beq.n	36758 <nrf_clock_is_running.constprop.0+0x3c>
            NRFX_ASSERT(0);
   36724:	f240 3342 	movw	r3, #834	; 0x342
   36728:	4a10      	ldr	r2, [pc, #64]	; (3676c <nrf_clock_is_running.constprop.0+0x50>)
   3672a:	4911      	ldr	r1, [pc, #68]	; (36770 <nrf_clock_is_running.constprop.0+0x54>)
   3672c:	4811      	ldr	r0, [pc, #68]	; (36774 <nrf_clock_is_running.constprop.0+0x58>)
   3672e:	f006 fb22 	bl	3cd76 <printk>
   36732:	480e      	ldr	r0, [pc, #56]	; (3676c <nrf_clock_is_running.constprop.0+0x50>)
   36734:	f240 3142 	movw	r1, #834	; 0x342
   36738:	f006 fdd1 	bl	3d2de <assert_post_action>
            return false;
   3673c:	2000      	movs	r0, #0
   3673e:	e00a      	b.n	36756 <nrf_clock_is_running.constprop.0+0x3a>
            if (p_clk_src != NULL)
   36740:	4a0d      	ldr	r2, [pc, #52]	; (36778 <nrf_clock_is_running.constprop.0+0x5c>)
   36742:	b121      	cbz	r1, 3674e <nrf_clock_is_running.constprop.0+0x32>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   36744:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
   36748:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
   3674c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   3674e:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   36752:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
   36756:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
   36758:	4a07      	ldr	r2, [pc, #28]	; (36778 <nrf_clock_is_running.constprop.0+0x5c>)
   3675a:	b121      	cbz	r1, 36766 <nrf_clock_is_running.constprop.0+0x4a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   3675c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
   36760:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
   36764:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   36766:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   3676a:	e7f2      	b.n	36752 <nrf_clock_is_running.constprop.0+0x36>
   3676c:	0004b64b 	.word	0x0004b64b
   36770:	0004bcc7 	.word	0x0004bcc7
   36774:	00044dbf 	.word	0x00044dbf
   36778:	40005000 	.word	0x40005000

0003677c <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
   3677c:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
   3677e:	4604      	mov	r4, r0
   36780:	b948      	cbnz	r0, 36796 <nrfx_clock_init+0x1a>
   36782:	490a      	ldr	r1, [pc, #40]	; (367ac <nrfx_clock_init+0x30>)
   36784:	480a      	ldr	r0, [pc, #40]	; (367b0 <nrfx_clock_init+0x34>)
   36786:	23b3      	movs	r3, #179	; 0xb3
   36788:	4a0a      	ldr	r2, [pc, #40]	; (367b4 <nrfx_clock_init+0x38>)
   3678a:	f006 faf4 	bl	3cd76 <printk>
   3678e:	21b3      	movs	r1, #179	; 0xb3
   36790:	4808      	ldr	r0, [pc, #32]	; (367b4 <nrfx_clock_init+0x38>)
   36792:	f006 fda4 	bl	3d2de <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   36796:	4b08      	ldr	r3, [pc, #32]	; (367b8 <nrfx_clock_init+0x3c>)
   36798:	791a      	ldrb	r2, [r3, #4]
   3679a:	b922      	cbnz	r2, 367a6 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   3679c:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
   3679e:	4807      	ldr	r0, [pc, #28]	; (367bc <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
   367a0:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
   367a2:	711a      	strb	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   367a4:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   367a6:	4806      	ldr	r0, [pc, #24]	; (367c0 <nrfx_clock_init+0x44>)
    return err_code;
   367a8:	e7fc      	b.n	367a4 <nrfx_clock_init+0x28>
   367aa:	bf00      	nop
   367ac:	0004b6bc 	.word	0x0004b6bc
   367b0:	00044dbf 	.word	0x00044dbf
   367b4:	0004b67f 	.word	0x0004b67f
   367b8:	2001a008 	.word	0x2001a008
   367bc:	0bad0000 	.word	0x0bad0000
   367c0:	0bad000c 	.word	0x0bad000c

000367c4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
   367c4:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   367c6:	4b0b      	ldr	r3, [pc, #44]	; (367f4 <nrfx_clock_enable+0x30>)
   367c8:	791b      	ldrb	r3, [r3, #4]
   367ca:	b94b      	cbnz	r3, 367e0 <nrfx_clock_enable+0x1c>
   367cc:	490a      	ldr	r1, [pc, #40]	; (367f8 <nrfx_clock_enable+0x34>)
   367ce:	480b      	ldr	r0, [pc, #44]	; (367fc <nrfx_clock_enable+0x38>)
   367d0:	23cc      	movs	r3, #204	; 0xcc
   367d2:	4a0b      	ldr	r2, [pc, #44]	; (36800 <nrfx_clock_enable+0x3c>)
   367d4:	f006 facf 	bl	3cd76 <printk>
   367d8:	21cc      	movs	r1, #204	; 0xcc
   367da:	4809      	ldr	r0, [pc, #36]	; (36800 <nrfx_clock_enable+0x3c>)
   367dc:	f006 fd7f 	bl	3d2de <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   367e0:	2005      	movs	r0, #5
   367e2:	f7ef fe9f 	bl	26524 <arch_irq_is_enabled>
   367e6:	b920      	cbnz	r0, 367f2 <nrfx_clock_enable+0x2e>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
   367e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   367ec:	2005      	movs	r0, #5
   367ee:	f7ef be89 	b.w	26504 <arch_irq_enable>
   367f2:	bd08      	pop	{r3, pc}
   367f4:	2001a008 	.word	0x2001a008
   367f8:	0004b6ca 	.word	0x0004b6ca
   367fc:	00044dbf 	.word	0x00044dbf
   36800:	0004b67f 	.word	0x0004b67f

00036804 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   36804:	4b22      	ldr	r3, [pc, #136]	; (36890 <nrfx_clock_start+0x8c>)
{
   36806:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   36808:	791b      	ldrb	r3, [r3, #4]
{
   3680a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   3680c:	b95b      	cbnz	r3, 36826 <nrfx_clock_start+0x22>
   3680e:	4921      	ldr	r1, [pc, #132]	; (36894 <nrfx_clock_start+0x90>)
   36810:	4821      	ldr	r0, [pc, #132]	; (36898 <nrfx_clock_start+0x94>)
   36812:	f44f 7384 	mov.w	r3, #264	; 0x108
   36816:	4a21      	ldr	r2, [pc, #132]	; (3689c <nrfx_clock_start+0x98>)
   36818:	f006 faad 	bl	3cd76 <printk>
   3681c:	f44f 7184 	mov.w	r1, #264	; 0x108
   36820:	481e      	ldr	r0, [pc, #120]	; (3689c <nrfx_clock_start+0x98>)
   36822:	f006 fd5c 	bl	3d2de <assert_post_action>
    switch (domain)
   36826:	b174      	cbz	r4, 36846 <nrfx_clock_start+0x42>
   36828:	2c01      	cmp	r4, #1
   3682a:	d027      	beq.n	3687c <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   3682c:	f44f 739d 	mov.w	r3, #314	; 0x13a
   36830:	4a1a      	ldr	r2, [pc, #104]	; (3689c <nrfx_clock_start+0x98>)
   36832:	491b      	ldr	r1, [pc, #108]	; (368a0 <nrfx_clock_start+0x9c>)
   36834:	4818      	ldr	r0, [pc, #96]	; (36898 <nrfx_clock_start+0x94>)
   36836:	f006 fa9e 	bl	3cd76 <printk>
   3683a:	f44f 719d 	mov.w	r1, #314	; 0x13a
   3683e:	4817      	ldr	r0, [pc, #92]	; (3689c <nrfx_clock_start+0x98>)
   36840:	f006 fd4d 	bl	3d2de <assert_post_action>
            break;
    }
}
   36844:	e016      	b.n	36874 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   36846:	4620      	mov	r0, r4
   36848:	f10d 0107 	add.w	r1, sp, #7
   3684c:	f7ff ff66 	bl	3671c <nrf_clock_is_running.constprop.0>
   36850:	4b14      	ldr	r3, [pc, #80]	; (368a4 <nrfx_clock_start+0xa0>)
   36852:	b188      	cbz	r0, 36878 <nrfx_clock_start+0x74>
   36854:	f89d 2007 	ldrb.w	r2, [sp, #7]
   36858:	2a02      	cmp	r2, #2
   3685a:	d10d      	bne.n	36878 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
   3685c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36860:	2200      	movs	r2, #0
   36862:	4b11      	ldr	r3, [pc, #68]	; (368a8 <nrfx_clock_start+0xa4>)
   36864:	601a      	str	r2, [r3, #0]
    p_reg->INTENSET = mask;
   36866:	2202      	movs	r2, #2
   36868:	681b      	ldr	r3, [r3, #0]
   3686a:	4b0e      	ldr	r3, [pc, #56]	; (368a4 <nrfx_clock_start+0xa0>)
   3686c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   36870:	2201      	movs	r2, #1
   36872:	609a      	str	r2, [r3, #8]
}
   36874:	b002      	add	sp, #8
   36876:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
   36878:	2201      	movs	r2, #1
   3687a:	e7ef      	b.n	3685c <nrfx_clock_start+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3687c:	2200      	movs	r2, #0
   3687e:	4b0b      	ldr	r3, [pc, #44]	; (368ac <nrfx_clock_start+0xa8>)
   36880:	601a      	str	r2, [r3, #0]
   36882:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   36884:	4b07      	ldr	r3, [pc, #28]	; (368a4 <nrfx_clock_start+0xa0>)
   36886:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3688a:	601c      	str	r4, [r3, #0]
}
   3688c:	e7f2      	b.n	36874 <nrfx_clock_start+0x70>
   3688e:	bf00      	nop
   36890:	2001a008 	.word	0x2001a008
   36894:	0004b6ca 	.word	0x0004b6ca
   36898:	00044dbf 	.word	0x00044dbf
   3689c:	0004b67f 	.word	0x0004b67f
   368a0:	0004bcc7 	.word	0x0004bcc7
   368a4:	40005000 	.word	0x40005000
   368a8:	40005104 	.word	0x40005104
   368ac:	40005100 	.word	0x40005100

000368b0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
   368b0:	4b2d      	ldr	r3, [pc, #180]	; (36968 <nrfx_clock_stop+0xb8>)
{
   368b2:	b513      	push	{r0, r1, r4, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
   368b4:	791b      	ldrb	r3, [r3, #4]
{
   368b6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
   368b8:	b95b      	cbnz	r3, 368d2 <nrfx_clock_stop+0x22>
   368ba:	492c      	ldr	r1, [pc, #176]	; (3696c <nrfx_clock_stop+0xbc>)
   368bc:	482c      	ldr	r0, [pc, #176]	; (36970 <nrfx_clock_stop+0xc0>)
   368be:	f240 1341 	movw	r3, #321	; 0x141
   368c2:	4a2c      	ldr	r2, [pc, #176]	; (36974 <nrfx_clock_stop+0xc4>)
   368c4:	f006 fa57 	bl	3cd76 <printk>
   368c8:	f240 1141 	movw	r1, #321	; 0x141
   368cc:	4829      	ldr	r0, [pc, #164]	; (36974 <nrfx_clock_stop+0xc4>)
   368ce:	f006 fd06 	bl	3d2de <assert_post_action>
    switch (domain)
   368d2:	b17c      	cbz	r4, 368f4 <nrfx_clock_stop+0x44>
   368d4:	2c01      	cmp	r4, #1
   368d6:	d027      	beq.n	36928 <nrfx_clock_stop+0x78>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
   368d8:	4927      	ldr	r1, [pc, #156]	; (36978 <nrfx_clock_stop+0xc8>)
   368da:	4825      	ldr	r0, [pc, #148]	; (36970 <nrfx_clock_stop+0xc0>)
   368dc:	f240 135d 	movw	r3, #349	; 0x15d
   368e0:	4a24      	ldr	r2, [pc, #144]	; (36974 <nrfx_clock_stop+0xc4>)
   368e2:	f006 fa48 	bl	3cd76 <printk>
   368e6:	f240 115d 	movw	r1, #349	; 0x15d
   368ea:	4822      	ldr	r0, [pc, #136]	; (36974 <nrfx_clock_stop+0xc4>)
   368ec:	f006 fcf7 	bl	3d2de <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   368f0:	b002      	add	sp, #8
   368f2:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   368f4:	2202      	movs	r2, #2
   368f6:	4b21      	ldr	r3, [pc, #132]	; (3697c <nrfx_clock_stop+0xcc>)
   368f8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   368fc:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   368fe:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   36902:	f242 7410 	movw	r4, #10000	; 0x2710
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36906:	f503 7382 	add.w	r3, r3, #260	; 0x104
   3690a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3690c:	4b1c      	ldr	r3, [pc, #112]	; (36980 <nrfx_clock_stop+0xd0>)
   3690e:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
   36910:	2100      	movs	r1, #0
   36912:	4608      	mov	r0, r1
   36914:	f7ff ff02 	bl	3671c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   36918:	2800      	cmp	r0, #0
   3691a:	d0e9      	beq.n	368f0 <nrfx_clock_stop+0x40>
   3691c:	2001      	movs	r0, #1
   3691e:	f00a ffd6 	bl	418ce <nrfx_busy_wait>
   36922:	3c01      	subs	r4, #1
   36924:	d1f4      	bne.n	36910 <nrfx_clock_stop+0x60>
   36926:	e7e3      	b.n	368f0 <nrfx_clock_stop+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36928:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   3692a:	4b14      	ldr	r3, [pc, #80]	; (3697c <nrfx_clock_stop+0xcc>)
   3692c:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36930:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   36934:	f503 7380 	add.w	r3, r3, #256	; 0x100
   36938:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3693a:	4b12      	ldr	r3, [pc, #72]	; (36984 <nrfx_clock_stop+0xd4>)
   3693c:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
   3693e:	f88d 4007 	strb.w	r4, [sp, #7]
   36942:	f242 7410 	movw	r4, #10000	; 0x2710
   36946:	2001      	movs	r0, #1
   36948:	f10d 0107 	add.w	r1, sp, #7
   3694c:	f7ff fee6 	bl	3671c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   36950:	2800      	cmp	r0, #0
   36952:	d0cd      	beq.n	368f0 <nrfx_clock_stop+0x40>
   36954:	f89d 0007 	ldrb.w	r0, [sp, #7]
   36958:	2801      	cmp	r0, #1
   3695a:	d1c9      	bne.n	368f0 <nrfx_clock_stop+0x40>
   3695c:	f00a ffb7 	bl	418ce <nrfx_busy_wait>
   36960:	3c01      	subs	r4, #1
   36962:	d1f0      	bne.n	36946 <nrfx_clock_stop+0x96>
   36964:	e7c4      	b.n	368f0 <nrfx_clock_stop+0x40>
   36966:	bf00      	nop
   36968:	2001a008 	.word	0x2001a008
   3696c:	0004b6ca 	.word	0x0004b6ca
   36970:	00044dbf 	.word	0x00044dbf
   36974:	0004b67f 	.word	0x0004b67f
   36978:	0004bcc7 	.word	0x0004bcc7
   3697c:	40005000 	.word	0x40005000
   36980:	4000500c 	.word	0x4000500c
   36984:	40005004 	.word	0x40005004

00036988 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   36988:	4b15      	ldr	r3, [pc, #84]	; (369e0 <nrfx_power_clock_irq_handler+0x58>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   3698a:	b507      	push	{r0, r1, r2, lr}
   3698c:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   3698e:	b14a      	cbz	r2, 369a4 <nrfx_power_clock_irq_handler+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36990:	2000      	movs	r0, #0
    p_reg->INTENCLR = mask;
   36992:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36994:	6018      	str	r0, [r3, #0]
   36996:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   36998:	4b12      	ldr	r3, [pc, #72]	; (369e4 <nrfx_power_clock_irq_handler+0x5c>)
   3699a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   3699e:	4b12      	ldr	r3, [pc, #72]	; (369e8 <nrfx_power_clock_irq_handler+0x60>)
   369a0:	681b      	ldr	r3, [r3, #0]
   369a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   369a4:	4b11      	ldr	r3, [pc, #68]	; (369ec <nrfx_power_clock_irq_handler+0x64>)
   369a6:	681a      	ldr	r2, [r3, #0]
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   369a8:	b17a      	cbz	r2, 369ca <nrfx_power_clock_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   369aa:	2000      	movs	r0, #0
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
   369ac:	f10d 0107 	add.w	r1, sp, #7
   369b0:	6018      	str	r0, [r3, #0]
   369b2:	681b      	ldr	r3, [r3, #0]
   369b4:	f7ff feb2 	bl	3671c <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   369b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   369bc:	2202      	movs	r2, #2
   369be:	2901      	cmp	r1, #1
   369c0:	4b08      	ldr	r3, [pc, #32]	; (369e4 <nrfx_power_clock_irq_handler+0x5c>)
   369c2:	d105      	bne.n	369d0 <nrfx_power_clock_irq_handler+0x48>
    p_reg->LFCLKSRC = (uint32_t)(source);
   369c4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   369c8:	6099      	str	r1, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   369ca:	b003      	add	sp, #12
   369cc:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
   369d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   369d4:	4b04      	ldr	r3, [pc, #16]	; (369e8 <nrfx_power_clock_irq_handler+0x60>)
   369d6:	2001      	movs	r0, #1
   369d8:	681b      	ldr	r3, [r3, #0]
   369da:	4798      	blx	r3
}
   369dc:	e7f5      	b.n	369ca <nrfx_power_clock_irq_handler+0x42>
   369de:	bf00      	nop
   369e0:	40005100 	.word	0x40005100
   369e4:	40005000 	.word	0x40005000
   369e8:	2001a008 	.word	0x2001a008
   369ec:	40005104 	.word	0x40005104

000369f0 <nrfx_dppi_channel_alloc>:
nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   369f0:	4a0b      	ldr	r2, [pc, #44]	; (36a20 <nrfx_dppi_channel_alloc+0x30>)
{
   369f2:	b570      	push	{r4, r5, r6, lr}
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
   369f4:	6816      	ldr	r6, [r2, #0]
   369f6:	43f1      	mvns	r1, r6
   369f8:	b289      	uxth	r1, r1
    uint8_t channel = 0;

    if (!remaining_channels)
   369fa:	b171      	cbz	r1, 36a1a <nrfx_dppi_channel_alloc+0x2a>
   369fc:	2500      	movs	r5, #0
   369fe:	b2ec      	uxtb	r4, r5
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
   36a00:	fa21 f304 	lsr.w	r3, r1, r4
   36a04:	07db      	lsls	r3, r3, #31
   36a06:	f105 0501 	add.w	r5, r5, #1
   36a0a:	d5f8      	bpl.n	369fe <nrfx_dppi_channel_alloc+0xe>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
   36a0c:	2301      	movs	r3, #1
   36a0e:	40a3      	lsls	r3, r4
   36a10:	4333      	orrs	r3, r6
    *p_channel = channel;
   36a12:	7004      	strb	r4, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
   36a14:	4803      	ldr	r0, [pc, #12]	; (36a24 <nrfx_dppi_channel_alloc+0x34>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
   36a16:	6013      	str	r3, [r2, #0]
}
   36a18:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   36a1a:	4803      	ldr	r0, [pc, #12]	; (36a28 <nrfx_dppi_channel_alloc+0x38>)
   36a1c:	e7fc      	b.n	36a18 <nrfx_dppi_channel_alloc+0x28>
   36a1e:	bf00      	nop
   36a20:	2001a010 	.word	0x2001a010
   36a24:	0bad0000 	.word	0x0bad0000
   36a28:	0bad0002 	.word	0x0bad0002

00036a2c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   36a2c:	2301      	movs	r3, #1
   36a2e:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   36a32:	f010 0fff 	tst.w	r0, #255	; 0xff
   36a36:	d012      	beq.n	36a5e <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   36a38:	f04f 0320 	mov.w	r3, #32
   36a3c:	f3ef 8111 	mrs	r1, BASEPRI
   36a40:	f383 8811 	msr	BASEPRI, r3
   36a44:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   36a48:	4a06      	ldr	r2, [pc, #24]	; (36a64 <nrfx_gpiote_channel_free+0x38>)
   36a4a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   36a4c:	ea23 0000 	bic.w	r0, r3, r0
   36a50:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   36a52:	f381 8811 	msr	BASEPRI, r1
   36a56:	f3bf 8f6f 	isb	sy
   36a5a:	4803      	ldr	r0, [pc, #12]	; (36a68 <nrfx_gpiote_channel_free+0x3c>)
   36a5c:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   36a5e:	4803      	ldr	r0, [pc, #12]	; (36a6c <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   36a60:	4770      	bx	lr
   36a62:	bf00      	nop
   36a64:	2001a014 	.word	0x2001a014
   36a68:	0bad0000 	.word	0x0bad0000
   36a6c:	0bad0004 	.word	0x0bad0004

00036a70 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   36a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   36a74:	22ff      	movs	r2, #255	; 0xff
{
   36a76:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
   36a78:	2601      	movs	r6, #1
{
   36a7a:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   36a7c:	f8df e058 	ldr.w	lr, [pc, #88]	; 36ad8 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   36a80:	4814      	ldr	r0, [pc, #80]	; (36ad4 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   36a82:	f8df 8058 	ldr.w	r8, [pc, #88]	; 36adc <nrfx_gpiote_channel_alloc+0x6c>
   36a86:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   36a88:	f04f 0120 	mov.w	r1, #32
   36a8c:	f3ef 8c11 	mrs	ip, BASEPRI
   36a90:	f381 8811 	msr	BASEPRI, r1
   36a94:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   36a98:	fa22 f103 	lsr.w	r1, r2, r3
   36a9c:	07c9      	lsls	r1, r1, #31
   36a9e:	d50a      	bpl.n	36ab6 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   36aa0:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   36aa4:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   36aa8:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
   36aaa:	bf01      	itttt	eq
   36aac:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
   36aae:	4339      	orreq	r1, r7
   36ab0:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            *p_channel = ch_idx;
   36ab4:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   36ab6:	f38c 8811 	msr	BASEPRI, ip
   36aba:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   36abe:	4540      	cmp	r0, r8
   36ac0:	d005      	beq.n	36ace <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   36ac2:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   36ac6:	439a      	bics	r2, r3
   36ac8:	f104 0401 	add.w	r4, r4, #1
   36acc:	d1db      	bne.n	36a86 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   36ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36ad2:	bf00      	nop
   36ad4:	0bad0002 	.word	0x0bad0002
   36ad8:	2001a014 	.word	0x2001a014
   36adc:	0bad0000 	.word	0x0bad0000

00036ae0 <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
   36ae0:	b570      	push	{r4, r5, r6, lr}
   36ae2:	4616      	mov	r6, r2
    NRFX_ASSERT(handler);
   36ae4:	460d      	mov	r5, r1
   36ae6:	b949      	cbnz	r1, 36afc <nrfx_ipc_init+0x1c>
   36ae8:	490b      	ldr	r1, [pc, #44]	; (36b18 <nrfx_ipc_init+0x38>)
   36aea:	480c      	ldr	r0, [pc, #48]	; (36b1c <nrfx_ipc_init+0x3c>)
   36aec:	2332      	movs	r3, #50	; 0x32
   36aee:	4a0c      	ldr	r2, [pc, #48]	; (36b20 <nrfx_ipc_init+0x40>)
   36af0:	f006 f941 	bl	3cd76 <printk>
   36af4:	2132      	movs	r1, #50	; 0x32
   36af6:	480a      	ldr	r0, [pc, #40]	; (36b20 <nrfx_ipc_init+0x40>)
   36af8:	f006 fbf1 	bl	3d2de <assert_post_action>
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   36afc:	4c09      	ldr	r4, [pc, #36]	; (36b24 <nrfx_ipc_init+0x44>)
   36afe:	7923      	ldrb	r3, [r4, #4]
   36b00:	b943      	cbnz	r3, 36b14 <nrfx_ipc_init+0x34>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

    NRFX_IRQ_PRIORITY_SET(IPC_IRQn, irq_priority);
    NRFX_IRQ_ENABLE(IPC_IRQn);
   36b02:	202a      	movs	r0, #42	; 0x2a
   36b04:	f7ef fcfe 	bl	26504 <arch_irq_enable>

    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   36b08:	2301      	movs	r3, #1
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
   36b0a:	4807      	ldr	r0, [pc, #28]	; (36b28 <nrfx_ipc_init+0x48>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
   36b0c:	7123      	strb	r3, [r4, #4]
    m_ipc_cb.handler = handler;
   36b0e:	6025      	str	r5, [r4, #0]
    m_ipc_cb.p_context = p_context;
   36b10:	60a6      	str	r6, [r4, #8]
}
   36b12:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
   36b14:	4805      	ldr	r0, [pc, #20]	; (36b2c <nrfx_ipc_init+0x4c>)
   36b16:	e7fc      	b.n	36b12 <nrfx_ipc_init+0x32>
   36b18:	00044792 	.word	0x00044792
   36b1c:	00044dbf 	.word	0x00044dbf
   36b20:	0004b6e8 	.word	0x0004b6e8
   36b24:	2001a064 	.word	0x2001a064
   36b28:	0bad0000 	.word	0x0bad0000
   36b2c:	0bad000c 	.word	0x0bad000c

00036b30 <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
   36b30:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
   36b32:	4604      	mov	r4, r0
   36b34:	b948      	cbnz	r0, 36b4a <nrfx_ipc_config_load+0x1a>
   36b36:	491a      	ldr	r1, [pc, #104]	; (36ba0 <nrfx_ipc_config_load+0x70>)
   36b38:	481a      	ldr	r0, [pc, #104]	; (36ba4 <nrfx_ipc_config_load+0x74>)
   36b3a:	2344      	movs	r3, #68	; 0x44
   36b3c:	4a1a      	ldr	r2, [pc, #104]	; (36ba8 <nrfx_ipc_config_load+0x78>)
   36b3e:	f006 f91a 	bl	3cd76 <printk>
   36b42:	2144      	movs	r1, #68	; 0x44
   36b44:	4818      	ldr	r0, [pc, #96]	; (36ba8 <nrfx_ipc_config_load+0x78>)
   36b46:	f006 fbca 	bl	3d2de <assert_post_action>
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   36b4a:	4b18      	ldr	r3, [pc, #96]	; (36bac <nrfx_ipc_config_load+0x7c>)
   36b4c:	791b      	ldrb	r3, [r3, #4]
   36b4e:	2b01      	cmp	r3, #1
   36b50:	d009      	beq.n	36b66 <nrfx_ipc_config_load+0x36>
   36b52:	4917      	ldr	r1, [pc, #92]	; (36bb0 <nrfx_ipc_config_load+0x80>)
   36b54:	4813      	ldr	r0, [pc, #76]	; (36ba4 <nrfx_ipc_config_load+0x74>)
   36b56:	2345      	movs	r3, #69	; 0x45
   36b58:	4a13      	ldr	r2, [pc, #76]	; (36ba8 <nrfx_ipc_config_load+0x78>)
   36b5a:	f006 f90c 	bl	3cd76 <printk>
   36b5e:	2145      	movs	r1, #69	; 0x45
   36b60:	4811      	ldr	r0, [pc, #68]	; (36ba8 <nrfx_ipc_config_load+0x78>)
   36b62:	f006 fbbc 	bl	3d2de <assert_post_action>
{
   36b66:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_send_config_set(NRF_IPC_Type * p_reg,
                                               uint8_t        index,
                                               uint32_t       channels_mask)
{
    p_reg->SEND_CNF[index] = channels_mask;
   36b68:	4a12      	ldr	r2, [pc, #72]	; (36bb4 <nrfx_ipc_config_load+0x84>)

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
   36b6a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   36b6e:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    for (i = 0; i < IPC_CONF_NUM; ++i)
   36b72:	3301      	adds	r3, #1
   36b74:	2b08      	cmp	r3, #8
   36b76:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   36b7a:	d1f6      	bne.n	36b6a <nrfx_ipc_config_load+0x3a>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
   36b7c:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_ipc_receive_config_set(NRF_IPC_Type * p_reg,
                                                  uint8_t        index,
                                                  uint32_t       channels_mask)
{
    p_reg->RECEIVE_CNF[index] = channels_mask;
   36b7e:	4a0d      	ldr	r2, [pc, #52]	; (36bb4 <nrfx_ipc_config_load+0x84>)
   36b80:	f104 0120 	add.w	r1, r4, #32
   36b84:	f503 70b2 	add.w	r0, r3, #356	; 0x164
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
   36b88:	f851 5b04 	ldr.w	r5, [r1], #4
    for (i = 0; i < IPC_CONF_NUM; ++i)
   36b8c:	3301      	adds	r3, #1
   36b8e:	2b08      	cmp	r3, #8
   36b90:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   36b94:	d1f6      	bne.n	36b84 <nrfx_ipc_config_load+0x54>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
   36b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
    p_reg->INTENSET = mask;
   36b98:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   36b9c:	bd38      	pop	{r3, r4, r5, pc}
   36b9e:	bf00      	nop
   36ba0:	0004b723 	.word	0x0004b723
   36ba4:	00044dbf 	.word	0x00044dbf
   36ba8:	0004b6e8 	.word	0x0004b6e8
   36bac:	2001a064 	.word	0x2001a064
   36bb0:	0004b72c 	.word	0x0004b72c
   36bb4:	4002a000 	.word	0x4002a000

00036bb8 <nrfx_ipc_uninit>:

void nrfx_ipc_uninit(void)
{
   36bb8:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   36bba:	4c1b      	ldr	r4, [pc, #108]	; (36c28 <nrfx_ipc_uninit+0x70>)
   36bbc:	7922      	ldrb	r2, [r4, #4]
   36bbe:	2a01      	cmp	r2, #1
   36bc0:	d009      	beq.n	36bd6 <nrfx_ipc_uninit+0x1e>
   36bc2:	491a      	ldr	r1, [pc, #104]	; (36c2c <nrfx_ipc_uninit+0x74>)
   36bc4:	481a      	ldr	r0, [pc, #104]	; (36c30 <nrfx_ipc_uninit+0x78>)
   36bc6:	2357      	movs	r3, #87	; 0x57
   36bc8:	4a1a      	ldr	r2, [pc, #104]	; (36c34 <nrfx_ipc_uninit+0x7c>)
   36bca:	f006 f8d4 	bl	3cd76 <printk>
   36bce:	2157      	movs	r1, #87	; 0x57
   36bd0:	4818      	ldr	r0, [pc, #96]	; (36c34 <nrfx_ipc_uninit+0x7c>)
   36bd2:	f006 fb84 	bl	3d2de <assert_post_action>
    p_reg->SEND_CNF[index] = channels_mask;
   36bd6:	2300      	movs	r3, #0
   36bd8:	4a17      	ldr	r2, [pc, #92]	; (36c38 <nrfx_ipc_uninit+0x80>)
   36bda:	4918      	ldr	r1, [pc, #96]	; (36c3c <nrfx_ipc_uninit+0x84>)
   36bdc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   36be0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
   36be4:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
   36be8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   36bec:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
   36bf0:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
   36bf4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
   36bf8:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    p_reg->RECEIVE_CNF[index] = channels_mask;
   36bfc:	f8c1 3590 	str.w	r3, [r1, #1424]	; 0x590
   36c00:	f8c2 3590 	str.w	r3, [r2, #1424]	; 0x590
   36c04:	f8c2 3594 	str.w	r3, [r2, #1428]	; 0x594
   36c08:	f8c2 3598 	str.w	r3, [r2, #1432]	; 0x598
   36c0c:	f8c2 359c 	str.w	r3, [r2, #1436]	; 0x59c
   36c10:	f8c2 35a0 	str.w	r3, [r2, #1440]	; 0x5a0
   36c14:	f8c2 35a4 	str.w	r3, [r2, #1444]	; 0x5a4
   36c18:	f8c2 35a8 	str.w	r3, [r2, #1448]	; 0x5a8
    p_reg->INTENCLR = mask;
   36c1c:	f04f 32ff 	mov.w	r2, #4294967295
   36c20:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, 0);
    }

    nrf_ipc_int_disable(NRF_IPC, 0xFFFFFFFF);
    m_ipc_cb.state = NRFX_DRV_STATE_UNINITIALIZED;
   36c24:	7123      	strb	r3, [r4, #4]
}
   36c26:	bd10      	pop	{r4, pc}
   36c28:	2001a064 	.word	0x2001a064
   36c2c:	0004b72c 	.word	0x0004b72c
   36c30:	00044dbf 	.word	0x00044dbf
   36c34:	0004b6e8 	.word	0x0004b6e8
   36c38:	4002a004 	.word	0x4002a004
   36c3c:	4002a000 	.word	0x4002a000

00036c40 <nrfx_ipc_receive_event_disable>:
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
}

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
   36c40:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   36c42:	4b0b      	ldr	r3, [pc, #44]	; (36c70 <nrfx_ipc_receive_event_disable+0x30>)
{
   36c44:	4604      	mov	r4, r0
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
   36c46:	791b      	ldrb	r3, [r3, #4]
   36c48:	2b01      	cmp	r3, #1
   36c4a:	d009      	beq.n	36c60 <nrfx_ipc_receive_event_disable+0x20>
   36c4c:	4909      	ldr	r1, [pc, #36]	; (36c74 <nrfx_ipc_receive_event_disable+0x34>)
   36c4e:	480a      	ldr	r0, [pc, #40]	; (36c78 <nrfx_ipc_receive_event_disable+0x38>)
   36c50:	2370      	movs	r3, #112	; 0x70
   36c52:	4a0a      	ldr	r2, [pc, #40]	; (36c7c <nrfx_ipc_receive_event_disable+0x3c>)
   36c54:	f006 f88f 	bl	3cd76 <printk>
   36c58:	2170      	movs	r1, #112	; 0x70
   36c5a:	4808      	ldr	r0, [pc, #32]	; (36c7c <nrfx_ipc_receive_event_disable+0x3c>)
   36c5c:	f006 fb3f 	bl	3d2de <assert_post_action>
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
   36c60:	2301      	movs	r3, #1
   36c62:	fa03 f404 	lsl.w	r4, r3, r4
   36c66:	4b06      	ldr	r3, [pc, #24]	; (36c80 <nrfx_ipc_receive_event_disable+0x40>)
   36c68:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
}
   36c6c:	bd10      	pop	{r4, pc}
   36c6e:	bf00      	nop
   36c70:	2001a064 	.word	0x2001a064
   36c74:	0004b72c 	.word	0x0004b72c
   36c78:	00044dbf 	.word	0x00044dbf
   36c7c:	0004b6e8 	.word	0x0004b6e8
   36c80:	4002a000 	.word	0x4002a000

00036c84 <nrfx_ipc_irq_handler>:
    return p_reg->INTPEND;
   36c84:	4b16      	ldr	r3, [pc, #88]	; (36ce0 <nrfx_ipc_irq_handler+0x5c>)
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
   36c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   36c8a:	f8d3 630c 	ldr.w	r6, [r3, #780]	; 0x30c
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
   36c8e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 36cf0 <nrfx_ipc_irq_handler+0x6c>
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);

    // Clear these events
    uint32_t bitmask = events_map;
   36c92:	4635      	mov	r5, r6
   36c94:	4f13      	ldr	r7, [pc, #76]	; (36ce4 <nrfx_ipc_irq_handler+0x60>)
   36c96:	f8df 805c 	ldr.w	r8, [pc, #92]	; 36cf4 <nrfx_ipc_irq_handler+0x70>
    while (bitmask)
   36c9a:	b935      	cbnz	r5, 36caa <nrfx_ipc_irq_handler+0x26>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
    }

    // Execute interrupt handler to provide information about events to app
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   36c9c:	4b12      	ldr	r3, [pc, #72]	; (36ce8 <nrfx_ipc_irq_handler+0x64>)
   36c9e:	4630      	mov	r0, r6
}
   36ca0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
   36ca4:	681a      	ldr	r2, [r3, #0]
   36ca6:	6899      	ldr	r1, [r3, #8]
   36ca8:	4710      	bx	r2
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   36caa:	fa95 f4a5 	rbit	r4, r5
        bitmask &= ~(1UL << event_idx);
   36cae:	2301      	movs	r3, #1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
   36cb0:	fab4 f484 	clz	r4, r4
   36cb4:	40a3      	lsls	r3, r4
   36cb6:	2c07      	cmp	r4, #7
   36cb8:	ea25 0503 	bic.w	r5, r5, r3
   36cbc:	d90b      	bls.n	36cd6 <nrfx_ipc_irq_handler+0x52>
   36cbe:	4639      	mov	r1, r7
   36cc0:	4640      	mov	r0, r8
   36cc2:	f240 13e5 	movw	r3, #485	; 0x1e5
   36cc6:	464a      	mov	r2, r9
   36cc8:	f006 f855 	bl	3cd76 <printk>
   36ccc:	f240 11e5 	movw	r1, #485	; 0x1e5
   36cd0:	4648      	mov	r0, r9
   36cd2:	f006 fb04 	bl	3d2de <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36cd6:	2200      	movs	r2, #0
   36cd8:	4b04      	ldr	r3, [pc, #16]	; (36cec <nrfx_ipc_irq_handler+0x68>)
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
   36cda:	00a4      	lsls	r4, r4, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36cdc:	511a      	str	r2, [r3, r4]
}
   36cde:	e7dc      	b.n	36c9a <nrfx_ipc_irq_handler+0x16>
   36ce0:	4002a000 	.word	0x4002a000
   36ce4:	0004b78b 	.word	0x0004b78b
   36ce8:	2001a064 	.word	0x2001a064
   36cec:	4002a100 	.word	0x4002a100
   36cf0:	0004b759 	.word	0x0004b759
   36cf4:	00044dbf 	.word	0x00044dbf

00036cf8 <nrfx_nvmc_page_erase>:
    return ((addr & 0x1u) == 0u);
}

__STATIC_INLINE bool is_valid_address(uint32_t addr, bool uicr_allowed)
{
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   36cf8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
   36cfc:	b510      	push	{r4, lr}
   36cfe:	4604      	mov	r4, r0
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   36d00:	d30b      	bcc.n	36d1a <nrfx_nvmc_page_erase+0x22>
    NRFX_ASSERT(is_valid_address(addr, false));
   36d02:	4910      	ldr	r1, [pc, #64]	; (36d44 <nrfx_nvmc_page_erase+0x4c>)
   36d04:	4810      	ldr	r0, [pc, #64]	; (36d48 <nrfx_nvmc_page_erase+0x50>)
   36d06:	f44f 7382 	mov.w	r3, #260	; 0x104
   36d0a:	4a10      	ldr	r2, [pc, #64]	; (36d4c <nrfx_nvmc_page_erase+0x54>)
   36d0c:	f006 f833 	bl	3cd76 <printk>
   36d10:	f44f 7182 	mov.w	r1, #260	; 0x104
   36d14:	480d      	ldr	r0, [pc, #52]	; (36d4c <nrfx_nvmc_page_erase+0x54>)
   36d16:	f006 fae2 	bl	3d2de <assert_post_action>
    return !(addr % flash_page_size_get());
   36d1a:	f3c4 030b 	ubfx	r3, r4, #0, #12

    if (!is_page_aligned_check(addr))
   36d1e:	b97b      	cbnz	r3, 36d40 <nrfx_nvmc_page_erase+0x48>

#if defined(NVMC_CONFIGNS_WEN_Msk)
NRF_STATIC_INLINE void nrf_nvmc_nonsecure_mode_set(NRF_NVMC_Type *    p_reg,
                                                   nrf_nvmc_ns_mode_t mode)
{
    p_reg->CONFIGNS = (uint32_t)mode;
   36d20:	2202      	movs	r2, #2
   36d22:	4b0b      	ldr	r3, [pc, #44]	; (36d50 <nrfx_nvmc_page_erase+0x58>)
   36d24:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
#elif defined(NRF9160_XXAA) || defined(NRF5340_XXAA_APPLICATION) || defined(NRF5340_XXAA_NETWORK)
    *(volatile uint32_t *)page_addr = 0xFFFFFFFF;
   36d28:	f04f 32ff 	mov.w	r2, #4294967295
   36d2c:	6022      	str	r2, [r4, #0]
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   36d2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   36d32:	07d2      	lsls	r2, r2, #31
   36d34:	d5fb      	bpl.n	36d2e <nrfx_nvmc_page_erase+0x36>
    p_reg->CONFIGNS = (uint32_t)mode;
   36d36:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   36d38:	4806      	ldr	r0, [pc, #24]	; (36d54 <nrfx_nvmc_page_erase+0x5c>)
   36d3a:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
}
   36d3e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_ADDR;
   36d40:	4805      	ldr	r0, [pc, #20]	; (36d58 <nrfx_nvmc_page_erase+0x60>)
   36d42:	e7fc      	b.n	36d3e <nrfx_nvmc_page_erase+0x46>
   36d44:	0004b7f1 	.word	0x0004b7f1
   36d48:	00044dbf 	.word	0x00044dbf
   36d4c:	0004b795 	.word	0x0004b795
   36d50:	40039000 	.word	0x40039000
   36d54:	0bad0000 	.word	0x0bad0000
   36d58:	0bad000a 	.word	0x0bad000a

00036d5c <nrfx_nvmc_word_write>:
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   36d5c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   36d60:	b538      	push	{r3, r4, r5, lr}
   36d62:	4604      	mov	r4, r0
   36d64:	460d      	mov	r5, r1
    if ((addr - NVMC_FLASH_BASE_ADDRESS) < flash_total_size_get())
   36d66:	d30b      	bcc.n	36d80 <nrfx_nvmc_word_write+0x24>
    NRFX_ASSERT(is_valid_address(addr, true));
   36d68:	4914      	ldr	r1, [pc, #80]	; (36dbc <nrfx_nvmc_word_write+0x60>)
   36d6a:	4815      	ldr	r0, [pc, #84]	; (36dc0 <nrfx_nvmc_word_write+0x64>)
   36d6c:	f44f 73c9 	mov.w	r3, #402	; 0x192
   36d70:	4a14      	ldr	r2, [pc, #80]	; (36dc4 <nrfx_nvmc_word_write+0x68>)
   36d72:	f006 f800 	bl	3cd76 <printk>
   36d76:	f44f 71c9 	mov.w	r1, #402	; 0x192
   36d7a:	4812      	ldr	r0, [pc, #72]	; (36dc4 <nrfx_nvmc_word_write+0x68>)
   36d7c:	f006 faaf 	bl	3d2de <assert_post_action>
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));
   36d80:	07a1      	lsls	r1, r4, #30
   36d82:	d00b      	beq.n	36d9c <nrfx_nvmc_word_write+0x40>
   36d84:	4910      	ldr	r1, [pc, #64]	; (36dc8 <nrfx_nvmc_word_write+0x6c>)
   36d86:	480e      	ldr	r0, [pc, #56]	; (36dc0 <nrfx_nvmc_word_write+0x64>)
   36d88:	f240 1393 	movw	r3, #403	; 0x193
   36d8c:	4a0d      	ldr	r2, [pc, #52]	; (36dc4 <nrfx_nvmc_word_write+0x68>)
   36d8e:	f005 fff2 	bl	3cd76 <printk>
   36d92:	f240 1193 	movw	r1, #403	; 0x193
   36d96:	480b      	ldr	r0, [pc, #44]	; (36dc4 <nrfx_nvmc_word_write+0x68>)
   36d98:	f006 faa1 	bl	3d2de <assert_post_action>
   36d9c:	2201      	movs	r2, #1
   36d9e:	4b0b      	ldr	r3, [pc, #44]	; (36dcc <nrfx_nvmc_word_write+0x70>)
   36da0:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    return (bool)(p_reg->READYNEXT & NVMC_READYNEXT_READYNEXT_Msk);
   36da4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
   36da8:	07d2      	lsls	r2, r2, #31
   36daa:	d5fb      	bpl.n	36da4 <nrfx_nvmc_word_write+0x48>
    *(volatile uint32_t *)addr = value;
   36dac:	6025      	str	r5, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   36dae:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIGNS = (uint32_t)mode;
   36db2:	2200      	movs	r2, #0
   36db4:	f8c3 2584 	str.w	r2, [r3, #1412]	; 0x584
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   36db8:	bd38      	pop	{r3, r4, r5, pc}
   36dba:	bf00      	nop
   36dbc:	0004b80b 	.word	0x0004b80b
   36dc0:	00044dbf 	.word	0x00044dbf
   36dc4:	0004b795 	.word	0x0004b795
   36dc8:	0004b825 	.word	0x0004b825
   36dcc:	40039000 	.word	0x40039000

00036dd0 <nrfx_wdt_init>:
static wdt_control_block_t m_cb[NRFX_WDT_ENABLED_COUNT];

nrfx_err_t nrfx_wdt_init(nrfx_wdt_t const *        p_instance,
                         nrfx_wdt_config_t const * p_config,
                         nrfx_wdt_event_handler_t  wdt_event_handler)
{
   36dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   36dd4:	4604      	mov	r4, r0
   36dd6:	4690      	mov	r8, r2
    NRFX_ASSERT(p_config);
   36dd8:	460d      	mov	r5, r1
   36dda:	b949      	cbnz	r1, 36df0 <nrfx_wdt_init+0x20>
   36ddc:	4922      	ldr	r1, [pc, #136]	; (36e68 <nrfx_wdt_init+0x98>)
   36dde:	4823      	ldr	r0, [pc, #140]	; (36e6c <nrfx_wdt_init+0x9c>)
   36de0:	233d      	movs	r3, #61	; 0x3d
   36de2:	4a23      	ldr	r2, [pc, #140]	; (36e70 <nrfx_wdt_init+0xa0>)
   36de4:	f005 ffc7 	bl	3cd76 <printk>
   36de8:	213d      	movs	r1, #61	; 0x3d
   36dea:	4821      	ldr	r0, [pc, #132]	; (36e70 <nrfx_wdt_init+0xa0>)
   36dec:	f006 fa77 	bl	3d2de <assert_post_action>
    nrfx_err_t err_code;

    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   36df0:	7922      	ldrb	r2, [r4, #4]

#if NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    (void)wdt_event_handler;
#else
    p_cb->wdt_event_handler = wdt_event_handler;
   36df2:	4b20      	ldr	r3, [pc, #128]	; (36e74 <nrfx_wdt_init+0xa4>)
   36df4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
   36df8:	f8c1 8004 	str.w	r8, [r1, #4]
#endif

    if (p_cb->state == NRFX_DRV_STATE_UNINITIALIZED)
   36dfc:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   36e00:	bb79      	cbnz	r1, 36e62 <nrfx_wdt_init+0x92>
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   36e02:	2001      	movs	r0, #1
   36e04:	f803 0032 	strb.w	r0, [r3, r2, lsl #3]
    p_reg->CONFIG = behaviour;
   36e08:	782a      	ldrb	r2, [r5, #0]
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    nrf_wdt_behaviour_set(p_instance->p_reg, p_config->behaviour);
   36e0a:	6823      	ldr	r3, [r4, #0]
   36e0c:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   36e10:	686b      	ldr	r3, [r5, #4]
   36e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   36e16:	0c5f      	lsrs	r7, r3, #17
   36e18:	03de      	lsls	r6, r3, #15
   36e1a:	4630      	mov	r0, r6
   36e1c:	2300      	movs	r3, #0
   36e1e:	4639      	mov	r1, r7
   36e20:	f7e6 f84c 	bl	1cebc <__aeabi_uldivmod>
    NRFX_ASSERT(ticks <= UINT32_MAX);
   36e24:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
   36e28:	bf08      	it	eq
   36e2a:	2e00      	cmpeq	r6, #0
    uint64_t ticks = (p_config->reload_value * 32768ULL) / 1000;
   36e2c:	4605      	mov	r5, r0
    NRFX_ASSERT(ticks <= UINT32_MAX);
   36e2e:	d309      	bcc.n	36e44 <nrfx_wdt_init+0x74>
   36e30:	4911      	ldr	r1, [pc, #68]	; (36e78 <nrfx_wdt_init+0xa8>)
   36e32:	480e      	ldr	r0, [pc, #56]	; (36e6c <nrfx_wdt_init+0x9c>)
   36e34:	2358      	movs	r3, #88	; 0x58
   36e36:	4a0e      	ldr	r2, [pc, #56]	; (36e70 <nrfx_wdt_init+0xa0>)
   36e38:	f005 ff9d 	bl	3cd76 <printk>
   36e3c:	2158      	movs	r1, #88	; 0x58
   36e3e:	480c      	ldr	r0, [pc, #48]	; (36e70 <nrfx_wdt_init+0xa0>)
   36e40:	f006 fa4d 	bl	3d2de <assert_post_action>

    nrf_wdt_reload_value_set(p_instance->p_reg, (uint32_t) ticks);
   36e44:	6820      	ldr	r0, [r4, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_value_set(NRF_WDT_Type * p_reg, uint32_t reload_value)
{
    p_reg->CRV = reload_value;
   36e46:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504

#if !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
    if (wdt_event_handler)
   36e4a:	f1b8 0f00 	cmp.w	r8, #0
   36e4e:	d006      	beq.n	36e5e <nrfx_wdt_init+0x8e>
    p_reg->INTENSET = mask;
   36e50:	2201      	movs	r2, #1
   36e52:	f8c0 2304 	str.w	r2, [r0, #772]	; 0x304
    {
        nrf_wdt_int_enable(p_instance->p_reg, NRF_WDT_INT_TIMEOUT_MASK);
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg), p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   36e56:	f340 3007 	sbfx	r0, r0, #12, #8
   36e5a:	f7ef fb53 	bl	26504 <arch_irq_enable>
    }
#endif

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   36e5e:	4807      	ldr	r0, [pc, #28]	; (36e7c <nrfx_wdt_init+0xac>)
   36e60:	e000      	b.n	36e64 <nrfx_wdt_init+0x94>
        return err_code;
   36e62:	4807      	ldr	r0, [pc, #28]	; (36e80 <nrfx_wdt_init+0xb0>)
}
   36e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   36e68:	0004b723 	.word	0x0004b723
   36e6c:	00044dbf 	.word	0x00044dbf
   36e70:	0004b84e 	.word	0x0004b84e
   36e74:	2001a070 	.word	0x2001a070
   36e78:	0004b889 	.word	0x0004b889
   36e7c:	0bad0000 	.word	0x0bad0000
   36e80:	0bad0005 	.word	0x0bad0005

00036e84 <nrfx_wdt_enable>:


void nrfx_wdt_enable(nrfx_wdt_t const * p_instance)
{
   36e84:	b570      	push	{r4, r5, r6, lr}
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->alloc_index != 0);
   36e86:	4c13      	ldr	r4, [pc, #76]	; (36ed4 <nrfx_wdt_enable+0x50>)
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   36e88:	7906      	ldrb	r6, [r0, #4]
{
   36e8a:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->alloc_index != 0);
   36e8c:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
   36e90:	785b      	ldrb	r3, [r3, #1]
   36e92:	b94b      	cbnz	r3, 36ea8 <nrfx_wdt_enable+0x24>
   36e94:	4910      	ldr	r1, [pc, #64]	; (36ed8 <nrfx_wdt_enable+0x54>)
   36e96:	4811      	ldr	r0, [pc, #68]	; (36edc <nrfx_wdt_enable+0x58>)
   36e98:	236e      	movs	r3, #110	; 0x6e
   36e9a:	4a11      	ldr	r2, [pc, #68]	; (36ee0 <nrfx_wdt_enable+0x5c>)
   36e9c:	f005 ff6b 	bl	3cd76 <printk>
   36ea0:	216e      	movs	r1, #110	; 0x6e
   36ea2:	480f      	ldr	r0, [pc, #60]	; (36ee0 <nrfx_wdt_enable+0x5c>)
   36ea4:	f006 fa1b 	bl	3d2de <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   36ea8:	f814 3036 	ldrb.w	r3, [r4, r6, lsl #3]
   36eac:	2b01      	cmp	r3, #1
   36eae:	d009      	beq.n	36ec4 <nrfx_wdt_enable+0x40>
   36eb0:	490c      	ldr	r1, [pc, #48]	; (36ee4 <nrfx_wdt_enable+0x60>)
   36eb2:	480a      	ldr	r0, [pc, #40]	; (36edc <nrfx_wdt_enable+0x58>)
   36eb4:	236f      	movs	r3, #111	; 0x6f
   36eb6:	4a0a      	ldr	r2, [pc, #40]	; (36ee0 <nrfx_wdt_enable+0x5c>)
   36eb8:	f005 ff5d 	bl	3cd76 <printk>
   36ebc:	216f      	movs	r1, #111	; 0x6f
   36ebe:	4808      	ldr	r0, [pc, #32]	; (36ee0 <nrfx_wdt_enable+0x5c>)
   36ec0:	f006 fa0d 	bl	3d2de <assert_post_action>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x01UL;
   36ec4:	2201      	movs	r2, #1
    nrf_wdt_task_trigger(p_instance->p_reg, NRF_WDT_TASK_START);
   36ec6:	682b      	ldr	r3, [r5, #0]
   36ec8:	601a      	str	r2, [r3, #0]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   36eca:	2302      	movs	r3, #2
   36ecc:	f804 3036 	strb.w	r3, [r4, r6, lsl #3]
    NRFX_LOG_INFO("Enabled.");
}
   36ed0:	bd70      	pop	{r4, r5, r6, pc}
   36ed2:	bf00      	nop
   36ed4:	2001a070 	.word	0x2001a070
   36ed8:	0004b89f 	.word	0x0004b89f
   36edc:	00044dbf 	.word	0x00044dbf
   36ee0:	0004b84e 	.word	0x0004b84e
   36ee4:	0004b8b6 	.word	0x0004b8b6

00036ee8 <nrfx_wdt_channel_alloc>:
        nrf_wdt_reload_request_set(p_instance->p_reg, (nrf_wdt_rr_register_t)(NRF_WDT_RR0 + i));
    }
}

nrfx_err_t nrfx_wdt_channel_alloc(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id * p_channel_id)
{
   36ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36eea:	4605      	mov	r5, r0
    nrfx_err_t result;
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];

    NRFX_ASSERT(p_channel_id);
   36eec:	460e      	mov	r6, r1
    wdt_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   36eee:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_channel_id);
   36ef0:	b949      	cbnz	r1, 36f06 <nrfx_wdt_channel_alloc+0x1e>
   36ef2:	491c      	ldr	r1, [pc, #112]	; (36f64 <nrfx_wdt_channel_alloc+0x7c>)
   36ef4:	481c      	ldr	r0, [pc, #112]	; (36f68 <nrfx_wdt_channel_alloc+0x80>)
   36ef6:	2385      	movs	r3, #133	; 0x85
   36ef8:	4a1c      	ldr	r2, [pc, #112]	; (36f6c <nrfx_wdt_channel_alloc+0x84>)
   36efa:	f005 ff3c 	bl	3cd76 <printk>
   36efe:	2185      	movs	r1, #133	; 0x85
   36f00:	481a      	ldr	r0, [pc, #104]	; (36f6c <nrfx_wdt_channel_alloc+0x84>)
   36f02:	f006 f9ec 	bl	3d2de <assert_post_action>
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);
   36f06:	4c1a      	ldr	r4, [pc, #104]	; (36f70 <nrfx_wdt_channel_alloc+0x88>)
   36f08:	f814 2037 	ldrb.w	r2, [r4, r7, lsl #3]
   36f0c:	2a01      	cmp	r2, #1
   36f0e:	d009      	beq.n	36f24 <nrfx_wdt_channel_alloc+0x3c>
   36f10:	4918      	ldr	r1, [pc, #96]	; (36f74 <nrfx_wdt_channel_alloc+0x8c>)
   36f12:	4815      	ldr	r0, [pc, #84]	; (36f68 <nrfx_wdt_channel_alloc+0x80>)
   36f14:	2386      	movs	r3, #134	; 0x86
   36f16:	4a15      	ldr	r2, [pc, #84]	; (36f6c <nrfx_wdt_channel_alloc+0x84>)
   36f18:	f005 ff2d 	bl	3cd76 <printk>
   36f1c:	2186      	movs	r1, #134	; 0x86
   36f1e:	4813      	ldr	r0, [pc, #76]	; (36f6c <nrfx_wdt_channel_alloc+0x84>)
   36f20:	f006 f9dd 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   36f24:	f04f 0320 	mov.w	r3, #32
   36f28:	f3ef 8c11 	mrs	ip, BASEPRI
   36f2c:	f383 8811 	msr	BASEPRI, r3
   36f30:	f3bf 8f6f 	isb	sy

    NRFX_CRITICAL_SECTION_ENTER();
    if (p_cb->alloc_index < NRF_WDT_CHANNEL_NUMBER)
   36f34:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
   36f38:	785a      	ldrb	r2, [r3, #1]
   36f3a:	2a07      	cmp	r2, #7
   36f3c:	d810      	bhi.n	36f60 <nrfx_wdt_channel_alloc+0x78>
    {
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
        p_cb->alloc_index++;
   36f3e:	1c51      	adds	r1, r2, #1
   36f40:	7059      	strb	r1, [r3, #1]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_enable(NRF_WDT_Type *        p_reg,
                                                     nrf_wdt_rr_register_t rr_register)
{
    p_reg->RREN |= 0x1UL << rr_register;
   36f42:	2301      	movs	r3, #1
        *p_channel_id = (nrfx_wdt_channel_id)(NRF_WDT_RR0 + p_cb->alloc_index);
   36f44:	7032      	strb	r2, [r6, #0]
        nrf_wdt_reload_request_enable(p_instance->p_reg, *p_channel_id);
   36f46:	6829      	ldr	r1, [r5, #0]
   36f48:	4093      	lsls	r3, r2
   36f4a:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
   36f4e:	4303      	orrs	r3, r0
        result = NRFX_SUCCESS;
   36f50:	4809      	ldr	r0, [pc, #36]	; (36f78 <nrfx_wdt_channel_alloc+0x90>)
   36f52:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
	__asm__ volatile(
   36f56:	f38c 8811 	msr	BASEPRI, ip
   36f5a:	f3bf 8f6f 	isb	sy
        result = NRFX_ERROR_NO_MEM;
    }
    NRFX_CRITICAL_SECTION_EXIT();
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(result));
    return result;
}
   36f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        result = NRFX_ERROR_NO_MEM;
   36f60:	4806      	ldr	r0, [pc, #24]	; (36f7c <nrfx_wdt_channel_alloc+0x94>)
   36f62:	e7f8      	b.n	36f56 <nrfx_wdt_channel_alloc+0x6e>
   36f64:	0004b8e0 	.word	0x0004b8e0
   36f68:	00044dbf 	.word	0x00044dbf
   36f6c:	0004b84e 	.word	0x0004b84e
   36f70:	2001a070 	.word	0x2001a070
   36f74:	0004b8b6 	.word	0x0004b8b6
   36f78:	0bad0000 	.word	0x0bad0000
   36f7c:	0bad0002 	.word	0x0bad0002

00036f80 <nrfx_wdt_channel_feed>:

void nrfx_wdt_channel_feed(nrfx_wdt_t const * p_instance, nrfx_wdt_channel_id channel_id)
{
   36f80:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   36f82:	4b0c      	ldr	r3, [pc, #48]	; (36fb4 <nrfx_wdt_channel_feed+0x34>)
   36f84:	7902      	ldrb	r2, [r0, #4]
{
   36f86:	4605      	mov	r5, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   36f88:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
{
   36f8c:	460c      	mov	r4, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state == NRFX_DRV_STATE_POWERED_ON);
   36f8e:	2b02      	cmp	r3, #2
   36f90:	d009      	beq.n	36fa6 <nrfx_wdt_channel_feed+0x26>
   36f92:	4909      	ldr	r1, [pc, #36]	; (36fb8 <nrfx_wdt_channel_feed+0x38>)
   36f94:	4809      	ldr	r0, [pc, #36]	; (36fbc <nrfx_wdt_channel_feed+0x3c>)
   36f96:	239b      	movs	r3, #155	; 0x9b
   36f98:	4a09      	ldr	r2, [pc, #36]	; (36fc0 <nrfx_wdt_channel_feed+0x40>)
   36f9a:	f005 feec 	bl	3cd76 <printk>
   36f9e:	219b      	movs	r1, #155	; 0x9b
   36fa0:	4807      	ldr	r0, [pc, #28]	; (36fc0 <nrfx_wdt_channel_feed+0x40>)
   36fa2:	f006 f99c 	bl	3d2de <assert_post_action>
    nrf_wdt_reload_request_set(p_instance->p_reg, channel_id);
   36fa6:	682b      	ldr	r3, [r5, #0]
}

NRF_STATIC_INLINE void nrf_wdt_reload_request_set(NRF_WDT_Type *        p_reg,
                                                  nrf_wdt_rr_register_t rr_register)
{
    p_reg->RR[rr_register] = NRF_WDT_RR_VALUE;
   36fa8:	4a06      	ldr	r2, [pc, #24]	; (36fc4 <nrfx_wdt_channel_feed+0x44>)
   36faa:	f504 74c0 	add.w	r4, r4, #384	; 0x180
   36fae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
}
   36fb2:	bd38      	pop	{r3, r4, r5, pc}
   36fb4:	2001a070 	.word	0x2001a070
   36fb8:	0004b8ed 	.word	0x0004b8ed
   36fbc:	00044dbf 	.word	0x00044dbf
   36fc0:	0004b84e 	.word	0x0004b84e
   36fc4:	6e524635 	.word	0x6e524635

00036fc8 <nrfx_wdt_0_irq_handler>:

#if NRFX_CHECK(NRFX_WDT0_ENABLED) && !NRFX_CHECK(NRFX_WDT_CONFIG_NO_IRQ)
void nrfx_wdt_0_irq_handler(void)
{
   36fc8:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   36fca:	4c05      	ldr	r4, [pc, #20]	; (36fe0 <nrfx_wdt_0_irq_handler+0x18>)
   36fcc:	6823      	ldr	r3, [r4, #0]
    if (nrf_wdt_event_check(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT))
   36fce:	b12b      	cbz	r3, 36fdc <nrfx_wdt_0_irq_handler+0x14>
    {
        m_cb[NRFX_WDT0_INST_IDX].wdt_event_handler();
   36fd0:	4b04      	ldr	r3, [pc, #16]	; (36fe4 <nrfx_wdt_0_irq_handler+0x1c>)
   36fd2:	685b      	ldr	r3, [r3, #4]
   36fd4:	4798      	blx	r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   36fd6:	2300      	movs	r3, #0
   36fd8:	6023      	str	r3, [r4, #0]
   36fda:	6823      	ldr	r3, [r4, #0]
        nrf_wdt_event_clear(NRF_WDT0, NRF_WDT_EVENT_TIMEOUT);
    }
}
   36fdc:	bd10      	pop	{r4, pc}
   36fde:	bf00      	nop
   36fe0:	40018100 	.word	0x40018100
   36fe4:	2001a070 	.word	0x2001a070

00036fe8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   36fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   36fea:	4b10      	ldr	r3, [pc, #64]	; (3702c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   36fec:	4f10      	ldr	r7, [pc, #64]	; (37030 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   36fee:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   36ff2:	3001      	adds	r0, #1
   36ff4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   36ff8:	42ae      	cmp	r6, r5
   36ffa:	d800      	bhi.n	36ffe <z_sys_init_run_level+0x16>
		}
	}
}
   36ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   36ffe:	e9d5 3400 	ldrd	r3, r4, [r5]
   37002:	4620      	mov	r0, r4
   37004:	4798      	blx	r3
   37006:	b170      	cbz	r0, 37026 <z_sys_init_run_level+0x3e>
   37008:	b16c      	cbz	r4, 37026 <z_sys_init_run_level+0x3e>

static ALWAYS_INLINE void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;

	*(volatile uint32_t *)addr = temp | (1 << bit);
   3700a:	2301      	movs	r3, #1
				(dev - __device_start));
   3700c:	1be4      	subs	r4, r4, r7
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3700e:	4a09      	ldr	r2, [pc, #36]	; (37034 <z_sys_init_run_level+0x4c>)
   37010:	1124      	asrs	r4, r4, #4
   37012:	0961      	lsrs	r1, r4, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   37014:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   37018:	f004 041f 	and.w	r4, r4, #31
	*(volatile uint32_t *)addr = temp | (1 << bit);
   3701c:	fa03 f404 	lsl.w	r4, r3, r4
   37020:	4304      	orrs	r4, r0
   37022:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   37026:	3508      	adds	r5, #8
   37028:	e7e6      	b.n	36ff8 <z_sys_init_run_level+0x10>
   3702a:	bf00      	nop
   3702c:	000440c4 	.word	0x000440c4
   37030:	2001591c 	.word	0x2001591c
   37034:	200159cc 	.word	0x200159cc

00037038 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   37038:	4b08      	ldr	r3, [pc, #32]	; (3705c <z_device_ready+0x24>)
   3703a:	1ac0      	subs	r0, r0, r3
   3703c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   3703e:	4b08      	ldr	r3, [pc, #32]	; (37060 <z_device_ready+0x28>)
   37040:	0942      	lsrs	r2, r0, #5
	uint32_t temp = *(volatile uint32_t *)addr;
   37042:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   37046:	2301      	movs	r3, #1
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   37048:	f000 001f 	and.w	r0, r0, #31
	return temp & (1 << bit);
   3704c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   37050:	4210      	tst	r0, r2
}
   37052:	bf0c      	ite	eq
   37054:	4618      	moveq	r0, r3
   37056:	2000      	movne	r0, #0
   37058:	4770      	bx	lr
   3705a:	bf00      	nop
   3705c:	2001591c 	.word	0x2001591c
   37060:	200159cc 	.word	0x200159cc

00037064 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   37064:	4911      	ldr	r1, [pc, #68]	; (370ac <z_impl_device_get_binding+0x48>)
{
   37066:	b570      	push	{r4, r5, r6, lr}
   37068:	4605      	mov	r5, r0
   3706a:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   3706c:	4c10      	ldr	r4, [pc, #64]	; (370b0 <z_impl_device_get_binding+0x4c>)
   3706e:	428c      	cmp	r4, r1
   37070:	d104      	bne.n	3707c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   37072:	4c0f      	ldr	r4, [pc, #60]	; (370b0 <z_impl_device_get_binding+0x4c>)
   37074:	42b4      	cmp	r4, r6
   37076:	d10a      	bne.n	3708e <z_impl_device_get_binding+0x2a>
	return NULL;
   37078:	2400      	movs	r4, #0
   3707a:	e014      	b.n	370a6 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   3707c:	4620      	mov	r0, r4
   3707e:	f7ff ffdb 	bl	37038 <z_device_ready>
   37082:	b110      	cbz	r0, 3708a <z_impl_device_get_binding+0x26>
   37084:	6823      	ldr	r3, [r4, #0]
   37086:	42ab      	cmp	r3, r5
   37088:	d00d      	beq.n	370a6 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   3708a:	3410      	adds	r4, #16
   3708c:	e7ef      	b.n	3706e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3708e:	4620      	mov	r0, r4
   37090:	f7ff ffd2 	bl	37038 <z_device_ready>
   37094:	b908      	cbnz	r0, 3709a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   37096:	3410      	adds	r4, #16
   37098:	e7ec      	b.n	37074 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   3709a:	4628      	mov	r0, r5
   3709c:	6821      	ldr	r1, [r4, #0]
   3709e:	f7e6 f8d3 	bl	1d248 <strcmp>
   370a2:	2800      	cmp	r0, #0
   370a4:	d1f7      	bne.n	37096 <z_impl_device_get_binding+0x32>
}
   370a6:	4620      	mov	r0, r4
   370a8:	bd70      	pop	{r4, r5, r6, pc}
   370aa:	bf00      	nop
   370ac:	200159cc 	.word	0x200159cc
   370b0:	2001591c 	.word	0x2001591c

000370b4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   370b4:	4b01      	ldr	r3, [pc, #4]	; (370bc <z_impl_z_errno+0x8>)
   370b6:	6898      	ldr	r0, [r3, #8]
}
   370b8:	3070      	adds	r0, #112	; 0x70
   370ba:	4770      	bx	lr
   370bc:	2001a07c 	.word	0x2001a07c

000370c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   370c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   370c4:	4605      	mov	r5, r0
   370c6:	460f      	mov	r7, r1
	__asm__ volatile(
   370c8:	f04f 0320 	mov.w	r3, #32
   370cc:	f3ef 8811 	mrs	r8, BASEPRI
   370d0:	f383 8811 	msr	BASEPRI, r3
   370d4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   370d8:	f002 f8e6 	bl	392a8 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   370dc:	2200      	movs	r2, #0
   370de:	4b28      	ldr	r3, [pc, #160]	; (37180 <z_fatal_error+0xc0>)
   370e0:	4c28      	ldr	r4, [pc, #160]	; (37184 <z_fatal_error+0xc4>)
   370e2:	2d04      	cmp	r5, #4
   370e4:	eba4 0403 	sub.w	r4, r4, r3
   370e8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   370ec:	bf98      	it	ls
   370ee:	4b26      	ldrls	r3, [pc, #152]	; (37188 <z_fatal_error+0xc8>)
   370f0:	ea4f 1484 	mov.w	r4, r4, lsl #6
   370f4:	4606      	mov	r6, r0
   370f6:	bf94      	ite	ls
   370f8:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
   370fc:	4b23      	ldrhi	r3, [pc, #140]	; (3718c <z_fatal_error+0xcc>)
   370fe:	9200      	str	r2, [sp, #0]
   37100:	4923      	ldr	r1, [pc, #140]	; (37190 <z_fatal_error+0xd0>)
   37102:	462a      	mov	r2, r5
   37104:	f044 0001 	orr.w	r0, r4, #1
   37108:	f006 f8fa 	bl	3d300 <log_string_sync>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   3710c:	b147      	cbz	r7, 37120 <z_fatal_error+0x60>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   3710e:	69fb      	ldr	r3, [r7, #28]
   37110:	f3c3 0308 	ubfx	r3, r3, #0, #9
   37114:	b123      	cbz	r3, 37120 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
   37116:	491f      	ldr	r1, [pc, #124]	; (37194 <z_fatal_error+0xd4>)
   37118:	f044 0001 	orr.w	r0, r4, #1
   3711c:	f006 f8f0 	bl	3d300 <log_string_sync>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   37120:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   37124:	b12e      	cbz	r6, 37132 <z_fatal_error+0x72>
   37126:	4630      	mov	r0, r6
   37128:	f00a fc77 	bl	41a1a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   3712c:	b108      	cbz	r0, 37132 <z_fatal_error+0x72>
   3712e:	7803      	ldrb	r3, [r0, #0]
   37130:	b903      	cbnz	r3, 37134 <z_fatal_error+0x74>
		thread_name = "unknown";
   37132:	4819      	ldr	r0, [pc, #100]	; (37198 <z_fatal_error+0xd8>)
	LOG_ERR("Current thread: %p (%s)", thread,
   37134:	f006 f8f7 	bl	3d326 <log_strdup>
   37138:	4632      	mov	r2, r6
   3713a:	4603      	mov	r3, r0
   3713c:	4917      	ldr	r1, [pc, #92]	; (3719c <z_fatal_error+0xdc>)
   3713e:	4620      	mov	r0, r4
   37140:	f006 f8de 	bl	3d300 <log_string_sync>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   37144:	4639      	mov	r1, r7
   37146:	4628      	mov	r0, r5
   37148:	f7e9 fa94 	bl	20674 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   3714c:	2d04      	cmp	r5, #4
   3714e:	d10c      	bne.n	3716a <z_fatal_error+0xaa>
   37150:	4913      	ldr	r1, [pc, #76]	; (371a0 <z_fatal_error+0xe0>)
   37152:	238e      	movs	r3, #142	; 0x8e
   37154:	4a13      	ldr	r2, [pc, #76]	; (371a4 <z_fatal_error+0xe4>)
   37156:	4814      	ldr	r0, [pc, #80]	; (371a8 <z_fatal_error+0xe8>)
   37158:	f005 fe0d 	bl	3cd76 <printk>
   3715c:	4813      	ldr	r0, [pc, #76]	; (371ac <z_fatal_error+0xec>)
   3715e:	f005 fe0a 	bl	3cd76 <printk>
   37162:	218e      	movs	r1, #142	; 0x8e
   37164:	480f      	ldr	r0, [pc, #60]	; (371a4 <z_fatal_error+0xe4>)
   37166:	f006 f8ba 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3716a:	f388 8811 	msr	BASEPRI, r8
   3716e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   37172:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   37174:	b002      	add	sp, #8
   37176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3717a:	f7ef be31 	b.w	26de0 <z_impl_k_thread_abort>
   3717e:	bf00      	nop
   37180:	0004339c 	.word	0x0004339c
   37184:	000434bc 	.word	0x000434bc
   37188:	000440dc 	.word	0x000440dc
   3718c:	0004b92f 	.word	0x0004b92f
   37190:	0004b945 	.word	0x0004b945
   37194:	0004b96d 	.word	0x0004b96d
   37198:	0004b93d 	.word	0x0004b93d
   3719c:	0004b98e 	.word	0x0004b98e
   371a0:	0004b9c8 	.word	0x0004b9c8
   371a4:	0004b9a6 	.word	0x0004b9a6
   371a8:	00044dbf 	.word	0x00044dbf
   371ac:	0004b9e5 	.word	0x0004b9e5

000371b0 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   371b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   371b2:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   371b4:	2700      	movs	r7, #0
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   371b6:	4e15      	ldr	r6, [pc, #84]	; (3720c <idle+0x5c>)
	__asm__ volatile(
   371b8:	f04f 0220 	mov.w	r2, #32
   371bc:	f3ef 8311 	mrs	r3, BASEPRI
   371c0:	f382 8811 	msr	BASEPRI, r2
   371c4:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   371c8:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   371ca:	b188      	cbz	r0, 371f0 <idle+0x40>
			cpu->pending_abort = NULL;
   371cc:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   371ce:	f383 8811 	msr	BASEPRI, r3
   371d2:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   371d6:	f001 fb99 	bl	3890c <z_thread_single_abort>
	__asm__ volatile(
   371da:	f04f 0320 	mov.w	r3, #32
   371de:	f3ef 8011 	mrs	r0, BASEPRI
   371e2:	f383 8811 	msr	BASEPRI, r3
   371e6:	f3bf 8f6f 	isb	sy
   371ea:	f00a fbba 	bl	41962 <z_reschedule_irqlock>
			continue;
   371ee:	e7e3      	b.n	371b8 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
   371f0:	f002 fe14 	bl	39e1c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   371f4:	2101      	movs	r1, #1
		int32_t ticks = z_get_next_timeout_expiry();
   371f6:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   371f8:	2802      	cmp	r0, #2
   371fa:	bfd8      	it	le
   371fc:	4608      	movle	r0, r1
   371fe:	f002 fe55 	bl	39eac <z_set_timeout_expiry>
		_kernel.idle = ticks;
   37202:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   37204:	f7ef fa26 	bl	26654 <arch_cpu_idle>
}
   37208:	e7d6      	b.n	371b8 <idle+0x8>
   3720a:	bf00      	nop
   3720c:	2001a07c 	.word	0x2001a07c

00037210 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   37210:	4802      	ldr	r0, [pc, #8]	; (3721c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   37212:	4a03      	ldr	r2, [pc, #12]	; (37220 <z_bss_zero+0x10>)
   37214:	2100      	movs	r1, #0
   37216:	1a12      	subs	r2, r2, r0
   37218:	f00a bd61 	b.w	41cde <memset>
   3721c:	20015c08 	.word	0x20015c08
   37220:	20020e68 	.word	0x20020e68

00037224 <bg_thread_main>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
   37224:	2201      	movs	r2, #1
{
   37226:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   37228:	4b09      	ldr	r3, [pc, #36]	; (37250 <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3722a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   3722c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   3722e:	f7ff fedb 	bl	36fe8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   37232:	f002 fbe3 	bl	399fc <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   37236:	2003      	movs	r0, #3
   37238:	f7ff fed6 	bl	36fe8 <z_sys_init_run_level>

	z_init_static_threads();
   3723c:	f002 f9ec 	bl	39618 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   37240:	f7e9 ff16 	bl	21070 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   37244:	4a03      	ldr	r2, [pc, #12]	; (37254 <bg_thread_main+0x30>)
   37246:	7b13      	ldrb	r3, [r2, #12]
   37248:	f023 0301 	bic.w	r3, r3, #1
   3724c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   3724e:	bd08      	pop	{r3, pc}
   37250:	20020e54 	.word	0x20020e54
   37254:	20018a20 	.word	0x20018a20

00037258 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   37258:	b580      	push	{r7, lr}
   3725a:	b0ba      	sub	sp, #232	; 0xe8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   3725c:	f7ed f900 	bl	24460 <log_core_init>
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
   37260:	4b34      	ldr	r3, [pc, #208]	; (37334 <z_cstart+0xdc>)
	uint32_t msp =
   37262:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   37266:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
   3726a:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   3726e:	2400      	movs	r4, #0
   37270:	23e0      	movs	r3, #224	; 0xe0
   37272:	4d31      	ldr	r5, [pc, #196]	; (37338 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   37274:	4e31      	ldr	r6, [pc, #196]	; (3733c <z_cstart+0xe4>)
   37276:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   3727a:	77ec      	strb	r4, [r5, #31]
   3727c:	762c      	strb	r4, [r5, #24]
   3727e:	766c      	strb	r4, [r5, #25]
   37280:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   37282:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   37284:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 37358 <z_cstart+0x100>
   37288:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   3728c:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   3728e:	f7ef fd39 	bl	26d04 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   37292:	f7ef f9d9 	bl	26648 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   37296:	f04f 33ff 	mov.w	r3, #4294967295
   3729a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   3729c:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   3729e:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   372a2:	4d27      	ldr	r5, [pc, #156]	; (37340 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   372a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   372a8:	ab06      	add	r3, sp, #24
   372aa:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   372ac:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   372ae:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
   372b2:	f7ff fe99 	bl	36fe8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   372b6:	2001      	movs	r0, #1
   372b8:	f7ff fe96 	bl	36fe8 <z_sys_init_run_level>
	z_sched_init();
   372bc:	f001 fe62 	bl	38f84 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   372c0:	4b20      	ldr	r3, [pc, #128]	; (37344 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   372c2:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   372c4:	9305      	str	r3, [sp, #20]
   372c6:	2303      	movs	r3, #3
   372c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   372cc:	491e      	ldr	r1, [pc, #120]	; (37348 <z_cstart+0xf0>)
   372ce:	e9cd 4303 	strd	r4, r3, [sp, #12]
   372d2:	4630      	mov	r0, r6
   372d4:	4653      	mov	r3, sl
   372d6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   372da:	9400      	str	r4, [sp, #0]
   372dc:	f002 f8d0 	bl	39480 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   372e0:	7b73      	ldrb	r3, [r6, #13]
   372e2:	4680      	mov	r8, r0
   372e4:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   372e8:	4630      	mov	r0, r6
   372ea:	7373      	strb	r3, [r6, #13]
   372ec:	f001 f894 	bl	38418 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   372f0:	230f      	movs	r3, #15
   372f2:	2201      	movs	r2, #1
   372f4:	4f15      	ldr	r7, [pc, #84]	; (3734c <z_cstart+0xf4>)
   372f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
   372fa:	4915      	ldr	r1, [pc, #84]	; (37350 <z_cstart+0xf8>)
   372fc:	f44f 72a0 	mov.w	r2, #320	; 0x140
   37300:	4b14      	ldr	r3, [pc, #80]	; (37354 <z_cstart+0xfc>)
   37302:	4638      	mov	r0, r7
   37304:	e9cd 4401 	strd	r4, r4, [sp, #4]
   37308:	9405      	str	r4, [sp, #20]
   3730a:	9500      	str	r5, [sp, #0]
   3730c:	f002 f8b8 	bl	39480 <z_setup_new_thread>
   37310:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   37312:	4652      	mov	r2, sl
   37314:	f023 0304 	bic.w	r3, r3, #4
   37318:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   3731a:	f105 031c 	add.w	r3, r5, #28
   3731e:	4641      	mov	r1, r8
   37320:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
   37322:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   37326:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   37328:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   3732a:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   3732e:	f7ef f965 	bl	265fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   37332:	bf00      	nop
   37334:	200257a8 	.word	0x200257a8
   37338:	e000ed00 	.word	0xe000ed00
   3733c:	20018a20 	.word	0x20018a20
   37340:	2001a07c 	.word	0x2001a07c
   37344:	0004ba64 	.word	0x0004ba64
   37348:	20023668 	.word	0x20023668
   3734c:	20018950 	.word	0x20018950
   37350:	20025668 	.word	0x20025668
   37354:	000371b1 	.word	0x000371b1
   37358:	00037225 	.word	0x00037225

0003735c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   3735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   3735e:	4d0f      	ldr	r5, [pc, #60]	; (3739c <statics_init+0x40>)
   37360:	4c0f      	ldr	r4, [pc, #60]	; (373a0 <statics_init+0x44>)
   37362:	462f      	mov	r7, r5
   37364:	4e0f      	ldr	r6, [pc, #60]	; (373a4 <statics_init+0x48>)
   37366:	42ac      	cmp	r4, r5
   37368:	d90c      	bls.n	37384 <statics_init+0x28>
   3736a:	490f      	ldr	r1, [pc, #60]	; (373a8 <statics_init+0x4c>)
   3736c:	2315      	movs	r3, #21
   3736e:	4632      	mov	r2, r6
   37370:	480e      	ldr	r0, [pc, #56]	; (373ac <statics_init+0x50>)
   37372:	f005 fd00 	bl	3cd76 <printk>
   37376:	480e      	ldr	r0, [pc, #56]	; (373b0 <statics_init+0x54>)
   37378:	f005 fcfd 	bl	3cd76 <printk>
   3737c:	2115      	movs	r1, #21
   3737e:	4630      	mov	r0, r6
   37380:	f005 ffad 	bl	3d2de <assert_post_action>
   37384:	42bc      	cmp	r4, r7
   37386:	d301      	bcc.n	3738c <statics_init+0x30>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   37388:	2000      	movs	r0, #0
   3738a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   3738c:	4620      	mov	r0, r4
   3738e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   37392:	f00a faa9 	bl	418e8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   37396:	3418      	adds	r4, #24
   37398:	e7e5      	b.n	37366 <statics_init+0xa>
   3739a:	bf00      	nop
   3739c:	20015a60 	.word	0x20015a60
   373a0:	20015a30 	.word	0x20015a30
   373a4:	0004ba6c 	.word	0x0004ba6c
   373a8:	0004ba8e 	.word	0x0004ba8e
   373ac:	00044dbf 	.word	0x00044dbf
   373b0:	00045ca5 	.word	0x00045ca5

000373b4 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   373b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   373b8:	b087      	sub	sp, #28
   373ba:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   373be:	4606      	mov	r6, r0
   373c0:	468b      	mov	fp, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   373c2:	4640      	mov	r0, r8
   373c4:	4649      	mov	r1, r9
{
   373c6:	4692      	mov	sl, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   373c8:	f00a fb88 	bl	41adc <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   373cc:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   373d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   373d4:	f04f 0320 	mov.w	r3, #32
   373d8:	f3ef 8511 	mrs	r5, BASEPRI
   373dc:	f383 8811 	msr	BASEPRI, r3
   373e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   373e4:	4620      	mov	r0, r4
   373e6:	f002 f9a7 	bl	39738 <z_spin_lock_valid>
   373ea:	b968      	cbnz	r0, 37408 <k_heap_aligned_alloc+0x54>
   373ec:	237c      	movs	r3, #124	; 0x7c
   373ee:	4a3f      	ldr	r2, [pc, #252]	; (374ec <k_heap_aligned_alloc+0x138>)
   373f0:	493f      	ldr	r1, [pc, #252]	; (374f0 <k_heap_aligned_alloc+0x13c>)
   373f2:	4840      	ldr	r0, [pc, #256]	; (374f4 <k_heap_aligned_alloc+0x140>)
   373f4:	f005 fcbf 	bl	3cd76 <printk>
   373f8:	4621      	mov	r1, r4
   373fa:	483f      	ldr	r0, [pc, #252]	; (374f8 <k_heap_aligned_alloc+0x144>)
   373fc:	f005 fcbb 	bl	3cd76 <printk>
   37400:	217c      	movs	r1, #124	; 0x7c
   37402:	483a      	ldr	r0, [pc, #232]	; (374ec <k_heap_aligned_alloc+0x138>)
   37404:	f005 ff6b 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   37408:	4620      	mov	r0, r4
   3740a:	f002 f9b3 	bl	39774 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   3740e:	f3ef 8305 	mrs	r3, IPSR

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   37412:	b17b      	cbz	r3, 37434 <k_heap_aligned_alloc+0x80>
   37414:	ea58 0309 	orrs.w	r3, r8, r9
   37418:	d00c      	beq.n	37434 <k_heap_aligned_alloc+0x80>
   3741a:	4938      	ldr	r1, [pc, #224]	; (374fc <k_heap_aligned_alloc+0x148>)
   3741c:	2324      	movs	r3, #36	; 0x24
   3741e:	4a38      	ldr	r2, [pc, #224]	; (37500 <k_heap_aligned_alloc+0x14c>)
   37420:	4834      	ldr	r0, [pc, #208]	; (374f4 <k_heap_aligned_alloc+0x140>)
   37422:	f005 fca8 	bl	3cd76 <printk>
   37426:	4837      	ldr	r0, [pc, #220]	; (37504 <k_heap_aligned_alloc+0x150>)
   37428:	f005 fca5 	bl	3cd76 <printk>
   3742c:	2124      	movs	r1, #36	; 0x24
   3742e:	4834      	ldr	r0, [pc, #208]	; (37500 <k_heap_aligned_alloc+0x14c>)
   37430:	f005 ff55 	bl	3d2de <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37434:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 374ec <k_heap_aligned_alloc+0x138>
   37438:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 374f0 <k_heap_aligned_alloc+0x13c>

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   3743c:	4652      	mov	r2, sl
   3743e:	4659      	mov	r1, fp
   37440:	4630      	mov	r0, r6
   37442:	f7eb ffaf 	bl	233a4 <sys_heap_aligned_alloc>
   37446:	4607      	mov	r7, r0

		now = z_tick_get();
   37448:	f002 fe4a 	bl	3a0e0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   3744c:	b1cf      	cbz	r7, 37482 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3744e:	4620      	mov	r0, r4
   37450:	f002 f980 	bl	39754 <z_spin_unlock_valid>
   37454:	b968      	cbnz	r0, 37472 <k_heap_aligned_alloc+0xbe>
   37456:	23a7      	movs	r3, #167	; 0xa7
   37458:	4a24      	ldr	r2, [pc, #144]	; (374ec <k_heap_aligned_alloc+0x138>)
   3745a:	492b      	ldr	r1, [pc, #172]	; (37508 <k_heap_aligned_alloc+0x154>)
   3745c:	4825      	ldr	r0, [pc, #148]	; (374f4 <k_heap_aligned_alloc+0x140>)
   3745e:	f005 fc8a 	bl	3cd76 <printk>
   37462:	4621      	mov	r1, r4
   37464:	4829      	ldr	r0, [pc, #164]	; (3750c <k_heap_aligned_alloc+0x158>)
   37466:	f005 fc86 	bl	3cd76 <printk>
   3746a:	21a7      	movs	r1, #167	; 0xa7
   3746c:	481f      	ldr	r0, [pc, #124]	; (374ec <k_heap_aligned_alloc+0x138>)
   3746e:	f005 ff36 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37472:	f385 8811 	msr	BASEPRI, r5
   37476:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   3747a:	4638      	mov	r0, r7
   3747c:	b007      	add	sp, #28
   3747e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   37482:	9b04      	ldr	r3, [sp, #16]
   37484:	1a1b      	subs	r3, r3, r0
   37486:	9302      	str	r3, [sp, #8]
   37488:	9b05      	ldr	r3, [sp, #20]
   3748a:	eb63 0301 	sbc.w	r3, r3, r1
   3748e:	9303      	str	r3, [sp, #12]
   37490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   37494:	2a01      	cmp	r2, #1
   37496:	f173 0300 	sbcs.w	r3, r3, #0
   3749a:	dbd8      	blt.n	3744e <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   3749c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   374a0:	4629      	mov	r1, r5
   374a2:	e9cd 2300 	strd	r2, r3, [sp]
   374a6:	4620      	mov	r0, r4
   374a8:	f106 020c 	add.w	r2, r6, #12
   374ac:	f001 fc1e 	bl	38cec <z_pend_curr>
	__asm__ volatile(
   374b0:	f04f 0320 	mov.w	r3, #32
   374b4:	f3ef 8511 	mrs	r5, BASEPRI
   374b8:	f383 8811 	msr	BASEPRI, r3
   374bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   374c0:	4620      	mov	r0, r4
   374c2:	f002 f939 	bl	39738 <z_spin_lock_valid>
   374c6:	b968      	cbnz	r0, 374e4 <k_heap_aligned_alloc+0x130>
   374c8:	237c      	movs	r3, #124	; 0x7c
   374ca:	4642      	mov	r2, r8
   374cc:	4649      	mov	r1, r9
   374ce:	4809      	ldr	r0, [pc, #36]	; (374f4 <k_heap_aligned_alloc+0x140>)
   374d0:	f005 fc51 	bl	3cd76 <printk>
   374d4:	4621      	mov	r1, r4
   374d6:	4808      	ldr	r0, [pc, #32]	; (374f8 <k_heap_aligned_alloc+0x144>)
   374d8:	f005 fc4d 	bl	3cd76 <printk>
   374dc:	217c      	movs	r1, #124	; 0x7c
   374de:	4640      	mov	r0, r8
   374e0:	f005 fefd 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   374e4:	4620      	mov	r0, r4
   374e6:	f002 f945 	bl	39774 <z_spin_lock_set_owner>
	return k;
   374ea:	e7a7      	b.n	3743c <k_heap_aligned_alloc+0x88>
   374ec:	00045538 	.word	0x00045538
   374f0:	0004555e 	.word	0x0004555e
   374f4:	00044dbf 	.word	0x00044dbf
   374f8:	00045573 	.word	0x00045573
   374fc:	0004baa4 	.word	0x0004baa4
   37500:	0004ba6c 	.word	0x0004ba6c
   37504:	00045c27 	.word	0x00045c27
   37508:	0004558b 	.word	0x0004558b
   3750c:	000455a2 	.word	0x000455a2

00037510 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   37510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37512:	4605      	mov	r5, r0
   37514:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   37516:	f100 0414 	add.w	r4, r0, #20
   3751a:	f04f 0320 	mov.w	r3, #32
   3751e:	f3ef 8711 	mrs	r7, BASEPRI
   37522:	f383 8811 	msr	BASEPRI, r3
   37526:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3752a:	4620      	mov	r0, r4
   3752c:	f002 f904 	bl	39738 <z_spin_lock_valid>
   37530:	b968      	cbnz	r0, 3754e <k_heap_free+0x3e>
   37532:	237c      	movs	r3, #124	; 0x7c
   37534:	4a1a      	ldr	r2, [pc, #104]	; (375a0 <k_heap_free+0x90>)
   37536:	491b      	ldr	r1, [pc, #108]	; (375a4 <k_heap_free+0x94>)
   37538:	481b      	ldr	r0, [pc, #108]	; (375a8 <k_heap_free+0x98>)
   3753a:	f005 fc1c 	bl	3cd76 <printk>
   3753e:	4621      	mov	r1, r4
   37540:	481a      	ldr	r0, [pc, #104]	; (375ac <k_heap_free+0x9c>)
   37542:	f005 fc18 	bl	3cd76 <printk>
   37546:	217c      	movs	r1, #124	; 0x7c
   37548:	4815      	ldr	r0, [pc, #84]	; (375a0 <k_heap_free+0x90>)
   3754a:	f005 fec8 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3754e:	4620      	mov	r0, r4
   37550:	f002 f910 	bl	39774 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   37554:	4628      	mov	r0, r5
   37556:	4631      	mov	r1, r6
   37558:	f7eb fece 	bl	232f8 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   3755c:	f105 000c 	add.w	r0, r5, #12
   37560:	f00a fa2e 	bl	419c0 <z_unpend_all>
   37564:	b128      	cbz	r0, 37572 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   37566:	4639      	mov	r1, r7
   37568:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   3756a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   3756e:	f000 bd0d 	b.w	37f8c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37572:	4620      	mov	r0, r4
   37574:	f002 f8ee 	bl	39754 <z_spin_unlock_valid>
   37578:	b968      	cbnz	r0, 37596 <k_heap_free+0x86>
   3757a:	23a7      	movs	r3, #167	; 0xa7
   3757c:	4a08      	ldr	r2, [pc, #32]	; (375a0 <k_heap_free+0x90>)
   3757e:	490c      	ldr	r1, [pc, #48]	; (375b0 <k_heap_free+0xa0>)
   37580:	4809      	ldr	r0, [pc, #36]	; (375a8 <k_heap_free+0x98>)
   37582:	f005 fbf8 	bl	3cd76 <printk>
   37586:	4621      	mov	r1, r4
   37588:	480a      	ldr	r0, [pc, #40]	; (375b4 <k_heap_free+0xa4>)
   3758a:	f005 fbf4 	bl	3cd76 <printk>
   3758e:	21a7      	movs	r1, #167	; 0xa7
   37590:	4803      	ldr	r0, [pc, #12]	; (375a0 <k_heap_free+0x90>)
   37592:	f005 fea4 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37596:	f387 8811 	msr	BASEPRI, r7
   3759a:	f3bf 8f6f 	isb	sy
}
   3759e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   375a0:	00045538 	.word	0x00045538
   375a4:	0004555e 	.word	0x0004555e
   375a8:	00044dbf 	.word	0x00044dbf
   375ac:	00045573 	.word	0x00045573
   375b0:	0004558b 	.word	0x0004558b
   375b4:	000455a2 	.word	0x000455a2

000375b8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   375b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   375bc:	4d16      	ldr	r5, [pc, #88]	; (37618 <init_mem_slab_module+0x60>)
   375be:	4c17      	ldr	r4, [pc, #92]	; (3761c <init_mem_slab_module+0x64>)
   375c0:	46a8      	mov	r8, r5
   375c2:	4e17      	ldr	r6, [pc, #92]	; (37620 <init_mem_slab_module+0x68>)
   375c4:	42ac      	cmp	r4, r5
   375c6:	d90c      	bls.n	375e2 <init_mem_slab_module+0x2a>
   375c8:	4916      	ldr	r1, [pc, #88]	; (37624 <init_mem_slab_module+0x6c>)
   375ca:	2342      	movs	r3, #66	; 0x42
   375cc:	4632      	mov	r2, r6
   375ce:	4816      	ldr	r0, [pc, #88]	; (37628 <init_mem_slab_module+0x70>)
   375d0:	f005 fbd1 	bl	3cd76 <printk>
   375d4:	4815      	ldr	r0, [pc, #84]	; (3762c <init_mem_slab_module+0x74>)
   375d6:	f005 fbce 	bl	3cd76 <printk>
   375da:	2142      	movs	r1, #66	; 0x42
   375dc:	4630      	mov	r0, r6
   375de:	f005 fe7e 	bl	3d2de <assert_post_action>
   375e2:	4544      	cmp	r4, r8
   375e4:	d302      	bcc.n	375ec <init_mem_slab_module+0x34>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   375e6:	2000      	movs	r0, #0
	return rc;
}
   375e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   375ec:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
   375f0:	ea41 0302 	orr.w	r3, r1, r2
   375f4:	f013 0303 	ands.w	r3, r3, #3
   375f8:	d10b      	bne.n	37612 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   375fa:	68a0      	ldr	r0, [r4, #8]
	slab->free_list = NULL;
   375fc:	6163      	str	r3, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   375fe:	4283      	cmp	r3, r0
   37600:	d101      	bne.n	37606 <init_mem_slab_module+0x4e>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   37602:	341c      	adds	r4, #28
   37604:	e7de      	b.n	375c4 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   37606:	6967      	ldr	r7, [r4, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   37608:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
   3760a:	600f      	str	r7, [r1, #0]
		slab->free_list = p;
   3760c:	6161      	str	r1, [r4, #20]
		p += slab->block_size;
   3760e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   37610:	e7f5      	b.n	375fe <init_mem_slab_module+0x46>
		return -EINVAL;
   37612:	f06f 0015 	mvn.w	r0, #21
	return rc;
   37616:	e7e7      	b.n	375e8 <init_mem_slab_module+0x30>
   37618:	20015a30 	.word	0x20015a30
   3761c:	20015a30 	.word	0x20015a30
   37620:	0004bae9 	.word	0x0004bae9
   37624:	0004bb0e 	.word	0x0004bb0e
   37628:	00044dbf 	.word	0x00044dbf
   3762c:	00045ca5 	.word	0x00045ca5

00037630 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   37630:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   37634:	4604      	mov	r4, r0
   37636:	468a      	mov	sl, r1
   37638:	4690      	mov	r8, r2
   3763a:	4699      	mov	r9, r3
   3763c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   37640:	b17b      	cbz	r3, 37662 <z_impl_k_msgq_put+0x32>
   37642:	ea58 0309 	orrs.w	r3, r8, r9
   37646:	d00c      	beq.n	37662 <z_impl_k_msgq_put+0x32>
   37648:	4940      	ldr	r1, [pc, #256]	; (3774c <z_impl_k_msgq_put+0x11c>)
   3764a:	2376      	movs	r3, #118	; 0x76
   3764c:	4a40      	ldr	r2, [pc, #256]	; (37750 <z_impl_k_msgq_put+0x120>)
   3764e:	4841      	ldr	r0, [pc, #260]	; (37754 <z_impl_k_msgq_put+0x124>)
   37650:	f005 fb91 	bl	3cd76 <printk>
   37654:	4840      	ldr	r0, [pc, #256]	; (37758 <z_impl_k_msgq_put+0x128>)
   37656:	f005 fb8e 	bl	3cd76 <printk>
   3765a:	2176      	movs	r1, #118	; 0x76
   3765c:	483c      	ldr	r0, [pc, #240]	; (37750 <z_impl_k_msgq_put+0x120>)
   3765e:	f005 fe3e 	bl	3d2de <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   37662:	f104 0508 	add.w	r5, r4, #8
	__asm__ volatile(
   37666:	f04f 0320 	mov.w	r3, #32
   3766a:	f3ef 8711 	mrs	r7, BASEPRI
   3766e:	f383 8811 	msr	BASEPRI, r3
   37672:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37676:	4628      	mov	r0, r5
   37678:	f002 f85e 	bl	39738 <z_spin_lock_valid>
   3767c:	b968      	cbnz	r0, 3769a <z_impl_k_msgq_put+0x6a>
   3767e:	237c      	movs	r3, #124	; 0x7c
   37680:	4a36      	ldr	r2, [pc, #216]	; (3775c <z_impl_k_msgq_put+0x12c>)
   37682:	4937      	ldr	r1, [pc, #220]	; (37760 <z_impl_k_msgq_put+0x130>)
   37684:	4833      	ldr	r0, [pc, #204]	; (37754 <z_impl_k_msgq_put+0x124>)
   37686:	f005 fb76 	bl	3cd76 <printk>
   3768a:	4629      	mov	r1, r5
   3768c:	4835      	ldr	r0, [pc, #212]	; (37764 <z_impl_k_msgq_put+0x134>)
   3768e:	f005 fb72 	bl	3cd76 <printk>
   37692:	217c      	movs	r1, #124	; 0x7c
   37694:	4831      	ldr	r0, [pc, #196]	; (3775c <z_impl_k_msgq_put+0x12c>)
   37696:	f005 fe22 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3769a:	4628      	mov	r0, r5
   3769c:	f002 f86a 	bl	39774 <z_spin_lock_set_owner>

	if (msgq->used_msgs < msgq->max_msgs) {
   376a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   376a2:	6923      	ldr	r3, [r4, #16]
   376a4:	429a      	cmp	r2, r3
   376a6:	d23e      	bcs.n	37726 <z_impl_k_msgq_put+0xf6>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   376a8:	4620      	mov	r0, r4
   376aa:	f001 fbe5 	bl	38e78 <z_unpend_first_thread>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   376ae:	4651      	mov	r1, sl
		if (pending_thread != NULL) {
   376b0:	4606      	mov	r6, r0
   376b2:	68e2      	ldr	r2, [r4, #12]
   376b4:	b180      	cbz	r0, 376d8 <z_impl_k_msgq_put+0xa8>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   376b6:	2400      	movs	r4, #0
   376b8:	6940      	ldr	r0, [r0, #20]
   376ba:	f00a faf0 	bl	41c9e <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   376be:	4630      	mov	r0, r6
   376c0:	f8c6 4088 	str.w	r4, [r6, #136]	; 0x88
   376c4:	f000 fea8 	bl	38418 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   376c8:	4639      	mov	r1, r7
   376ca:	4628      	mov	r0, r5
   376cc:	f000 fc5e 	bl	37f8c <z_reschedule>
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   376d0:	4620      	mov	r0, r4
   376d2:	b002      	add	sp, #8
   376d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   376d8:	6a20      	ldr	r0, [r4, #32]
   376da:	f00a fae0 	bl	41c9e <memcpy>
			msgq->write_ptr += msgq->msg_size;
   376de:	6a23      	ldr	r3, [r4, #32]
   376e0:	68e2      	ldr	r2, [r4, #12]
   376e2:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   376e4:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   376e6:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   376e8:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   376ea:	bf04      	itt	eq
   376ec:	6963      	ldreq	r3, [r4, #20]
   376ee:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   376f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   376f2:	3301      	adds	r3, #1
   376f4:	6263      	str	r3, [r4, #36]	; 0x24
		result = 0;
   376f6:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   376f8:	4628      	mov	r0, r5
   376fa:	f002 f82b 	bl	39754 <z_spin_unlock_valid>
   376fe:	b968      	cbnz	r0, 3771c <z_impl_k_msgq_put+0xec>
   37700:	23a7      	movs	r3, #167	; 0xa7
   37702:	4a16      	ldr	r2, [pc, #88]	; (3775c <z_impl_k_msgq_put+0x12c>)
   37704:	4918      	ldr	r1, [pc, #96]	; (37768 <z_impl_k_msgq_put+0x138>)
   37706:	4813      	ldr	r0, [pc, #76]	; (37754 <z_impl_k_msgq_put+0x124>)
   37708:	f005 fb35 	bl	3cd76 <printk>
   3770c:	4629      	mov	r1, r5
   3770e:	4817      	ldr	r0, [pc, #92]	; (3776c <z_impl_k_msgq_put+0x13c>)
   37710:	f005 fb31 	bl	3cd76 <printk>
   37714:	21a7      	movs	r1, #167	; 0xa7
   37716:	4811      	ldr	r0, [pc, #68]	; (3775c <z_impl_k_msgq_put+0x12c>)
   37718:	f005 fde1 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3771c:	f387 8811 	msr	BASEPRI, r7
   37720:	f3bf 8f6f 	isb	sy
	return result;
   37724:	e7d4      	b.n	376d0 <z_impl_k_msgq_put+0xa0>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37726:	ea58 0309 	orrs.w	r3, r8, r9
   3772a:	d00c      	beq.n	37746 <z_impl_k_msgq_put+0x116>
		_current->base.swap_data = (void *) data;
   3772c:	4b10      	ldr	r3, [pc, #64]	; (37770 <z_impl_k_msgq_put+0x140>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   3772e:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   37730:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37732:	4639      	mov	r1, r7
		_current->base.swap_data = (void *) data;
   37734:	f8c3 a014 	str.w	sl, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37738:	4628      	mov	r0, r5
   3773a:	e9cd 8900 	strd	r8, r9, [sp]
   3773e:	f001 fad5 	bl	38cec <z_pend_curr>
   37742:	4604      	mov	r4, r0
   37744:	e7c4      	b.n	376d0 <z_impl_k_msgq_put+0xa0>
		result = -ENOMSG;
   37746:	f06f 0422 	mvn.w	r4, #34	; 0x22
   3774a:	e7d5      	b.n	376f8 <z_impl_k_msgq_put+0xc8>
   3774c:	0004baa4 	.word	0x0004baa4
   37750:	0004bb2b 	.word	0x0004bb2b
   37754:	00044dbf 	.word	0x00044dbf
   37758:	00045c27 	.word	0x00045c27
   3775c:	00045538 	.word	0x00045538
   37760:	0004555e 	.word	0x0004555e
   37764:	00045573 	.word	0x00045573
   37768:	0004558b 	.word	0x0004558b
   3776c:	000455a2 	.word	0x000455a2
   37770:	2001a07c 	.word	0x2001a07c

00037774 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   37774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   37778:	4604      	mov	r4, r0
   3777a:	460d      	mov	r5, r1
   3777c:	4690      	mov	r8, r2
   3777e:	4699      	mov	r9, r3
   37780:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   37784:	b17b      	cbz	r3, 377a6 <z_impl_k_msgq_get+0x32>
   37786:	ea58 0309 	orrs.w	r3, r8, r9
   3778a:	d00c      	beq.n	377a6 <z_impl_k_msgq_get+0x32>
   3778c:	4946      	ldr	r1, [pc, #280]	; (378a8 <z_impl_k_msgq_get+0x134>)
   3778e:	23c2      	movs	r3, #194	; 0xc2
   37790:	4a46      	ldr	r2, [pc, #280]	; (378ac <z_impl_k_msgq_get+0x138>)
   37792:	4847      	ldr	r0, [pc, #284]	; (378b0 <z_impl_k_msgq_get+0x13c>)
   37794:	f005 faef 	bl	3cd76 <printk>
   37798:	4846      	ldr	r0, [pc, #280]	; (378b4 <z_impl_k_msgq_get+0x140>)
   3779a:	f005 faec 	bl	3cd76 <printk>
   3779e:	21c2      	movs	r1, #194	; 0xc2
   377a0:	4842      	ldr	r0, [pc, #264]	; (378ac <z_impl_k_msgq_get+0x138>)
   377a2:	f005 fd9c 	bl	3d2de <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   377a6:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   377aa:	f04f 0320 	mov.w	r3, #32
   377ae:	f3ef 8711 	mrs	r7, BASEPRI
   377b2:	f383 8811 	msr	BASEPRI, r3
   377b6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   377ba:	4630      	mov	r0, r6
   377bc:	f001 ffbc 	bl	39738 <z_spin_lock_valid>
   377c0:	b968      	cbnz	r0, 377de <z_impl_k_msgq_get+0x6a>
   377c2:	237c      	movs	r3, #124	; 0x7c
   377c4:	4a3c      	ldr	r2, [pc, #240]	; (378b8 <z_impl_k_msgq_get+0x144>)
   377c6:	493d      	ldr	r1, [pc, #244]	; (378bc <z_impl_k_msgq_get+0x148>)
   377c8:	4839      	ldr	r0, [pc, #228]	; (378b0 <z_impl_k_msgq_get+0x13c>)
   377ca:	f005 fad4 	bl	3cd76 <printk>
   377ce:	4631      	mov	r1, r6
   377d0:	483b      	ldr	r0, [pc, #236]	; (378c0 <z_impl_k_msgq_get+0x14c>)
   377d2:	f005 fad0 	bl	3cd76 <printk>
   377d6:	217c      	movs	r1, #124	; 0x7c
   377d8:	4837      	ldr	r0, [pc, #220]	; (378b8 <z_impl_k_msgq_get+0x144>)
   377da:	f005 fd80 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   377de:	4630      	mov	r0, r6
   377e0:	f001 ffc8 	bl	39774 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0) {
   377e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   377e6:	2b00      	cmp	r3, #0
   377e8:	d036      	beq.n	37858 <z_impl_k_msgq_get+0xe4>
   377ea:	4628      	mov	r0, r5
   377ec:	68e2      	ldr	r2, [r4, #12]
   377ee:	69e1      	ldr	r1, [r4, #28]
   377f0:	f00a fa55 	bl	41c9e <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   377f4:	69e3      	ldr	r3, [r4, #28]
   377f6:	68e2      	ldr	r2, [r4, #12]
			msgq->read_ptr = msgq->buffer_start;
		}
		msgq->used_msgs--;

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   377f8:	4620      	mov	r0, r4
		msgq->read_ptr += msgq->msg_size;
   377fa:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   377fc:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   377fe:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   37800:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   37802:	bf04      	itt	eq
   37804:	6963      	ldreq	r3, [r4, #20]
   37806:	61e3      	streq	r3, [r4, #28]
		msgq->used_msgs--;
   37808:	6a63      	ldr	r3, [r4, #36]	; 0x24
   3780a:	3b01      	subs	r3, #1
   3780c:	6263      	str	r3, [r4, #36]	; 0x24
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   3780e:	f001 fb33 	bl	38e78 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   37812:	4605      	mov	r5, r0
   37814:	2800      	cmp	r0, #0
   37816:	d030      	beq.n	3787a <z_impl_k_msgq_get+0x106>
   37818:	6941      	ldr	r1, [r0, #20]
   3781a:	68e2      	ldr	r2, [r4, #12]
   3781c:	6a20      	ldr	r0, [r4, #32]
   3781e:	f00a fa3e 	bl	41c9e <memcpy>
			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   37822:	6a23      	ldr	r3, [r4, #32]
   37824:	68e2      	ldr	r2, [r4, #12]
			}
			msgq->used_msgs++;

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   37826:	4628      	mov	r0, r5
			msgq->write_ptr += msgq->msg_size;
   37828:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   3782a:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   3782c:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   3782e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   37830:	bf04      	itt	eq
   37832:	6963      	ldreq	r3, [r4, #20]
   37834:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   37836:	6a63      	ldr	r3, [r4, #36]	; 0x24
   37838:	3301      	adds	r3, #1
   3783a:	6263      	str	r3, [r4, #36]	; 0x24
   3783c:	2400      	movs	r4, #0
   3783e:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
			z_ready_thread(pending_thread);
   37842:	f000 fde9 	bl	38418 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   37846:	4639      	mov	r1, r7
   37848:	4630      	mov	r0, r6
   3784a:	f000 fb9f 	bl	37f8c <z_reschedule>
			return 0;
   3784e:	4625      	mov	r5, r4
	}

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   37850:	4628      	mov	r0, r5
   37852:	b003      	add	sp, #12
   37854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37858:	ea58 0309 	orrs.w	r3, r8, r9
   3785c:	d00b      	beq.n	37876 <z_impl_k_msgq_get+0x102>
		_current->base.swap_data = data;
   3785e:	4b19      	ldr	r3, [pc, #100]	; (378c4 <z_impl_k_msgq_get+0x150>)
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37860:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   37862:	689b      	ldr	r3, [r3, #8]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37864:	4639      	mov	r1, r7
		_current->base.swap_data = data;
   37866:	615d      	str	r5, [r3, #20]
		return z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   37868:	4630      	mov	r0, r6
   3786a:	e9cd 8900 	strd	r8, r9, [sp]
   3786e:	f001 fa3d 	bl	38cec <z_pend_curr>
   37872:	4605      	mov	r5, r0
   37874:	e7ec      	b.n	37850 <z_impl_k_msgq_get+0xdc>
		result = -ENOMSG;
   37876:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3787a:	4630      	mov	r0, r6
   3787c:	f001 ff6a 	bl	39754 <z_spin_unlock_valid>
   37880:	b968      	cbnz	r0, 3789e <z_impl_k_msgq_get+0x12a>
   37882:	23a7      	movs	r3, #167	; 0xa7
   37884:	4a0c      	ldr	r2, [pc, #48]	; (378b8 <z_impl_k_msgq_get+0x144>)
   37886:	4910      	ldr	r1, [pc, #64]	; (378c8 <z_impl_k_msgq_get+0x154>)
   37888:	4809      	ldr	r0, [pc, #36]	; (378b0 <z_impl_k_msgq_get+0x13c>)
   3788a:	f005 fa74 	bl	3cd76 <printk>
   3788e:	4631      	mov	r1, r6
   37890:	480e      	ldr	r0, [pc, #56]	; (378cc <z_impl_k_msgq_get+0x158>)
   37892:	f005 fa70 	bl	3cd76 <printk>
   37896:	21a7      	movs	r1, #167	; 0xa7
   37898:	4807      	ldr	r0, [pc, #28]	; (378b8 <z_impl_k_msgq_get+0x144>)
   3789a:	f005 fd20 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3789e:	f387 8811 	msr	BASEPRI, r7
   378a2:	f3bf 8f6f 	isb	sy
	return result;
   378a6:	e7d3      	b.n	37850 <z_impl_k_msgq_get+0xdc>
   378a8:	0004baa4 	.word	0x0004baa4
   378ac:	0004bb2b 	.word	0x0004bb2b
   378b0:	00044dbf 	.word	0x00044dbf
   378b4:	00045c27 	.word	0x00045c27
   378b8:	00045538 	.word	0x00045538
   378bc:	0004555e 	.word	0x0004555e
   378c0:	00045573 	.word	0x00045573
   378c4:	2001a07c 	.word	0x2001a07c
   378c8:	0004558b 	.word	0x0004558b
   378cc:	000455a2 	.word	0x000455a2

000378d0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   378d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   378d4:	4604      	mov	r4, r0
   378d6:	4616      	mov	r6, r2
   378d8:	461f      	mov	r7, r3
   378da:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   378de:	b163      	cbz	r3, 378fa <z_impl_k_mutex_lock+0x2a>
   378e0:	496d      	ldr	r1, [pc, #436]	; (37a98 <z_impl_k_mutex_lock+0x1c8>)
   378e2:	237d      	movs	r3, #125	; 0x7d
   378e4:	4a6d      	ldr	r2, [pc, #436]	; (37a9c <z_impl_k_mutex_lock+0x1cc>)
   378e6:	486e      	ldr	r0, [pc, #440]	; (37aa0 <z_impl_k_mutex_lock+0x1d0>)
   378e8:	f005 fa45 	bl	3cd76 <printk>
   378ec:	486d      	ldr	r0, [pc, #436]	; (37aa4 <z_impl_k_mutex_lock+0x1d4>)
   378ee:	f005 fa42 	bl	3cd76 <printk>
   378f2:	217d      	movs	r1, #125	; 0x7d
   378f4:	4869      	ldr	r0, [pc, #420]	; (37a9c <z_impl_k_mutex_lock+0x1cc>)
   378f6:	f005 fcf2 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   378fa:	f04f 0320 	mov.w	r3, #32
   378fe:	f3ef 8811 	mrs	r8, BASEPRI
   37902:	f383 8811 	msr	BASEPRI, r3
   37906:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3790a:	4867      	ldr	r0, [pc, #412]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   3790c:	f001 ff14 	bl	39738 <z_spin_lock_valid>
   37910:	b968      	cbnz	r0, 3792e <z_impl_k_mutex_lock+0x5e>
   37912:	237c      	movs	r3, #124	; 0x7c
   37914:	4a65      	ldr	r2, [pc, #404]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37916:	4966      	ldr	r1, [pc, #408]	; (37ab0 <z_impl_k_mutex_lock+0x1e0>)
   37918:	4861      	ldr	r0, [pc, #388]	; (37aa0 <z_impl_k_mutex_lock+0x1d0>)
   3791a:	f005 fa2c 	bl	3cd76 <printk>
   3791e:	4962      	ldr	r1, [pc, #392]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37920:	4864      	ldr	r0, [pc, #400]	; (37ab4 <z_impl_k_mutex_lock+0x1e4>)
   37922:	f005 fa28 	bl	3cd76 <printk>
   37926:	217c      	movs	r1, #124	; 0x7c
   37928:	4860      	ldr	r0, [pc, #384]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   3792a:	f005 fcd8 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3792e:	485e      	ldr	r0, [pc, #376]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37930:	f001 ff20 	bl	39774 <z_spin_lock_set_owner>

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   37934:	68e3      	ldr	r3, [r4, #12]
   37936:	4a60      	ldr	r2, [pc, #384]	; (37ab8 <z_impl_k_mutex_lock+0x1e8>)
   37938:	b1fb      	cbz	r3, 3797a <z_impl_k_mutex_lock+0xaa>
   3793a:	68a0      	ldr	r0, [r4, #8]
   3793c:	6891      	ldr	r1, [r2, #8]
   3793e:	4288      	cmp	r0, r1
   37940:	d03d      	beq.n	379be <z_impl_k_mutex_lock+0xee>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   37942:	ea56 0307 	orrs.w	r3, r6, r7
   37946:	d13c      	bne.n	379c2 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37948:	4857      	ldr	r0, [pc, #348]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   3794a:	f001 ff03 	bl	39754 <z_spin_unlock_valid>
   3794e:	b968      	cbnz	r0, 3796c <z_impl_k_mutex_lock+0x9c>
   37950:	23a7      	movs	r3, #167	; 0xa7
   37952:	4a56      	ldr	r2, [pc, #344]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37954:	4959      	ldr	r1, [pc, #356]	; (37abc <z_impl_k_mutex_lock+0x1ec>)
   37956:	4852      	ldr	r0, [pc, #328]	; (37aa0 <z_impl_k_mutex_lock+0x1d0>)
   37958:	f005 fa0d 	bl	3cd76 <printk>
   3795c:	4952      	ldr	r1, [pc, #328]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   3795e:	4858      	ldr	r0, [pc, #352]	; (37ac0 <z_impl_k_mutex_lock+0x1f0>)
   37960:	f005 fa09 	bl	3cd76 <printk>
   37964:	21a7      	movs	r1, #167	; 0xa7
   37966:	4851      	ldr	r0, [pc, #324]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37968:	f005 fcb9 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3796c:	f388 8811 	msr	BASEPRI, r8
   37970:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   37974:	f06f 000f 	mvn.w	r0, #15
   37978:	e01e      	b.n	379b8 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   3797a:	6891      	ldr	r1, [r2, #8]
   3797c:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   37980:	3301      	adds	r3, #1
   37982:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   37984:	6893      	ldr	r3, [r2, #8]
   37986:	4848      	ldr	r0, [pc, #288]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   37988:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   3798a:	60a3      	str	r3, [r4, #8]
   3798c:	f001 fee2 	bl	39754 <z_spin_unlock_valid>
   37990:	b968      	cbnz	r0, 379ae <z_impl_k_mutex_lock+0xde>
   37992:	23a7      	movs	r3, #167	; 0xa7
   37994:	4a45      	ldr	r2, [pc, #276]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37996:	4949      	ldr	r1, [pc, #292]	; (37abc <z_impl_k_mutex_lock+0x1ec>)
   37998:	4841      	ldr	r0, [pc, #260]	; (37aa0 <z_impl_k_mutex_lock+0x1d0>)
   3799a:	f005 f9ec 	bl	3cd76 <printk>
   3799e:	4942      	ldr	r1, [pc, #264]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   379a0:	4847      	ldr	r0, [pc, #284]	; (37ac0 <z_impl_k_mutex_lock+0x1f0>)
   379a2:	f005 f9e8 	bl	3cd76 <printk>
   379a6:	21a7      	movs	r1, #167	; 0xa7
   379a8:	4840      	ldr	r0, [pc, #256]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   379aa:	f005 fc98 	bl	3d2de <assert_post_action>
   379ae:	f388 8811 	msr	BASEPRI, r8
   379b2:	f3bf 8f6f 	isb	sy
		return 0;
   379b6:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   379b8:	b002      	add	sp, #8
   379ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   379be:	6921      	ldr	r1, [r4, #16]
   379c0:	e7de      	b.n	37980 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   379c2:	f990 300e 	ldrsb.w	r3, [r0, #14]
   379c6:	f991 100e 	ldrsb.w	r1, [r1, #14]
   379ca:	4299      	cmp	r1, r3
   379cc:	bfa8      	it	ge
   379ce:	4619      	movge	r1, r3
   379d0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   379d4:	4299      	cmp	r1, r3
   379d6:	da41      	bge.n	37a5c <z_impl_k_mutex_lock+0x18c>
		return z_set_prio(mutex->owner, new_prio);
   379d8:	f001 f9b8 	bl	38d4c <z_set_prio>
   379dc:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   379de:	4622      	mov	r2, r4
   379e0:	4641      	mov	r1, r8
   379e2:	e9cd 6700 	strd	r6, r7, [sp]
   379e6:	4830      	ldr	r0, [pc, #192]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   379e8:	f001 f980 	bl	38cec <z_pend_curr>
	if (got_mutex == 0) {
   379ec:	2800      	cmp	r0, #0
   379ee:	d0e3      	beq.n	379b8 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   379f0:	f04f 0320 	mov.w	r3, #32
   379f4:	f3ef 8611 	mrs	r6, BASEPRI
   379f8:	f383 8811 	msr	BASEPRI, r3
   379fc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37a00:	4829      	ldr	r0, [pc, #164]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37a02:	f001 fe99 	bl	39738 <z_spin_lock_valid>
   37a06:	b968      	cbnz	r0, 37a24 <z_impl_k_mutex_lock+0x154>
   37a08:	237c      	movs	r3, #124	; 0x7c
   37a0a:	4a28      	ldr	r2, [pc, #160]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37a0c:	4928      	ldr	r1, [pc, #160]	; (37ab0 <z_impl_k_mutex_lock+0x1e0>)
   37a0e:	4824      	ldr	r0, [pc, #144]	; (37aa0 <z_impl_k_mutex_lock+0x1d0>)
   37a10:	f005 f9b1 	bl	3cd76 <printk>
   37a14:	4924      	ldr	r1, [pc, #144]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37a16:	4827      	ldr	r0, [pc, #156]	; (37ab4 <z_impl_k_mutex_lock+0x1e4>)
   37a18:	f005 f9ad 	bl	3cd76 <printk>
   37a1c:	217c      	movs	r1, #124	; 0x7c
   37a1e:	4823      	ldr	r0, [pc, #140]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37a20:	f005 fc5d 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   37a24:	4820      	ldr	r0, [pc, #128]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37a26:	f001 fea5 	bl	39774 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   37a2a:	6823      	ldr	r3, [r4, #0]
   37a2c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   37a2e:	42a3      	cmp	r3, r4
   37a30:	d007      	beq.n	37a42 <z_impl_k_mutex_lock+0x172>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   37a32:	b133      	cbz	r3, 37a42 <z_impl_k_mutex_lock+0x172>
   37a34:	f993 300e 	ldrsb.w	r3, [r3, #14]
   37a38:	4299      	cmp	r1, r3
   37a3a:	bfa8      	it	ge
   37a3c:	4619      	movge	r1, r3
   37a3e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   37a42:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   37a44:	f990 300e 	ldrsb.w	r3, [r0, #14]
   37a48:	4299      	cmp	r1, r3
   37a4a:	d109      	bne.n	37a60 <z_impl_k_mutex_lock+0x190>
	if (resched) {
   37a4c:	b16d      	cbz	r5, 37a6a <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
   37a4e:	4631      	mov	r1, r6
   37a50:	4815      	ldr	r0, [pc, #84]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37a52:	f000 fa9b 	bl	37f8c <z_reschedule>
	return -EAGAIN;
   37a56:	f06f 000a 	mvn.w	r0, #10
   37a5a:	e7ad      	b.n	379b8 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   37a5c:	2500      	movs	r5, #0
   37a5e:	e7be      	b.n	379de <z_impl_k_mutex_lock+0x10e>
		return z_set_prio(mutex->owner, new_prio);
   37a60:	f001 f974 	bl	38d4c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   37a64:	2800      	cmp	r0, #0
   37a66:	d1f2      	bne.n	37a4e <z_impl_k_mutex_lock+0x17e>
   37a68:	e7f0      	b.n	37a4c <z_impl_k_mutex_lock+0x17c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37a6a:	480f      	ldr	r0, [pc, #60]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37a6c:	f001 fe72 	bl	39754 <z_spin_unlock_valid>
   37a70:	b968      	cbnz	r0, 37a8e <z_impl_k_mutex_lock+0x1be>
   37a72:	23a7      	movs	r3, #167	; 0xa7
   37a74:	4a0d      	ldr	r2, [pc, #52]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37a76:	4911      	ldr	r1, [pc, #68]	; (37abc <z_impl_k_mutex_lock+0x1ec>)
   37a78:	4809      	ldr	r0, [pc, #36]	; (37aa0 <z_impl_k_mutex_lock+0x1d0>)
   37a7a:	f005 f97c 	bl	3cd76 <printk>
   37a7e:	490a      	ldr	r1, [pc, #40]	; (37aa8 <z_impl_k_mutex_lock+0x1d8>)
   37a80:	480f      	ldr	r0, [pc, #60]	; (37ac0 <z_impl_k_mutex_lock+0x1f0>)
   37a82:	f005 f978 	bl	3cd76 <printk>
   37a86:	21a7      	movs	r1, #167	; 0xa7
   37a88:	4808      	ldr	r0, [pc, #32]	; (37aac <z_impl_k_mutex_lock+0x1dc>)
   37a8a:	f005 fc28 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37a8e:	f386 8811 	msr	BASEPRI, r6
   37a92:	f3bf 8f6f 	isb	sy
   37a96:	e7de      	b.n	37a56 <z_impl_k_mutex_lock+0x186>
   37a98:	0004bb6f 	.word	0x0004bb6f
   37a9c:	0004bb4d 	.word	0x0004bb4d
   37aa0:	00044dbf 	.word	0x00044dbf
   37aa4:	0004bb81 	.word	0x0004bb81
   37aa8:	2001a078 	.word	0x2001a078
   37aac:	00045538 	.word	0x00045538
   37ab0:	0004555e 	.word	0x0004555e
   37ab4:	00045573 	.word	0x00045573
   37ab8:	2001a07c 	.word	0x2001a07c
   37abc:	0004558b 	.word	0x0004558b
   37ac0:	000455a2 	.word	0x000455a2

00037ac4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   37ac4:	b538      	push	{r3, r4, r5, lr}
   37ac6:	4604      	mov	r4, r0
   37ac8:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   37acc:	b163      	cbz	r3, 37ae8 <z_impl_k_mutex_unlock+0x24>
   37ace:	4954      	ldr	r1, [pc, #336]	; (37c20 <z_impl_k_mutex_unlock+0x15c>)
   37ad0:	23d8      	movs	r3, #216	; 0xd8
   37ad2:	4a54      	ldr	r2, [pc, #336]	; (37c24 <z_impl_k_mutex_unlock+0x160>)
   37ad4:	4854      	ldr	r0, [pc, #336]	; (37c28 <z_impl_k_mutex_unlock+0x164>)
   37ad6:	f005 f94e 	bl	3cd76 <printk>
   37ada:	4854      	ldr	r0, [pc, #336]	; (37c2c <z_impl_k_mutex_unlock+0x168>)
   37adc:	f005 f94b 	bl	3cd76 <printk>
   37ae0:	21d8      	movs	r1, #216	; 0xd8
   37ae2:	4850      	ldr	r0, [pc, #320]	; (37c24 <z_impl_k_mutex_unlock+0x160>)
   37ae4:	f005 fbfb 	bl	3d2de <assert_post_action>

	CHECKIF(mutex->owner == NULL) {
   37ae8:	68a3      	ldr	r3, [r4, #8]
   37aea:	2b00      	cmp	r3, #0
   37aec:	f000 8092 	beq.w	37c14 <z_impl_k_mutex_unlock+0x150>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   37af0:	4d4f      	ldr	r5, [pc, #316]	; (37c30 <z_impl_k_mutex_unlock+0x16c>)
   37af2:	68aa      	ldr	r2, [r5, #8]
   37af4:	4293      	cmp	r3, r2
   37af6:	f040 8090 	bne.w	37c1a <z_impl_k_mutex_unlock+0x156>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   37afa:	68e3      	ldr	r3, [r4, #12]
   37afc:	b94b      	cbnz	r3, 37b12 <z_impl_k_mutex_unlock+0x4e>
   37afe:	494d      	ldr	r1, [pc, #308]	; (37c34 <z_impl_k_mutex_unlock+0x170>)
   37b00:	4849      	ldr	r0, [pc, #292]	; (37c28 <z_impl_k_mutex_unlock+0x164>)
   37b02:	23ea      	movs	r3, #234	; 0xea
   37b04:	4a47      	ldr	r2, [pc, #284]	; (37c24 <z_impl_k_mutex_unlock+0x160>)
   37b06:	f005 f936 	bl	3cd76 <printk>
   37b0a:	21ea      	movs	r1, #234	; 0xea
   37b0c:	4845      	ldr	r0, [pc, #276]	; (37c24 <z_impl_k_mutex_unlock+0x160>)
   37b0e:	f005 fbe6 	bl	3d2de <assert_post_action>
   37b12:	f3ef 8305 	mrs	r3, IPSR
}

static inline void z_sched_lock(void)
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
   37b16:	b173      	cbz	r3, 37b36 <z_impl_k_mutex_unlock+0x72>
   37b18:	4941      	ldr	r1, [pc, #260]	; (37c20 <z_impl_k_mutex_unlock+0x15c>)
   37b1a:	f44f 7389 	mov.w	r3, #274	; 0x112
   37b1e:	4a46      	ldr	r2, [pc, #280]	; (37c38 <z_impl_k_mutex_unlock+0x174>)
   37b20:	4841      	ldr	r0, [pc, #260]	; (37c28 <z_impl_k_mutex_unlock+0x164>)
   37b22:	f005 f928 	bl	3cd76 <printk>
   37b26:	4845      	ldr	r0, [pc, #276]	; (37c3c <z_impl_k_mutex_unlock+0x178>)
   37b28:	f005 f925 	bl	3cd76 <printk>
   37b2c:	f44f 7189 	mov.w	r1, #274	; 0x112
   37b30:	4841      	ldr	r0, [pc, #260]	; (37c38 <z_impl_k_mutex_unlock+0x174>)
   37b32:	f005 fbd4 	bl	3d2de <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   37b36:	68ab      	ldr	r3, [r5, #8]
   37b38:	7bdb      	ldrb	r3, [r3, #15]
   37b3a:	2b01      	cmp	r3, #1
   37b3c:	d10e      	bne.n	37b5c <z_impl_k_mutex_unlock+0x98>
   37b3e:	4940      	ldr	r1, [pc, #256]	; (37c40 <z_impl_k_mutex_unlock+0x17c>)
   37b40:	f240 1313 	movw	r3, #275	; 0x113
   37b44:	4a3c      	ldr	r2, [pc, #240]	; (37c38 <z_impl_k_mutex_unlock+0x174>)
   37b46:	4838      	ldr	r0, [pc, #224]	; (37c28 <z_impl_k_mutex_unlock+0x164>)
   37b48:	f005 f915 	bl	3cd76 <printk>
   37b4c:	483b      	ldr	r0, [pc, #236]	; (37c3c <z_impl_k_mutex_unlock+0x178>)
   37b4e:	f005 f912 	bl	3cd76 <printk>
   37b52:	f240 1113 	movw	r1, #275	; 0x113
   37b56:	4838      	ldr	r0, [pc, #224]	; (37c38 <z_impl_k_mutex_unlock+0x174>)
   37b58:	f005 fbc1 	bl	3d2de <assert_post_action>

	--_current->base.sched_locked;
   37b5c:	68aa      	ldr	r2, [r5, #8]
   37b5e:	7bd3      	ldrb	r3, [r2, #15]
   37b60:	3b01      	subs	r3, #1
   37b62:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   37b64:	68e3      	ldr	r3, [r4, #12]
   37b66:	2b01      	cmp	r3, #1
   37b68:	d005      	beq.n	37b76 <z_impl_k_mutex_unlock+0xb2>
		mutex->lock_count--;
   37b6a:	3b01      	subs	r3, #1
   37b6c:	60e3      	str	r3, [r4, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   37b6e:	f000 fb85 	bl	3827c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   37b72:	2000      	movs	r0, #0
}
   37b74:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   37b76:	f04f 0320 	mov.w	r3, #32
   37b7a:	f3ef 8511 	mrs	r5, BASEPRI
   37b7e:	f383 8811 	msr	BASEPRI, r3
   37b82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37b86:	482f      	ldr	r0, [pc, #188]	; (37c44 <z_impl_k_mutex_unlock+0x180>)
   37b88:	f001 fdd6 	bl	39738 <z_spin_lock_valid>
   37b8c:	b968      	cbnz	r0, 37baa <z_impl_k_mutex_unlock+0xe6>
   37b8e:	237c      	movs	r3, #124	; 0x7c
   37b90:	4a2d      	ldr	r2, [pc, #180]	; (37c48 <z_impl_k_mutex_unlock+0x184>)
   37b92:	492e      	ldr	r1, [pc, #184]	; (37c4c <z_impl_k_mutex_unlock+0x188>)
   37b94:	4824      	ldr	r0, [pc, #144]	; (37c28 <z_impl_k_mutex_unlock+0x164>)
   37b96:	f005 f8ee 	bl	3cd76 <printk>
   37b9a:	492a      	ldr	r1, [pc, #168]	; (37c44 <z_impl_k_mutex_unlock+0x180>)
   37b9c:	482c      	ldr	r0, [pc, #176]	; (37c50 <z_impl_k_mutex_unlock+0x18c>)
   37b9e:	f005 f8ea 	bl	3cd76 <printk>
   37ba2:	217c      	movs	r1, #124	; 0x7c
   37ba4:	4828      	ldr	r0, [pc, #160]	; (37c48 <z_impl_k_mutex_unlock+0x184>)
   37ba6:	f005 fb9a 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   37baa:	4826      	ldr	r0, [pc, #152]	; (37c44 <z_impl_k_mutex_unlock+0x180>)
   37bac:	f001 fde2 	bl	39774 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   37bb0:	68a0      	ldr	r0, [r4, #8]
   37bb2:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   37bb4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   37bb8:	4299      	cmp	r1, r3
   37bba:	d001      	beq.n	37bc0 <z_impl_k_mutex_unlock+0xfc>
		return z_set_prio(mutex->owner, new_prio);
   37bbc:	f001 f8c6 	bl	38d4c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   37bc0:	4620      	mov	r0, r4
   37bc2:	f001 f959 	bl	38e78 <z_unpend_first_thread>
	mutex->owner = new_owner;
   37bc6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   37bc8:	b160      	cbz	r0, 37be4 <z_impl_k_mutex_unlock+0x120>
		mutex->owner_orig_prio = new_owner->base.prio;
   37bca:	f990 200e 	ldrsb.w	r2, [r0, #14]
   37bce:	6122      	str	r2, [r4, #16]
   37bd0:	2200      	movs	r2, #0
   37bd2:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		z_ready_thread(new_owner);
   37bd6:	f000 fc1f 	bl	38418 <z_ready_thread>
		z_reschedule(&lock, key);
   37bda:	4629      	mov	r1, r5
   37bdc:	4819      	ldr	r0, [pc, #100]	; (37c44 <z_impl_k_mutex_unlock+0x180>)
   37bde:	f000 f9d5 	bl	37f8c <z_reschedule>
   37be2:	e7c4      	b.n	37b6e <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count = 0U;
   37be4:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37be6:	4817      	ldr	r0, [pc, #92]	; (37c44 <z_impl_k_mutex_unlock+0x180>)
   37be8:	f001 fdb4 	bl	39754 <z_spin_unlock_valid>
   37bec:	b968      	cbnz	r0, 37c0a <z_impl_k_mutex_unlock+0x146>
   37bee:	23a7      	movs	r3, #167	; 0xa7
   37bf0:	4a15      	ldr	r2, [pc, #84]	; (37c48 <z_impl_k_mutex_unlock+0x184>)
   37bf2:	4918      	ldr	r1, [pc, #96]	; (37c54 <z_impl_k_mutex_unlock+0x190>)
   37bf4:	480c      	ldr	r0, [pc, #48]	; (37c28 <z_impl_k_mutex_unlock+0x164>)
   37bf6:	f005 f8be 	bl	3cd76 <printk>
   37bfa:	4912      	ldr	r1, [pc, #72]	; (37c44 <z_impl_k_mutex_unlock+0x180>)
   37bfc:	4816      	ldr	r0, [pc, #88]	; (37c58 <z_impl_k_mutex_unlock+0x194>)
   37bfe:	f005 f8ba 	bl	3cd76 <printk>
   37c02:	21a7      	movs	r1, #167	; 0xa7
   37c04:	4810      	ldr	r0, [pc, #64]	; (37c48 <z_impl_k_mutex_unlock+0x184>)
   37c06:	f005 fb6a 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37c0a:	f385 8811 	msr	BASEPRI, r5
   37c0e:	f3bf 8f6f 	isb	sy
   37c12:	e7ac      	b.n	37b6e <z_impl_k_mutex_unlock+0xaa>
		return -EINVAL;
   37c14:	f06f 0015 	mvn.w	r0, #21
   37c18:	e7ac      	b.n	37b74 <z_impl_k_mutex_unlock+0xb0>
		return -EPERM;
   37c1a:	f04f 30ff 	mov.w	r0, #4294967295
   37c1e:	e7a9      	b.n	37b74 <z_impl_k_mutex_unlock+0xb0>
   37c20:	0004bb6f 	.word	0x0004bb6f
   37c24:	0004bb4d 	.word	0x0004bb4d
   37c28:	00044dbf 	.word	0x00044dbf
   37c2c:	0004bb81 	.word	0x0004bb81
   37c30:	2001a07c 	.word	0x2001a07c
   37c34:	0004bba6 	.word	0x0004bba6
   37c38:	0004bbbd 	.word	0x0004bbbd
   37c3c:	00045c27 	.word	0x00045c27
   37c40:	0004bbe8 	.word	0x0004bbe8
   37c44:	2001a078 	.word	0x2001a078
   37c48:	00045538 	.word	0x00045538
   37c4c:	0004555e 	.word	0x0004555e
   37c50:	00045573 	.word	0x00045573
   37c54:	0004558b 	.word	0x0004558b
   37c58:	000455a2 	.word	0x000455a2

00037c5c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   37c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   37c60:	4604      	mov	r4, r0
   37c62:	460e      	mov	r6, r1
   37c64:	4690      	mov	r8, r2
   37c66:	4699      	mov	r9, r3
   37c68:	f89d a020 	ldrb.w	sl, [sp, #32]
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   37c6c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   37c70:	f04f 0320 	mov.w	r3, #32
   37c74:	f3ef 8711 	mrs	r7, BASEPRI
   37c78:	f383 8811 	msr	BASEPRI, r3
   37c7c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37c80:	4628      	mov	r0, r5
   37c82:	f001 fd59 	bl	39738 <z_spin_lock_valid>
   37c86:	b968      	cbnz	r0, 37ca4 <queue_insert+0x48>
   37c88:	237c      	movs	r3, #124	; 0x7c
   37c8a:	4a3c      	ldr	r2, [pc, #240]	; (37d7c <queue_insert+0x120>)
   37c8c:	493c      	ldr	r1, [pc, #240]	; (37d80 <queue_insert+0x124>)
   37c8e:	483d      	ldr	r0, [pc, #244]	; (37d84 <queue_insert+0x128>)
   37c90:	f005 f871 	bl	3cd76 <printk>
   37c94:	4629      	mov	r1, r5
   37c96:	483c      	ldr	r0, [pc, #240]	; (37d88 <queue_insert+0x12c>)
   37c98:	f005 f86d 	bl	3cd76 <printk>
   37c9c:	217c      	movs	r1, #124	; 0x7c
   37c9e:	4837      	ldr	r0, [pc, #220]	; (37d7c <queue_insert+0x120>)
   37ca0:	f005 fb1d 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   37ca4:	4628      	mov	r0, r5
   37ca6:	f001 fd65 	bl	39774 <z_spin_lock_set_owner>

	if (is_append) {
   37caa:	f1ba 0f00 	cmp.w	sl, #0
   37cae:	d000      	beq.n	37cb2 <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   37cb0:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   37cb2:	f104 000c 	add.w	r0, r4, #12
   37cb6:	f001 f8df 	bl	38e78 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   37cba:	b160      	cbz	r0, 37cd6 <queue_insert+0x7a>
   37cbc:	2400      	movs	r4, #0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   37cbe:	f8c0 8014 	str.w	r8, [r0, #20]
   37cc2:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
	z_ready_thread(thread);
   37cc6:	f000 fba7 	bl	38418 <z_ready_thread>
		sys_sfnode_init(data, 0x0);
	}

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   37cca:	4628      	mov	r0, r5
   37ccc:	4639      	mov	r1, r7
   37cce:	f000 f95d 	bl	37f8c <z_reschedule>
	return 0;
   37cd2:	2000      	movs	r0, #0
   37cd4:	e01e      	b.n	37d14 <queue_insert+0xb8>
	if (alloc) {
   37cd6:	f1b9 0f00 	cmp.w	r9, #0
   37cda:	d02d      	beq.n	37d38 <queue_insert+0xdc>
	return z_thread_aligned_alloc(0, size);
   37cdc:	2108      	movs	r1, #8
   37cde:	f002 fe23 	bl	3a928 <z_thread_aligned_alloc>
		if (anode == NULL) {
   37ce2:	b9c8      	cbnz	r0, 37d18 <queue_insert+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37ce4:	4628      	mov	r0, r5
   37ce6:	f001 fd35 	bl	39754 <z_spin_unlock_valid>
   37cea:	b968      	cbnz	r0, 37d08 <queue_insert+0xac>
   37cec:	23a7      	movs	r3, #167	; 0xa7
   37cee:	4a23      	ldr	r2, [pc, #140]	; (37d7c <queue_insert+0x120>)
   37cf0:	4926      	ldr	r1, [pc, #152]	; (37d8c <queue_insert+0x130>)
   37cf2:	4824      	ldr	r0, [pc, #144]	; (37d84 <queue_insert+0x128>)
   37cf4:	f005 f83f 	bl	3cd76 <printk>
   37cf8:	4629      	mov	r1, r5
   37cfa:	4825      	ldr	r0, [pc, #148]	; (37d90 <queue_insert+0x134>)
   37cfc:	f005 f83b 	bl	3cd76 <printk>
   37d00:	21a7      	movs	r1, #167	; 0xa7
   37d02:	481e      	ldr	r0, [pc, #120]	; (37d7c <queue_insert+0x120>)
   37d04:	f005 faeb 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37d08:	f387 8811 	msr	BASEPRI, r7
   37d0c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   37d10:	f06f 000b 	mvn.w	r0, #11
}
   37d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   37d18:	2301      	movs	r3, #1
		anode->data = data;
   37d1a:	f8c0 8004 	str.w	r8, [r0, #4]
   37d1e:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   37d20:	6803      	ldr	r3, [r0, #0]
   37d22:	f003 0303 	and.w	r3, r3, #3
   37d26:	b95e      	cbnz	r6, 37d40 <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   37d28:	6822      	ldr	r2, [r4, #0]
   37d2a:	4313      	orrs	r3, r2
   37d2c:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   37d2e:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   37d30:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   37d32:	b973      	cbnz	r3, 37d52 <queue_insert+0xf6>
	list->tail = node;
   37d34:	6060      	str	r0, [r4, #4]
}
   37d36:	e00c      	b.n	37d52 <queue_insert+0xf6>
}
   37d38:	4640      	mov	r0, r8
	node->next_and_flags = flags;
   37d3a:	f8c8 9000 	str.w	r9, [r8]
}
   37d3e:	e7ef      	b.n	37d20 <queue_insert+0xc4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   37d40:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   37d42:	f032 0203 	bics.w	r2, r2, #3
   37d46:	d110      	bne.n	37d6a <queue_insert+0x10e>
Z_GENLIST_APPEND(sflist, sfnode)
   37d48:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   37d4a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   37d4c:	b93a      	cbnz	r2, 37d5e <queue_insert+0x102>
	list->head = node;
   37d4e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   37d52:	2104      	movs	r1, #4
   37d54:	f104 0014 	add.w	r0, r4, #20
   37d58:	f009 ff32 	bl	41bc0 <z_handle_obj_poll_events>
   37d5c:	e7b5      	b.n	37cca <queue_insert+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   37d5e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   37d60:	f003 0303 	and.w	r3, r3, #3
   37d64:	4303      	orrs	r3, r0
   37d66:	6013      	str	r3, [r2, #0]
   37d68:	e7e4      	b.n	37d34 <queue_insert+0xd8>
   37d6a:	4313      	orrs	r3, r2
   37d6c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   37d6e:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   37d70:	f003 0303 	and.w	r3, r3, #3
   37d74:	4303      	orrs	r3, r0
   37d76:	6033      	str	r3, [r6, #0]
}
   37d78:	e7eb      	b.n	37d52 <queue_insert+0xf6>
   37d7a:	bf00      	nop
   37d7c:	00045538 	.word	0x00045538
   37d80:	0004555e 	.word	0x0004555e
   37d84:	00044dbf 	.word	0x00044dbf
   37d88:	00045573 	.word	0x00045573
   37d8c:	0004558b 	.word	0x0004558b
   37d90:	000455a2 	.word	0x000455a2

00037d94 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   37d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   37d98:	4606      	mov	r6, r0
   37d9a:	4690      	mov	r8, r2
   37d9c:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   37d9e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   37da2:	f04f 0320 	mov.w	r3, #32
   37da6:	f3ef 8711 	mrs	r7, BASEPRI
   37daa:	f383 8811 	msr	BASEPRI, r3
   37dae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37db2:	4628      	mov	r0, r5
   37db4:	f001 fcc0 	bl	39738 <z_spin_lock_valid>
   37db8:	b968      	cbnz	r0, 37dd6 <z_impl_k_queue_get+0x42>
   37dba:	237c      	movs	r3, #124	; 0x7c
   37dbc:	4a25      	ldr	r2, [pc, #148]	; (37e54 <z_impl_k_queue_get+0xc0>)
   37dbe:	4926      	ldr	r1, [pc, #152]	; (37e58 <z_impl_k_queue_get+0xc4>)
   37dc0:	4826      	ldr	r0, [pc, #152]	; (37e5c <z_impl_k_queue_get+0xc8>)
   37dc2:	f004 ffd8 	bl	3cd76 <printk>
   37dc6:	4629      	mov	r1, r5
   37dc8:	4825      	ldr	r0, [pc, #148]	; (37e60 <z_impl_k_queue_get+0xcc>)
   37dca:	f004 ffd4 	bl	3cd76 <printk>
   37dce:	217c      	movs	r1, #124	; 0x7c
   37dd0:	4820      	ldr	r0, [pc, #128]	; (37e54 <z_impl_k_queue_get+0xc0>)
   37dd2:	f005 fa84 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   37dd6:	4628      	mov	r0, r5
   37dd8:	f001 fccc 	bl	39774 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   37ddc:	6834      	ldr	r4, [r6, #0]
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   37dde:	b33c      	cbz	r4, 37e30 <z_impl_k_queue_get+0x9c>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   37de0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   37de2:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   37de4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   37de8:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   37dea:	4620      	mov	r0, r4
   37dec:	f04f 0101 	mov.w	r1, #1
	list->head = node;
   37df0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   37df2:	bf08      	it	eq
   37df4:	6073      	streq	r3, [r6, #4]
   37df6:	f009 fd87 	bl	41908 <z_queue_node_peek>
   37dfa:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37dfc:	4628      	mov	r0, r5
   37dfe:	f001 fca9 	bl	39754 <z_spin_unlock_valid>
   37e02:	b968      	cbnz	r0, 37e20 <z_impl_k_queue_get+0x8c>
   37e04:	23a7      	movs	r3, #167	; 0xa7
   37e06:	4a13      	ldr	r2, [pc, #76]	; (37e54 <z_impl_k_queue_get+0xc0>)
   37e08:	4916      	ldr	r1, [pc, #88]	; (37e64 <z_impl_k_queue_get+0xd0>)
   37e0a:	4814      	ldr	r0, [pc, #80]	; (37e5c <z_impl_k_queue_get+0xc8>)
   37e0c:	f004 ffb3 	bl	3cd76 <printk>
   37e10:	4629      	mov	r1, r5
   37e12:	4815      	ldr	r0, [pc, #84]	; (37e68 <z_impl_k_queue_get+0xd4>)
   37e14:	f004 ffaf 	bl	3cd76 <printk>
   37e18:	21a7      	movs	r1, #167	; 0xa7
   37e1a:	480e      	ldr	r0, [pc, #56]	; (37e54 <z_impl_k_queue_get+0xc0>)
   37e1c:	f005 fa5f 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37e20:	f387 8811 	msr	BASEPRI, r7
   37e24:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   37e28:	4620      	mov	r0, r4
   37e2a:	b003      	add	sp, #12
   37e2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   37e30:	ea58 0309 	orrs.w	r3, r8, r9
   37e34:	d0e2      	beq.n	37dfc <z_impl_k_queue_get+0x68>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   37e36:	4639      	mov	r1, r7
   37e38:	4628      	mov	r0, r5
   37e3a:	e9cd 8900 	strd	r8, r9, [sp]
   37e3e:	f106 020c 	add.w	r2, r6, #12
   37e42:	f000 ff53 	bl	38cec <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   37e46:	2800      	cmp	r0, #0
   37e48:	d1ee      	bne.n	37e28 <z_impl_k_queue_get+0x94>
   37e4a:	4b08      	ldr	r3, [pc, #32]	; (37e6c <z_impl_k_queue_get+0xd8>)
   37e4c:	689b      	ldr	r3, [r3, #8]
   37e4e:	695c      	ldr	r4, [r3, #20]
   37e50:	e7ea      	b.n	37e28 <z_impl_k_queue_get+0x94>
   37e52:	bf00      	nop
   37e54:	00045538 	.word	0x00045538
   37e58:	0004555e 	.word	0x0004555e
   37e5c:	00044dbf 	.word	0x00044dbf
   37e60:	00045573 	.word	0x00045573
   37e64:	0004558b 	.word	0x0004558b
   37e68:	000455a2 	.word	0x000455a2
   37e6c:	2001a07c 	.word	0x2001a07c

00037e70 <pended_on.isra.0>:
#include <syscalls/k_thread_resume_mrsh.c>
#endif

static _wait_q_t *pended_on(struct k_thread *thread)
{
	__ASSERT_NO_MSG(thread->base.pended_on);
   37e70:	6803      	ldr	r3, [r0, #0]
static _wait_q_t *pended_on(struct k_thread *thread)
   37e72:	b510      	push	{r4, lr}
   37e74:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   37e76:	b95b      	cbnz	r3, 37e90 <pended_on.isra.0+0x20>
   37e78:	4906      	ldr	r1, [pc, #24]	; (37e94 <pended_on.isra.0+0x24>)
   37e7a:	4807      	ldr	r0, [pc, #28]	; (37e98 <pended_on.isra.0+0x28>)
   37e7c:	f44f 7301 	mov.w	r3, #516	; 0x204
   37e80:	4a06      	ldr	r2, [pc, #24]	; (37e9c <pended_on.isra.0+0x2c>)
   37e82:	f004 ff78 	bl	3cd76 <printk>
   37e86:	f44f 7101 	mov.w	r1, #516	; 0x204
   37e8a:	4804      	ldr	r0, [pc, #16]	; (37e9c <pended_on.isra.0+0x2c>)
   37e8c:	f005 fa27 	bl	3d2de <assert_post_action>

	return thread->base.pended_on;
}
   37e90:	6820      	ldr	r0, [r4, #0]
   37e92:	bd10      	pop	{r4, pc}
   37e94:	0004bc3a 	.word	0x0004bc3a
   37e98:	00044dbf 	.word	0x00044dbf
   37e9c:	0004bc18 	.word	0x0004bc18

00037ea0 <z_reset_time_slice>:
{
   37ea0:	b510      	push	{r4, lr}
	if (slice_time != 0) {
   37ea2:	4c08      	ldr	r4, [pc, #32]	; (37ec4 <z_reset_time_slice+0x24>)
   37ea4:	6823      	ldr	r3, [r4, #0]
   37ea6:	b15b      	cbz	r3, 37ec0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   37ea8:	f7ee f9c4 	bl	26234 <z_clock_elapsed>
   37eac:	6822      	ldr	r2, [r4, #0]
   37eae:	4906      	ldr	r1, [pc, #24]	; (37ec8 <z_reset_time_slice+0x28>)
   37eb0:	4410      	add	r0, r2
   37eb2:	6148      	str	r0, [r1, #20]
}
   37eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   37eb8:	2100      	movs	r1, #0
   37eba:	4610      	mov	r0, r2
   37ebc:	f001 bff6 	b.w	39eac <z_set_timeout_expiry>
}
   37ec0:	bd10      	pop	{r4, pc}
   37ec2:	bf00      	nop
   37ec4:	2001a0c0 	.word	0x2001a0c0
   37ec8:	2001a07c 	.word	0x2001a07c

00037ecc <k_sched_time_slice_set>:
{
   37ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   37ece:	4605      	mov	r5, r0
   37ed0:	460c      	mov	r4, r1
	__asm__ volatile(
   37ed2:	f04f 0320 	mov.w	r3, #32
   37ed6:	f3ef 8611 	mrs	r6, BASEPRI
   37eda:	f383 8811 	msr	BASEPRI, r3
   37ede:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   37ee2:	4820      	ldr	r0, [pc, #128]	; (37f64 <k_sched_time_slice_set+0x98>)
   37ee4:	f001 fc28 	bl	39738 <z_spin_lock_valid>
   37ee8:	b968      	cbnz	r0, 37f06 <k_sched_time_slice_set+0x3a>
   37eea:	237c      	movs	r3, #124	; 0x7c
   37eec:	4a1e      	ldr	r2, [pc, #120]	; (37f68 <k_sched_time_slice_set+0x9c>)
   37eee:	491f      	ldr	r1, [pc, #124]	; (37f6c <k_sched_time_slice_set+0xa0>)
   37ef0:	481f      	ldr	r0, [pc, #124]	; (37f70 <k_sched_time_slice_set+0xa4>)
   37ef2:	f004 ff40 	bl	3cd76 <printk>
   37ef6:	491b      	ldr	r1, [pc, #108]	; (37f64 <k_sched_time_slice_set+0x98>)
   37ef8:	481e      	ldr	r0, [pc, #120]	; (37f74 <k_sched_time_slice_set+0xa8>)
   37efa:	f004 ff3c 	bl	3cd76 <printk>
   37efe:	217c      	movs	r1, #124	; 0x7c
   37f00:	4819      	ldr	r0, [pc, #100]	; (37f68 <k_sched_time_slice_set+0x9c>)
   37f02:	f005 f9ec 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   37f06:	4817      	ldr	r0, [pc, #92]	; (37f64 <k_sched_time_slice_set+0x98>)
   37f08:	f001 fc34 	bl	39774 <z_spin_lock_set_owner>
			return (uint32_t)((t * to_hz + off) / from_hz);
   37f0c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
		_current_cpu->slice_ticks = 0;
   37f10:	2200      	movs	r2, #0
   37f12:	f240 30e7 	movw	r0, #999	; 0x3e7
   37f16:	2100      	movs	r1, #0
   37f18:	4b17      	ldr	r3, [pc, #92]	; (37f78 <k_sched_time_slice_set+0xac>)
   37f1a:	fbe7 0105 	umlal	r0, r1, r7, r5
   37f1e:	615a      	str	r2, [r3, #20]
   37f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   37f24:	2300      	movs	r3, #0
   37f26:	f7e4 ffc9 	bl	1cebc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   37f2a:	4b14      	ldr	r3, [pc, #80]	; (37f7c <k_sched_time_slice_set+0xb0>)
   37f2c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   37f2e:	4b14      	ldr	r3, [pc, #80]	; (37f80 <k_sched_time_slice_set+0xb4>)
   37f30:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   37f32:	f7ff ffb5 	bl	37ea0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37f36:	480b      	ldr	r0, [pc, #44]	; (37f64 <k_sched_time_slice_set+0x98>)
   37f38:	f001 fc0c 	bl	39754 <z_spin_unlock_valid>
   37f3c:	b968      	cbnz	r0, 37f5a <k_sched_time_slice_set+0x8e>
   37f3e:	23a7      	movs	r3, #167	; 0xa7
   37f40:	4a09      	ldr	r2, [pc, #36]	; (37f68 <k_sched_time_slice_set+0x9c>)
   37f42:	4910      	ldr	r1, [pc, #64]	; (37f84 <k_sched_time_slice_set+0xb8>)
   37f44:	480a      	ldr	r0, [pc, #40]	; (37f70 <k_sched_time_slice_set+0xa4>)
   37f46:	f004 ff16 	bl	3cd76 <printk>
   37f4a:	4906      	ldr	r1, [pc, #24]	; (37f64 <k_sched_time_slice_set+0x98>)
   37f4c:	480e      	ldr	r0, [pc, #56]	; (37f88 <k_sched_time_slice_set+0xbc>)
   37f4e:	f004 ff12 	bl	3cd76 <printk>
   37f52:	21a7      	movs	r1, #167	; 0xa7
   37f54:	4804      	ldr	r0, [pc, #16]	; (37f68 <k_sched_time_slice_set+0x9c>)
   37f56:	f005 f9c2 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   37f5a:	f386 8811 	msr	BASEPRI, r6
   37f5e:	f3bf 8f6f 	isb	sy
}
   37f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   37f64:	2001a0b8 	.word	0x2001a0b8
   37f68:	00045538 	.word	0x00045538
   37f6c:	0004555e 	.word	0x0004555e
   37f70:	00044dbf 	.word	0x00044dbf
   37f74:	00045573 	.word	0x00045573
   37f78:	2001a07c 	.word	0x2001a07c
   37f7c:	2001a0c0 	.word	0x2001a0c0
   37f80:	2001a0bc 	.word	0x2001a0bc
   37f84:	0004558b 	.word	0x0004558b
   37f88:	000455a2 	.word	0x000455a2

00037f8c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   37f8c:	b538      	push	{r3, r4, r5, lr}
   37f8e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   37f90:	460d      	mov	r5, r1
   37f92:	b9e9      	cbnz	r1, 37fd0 <z_reschedule+0x44>
   37f94:	f3ef 8305 	mrs	r3, IPSR
   37f98:	b9d3      	cbnz	r3, 37fd0 <z_reschedule+0x44>
	return _kernel.ready_q.cache;
   37f9a:	4b19      	ldr	r3, [pc, #100]	; (38000 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   37f9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   37f9e:	689b      	ldr	r3, [r3, #8]
   37fa0:	429a      	cmp	r2, r3
   37fa2:	d015      	beq.n	37fd0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37fa4:	f001 fbd6 	bl	39754 <z_spin_unlock_valid>
   37fa8:	b968      	cbnz	r0, 37fc6 <z_reschedule+0x3a>
   37faa:	23be      	movs	r3, #190	; 0xbe
   37fac:	4a15      	ldr	r2, [pc, #84]	; (38004 <z_reschedule+0x78>)
   37fae:	4916      	ldr	r1, [pc, #88]	; (38008 <z_reschedule+0x7c>)
   37fb0:	4816      	ldr	r0, [pc, #88]	; (3800c <z_reschedule+0x80>)
   37fb2:	f004 fee0 	bl	3cd76 <printk>
   37fb6:	4621      	mov	r1, r4
   37fb8:	4815      	ldr	r0, [pc, #84]	; (38010 <z_reschedule+0x84>)
   37fba:	f004 fedc 	bl	3cd76 <printk>
   37fbe:	21be      	movs	r1, #190	; 0xbe
   37fc0:	4810      	ldr	r0, [pc, #64]	; (38004 <z_reschedule+0x78>)
   37fc2:	f005 f98c 	bl	3d2de <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   37fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   37fca:	2000      	movs	r0, #0
   37fcc:	f7ee ba14 	b.w	263f8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   37fd0:	4620      	mov	r0, r4
   37fd2:	f001 fbbf 	bl	39754 <z_spin_unlock_valid>
   37fd6:	b968      	cbnz	r0, 37ff4 <z_reschedule+0x68>
   37fd8:	23a7      	movs	r3, #167	; 0xa7
   37fda:	4a0a      	ldr	r2, [pc, #40]	; (38004 <z_reschedule+0x78>)
   37fdc:	490a      	ldr	r1, [pc, #40]	; (38008 <z_reschedule+0x7c>)
   37fde:	480b      	ldr	r0, [pc, #44]	; (3800c <z_reschedule+0x80>)
   37fe0:	f004 fec9 	bl	3cd76 <printk>
   37fe4:	4621      	mov	r1, r4
   37fe6:	480a      	ldr	r0, [pc, #40]	; (38010 <z_reschedule+0x84>)
   37fe8:	f004 fec5 	bl	3cd76 <printk>
   37fec:	21a7      	movs	r1, #167	; 0xa7
   37fee:	4805      	ldr	r0, [pc, #20]	; (38004 <z_reschedule+0x78>)
   37ff0:	f005 f975 	bl	3d2de <assert_post_action>
   37ff4:	f385 8811 	msr	BASEPRI, r5
   37ff8:	f3bf 8f6f 	isb	sy
   37ffc:	bd38      	pop	{r3, r4, r5, pc}
   37ffe:	bf00      	nop
   38000:	2001a07c 	.word	0x2001a07c
   38004:	00045538 	.word	0x00045538
   38008:	0004558b 	.word	0x0004558b
   3800c:	00044dbf 	.word	0x00044dbf
   38010:	000455a2 	.word	0x000455a2

00038014 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   38014:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   38016:	f04f 0320 	mov.w	r3, #32
   3801a:	f3ef 8511 	mrs	r5, BASEPRI
   3801e:	f383 8811 	msr	BASEPRI, r3
   38022:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38026:	482b      	ldr	r0, [pc, #172]	; (380d4 <k_sched_lock+0xc0>)
   38028:	f001 fb86 	bl	39738 <z_spin_lock_valid>
   3802c:	b968      	cbnz	r0, 3804a <k_sched_lock+0x36>
   3802e:	237c      	movs	r3, #124	; 0x7c
   38030:	4a29      	ldr	r2, [pc, #164]	; (380d8 <k_sched_lock+0xc4>)
   38032:	492a      	ldr	r1, [pc, #168]	; (380dc <k_sched_lock+0xc8>)
   38034:	482a      	ldr	r0, [pc, #168]	; (380e0 <k_sched_lock+0xcc>)
   38036:	f004 fe9e 	bl	3cd76 <printk>
   3803a:	4926      	ldr	r1, [pc, #152]	; (380d4 <k_sched_lock+0xc0>)
   3803c:	4829      	ldr	r0, [pc, #164]	; (380e4 <k_sched_lock+0xd0>)
   3803e:	f004 fe9a 	bl	3cd76 <printk>
   38042:	217c      	movs	r1, #124	; 0x7c
   38044:	4824      	ldr	r0, [pc, #144]	; (380d8 <k_sched_lock+0xc4>)
   38046:	f005 f94a 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3804a:	4822      	ldr	r0, [pc, #136]	; (380d4 <k_sched_lock+0xc0>)
   3804c:	f001 fb92 	bl	39774 <z_spin_lock_set_owner>
   38050:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   38054:	b173      	cbz	r3, 38074 <k_sched_lock+0x60>
   38056:	4924      	ldr	r1, [pc, #144]	; (380e8 <k_sched_lock+0xd4>)
   38058:	f44f 7389 	mov.w	r3, #274	; 0x112
   3805c:	4a23      	ldr	r2, [pc, #140]	; (380ec <k_sched_lock+0xd8>)
   3805e:	4820      	ldr	r0, [pc, #128]	; (380e0 <k_sched_lock+0xcc>)
   38060:	f004 fe89 	bl	3cd76 <printk>
   38064:	4822      	ldr	r0, [pc, #136]	; (380f0 <k_sched_lock+0xdc>)
   38066:	f004 fe86 	bl	3cd76 <printk>
   3806a:	f44f 7189 	mov.w	r1, #274	; 0x112
   3806e:	481f      	ldr	r0, [pc, #124]	; (380ec <k_sched_lock+0xd8>)
   38070:	f005 f935 	bl	3d2de <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1, "");
   38074:	4c1f      	ldr	r4, [pc, #124]	; (380f4 <k_sched_lock+0xe0>)
   38076:	68a2      	ldr	r2, [r4, #8]
   38078:	7bd2      	ldrb	r2, [r2, #15]
   3807a:	2a01      	cmp	r2, #1
   3807c:	d10e      	bne.n	3809c <k_sched_lock+0x88>
   3807e:	491e      	ldr	r1, [pc, #120]	; (380f8 <k_sched_lock+0xe4>)
   38080:	f240 1313 	movw	r3, #275	; 0x113
   38084:	4a19      	ldr	r2, [pc, #100]	; (380ec <k_sched_lock+0xd8>)
   38086:	4816      	ldr	r0, [pc, #88]	; (380e0 <k_sched_lock+0xcc>)
   38088:	f004 fe75 	bl	3cd76 <printk>
   3808c:	4818      	ldr	r0, [pc, #96]	; (380f0 <k_sched_lock+0xdc>)
   3808e:	f004 fe72 	bl	3cd76 <printk>
   38092:	f240 1113 	movw	r1, #275	; 0x113
   38096:	4815      	ldr	r0, [pc, #84]	; (380ec <k_sched_lock+0xd8>)
   38098:	f005 f921 	bl	3d2de <assert_post_action>
	--_current->base.sched_locked;
   3809c:	68a2      	ldr	r2, [r4, #8]
   3809e:	7bd3      	ldrb	r3, [r2, #15]
   380a0:	3b01      	subs	r3, #1
   380a2:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   380a4:	480b      	ldr	r0, [pc, #44]	; (380d4 <k_sched_lock+0xc0>)
   380a6:	f001 fb55 	bl	39754 <z_spin_unlock_valid>
   380aa:	b968      	cbnz	r0, 380c8 <k_sched_lock+0xb4>
   380ac:	23a7      	movs	r3, #167	; 0xa7
   380ae:	4a0a      	ldr	r2, [pc, #40]	; (380d8 <k_sched_lock+0xc4>)
   380b0:	4912      	ldr	r1, [pc, #72]	; (380fc <k_sched_lock+0xe8>)
   380b2:	480b      	ldr	r0, [pc, #44]	; (380e0 <k_sched_lock+0xcc>)
   380b4:	f004 fe5f 	bl	3cd76 <printk>
   380b8:	4906      	ldr	r1, [pc, #24]	; (380d4 <k_sched_lock+0xc0>)
   380ba:	4811      	ldr	r0, [pc, #68]	; (38100 <k_sched_lock+0xec>)
   380bc:	f004 fe5b 	bl	3cd76 <printk>
   380c0:	21a7      	movs	r1, #167	; 0xa7
   380c2:	4805      	ldr	r0, [pc, #20]	; (380d8 <k_sched_lock+0xc4>)
   380c4:	f005 f90b 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   380c8:	f385 8811 	msr	BASEPRI, r5
   380cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   380d0:	bd38      	pop	{r3, r4, r5, pc}
   380d2:	bf00      	nop
   380d4:	2001a0b8 	.word	0x2001a0b8
   380d8:	00045538 	.word	0x00045538
   380dc:	0004555e 	.word	0x0004555e
   380e0:	00044dbf 	.word	0x00044dbf
   380e4:	00045573 	.word	0x00045573
   380e8:	0004bb6f 	.word	0x0004bb6f
   380ec:	0004bbbd 	.word	0x0004bbbd
   380f0:	00045c27 	.word	0x00045c27
   380f4:	2001a07c 	.word	0x2001a07c
   380f8:	0004bbe8 	.word	0x0004bbe8
   380fc:	0004558b 	.word	0x0004558b
   38100:	000455a2 	.word	0x000455a2

00038104 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   38104:	4b11      	ldr	r3, [pc, #68]	; (3814c <z_priq_dumb_remove+0x48>)
{
   38106:	b510      	push	{r4, lr}
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   38108:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   3810c:	4282      	cmp	r2, r0
{
   3810e:	460c      	mov	r4, r1
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   38110:	d105      	bne.n	3811e <z_priq_dumb_remove+0x1a>
   38112:	689b      	ldr	r3, [r3, #8]
   38114:	428b      	cmp	r3, r1
   38116:	d102      	bne.n	3811e <z_priq_dumb_remove+0x1a>
   38118:	7b4b      	ldrb	r3, [r1, #13]
   3811a:	06db      	lsls	r3, r3, #27
   3811c:	d115      	bne.n	3814a <z_priq_dumb_remove+0x46>
	    z_is_thread_prevented_from_running(thread)) {
		return;
	}
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3811e:	4b0c      	ldr	r3, [pc, #48]	; (38150 <z_priq_dumb_remove+0x4c>)
   38120:	429c      	cmp	r4, r3
   38122:	d10b      	bne.n	3813c <z_priq_dumb_remove+0x38>
   38124:	490b      	ldr	r1, [pc, #44]	; (38154 <z_priq_dumb_remove+0x50>)
   38126:	480c      	ldr	r0, [pc, #48]	; (38158 <z_priq_dumb_remove+0x54>)
   38128:	f240 33da 	movw	r3, #986	; 0x3da
   3812c:	4a0b      	ldr	r2, [pc, #44]	; (3815c <z_priq_dumb_remove+0x58>)
   3812e:	f004 fe22 	bl	3cd76 <printk>
   38132:	f240 31da 	movw	r1, #986	; 0x3da
   38136:	4809      	ldr	r0, [pc, #36]	; (3815c <z_priq_dumb_remove+0x58>)
   38138:	f005 f8d1 	bl	3d2de <assert_post_action>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   3813c:	e9d4 3200 	ldrd	r3, r2, [r4]
   38140:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   38142:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   38144:	2300      	movs	r3, #0
	node->prev = NULL;
   38146:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   3814a:	bd10      	pop	{r4, pc}
   3814c:	2001a07c 	.word	0x2001a07c
   38150:	20018950 	.word	0x20018950
   38154:	0004bc51 	.word	0x0004bc51
   38158:	00044dbf 	.word	0x00044dbf
   3815c:	0004bc18 	.word	0x0004bc18

00038160 <z_unpend_thread>:
{
   38160:	b538      	push	{r3, r4, r5, lr}
   38162:	4604      	mov	r4, r0
	__asm__ volatile(
   38164:	f04f 0320 	mov.w	r3, #32
   38168:	f3ef 8511 	mrs	r5, BASEPRI
   3816c:	f383 8811 	msr	BASEPRI, r3
   38170:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38174:	4819      	ldr	r0, [pc, #100]	; (381dc <z_unpend_thread+0x7c>)
   38176:	f001 fadf 	bl	39738 <z_spin_lock_valid>
   3817a:	b968      	cbnz	r0, 38198 <z_unpend_thread+0x38>
   3817c:	237c      	movs	r3, #124	; 0x7c
   3817e:	4a18      	ldr	r2, [pc, #96]	; (381e0 <z_unpend_thread+0x80>)
   38180:	4918      	ldr	r1, [pc, #96]	; (381e4 <z_unpend_thread+0x84>)
   38182:	4819      	ldr	r0, [pc, #100]	; (381e8 <z_unpend_thread+0x88>)
   38184:	f004 fdf7 	bl	3cd76 <printk>
   38188:	4914      	ldr	r1, [pc, #80]	; (381dc <z_unpend_thread+0x7c>)
   3818a:	4818      	ldr	r0, [pc, #96]	; (381ec <z_unpend_thread+0x8c>)
   3818c:	f004 fdf3 	bl	3cd76 <printk>
   38190:	217c      	movs	r1, #124	; 0x7c
   38192:	4813      	ldr	r0, [pc, #76]	; (381e0 <z_unpend_thread+0x80>)
   38194:	f005 f8a3 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38198:	4810      	ldr	r0, [pc, #64]	; (381dc <z_unpend_thread+0x7c>)
   3819a:	f001 faeb 	bl	39774 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   3819e:	4620      	mov	r0, r4
   381a0:	f009 fbf5 	bl	4198e <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   381a4:	480d      	ldr	r0, [pc, #52]	; (381dc <z_unpend_thread+0x7c>)
   381a6:	f001 fad5 	bl	39754 <z_spin_unlock_valid>
   381aa:	b968      	cbnz	r0, 381c8 <z_unpend_thread+0x68>
   381ac:	23a7      	movs	r3, #167	; 0xa7
   381ae:	4a0c      	ldr	r2, [pc, #48]	; (381e0 <z_unpend_thread+0x80>)
   381b0:	490f      	ldr	r1, [pc, #60]	; (381f0 <z_unpend_thread+0x90>)
   381b2:	480d      	ldr	r0, [pc, #52]	; (381e8 <z_unpend_thread+0x88>)
   381b4:	f004 fddf 	bl	3cd76 <printk>
   381b8:	4908      	ldr	r1, [pc, #32]	; (381dc <z_unpend_thread+0x7c>)
   381ba:	480e      	ldr	r0, [pc, #56]	; (381f4 <z_unpend_thread+0x94>)
   381bc:	f004 fddb 	bl	3cd76 <printk>
   381c0:	21a7      	movs	r1, #167	; 0xa7
   381c2:	4807      	ldr	r0, [pc, #28]	; (381e0 <z_unpend_thread+0x80>)
   381c4:	f005 f88b 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   381c8:	f385 8811 	msr	BASEPRI, r5
   381cc:	f3bf 8f6f 	isb	sy
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   381d0:	f104 0018 	add.w	r0, r4, #24
}
   381d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   381d8:	f001 bd86 	b.w	39ce8 <z_abort_timeout>
   381dc:	2001a0b8 	.word	0x2001a0b8
   381e0:	00045538 	.word	0x00045538
   381e4:	0004555e 	.word	0x0004555e
   381e8:	00044dbf 	.word	0x00044dbf
   381ec:	00045573 	.word	0x00045573
   381f0:	0004558b 	.word	0x0004558b
   381f4:	000455a2 	.word	0x000455a2

000381f8 <update_cache>:
{
   381f8:	b538      	push	{r3, r4, r5, lr}
   381fa:	4c1b      	ldr	r4, [pc, #108]	; (38268 <update_cache+0x70>)
   381fc:	4602      	mov	r2, r0
	if (_current_cpu->pending_abort != NULL) {
   381fe:	6923      	ldr	r3, [r4, #16]
   38200:	68a1      	ldr	r1, [r4, #8]
   38202:	b143      	cbz	r3, 38216 <update_cache+0x1e>
		return _current_cpu->idle_thread;
   38204:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   38206:	b1a8      	cbz	r0, 38234 <update_cache+0x3c>
		if (thread != _current) {
   38208:	68a3      	ldr	r3, [r4, #8]
   3820a:	42ab      	cmp	r3, r5
   3820c:	d001      	beq.n	38212 <update_cache+0x1a>
			z_reset_time_slice();
   3820e:	f7ff fe47 	bl	37ea0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   38212:	62a5      	str	r5, [r4, #40]	; 0x28
}
   38214:	e027      	b.n	38266 <update_cache+0x6e>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   38216:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   3821a:	f009 fbc7 	bl	419ac <z_priq_dumb_best>
   3821e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   38220:	7b4b      	ldrb	r3, [r1, #13]
   38222:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   38224:	bf44      	itt	mi
   38226:	f043 0308 	orrmi.w	r3, r3, #8
   3822a:	734b      	strbmi	r3, [r1, #13]
	return thread ? thread : _current_cpu->idle_thread;
   3822c:	b905      	cbnz	r5, 38230 <update_cache+0x38>
   3822e:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   38230:	b172      	cbz	r2, 38250 <update_cache+0x58>
   38232:	e7e9      	b.n	38208 <update_cache+0x10>
	__ASSERT(_current != NULL, "");
   38234:	b961      	cbnz	r1, 38250 <update_cache+0x58>
   38236:	490d      	ldr	r1, [pc, #52]	; (3826c <update_cache+0x74>)
   38238:	2383      	movs	r3, #131	; 0x83
   3823a:	4a0d      	ldr	r2, [pc, #52]	; (38270 <update_cache+0x78>)
   3823c:	480d      	ldr	r0, [pc, #52]	; (38274 <update_cache+0x7c>)
   3823e:	f004 fd9a 	bl	3cd76 <printk>
   38242:	480d      	ldr	r0, [pc, #52]	; (38278 <update_cache+0x80>)
   38244:	f004 fd97 	bl	3cd76 <printk>
   38248:	2183      	movs	r1, #131	; 0x83
   3824a:	4809      	ldr	r0, [pc, #36]	; (38270 <update_cache+0x78>)
   3824c:	f005 f847 	bl	3d2de <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   38250:	68a3      	ldr	r3, [r4, #8]
   38252:	7b5a      	ldrb	r2, [r3, #13]
   38254:	06d2      	lsls	r2, r2, #27
   38256:	d1d7      	bne.n	38208 <update_cache+0x10>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   38258:	69aa      	ldr	r2, [r5, #24]
   3825a:	2a00      	cmp	r2, #0
   3825c:	d1d4      	bne.n	38208 <update_cache+0x10>
	if (is_preempt(_current) || is_metairq(thread)) {
   3825e:	89da      	ldrh	r2, [r3, #14]
   38260:	2a7f      	cmp	r2, #127	; 0x7f
   38262:	d9d1      	bls.n	38208 <update_cache+0x10>
		_kernel.ready_q.cache = _current;
   38264:	62a3      	str	r3, [r4, #40]	; 0x28
}
   38266:	bd38      	pop	{r3, r4, r5, pc}
   38268:	2001a07c 	.word	0x2001a07c
   3826c:	0004bc72 	.word	0x0004bc72
   38270:	0004bc18 	.word	0x0004bc18
   38274:	00044dbf 	.word	0x00044dbf
   38278:	00045c27 	.word	0x00045c27

0003827c <k_sched_unlock>:
{
   3827c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   3827e:	f04f 0320 	mov.w	r3, #32
   38282:	f3ef 8511 	mrs	r5, BASEPRI
   38286:	f383 8811 	msr	BASEPRI, r3
   3828a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3828e:	482d      	ldr	r0, [pc, #180]	; (38344 <k_sched_unlock+0xc8>)
   38290:	f001 fa52 	bl	39738 <z_spin_lock_valid>
   38294:	b968      	cbnz	r0, 382b2 <k_sched_unlock+0x36>
   38296:	237c      	movs	r3, #124	; 0x7c
   38298:	4a2b      	ldr	r2, [pc, #172]	; (38348 <k_sched_unlock+0xcc>)
   3829a:	492c      	ldr	r1, [pc, #176]	; (3834c <k_sched_unlock+0xd0>)
   3829c:	482c      	ldr	r0, [pc, #176]	; (38350 <k_sched_unlock+0xd4>)
   3829e:	f004 fd6a 	bl	3cd76 <printk>
   382a2:	4928      	ldr	r1, [pc, #160]	; (38344 <k_sched_unlock+0xc8>)
   382a4:	482b      	ldr	r0, [pc, #172]	; (38354 <k_sched_unlock+0xd8>)
   382a6:	f004 fd66 	bl	3cd76 <printk>
   382aa:	217c      	movs	r1, #124	; 0x7c
   382ac:	4826      	ldr	r0, [pc, #152]	; (38348 <k_sched_unlock+0xcc>)
   382ae:	f005 f816 	bl	3d2de <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0, "");
   382b2:	4c29      	ldr	r4, [pc, #164]	; (38358 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   382b4:	4823      	ldr	r0, [pc, #140]	; (38344 <k_sched_unlock+0xc8>)
   382b6:	f001 fa5d 	bl	39774 <z_spin_lock_set_owner>
   382ba:	68a2      	ldr	r2, [r4, #8]
   382bc:	7bd2      	ldrb	r2, [r2, #15]
   382be:	b972      	cbnz	r2, 382de <k_sched_unlock+0x62>
   382c0:	4926      	ldr	r1, [pc, #152]	; (3835c <k_sched_unlock+0xe0>)
   382c2:	f44f 735d 	mov.w	r3, #884	; 0x374
   382c6:	4a26      	ldr	r2, [pc, #152]	; (38360 <k_sched_unlock+0xe4>)
   382c8:	4821      	ldr	r0, [pc, #132]	; (38350 <k_sched_unlock+0xd4>)
   382ca:	f004 fd54 	bl	3cd76 <printk>
   382ce:	4825      	ldr	r0, [pc, #148]	; (38364 <k_sched_unlock+0xe8>)
   382d0:	f004 fd51 	bl	3cd76 <printk>
   382d4:	f44f 715d 	mov.w	r1, #884	; 0x374
   382d8:	4821      	ldr	r0, [pc, #132]	; (38360 <k_sched_unlock+0xe4>)
   382da:	f005 f800 	bl	3d2de <assert_post_action>
   382de:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   382e2:	b173      	cbz	r3, 38302 <k_sched_unlock+0x86>
   382e4:	4920      	ldr	r1, [pc, #128]	; (38368 <k_sched_unlock+0xec>)
   382e6:	f240 3375 	movw	r3, #885	; 0x375
   382ea:	4a1d      	ldr	r2, [pc, #116]	; (38360 <k_sched_unlock+0xe4>)
   382ec:	4818      	ldr	r0, [pc, #96]	; (38350 <k_sched_unlock+0xd4>)
   382ee:	f004 fd42 	bl	3cd76 <printk>
   382f2:	481c      	ldr	r0, [pc, #112]	; (38364 <k_sched_unlock+0xe8>)
   382f4:	f004 fd3f 	bl	3cd76 <printk>
   382f8:	f240 3175 	movw	r1, #885	; 0x375
   382fc:	4818      	ldr	r0, [pc, #96]	; (38360 <k_sched_unlock+0xe4>)
   382fe:	f004 ffee 	bl	3d2de <assert_post_action>
		++_current->base.sched_locked;
   38302:	68a2      	ldr	r2, [r4, #8]
		update_cache(0);
   38304:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   38306:	7bd3      	ldrb	r3, [r2, #15]
   38308:	3301      	adds	r3, #1
   3830a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   3830c:	f7ff ff74 	bl	381f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38310:	480c      	ldr	r0, [pc, #48]	; (38344 <k_sched_unlock+0xc8>)
   38312:	f001 fa1f 	bl	39754 <z_spin_unlock_valid>
   38316:	b968      	cbnz	r0, 38334 <k_sched_unlock+0xb8>
   38318:	23a7      	movs	r3, #167	; 0xa7
   3831a:	4a0b      	ldr	r2, [pc, #44]	; (38348 <k_sched_unlock+0xcc>)
   3831c:	4913      	ldr	r1, [pc, #76]	; (3836c <k_sched_unlock+0xf0>)
   3831e:	480c      	ldr	r0, [pc, #48]	; (38350 <k_sched_unlock+0xd4>)
   38320:	f004 fd29 	bl	3cd76 <printk>
   38324:	4907      	ldr	r1, [pc, #28]	; (38344 <k_sched_unlock+0xc8>)
   38326:	4812      	ldr	r0, [pc, #72]	; (38370 <k_sched_unlock+0xf4>)
   38328:	f004 fd25 	bl	3cd76 <printk>
   3832c:	21a7      	movs	r1, #167	; 0xa7
   3832e:	4806      	ldr	r0, [pc, #24]	; (38348 <k_sched_unlock+0xcc>)
   38330:	f004 ffd5 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38334:	f385 8811 	msr	BASEPRI, r5
   38338:	f3bf 8f6f 	isb	sy
}
   3833c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   38340:	f009 bb1b 	b.w	4197a <z_reschedule_unlocked>
   38344:	2001a0b8 	.word	0x2001a0b8
   38348:	00045538 	.word	0x00045538
   3834c:	0004555e 	.word	0x0004555e
   38350:	00044dbf 	.word	0x00044dbf
   38354:	00045573 	.word	0x00045573
   38358:	2001a07c 	.word	0x2001a07c
   3835c:	0004bc99 	.word	0x0004bc99
   38360:	0004bc18 	.word	0x0004bc18
   38364:	00045c27 	.word	0x00045c27
   38368:	0004bb6f 	.word	0x0004bb6f
   3836c:	0004558b 	.word	0x0004558b
   38370:	000455a2 	.word	0x000455a2

00038374 <ready_thread>:
{
   38374:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   38376:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
   3837a:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   3837c:	2a00      	cmp	r2, #0
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   3837e:	7b43      	ldrb	r3, [r0, #13]
   38380:	db3f      	blt.n	38402 <ready_thread+0x8e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38382:	06db      	lsls	r3, r3, #27
   38384:	d13d      	bne.n	38402 <ready_thread+0x8e>
	return !sys_dnode_is_linked(&t->node);
   38386:	6985      	ldr	r5, [r0, #24]
   38388:	2d00      	cmp	r5, #0
   3838a:	d13a      	bne.n	38402 <ready_thread+0x8e>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   3838c:	4b1d      	ldr	r3, [pc, #116]	; (38404 <ready_thread+0x90>)
   3838e:	4298      	cmp	r0, r3
   38390:	d10b      	bne.n	383aa <ready_thread+0x36>
   38392:	491d      	ldr	r1, [pc, #116]	; (38408 <ready_thread+0x94>)
   38394:	481d      	ldr	r0, [pc, #116]	; (3840c <ready_thread+0x98>)
   38396:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   3839a:	4a1d      	ldr	r2, [pc, #116]	; (38410 <ready_thread+0x9c>)
   3839c:	f004 fceb 	bl	3cd76 <printk>
   383a0:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   383a4:	481a      	ldr	r0, [pc, #104]	; (38410 <ready_thread+0x9c>)
   383a6:	f004 ff9a 	bl	3d2de <assert_post_action>
	return list->head == list;
   383aa:	4a1a      	ldr	r2, [pc, #104]	; (38414 <ready_thread+0xa0>)
   383ac:	4613      	mov	r3, r2
   383ae:	f853 0f2c 	ldr.w	r0, [r3, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   383b2:	4298      	cmp	r0, r3
   383b4:	bf18      	it	ne
   383b6:	4605      	movne	r5, r0
   383b8:	2d00      	cmp	r5, #0
   383ba:	4619      	mov	r1, r3
   383bc:	462b      	mov	r3, r5
   383be:	bf38      	it	cc
   383c0:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   383c2:	6b10      	ldr	r0, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   383c4:	b1bb      	cbz	r3, 383f6 <ready_thread+0x82>
	if (thread_1->base.prio < thread_2->base.prio) {
   383c6:	f994 600e 	ldrsb.w	r6, [r4, #14]
   383ca:	f993 500e 	ldrsb.w	r5, [r3, #14]
   383ce:	42ae      	cmp	r6, r5
   383d0:	db03      	blt.n	383da <ready_thread+0x66>
	return (node == list->tail) ? NULL : node->next;
   383d2:	4298      	cmp	r0, r3
   383d4:	d00f      	beq.n	383f6 <ready_thread+0x82>
   383d6:	681b      	ldr	r3, [r3, #0]
   383d8:	e7f4      	b.n	383c4 <ready_thread+0x50>
	node->prev = successor->prev;
   383da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   383dc:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   383e0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   383e2:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   383e4:	7b63      	ldrb	r3, [r4, #13]
		update_cache(0);
   383e6:	2000      	movs	r0, #0
   383e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   383ec:	7363      	strb	r3, [r4, #13]
}
   383ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   383f2:	f7ff bf01 	b.w	381f8 <update_cache>
	node->prev = list->tail;
   383f6:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   383fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   383fc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   383fe:	6314      	str	r4, [r2, #48]	; 0x30
}
   38400:	e7f0      	b.n	383e4 <ready_thread+0x70>
}
   38402:	bd70      	pop	{r4, r5, r6, pc}
   38404:	20018950 	.word	0x20018950
   38408:	0004bc51 	.word	0x0004bc51
   3840c:	00044dbf 	.word	0x00044dbf
   38410:	0004bc18 	.word	0x0004bc18
   38414:	2001a07c 	.word	0x2001a07c

00038418 <z_ready_thread>:
{
   38418:	b538      	push	{r3, r4, r5, lr}
   3841a:	4604      	mov	r4, r0
	__asm__ volatile(
   3841c:	f04f 0320 	mov.w	r3, #32
   38420:	f3ef 8511 	mrs	r5, BASEPRI
   38424:	f383 8811 	msr	BASEPRI, r3
   38428:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3842c:	4817      	ldr	r0, [pc, #92]	; (3848c <z_ready_thread+0x74>)
   3842e:	f001 f983 	bl	39738 <z_spin_lock_valid>
   38432:	b968      	cbnz	r0, 38450 <z_ready_thread+0x38>
   38434:	237c      	movs	r3, #124	; 0x7c
   38436:	4a16      	ldr	r2, [pc, #88]	; (38490 <z_ready_thread+0x78>)
   38438:	4916      	ldr	r1, [pc, #88]	; (38494 <z_ready_thread+0x7c>)
   3843a:	4817      	ldr	r0, [pc, #92]	; (38498 <z_ready_thread+0x80>)
   3843c:	f004 fc9b 	bl	3cd76 <printk>
   38440:	4912      	ldr	r1, [pc, #72]	; (3848c <z_ready_thread+0x74>)
   38442:	4816      	ldr	r0, [pc, #88]	; (3849c <z_ready_thread+0x84>)
   38444:	f004 fc97 	bl	3cd76 <printk>
   38448:	217c      	movs	r1, #124	; 0x7c
   3844a:	4811      	ldr	r0, [pc, #68]	; (38490 <z_ready_thread+0x78>)
   3844c:	f004 ff47 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38450:	480e      	ldr	r0, [pc, #56]	; (3848c <z_ready_thread+0x74>)
   38452:	f001 f98f 	bl	39774 <z_spin_lock_set_owner>
		ready_thread(thread);
   38456:	4620      	mov	r0, r4
   38458:	f7ff ff8c 	bl	38374 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3845c:	480b      	ldr	r0, [pc, #44]	; (3848c <z_ready_thread+0x74>)
   3845e:	f001 f979 	bl	39754 <z_spin_unlock_valid>
   38462:	b968      	cbnz	r0, 38480 <z_ready_thread+0x68>
   38464:	23a7      	movs	r3, #167	; 0xa7
   38466:	4a0a      	ldr	r2, [pc, #40]	; (38490 <z_ready_thread+0x78>)
   38468:	490d      	ldr	r1, [pc, #52]	; (384a0 <z_ready_thread+0x88>)
   3846a:	480b      	ldr	r0, [pc, #44]	; (38498 <z_ready_thread+0x80>)
   3846c:	f004 fc83 	bl	3cd76 <printk>
   38470:	4906      	ldr	r1, [pc, #24]	; (3848c <z_ready_thread+0x74>)
   38472:	480c      	ldr	r0, [pc, #48]	; (384a4 <z_ready_thread+0x8c>)
   38474:	f004 fc7f 	bl	3cd76 <printk>
   38478:	21a7      	movs	r1, #167	; 0xa7
   3847a:	4805      	ldr	r0, [pc, #20]	; (38490 <z_ready_thread+0x78>)
   3847c:	f004 ff2f 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38480:	f385 8811 	msr	BASEPRI, r5
   38484:	f3bf 8f6f 	isb	sy
}
   38488:	bd38      	pop	{r3, r4, r5, pc}
   3848a:	bf00      	nop
   3848c:	2001a0b8 	.word	0x2001a0b8
   38490:	00045538 	.word	0x00045538
   38494:	0004555e 	.word	0x0004555e
   38498:	00044dbf 	.word	0x00044dbf
   3849c:	00045573 	.word	0x00045573
   384a0:	0004558b 	.word	0x0004558b
   384a4:	000455a2 	.word	0x000455a2

000384a8 <z_sched_start>:
{
   384a8:	b538      	push	{r3, r4, r5, lr}
   384aa:	4604      	mov	r4, r0
	__asm__ volatile(
   384ac:	f04f 0320 	mov.w	r3, #32
   384b0:	f3ef 8511 	mrs	r5, BASEPRI
   384b4:	f383 8811 	msr	BASEPRI, r3
   384b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   384bc:	481d      	ldr	r0, [pc, #116]	; (38534 <z_sched_start+0x8c>)
   384be:	f001 f93b 	bl	39738 <z_spin_lock_valid>
   384c2:	b968      	cbnz	r0, 384e0 <z_sched_start+0x38>
   384c4:	237c      	movs	r3, #124	; 0x7c
   384c6:	4a1c      	ldr	r2, [pc, #112]	; (38538 <z_sched_start+0x90>)
   384c8:	491c      	ldr	r1, [pc, #112]	; (3853c <z_sched_start+0x94>)
   384ca:	481d      	ldr	r0, [pc, #116]	; (38540 <z_sched_start+0x98>)
   384cc:	f004 fc53 	bl	3cd76 <printk>
   384d0:	4918      	ldr	r1, [pc, #96]	; (38534 <z_sched_start+0x8c>)
   384d2:	481c      	ldr	r0, [pc, #112]	; (38544 <z_sched_start+0x9c>)
   384d4:	f004 fc4f 	bl	3cd76 <printk>
   384d8:	217c      	movs	r1, #124	; 0x7c
   384da:	4817      	ldr	r0, [pc, #92]	; (38538 <z_sched_start+0x90>)
   384dc:	f004 feff 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   384e0:	4814      	ldr	r0, [pc, #80]	; (38534 <z_sched_start+0x8c>)
   384e2:	f001 f947 	bl	39774 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   384e6:	7b63      	ldrb	r3, [r4, #13]
   384e8:	075a      	lsls	r2, r3, #29
   384ea:	d416      	bmi.n	3851a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   384ec:	4811      	ldr	r0, [pc, #68]	; (38534 <z_sched_start+0x8c>)
   384ee:	f001 f931 	bl	39754 <z_spin_unlock_valid>
   384f2:	b968      	cbnz	r0, 38510 <z_sched_start+0x68>
   384f4:	23a7      	movs	r3, #167	; 0xa7
   384f6:	4a10      	ldr	r2, [pc, #64]	; (38538 <z_sched_start+0x90>)
   384f8:	4913      	ldr	r1, [pc, #76]	; (38548 <z_sched_start+0xa0>)
   384fa:	4811      	ldr	r0, [pc, #68]	; (38540 <z_sched_start+0x98>)
   384fc:	f004 fc3b 	bl	3cd76 <printk>
   38500:	490c      	ldr	r1, [pc, #48]	; (38534 <z_sched_start+0x8c>)
   38502:	4812      	ldr	r0, [pc, #72]	; (3854c <z_sched_start+0xa4>)
   38504:	f004 fc37 	bl	3cd76 <printk>
   38508:	21a7      	movs	r1, #167	; 0xa7
   3850a:	480b      	ldr	r0, [pc, #44]	; (38538 <z_sched_start+0x90>)
   3850c:	f004 fee7 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38510:	f385 8811 	msr	BASEPRI, r5
   38514:	f3bf 8f6f 	isb	sy
}
   38518:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   3851a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   3851e:	4620      	mov	r0, r4
   38520:	7363      	strb	r3, [r4, #13]
   38522:	f7ff ff27 	bl	38374 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   38526:	4629      	mov	r1, r5
}
   38528:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   3852c:	4801      	ldr	r0, [pc, #4]	; (38534 <z_sched_start+0x8c>)
   3852e:	f7ff bd2d 	b.w	37f8c <z_reschedule>
   38532:	bf00      	nop
   38534:	2001a0b8 	.word	0x2001a0b8
   38538:	00045538 	.word	0x00045538
   3853c:	0004555e 	.word	0x0004555e
   38540:	00044dbf 	.word	0x00044dbf
   38544:	00045573 	.word	0x00045573
   38548:	0004558b 	.word	0x0004558b
   3854c:	000455a2 	.word	0x000455a2

00038550 <z_impl_k_thread_resume>:
{
   38550:	b538      	push	{r3, r4, r5, lr}
   38552:	4604      	mov	r4, r0
	__asm__ volatile(
   38554:	f04f 0320 	mov.w	r3, #32
   38558:	f3ef 8511 	mrs	r5, BASEPRI
   3855c:	f383 8811 	msr	BASEPRI, r3
   38560:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38564:	481d      	ldr	r0, [pc, #116]	; (385dc <z_impl_k_thread_resume+0x8c>)
   38566:	f001 f8e7 	bl	39738 <z_spin_lock_valid>
   3856a:	b968      	cbnz	r0, 38588 <z_impl_k_thread_resume+0x38>
   3856c:	237c      	movs	r3, #124	; 0x7c
   3856e:	4a1c      	ldr	r2, [pc, #112]	; (385e0 <z_impl_k_thread_resume+0x90>)
   38570:	491c      	ldr	r1, [pc, #112]	; (385e4 <z_impl_k_thread_resume+0x94>)
   38572:	481d      	ldr	r0, [pc, #116]	; (385e8 <z_impl_k_thread_resume+0x98>)
   38574:	f004 fbff 	bl	3cd76 <printk>
   38578:	4918      	ldr	r1, [pc, #96]	; (385dc <z_impl_k_thread_resume+0x8c>)
   3857a:	481c      	ldr	r0, [pc, #112]	; (385ec <z_impl_k_thread_resume+0x9c>)
   3857c:	f004 fbfb 	bl	3cd76 <printk>
   38580:	217c      	movs	r1, #124	; 0x7c
   38582:	4817      	ldr	r0, [pc, #92]	; (385e0 <z_impl_k_thread_resume+0x90>)
   38584:	f004 feab 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38588:	4814      	ldr	r0, [pc, #80]	; (385dc <z_impl_k_thread_resume+0x8c>)
   3858a:	f001 f8f3 	bl	39774 <z_spin_lock_set_owner>
	if (!z_is_thread_suspended(thread)) {
   3858e:	7b63      	ldrb	r3, [r4, #13]
   38590:	06da      	lsls	r2, r3, #27
   38592:	d416      	bmi.n	385c2 <z_impl_k_thread_resume+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38594:	4811      	ldr	r0, [pc, #68]	; (385dc <z_impl_k_thread_resume+0x8c>)
   38596:	f001 f8dd 	bl	39754 <z_spin_unlock_valid>
   3859a:	b968      	cbnz	r0, 385b8 <z_impl_k_thread_resume+0x68>
   3859c:	23a7      	movs	r3, #167	; 0xa7
   3859e:	4a10      	ldr	r2, [pc, #64]	; (385e0 <z_impl_k_thread_resume+0x90>)
   385a0:	4913      	ldr	r1, [pc, #76]	; (385f0 <z_impl_k_thread_resume+0xa0>)
   385a2:	4811      	ldr	r0, [pc, #68]	; (385e8 <z_impl_k_thread_resume+0x98>)
   385a4:	f004 fbe7 	bl	3cd76 <printk>
   385a8:	490c      	ldr	r1, [pc, #48]	; (385dc <z_impl_k_thread_resume+0x8c>)
   385aa:	4812      	ldr	r0, [pc, #72]	; (385f4 <z_impl_k_thread_resume+0xa4>)
   385ac:	f004 fbe3 	bl	3cd76 <printk>
   385b0:	21a7      	movs	r1, #167	; 0xa7
   385b2:	480b      	ldr	r0, [pc, #44]	; (385e0 <z_impl_k_thread_resume+0x90>)
   385b4:	f004 fe93 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   385b8:	f385 8811 	msr	BASEPRI, r5
   385bc:	f3bf 8f6f 	isb	sy
}
   385c0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   385c2:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
   385c6:	4620      	mov	r0, r4
   385c8:	7363      	strb	r3, [r4, #13]
   385ca:	f7ff fed3 	bl	38374 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   385ce:	4629      	mov	r1, r5
}
   385d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   385d4:	4801      	ldr	r0, [pc, #4]	; (385dc <z_impl_k_thread_resume+0x8c>)
   385d6:	f7ff bcd9 	b.w	37f8c <z_reschedule>
   385da:	bf00      	nop
   385dc:	2001a0b8 	.word	0x2001a0b8
   385e0:	00045538 	.word	0x00045538
   385e4:	0004555e 	.word	0x0004555e
   385e8:	00044dbf 	.word	0x00044dbf
   385ec:	00045573 	.word	0x00045573
   385f0:	0004558b 	.word	0x0004558b
   385f4:	000455a2 	.word	0x000455a2

000385f8 <z_thread_timeout>:
{
   385f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   385fa:	4604      	mov	r4, r0
	__asm__ volatile(
   385fc:	f04f 0320 	mov.w	r3, #32
   38600:	f3ef 8511 	mrs	r5, BASEPRI
   38604:	f383 8811 	msr	BASEPRI, r3
   38608:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3860c:	481e      	ldr	r0, [pc, #120]	; (38688 <z_thread_timeout+0x90>)
   3860e:	f001 f893 	bl	39738 <z_spin_lock_valid>
   38612:	b968      	cbnz	r0, 38630 <z_thread_timeout+0x38>
   38614:	237c      	movs	r3, #124	; 0x7c
   38616:	4a1d      	ldr	r2, [pc, #116]	; (3868c <z_thread_timeout+0x94>)
   38618:	491d      	ldr	r1, [pc, #116]	; (38690 <z_thread_timeout+0x98>)
   3861a:	481e      	ldr	r0, [pc, #120]	; (38694 <z_thread_timeout+0x9c>)
   3861c:	f004 fbab 	bl	3cd76 <printk>
   38620:	4919      	ldr	r1, [pc, #100]	; (38688 <z_thread_timeout+0x90>)
   38622:	481d      	ldr	r0, [pc, #116]	; (38698 <z_thread_timeout+0xa0>)
   38624:	f004 fba7 	bl	3cd76 <printk>
   38628:	217c      	movs	r1, #124	; 0x7c
   3862a:	4818      	ldr	r0, [pc, #96]	; (3868c <z_thread_timeout+0x94>)
   3862c:	f004 fe57 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38630:	4815      	ldr	r0, [pc, #84]	; (38688 <z_thread_timeout+0x90>)
   38632:	f001 f89f 	bl	39774 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   38636:	f854 3c10 	ldr.w	r3, [r4, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   3863a:	f1a4 0018 	sub.w	r0, r4, #24
		if (thread->base.pended_on != NULL) {
   3863e:	b11b      	cbz	r3, 38648 <z_thread_timeout+0x50>
			unpend_thread_no_timeout(thread);
   38640:	9001      	str	r0, [sp, #4]
   38642:	f009 f9a4 	bl	4198e <unpend_thread_no_timeout>
   38646:	9801      	ldr	r0, [sp, #4]
   38648:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   3864c:	f023 0314 	bic.w	r3, r3, #20
   38650:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   38654:	f7ff fe8e 	bl	38374 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38658:	480b      	ldr	r0, [pc, #44]	; (38688 <z_thread_timeout+0x90>)
   3865a:	f001 f87b 	bl	39754 <z_spin_unlock_valid>
   3865e:	b968      	cbnz	r0, 3867c <z_thread_timeout+0x84>
   38660:	23a7      	movs	r3, #167	; 0xa7
   38662:	4a0a      	ldr	r2, [pc, #40]	; (3868c <z_thread_timeout+0x94>)
   38664:	490d      	ldr	r1, [pc, #52]	; (3869c <z_thread_timeout+0xa4>)
   38666:	480b      	ldr	r0, [pc, #44]	; (38694 <z_thread_timeout+0x9c>)
   38668:	f004 fb85 	bl	3cd76 <printk>
   3866c:	4906      	ldr	r1, [pc, #24]	; (38688 <z_thread_timeout+0x90>)
   3866e:	480c      	ldr	r0, [pc, #48]	; (386a0 <z_thread_timeout+0xa8>)
   38670:	f004 fb81 	bl	3cd76 <printk>
   38674:	21a7      	movs	r1, #167	; 0xa7
   38676:	4805      	ldr	r0, [pc, #20]	; (3868c <z_thread_timeout+0x94>)
   38678:	f004 fe31 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3867c:	f385 8811 	msr	BASEPRI, r5
   38680:	f3bf 8f6f 	isb	sy
}
   38684:	b003      	add	sp, #12
   38686:	bd30      	pop	{r4, r5, pc}
   38688:	2001a0b8 	.word	0x2001a0b8
   3868c:	00045538 	.word	0x00045538
   38690:	0004555e 	.word	0x0004555e
   38694:	00044dbf 	.word	0x00044dbf
   38698:	00045573 	.word	0x00045573
   3869c:	0004558b 	.word	0x0004558b
   386a0:	000455a2 	.word	0x000455a2

000386a4 <move_thread_to_end_of_prio_q>:
{
   386a4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   386a6:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   386aa:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   386ac:	2b00      	cmp	r3, #0
   386ae:	da03      	bge.n	386b8 <move_thread_to_end_of_prio_q+0x14>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   386b0:	4601      	mov	r1, r0
   386b2:	481f      	ldr	r0, [pc, #124]	; (38730 <move_thread_to_end_of_prio_q+0x8c>)
   386b4:	f7ff fd26 	bl	38104 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   386b8:	4b1e      	ldr	r3, [pc, #120]	; (38734 <move_thread_to_end_of_prio_q+0x90>)
   386ba:	429c      	cmp	r4, r3
   386bc:	d10b      	bne.n	386d6 <move_thread_to_end_of_prio_q+0x32>
   386be:	491e      	ldr	r1, [pc, #120]	; (38738 <move_thread_to_end_of_prio_q+0x94>)
   386c0:	481e      	ldr	r0, [pc, #120]	; (3873c <move_thread_to_end_of_prio_q+0x98>)
   386c2:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   386c6:	4a1e      	ldr	r2, [pc, #120]	; (38740 <move_thread_to_end_of_prio_q+0x9c>)
   386c8:	f004 fb55 	bl	3cd76 <printk>
   386cc:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   386d0:	481b      	ldr	r0, [pc, #108]	; (38740 <move_thread_to_end_of_prio_q+0x9c>)
   386d2:	f004 fe04 	bl	3d2de <assert_post_action>
	return list->head == list;
   386d6:	4a1b      	ldr	r2, [pc, #108]	; (38744 <move_thread_to_end_of_prio_q+0xa0>)
   386d8:	4611      	mov	r1, r2
   386da:	f851 3f2c 	ldr.w	r3, [r1, #44]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   386de:	6b10      	ldr	r0, [r2, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   386e0:	428b      	cmp	r3, r1
   386e2:	bf08      	it	eq
   386e4:	2300      	moveq	r3, #0
   386e6:	2b00      	cmp	r3, #0
   386e8:	bf38      	it	cc
   386ea:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   386ec:	b1d3      	cbz	r3, 38724 <move_thread_to_end_of_prio_q+0x80>
	if (thread_1->base.prio < thread_2->base.prio) {
   386ee:	f994 600e 	ldrsb.w	r6, [r4, #14]
   386f2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   386f6:	42ae      	cmp	r6, r5
   386f8:	db03      	blt.n	38702 <move_thread_to_end_of_prio_q+0x5e>
	return (node == list->tail) ? NULL : node->next;
   386fa:	4298      	cmp	r0, r3
   386fc:	d012      	beq.n	38724 <move_thread_to_end_of_prio_q+0x80>
   386fe:	681b      	ldr	r3, [r3, #0]
   38700:	e7f4      	b.n	386ec <move_thread_to_end_of_prio_q+0x48>
	node->prev = successor->prev;
   38702:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   38704:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   38708:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   3870a:	605c      	str	r4, [r3, #4]
	thread->base.thread_state |= states;
   3870c:	7b63      	ldrb	r3, [r4, #13]
	update_cache(thread == _current);
   3870e:	6890      	ldr	r0, [r2, #8]
   38710:	f063 037f 	orn	r3, r3, #127	; 0x7f
   38714:	7363      	strb	r3, [r4, #13]
   38716:	1b03      	subs	r3, r0, r4
   38718:	4258      	negs	r0, r3
   3871a:	4158      	adcs	r0, r3
}
   3871c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   38720:	f7ff bd6a 	b.w	381f8 <update_cache>
	node->prev = list->tail;
   38724:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   38728:	6b13      	ldr	r3, [r2, #48]	; 0x30
   3872a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   3872c:	6314      	str	r4, [r2, #48]	; 0x30
}
   3872e:	e7ed      	b.n	3870c <move_thread_to_end_of_prio_q+0x68>
   38730:	2001a0a8 	.word	0x2001a0a8
   38734:	20018950 	.word	0x20018950
   38738:	0004bc51 	.word	0x0004bc51
   3873c:	00044dbf 	.word	0x00044dbf
   38740:	0004bc18 	.word	0x0004bc18
   38744:	2001a07c 	.word	0x2001a07c

00038748 <z_time_slice>:
{
   38748:	b570      	push	{r4, r5, r6, lr}
   3874a:	4604      	mov	r4, r0
	__asm__ volatile(
   3874c:	f04f 0320 	mov.w	r3, #32
   38750:	f3ef 8511 	mrs	r5, BASEPRI
   38754:	f383 8811 	msr	BASEPRI, r3
   38758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3875c:	482a      	ldr	r0, [pc, #168]	; (38808 <z_time_slice+0xc0>)
   3875e:	f000 ffeb 	bl	39738 <z_spin_lock_valid>
   38762:	b968      	cbnz	r0, 38780 <z_time_slice+0x38>
   38764:	237c      	movs	r3, #124	; 0x7c
   38766:	4a29      	ldr	r2, [pc, #164]	; (3880c <z_time_slice+0xc4>)
   38768:	4929      	ldr	r1, [pc, #164]	; (38810 <z_time_slice+0xc8>)
   3876a:	482a      	ldr	r0, [pc, #168]	; (38814 <z_time_slice+0xcc>)
   3876c:	f004 fb03 	bl	3cd76 <printk>
   38770:	4925      	ldr	r1, [pc, #148]	; (38808 <z_time_slice+0xc0>)
   38772:	4829      	ldr	r0, [pc, #164]	; (38818 <z_time_slice+0xd0>)
   38774:	f004 faff 	bl	3cd76 <printk>
   38778:	217c      	movs	r1, #124	; 0x7c
   3877a:	4824      	ldr	r0, [pc, #144]	; (3880c <z_time_slice+0xc4>)
   3877c:	f004 fdaf 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38780:	4821      	ldr	r0, [pc, #132]	; (38808 <z_time_slice+0xc0>)
   38782:	f000 fff7 	bl	39774 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   38786:	4b25      	ldr	r3, [pc, #148]	; (3881c <z_time_slice+0xd4>)
   38788:	4a25      	ldr	r2, [pc, #148]	; (38820 <z_time_slice+0xd8>)
   3878a:	6898      	ldr	r0, [r3, #8]
   3878c:	6811      	ldr	r1, [r2, #0]
   3878e:	4288      	cmp	r0, r1
   38790:	4619      	mov	r1, r3
   38792:	d118      	bne.n	387c6 <z_time_slice+0x7e>
			z_reset_time_slice();
   38794:	f7ff fb84 	bl	37ea0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38798:	481b      	ldr	r0, [pc, #108]	; (38808 <z_time_slice+0xc0>)
   3879a:	f000 ffdb 	bl	39754 <z_spin_unlock_valid>
   3879e:	b968      	cbnz	r0, 387bc <z_time_slice+0x74>
   387a0:	23a7      	movs	r3, #167	; 0xa7
   387a2:	4a1a      	ldr	r2, [pc, #104]	; (3880c <z_time_slice+0xc4>)
   387a4:	491f      	ldr	r1, [pc, #124]	; (38824 <z_time_slice+0xdc>)
   387a6:	481b      	ldr	r0, [pc, #108]	; (38814 <z_time_slice+0xcc>)
   387a8:	f004 fae5 	bl	3cd76 <printk>
   387ac:	4916      	ldr	r1, [pc, #88]	; (38808 <z_time_slice+0xc0>)
   387ae:	481e      	ldr	r0, [pc, #120]	; (38828 <z_time_slice+0xe0>)
   387b0:	f004 fae1 	bl	3cd76 <printk>
   387b4:	21a7      	movs	r1, #167	; 0xa7
   387b6:	4815      	ldr	r0, [pc, #84]	; (3880c <z_time_slice+0xc4>)
   387b8:	f004 fd91 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   387bc:	f385 8811 	msr	BASEPRI, r5
   387c0:	f3bf 8f6f 	isb	sy
}
   387c4:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   387c6:	2600      	movs	r6, #0
   387c8:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   387ca:	4a18      	ldr	r2, [pc, #96]	; (3882c <z_time_slice+0xe4>)
   387cc:	6812      	ldr	r2, [r2, #0]
   387ce:	b1ba      	cbz	r2, 38800 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   387d0:	89c2      	ldrh	r2, [r0, #14]
   387d2:	2a7f      	cmp	r2, #127	; 0x7f
   387d4:	d814      	bhi.n	38800 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   387d6:	7b42      	ldrb	r2, [r0, #13]
   387d8:	06d2      	lsls	r2, r2, #27
   387da:	d111      	bne.n	38800 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   387dc:	4a14      	ldr	r2, [pc, #80]	; (38830 <z_time_slice+0xe8>)
   387de:	f990 600e 	ldrsb.w	r6, [r0, #14]
   387e2:	6812      	ldr	r2, [r2, #0]
   387e4:	4296      	cmp	r6, r2
   387e6:	db0b      	blt.n	38800 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   387e8:	4a12      	ldr	r2, [pc, #72]	; (38834 <z_time_slice+0xec>)
   387ea:	4290      	cmp	r0, r2
   387ec:	d008      	beq.n	38800 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   387ee:	695a      	ldr	r2, [r3, #20]
   387f0:	42a2      	cmp	r2, r4
   387f2:	dc02      	bgt.n	387fa <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   387f4:	f7ff ff56 	bl	386a4 <move_thread_to_end_of_prio_q>
   387f8:	e7cc      	b.n	38794 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   387fa:	1b12      	subs	r2, r2, r4
   387fc:	615a      	str	r2, [r3, #20]
   387fe:	e7cb      	b.n	38798 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   38800:	2300      	movs	r3, #0
   38802:	614b      	str	r3, [r1, #20]
   38804:	e7c8      	b.n	38798 <z_time_slice+0x50>
   38806:	bf00      	nop
   38808:	2001a0b8 	.word	0x2001a0b8
   3880c:	00045538 	.word	0x00045538
   38810:	0004555e 	.word	0x0004555e
   38814:	00044dbf 	.word	0x00044dbf
   38818:	00045573 	.word	0x00045573
   3881c:	2001a07c 	.word	0x2001a07c
   38820:	2001a0b4 	.word	0x2001a0b4
   38824:	0004558b 	.word	0x0004558b
   38828:	000455a2 	.word	0x000455a2
   3882c:	2001a0c0 	.word	0x2001a0c0
   38830:	2001a0bc 	.word	0x2001a0bc
   38834:	20018950 	.word	0x20018950

00038838 <z_impl_k_thread_suspend>:
{
   38838:	b570      	push	{r4, r5, r6, lr}
   3883a:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   3883c:	3018      	adds	r0, #24
   3883e:	f001 fa53 	bl	39ce8 <z_abort_timeout>
	__asm__ volatile(
   38842:	f04f 0320 	mov.w	r3, #32
   38846:	f3ef 8611 	mrs	r6, BASEPRI
   3884a:	f383 8811 	msr	BASEPRI, r3
   3884e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38852:	4825      	ldr	r0, [pc, #148]	; (388e8 <z_impl_k_thread_suspend+0xb0>)
   38854:	f000 ff70 	bl	39738 <z_spin_lock_valid>
   38858:	b968      	cbnz	r0, 38876 <z_impl_k_thread_suspend+0x3e>
   3885a:	237c      	movs	r3, #124	; 0x7c
   3885c:	4a23      	ldr	r2, [pc, #140]	; (388ec <z_impl_k_thread_suspend+0xb4>)
   3885e:	4924      	ldr	r1, [pc, #144]	; (388f0 <z_impl_k_thread_suspend+0xb8>)
   38860:	4824      	ldr	r0, [pc, #144]	; (388f4 <z_impl_k_thread_suspend+0xbc>)
   38862:	f004 fa88 	bl	3cd76 <printk>
   38866:	4920      	ldr	r1, [pc, #128]	; (388e8 <z_impl_k_thread_suspend+0xb0>)
   38868:	4823      	ldr	r0, [pc, #140]	; (388f8 <z_impl_k_thread_suspend+0xc0>)
   3886a:	f004 fa84 	bl	3cd76 <printk>
   3886e:	217c      	movs	r1, #124	; 0x7c
   38870:	481e      	ldr	r0, [pc, #120]	; (388ec <z_impl_k_thread_suspend+0xb4>)
   38872:	f004 fd34 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38876:	481c      	ldr	r0, [pc, #112]	; (388e8 <z_impl_k_thread_suspend+0xb0>)
   38878:	f000 ff7c 	bl	39774 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   3887c:	f994 300d 	ldrsb.w	r3, [r4, #13]
   38880:	2b00      	cmp	r3, #0
   38882:	da07      	bge.n	38894 <z_impl_k_thread_suspend+0x5c>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   38884:	4621      	mov	r1, r4
   38886:	481d      	ldr	r0, [pc, #116]	; (388fc <z_impl_k_thread_suspend+0xc4>)
   38888:	f7ff fc3c 	bl	38104 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   3888c:	7b63      	ldrb	r3, [r4, #13]
   3888e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38892:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   38894:	4d1a      	ldr	r5, [pc, #104]	; (38900 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   38896:	7b63      	ldrb	r3, [r4, #13]
   38898:	68a8      	ldr	r0, [r5, #8]
   3889a:	f043 0310 	orr.w	r3, r3, #16
   3889e:	7363      	strb	r3, [r4, #13]
   388a0:	1b03      	subs	r3, r0, r4
   388a2:	4258      	negs	r0, r3
   388a4:	4158      	adcs	r0, r3
   388a6:	f7ff fca7 	bl	381f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   388aa:	480f      	ldr	r0, [pc, #60]	; (388e8 <z_impl_k_thread_suspend+0xb0>)
   388ac:	f000 ff52 	bl	39754 <z_spin_unlock_valid>
   388b0:	b968      	cbnz	r0, 388ce <z_impl_k_thread_suspend+0x96>
   388b2:	23a7      	movs	r3, #167	; 0xa7
   388b4:	4a0d      	ldr	r2, [pc, #52]	; (388ec <z_impl_k_thread_suspend+0xb4>)
   388b6:	4913      	ldr	r1, [pc, #76]	; (38904 <z_impl_k_thread_suspend+0xcc>)
   388b8:	480e      	ldr	r0, [pc, #56]	; (388f4 <z_impl_k_thread_suspend+0xbc>)
   388ba:	f004 fa5c 	bl	3cd76 <printk>
   388be:	490a      	ldr	r1, [pc, #40]	; (388e8 <z_impl_k_thread_suspend+0xb0>)
   388c0:	4811      	ldr	r0, [pc, #68]	; (38908 <z_impl_k_thread_suspend+0xd0>)
   388c2:	f004 fa58 	bl	3cd76 <printk>
   388c6:	21a7      	movs	r1, #167	; 0xa7
   388c8:	4808      	ldr	r0, [pc, #32]	; (388ec <z_impl_k_thread_suspend+0xb4>)
   388ca:	f004 fd08 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   388ce:	f386 8811 	msr	BASEPRI, r6
   388d2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   388d6:	68ab      	ldr	r3, [r5, #8]
   388d8:	42a3      	cmp	r3, r4
   388da:	d103      	bne.n	388e4 <z_impl_k_thread_suspend+0xac>
}
   388dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   388e0:	f009 b84b 	b.w	4197a <z_reschedule_unlocked>
}
   388e4:	bd70      	pop	{r4, r5, r6, pc}
   388e6:	bf00      	nop
   388e8:	2001a0b8 	.word	0x2001a0b8
   388ec:	00045538 	.word	0x00045538
   388f0:	0004555e 	.word	0x0004555e
   388f4:	00044dbf 	.word	0x00044dbf
   388f8:	00045573 	.word	0x00045573
   388fc:	2001a0a8 	.word	0x2001a0a8
   38900:	2001a07c 	.word	0x2001a07c
   38904:	0004558b 	.word	0x0004558b
   38908:	000455a2 	.word	0x000455a2

0003890c <z_thread_single_abort>:
{
   3890c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   38910:	7b03      	ldrb	r3, [r0, #12]
{
   38912:	4604      	mov	r4, r0
	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
   38914:	07dd      	lsls	r5, r3, #31
   38916:	d50e      	bpl.n	38936 <z_thread_single_abort+0x2a>
   38918:	4987      	ldr	r1, [pc, #540]	; (38b38 <z_thread_single_abort+0x22c>)
   3891a:	f240 230d 	movw	r3, #525	; 0x20d
   3891e:	4a87      	ldr	r2, [pc, #540]	; (38b3c <z_thread_single_abort+0x230>)
   38920:	4887      	ldr	r0, [pc, #540]	; (38b40 <z_thread_single_abort+0x234>)
   38922:	f004 fa28 	bl	3cd76 <printk>
   38926:	4887      	ldr	r0, [pc, #540]	; (38b44 <z_thread_single_abort+0x238>)
   38928:	f004 fa25 	bl	3cd76 <printk>
   3892c:	f240 210d 	movw	r1, #525	; 0x20d
   38930:	4882      	ldr	r0, [pc, #520]	; (38b3c <z_thread_single_abort+0x230>)
   38932:	f004 fcd4 	bl	3d2de <assert_post_action>
	__ASSERT(thread != _current || arch_is_in_isr(),
   38936:	4e84      	ldr	r6, [pc, #528]	; (38b48 <z_thread_single_abort+0x23c>)
   38938:	68b3      	ldr	r3, [r6, #8]
   3893a:	42a3      	cmp	r3, r4
   3893c:	d111      	bne.n	38962 <z_thread_single_abort+0x56>
   3893e:	f3ef 8305 	mrs	r3, IPSR
   38942:	b973      	cbnz	r3, 38962 <z_thread_single_abort+0x56>
   38944:	4981      	ldr	r1, [pc, #516]	; (38b4c <z_thread_single_abort+0x240>)
   38946:	f240 230f 	movw	r3, #527	; 0x20f
   3894a:	4a7c      	ldr	r2, [pc, #496]	; (38b3c <z_thread_single_abort+0x230>)
   3894c:	487c      	ldr	r0, [pc, #496]	; (38b40 <z_thread_single_abort+0x234>)
   3894e:	f004 fa12 	bl	3cd76 <printk>
   38952:	487f      	ldr	r0, [pc, #508]	; (38b50 <z_thread_single_abort+0x244>)
   38954:	f004 fa0f 	bl	3cd76 <printk>
   38958:	f240 210f 	movw	r1, #527	; 0x20f
   3895c:	4877      	ldr	r0, [pc, #476]	; (38b3c <z_thread_single_abort+0x230>)
   3895e:	f004 fcbe 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38962:	f04f 0320 	mov.w	r3, #32
   38966:	f3ef 8511 	mrs	r5, BASEPRI
   3896a:	f383 8811 	msr	BASEPRI, r3
   3896e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38972:	4878      	ldr	r0, [pc, #480]	; (38b54 <z_thread_single_abort+0x248>)
   38974:	f000 fee0 	bl	39738 <z_spin_lock_valid>
   38978:	b968      	cbnz	r0, 38996 <z_thread_single_abort+0x8a>
   3897a:	237c      	movs	r3, #124	; 0x7c
   3897c:	4a76      	ldr	r2, [pc, #472]	; (38b58 <z_thread_single_abort+0x24c>)
   3897e:	4977      	ldr	r1, [pc, #476]	; (38b5c <z_thread_single_abort+0x250>)
   38980:	486f      	ldr	r0, [pc, #444]	; (38b40 <z_thread_single_abort+0x234>)
   38982:	f004 f9f8 	bl	3cd76 <printk>
   38986:	4973      	ldr	r1, [pc, #460]	; (38b54 <z_thread_single_abort+0x248>)
   38988:	4875      	ldr	r0, [pc, #468]	; (38b60 <z_thread_single_abort+0x254>)
   3898a:	f004 f9f4 	bl	3cd76 <printk>
   3898e:	217c      	movs	r1, #124	; 0x7c
   38990:	4871      	ldr	r0, [pc, #452]	; (38b58 <z_thread_single_abort+0x24c>)
   38992:	f004 fca4 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38996:	486f      	ldr	r0, [pc, #444]	; (38b54 <z_thread_single_abort+0x248>)
   38998:	f000 feec 	bl	39774 <z_spin_lock_set_owner>
	if ((thread->base.thread_state &
   3899c:	7b63      	ldrb	r3, [r4, #13]
   3899e:	f013 0f28 	tst.w	r3, #40	; 0x28
   389a2:	d017      	beq.n	389d4 <z_thread_single_abort+0xc8>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   389a4:	486b      	ldr	r0, [pc, #428]	; (38b54 <z_thread_single_abort+0x248>)
   389a6:	f000 fed5 	bl	39754 <z_spin_unlock_valid>
   389aa:	b968      	cbnz	r0, 389c8 <z_thread_single_abort+0xbc>
   389ac:	23a7      	movs	r3, #167	; 0xa7
   389ae:	4a6a      	ldr	r2, [pc, #424]	; (38b58 <z_thread_single_abort+0x24c>)
   389b0:	496c      	ldr	r1, [pc, #432]	; (38b64 <z_thread_single_abort+0x258>)
   389b2:	4863      	ldr	r0, [pc, #396]	; (38b40 <z_thread_single_abort+0x234>)
   389b4:	f004 f9df 	bl	3cd76 <printk>
   389b8:	4966      	ldr	r1, [pc, #408]	; (38b54 <z_thread_single_abort+0x248>)
   389ba:	486b      	ldr	r0, [pc, #428]	; (38b68 <z_thread_single_abort+0x25c>)
   389bc:	f004 f9db 	bl	3cd76 <printk>
   389c0:	21a7      	movs	r1, #167	; 0xa7
   389c2:	4865      	ldr	r0, [pc, #404]	; (38b58 <z_thread_single_abort+0x24c>)
   389c4:	f004 fc8b 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   389c8:	f385 8811 	msr	BASEPRI, r5
   389cc:	f3bf 8f6f 	isb	sy
}
   389d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   389d4:	f043 0320 	orr.w	r3, r3, #32
   389d8:	485e      	ldr	r0, [pc, #376]	; (38b54 <z_thread_single_abort+0x248>)
   389da:	7363      	strb	r3, [r4, #13]
   389dc:	f000 feba 	bl	39754 <z_spin_unlock_valid>
   389e0:	b968      	cbnz	r0, 389fe <z_thread_single_abort+0xf2>
   389e2:	23a7      	movs	r3, #167	; 0xa7
   389e4:	4a5c      	ldr	r2, [pc, #368]	; (38b58 <z_thread_single_abort+0x24c>)
   389e6:	495f      	ldr	r1, [pc, #380]	; (38b64 <z_thread_single_abort+0x258>)
   389e8:	4855      	ldr	r0, [pc, #340]	; (38b40 <z_thread_single_abort+0x234>)
   389ea:	f004 f9c4 	bl	3cd76 <printk>
   389ee:	4959      	ldr	r1, [pc, #356]	; (38b54 <z_thread_single_abort+0x248>)
   389f0:	485d      	ldr	r0, [pc, #372]	; (38b68 <z_thread_single_abort+0x25c>)
   389f2:	f004 f9c0 	bl	3cd76 <printk>
   389f6:	21a7      	movs	r1, #167	; 0xa7
   389f8:	4857      	ldr	r0, [pc, #348]	; (38b58 <z_thread_single_abort+0x24c>)
   389fa:	f004 fc70 	bl	3d2de <assert_post_action>
   389fe:	f385 8811 	msr	BASEPRI, r5
   38a02:	f3bf 8f6f 	isb	sy
   38a06:	f104 0018 	add.w	r0, r4, #24
   38a0a:	f001 f96d 	bl	39ce8 <z_abort_timeout>
	__asm__ volatile(
   38a0e:	f04f 0320 	mov.w	r3, #32
   38a12:	f3ef 8711 	mrs	r7, BASEPRI
   38a16:	f383 8811 	msr	BASEPRI, r3
   38a1a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38a1e:	484d      	ldr	r0, [pc, #308]	; (38b54 <z_thread_single_abort+0x248>)
   38a20:	f000 fe8a 	bl	39738 <z_spin_lock_valid>
   38a24:	b968      	cbnz	r0, 38a42 <z_thread_single_abort+0x136>
   38a26:	237c      	movs	r3, #124	; 0x7c
   38a28:	4a4b      	ldr	r2, [pc, #300]	; (38b58 <z_thread_single_abort+0x24c>)
   38a2a:	494c      	ldr	r1, [pc, #304]	; (38b5c <z_thread_single_abort+0x250>)
   38a2c:	4844      	ldr	r0, [pc, #272]	; (38b40 <z_thread_single_abort+0x234>)
   38a2e:	f004 f9a2 	bl	3cd76 <printk>
   38a32:	4948      	ldr	r1, [pc, #288]	; (38b54 <z_thread_single_abort+0x248>)
   38a34:	484a      	ldr	r0, [pc, #296]	; (38b60 <z_thread_single_abort+0x254>)
   38a36:	f004 f99e 	bl	3cd76 <printk>
   38a3a:	217c      	movs	r1, #124	; 0x7c
   38a3c:	4846      	ldr	r0, [pc, #280]	; (38b58 <z_thread_single_abort+0x24c>)
   38a3e:	f004 fc4e 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38a42:	4844      	ldr	r0, [pc, #272]	; (38b54 <z_thread_single_abort+0x248>)
   38a44:	f000 fe96 	bl	39774 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38a48:	7b63      	ldrb	r3, [r4, #13]
   38a4a:	06d8      	lsls	r0, r3, #27
   38a4c:	d116      	bne.n	38a7c <z_thread_single_abort+0x170>
		if (z_is_thread_ready(thread)) {
   38a4e:	69a2      	ldr	r2, [r4, #24]
   38a50:	b9a2      	cbnz	r2, 38a7c <z_thread_single_abort+0x170>
			if (z_is_thread_queued(thread)) {
   38a52:	0619      	lsls	r1, r3, #24
   38a54:	d507      	bpl.n	38a66 <z_thread_single_abort+0x15a>
				_priq_run_remove(&_kernel.ready_q.runq,
   38a56:	4621      	mov	r1, r4
   38a58:	4844      	ldr	r0, [pc, #272]	; (38b6c <z_thread_single_abort+0x260>)
   38a5a:	f7ff fb53 	bl	38104 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   38a5e:	7b63      	ldrb	r3, [r4, #13]
   38a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38a64:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   38a66:	68b0      	ldr	r0, [r6, #8]
   38a68:	1b02      	subs	r2, r0, r4
   38a6a:	4250      	negs	r0, r2
   38a6c:	4150      	adcs	r0, r2
   38a6e:	f7ff fbc3 	bl	381f8 <update_cache>
			waiter->base.pended_on = NULL;
   38a72:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   38a76:	f104 0930 	add.w	r9, r4, #48	; 0x30
   38a7a:	e025      	b.n	38ac8 <z_thread_single_abort+0x1bc>
			if (z_is_thread_pending(thread)) {
   38a7c:	079b      	lsls	r3, r3, #30
   38a7e:	d5f8      	bpl.n	38a72 <z_thread_single_abort+0x166>
				_priq_wait_remove(&pended_on(thread)->waitq,
   38a80:	f104 0008 	add.w	r0, r4, #8
   38a84:	f7ff f9f4 	bl	37e70 <pended_on.isra.0>
   38a88:	4621      	mov	r1, r4
   38a8a:	f7ff fb3b 	bl	38104 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   38a8e:	7b63      	ldrb	r3, [r4, #13]
   38a90:	f023 0302 	bic.w	r3, r3, #2
   38a94:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   38a96:	2300      	movs	r3, #0
   38a98:	60a3      	str	r3, [r4, #8]
   38a9a:	e7ea      	b.n	38a72 <z_thread_single_abort+0x166>
   38a9c:	f105 0018 	add.w	r0, r5, #24
   38aa0:	f001 f922 	bl	39ce8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   38aa4:	f105 0008 	add.w	r0, r5, #8
   38aa8:	f7ff f9e2 	bl	37e70 <pended_on.isra.0>
   38aac:	4629      	mov	r1, r5
   38aae:	f7ff fb29 	bl	38104 <z_priq_dumb_remove>
   38ab2:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   38ab4:	4628      	mov	r0, r5
   38ab6:	f023 0302 	bic.w	r3, r3, #2
   38aba:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   38abc:	f8c5 8008 	str.w	r8, [r5, #8]
   38ac0:	f8c5 8088 	str.w	r8, [r5, #136]	; 0x88
			ready_thread(waiter);
   38ac4:	f7ff fc56 	bl	38374 <ready_thread>
	return list->head == list;
   38ac8:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38aca:	454d      	cmp	r5, r9
   38acc:	d001      	beq.n	38ad2 <z_thread_single_abort+0x1c6>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   38ace:	2d00      	cmp	r5, #0
   38ad0:	d1e4      	bne.n	38a9c <z_thread_single_abort+0x190>
		if (z_is_idle_thread_object(_current)) {
   38ad2:	68b2      	ldr	r2, [r6, #8]
   38ad4:	4b26      	ldr	r3, [pc, #152]	; (38b70 <z_thread_single_abort+0x264>)
   38ad6:	429a      	cmp	r2, r3
   38ad8:	d102      	bne.n	38ae0 <z_thread_single_abort+0x1d4>
			update_cache(1);
   38ada:	2001      	movs	r0, #1
   38adc:	f7ff fb8c 	bl	381f8 <update_cache>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   38ae0:	2200      	movs	r2, #0
		thread->base.thread_state |= _THREAD_DEAD;
   38ae2:	7b63      	ldrb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   38ae4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
		thread->base.thread_state |= _THREAD_DEAD;
   38ae6:	f043 0308 	orr.w	r3, r3, #8
   38aea:	7363      	strb	r3, [r4, #13]
   38aec:	f104 0338 	add.w	r3, r4, #56	; 0x38
   38af0:	e8d3 1fef 	ldaex	r1, [r3]
   38af4:	e8c3 2fe0 	stlex	r0, r2, [r3]
   38af8:	2800      	cmp	r0, #0
   38afa:	d1f9      	bne.n	38af0 <z_thread_single_abort+0x1e4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38afc:	4815      	ldr	r0, [pc, #84]	; (38b54 <z_thread_single_abort+0x248>)
   38afe:	f000 fe29 	bl	39754 <z_spin_unlock_valid>
   38b02:	b968      	cbnz	r0, 38b20 <z_thread_single_abort+0x214>
   38b04:	23a7      	movs	r3, #167	; 0xa7
   38b06:	4a14      	ldr	r2, [pc, #80]	; (38b58 <z_thread_single_abort+0x24c>)
   38b08:	4916      	ldr	r1, [pc, #88]	; (38b64 <z_thread_single_abort+0x258>)
   38b0a:	480d      	ldr	r0, [pc, #52]	; (38b40 <z_thread_single_abort+0x234>)
   38b0c:	f004 f933 	bl	3cd76 <printk>
   38b10:	4910      	ldr	r1, [pc, #64]	; (38b54 <z_thread_single_abort+0x248>)
   38b12:	4815      	ldr	r0, [pc, #84]	; (38b68 <z_thread_single_abort+0x25c>)
   38b14:	f004 f92f 	bl	3cd76 <printk>
   38b18:	21a7      	movs	r1, #167	; 0xa7
   38b1a:	480f      	ldr	r0, [pc, #60]	; (38b58 <z_thread_single_abort+0x24c>)
   38b1c:	f004 fbdf 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38b20:	f387 8811 	msr	BASEPRI, r7
   38b24:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   38b28:	2d00      	cmp	r5, #0
   38b2a:	f43f af51 	beq.w	389d0 <z_thread_single_abort+0xc4>
		fn_abort(thread);
   38b2e:	4620      	mov	r0, r4
   38b30:	462b      	mov	r3, r5
}
   38b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		fn_abort(thread);
   38b36:	4718      	bx	r3
   38b38:	0004bcc9 	.word	0x0004bcc9
   38b3c:	0004bc18 	.word	0x0004bc18
   38b40:	00044dbf 	.word	0x00044dbf
   38b44:	0004bcf7 	.word	0x0004bcf7
   38b48:	2001a07c 	.word	0x2001a07c
   38b4c:	0004bd12 	.word	0x0004bd12
   38b50:	0004bd48 	.word	0x0004bd48
   38b54:	2001a0b8 	.word	0x2001a0b8
   38b58:	00045538 	.word	0x00045538
   38b5c:	0004555e 	.word	0x0004555e
   38b60:	00045573 	.word	0x00045573
   38b64:	0004558b 	.word	0x0004558b
   38b68:	000455a2 	.word	0x000455a2
   38b6c:	2001a0a8 	.word	0x2001a0a8
   38b70:	20018950 	.word	0x20018950

00038b74 <unready_thread>:
{
   38b74:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   38b76:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   38b7a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   38b7c:	2b00      	cmp	r3, #0
   38b7e:	da07      	bge.n	38b90 <unready_thread+0x1c>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   38b80:	4601      	mov	r1, r0
   38b82:	4808      	ldr	r0, [pc, #32]	; (38ba4 <unready_thread+0x30>)
   38b84:	f7ff fabe 	bl	38104 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   38b88:	7b63      	ldrb	r3, [r4, #13]
   38b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   38b8e:	7363      	strb	r3, [r4, #13]
	update_cache(thread == _current);
   38b90:	4b05      	ldr	r3, [pc, #20]	; (38ba8 <unready_thread+0x34>)
   38b92:	6898      	ldr	r0, [r3, #8]
   38b94:	1b03      	subs	r3, r0, r4
   38b96:	4258      	negs	r0, r3
   38b98:	4158      	adcs	r0, r3
}
   38b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   38b9e:	f7ff bb2b 	b.w	381f8 <update_cache>
   38ba2:	bf00      	nop
   38ba4:	2001a0a8 	.word	0x2001a0a8
   38ba8:	2001a07c 	.word	0x2001a07c

00038bac <add_to_waitq_locked>:
{
   38bac:	b538      	push	{r3, r4, r5, lr}
   38bae:	4604      	mov	r4, r0
   38bb0:	460d      	mov	r5, r1
	unready_thread(thread);
   38bb2:	f7ff ffdf 	bl	38b74 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   38bb6:	7b63      	ldrb	r3, [r4, #13]
   38bb8:	f043 0302 	orr.w	r3, r3, #2
   38bbc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   38bbe:	b33d      	cbz	r5, 38c10 <add_to_waitq_locked+0x64>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38bc0:	4b17      	ldr	r3, [pc, #92]	; (38c20 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   38bc2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38bc4:	429c      	cmp	r4, r3
   38bc6:	d10b      	bne.n	38be0 <add_to_waitq_locked+0x34>
   38bc8:	4916      	ldr	r1, [pc, #88]	; (38c24 <add_to_waitq_locked+0x78>)
   38bca:	4817      	ldr	r0, [pc, #92]	; (38c28 <add_to_waitq_locked+0x7c>)
   38bcc:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   38bd0:	4a16      	ldr	r2, [pc, #88]	; (38c2c <add_to_waitq_locked+0x80>)
   38bd2:	f004 f8d0 	bl	3cd76 <printk>
   38bd6:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   38bda:	4814      	ldr	r0, [pc, #80]	; (38c2c <add_to_waitq_locked+0x80>)
   38bdc:	f004 fb7f 	bl	3d2de <assert_post_action>
	return list->head == list;
   38be0:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38be2:	429d      	cmp	r5, r3
   38be4:	bf08      	it	eq
   38be6:	2300      	moveq	r3, #0
   38be8:	2b00      	cmp	r3, #0
   38bea:	bf38      	it	cc
   38bec:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38bee:	b183      	cbz	r3, 38c12 <add_to_waitq_locked+0x66>
	if (thread_1->base.prio < thread_2->base.prio) {
   38bf0:	f994 100e 	ldrsb.w	r1, [r4, #14]
   38bf4:	f993 200e 	ldrsb.w	r2, [r3, #14]
   38bf8:	4291      	cmp	r1, r2
   38bfa:	db04      	blt.n	38c06 <add_to_waitq_locked+0x5a>
	return (node == list->tail) ? NULL : node->next;
   38bfc:	686a      	ldr	r2, [r5, #4]
   38bfe:	429a      	cmp	r2, r3
   38c00:	d007      	beq.n	38c12 <add_to_waitq_locked+0x66>
   38c02:	681b      	ldr	r3, [r3, #0]
   38c04:	e7f3      	b.n	38bee <add_to_waitq_locked+0x42>
	node->prev = successor->prev;
   38c06:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38c08:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   38c0c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38c0e:	605c      	str	r4, [r3, #4]
}
   38c10:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   38c12:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   38c14:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   38c16:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   38c18:	686b      	ldr	r3, [r5, #4]
   38c1a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38c1c:	606c      	str	r4, [r5, #4]
   38c1e:	e7f7      	b.n	38c10 <add_to_waitq_locked+0x64>
   38c20:	20018950 	.word	0x20018950
   38c24:	0004bc51 	.word	0x0004bc51
   38c28:	00044dbf 	.word	0x00044dbf
   38c2c:	0004bc18 	.word	0x0004bc18

00038c30 <pend>:
{
   38c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   38c34:	4604      	mov	r4, r0
   38c36:	460d      	mov	r5, r1
   38c38:	4616      	mov	r6, r2
   38c3a:	461f      	mov	r7, r3
	__asm__ volatile(
   38c3c:	f04f 0320 	mov.w	r3, #32
   38c40:	f3ef 8811 	mrs	r8, BASEPRI
   38c44:	f383 8811 	msr	BASEPRI, r3
   38c48:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38c4c:	481f      	ldr	r0, [pc, #124]	; (38ccc <pend+0x9c>)
   38c4e:	f000 fd73 	bl	39738 <z_spin_lock_valid>
   38c52:	b968      	cbnz	r0, 38c70 <pend+0x40>
   38c54:	237c      	movs	r3, #124	; 0x7c
   38c56:	4a1e      	ldr	r2, [pc, #120]	; (38cd0 <pend+0xa0>)
   38c58:	491e      	ldr	r1, [pc, #120]	; (38cd4 <pend+0xa4>)
   38c5a:	481f      	ldr	r0, [pc, #124]	; (38cd8 <pend+0xa8>)
   38c5c:	f004 f88b 	bl	3cd76 <printk>
   38c60:	491a      	ldr	r1, [pc, #104]	; (38ccc <pend+0x9c>)
   38c62:	481e      	ldr	r0, [pc, #120]	; (38cdc <pend+0xac>)
   38c64:	f004 f887 	bl	3cd76 <printk>
   38c68:	217c      	movs	r1, #124	; 0x7c
   38c6a:	4819      	ldr	r0, [pc, #100]	; (38cd0 <pend+0xa0>)
   38c6c:	f004 fb37 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38c70:	4816      	ldr	r0, [pc, #88]	; (38ccc <pend+0x9c>)
   38c72:	f000 fd7f 	bl	39774 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   38c76:	4620      	mov	r0, r4
   38c78:	4629      	mov	r1, r5
   38c7a:	f7ff ff97 	bl	38bac <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38c7e:	4813      	ldr	r0, [pc, #76]	; (38ccc <pend+0x9c>)
   38c80:	f000 fd68 	bl	39754 <z_spin_unlock_valid>
   38c84:	b968      	cbnz	r0, 38ca2 <pend+0x72>
   38c86:	23a7      	movs	r3, #167	; 0xa7
   38c88:	4a11      	ldr	r2, [pc, #68]	; (38cd0 <pend+0xa0>)
   38c8a:	4915      	ldr	r1, [pc, #84]	; (38ce0 <pend+0xb0>)
   38c8c:	4812      	ldr	r0, [pc, #72]	; (38cd8 <pend+0xa8>)
   38c8e:	f004 f872 	bl	3cd76 <printk>
   38c92:	490e      	ldr	r1, [pc, #56]	; (38ccc <pend+0x9c>)
   38c94:	4813      	ldr	r0, [pc, #76]	; (38ce4 <pend+0xb4>)
   38c96:	f004 f86e 	bl	3cd76 <printk>
   38c9a:	21a7      	movs	r1, #167	; 0xa7
   38c9c:	480c      	ldr	r0, [pc, #48]	; (38cd0 <pend+0xa0>)
   38c9e:	f004 fb1e 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38ca2:	f388 8811 	msr	BASEPRI, r8
   38ca6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   38caa:	1c7b      	adds	r3, r7, #1
   38cac:	bf08      	it	eq
   38cae:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   38cb2:	d008      	beq.n	38cc6 <pend+0x96>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   38cb4:	4632      	mov	r2, r6
   38cb6:	463b      	mov	r3, r7
   38cb8:	f104 0018 	add.w	r0, r4, #24
   38cbc:	490a      	ldr	r1, [pc, #40]	; (38ce8 <pend+0xb8>)
}
   38cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   38cc2:	f000 bf37 	b.w	39b34 <z_add_timeout>
   38cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   38cca:	bf00      	nop
   38ccc:	2001a0b8 	.word	0x2001a0b8
   38cd0:	00045538 	.word	0x00045538
   38cd4:	0004555e 	.word	0x0004555e
   38cd8:	00044dbf 	.word	0x00044dbf
   38cdc:	00045573 	.word	0x00045573
   38ce0:	0004558b 	.word	0x0004558b
   38ce4:	000455a2 	.word	0x000455a2
   38ce8:	000385f9 	.word	0x000385f9

00038cec <z_pend_curr>:
{
   38cec:	b538      	push	{r3, r4, r5, lr}
   38cee:	4604      	mov	r4, r0
	pending_current = _current;
   38cf0:	4b10      	ldr	r3, [pc, #64]	; (38d34 <z_pend_curr+0x48>)
{
   38cf2:	460d      	mov	r5, r1
	pending_current = _current;
   38cf4:	6898      	ldr	r0, [r3, #8]
   38cf6:	4b10      	ldr	r3, [pc, #64]	; (38d38 <z_pend_curr+0x4c>)
{
   38cf8:	4611      	mov	r1, r2
	pending_current = _current;
   38cfa:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   38cfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   38d00:	f7ff ff96 	bl	38c30 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38d04:	4620      	mov	r0, r4
   38d06:	f000 fd25 	bl	39754 <z_spin_unlock_valid>
   38d0a:	b968      	cbnz	r0, 38d28 <z_pend_curr+0x3c>
   38d0c:	23be      	movs	r3, #190	; 0xbe
   38d0e:	4a0b      	ldr	r2, [pc, #44]	; (38d3c <z_pend_curr+0x50>)
   38d10:	490b      	ldr	r1, [pc, #44]	; (38d40 <z_pend_curr+0x54>)
   38d12:	480c      	ldr	r0, [pc, #48]	; (38d44 <z_pend_curr+0x58>)
   38d14:	f004 f82f 	bl	3cd76 <printk>
   38d18:	4621      	mov	r1, r4
   38d1a:	480b      	ldr	r0, [pc, #44]	; (38d48 <z_pend_curr+0x5c>)
   38d1c:	f004 f82b 	bl	3cd76 <printk>
   38d20:	21be      	movs	r1, #190	; 0xbe
   38d22:	4806      	ldr	r0, [pc, #24]	; (38d3c <z_pend_curr+0x50>)
   38d24:	f004 fadb 	bl	3d2de <assert_post_action>
   38d28:	4628      	mov	r0, r5
}
   38d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   38d2e:	f7ed bb63 	b.w	263f8 <arch_swap>
   38d32:	bf00      	nop
   38d34:	2001a07c 	.word	0x2001a07c
   38d38:	2001a0b4 	.word	0x2001a0b4
   38d3c:	00045538 	.word	0x00045538
   38d40:	0004558b 	.word	0x0004558b
   38d44:	00044dbf 	.word	0x00044dbf
   38d48:	000455a2 	.word	0x000455a2

00038d4c <z_set_prio>:
{
   38d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38d4e:	4604      	mov	r4, r0
   38d50:	460e      	mov	r6, r1
	__asm__ volatile(
   38d52:	f04f 0320 	mov.w	r3, #32
   38d56:	f3ef 8711 	mrs	r7, BASEPRI
   38d5a:	f383 8811 	msr	BASEPRI, r3
   38d5e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38d62:	4839      	ldr	r0, [pc, #228]	; (38e48 <z_set_prio+0xfc>)
   38d64:	f000 fce8 	bl	39738 <z_spin_lock_valid>
   38d68:	b968      	cbnz	r0, 38d86 <z_set_prio+0x3a>
   38d6a:	237c      	movs	r3, #124	; 0x7c
   38d6c:	4a37      	ldr	r2, [pc, #220]	; (38e4c <z_set_prio+0x100>)
   38d6e:	4938      	ldr	r1, [pc, #224]	; (38e50 <z_set_prio+0x104>)
   38d70:	4838      	ldr	r0, [pc, #224]	; (38e54 <z_set_prio+0x108>)
   38d72:	f004 f800 	bl	3cd76 <printk>
   38d76:	4934      	ldr	r1, [pc, #208]	; (38e48 <z_set_prio+0xfc>)
   38d78:	4837      	ldr	r0, [pc, #220]	; (38e58 <z_set_prio+0x10c>)
   38d7a:	f003 fffc 	bl	3cd76 <printk>
   38d7e:	217c      	movs	r1, #124	; 0x7c
   38d80:	4832      	ldr	r0, [pc, #200]	; (38e4c <z_set_prio+0x100>)
   38d82:	f004 faac 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38d86:	4830      	ldr	r0, [pc, #192]	; (38e48 <z_set_prio+0xfc>)
   38d88:	f000 fcf4 	bl	39774 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   38d8c:	7b63      	ldrb	r3, [r4, #13]
   38d8e:	b276      	sxtb	r6, r6
   38d90:	06db      	lsls	r3, r3, #27
   38d92:	d155      	bne.n	38e40 <z_set_prio+0xf4>
	return !sys_dnode_is_linked(&t->node);
   38d94:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   38d96:	2d00      	cmp	r5, #0
   38d98:	d152      	bne.n	38e40 <z_set_prio+0xf4>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   38d9a:	4621      	mov	r1, r4
   38d9c:	482f      	ldr	r0, [pc, #188]	; (38e5c <z_set_prio+0x110>)
   38d9e:	f7ff f9b1 	bl	38104 <z_priq_dumb_remove>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38da2:	4b2f      	ldr	r3, [pc, #188]	; (38e60 <z_set_prio+0x114>)
				thread->base.prio = prio;
   38da4:	73a6      	strb	r6, [r4, #14]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   38da6:	429c      	cmp	r4, r3
   38da8:	d10b      	bne.n	38dc2 <z_set_prio+0x76>
   38daa:	492e      	ldr	r1, [pc, #184]	; (38e64 <z_set_prio+0x118>)
   38dac:	4829      	ldr	r0, [pc, #164]	; (38e54 <z_set_prio+0x108>)
   38dae:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   38db2:	4a2d      	ldr	r2, [pc, #180]	; (38e68 <z_set_prio+0x11c>)
   38db4:	f003 ffdf 	bl	3cd76 <printk>
   38db8:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   38dbc:	482a      	ldr	r0, [pc, #168]	; (38e68 <z_set_prio+0x11c>)
   38dbe:	f004 fa8e 	bl	3d2de <assert_post_action>
	return list->head == list;
   38dc2:	4a2a      	ldr	r2, [pc, #168]	; (38e6c <z_set_prio+0x120>)
   38dc4:	4613      	mov	r3, r2
   38dc6:	f853 0f2c 	ldr.w	r0, [r3, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   38dca:	4298      	cmp	r0, r3
   38dcc:	bf18      	it	ne
   38dce:	4605      	movne	r5, r0
   38dd0:	2d00      	cmp	r5, #0
   38dd2:	4619      	mov	r1, r3
   38dd4:	462b      	mov	r3, r5
   38dd6:	bf38      	it	cc
   38dd8:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   38dda:	6b10      	ldr	r0, [r2, #48]	; 0x30
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   38ddc:	b353      	cbz	r3, 38e34 <z_set_prio+0xe8>
	if (thread_1->base.prio < thread_2->base.prio) {
   38dde:	f994 600e 	ldrsb.w	r6, [r4, #14]
   38de2:	f993 500e 	ldrsb.w	r5, [r3, #14]
   38de6:	42ae      	cmp	r6, r5
   38de8:	db03      	blt.n	38df2 <z_set_prio+0xa6>
	return (node == list->tail) ? NULL : node->next;
   38dea:	4298      	cmp	r0, r3
   38dec:	d022      	beq.n	38e34 <z_set_prio+0xe8>
   38dee:	681b      	ldr	r3, [r3, #0]
   38df0:	e7f4      	b.n	38ddc <z_set_prio+0x90>
	node->prev = successor->prev;
   38df2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   38df4:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   38df8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   38dfa:	605c      	str	r4, [r3, #4]
			update_cache(1);
   38dfc:	2001      	movs	r0, #1
   38dfe:	f7ff f9fb 	bl	381f8 <update_cache>
   38e02:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38e04:	4810      	ldr	r0, [pc, #64]	; (38e48 <z_set_prio+0xfc>)
   38e06:	f000 fca5 	bl	39754 <z_spin_unlock_valid>
   38e0a:	b968      	cbnz	r0, 38e28 <z_set_prio+0xdc>
   38e0c:	23a7      	movs	r3, #167	; 0xa7
   38e0e:	4a0f      	ldr	r2, [pc, #60]	; (38e4c <z_set_prio+0x100>)
   38e10:	4917      	ldr	r1, [pc, #92]	; (38e70 <z_set_prio+0x124>)
   38e12:	4810      	ldr	r0, [pc, #64]	; (38e54 <z_set_prio+0x108>)
   38e14:	f003 ffaf 	bl	3cd76 <printk>
   38e18:	490b      	ldr	r1, [pc, #44]	; (38e48 <z_set_prio+0xfc>)
   38e1a:	4816      	ldr	r0, [pc, #88]	; (38e74 <z_set_prio+0x128>)
   38e1c:	f003 ffab 	bl	3cd76 <printk>
   38e20:	21a7      	movs	r1, #167	; 0xa7
   38e22:	480a      	ldr	r0, [pc, #40]	; (38e4c <z_set_prio+0x100>)
   38e24:	f004 fa5b 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38e28:	f387 8811 	msr	BASEPRI, r7
   38e2c:	f3bf 8f6f 	isb	sy
}
   38e30:	4620      	mov	r0, r4
   38e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   38e34:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
   38e38:	6b13      	ldr	r3, [r2, #48]	; 0x30
   38e3a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   38e3c:	6314      	str	r4, [r2, #48]	; 0x30
}
   38e3e:	e7dd      	b.n	38dfc <z_set_prio+0xb0>
			thread->base.prio = prio;
   38e40:	73a6      	strb	r6, [r4, #14]
   38e42:	2400      	movs	r4, #0
   38e44:	e7de      	b.n	38e04 <z_set_prio+0xb8>
   38e46:	bf00      	nop
   38e48:	2001a0b8 	.word	0x2001a0b8
   38e4c:	00045538 	.word	0x00045538
   38e50:	0004555e 	.word	0x0004555e
   38e54:	00044dbf 	.word	0x00044dbf
   38e58:	00045573 	.word	0x00045573
   38e5c:	2001a0a8 	.word	0x2001a0a8
   38e60:	20018950 	.word	0x20018950
   38e64:	0004bc51 	.word	0x0004bc51
   38e68:	0004bc18 	.word	0x0004bc18
   38e6c:	2001a07c 	.word	0x2001a07c
   38e70:	0004558b 	.word	0x0004558b
   38e74:	000455a2 	.word	0x000455a2

00038e78 <z_unpend_first_thread>:
{
   38e78:	b538      	push	{r3, r4, r5, lr}
   38e7a:	4604      	mov	r4, r0
	__asm__ volatile(
   38e7c:	f04f 0320 	mov.w	r3, #32
   38e80:	f3ef 8511 	mrs	r5, BASEPRI
   38e84:	f383 8811 	msr	BASEPRI, r3
   38e88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38e8c:	4836      	ldr	r0, [pc, #216]	; (38f68 <z_unpend_first_thread+0xf0>)
   38e8e:	f000 fc53 	bl	39738 <z_spin_lock_valid>
   38e92:	b968      	cbnz	r0, 38eb0 <z_unpend_first_thread+0x38>
   38e94:	237c      	movs	r3, #124	; 0x7c
   38e96:	4a35      	ldr	r2, [pc, #212]	; (38f6c <z_unpend_first_thread+0xf4>)
   38e98:	4935      	ldr	r1, [pc, #212]	; (38f70 <z_unpend_first_thread+0xf8>)
   38e9a:	4836      	ldr	r0, [pc, #216]	; (38f74 <z_unpend_first_thread+0xfc>)
   38e9c:	f003 ff6b 	bl	3cd76 <printk>
   38ea0:	4931      	ldr	r1, [pc, #196]	; (38f68 <z_unpend_first_thread+0xf0>)
   38ea2:	4835      	ldr	r0, [pc, #212]	; (38f78 <z_unpend_first_thread+0x100>)
   38ea4:	f003 ff67 	bl	3cd76 <printk>
   38ea8:	217c      	movs	r1, #124	; 0x7c
   38eaa:	4830      	ldr	r0, [pc, #192]	; (38f6c <z_unpend_first_thread+0xf4>)
   38eac:	f004 fa17 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38eb0:	482d      	ldr	r0, [pc, #180]	; (38f68 <z_unpend_first_thread+0xf0>)
   38eb2:	f000 fc5f 	bl	39774 <z_spin_lock_set_owner>
		ret = _priq_wait_best(&wait_q->waitq);
   38eb6:	4620      	mov	r0, r4
   38eb8:	f008 fd78 	bl	419ac <z_priq_dumb_best>
   38ebc:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38ebe:	482a      	ldr	r0, [pc, #168]	; (38f68 <z_unpend_first_thread+0xf0>)
   38ec0:	f000 fc48 	bl	39754 <z_spin_unlock_valid>
   38ec4:	b968      	cbnz	r0, 38ee2 <z_unpend_first_thread+0x6a>
   38ec6:	23a7      	movs	r3, #167	; 0xa7
   38ec8:	4a28      	ldr	r2, [pc, #160]	; (38f6c <z_unpend_first_thread+0xf4>)
   38eca:	492c      	ldr	r1, [pc, #176]	; (38f7c <z_unpend_first_thread+0x104>)
   38ecc:	4829      	ldr	r0, [pc, #164]	; (38f74 <z_unpend_first_thread+0xfc>)
   38ece:	f003 ff52 	bl	3cd76 <printk>
   38ed2:	4925      	ldr	r1, [pc, #148]	; (38f68 <z_unpend_first_thread+0xf0>)
   38ed4:	482a      	ldr	r0, [pc, #168]	; (38f80 <z_unpend_first_thread+0x108>)
   38ed6:	f003 ff4e 	bl	3cd76 <printk>
   38eda:	21a7      	movs	r1, #167	; 0xa7
   38edc:	4823      	ldr	r0, [pc, #140]	; (38f6c <z_unpend_first_thread+0xf4>)
   38ede:	f004 f9fe 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38ee2:	f385 8811 	msr	BASEPRI, r5
   38ee6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   38eea:	2c00      	cmp	r4, #0
   38eec:	d039      	beq.n	38f62 <z_unpend_first_thread+0xea>
	__asm__ volatile(
   38eee:	f04f 0320 	mov.w	r3, #32
   38ef2:	f3ef 8511 	mrs	r5, BASEPRI
   38ef6:	f383 8811 	msr	BASEPRI, r3
   38efa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38efe:	481a      	ldr	r0, [pc, #104]	; (38f68 <z_unpend_first_thread+0xf0>)
   38f00:	f000 fc1a 	bl	39738 <z_spin_lock_valid>
   38f04:	b968      	cbnz	r0, 38f22 <z_unpend_first_thread+0xaa>
   38f06:	237c      	movs	r3, #124	; 0x7c
   38f08:	4a18      	ldr	r2, [pc, #96]	; (38f6c <z_unpend_first_thread+0xf4>)
   38f0a:	4919      	ldr	r1, [pc, #100]	; (38f70 <z_unpend_first_thread+0xf8>)
   38f0c:	4819      	ldr	r0, [pc, #100]	; (38f74 <z_unpend_first_thread+0xfc>)
   38f0e:	f003 ff32 	bl	3cd76 <printk>
   38f12:	4915      	ldr	r1, [pc, #84]	; (38f68 <z_unpend_first_thread+0xf0>)
   38f14:	4818      	ldr	r0, [pc, #96]	; (38f78 <z_unpend_first_thread+0x100>)
   38f16:	f003 ff2e 	bl	3cd76 <printk>
   38f1a:	217c      	movs	r1, #124	; 0x7c
   38f1c:	4813      	ldr	r0, [pc, #76]	; (38f6c <z_unpend_first_thread+0xf4>)
   38f1e:	f004 f9de 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   38f22:	4811      	ldr	r0, [pc, #68]	; (38f68 <z_unpend_first_thread+0xf0>)
   38f24:	f000 fc26 	bl	39774 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   38f28:	4620      	mov	r0, r4
   38f2a:	f008 fd30 	bl	4198e <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   38f2e:	480e      	ldr	r0, [pc, #56]	; (38f68 <z_unpend_first_thread+0xf0>)
   38f30:	f000 fc10 	bl	39754 <z_spin_unlock_valid>
   38f34:	b968      	cbnz	r0, 38f52 <z_unpend_first_thread+0xda>
   38f36:	23a7      	movs	r3, #167	; 0xa7
   38f38:	4a0c      	ldr	r2, [pc, #48]	; (38f6c <z_unpend_first_thread+0xf4>)
   38f3a:	4910      	ldr	r1, [pc, #64]	; (38f7c <z_unpend_first_thread+0x104>)
   38f3c:	480d      	ldr	r0, [pc, #52]	; (38f74 <z_unpend_first_thread+0xfc>)
   38f3e:	f003 ff1a 	bl	3cd76 <printk>
   38f42:	4909      	ldr	r1, [pc, #36]	; (38f68 <z_unpend_first_thread+0xf0>)
   38f44:	480e      	ldr	r0, [pc, #56]	; (38f80 <z_unpend_first_thread+0x108>)
   38f46:	f003 ff16 	bl	3cd76 <printk>
   38f4a:	21a7      	movs	r1, #167	; 0xa7
   38f4c:	4807      	ldr	r0, [pc, #28]	; (38f6c <z_unpend_first_thread+0xf4>)
   38f4e:	f004 f9c6 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   38f52:	f385 8811 	msr	BASEPRI, r5
   38f56:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   38f5a:	f104 0018 	add.w	r0, r4, #24
   38f5e:	f000 fec3 	bl	39ce8 <z_abort_timeout>
}
   38f62:	4620      	mov	r0, r4
   38f64:	bd38      	pop	{r3, r4, r5, pc}
   38f66:	bf00      	nop
   38f68:	2001a0b8 	.word	0x2001a0b8
   38f6c:	00045538 	.word	0x00045538
   38f70:	0004555e 	.word	0x0004555e
   38f74:	00044dbf 	.word	0x00044dbf
   38f78:	00045573 	.word	0x00045573
   38f7c:	0004558b 	.word	0x0004558b
   38f80:	000455a2 	.word	0x000455a2

00038f84 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   38f84:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   38f86:	4b04      	ldr	r3, [pc, #16]	; (38f98 <z_sched_init+0x14>)
   38f88:	4608      	mov	r0, r1
   38f8a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   38f8e:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   38f92:	f7fe bf9b 	b.w	37ecc <k_sched_time_slice_set>
   38f96:	bf00      	nop
   38f98:	2001a07c 	.word	0x2001a07c

00038f9c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   38f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   38f9e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   38fa2:	b173      	cbz	r3, 38fc2 <z_impl_k_yield+0x26>
   38fa4:	4946      	ldr	r1, [pc, #280]	; (390c0 <z_impl_k_yield+0x124>)
   38fa6:	f240 43cf 	movw	r3, #1231	; 0x4cf
   38faa:	4a46      	ldr	r2, [pc, #280]	; (390c4 <z_impl_k_yield+0x128>)
   38fac:	4846      	ldr	r0, [pc, #280]	; (390c8 <z_impl_k_yield+0x12c>)
   38fae:	f003 fee2 	bl	3cd76 <printk>
   38fb2:	4846      	ldr	r0, [pc, #280]	; (390cc <z_impl_k_yield+0x130>)
   38fb4:	f003 fedf 	bl	3cd76 <printk>
   38fb8:	f240 41cf 	movw	r1, #1231	; 0x4cf
   38fbc:	4841      	ldr	r0, [pc, #260]	; (390c4 <z_impl_k_yield+0x128>)
   38fbe:	f004 f98e 	bl	3d2de <assert_post_action>

	if (!z_is_idle_thread_object(_current)) {
   38fc2:	4c43      	ldr	r4, [pc, #268]	; (390d0 <z_impl_k_yield+0x134>)
   38fc4:	4e43      	ldr	r6, [pc, #268]	; (390d4 <z_impl_k_yield+0x138>)
   38fc6:	68a2      	ldr	r2, [r4, #8]
   38fc8:	42b2      	cmp	r2, r6
   38fca:	d067      	beq.n	3909c <z_impl_k_yield+0x100>
	__asm__ volatile(
   38fcc:	f04f 0320 	mov.w	r3, #32
   38fd0:	f3ef 8711 	mrs	r7, BASEPRI
   38fd4:	f383 8811 	msr	BASEPRI, r3
   38fd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   38fdc:	483e      	ldr	r0, [pc, #248]	; (390d8 <z_impl_k_yield+0x13c>)
   38fde:	f000 fbab 	bl	39738 <z_spin_lock_valid>
   38fe2:	b968      	cbnz	r0, 39000 <z_impl_k_yield+0x64>
   38fe4:	237c      	movs	r3, #124	; 0x7c
   38fe6:	4a3d      	ldr	r2, [pc, #244]	; (390dc <z_impl_k_yield+0x140>)
   38fe8:	493d      	ldr	r1, [pc, #244]	; (390e0 <z_impl_k_yield+0x144>)
   38fea:	4837      	ldr	r0, [pc, #220]	; (390c8 <z_impl_k_yield+0x12c>)
   38fec:	f003 fec3 	bl	3cd76 <printk>
   38ff0:	4939      	ldr	r1, [pc, #228]	; (390d8 <z_impl_k_yield+0x13c>)
   38ff2:	483c      	ldr	r0, [pc, #240]	; (390e4 <z_impl_k_yield+0x148>)
   38ff4:	f003 febf 	bl	3cd76 <printk>
   38ff8:	217c      	movs	r1, #124	; 0x7c
   38ffa:	4838      	ldr	r0, [pc, #224]	; (390dc <z_impl_k_yield+0x140>)
   38ffc:	f004 f96f 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39000:	4835      	ldr	r0, [pc, #212]	; (390d8 <z_impl_k_yield+0x13c>)
   39002:	f000 fbb7 	bl	39774 <z_spin_lock_set_owner>
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   39006:	68a1      	ldr	r1, [r4, #8]
   39008:	4837      	ldr	r0, [pc, #220]	; (390e8 <z_impl_k_yield+0x14c>)
   3900a:	f7ff f87b 	bl	38104 <z_priq_dumb_remove>
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   3900e:	68a5      	ldr	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   39010:	42b5      	cmp	r5, r6
   39012:	d10b      	bne.n	3902c <z_impl_k_yield+0x90>
   39014:	4935      	ldr	r1, [pc, #212]	; (390ec <z_impl_k_yield+0x150>)
   39016:	482c      	ldr	r0, [pc, #176]	; (390c8 <z_impl_k_yield+0x12c>)
   39018:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   3901c:	4a29      	ldr	r2, [pc, #164]	; (390c4 <z_impl_k_yield+0x128>)
   3901e:	f003 feaa 	bl	3cd76 <printk>
   39022:	f44f 7171 	mov.w	r1, #964	; 0x3c4
   39026:	4827      	ldr	r0, [pc, #156]	; (390c4 <z_impl_k_yield+0x128>)
   39028:	f004 f959 	bl	3d2de <assert_post_action>
	return list->head == list;
   3902c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3902e:	492e      	ldr	r1, [pc, #184]	; (390e8 <z_impl_k_yield+0x14c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39030:	6b22      	ldr	r2, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39032:	428b      	cmp	r3, r1
   39034:	bf08      	it	eq
   39036:	2300      	moveq	r3, #0
   39038:	2b00      	cmp	r3, #0
   3903a:	bf38      	it	cc
   3903c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   3903e:	2b00      	cmp	r3, #0
   39040:	d038      	beq.n	390b4 <z_impl_k_yield+0x118>
	if (thread_1->base.prio < thread_2->base.prio) {
   39042:	f995 600e 	ldrsb.w	r6, [r5, #14]
   39046:	f993 000e 	ldrsb.w	r0, [r3, #14]
   3904a:	4286      	cmp	r6, r0
   3904c:	db03      	blt.n	39056 <z_impl_k_yield+0xba>
	return (node == list->tail) ? NULL : node->next;
   3904e:	4293      	cmp	r3, r2
   39050:	d030      	beq.n	390b4 <z_impl_k_yield+0x118>
   39052:	681b      	ldr	r3, [r3, #0]
   39054:	e7f3      	b.n	3903e <z_impl_k_yield+0xa2>
	node->prev = successor->prev;
   39056:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   39058:	e9c5 3200 	strd	r3, r2, [r5]
	successor->prev->next = node;
   3905c:	6015      	str	r5, [r2, #0]
	successor->prev = node;
   3905e:	605d      	str	r5, [r3, #4]
			z_mark_thread_as_queued(_current);
   39060:	68a2      	ldr	r2, [r4, #8]
			update_cache(1);
   39062:	2001      	movs	r0, #1
	thread->base.thread_state |= states;
   39064:	7b53      	ldrb	r3, [r2, #13]
   39066:	f063 037f 	orn	r3, r3, #127	; 0x7f
   3906a:	7353      	strb	r3, [r2, #13]
   3906c:	f7ff f8c4 	bl	381f8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39070:	4819      	ldr	r0, [pc, #100]	; (390d8 <z_impl_k_yield+0x13c>)
   39072:	f000 fb6f 	bl	39754 <z_spin_unlock_valid>
   39076:	b968      	cbnz	r0, 39094 <z_impl_k_yield+0xf8>
   39078:	23a7      	movs	r3, #167	; 0xa7
   3907a:	4a18      	ldr	r2, [pc, #96]	; (390dc <z_impl_k_yield+0x140>)
   3907c:	491c      	ldr	r1, [pc, #112]	; (390f0 <z_impl_k_yield+0x154>)
   3907e:	4812      	ldr	r0, [pc, #72]	; (390c8 <z_impl_k_yield+0x12c>)
   39080:	f003 fe79 	bl	3cd76 <printk>
   39084:	4914      	ldr	r1, [pc, #80]	; (390d8 <z_impl_k_yield+0x13c>)
   39086:	481b      	ldr	r0, [pc, #108]	; (390f4 <z_impl_k_yield+0x158>)
   39088:	f003 fe75 	bl	3cd76 <printk>
   3908c:	21a7      	movs	r1, #167	; 0xa7
   3908e:	4813      	ldr	r0, [pc, #76]	; (390dc <z_impl_k_yield+0x140>)
   39090:	f004 f925 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   39094:	f387 8811 	msr	BASEPRI, r7
   39098:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3909c:	f04f 0320 	mov.w	r3, #32
   390a0:	f3ef 8011 	mrs	r0, BASEPRI
   390a4:	f383 8811 	msr	BASEPRI, r3
   390a8:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   390ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   390b0:	f7ed b9a2 	b.w	263f8 <arch_swap>
	node->prev = list->tail;
   390b4:	e9c5 1200 	strd	r1, r2, [r5]
	list->tail->next = node;
   390b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   390ba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   390bc:	6325      	str	r5, [r4, #48]	; 0x30
}
   390be:	e7cf      	b.n	39060 <z_impl_k_yield+0xc4>
   390c0:	0004bb6f 	.word	0x0004bb6f
   390c4:	0004bc18 	.word	0x0004bc18
   390c8:	00044dbf 	.word	0x00044dbf
   390cc:	00045c27 	.word	0x00045c27
   390d0:	2001a07c 	.word	0x2001a07c
   390d4:	20018950 	.word	0x20018950
   390d8:	2001a0b8 	.word	0x2001a0b8
   390dc:	00045538 	.word	0x00045538
   390e0:	0004555e 	.word	0x0004555e
   390e4:	00045573 	.word	0x00045573
   390e8:	2001a0a8 	.word	0x2001a0a8
   390ec:	0004bc51 	.word	0x0004bc51
   390f0:	0004558b 	.word	0x0004558b
   390f4:	000455a2 	.word	0x000455a2

000390f8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   390f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   390fc:	4606      	mov	r6, r0
   390fe:	460f      	mov	r7, r1
   39100:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   39104:	b173      	cbz	r3, 39124 <z_tick_sleep+0x2c>
   39106:	493e      	ldr	r1, [pc, #248]	; (39200 <z_tick_sleep+0x108>)
   39108:	f240 43ed 	movw	r3, #1261	; 0x4ed
   3910c:	4a3d      	ldr	r2, [pc, #244]	; (39204 <z_tick_sleep+0x10c>)
   3910e:	483e      	ldr	r0, [pc, #248]	; (39208 <z_tick_sleep+0x110>)
   39110:	f003 fe31 	bl	3cd76 <printk>
   39114:	483d      	ldr	r0, [pc, #244]	; (3920c <z_tick_sleep+0x114>)
   39116:	f003 fe2e 	bl	3cd76 <printk>
   3911a:	f240 41ed 	movw	r1, #1261	; 0x4ed
   3911e:	4839      	ldr	r0, [pc, #228]	; (39204 <z_tick_sleep+0x10c>)
   39120:	f004 f8dd 	bl	3d2de <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   39124:	ea56 0307 	orrs.w	r3, r6, r7
   39128:	d104      	bne.n	39134 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   3912a:	f7ff ff37 	bl	38f9c <z_impl_k_yield>
		k_yield();
		return 0;
   3912e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   39130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   39134:	f008 fccc 	bl	41ad0 <z_tick_get_32>
   39138:	1984      	adds	r4, r0, r6
   3913a:	f04f 0320 	mov.w	r3, #32
   3913e:	f3ef 8811 	mrs	r8, BASEPRI
   39142:	f383 8811 	msr	BASEPRI, r3
   39146:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3914a:	4831      	ldr	r0, [pc, #196]	; (39210 <z_tick_sleep+0x118>)
   3914c:	f000 faf4 	bl	39738 <z_spin_lock_valid>
   39150:	b968      	cbnz	r0, 3916e <z_tick_sleep+0x76>
   39152:	237c      	movs	r3, #124	; 0x7c
   39154:	4a2f      	ldr	r2, [pc, #188]	; (39214 <z_tick_sleep+0x11c>)
   39156:	4930      	ldr	r1, [pc, #192]	; (39218 <z_tick_sleep+0x120>)
   39158:	482b      	ldr	r0, [pc, #172]	; (39208 <z_tick_sleep+0x110>)
   3915a:	f003 fe0c 	bl	3cd76 <printk>
   3915e:	492c      	ldr	r1, [pc, #176]	; (39210 <z_tick_sleep+0x118>)
   39160:	482e      	ldr	r0, [pc, #184]	; (3921c <z_tick_sleep+0x124>)
   39162:	f003 fe08 	bl	3cd76 <printk>
   39166:	217c      	movs	r1, #124	; 0x7c
   39168:	482a      	ldr	r0, [pc, #168]	; (39214 <z_tick_sleep+0x11c>)
   3916a:	f004 f8b8 	bl	3d2de <assert_post_action>
	pending_current = _current;
   3916e:	4d2c      	ldr	r5, [pc, #176]	; (39220 <z_tick_sleep+0x128>)
	z_spin_lock_set_owner(l);
   39170:	4827      	ldr	r0, [pc, #156]	; (39210 <z_tick_sleep+0x118>)
   39172:	f000 faff 	bl	39774 <z_spin_lock_set_owner>
   39176:	68a8      	ldr	r0, [r5, #8]
   39178:	4b2a      	ldr	r3, [pc, #168]	; (39224 <z_tick_sleep+0x12c>)
   3917a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   3917c:	f7ff fcfa 	bl	38b74 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   39180:	68a8      	ldr	r0, [r5, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   39182:	4632      	mov	r2, r6
   39184:	463b      	mov	r3, r7
   39186:	3018      	adds	r0, #24
   39188:	4927      	ldr	r1, [pc, #156]	; (39228 <z_tick_sleep+0x130>)
   3918a:	f000 fcd3 	bl	39b34 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   3918e:	68aa      	ldr	r2, [r5, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39190:	481f      	ldr	r0, [pc, #124]	; (39210 <z_tick_sleep+0x118>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   39192:	7b53      	ldrb	r3, [r2, #13]
   39194:	f043 0310 	orr.w	r3, r3, #16
   39198:	7353      	strb	r3, [r2, #13]
   3919a:	f000 fadb 	bl	39754 <z_spin_unlock_valid>
   3919e:	b968      	cbnz	r0, 391bc <z_tick_sleep+0xc4>
   391a0:	23be      	movs	r3, #190	; 0xbe
   391a2:	4a1c      	ldr	r2, [pc, #112]	; (39214 <z_tick_sleep+0x11c>)
   391a4:	4921      	ldr	r1, [pc, #132]	; (3922c <z_tick_sleep+0x134>)
   391a6:	4818      	ldr	r0, [pc, #96]	; (39208 <z_tick_sleep+0x110>)
   391a8:	f003 fde5 	bl	3cd76 <printk>
   391ac:	4918      	ldr	r1, [pc, #96]	; (39210 <z_tick_sleep+0x118>)
   391ae:	4820      	ldr	r0, [pc, #128]	; (39230 <z_tick_sleep+0x138>)
   391b0:	f003 fde1 	bl	3cd76 <printk>
   391b4:	21be      	movs	r1, #190	; 0xbe
   391b6:	4817      	ldr	r0, [pc, #92]	; (39214 <z_tick_sleep+0x11c>)
   391b8:	f004 f891 	bl	3d2de <assert_post_action>
   391bc:	4640      	mov	r0, r8
   391be:	f7ed f91b 	bl	263f8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   391c2:	68ab      	ldr	r3, [r5, #8]
   391c4:	7b5b      	ldrb	r3, [r3, #13]
   391c6:	06db      	lsls	r3, r3, #27
   391c8:	d50e      	bpl.n	391e8 <z_tick_sleep+0xf0>
   391ca:	491a      	ldr	r1, [pc, #104]	; (39234 <z_tick_sleep+0x13c>)
   391cc:	f240 530b 	movw	r3, #1291	; 0x50b
   391d0:	4a0c      	ldr	r2, [pc, #48]	; (39204 <z_tick_sleep+0x10c>)
   391d2:	480d      	ldr	r0, [pc, #52]	; (39208 <z_tick_sleep+0x110>)
   391d4:	f003 fdcf 	bl	3cd76 <printk>
   391d8:	480c      	ldr	r0, [pc, #48]	; (3920c <z_tick_sleep+0x114>)
   391da:	f003 fdcc 	bl	3cd76 <printk>
   391de:	f240 510b 	movw	r1, #1291	; 0x50b
   391e2:	4808      	ldr	r0, [pc, #32]	; (39204 <z_tick_sleep+0x10c>)
   391e4:	f004 f87b 	bl	3d2de <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   391e8:	f008 fc72 	bl	41ad0 <z_tick_get_32>
   391ec:	1a20      	subs	r0, r4, r0
   391ee:	eb64 0104 	sbc.w	r1, r4, r4
   391f2:	2800      	cmp	r0, #0
   391f4:	f171 0300 	sbcs.w	r3, r1, #0
   391f8:	bfb8      	it	lt
   391fa:	2000      	movlt	r0, #0
   391fc:	e798      	b.n	39130 <z_tick_sleep+0x38>
   391fe:	bf00      	nop
   39200:	0004bb6f 	.word	0x0004bb6f
   39204:	0004bc18 	.word	0x0004bc18
   39208:	00044dbf 	.word	0x00044dbf
   3920c:	00045c27 	.word	0x00045c27
   39210:	2001a0b8 	.word	0x2001a0b8
   39214:	00045538 	.word	0x00045538
   39218:	0004555e 	.word	0x0004555e
   3921c:	00045573 	.word	0x00045573
   39220:	2001a07c 	.word	0x2001a07c
   39224:	2001a0b4 	.word	0x2001a0b4
   39228:	000385f9 	.word	0x000385f9
   3922c:	0004558b 	.word	0x0004558b
   39230:	000455a2 	.word	0x000455a2
   39234:	0004bd5e 	.word	0x0004bd5e

00039238 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   39238:	b538      	push	{r3, r4, r5, lr}
   3923a:	4604      	mov	r4, r0
   3923c:	460d      	mov	r5, r1
   3923e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   39242:	b173      	cbz	r3, 39262 <z_impl_k_sleep+0x2a>
   39244:	4913      	ldr	r1, [pc, #76]	; (39294 <z_impl_k_sleep+0x5c>)
   39246:	f240 531a 	movw	r3, #1306	; 0x51a
   3924a:	4a13      	ldr	r2, [pc, #76]	; (39298 <z_impl_k_sleep+0x60>)
   3924c:	4813      	ldr	r0, [pc, #76]	; (3929c <z_impl_k_sleep+0x64>)
   3924e:	f003 fd92 	bl	3cd76 <printk>
   39252:	4813      	ldr	r0, [pc, #76]	; (392a0 <z_impl_k_sleep+0x68>)
   39254:	f003 fd8f 	bl	3cd76 <printk>
   39258:	f240 511a 	movw	r1, #1306	; 0x51a
   3925c:	480e      	ldr	r0, [pc, #56]	; (39298 <z_impl_k_sleep+0x60>)
   3925e:	f004 f83e 	bl	3d2de <assert_post_action>
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   39262:	1c6b      	adds	r3, r5, #1
   39264:	bf08      	it	eq
   39266:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   3926a:	d106      	bne.n	3927a <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   3926c:	4b0d      	ldr	r3, [pc, #52]	; (392a4 <z_impl_k_sleep+0x6c>)
   3926e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   39270:	f7ff fae2 	bl	38838 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   39274:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   39278:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   3927a:	4629      	mov	r1, r5
   3927c:	4620      	mov	r0, r4
   3927e:	f7ff ff3b 	bl	390f8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   39282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   39286:	fb80 0103 	smull	r0, r1, r0, r3
   3928a:	0bc3      	lsrs	r3, r0, #15
   3928c:	ea43 4041 	orr.w	r0, r3, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   39290:	e7f2      	b.n	39278 <z_impl_k_sleep+0x40>
   39292:	bf00      	nop
   39294:	0004bb6f 	.word	0x0004bb6f
   39298:	0004bc18 	.word	0x0004bc18
   3929c:	00044dbf 	.word	0x00044dbf
   392a0:	00045c27 	.word	0x00045c27
   392a4:	2001a07c 	.word	0x2001a07c

000392a8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   392a8:	4b01      	ldr	r3, [pc, #4]	; (392b0 <z_impl_k_current_get+0x8>)
   392aa:	6898      	ldr	r0, [r3, #8]
   392ac:	4770      	bx	lr
   392ae:	bf00      	nop
   392b0:	2001a07c 	.word	0x2001a07c

000392b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   392b4:	b538      	push	{r3, r4, r5, lr}
   392b6:	4604      	mov	r4, r0
   392b8:	f04f 0320 	mov.w	r3, #32
   392bc:	f3ef 8511 	mrs	r5, BASEPRI
   392c0:	f383 8811 	msr	BASEPRI, r3
   392c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   392c8:	4817      	ldr	r0, [pc, #92]	; (39328 <z_impl_k_sem_give+0x74>)
   392ca:	f000 fa35 	bl	39738 <z_spin_lock_valid>
   392ce:	b968      	cbnz	r0, 392ec <z_impl_k_sem_give+0x38>
   392d0:	237c      	movs	r3, #124	; 0x7c
   392d2:	4a16      	ldr	r2, [pc, #88]	; (3932c <z_impl_k_sem_give+0x78>)
   392d4:	4916      	ldr	r1, [pc, #88]	; (39330 <z_impl_k_sem_give+0x7c>)
   392d6:	4817      	ldr	r0, [pc, #92]	; (39334 <z_impl_k_sem_give+0x80>)
   392d8:	f003 fd4d 	bl	3cd76 <printk>
   392dc:	4912      	ldr	r1, [pc, #72]	; (39328 <z_impl_k_sem_give+0x74>)
   392de:	4816      	ldr	r0, [pc, #88]	; (39338 <z_impl_k_sem_give+0x84>)
   392e0:	f003 fd49 	bl	3cd76 <printk>
   392e4:	217c      	movs	r1, #124	; 0x7c
   392e6:	4811      	ldr	r0, [pc, #68]	; (3932c <z_impl_k_sem_give+0x78>)
   392e8:	f003 fff9 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   392ec:	480e      	ldr	r0, [pc, #56]	; (39328 <z_impl_k_sem_give+0x74>)
   392ee:	f000 fa41 	bl	39774 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   392f2:	4620      	mov	r0, r4
   392f4:	f7ff fdc0 	bl	38e78 <z_unpend_first_thread>

	if (thread != NULL) {
   392f8:	b150      	cbz	r0, 39310 <z_impl_k_sem_give+0x5c>
   392fa:	2200      	movs	r2, #0
   392fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   39300:	f7ff f88a 	bl	38418 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   39304:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   39306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   3930a:	4807      	ldr	r0, [pc, #28]	; (39328 <z_impl_k_sem_give+0x74>)
   3930c:	f7fe be3e 	b.w	37f8c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   39310:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   39314:	429a      	cmp	r2, r3
   39316:	bf18      	it	ne
   39318:	3301      	addne	r3, #1
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3931a:	2102      	movs	r1, #2
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   3931c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   3931e:	f104 0010 	add.w	r0, r4, #16
   39322:	f008 fc4d 	bl	41bc0 <z_handle_obj_poll_events>
}
   39326:	e7ed      	b.n	39304 <z_impl_k_sem_give+0x50>
   39328:	2001a0c4 	.word	0x2001a0c4
   3932c:	00045538 	.word	0x00045538
   39330:	0004555e 	.word	0x0004555e
   39334:	00044dbf 	.word	0x00044dbf
   39338:	00045573 	.word	0x00045573

0003933c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   3933c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3933e:	4604      	mov	r4, r0
   39340:	4616      	mov	r6, r2
   39342:	461f      	mov	r7, r3
   39344:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   39348:	b17b      	cbz	r3, 3936a <z_impl_k_sem_take+0x2e>
   3934a:	ea56 0307 	orrs.w	r3, r6, r7
   3934e:	d00c      	beq.n	3936a <z_impl_k_sem_take+0x2e>
   39350:	4935      	ldr	r1, [pc, #212]	; (39428 <z_impl_k_sem_take+0xec>)
   39352:	238c      	movs	r3, #140	; 0x8c
   39354:	4a35      	ldr	r2, [pc, #212]	; (3942c <z_impl_k_sem_take+0xf0>)
   39356:	4836      	ldr	r0, [pc, #216]	; (39430 <z_impl_k_sem_take+0xf4>)
   39358:	f003 fd0d 	bl	3cd76 <printk>
   3935c:	4835      	ldr	r0, [pc, #212]	; (39434 <z_impl_k_sem_take+0xf8>)
   3935e:	f003 fd0a 	bl	3cd76 <printk>
   39362:	218c      	movs	r1, #140	; 0x8c
   39364:	4831      	ldr	r0, [pc, #196]	; (3942c <z_impl_k_sem_take+0xf0>)
   39366:	f003 ffba 	bl	3d2de <assert_post_action>
   3936a:	f04f 0320 	mov.w	r3, #32
   3936e:	f3ef 8511 	mrs	r5, BASEPRI
   39372:	f383 8811 	msr	BASEPRI, r3
   39376:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3937a:	482f      	ldr	r0, [pc, #188]	; (39438 <z_impl_k_sem_take+0xfc>)
   3937c:	f000 f9dc 	bl	39738 <z_spin_lock_valid>
   39380:	b968      	cbnz	r0, 3939e <z_impl_k_sem_take+0x62>
   39382:	237c      	movs	r3, #124	; 0x7c
   39384:	4a2d      	ldr	r2, [pc, #180]	; (3943c <z_impl_k_sem_take+0x100>)
   39386:	492e      	ldr	r1, [pc, #184]	; (39440 <z_impl_k_sem_take+0x104>)
   39388:	4829      	ldr	r0, [pc, #164]	; (39430 <z_impl_k_sem_take+0xf4>)
   3938a:	f003 fcf4 	bl	3cd76 <printk>
   3938e:	492a      	ldr	r1, [pc, #168]	; (39438 <z_impl_k_sem_take+0xfc>)
   39390:	482c      	ldr	r0, [pc, #176]	; (39444 <z_impl_k_sem_take+0x108>)
   39392:	f003 fcf0 	bl	3cd76 <printk>
   39396:	217c      	movs	r1, #124	; 0x7c
   39398:	4828      	ldr	r0, [pc, #160]	; (3943c <z_impl_k_sem_take+0x100>)
   3939a:	f003 ffa0 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3939e:	4826      	ldr	r0, [pc, #152]	; (39438 <z_impl_k_sem_take+0xfc>)
   393a0:	f000 f9e8 	bl	39774 <z_spin_lock_set_owner>
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   393a4:	68a3      	ldr	r3, [r4, #8]
   393a6:	b1d3      	cbz	r3, 393de <z_impl_k_sem_take+0xa2>
		sem->count--;
   393a8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   393aa:	4823      	ldr	r0, [pc, #140]	; (39438 <z_impl_k_sem_take+0xfc>)
   393ac:	60a3      	str	r3, [r4, #8]
   393ae:	f000 f9d1 	bl	39754 <z_spin_unlock_valid>
   393b2:	b968      	cbnz	r0, 393d0 <z_impl_k_sem_take+0x94>
   393b4:	23a7      	movs	r3, #167	; 0xa7
   393b6:	4a21      	ldr	r2, [pc, #132]	; (3943c <z_impl_k_sem_take+0x100>)
   393b8:	4923      	ldr	r1, [pc, #140]	; (39448 <z_impl_k_sem_take+0x10c>)
   393ba:	481d      	ldr	r0, [pc, #116]	; (39430 <z_impl_k_sem_take+0xf4>)
   393bc:	f003 fcdb 	bl	3cd76 <printk>
   393c0:	491d      	ldr	r1, [pc, #116]	; (39438 <z_impl_k_sem_take+0xfc>)
   393c2:	4822      	ldr	r0, [pc, #136]	; (3944c <z_impl_k_sem_take+0x110>)
   393c4:	f003 fcd7 	bl	3cd76 <printk>
   393c8:	21a7      	movs	r1, #167	; 0xa7
   393ca:	481c      	ldr	r0, [pc, #112]	; (3943c <z_impl_k_sem_take+0x100>)
   393cc:	f003 ff87 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   393d0:	f385 8811 	msr	BASEPRI, r5
   393d4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   393d8:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   393da:	b003      	add	sp, #12
   393dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   393de:	ea56 0307 	orrs.w	r3, r6, r7
   393e2:	d118      	bne.n	39416 <z_impl_k_sem_take+0xda>
   393e4:	4814      	ldr	r0, [pc, #80]	; (39438 <z_impl_k_sem_take+0xfc>)
   393e6:	f000 f9b5 	bl	39754 <z_spin_unlock_valid>
   393ea:	b968      	cbnz	r0, 39408 <z_impl_k_sem_take+0xcc>
   393ec:	23a7      	movs	r3, #167	; 0xa7
   393ee:	4a13      	ldr	r2, [pc, #76]	; (3943c <z_impl_k_sem_take+0x100>)
   393f0:	4915      	ldr	r1, [pc, #84]	; (39448 <z_impl_k_sem_take+0x10c>)
   393f2:	480f      	ldr	r0, [pc, #60]	; (39430 <z_impl_k_sem_take+0xf4>)
   393f4:	f003 fcbf 	bl	3cd76 <printk>
   393f8:	490f      	ldr	r1, [pc, #60]	; (39438 <z_impl_k_sem_take+0xfc>)
   393fa:	4814      	ldr	r0, [pc, #80]	; (3944c <z_impl_k_sem_take+0x110>)
   393fc:	f003 fcbb 	bl	3cd76 <printk>
   39400:	21a7      	movs	r1, #167	; 0xa7
   39402:	480e      	ldr	r0, [pc, #56]	; (3943c <z_impl_k_sem_take+0x100>)
   39404:	f003 ff6b 	bl	3d2de <assert_post_action>
   39408:	f385 8811 	msr	BASEPRI, r5
   3940c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   39410:	f06f 000f 	mvn.w	r0, #15
   39414:	e7e1      	b.n	393da <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   39416:	4622      	mov	r2, r4
   39418:	4629      	mov	r1, r5
   3941a:	e9cd 6700 	strd	r6, r7, [sp]
   3941e:	4806      	ldr	r0, [pc, #24]	; (39438 <z_impl_k_sem_take+0xfc>)
   39420:	f7ff fc64 	bl	38cec <z_pend_curr>
	return ret;
   39424:	e7d9      	b.n	393da <z_impl_k_sem_take+0x9e>
   39426:	bf00      	nop
   39428:	0004bdbe 	.word	0x0004bdbe
   3942c:	0004bd9e 	.word	0x0004bd9e
   39430:	00044dbf 	.word	0x00044dbf
   39434:	00045c27 	.word	0x00045c27
   39438:	2001a0c4 	.word	0x2001a0c4
   3943c:	00045538 	.word	0x00045538
   39440:	0004555e 	.word	0x0004555e
   39444:	00045573 	.word	0x00045573
   39448:	0004558b 	.word	0x0004558b
   3944c:	000455a2 	.word	0x000455a2

00039450 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   39450:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   39452:	4c08      	ldr	r4, [pc, #32]	; (39474 <k_sys_work_q_init+0x24>)
   39454:	f04f 33ff 	mov.w	r3, #4294967295
   39458:	f44f 6200 	mov.w	r2, #2048	; 0x800
   3945c:	4620      	mov	r0, r4
   3945e:	4906      	ldr	r1, [pc, #24]	; (39478 <k_sys_work_q_init+0x28>)
   39460:	f000 f9cc 	bl	397fc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   39464:	4905      	ldr	r1, [pc, #20]	; (3947c <k_sys_work_q_init+0x2c>)
   39466:	f104 0020 	add.w	r0, r4, #32
   3946a:	f008 fad3 	bl	41a14 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   3946e:	2000      	movs	r0, #0
   39470:	bd10      	pop	{r4, pc}
   39472:	bf00      	nop
   39474:	20018af0 	.word	0x20018af0
   39478:	20025fa8 	.word	0x20025fa8
   3947c:	0004be0b 	.word	0x0004be0b

00039480 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   39480:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   39484:	4604      	mov	r4, r0
   39486:	460f      	mov	r7, r1
   39488:	4698      	mov	r8, r3
   3948a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   3948c:	4b32      	ldr	r3, [pc, #200]	; (39558 <z_setup_new_thread+0xd8>)
   3948e:	4616      	mov	r6, r2
   39490:	f100 0238 	add.w	r2, r0, #56	; 0x38
   39494:	e8d2 1fef 	ldaex	r1, [r2]
   39498:	e8c2 3fe0 	stlex	r0, r3, [r2]
   3949c:	2800      	cmp	r0, #0
   3949e:	d1f9      	bne.n	39494 <z_setup_new_thread+0x14>
	atomic_val_t old_val = atomic_set(&new_thread->base.cookie,
					  THREAD_COOKIE);
	/* Must be garbage or 0, never already set. Cleared at the end of
	 * z_thread_single_abort()
	 */
	__ASSERT(old_val != THREAD_COOKIE,
   394a0:	4299      	cmp	r1, r3
   394a2:	d10f      	bne.n	394c4 <z_setup_new_thread+0x44>
   394a4:	f240 2323 	movw	r3, #547	; 0x223
   394a8:	4a2c      	ldr	r2, [pc, #176]	; (3955c <z_setup_new_thread+0xdc>)
   394aa:	492d      	ldr	r1, [pc, #180]	; (39560 <z_setup_new_thread+0xe0>)
   394ac:	482d      	ldr	r0, [pc, #180]	; (39564 <z_setup_new_thread+0xe4>)
   394ae:	f003 fc62 	bl	3cd76 <printk>
   394b2:	4621      	mov	r1, r4
   394b4:	482c      	ldr	r0, [pc, #176]	; (39568 <z_setup_new_thread+0xe8>)
   394b6:	f003 fc5e 	bl	3cd76 <printk>
   394ba:	f240 2123 	movw	r1, #547	; 0x223
   394be:	4827      	ldr	r0, [pc, #156]	; (3955c <z_setup_new_thread+0xdc>)
   394c0:	f003 ff0d 	bl	3d2de <assert_post_action>
		 "re-use of active thread object %p detected", new_thread);
#endif
	Z_ASSERT_VALID_PRIO(prio, entry);
   394c4:	2d0f      	cmp	r5, #15
   394c6:	d12f      	bne.n	39528 <z_setup_new_thread+0xa8>
   394c8:	4b28      	ldr	r3, [pc, #160]	; (3956c <z_setup_new_thread+0xec>)
   394ca:	4598      	cmp	r8, r3
   394cc:	d130      	bne.n	39530 <z_setup_new_thread+0xb0>
	sys_dlist_init(&w->waitq);
   394ce:	f104 0330 	add.w	r3, r4, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   394d2:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   394d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   394d8:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   394da:	7323      	strb	r3, [r4, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   394dc:	2304      	movs	r3, #4

	thread_base->sched_locked = 0U;
   394de:	2500      	movs	r5, #0
	thread_base->thread_state = (uint8_t)initial_state;
   394e0:	7363      	strb	r3, [r4, #13]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   394e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   394e4:	1df0      	adds	r0, r6, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   394e6:	9302      	str	r3, [sp, #8]
   394e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   394ea:	f020 0007 	bic.w	r0, r0, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   394ee:	9301      	str	r3, [sp, #4]
   394f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	stack_ptr = (char *)stack + stack_obj_size;
   394f2:	183e      	adds	r6, r7, r0
	new_thread->stack_info.size = stack_buf_size;
   394f4:	e9c4 701d 	strd	r7, r0, [r4, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   394f8:	9300      	str	r3, [sp, #0]
   394fa:	4632      	mov	r2, r6
   394fc:	4643      	mov	r3, r8
   394fe:	4639      	mov	r1, r7
   39500:	4620      	mov	r0, r4
	node->prev = NULL;
   39502:	e9c4 5506 	strd	r5, r5, [r4, #24]
	thread_base->sched_locked = 0U;
   39506:	73e5      	strb	r5, [r4, #15]
	new_thread->stack_info.delta = delta;
   39508:	67e5      	str	r5, [r4, #124]	; 0x7c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   3950a:	f7ed f859 	bl	265c0 <arch_new_thread>
	if (!_current) {
   3950e:	4b18      	ldr	r3, [pc, #96]	; (39570 <z_setup_new_thread+0xf0>)
	new_thread->fn_abort = NULL;
   39510:	e9c4 5519 	strd	r5, r5, [r4, #100]	; 0x64
	if (!_current) {
   39514:	689b      	ldr	r3, [r3, #8]
   39516:	b10b      	cbz	r3, 3951c <z_setup_new_thread+0x9c>
	new_thread->resource_pool = _current->resource_pool;
   39518:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
   3951c:	4630      	mov	r0, r6
   3951e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
   39522:	b004      	add	sp, #16
   39524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   39528:	f105 0310 	add.w	r3, r5, #16
   3952c:	2b1e      	cmp	r3, #30
   3952e:	d9ce      	bls.n	394ce <z_setup_new_thread+0x4e>
   39530:	f240 2326 	movw	r3, #550	; 0x226
   39534:	4a09      	ldr	r2, [pc, #36]	; (3955c <z_setup_new_thread+0xdc>)
   39536:	490f      	ldr	r1, [pc, #60]	; (39574 <z_setup_new_thread+0xf4>)
   39538:	480a      	ldr	r0, [pc, #40]	; (39564 <z_setup_new_thread+0xe4>)
   3953a:	f003 fc1c 	bl	3cd76 <printk>
   3953e:	4629      	mov	r1, r5
   39540:	f06f 030f 	mvn.w	r3, #15
   39544:	220e      	movs	r2, #14
   39546:	480c      	ldr	r0, [pc, #48]	; (39578 <z_setup_new_thread+0xf8>)
   39548:	f003 fc15 	bl	3cd76 <printk>
   3954c:	f240 2126 	movw	r1, #550	; 0x226
   39550:	4802      	ldr	r0, [pc, #8]	; (3955c <z_setup_new_thread+0xdc>)
   39552:	f003 fec4 	bl	3d2de <assert_post_action>
   39556:	e7ba      	b.n	394ce <z_setup_new_thread+0x4e>
   39558:	1337c0d3 	.word	0x1337c0d3
   3955c:	0004be14 	.word	0x0004be14
   39560:	0004be37 	.word	0x0004be37
   39564:	00044dbf 	.word	0x00044dbf
   39568:	0004be4d 	.word	0x0004be4d
   3956c:	000371b1 	.word	0x000371b1
   39570:	2001a07c 	.word	0x2001a07c
   39574:	0004be7a 	.word	0x0004be7a
   39578:	0004befa 	.word	0x0004befa

0003957c <z_impl_k_thread_create>:
{
   3957c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   39580:	b087      	sub	sp, #28
   39582:	4604      	mov	r4, r0
   39584:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   39588:	460d      	mov	r5, r1
   3958a:	4690      	mov	r8, r2
   3958c:	4699      	mov	r9, r3
   3958e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   39592:	b173      	cbz	r3, 395b2 <z_impl_k_thread_create+0x36>
   39594:	491b      	ldr	r1, [pc, #108]	; (39604 <z_impl_k_thread_create+0x88>)
   39596:	f240 238f 	movw	r3, #655	; 0x28f
   3959a:	4a1b      	ldr	r2, [pc, #108]	; (39608 <z_impl_k_thread_create+0x8c>)
   3959c:	481b      	ldr	r0, [pc, #108]	; (3960c <z_impl_k_thread_create+0x90>)
   3959e:	f003 fbea 	bl	3cd76 <printk>
   395a2:	481b      	ldr	r0, [pc, #108]	; (39610 <z_impl_k_thread_create+0x94>)
   395a4:	f003 fbe7 	bl	3cd76 <printk>
   395a8:	f240 218f 	movw	r1, #655	; 0x28f
   395ac:	4816      	ldr	r0, [pc, #88]	; (39608 <z_impl_k_thread_create+0x8c>)
   395ae:	f003 fe96 	bl	3d2de <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   395b2:	2300      	movs	r3, #0
   395b4:	9305      	str	r3, [sp, #20]
   395b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   395b8:	4642      	mov	r2, r8
   395ba:	9304      	str	r3, [sp, #16]
   395bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   395be:	4629      	mov	r1, r5
   395c0:	9303      	str	r3, [sp, #12]
   395c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   395c4:	4620      	mov	r0, r4
   395c6:	9302      	str	r3, [sp, #8]
   395c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   395ca:	9301      	str	r3, [sp, #4]
   395cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   395ce:	9300      	str	r3, [sp, #0]
   395d0:	464b      	mov	r3, r9
   395d2:	f7ff ff55 	bl	39480 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   395d6:	1c7b      	adds	r3, r7, #1
   395d8:	bf08      	it	eq
   395da:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   395de:	d005      	beq.n	395ec <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   395e0:	ea56 0307 	orrs.w	r3, r6, r7
   395e4:	d106      	bne.n	395f4 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   395e6:	4620      	mov	r0, r4
   395e8:	f7fe ff5e 	bl	384a8 <z_sched_start>
}
   395ec:	4620      	mov	r0, r4
   395ee:	b007      	add	sp, #28
   395f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   395f4:	4632      	mov	r2, r6
   395f6:	463b      	mov	r3, r7
   395f8:	4906      	ldr	r1, [pc, #24]	; (39614 <z_impl_k_thread_create+0x98>)
   395fa:	f104 0018 	add.w	r0, r4, #24
   395fe:	f000 fa99 	bl	39b34 <z_add_timeout>
   39602:	e7f3      	b.n	395ec <z_impl_k_thread_create+0x70>
   39604:	0004bb6f 	.word	0x0004bb6f
   39608:	0004be14 	.word	0x0004be14
   3960c:	00044dbf 	.word	0x00044dbf
   39610:	0004bf2b 	.word	0x0004bf2b
   39614:	000385f9 	.word	0x000385f9

00039618 <z_init_static_threads>:
{
   39618:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   3961c:	4f3f      	ldr	r7, [pc, #252]	; (3971c <z_init_static_threads+0x104>)
   3961e:	4d40      	ldr	r5, [pc, #256]	; (39720 <z_init_static_threads+0x108>)
   39620:	463e      	mov	r6, r7
   39622:	f8df 810c 	ldr.w	r8, [pc, #268]	; 39730 <z_init_static_threads+0x118>
{
   39626:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   39628:	42bd      	cmp	r5, r7
   3962a:	d90e      	bls.n	3964a <z_init_static_threads+0x32>
   3962c:	493d      	ldr	r1, [pc, #244]	; (39724 <z_init_static_threads+0x10c>)
   3962e:	f240 23fd 	movw	r3, #765	; 0x2fd
   39632:	4642      	mov	r2, r8
   39634:	483c      	ldr	r0, [pc, #240]	; (39728 <z_init_static_threads+0x110>)
   39636:	f003 fb9e 	bl	3cd76 <printk>
   3963a:	483c      	ldr	r0, [pc, #240]	; (3972c <z_init_static_threads+0x114>)
   3963c:	f003 fb9b 	bl	3cd76 <printk>
   39640:	f240 21fd 	movw	r1, #765	; 0x2fd
   39644:	4640      	mov	r0, r8
   39646:	f003 fe4a 	bl	3d2de <assert_post_action>
   3964a:	42b5      	cmp	r5, r6
   3964c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   39650:	d31f      	bcc.n	39692 <z_init_static_threads+0x7a>
	k_sched_lock();
   39652:	f7fe fcdf 	bl	38014 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   39656:	4c32      	ldr	r4, [pc, #200]	; (39720 <z_init_static_threads+0x108>)
   39658:	4d35      	ldr	r5, [pc, #212]	; (39730 <z_init_static_threads+0x118>)
   3965a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 39724 <z_init_static_threads+0x10c>
   3965e:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 39728 <z_init_static_threads+0x110>
   39662:	42b4      	cmp	r4, r6
   39664:	d90e      	bls.n	39684 <z_init_static_threads+0x6c>
   39666:	4641      	mov	r1, r8
   39668:	f44f 7347 	mov.w	r3, #796	; 0x31c
   3966c:	462a      	mov	r2, r5
   3966e:	4648      	mov	r0, r9
   39670:	f003 fb81 	bl	3cd76 <printk>
   39674:	482d      	ldr	r0, [pc, #180]	; (3972c <z_init_static_threads+0x114>)
   39676:	f003 fb7e 	bl	3cd76 <printk>
   3967a:	f44f 7147 	mov.w	r1, #796	; 0x31c
   3967e:	4628      	mov	r0, r5
   39680:	f003 fe2d 	bl	3d2de <assert_post_action>
   39684:	42b4      	cmp	r4, r6
   39686:	d321      	bcc.n	396cc <z_init_static_threads+0xb4>
}
   39688:	b006      	add	sp, #24
   3968a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   3968e:	f7fe bdf5 	b.w	3827c <k_sched_unlock>
		z_setup_new_thread(
   39692:	f854 3c04 	ldr.w	r3, [r4, #-4]
   39696:	9305      	str	r3, [sp, #20]
   39698:	f854 3c10 	ldr.w	r3, [r4, #-16]
   3969c:	9304      	str	r3, [sp, #16]
   3969e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   396a2:	9303      	str	r3, [sp, #12]
   396a4:	f854 3c18 	ldr.w	r3, [r4, #-24]
   396a8:	9302      	str	r3, [sp, #8]
   396aa:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   396ae:	9301      	str	r3, [sp, #4]
   396b0:	f854 3c20 	ldr.w	r3, [r4, #-32]
   396b4:	9300      	str	r3, [sp, #0]
   396b6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   396ba:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   396be:	f7ff fedf 	bl	39480 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   396c2:	f854 3c30 	ldr.w	r3, [r4, #-48]
   396c6:	665d      	str	r5, [r3, #100]	; 0x64
   396c8:	4625      	mov	r5, r4
   396ca:	e7ad      	b.n	39628 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   396cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
   396ce:	1c4b      	adds	r3, r1, #1
   396d0:	d014      	beq.n	396fc <z_init_static_threads+0xe4>
   396d2:	f240 32e7 	movw	r2, #999	; 0x3e7
   396d6:	2300      	movs	r3, #0
   396d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   396dc:	4693      	mov	fp, r2
   396de:	469c      	mov	ip, r3
					    K_MSEC(thread_data->init_delay));
   396e0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   396e4:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   396e8:	459c      	cmp	ip, r3
   396ea:	bf08      	it	eq
   396ec:	4593      	cmpeq	fp, r2
   396ee:	4658      	mov	r0, fp
   396f0:	4661      	mov	r1, ip
			schedule_new_thread(thread_data->init_thread,
   396f2:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   396f4:	d104      	bne.n	39700 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   396f6:	4638      	mov	r0, r7
   396f8:	f7fe fed6 	bl	384a8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   396fc:	3430      	adds	r4, #48	; 0x30
   396fe:	e7b0      	b.n	39662 <z_init_static_threads+0x4a>
   39700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   39704:	2300      	movs	r3, #0
   39706:	f7e3 fbd9 	bl	1cebc <__aeabi_uldivmod>
   3970a:	4602      	mov	r2, r0
   3970c:	460b      	mov	r3, r1
   3970e:	f107 0018 	add.w	r0, r7, #24
   39712:	4908      	ldr	r1, [pc, #32]	; (39734 <z_init_static_threads+0x11c>)
   39714:	f000 fa0e 	bl	39b34 <z_add_timeout>
   39718:	e7f0      	b.n	396fc <z_init_static_threads+0xe4>
   3971a:	bf00      	nop
   3971c:	20015a30 	.word	0x20015a30
   39720:	200159d0 	.word	0x200159d0
   39724:	0004bf50 	.word	0x0004bf50
   39728:	00044dbf 	.word	0x00044dbf
   3972c:	00045ca5 	.word	0x00045ca5
   39730:	0004be14 	.word	0x0004be14
   39734:	000385f9 	.word	0x000385f9

00039738 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   39738:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu) {
   3973a:	b138      	cbz	r0, 3974c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   3973c:	4b04      	ldr	r3, [pc, #16]	; (39750 <z_spin_lock_valid+0x18>)
   3973e:	f000 0003 	and.w	r0, r0, #3
   39742:	7e1b      	ldrb	r3, [r3, #24]
   39744:	1ac0      	subs	r0, r0, r3
   39746:	bf18      	it	ne
   39748:	2001      	movne	r0, #1
   3974a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   3974c:	2001      	movs	r0, #1
}
   3974e:	4770      	bx	lr
   39750:	2001a07c 	.word	0x2001a07c

00039754 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   39754:	4a06      	ldr	r2, [pc, #24]	; (39770 <z_spin_unlock_valid+0x1c>)
   39756:	7e11      	ldrb	r1, [r2, #24]
   39758:	6893      	ldr	r3, [r2, #8]
   3975a:	6802      	ldr	r2, [r0, #0]
   3975c:	430b      	orrs	r3, r1
   3975e:	429a      	cmp	r2, r3
   39760:	f04f 0300 	mov.w	r3, #0
		return false;
	}
	l->thread_cpu = 0;
   39764:	bf06      	itte	eq
   39766:	6003      	streq	r3, [r0, #0]
	return true;
   39768:	2001      	moveq	r0, #1
		return false;
   3976a:	4618      	movne	r0, r3
}
   3976c:	4770      	bx	lr
   3976e:	bf00      	nop
   39770:	2001a07c 	.word	0x2001a07c

00039774 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   39774:	4a02      	ldr	r2, [pc, #8]	; (39780 <z_spin_lock_set_owner+0xc>)
   39776:	7e11      	ldrb	r1, [r2, #24]
   39778:	6893      	ldr	r3, [r2, #8]
   3977a:	430b      	orrs	r3, r1
   3977c:	6003      	str	r3, [r0, #0]
}
   3977e:	4770      	bx	lr
   39780:	2001a07c 	.word	0x2001a07c

00039784 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   39784:	b508      	push	{r3, lr}
	__asm__ volatile(
   39786:	f04f 0320 	mov.w	r3, #32
   3978a:	f3ef 8511 	mrs	r5, BASEPRI
   3978e:	f383 8811 	msr	BASEPRI, r3
   39792:	f3bf 8f6f 	isb	sy
	/* Lock local IRQs to prevent us from migrating to another CPU
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
   39796:	4c12      	ldr	r4, [pc, #72]	; (397e0 <z_self_abort+0x5c>)
   39798:	6923      	ldr	r3, [r4, #16]
   3979a:	b163      	cbz	r3, 397b6 <z_self_abort+0x32>
   3979c:	4911      	ldr	r1, [pc, #68]	; (397e4 <z_self_abort+0x60>)
   3979e:	2328      	movs	r3, #40	; 0x28
   397a0:	4a11      	ldr	r2, [pc, #68]	; (397e8 <z_self_abort+0x64>)
   397a2:	4812      	ldr	r0, [pc, #72]	; (397ec <z_self_abort+0x68>)
   397a4:	f003 fae7 	bl	3cd76 <printk>
   397a8:	4811      	ldr	r0, [pc, #68]	; (397f0 <z_self_abort+0x6c>)
   397aa:	f003 fae4 	bl	3cd76 <printk>
   397ae:	2128      	movs	r1, #40	; 0x28
   397b0:	480d      	ldr	r0, [pc, #52]	; (397e8 <z_self_abort+0x64>)
   397b2:	f003 fd94 	bl	3d2de <assert_post_action>
	cpu->pending_abort = _current;
   397b6:	68a0      	ldr	r0, [r4, #8]
   397b8:	6120      	str	r0, [r4, #16]
	z_impl_k_thread_suspend(thread);
   397ba:	f7ff f83d 	bl	38838 <z_impl_k_thread_suspend>
   397be:	4628      	mov	r0, r5
   397c0:	f7ec fe1a 	bl	263f8 <arch_swap>
	LOG_DBG("%p self-aborting, handle on idle thread %p",
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
   397c4:	490b      	ldr	r1, [pc, #44]	; (397f4 <z_self_abort+0x70>)
   397c6:	2330      	movs	r3, #48	; 0x30
   397c8:	4a07      	ldr	r2, [pc, #28]	; (397e8 <z_self_abort+0x64>)
   397ca:	4808      	ldr	r0, [pc, #32]	; (397ec <z_self_abort+0x68>)
   397cc:	f003 fad3 	bl	3cd76 <printk>
   397d0:	4809      	ldr	r0, [pc, #36]	; (397f8 <z_self_abort+0x74>)
   397d2:	f003 fad0 	bl	3cd76 <printk>
   397d6:	2130      	movs	r1, #48	; 0x30
   397d8:	4803      	ldr	r0, [pc, #12]	; (397e8 <z_self_abort+0x64>)
   397da:	f003 fd80 	bl	3d2de <assert_post_action>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   397de:	bf00      	nop
   397e0:	2001a07c 	.word	0x2001a07c
   397e4:	0004bfa6 	.word	0x0004bfa6
   397e8:	0004bf7d 	.word	0x0004bf7d
   397ec:	00044dbf 	.word	0x00044dbf
   397f0:	0004bfc8 	.word	0x0004bfc8
   397f4:	0004bcc7 	.word	0x0004bcc7
   397f8:	0004bfe9 	.word	0x0004bfe9

000397fc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   397fc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   39800:	b08a      	sub	sp, #40	; 0x28
   39802:	4604      	mov	r4, r0
   39804:	461d      	mov	r5, r3
   39806:	e9cd 2108 	strd	r2, r1, [sp, #32]
	z_impl_k_queue_init(queue);
   3980a:	f008 f889 	bl	41920 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   3980e:	f104 0620 	add.w	r6, r4, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   39812:	2000      	movs	r0, #0
   39814:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
   39818:	f04f 0800 	mov.w	r8, #0
   3981c:	f04f 0900 	mov.w	r9, #0
   39820:	e9cd 5003 	strd	r5, r0, [sp, #12]
   39824:	e9cd 0001 	strd	r0, r0, [sp, #4]
   39828:	e9cd 8906 	strd	r8, r9, [sp, #24]
   3982c:	4630      	mov	r0, r6
   3982e:	4b05      	ldr	r3, [pc, #20]	; (39844 <k_work_q_start+0x48>)
   39830:	9400      	str	r4, [sp, #0]
   39832:	f7ff fea3 	bl	3957c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   39836:	4630      	mov	r0, r6
   39838:	4903      	ldr	r1, [pc, #12]	; (39848 <k_work_q_start+0x4c>)
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   3983a:	b00a      	add	sp, #40	; 0x28
   3983c:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
   39840:	f008 b8e8 	b.w	41a14 <z_impl_k_thread_name_set>
   39844:	00023285 	.word	0x00023285
   39848:	00046fe7 	.word	0x00046fe7

0003984c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   3984c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   39850:	4680      	mov	r8, r0
   39852:	460d      	mov	r5, r1
   39854:	4616      	mov	r6, r2
   39856:	461f      	mov	r7, r3
   39858:	f04f 0320 	mov.w	r3, #32
   3985c:	f3ef 8911 	mrs	r9, BASEPRI
   39860:	f383 8811 	msr	BASEPRI, r3
   39864:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39868:	4835      	ldr	r0, [pc, #212]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   3986a:	f7ff ff65 	bl	39738 <z_spin_lock_valid>
   3986e:	b968      	cbnz	r0, 3988c <k_delayed_work_submit_to_queue+0x40>
   39870:	237c      	movs	r3, #124	; 0x7c
   39872:	4a34      	ldr	r2, [pc, #208]	; (39944 <k_delayed_work_submit_to_queue+0xf8>)
   39874:	4934      	ldr	r1, [pc, #208]	; (39948 <k_delayed_work_submit_to_queue+0xfc>)
   39876:	4835      	ldr	r0, [pc, #212]	; (3994c <k_delayed_work_submit_to_queue+0x100>)
   39878:	f003 fa7d 	bl	3cd76 <printk>
   3987c:	4930      	ldr	r1, [pc, #192]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   3987e:	4834      	ldr	r0, [pc, #208]	; (39950 <k_delayed_work_submit_to_queue+0x104>)
   39880:	f003 fa79 	bl	3cd76 <printk>
   39884:	217c      	movs	r1, #124	; 0x7c
   39886:	482f      	ldr	r0, [pc, #188]	; (39944 <k_delayed_work_submit_to_queue+0xf8>)
   39888:	f003 fd29 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3988c:	482c      	ldr	r0, [pc, #176]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   3988e:	f7ff ff71 	bl	39774 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   39892:	6aab      	ldr	r3, [r5, #40]	; 0x28
   39894:	b30b      	cbz	r3, 398da <k_delayed_work_submit_to_queue+0x8e>
   39896:	4543      	cmp	r3, r8
   39898:	d14e      	bne.n	39938 <k_delayed_work_submit_to_queue+0xec>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   3989a:	4628      	mov	r0, r5
   3989c:	f008 f8d8 	bl	41a50 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   398a0:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   398a4:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   398a6:	d01b      	beq.n	398e0 <k_delayed_work_submit_to_queue+0x94>
			err = 0;
		} else if (err < 0) {
   398a8:	2800      	cmp	r0, #0
   398aa:	da1a      	bge.n	398e2 <k_delayed_work_submit_to_queue+0x96>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   398ac:	4824      	ldr	r0, [pc, #144]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   398ae:	f7ff ff51 	bl	39754 <z_spin_unlock_valid>
   398b2:	b968      	cbnz	r0, 398d0 <k_delayed_work_submit_to_queue+0x84>
   398b4:	23a7      	movs	r3, #167	; 0xa7
   398b6:	4a23      	ldr	r2, [pc, #140]	; (39944 <k_delayed_work_submit_to_queue+0xf8>)
   398b8:	4926      	ldr	r1, [pc, #152]	; (39954 <k_delayed_work_submit_to_queue+0x108>)
   398ba:	4824      	ldr	r0, [pc, #144]	; (3994c <k_delayed_work_submit_to_queue+0x100>)
   398bc:	f003 fa5b 	bl	3cd76 <printk>
   398c0:	491f      	ldr	r1, [pc, #124]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   398c2:	4825      	ldr	r0, [pc, #148]	; (39958 <k_delayed_work_submit_to_queue+0x10c>)
   398c4:	f003 fa57 	bl	3cd76 <printk>
   398c8:	21a7      	movs	r1, #167	; 0xa7
   398ca:	481e      	ldr	r0, [pc, #120]	; (39944 <k_delayed_work_submit_to_queue+0xf8>)
   398cc:	f003 fd07 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   398d0:	f389 8811 	msr	BASEPRI, r9
   398d4:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   398d8:	e023      	b.n	39922 <k_delayed_work_submit_to_queue+0xd6>
	if (work->work_q == work_q) {
   398da:	f1b8 0f00 	cmp.w	r8, #0
   398de:	d0dc      	beq.n	3989a <k_delayed_work_submit_to_queue+0x4e>
	int err = 0;
   398e0:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   398e2:	ea56 0307 	orrs.w	r3, r6, r7
	work->work_q = work_q;
   398e6:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   398ea:	d11d      	bne.n	39928 <k_delayed_work_submit_to_queue+0xdc>
   398ec:	4814      	ldr	r0, [pc, #80]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   398ee:	f7ff ff31 	bl	39754 <z_spin_unlock_valid>
   398f2:	b968      	cbnz	r0, 39910 <k_delayed_work_submit_to_queue+0xc4>
   398f4:	23a7      	movs	r3, #167	; 0xa7
   398f6:	4a13      	ldr	r2, [pc, #76]	; (39944 <k_delayed_work_submit_to_queue+0xf8>)
   398f8:	4916      	ldr	r1, [pc, #88]	; (39954 <k_delayed_work_submit_to_queue+0x108>)
   398fa:	4814      	ldr	r0, [pc, #80]	; (3994c <k_delayed_work_submit_to_queue+0x100>)
   398fc:	f003 fa3b 	bl	3cd76 <printk>
   39900:	490f      	ldr	r1, [pc, #60]	; (39940 <k_delayed_work_submit_to_queue+0xf4>)
   39902:	4815      	ldr	r0, [pc, #84]	; (39958 <k_delayed_work_submit_to_queue+0x10c>)
   39904:	f003 fa37 	bl	3cd76 <printk>
   39908:	21a7      	movs	r1, #167	; 0xa7
   3990a:	480e      	ldr	r0, [pc, #56]	; (39944 <k_delayed_work_submit_to_queue+0xf8>)
   3990c:	f003 fce7 	bl	3d2de <assert_post_action>
   39910:	f389 8811 	msr	BASEPRI, r9
   39914:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   39918:	4629      	mov	r1, r5
   3991a:	4640      	mov	r0, r8
   3991c:	f008 f87f 	bl	41a1e <k_work_submit_to_queue>
		return 0;
   39920:	2400      	movs	r4, #0
}
   39922:	4620      	mov	r0, r4
   39924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   39928:	4632      	mov	r2, r6
   3992a:	463b      	mov	r3, r7
   3992c:	490b      	ldr	r1, [pc, #44]	; (3995c <k_delayed_work_submit_to_queue+0x110>)
   3992e:	f105 0010 	add.w	r0, r5, #16
   39932:	f000 f8ff 	bl	39b34 <z_add_timeout>
   39936:	e7b9      	b.n	398ac <k_delayed_work_submit_to_queue+0x60>
		err = -EADDRINUSE;
   39938:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   3993c:	e7b6      	b.n	398ac <k_delayed_work_submit_to_queue+0x60>
   3993e:	bf00      	nop
   39940:	2001a0c8 	.word	0x2001a0c8
   39944:	00045538 	.word	0x00045538
   39948:	0004555e 	.word	0x0004555e
   3994c:	00044dbf 	.word	0x00044dbf
   39950:	00045573 	.word	0x00045573
   39954:	0004558b 	.word	0x0004558b
   39958:	000455a2 	.word	0x000455a2
   3995c:	00041a47 	.word	0x00041a47

00039960 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   39960:	b538      	push	{r3, r4, r5, lr}
   39962:	4604      	mov	r4, r0
	__asm__ volatile(
   39964:	f04f 0320 	mov.w	r3, #32
   39968:	f3ef 8511 	mrs	r5, BASEPRI
   3996c:	f383 8811 	msr	BASEPRI, r3
   39970:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39974:	481a      	ldr	r0, [pc, #104]	; (399e0 <k_delayed_work_cancel+0x80>)
   39976:	f7ff fedf 	bl	39738 <z_spin_lock_valid>
   3997a:	b968      	cbnz	r0, 39998 <k_delayed_work_cancel+0x38>
   3997c:	237c      	movs	r3, #124	; 0x7c
   3997e:	4a19      	ldr	r2, [pc, #100]	; (399e4 <k_delayed_work_cancel+0x84>)
   39980:	4919      	ldr	r1, [pc, #100]	; (399e8 <k_delayed_work_cancel+0x88>)
   39982:	481a      	ldr	r0, [pc, #104]	; (399ec <k_delayed_work_cancel+0x8c>)
   39984:	f003 f9f7 	bl	3cd76 <printk>
   39988:	4915      	ldr	r1, [pc, #84]	; (399e0 <k_delayed_work_cancel+0x80>)
   3998a:	4819      	ldr	r0, [pc, #100]	; (399f0 <k_delayed_work_cancel+0x90>)
   3998c:	f003 f9f3 	bl	3cd76 <printk>
   39990:	217c      	movs	r1, #124	; 0x7c
   39992:	4814      	ldr	r0, [pc, #80]	; (399e4 <k_delayed_work_cancel+0x84>)
   39994:	f003 fca3 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39998:	4811      	ldr	r0, [pc, #68]	; (399e0 <k_delayed_work_cancel+0x80>)
   3999a:	f7ff feeb 	bl	39774 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   3999e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   399a0:	b1db      	cbz	r3, 399da <k_delayed_work_cancel+0x7a>
		ret = work_cancel(work);
   399a2:	4620      	mov	r0, r4
   399a4:	f008 f854 	bl	41a50 <work_cancel>
   399a8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   399aa:	480d      	ldr	r0, [pc, #52]	; (399e0 <k_delayed_work_cancel+0x80>)
   399ac:	f7ff fed2 	bl	39754 <z_spin_unlock_valid>
   399b0:	b968      	cbnz	r0, 399ce <k_delayed_work_cancel+0x6e>
   399b2:	23a7      	movs	r3, #167	; 0xa7
   399b4:	4a0b      	ldr	r2, [pc, #44]	; (399e4 <k_delayed_work_cancel+0x84>)
   399b6:	490f      	ldr	r1, [pc, #60]	; (399f4 <k_delayed_work_cancel+0x94>)
   399b8:	480c      	ldr	r0, [pc, #48]	; (399ec <k_delayed_work_cancel+0x8c>)
   399ba:	f003 f9dc 	bl	3cd76 <printk>
   399be:	4908      	ldr	r1, [pc, #32]	; (399e0 <k_delayed_work_cancel+0x80>)
   399c0:	480d      	ldr	r0, [pc, #52]	; (399f8 <k_delayed_work_cancel+0x98>)
   399c2:	f003 f9d8 	bl	3cd76 <printk>
   399c6:	21a7      	movs	r1, #167	; 0xa7
   399c8:	4806      	ldr	r0, [pc, #24]	; (399e4 <k_delayed_work_cancel+0x84>)
   399ca:	f003 fc88 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   399ce:	f385 8811 	msr	BASEPRI, r5
   399d2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   399d6:	4620      	mov	r0, r4
   399d8:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   399da:	f06f 0415 	mvn.w	r4, #21
   399de:	e7e4      	b.n	399aa <k_delayed_work_cancel+0x4a>
   399e0:	2001a0c8 	.word	0x2001a0c8
   399e4:	00045538 	.word	0x00045538
   399e8:	0004555e 	.word	0x0004555e
   399ec:	00044dbf 	.word	0x00044dbf
   399f0:	00045573 	.word	0x00045573
   399f4:	0004558b 	.word	0x0004558b
   399f8:	000455a2 	.word	0x000455a2

000399fc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   399fc:	4a02      	ldr	r2, [pc, #8]	; (39a08 <boot_banner+0xc>)
   399fe:	4903      	ldr	r1, [pc, #12]	; (39a0c <boot_banner+0x10>)
   39a00:	4803      	ldr	r0, [pc, #12]	; (39a10 <boot_banner+0x14>)
   39a02:	f003 b9b8 	b.w	3cd76 <printk>
   39a06:	bf00      	nop
   39a08:	00045c29 	.word	0x00045c29
   39a0c:	0004c001 	.word	0x0004c001
   39a10:	0004c00e 	.word	0x0004c00e

00039a14 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   39a14:	b508      	push	{r3, lr}
   39a16:	4806      	ldr	r0, [pc, #24]	; (39a30 <z_data_copy+0x1c>)
   39a18:	4a06      	ldr	r2, [pc, #24]	; (39a34 <z_data_copy+0x20>)
   39a1a:	4907      	ldr	r1, [pc, #28]	; (39a38 <z_data_copy+0x24>)
   39a1c:	1a12      	subs	r2, r2, r0
   39a1e:	f008 f93e 	bl	41c9e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   39a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   39a26:	4a05      	ldr	r2, [pc, #20]	; (39a3c <z_data_copy+0x28>)
   39a28:	4905      	ldr	r1, [pc, #20]	; (39a40 <z_data_copy+0x2c>)
   39a2a:	4806      	ldr	r0, [pc, #24]	; (39a44 <z_data_copy+0x30>)
   39a2c:	f008 b937 	b.w	41c9e <memcpy>
   39a30:	20014500 	.word	0x20014500
   39a34:	20015c08 	.word	0x20015c08
   39a38:	0004c428 	.word	0x0004c428
   39a3c:	00000000 	.word	0x00000000
   39a40:	0004c410 	.word	0x0004c410
   39a44:	20014500 	.word	0x20014500

00039a48 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   39a48:	4b03      	ldr	r3, [pc, #12]	; (39a58 <elapsed+0x10>)
   39a4a:	681b      	ldr	r3, [r3, #0]
   39a4c:	b90b      	cbnz	r3, 39a52 <elapsed+0xa>
   39a4e:	f7ec bbf1 	b.w	26234 <z_clock_elapsed>
}
   39a52:	2000      	movs	r0, #0
   39a54:	4770      	bx	lr
   39a56:	bf00      	nop
   39a58:	2001a0cc 	.word	0x2001a0cc

00039a5c <next_timeout>:
	return list->head == list;
   39a5c:	4b13      	ldr	r3, [pc, #76]	; (39aac <next_timeout+0x50>)

static int32_t next_timeout(void)
{
   39a5e:	b510      	push	{r4, lr}
   39a60:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39a62:	429c      	cmp	r4, r3
   39a64:	bf08      	it	eq
   39a66:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   39a68:	f7ff ffee 	bl	39a48 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   39a6c:	b1cc      	cbz	r4, 39aa2 <next_timeout+0x46>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   39a6e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   39a72:	1a12      	subs	r2, r2, r0
   39a74:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   39a78:	2a01      	cmp	r2, #1
   39a7a:	f173 0100 	sbcs.w	r1, r3, #0
   39a7e:	db13      	blt.n	39aa8 <next_timeout+0x4c>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   39a80:	4610      	mov	r0, r2
   39a82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   39a86:	4619      	mov	r1, r3
   39a88:	2300      	movs	r3, #0
   39a8a:	4282      	cmp	r2, r0
   39a8c:	eb73 0401 	sbcs.w	r4, r3, r1
   39a90:	da00      	bge.n	39a94 <next_timeout+0x38>
   39a92:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   39a94:	4b06      	ldr	r3, [pc, #24]	; (39ab0 <next_timeout+0x54>)
   39a96:	695b      	ldr	r3, [r3, #20]
   39a98:	b113      	cbz	r3, 39aa0 <next_timeout+0x44>
   39a9a:	4298      	cmp	r0, r3
   39a9c:	bfa8      	it	ge
   39a9e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   39aa0:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   39aa2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   39aa6:	e7f5      	b.n	39a94 <next_timeout+0x38>
   39aa8:	2000      	movs	r0, #0
   39aaa:	e7f3      	b.n	39a94 <next_timeout+0x38>
   39aac:	20015634 	.word	0x20015634
   39ab0:	2001a07c 	.word	0x2001a07c

00039ab4 <timeout_rem>:
/* must be locked */
static k_ticks_t timeout_rem(const struct _timeout *timeout)
{
	k_ticks_t ticks = 0;

	if (z_is_inactive_timeout(timeout)) {
   39ab4:	6803      	ldr	r3, [r0, #0]
{
   39ab6:	b570      	push	{r4, r5, r6, lr}
	if (z_is_inactive_timeout(timeout)) {
   39ab8:	b1eb      	cbz	r3, 39af6 <timeout_rem+0x42>
	return list->head == list;
   39aba:	4a10      	ldr	r2, [pc, #64]	; (39afc <timeout_rem+0x48>)
   39abc:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39abe:	4293      	cmp	r3, r2
   39ac0:	d016      	beq.n	39af0 <timeout_rem+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39ac2:	2400      	movs	r4, #0
   39ac4:	2500      	movs	r5, #0
   39ac6:	6851      	ldr	r1, [r2, #4]
		return 0;
	}

	for (struct _timeout *t = first(); t != NULL; t = next(t)) {
   39ac8:	b93b      	cbnz	r3, 39ada <timeout_rem+0x26>
		if (timeout == t) {
			break;
		}
	}

	return ticks - elapsed();
   39aca:	f7ff ffbd 	bl	39a48 <elapsed>
   39ace:	1a24      	subs	r4, r4, r0
   39ad0:	eb65 75e0 	sbc.w	r5, r5, r0, asr #31
}
   39ad4:	4620      	mov	r0, r4
   39ad6:	4629      	mov	r1, r5
   39ad8:	bd70      	pop	{r4, r5, r6, pc}
		ticks += t->dticks;
   39ada:	e9d3 2604 	ldrd	r2, r6, [r3, #16]
   39ade:	18a4      	adds	r4, r4, r2
   39ae0:	eb46 0505 	adc.w	r5, r6, r5
		if (timeout == t) {
   39ae4:	4283      	cmp	r3, r0
   39ae6:	d0f0      	beq.n	39aca <timeout_rem+0x16>
	return (node == list->tail) ? NULL : node->next;
   39ae8:	428b      	cmp	r3, r1
   39aea:	d0ee      	beq.n	39aca <timeout_rem+0x16>
   39aec:	681b      	ldr	r3, [r3, #0]
   39aee:	e7eb      	b.n	39ac8 <timeout_rem+0x14>
   39af0:	2400      	movs	r4, #0
   39af2:	2500      	movs	r5, #0
   39af4:	e7e9      	b.n	39aca <timeout_rem+0x16>
		return 0;
   39af6:	2400      	movs	r4, #0
   39af8:	2500      	movs	r5, #0
   39afa:	e7eb      	b.n	39ad4 <timeout_rem+0x20>
   39afc:	20015634 	.word	0x20015634

00039b00 <remove_timeout>:
{
   39b00:	b530      	push	{r4, r5, lr}
   39b02:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39b04:	b168      	cbz	r0, 39b22 <remove_timeout+0x22>
   39b06:	4a0a      	ldr	r2, [pc, #40]	; (39b30 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   39b08:	6852      	ldr	r2, [r2, #4]
   39b0a:	4290      	cmp	r0, r2
   39b0c:	d009      	beq.n	39b22 <remove_timeout+0x22>
	if (next(t) != NULL) {
   39b0e:	b143      	cbz	r3, 39b22 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   39b10:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   39b14:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   39b18:	1912      	adds	r2, r2, r4
   39b1a:	eb45 0101 	adc.w	r1, r5, r1
   39b1e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   39b22:	6842      	ldr	r2, [r0, #4]
   39b24:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   39b26:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   39b28:	2300      	movs	r3, #0
	node->prev = NULL;
   39b2a:	e9c0 3300 	strd	r3, r3, [r0]
}
   39b2e:	bd30      	pop	{r4, r5, pc}
   39b30:	20015634 	.word	0x20015634

00039b34 <z_add_timeout>:
{
   39b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39b38:	9101      	str	r1, [sp, #4]
   39b3a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   39b3c:	1c4b      	adds	r3, r1, #1
   39b3e:	bf08      	it	eq
   39b40:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   39b44:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   39b46:	f000 80a8 	beq.w	39c9a <z_add_timeout+0x166>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   39b4a:	f06f 0301 	mvn.w	r3, #1
   39b4e:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
   39b52:	1c54      	adds	r4, r2, #1
   39b54:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   39b58:	ebb3 0804 	subs.w	r8, r3, r4
   39b5c:	eb6b 0905 	sbc.w	r9, fp, r5
   39b60:	f1b8 0f00 	cmp.w	r8, #0
   39b64:	f179 0300 	sbcs.w	r3, r9, #0
   39b68:	db0f      	blt.n	39b8a <z_add_timeout+0x56>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   39b6a:	f7ff ff6d 	bl	39a48 <elapsed>
   39b6e:	f06f 0301 	mvn.w	r3, #1
   39b72:	4a50      	ldr	r2, [pc, #320]	; (39cb4 <z_add_timeout+0x180>)
   39b74:	e9d2 1c00 	ldrd	r1, ip, [r2]
   39b78:	1a5b      	subs	r3, r3, r1
   39b7a:	eb6b 020c 	sbc.w	r2, fp, ip
   39b7e:	1b1e      	subs	r6, r3, r4
   39b80:	eb62 0705 	sbc.w	r7, r2, r5
   39b84:	1a34      	subs	r4, r6, r0
   39b86:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   39b8a:	f8da 3000 	ldr.w	r3, [sl]
   39b8e:	b163      	cbz	r3, 39baa <z_add_timeout+0x76>
   39b90:	4949      	ldr	r1, [pc, #292]	; (39cb8 <z_add_timeout+0x184>)
   39b92:	2368      	movs	r3, #104	; 0x68
   39b94:	4a49      	ldr	r2, [pc, #292]	; (39cbc <z_add_timeout+0x188>)
   39b96:	484a      	ldr	r0, [pc, #296]	; (39cc0 <z_add_timeout+0x18c>)
   39b98:	f003 f8ed 	bl	3cd76 <printk>
   39b9c:	4849      	ldr	r0, [pc, #292]	; (39cc4 <z_add_timeout+0x190>)
   39b9e:	f003 f8ea 	bl	3cd76 <printk>
   39ba2:	2168      	movs	r1, #104	; 0x68
   39ba4:	4845      	ldr	r0, [pc, #276]	; (39cbc <z_add_timeout+0x188>)
   39ba6:	f003 fb9a 	bl	3d2de <assert_post_action>
	to->fn = fn;
   39baa:	9b01      	ldr	r3, [sp, #4]
	ticks = MAX(1, ticks);
   39bac:	2c01      	cmp	r4, #1
	to->fn = fn;
   39bae:	f8ca 3008 	str.w	r3, [sl, #8]
	ticks = MAX(1, ticks);
   39bb2:	f175 0300 	sbcs.w	r3, r5, #0
   39bb6:	bfbc      	itt	lt
   39bb8:	2401      	movlt	r4, #1
   39bba:	2500      	movlt	r5, #0
	__asm__ volatile(
   39bbc:	f04f 0320 	mov.w	r3, #32
   39bc0:	f3ef 8611 	mrs	r6, BASEPRI
   39bc4:	f383 8811 	msr	BASEPRI, r3
   39bc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39bcc:	483e      	ldr	r0, [pc, #248]	; (39cc8 <z_add_timeout+0x194>)
   39bce:	f7ff fdb3 	bl	39738 <z_spin_lock_valid>
   39bd2:	b968      	cbnz	r0, 39bf0 <z_add_timeout+0xbc>
   39bd4:	237c      	movs	r3, #124	; 0x7c
   39bd6:	4a3d      	ldr	r2, [pc, #244]	; (39ccc <z_add_timeout+0x198>)
   39bd8:	493d      	ldr	r1, [pc, #244]	; (39cd0 <z_add_timeout+0x19c>)
   39bda:	4839      	ldr	r0, [pc, #228]	; (39cc0 <z_add_timeout+0x18c>)
   39bdc:	f003 f8cb 	bl	3cd76 <printk>
   39be0:	4939      	ldr	r1, [pc, #228]	; (39cc8 <z_add_timeout+0x194>)
   39be2:	483c      	ldr	r0, [pc, #240]	; (39cd4 <z_add_timeout+0x1a0>)
   39be4:	f003 f8c7 	bl	3cd76 <printk>
   39be8:	217c      	movs	r1, #124	; 0x7c
   39bea:	4838      	ldr	r0, [pc, #224]	; (39ccc <z_add_timeout+0x198>)
   39bec:	f003 fb77 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39bf0:	4835      	ldr	r0, [pc, #212]	; (39cc8 <z_add_timeout+0x194>)
   39bf2:	f7ff fdbf 	bl	39774 <z_spin_lock_set_owner>
		to->dticks = ticks + elapsed();
   39bf6:	f7ff ff27 	bl	39a48 <elapsed>
	return list->head == list;
   39bfa:	4b37      	ldr	r3, [pc, #220]	; (39cd8 <z_add_timeout+0x1a4>)
   39bfc:	1824      	adds	r4, r4, r0
   39bfe:	681a      	ldr	r2, [r3, #0]
   39c00:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39c04:	429a      	cmp	r2, r3
   39c06:	e9ca 4504 	strd	r4, r5, [sl, #16]
   39c0a:	d001      	beq.n	39c10 <z_add_timeout+0xdc>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   39c0c:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   39c0e:	b952      	cbnz	r2, 39c26 <z_add_timeout+0xf2>
	node->prev = list->tail;
   39c10:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   39c12:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   39c16:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   39c1a:	685a      	ldr	r2, [r3, #4]
   39c1c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   39c20:	f8c3 a004 	str.w	sl, [r3, #4]
}
   39c24:	e014      	b.n	39c50 <z_add_timeout+0x11c>
			if (t->dticks > to->dticks) {
   39c26:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   39c2a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   39c2e:	4544      	cmp	r4, r8
   39c30:	eb75 0109 	sbcs.w	r1, r5, r9
   39c34:	da34      	bge.n	39ca0 <z_add_timeout+0x16c>
				t->dticks -= to->dticks;
   39c36:	ebb8 0004 	subs.w	r0, r8, r4
   39c3a:	eb69 0105 	sbc.w	r1, r9, r5
   39c3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   39c42:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   39c44:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   39c48:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   39c4c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   39c50:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39c52:	429a      	cmp	r2, r3
   39c54:	d00b      	beq.n	39c6e <z_add_timeout+0x13a>
		if (to == first()) {
   39c56:	4592      	cmp	sl, r2
   39c58:	d109      	bne.n	39c6e <z_add_timeout+0x13a>
			int32_t next_time = next_timeout();
   39c5a:	f7ff feff 	bl	39a5c <next_timeout>
			if (next_time == 0 ||
   39c5e:	b118      	cbz	r0, 39c68 <z_add_timeout+0x134>
			    _current_cpu->slice_ticks != next_time) {
   39c60:	4b1e      	ldr	r3, [pc, #120]	; (39cdc <z_add_timeout+0x1a8>)
			if (next_time == 0 ||
   39c62:	695b      	ldr	r3, [r3, #20]
   39c64:	4283      	cmp	r3, r0
   39c66:	d002      	beq.n	39c6e <z_add_timeout+0x13a>
				z_clock_set_timeout(next_time, false);
   39c68:	2100      	movs	r1, #0
   39c6a:	f7ec fab1 	bl	261d0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39c6e:	4816      	ldr	r0, [pc, #88]	; (39cc8 <z_add_timeout+0x194>)
   39c70:	f7ff fd70 	bl	39754 <z_spin_unlock_valid>
   39c74:	b968      	cbnz	r0, 39c92 <z_add_timeout+0x15e>
   39c76:	23a7      	movs	r3, #167	; 0xa7
   39c78:	4a14      	ldr	r2, [pc, #80]	; (39ccc <z_add_timeout+0x198>)
   39c7a:	4919      	ldr	r1, [pc, #100]	; (39ce0 <z_add_timeout+0x1ac>)
   39c7c:	4810      	ldr	r0, [pc, #64]	; (39cc0 <z_add_timeout+0x18c>)
   39c7e:	f003 f87a 	bl	3cd76 <printk>
   39c82:	4911      	ldr	r1, [pc, #68]	; (39cc8 <z_add_timeout+0x194>)
   39c84:	4817      	ldr	r0, [pc, #92]	; (39ce4 <z_add_timeout+0x1b0>)
   39c86:	f003 f876 	bl	3cd76 <printk>
   39c8a:	21a7      	movs	r1, #167	; 0xa7
   39c8c:	480f      	ldr	r0, [pc, #60]	; (39ccc <z_add_timeout+0x198>)
   39c8e:	f003 fb26 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   39c92:	f386 8811 	msr	BASEPRI, r6
   39c96:	f3bf 8f6f 	isb	sy
}
   39c9a:	b003      	add	sp, #12
   39c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   39ca0:	ebb4 0008 	subs.w	r0, r4, r8
   39ca4:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   39ca8:	42ba      	cmp	r2, r7
   39caa:	e9ca 0104 	strd	r0, r1, [sl, #16]
   39cae:	d0af      	beq.n	39c10 <z_add_timeout+0xdc>
   39cb0:	6812      	ldr	r2, [r2, #0]
   39cb2:	e7ac      	b.n	39c0e <z_add_timeout+0xda>
   39cb4:	20018be0 	.word	0x20018be0
   39cb8:	0004c059 	.word	0x0004c059
   39cbc:	0004c035 	.word	0x0004c035
   39cc0:	00044dbf 	.word	0x00044dbf
   39cc4:	00045c27 	.word	0x00045c27
   39cc8:	2001a0d0 	.word	0x2001a0d0
   39ccc:	00045538 	.word	0x00045538
   39cd0:	0004555e 	.word	0x0004555e
   39cd4:	00045573 	.word	0x00045573
   39cd8:	20015634 	.word	0x20015634
   39cdc:	2001a07c 	.word	0x2001a07c
   39ce0:	0004558b 	.word	0x0004558b
   39ce4:	000455a2 	.word	0x000455a2

00039ce8 <z_abort_timeout>:
{
   39ce8:	b538      	push	{r3, r4, r5, lr}
   39cea:	4604      	mov	r4, r0
	__asm__ volatile(
   39cec:	f04f 0320 	mov.w	r3, #32
   39cf0:	f3ef 8511 	mrs	r5, BASEPRI
   39cf4:	f383 8811 	msr	BASEPRI, r3
   39cf8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39cfc:	481a      	ldr	r0, [pc, #104]	; (39d68 <z_abort_timeout+0x80>)
   39cfe:	f7ff fd1b 	bl	39738 <z_spin_lock_valid>
   39d02:	b968      	cbnz	r0, 39d20 <z_abort_timeout+0x38>
   39d04:	237c      	movs	r3, #124	; 0x7c
   39d06:	4a19      	ldr	r2, [pc, #100]	; (39d6c <z_abort_timeout+0x84>)
   39d08:	4919      	ldr	r1, [pc, #100]	; (39d70 <z_abort_timeout+0x88>)
   39d0a:	481a      	ldr	r0, [pc, #104]	; (39d74 <z_abort_timeout+0x8c>)
   39d0c:	f003 f833 	bl	3cd76 <printk>
   39d10:	4915      	ldr	r1, [pc, #84]	; (39d68 <z_abort_timeout+0x80>)
   39d12:	4819      	ldr	r0, [pc, #100]	; (39d78 <z_abort_timeout+0x90>)
   39d14:	f003 f82f 	bl	3cd76 <printk>
   39d18:	217c      	movs	r1, #124	; 0x7c
   39d1a:	4814      	ldr	r0, [pc, #80]	; (39d6c <z_abort_timeout+0x84>)
   39d1c:	f003 fadf 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39d20:	4811      	ldr	r0, [pc, #68]	; (39d68 <z_abort_timeout+0x80>)
   39d22:	f7ff fd27 	bl	39774 <z_spin_lock_set_owner>
		if (sys_dnode_is_linked(&to->node)) {
   39d26:	6823      	ldr	r3, [r4, #0]
   39d28:	b1db      	cbz	r3, 39d62 <z_abort_timeout+0x7a>
			remove_timeout(to);
   39d2a:	4620      	mov	r0, r4
   39d2c:	f7ff fee8 	bl	39b00 <remove_timeout>
			ret = 0;
   39d30:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39d32:	480d      	ldr	r0, [pc, #52]	; (39d68 <z_abort_timeout+0x80>)
   39d34:	f7ff fd0e 	bl	39754 <z_spin_unlock_valid>
   39d38:	b968      	cbnz	r0, 39d56 <z_abort_timeout+0x6e>
   39d3a:	23a7      	movs	r3, #167	; 0xa7
   39d3c:	4a0b      	ldr	r2, [pc, #44]	; (39d6c <z_abort_timeout+0x84>)
   39d3e:	490f      	ldr	r1, [pc, #60]	; (39d7c <z_abort_timeout+0x94>)
   39d40:	480c      	ldr	r0, [pc, #48]	; (39d74 <z_abort_timeout+0x8c>)
   39d42:	f003 f818 	bl	3cd76 <printk>
   39d46:	4908      	ldr	r1, [pc, #32]	; (39d68 <z_abort_timeout+0x80>)
   39d48:	480d      	ldr	r0, [pc, #52]	; (39d80 <z_abort_timeout+0x98>)
   39d4a:	f003 f814 	bl	3cd76 <printk>
   39d4e:	21a7      	movs	r1, #167	; 0xa7
   39d50:	4806      	ldr	r0, [pc, #24]	; (39d6c <z_abort_timeout+0x84>)
   39d52:	f003 fac4 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   39d56:	f385 8811 	msr	BASEPRI, r5
   39d5a:	f3bf 8f6f 	isb	sy
}
   39d5e:	4620      	mov	r0, r4
   39d60:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   39d62:	f06f 0415 	mvn.w	r4, #21
   39d66:	e7e4      	b.n	39d32 <z_abort_timeout+0x4a>
   39d68:	2001a0d0 	.word	0x2001a0d0
   39d6c:	00045538 	.word	0x00045538
   39d70:	0004555e 	.word	0x0004555e
   39d74:	00044dbf 	.word	0x00044dbf
   39d78:	00045573 	.word	0x00045573
   39d7c:	0004558b 	.word	0x0004558b
   39d80:	000455a2 	.word	0x000455a2

00039d84 <z_timeout_remaining>:

k_ticks_t z_timeout_remaining(const struct _timeout *timeout)
{
   39d84:	b570      	push	{r4, r5, r6, lr}
   39d86:	4604      	mov	r4, r0
	__asm__ volatile(
   39d88:	f04f 0320 	mov.w	r3, #32
   39d8c:	f3ef 8611 	mrs	r6, BASEPRI
   39d90:	f383 8811 	msr	BASEPRI, r3
   39d94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39d98:	4819      	ldr	r0, [pc, #100]	; (39e00 <z_timeout_remaining+0x7c>)
   39d9a:	f7ff fccd 	bl	39738 <z_spin_lock_valid>
   39d9e:	b968      	cbnz	r0, 39dbc <z_timeout_remaining+0x38>
   39da0:	237c      	movs	r3, #124	; 0x7c
   39da2:	4a18      	ldr	r2, [pc, #96]	; (39e04 <z_timeout_remaining+0x80>)
   39da4:	4918      	ldr	r1, [pc, #96]	; (39e08 <z_timeout_remaining+0x84>)
   39da6:	4819      	ldr	r0, [pc, #100]	; (39e0c <z_timeout_remaining+0x88>)
   39da8:	f002 ffe5 	bl	3cd76 <printk>
   39dac:	4914      	ldr	r1, [pc, #80]	; (39e00 <z_timeout_remaining+0x7c>)
   39dae:	4818      	ldr	r0, [pc, #96]	; (39e10 <z_timeout_remaining+0x8c>)
   39db0:	f002 ffe1 	bl	3cd76 <printk>
   39db4:	217c      	movs	r1, #124	; 0x7c
   39db6:	4813      	ldr	r0, [pc, #76]	; (39e04 <z_timeout_remaining+0x80>)
   39db8:	f003 fa91 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39dbc:	4810      	ldr	r0, [pc, #64]	; (39e00 <z_timeout_remaining+0x7c>)
   39dbe:	f7ff fcd9 	bl	39774 <z_spin_lock_set_owner>
	k_ticks_t ticks = 0;

	LOCKED(&timeout_lock) {
		ticks = timeout_rem(timeout);
   39dc2:	4620      	mov	r0, r4
   39dc4:	f7ff fe76 	bl	39ab4 <timeout_rem>
   39dc8:	4605      	mov	r5, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39dca:	480d      	ldr	r0, [pc, #52]	; (39e00 <z_timeout_remaining+0x7c>)
   39dcc:	460c      	mov	r4, r1
   39dce:	f7ff fcc1 	bl	39754 <z_spin_unlock_valid>
   39dd2:	b968      	cbnz	r0, 39df0 <z_timeout_remaining+0x6c>
   39dd4:	23a7      	movs	r3, #167	; 0xa7
   39dd6:	4a0b      	ldr	r2, [pc, #44]	; (39e04 <z_timeout_remaining+0x80>)
   39dd8:	490e      	ldr	r1, [pc, #56]	; (39e14 <z_timeout_remaining+0x90>)
   39dda:	480c      	ldr	r0, [pc, #48]	; (39e0c <z_timeout_remaining+0x88>)
   39ddc:	f002 ffcb 	bl	3cd76 <printk>
   39de0:	4907      	ldr	r1, [pc, #28]	; (39e00 <z_timeout_remaining+0x7c>)
   39de2:	480d      	ldr	r0, [pc, #52]	; (39e18 <z_timeout_remaining+0x94>)
   39de4:	f002 ffc7 	bl	3cd76 <printk>
   39de8:	21a7      	movs	r1, #167	; 0xa7
   39dea:	4806      	ldr	r0, [pc, #24]	; (39e04 <z_timeout_remaining+0x80>)
   39dec:	f003 fa77 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   39df0:	f386 8811 	msr	BASEPRI, r6
   39df4:	f3bf 8f6f 	isb	sy
	}

	return ticks;
}
   39df8:	4628      	mov	r0, r5
   39dfa:	4621      	mov	r1, r4
   39dfc:	bd70      	pop	{r4, r5, r6, pc}
   39dfe:	bf00      	nop
   39e00:	2001a0d0 	.word	0x2001a0d0
   39e04:	00045538 	.word	0x00045538
   39e08:	0004555e 	.word	0x0004555e
   39e0c:	00044dbf 	.word	0x00044dbf
   39e10:	00045573 	.word	0x00045573
   39e14:	0004558b 	.word	0x0004558b
   39e18:	000455a2 	.word	0x000455a2

00039e1c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   39e1c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   39e1e:	f04f 0320 	mov.w	r3, #32
   39e22:	f3ef 8511 	mrs	r5, BASEPRI
   39e26:	f383 8811 	msr	BASEPRI, r3
   39e2a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39e2e:	4818      	ldr	r0, [pc, #96]	; (39e90 <z_get_next_timeout_expiry+0x74>)
   39e30:	f7ff fc82 	bl	39738 <z_spin_lock_valid>
   39e34:	b968      	cbnz	r0, 39e52 <z_get_next_timeout_expiry+0x36>
   39e36:	237c      	movs	r3, #124	; 0x7c
   39e38:	4a16      	ldr	r2, [pc, #88]	; (39e94 <z_get_next_timeout_expiry+0x78>)
   39e3a:	4917      	ldr	r1, [pc, #92]	; (39e98 <z_get_next_timeout_expiry+0x7c>)
   39e3c:	4817      	ldr	r0, [pc, #92]	; (39e9c <z_get_next_timeout_expiry+0x80>)
   39e3e:	f002 ff9a 	bl	3cd76 <printk>
   39e42:	4913      	ldr	r1, [pc, #76]	; (39e90 <z_get_next_timeout_expiry+0x74>)
   39e44:	4816      	ldr	r0, [pc, #88]	; (39ea0 <z_get_next_timeout_expiry+0x84>)
   39e46:	f002 ff96 	bl	3cd76 <printk>
   39e4a:	217c      	movs	r1, #124	; 0x7c
   39e4c:	4811      	ldr	r0, [pc, #68]	; (39e94 <z_get_next_timeout_expiry+0x78>)
   39e4e:	f003 fa46 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39e52:	480f      	ldr	r0, [pc, #60]	; (39e90 <z_get_next_timeout_expiry+0x74>)
   39e54:	f7ff fc8e 	bl	39774 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   39e58:	f7ff fe00 	bl	39a5c <next_timeout>
   39e5c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39e5e:	480c      	ldr	r0, [pc, #48]	; (39e90 <z_get_next_timeout_expiry+0x74>)
   39e60:	f7ff fc78 	bl	39754 <z_spin_unlock_valid>
   39e64:	b968      	cbnz	r0, 39e82 <z_get_next_timeout_expiry+0x66>
   39e66:	23a7      	movs	r3, #167	; 0xa7
   39e68:	4a0a      	ldr	r2, [pc, #40]	; (39e94 <z_get_next_timeout_expiry+0x78>)
   39e6a:	490e      	ldr	r1, [pc, #56]	; (39ea4 <z_get_next_timeout_expiry+0x88>)
   39e6c:	480b      	ldr	r0, [pc, #44]	; (39e9c <z_get_next_timeout_expiry+0x80>)
   39e6e:	f002 ff82 	bl	3cd76 <printk>
   39e72:	4907      	ldr	r1, [pc, #28]	; (39e90 <z_get_next_timeout_expiry+0x74>)
   39e74:	480c      	ldr	r0, [pc, #48]	; (39ea8 <z_get_next_timeout_expiry+0x8c>)
   39e76:	f002 ff7e 	bl	3cd76 <printk>
   39e7a:	21a7      	movs	r1, #167	; 0xa7
   39e7c:	4805      	ldr	r0, [pc, #20]	; (39e94 <z_get_next_timeout_expiry+0x78>)
   39e7e:	f003 fa2e 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   39e82:	f385 8811 	msr	BASEPRI, r5
   39e86:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   39e8a:	4620      	mov	r0, r4
   39e8c:	bd38      	pop	{r3, r4, r5, pc}
   39e8e:	bf00      	nop
   39e90:	2001a0d0 	.word	0x2001a0d0
   39e94:	00045538 	.word	0x00045538
   39e98:	0004555e 	.word	0x0004555e
   39e9c:	00044dbf 	.word	0x00044dbf
   39ea0:	00045573 	.word	0x00045573
   39ea4:	0004558b 	.word	0x0004558b
   39ea8:	000455a2 	.word	0x000455a2

00039eac <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   39eac:	b570      	push	{r4, r5, r6, lr}
   39eae:	4604      	mov	r4, r0
   39eb0:	460d      	mov	r5, r1
	__asm__ volatile(
   39eb2:	f04f 0320 	mov.w	r3, #32
   39eb6:	f3ef 8611 	mrs	r6, BASEPRI
   39eba:	f383 8811 	msr	BASEPRI, r3
   39ebe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39ec2:	481b      	ldr	r0, [pc, #108]	; (39f30 <z_set_timeout_expiry+0x84>)
   39ec4:	f7ff fc38 	bl	39738 <z_spin_lock_valid>
   39ec8:	b968      	cbnz	r0, 39ee6 <z_set_timeout_expiry+0x3a>
   39eca:	237c      	movs	r3, #124	; 0x7c
   39ecc:	4a19      	ldr	r2, [pc, #100]	; (39f34 <z_set_timeout_expiry+0x88>)
   39ece:	491a      	ldr	r1, [pc, #104]	; (39f38 <z_set_timeout_expiry+0x8c>)
   39ed0:	481a      	ldr	r0, [pc, #104]	; (39f3c <z_set_timeout_expiry+0x90>)
   39ed2:	f002 ff50 	bl	3cd76 <printk>
   39ed6:	4916      	ldr	r1, [pc, #88]	; (39f30 <z_set_timeout_expiry+0x84>)
   39ed8:	4819      	ldr	r0, [pc, #100]	; (39f40 <z_set_timeout_expiry+0x94>)
   39eda:	f002 ff4c 	bl	3cd76 <printk>
   39ede:	217c      	movs	r1, #124	; 0x7c
   39ee0:	4814      	ldr	r0, [pc, #80]	; (39f34 <z_set_timeout_expiry+0x88>)
   39ee2:	f003 f9fc 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39ee6:	4812      	ldr	r0, [pc, #72]	; (39f30 <z_set_timeout_expiry+0x84>)
   39ee8:	f7ff fc44 	bl	39774 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   39eec:	f7ff fdb6 	bl	39a5c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   39ef0:	2801      	cmp	r0, #1
   39ef2:	dd05      	ble.n	39f00 <z_set_timeout_expiry+0x54>
   39ef4:	42a0      	cmp	r0, r4
   39ef6:	dd03      	ble.n	39f00 <z_set_timeout_expiry+0x54>
			z_clock_set_timeout(ticks, is_idle);
   39ef8:	4629      	mov	r1, r5
   39efa:	4620      	mov	r0, r4
   39efc:	f7ec f968 	bl	261d0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39f00:	480b      	ldr	r0, [pc, #44]	; (39f30 <z_set_timeout_expiry+0x84>)
   39f02:	f7ff fc27 	bl	39754 <z_spin_unlock_valid>
   39f06:	b968      	cbnz	r0, 39f24 <z_set_timeout_expiry+0x78>
   39f08:	23a7      	movs	r3, #167	; 0xa7
   39f0a:	4a0a      	ldr	r2, [pc, #40]	; (39f34 <z_set_timeout_expiry+0x88>)
   39f0c:	490d      	ldr	r1, [pc, #52]	; (39f44 <z_set_timeout_expiry+0x98>)
   39f0e:	480b      	ldr	r0, [pc, #44]	; (39f3c <z_set_timeout_expiry+0x90>)
   39f10:	f002 ff31 	bl	3cd76 <printk>
   39f14:	4906      	ldr	r1, [pc, #24]	; (39f30 <z_set_timeout_expiry+0x84>)
   39f16:	480c      	ldr	r0, [pc, #48]	; (39f48 <z_set_timeout_expiry+0x9c>)
   39f18:	f002 ff2d 	bl	3cd76 <printk>
   39f1c:	21a7      	movs	r1, #167	; 0xa7
   39f1e:	4805      	ldr	r0, [pc, #20]	; (39f34 <z_set_timeout_expiry+0x88>)
   39f20:	f003 f9dd 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   39f24:	f386 8811 	msr	BASEPRI, r6
   39f28:	f3bf 8f6f 	isb	sy
		}
	}
}
   39f2c:	bd70      	pop	{r4, r5, r6, pc}
   39f2e:	bf00      	nop
   39f30:	2001a0d0 	.word	0x2001a0d0
   39f34:	00045538 	.word	0x00045538
   39f38:	0004555e 	.word	0x0004555e
   39f3c:	00044dbf 	.word	0x00044dbf
   39f40:	00045573 	.word	0x00045573
   39f44:	0004558b 	.word	0x0004558b
   39f48:	000455a2 	.word	0x000455a2

00039f4c <z_clock_announce>:

void z_clock_announce(int32_t ticks)
{
   39f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f50:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   39f52:	f7fe fbf9 	bl	38748 <z_time_slice>
	__asm__ volatile(
   39f56:	f04f 0320 	mov.w	r3, #32
   39f5a:	f3ef 8711 	mrs	r7, BASEPRI
   39f5e:	f383 8811 	msr	BASEPRI, r3
   39f62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   39f66:	4854      	ldr	r0, [pc, #336]	; (3a0b8 <z_clock_announce+0x16c>)
   39f68:	f7ff fbe6 	bl	39738 <z_spin_lock_valid>
   39f6c:	b968      	cbnz	r0, 39f8a <z_clock_announce+0x3e>
   39f6e:	237c      	movs	r3, #124	; 0x7c
   39f70:	4a52      	ldr	r2, [pc, #328]	; (3a0bc <z_clock_announce+0x170>)
   39f72:	4953      	ldr	r1, [pc, #332]	; (3a0c0 <z_clock_announce+0x174>)
   39f74:	4853      	ldr	r0, [pc, #332]	; (3a0c4 <z_clock_announce+0x178>)
   39f76:	f002 fefe 	bl	3cd76 <printk>
   39f7a:	494f      	ldr	r1, [pc, #316]	; (3a0b8 <z_clock_announce+0x16c>)
   39f7c:	4852      	ldr	r0, [pc, #328]	; (3a0c8 <z_clock_announce+0x17c>)
   39f7e:	f002 fefa 	bl	3cd76 <printk>
   39f82:	217c      	movs	r1, #124	; 0x7c
   39f84:	484d      	ldr	r0, [pc, #308]	; (3a0bc <z_clock_announce+0x170>)
   39f86:	f003 f9aa 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   39f8a:	4e50      	ldr	r6, [pc, #320]	; (3a0cc <z_clock_announce+0x180>)
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   39f8c:	4d50      	ldr	r5, [pc, #320]	; (3a0d0 <z_clock_announce+0x184>)
   39f8e:	46b3      	mov	fp, r6
   39f90:	4849      	ldr	r0, [pc, #292]	; (3a0b8 <z_clock_announce+0x16c>)
	return list->head == list;
   39f92:	f8df a148 	ldr.w	sl, [pc, #328]	; 3a0dc <z_clock_announce+0x190>
   39f96:	f7ff fbed 	bl	39774 <z_spin_lock_set_owner>
   39f9a:	602c      	str	r4, [r5, #0]
   39f9c:	f8d5 c000 	ldr.w	ip, [r5]
   39fa0:	e9d6 2300 	ldrd	r2, r3, [r6]
   39fa4:	e9cd 2300 	strd	r2, r3, [sp]
   39fa8:	4662      	mov	r2, ip
   39faa:	f8da 4000 	ldr.w	r4, [sl]
   39fae:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   39fb0:	4554      	cmp	r4, sl
   39fb2:	46e0      	mov	r8, ip
   39fb4:	4699      	mov	r9, r3
   39fb6:	d00c      	beq.n	39fd2 <z_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   39fb8:	b15c      	cbz	r4, 39fd2 <z_clock_announce+0x86>
   39fba:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   39fbe:	458c      	cmp	ip, r1
   39fc0:	eb79 0302 	sbcs.w	r3, r9, r2
   39fc4:	da2e      	bge.n	3a024 <z_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   39fc6:	ebb1 000c 	subs.w	r0, r1, ip
   39fca:	eb62 0109 	sbc.w	r1, r2, r9
   39fce:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   39fd2:	464b      	mov	r3, r9
	announce_remaining = 0;
   39fd4:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   39fd6:	9a00      	ldr	r2, [sp, #0]
   39fd8:	9901      	ldr	r1, [sp, #4]
   39fda:	eb18 0202 	adds.w	r2, r8, r2
   39fde:	eb43 0101 	adc.w	r1, r3, r1
   39fe2:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   39fe6:	602c      	str	r4, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   39fe8:	f7ff fd38 	bl	39a5c <next_timeout>
   39fec:	4621      	mov	r1, r4
   39fee:	f7ec f8ef 	bl	261d0 <z_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   39ff2:	4831      	ldr	r0, [pc, #196]	; (3a0b8 <z_clock_announce+0x16c>)
   39ff4:	f7ff fbae 	bl	39754 <z_spin_unlock_valid>
   39ff8:	b968      	cbnz	r0, 3a016 <z_clock_announce+0xca>
   39ffa:	23a7      	movs	r3, #167	; 0xa7
   39ffc:	4a2f      	ldr	r2, [pc, #188]	; (3a0bc <z_clock_announce+0x170>)
   39ffe:	4935      	ldr	r1, [pc, #212]	; (3a0d4 <z_clock_announce+0x188>)
   3a000:	4830      	ldr	r0, [pc, #192]	; (3a0c4 <z_clock_announce+0x178>)
   3a002:	f002 feb8 	bl	3cd76 <printk>
   3a006:	492c      	ldr	r1, [pc, #176]	; (3a0b8 <z_clock_announce+0x16c>)
   3a008:	4833      	ldr	r0, [pc, #204]	; (3a0d8 <z_clock_announce+0x18c>)
   3a00a:	f002 feb4 	bl	3cd76 <printk>
   3a00e:	21a7      	movs	r1, #167	; 0xa7
   3a010:	482a      	ldr	r0, [pc, #168]	; (3a0bc <z_clock_announce+0x170>)
   3a012:	f003 f964 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3a016:	f387 8811 	msr	BASEPRI, r7
   3a01a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   3a01e:	b003      	add	sp, #12
   3a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		t->dticks = 0;
   3a024:	2200      	movs	r2, #0
		curr_tick += dt;
   3a026:	e9dd 8900 	ldrd	r8, r9, [sp]
		t->dticks = 0;
   3a02a:	2300      	movs	r3, #0
		curr_tick += dt;
   3a02c:	eb18 0801 	adds.w	r8, r8, r1
		announce_remaining -= dt;
   3a030:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   3a034:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   3a038:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   3a03a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   3a03e:	4620      	mov	r0, r4
		curr_tick += dt;
   3a040:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   3a044:	f7ff fd5c 	bl	39b00 <remove_timeout>
   3a048:	481b      	ldr	r0, [pc, #108]	; (3a0b8 <z_clock_announce+0x16c>)
   3a04a:	f7ff fb83 	bl	39754 <z_spin_unlock_valid>
   3a04e:	b968      	cbnz	r0, 3a06c <z_clock_announce+0x120>
   3a050:	23a7      	movs	r3, #167	; 0xa7
   3a052:	4a1a      	ldr	r2, [pc, #104]	; (3a0bc <z_clock_announce+0x170>)
   3a054:	491f      	ldr	r1, [pc, #124]	; (3a0d4 <z_clock_announce+0x188>)
   3a056:	481b      	ldr	r0, [pc, #108]	; (3a0c4 <z_clock_announce+0x178>)
   3a058:	f002 fe8d 	bl	3cd76 <printk>
   3a05c:	4916      	ldr	r1, [pc, #88]	; (3a0b8 <z_clock_announce+0x16c>)
   3a05e:	481e      	ldr	r0, [pc, #120]	; (3a0d8 <z_clock_announce+0x18c>)
   3a060:	f002 fe89 	bl	3cd76 <printk>
   3a064:	21a7      	movs	r1, #167	; 0xa7
   3a066:	4815      	ldr	r0, [pc, #84]	; (3a0bc <z_clock_announce+0x170>)
   3a068:	f003 f939 	bl	3d2de <assert_post_action>
   3a06c:	f387 8811 	msr	BASEPRI, r7
   3a070:	f3bf 8f6f 	isb	sy
		t->fn(t);
   3a074:	4620      	mov	r0, r4
   3a076:	68a3      	ldr	r3, [r4, #8]
   3a078:	4798      	blx	r3
	__asm__ volatile(
   3a07a:	f04f 0320 	mov.w	r3, #32
   3a07e:	f3ef 8711 	mrs	r7, BASEPRI
   3a082:	f383 8811 	msr	BASEPRI, r3
   3a086:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a08a:	480b      	ldr	r0, [pc, #44]	; (3a0b8 <z_clock_announce+0x16c>)
   3a08c:	f7ff fb54 	bl	39738 <z_spin_lock_valid>
   3a090:	b968      	cbnz	r0, 3a0ae <z_clock_announce+0x162>
   3a092:	237c      	movs	r3, #124	; 0x7c
   3a094:	4a09      	ldr	r2, [pc, #36]	; (3a0bc <z_clock_announce+0x170>)
   3a096:	490a      	ldr	r1, [pc, #40]	; (3a0c0 <z_clock_announce+0x174>)
   3a098:	480a      	ldr	r0, [pc, #40]	; (3a0c4 <z_clock_announce+0x178>)
   3a09a:	f002 fe6c 	bl	3cd76 <printk>
   3a09e:	4906      	ldr	r1, [pc, #24]	; (3a0b8 <z_clock_announce+0x16c>)
   3a0a0:	4809      	ldr	r0, [pc, #36]	; (3a0c8 <z_clock_announce+0x17c>)
   3a0a2:	f002 fe68 	bl	3cd76 <printk>
   3a0a6:	217c      	movs	r1, #124	; 0x7c
   3a0a8:	4804      	ldr	r0, [pc, #16]	; (3a0bc <z_clock_announce+0x170>)
   3a0aa:	f003 f918 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a0ae:	4802      	ldr	r0, [pc, #8]	; (3a0b8 <z_clock_announce+0x16c>)
   3a0b0:	f7ff fb60 	bl	39774 <z_spin_lock_set_owner>
	return k;
   3a0b4:	e772      	b.n	39f9c <z_clock_announce+0x50>
   3a0b6:	bf00      	nop
   3a0b8:	2001a0d0 	.word	0x2001a0d0
   3a0bc:	00045538 	.word	0x00045538
   3a0c0:	0004555e 	.word	0x0004555e
   3a0c4:	00044dbf 	.word	0x00044dbf
   3a0c8:	00045573 	.word	0x00045573
   3a0cc:	20018be0 	.word	0x20018be0
   3a0d0:	2001a0cc 	.word	0x2001a0cc
   3a0d4:	0004558b 	.word	0x0004558b
   3a0d8:	000455a2 	.word	0x000455a2
   3a0dc:	20015634 	.word	0x20015634

0003a0e0 <z_tick_get>:

int64_t z_tick_get(void)
{
   3a0e0:	b570      	push	{r4, r5, r6, lr}
   3a0e2:	f04f 0320 	mov.w	r3, #32
   3a0e6:	f3ef 8611 	mrs	r6, BASEPRI
   3a0ea:	f383 8811 	msr	BASEPRI, r3
   3a0ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a0f2:	481b      	ldr	r0, [pc, #108]	; (3a160 <z_tick_get+0x80>)
   3a0f4:	f7ff fb20 	bl	39738 <z_spin_lock_valid>
   3a0f8:	b968      	cbnz	r0, 3a116 <z_tick_get+0x36>
   3a0fa:	237c      	movs	r3, #124	; 0x7c
   3a0fc:	4a19      	ldr	r2, [pc, #100]	; (3a164 <z_tick_get+0x84>)
   3a0fe:	491a      	ldr	r1, [pc, #104]	; (3a168 <z_tick_get+0x88>)
   3a100:	481a      	ldr	r0, [pc, #104]	; (3a16c <z_tick_get+0x8c>)
   3a102:	f002 fe38 	bl	3cd76 <printk>
   3a106:	4916      	ldr	r1, [pc, #88]	; (3a160 <z_tick_get+0x80>)
   3a108:	4819      	ldr	r0, [pc, #100]	; (3a170 <z_tick_get+0x90>)
   3a10a:	f002 fe34 	bl	3cd76 <printk>
   3a10e:	217c      	movs	r1, #124	; 0x7c
   3a110:	4814      	ldr	r0, [pc, #80]	; (3a164 <z_tick_get+0x84>)
   3a112:	f003 f8e4 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a116:	4812      	ldr	r0, [pc, #72]	; (3a160 <z_tick_get+0x80>)
   3a118:	f7ff fb2c 	bl	39774 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   3a11c:	f7ec f88a 	bl	26234 <z_clock_elapsed>
   3a120:	4b14      	ldr	r3, [pc, #80]	; (3a174 <z_tick_get+0x94>)
   3a122:	e9d3 4500 	ldrd	r4, r5, [r3]
   3a126:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a128:	480d      	ldr	r0, [pc, #52]	; (3a160 <z_tick_get+0x80>)
   3a12a:	f145 0500 	adc.w	r5, r5, #0
   3a12e:	f7ff fb11 	bl	39754 <z_spin_unlock_valid>
   3a132:	b968      	cbnz	r0, 3a150 <z_tick_get+0x70>
   3a134:	23a7      	movs	r3, #167	; 0xa7
   3a136:	4a0b      	ldr	r2, [pc, #44]	; (3a164 <z_tick_get+0x84>)
   3a138:	490f      	ldr	r1, [pc, #60]	; (3a178 <z_tick_get+0x98>)
   3a13a:	480c      	ldr	r0, [pc, #48]	; (3a16c <z_tick_get+0x8c>)
   3a13c:	f002 fe1b 	bl	3cd76 <printk>
   3a140:	4907      	ldr	r1, [pc, #28]	; (3a160 <z_tick_get+0x80>)
   3a142:	480e      	ldr	r0, [pc, #56]	; (3a17c <z_tick_get+0x9c>)
   3a144:	f002 fe17 	bl	3cd76 <printk>
   3a148:	21a7      	movs	r1, #167	; 0xa7
   3a14a:	4806      	ldr	r0, [pc, #24]	; (3a164 <z_tick_get+0x84>)
   3a14c:	f003 f8c7 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3a150:	f386 8811 	msr	BASEPRI, r6
   3a154:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   3a158:	4620      	mov	r0, r4
   3a15a:	4629      	mov	r1, r5
   3a15c:	bd70      	pop	{r4, r5, r6, pc}
   3a15e:	bf00      	nop
   3a160:	2001a0d0 	.word	0x2001a0d0
   3a164:	00045538 	.word	0x00045538
   3a168:	0004555e 	.word	0x0004555e
   3a16c:	00044dbf 	.word	0x00044dbf
   3a170:	00045573 	.word	0x00045573
   3a174:	20018be0 	.word	0x20018be0
   3a178:	0004558b 	.word	0x0004558b
   3a17c:	000455a2 	.word	0x000455a2

0003a180 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   3a180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3a184:	2414      	movs	r4, #20
   3a186:	4680      	mov	r8, r0
   3a188:	4616      	mov	r6, r2
	while (num_events--) {
   3a18a:	fb04 0401 	mla	r4, r4, r1, r0
		__ASSERT(false, "invalid event type\n");
   3a18e:	4d48      	ldr	r5, [pc, #288]	; (3a2b0 <clear_event_registrations+0x130>)
   3a190:	f8df 9158 	ldr.w	r9, [pc, #344]	; 3a2ec <clear_event_registrations+0x16c>
   3a194:	4f47      	ldr	r7, [pc, #284]	; (3a2b4 <clear_event_registrations+0x134>)
	while (num_events--) {
   3a196:	4544      	cmp	r4, r8
   3a198:	d101      	bne.n	3a19e <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   3a19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   3a19e:	2300      	movs	r3, #0
   3a1a0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   3a1a4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   3a1a8:	f003 030f 	and.w	r3, r3, #15
   3a1ac:	2b04      	cmp	r3, #4
   3a1ae:	d83d      	bhi.n	3a22c <clear_event_registrations+0xac>
   3a1b0:	e8df f003 	tbb	[pc, r3]
   3a1b4:	3c032d49 	.word	0x3c032d49
   3a1b8:	1e          	.byte	0x1e
   3a1b9:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3a1ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3a1be:	b963      	cbnz	r3, 3a1da <clear_event_registrations+0x5a>
   3a1c0:	493d      	ldr	r1, [pc, #244]	; (3a2b8 <clear_event_registrations+0x138>)
   3a1c2:	239d      	movs	r3, #157	; 0x9d
   3a1c4:	462a      	mov	r2, r5
   3a1c6:	4638      	mov	r0, r7
   3a1c8:	f002 fdd5 	bl	3cd76 <printk>
   3a1cc:	483b      	ldr	r0, [pc, #236]	; (3a2bc <clear_event_registrations+0x13c>)
   3a1ce:	f002 fdd2 	bl	3cd76 <printk>
   3a1d2:	219d      	movs	r1, #157	; 0x9d
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3a1d4:	4628      	mov	r0, r5
   3a1d6:	f003 f882 	bl	3d2de <assert_post_action>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   3a1da:	f854 3c14 	ldr.w	r3, [r4, #-20]
   3a1de:	b393      	cbz	r3, 3a246 <clear_event_registrations+0xc6>
	node->prev->next = node->next;
   3a1e0:	f854 2c10 	ldr.w	r2, [r4, #-16]
   3a1e4:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3a1e6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3a1e8:	2300      	movs	r3, #0
	node->prev = NULL;
   3a1ea:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   3a1ee:	e02a      	b.n	3a246 <clear_event_registrations+0xc6>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3a1f0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3a1f4:	2b00      	cmp	r3, #0
   3a1f6:	d1f0      	bne.n	3a1da <clear_event_registrations+0x5a>
   3a1f8:	4931      	ldr	r1, [pc, #196]	; (3a2c0 <clear_event_registrations+0x140>)
   3a1fa:	23a1      	movs	r3, #161	; 0xa1
   3a1fc:	462a      	mov	r2, r5
   3a1fe:	4638      	mov	r0, r7
   3a200:	f002 fdb9 	bl	3cd76 <printk>
   3a204:	482f      	ldr	r0, [pc, #188]	; (3a2c4 <clear_event_registrations+0x144>)
   3a206:	f002 fdb6 	bl	3cd76 <printk>
   3a20a:	21a1      	movs	r1, #161	; 0xa1
   3a20c:	e7e2      	b.n	3a1d4 <clear_event_registrations+0x54>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3a20e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   3a212:	2b00      	cmp	r3, #0
   3a214:	d1e1      	bne.n	3a1da <clear_event_registrations+0x5a>
   3a216:	492c      	ldr	r1, [pc, #176]	; (3a2c8 <clear_event_registrations+0x148>)
   3a218:	23a5      	movs	r3, #165	; 0xa5
   3a21a:	462a      	mov	r2, r5
   3a21c:	4638      	mov	r0, r7
   3a21e:	f002 fdaa 	bl	3cd76 <printk>
   3a222:	482a      	ldr	r0, [pc, #168]	; (3a2cc <clear_event_registrations+0x14c>)
   3a224:	f002 fda7 	bl	3cd76 <printk>
   3a228:	21a5      	movs	r1, #165	; 0xa5
   3a22a:	e7d3      	b.n	3a1d4 <clear_event_registrations+0x54>
		__ASSERT(false, "invalid event type\n");
   3a22c:	4649      	mov	r1, r9
   3a22e:	23ac      	movs	r3, #172	; 0xac
   3a230:	462a      	mov	r2, r5
   3a232:	4638      	mov	r0, r7
   3a234:	f002 fd9f 	bl	3cd76 <printk>
   3a238:	4825      	ldr	r0, [pc, #148]	; (3a2d0 <clear_event_registrations+0x150>)
   3a23a:	f002 fd9c 	bl	3cd76 <printk>
   3a23e:	21ac      	movs	r1, #172	; 0xac
   3a240:	4628      	mov	r0, r5
   3a242:	f003 f84c 	bl	3d2de <assert_post_action>
   3a246:	4823      	ldr	r0, [pc, #140]	; (3a2d4 <clear_event_registrations+0x154>)
   3a248:	f7ff fa84 	bl	39754 <z_spin_unlock_valid>
   3a24c:	b968      	cbnz	r0, 3a26a <clear_event_registrations+0xea>
   3a24e:	23a7      	movs	r3, #167	; 0xa7
   3a250:	4638      	mov	r0, r7
   3a252:	4a21      	ldr	r2, [pc, #132]	; (3a2d8 <clear_event_registrations+0x158>)
   3a254:	4921      	ldr	r1, [pc, #132]	; (3a2dc <clear_event_registrations+0x15c>)
   3a256:	f002 fd8e 	bl	3cd76 <printk>
   3a25a:	491e      	ldr	r1, [pc, #120]	; (3a2d4 <clear_event_registrations+0x154>)
   3a25c:	4820      	ldr	r0, [pc, #128]	; (3a2e0 <clear_event_registrations+0x160>)
   3a25e:	f002 fd8a 	bl	3cd76 <printk>
   3a262:	21a7      	movs	r1, #167	; 0xa7
   3a264:	481c      	ldr	r0, [pc, #112]	; (3a2d8 <clear_event_registrations+0x158>)
   3a266:	f003 f83a 	bl	3d2de <assert_post_action>
   3a26a:	f386 8811 	msr	BASEPRI, r6
   3a26e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   3a272:	f04f 0320 	mov.w	r3, #32
   3a276:	f3ef 8611 	mrs	r6, BASEPRI
   3a27a:	f383 8811 	msr	BASEPRI, r3
   3a27e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a282:	4814      	ldr	r0, [pc, #80]	; (3a2d4 <clear_event_registrations+0x154>)
   3a284:	f7ff fa58 	bl	39738 <z_spin_lock_valid>
   3a288:	b968      	cbnz	r0, 3a2a6 <clear_event_registrations+0x126>
   3a28a:	237c      	movs	r3, #124	; 0x7c
   3a28c:	4638      	mov	r0, r7
   3a28e:	4a12      	ldr	r2, [pc, #72]	; (3a2d8 <clear_event_registrations+0x158>)
   3a290:	4914      	ldr	r1, [pc, #80]	; (3a2e4 <clear_event_registrations+0x164>)
   3a292:	f002 fd70 	bl	3cd76 <printk>
   3a296:	490f      	ldr	r1, [pc, #60]	; (3a2d4 <clear_event_registrations+0x154>)
   3a298:	4813      	ldr	r0, [pc, #76]	; (3a2e8 <clear_event_registrations+0x168>)
   3a29a:	f002 fd6c 	bl	3cd76 <printk>
   3a29e:	217c      	movs	r1, #124	; 0x7c
   3a2a0:	480d      	ldr	r0, [pc, #52]	; (3a2d8 <clear_event_registrations+0x158>)
   3a2a2:	f003 f81c 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a2a6:	480b      	ldr	r0, [pc, #44]	; (3a2d4 <clear_event_registrations+0x154>)
   3a2a8:	f7ff fa64 	bl	39774 <z_spin_lock_set_owner>
	return k;
   3a2ac:	3c14      	subs	r4, #20
   3a2ae:	e772      	b.n	3a196 <clear_event_registrations+0x16>
   3a2b0:	0004c079 	.word	0x0004c079
   3a2b4:	00044dbf 	.word	0x00044dbf
   3a2b8:	0004c09a 	.word	0x0004c09a
   3a2bc:	0004c0b4 	.word	0x0004c0b4
   3a2c0:	0004c0c9 	.word	0x0004c0c9
   3a2c4:	0004c0e5 	.word	0x0004c0e5
   3a2c8:	0004c0f6 	.word	0x0004c0f6
   3a2cc:	0004c113 	.word	0x0004c113
   3a2d0:	0004c12a 	.word	0x0004c12a
   3a2d4:	2001a0d4 	.word	0x2001a0d4
   3a2d8:	00045538 	.word	0x00045538
   3a2dc:	0004558b 	.word	0x0004558b
   3a2e0:	000455a2 	.word	0x000455a2
   3a2e4:	0004555e 	.word	0x0004555e
   3a2e8:	00045573 	.word	0x00045573
   3a2ec:	0004bcc7 	.word	0x0004bcc7

0003a2f0 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   3a2f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct z_poller *poller = event->poller;
   3a2f4:	6884      	ldr	r4, [r0, #8]
{
   3a2f6:	4605      	mov	r5, r0
   3a2f8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller) {
   3a2fa:	b1d4      	cbz	r4, 3a332 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   3a2fc:	7863      	ldrb	r3, [r4, #1]
   3a2fe:	2b01      	cmp	r3, #1
   3a300:	d14c      	bne.n	3a39c <signal_poll_event+0xac>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   3a302:	f1b4 076c 	subs.w	r7, r4, #108	; 0x6c
   3a306:	d10e      	bne.n	3a326 <signal_poll_event+0x36>
   3a308:	23e3      	movs	r3, #227	; 0xe3
   3a30a:	4a31      	ldr	r2, [pc, #196]	; (3a3d0 <signal_poll_event+0xe0>)
   3a30c:	4931      	ldr	r1, [pc, #196]	; (3a3d4 <signal_poll_event+0xe4>)
   3a30e:	4832      	ldr	r0, [pc, #200]	; (3a3d8 <signal_poll_event+0xe8>)
   3a310:	f002 fd31 	bl	3cd76 <printk>
   3a314:	4831      	ldr	r0, [pc, #196]	; (3a3dc <signal_poll_event+0xec>)
   3a316:	f002 fd2e 	bl	3cd76 <printk>
   3a31a:	21e3      	movs	r1, #227	; 0xe3
   3a31c:	482c      	ldr	r0, [pc, #176]	; (3a3d0 <signal_poll_event+0xe0>)
   3a31e:	f002 ffde 	bl	3d2de <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   3a322:	7b7b      	ldrb	r3, [r7, #13]
   3a324:	deff      	udf	#255	; 0xff
   3a326:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   3a32a:	f013 0302 	ands.w	r3, r3, #2
   3a32e:	d10a      	bne.n	3a346 <signal_poll_event+0x56>
			retcode = signal_poller(event, state);
		} else if (poller->mode == MODE_TRIGGERED) {
			retcode = signal_triggered_work(event, state);
		}

		poller->is_polling = false;
   3a330:	7023      	strb	r3, [r4, #0]
	event->poller = NULL;
   3a332:	2000      	movs	r0, #0
	event->state |= state;
   3a334:	68eb      	ldr	r3, [r5, #12]
	event->poller = NULL;
   3a336:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   3a338:	f3c3 3104 	ubfx	r1, r3, #12, #5
   3a33c:	430e      	orrs	r6, r1
   3a33e:	f366 3310 	bfi	r3, r6, #12, #5
   3a342:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   3a344:	e00d      	b.n	3a362 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   3a346:	f04f 31ff 	mov.w	r1, #4294967295
   3a34a:	e954 2311 	ldrd	r2, r3, [r4, #-68]	; 0x44
   3a34e:	f06f 0001 	mvn.w	r0, #1
   3a352:	428b      	cmp	r3, r1
   3a354:	bf08      	it	eq
   3a356:	4282      	cmpeq	r2, r0
   3a358:	d106      	bne.n	3a368 <signal_poll_event+0x78>
		poller->is_polling = false;
   3a35a:	2300      	movs	r3, #0
		return -EAGAIN;
   3a35c:	f06f 000a 	mvn.w	r0, #10
		poller->is_polling = false;
   3a360:	7023      	strb	r3, [r4, #0]
}
   3a362:	b002      	add	sp, #8
   3a364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_unpend_thread(thread);
   3a368:	4638      	mov	r0, r7
   3a36a:	f7fd fef9 	bl	38160 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   3a36e:	2e08      	cmp	r6, #8
   3a370:	bf0c      	ite	eq
   3a372:	f06f 0303 	mvneq.w	r3, #3
   3a376:	2300      	movne	r3, #0
   3a378:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   3a37a:	f814 3c5f 	ldrb.w	r3, [r4, #-95]
   3a37e:	06db      	lsls	r3, r3, #27
   3a380:	d104      	bne.n	3a38c <signal_poll_event+0x9c>
	if (!z_is_thread_ready(thread)) {
   3a382:	f854 8c54 	ldr.w	r8, [r4, #-84]
   3a386:	f1b8 0f00 	cmp.w	r8, #0
   3a38a:	d001      	beq.n	3a390 <signal_poll_event+0xa0>
		poller->is_polling = false;
   3a38c:	2300      	movs	r3, #0
   3a38e:	e7cf      	b.n	3a330 <signal_poll_event+0x40>
	z_ready_thread(thread);
   3a390:	4638      	mov	r0, r7
   3a392:	f7fe f841 	bl	38418 <z_ready_thread>
		poller->is_polling = false;
   3a396:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   3a39a:	e7ca      	b.n	3a332 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   3a39c:	2b02      	cmp	r3, #2
   3a39e:	d1f5      	bne.n	3a38c <signal_poll_event+0x9c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   3a3a0:	7823      	ldrb	r3, [r4, #0]
   3a3a2:	2b00      	cmp	r3, #0
   3a3a4:	d0c5      	beq.n	3a332 <signal_poll_event+0x42>
   3a3a6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   3a3aa:	b17f      	cbz	r7, 3a3cc <signal_poll_event+0xdc>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   3a3ac:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   3a3b0:	f1a4 0110 	sub.w	r1, r4, #16
   3a3b4:	f104 0010 	add.w	r0, r4, #16
   3a3b8:	9101      	str	r1, [sp, #4]
   3a3ba:	f7ff fc95 	bl	39ce8 <z_abort_timeout>
		k_work_submit_to_queue(work_q, &twork->work);
   3a3be:	4638      	mov	r0, r7
   3a3c0:	9901      	ldr	r1, [sp, #4]
		twork->poll_result = 0;
   3a3c2:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   3a3c6:	f007 fbb2 	bl	41b2e <k_work_submit_to_queue>
   3a3ca:	e7e4      	b.n	3a396 <signal_poll_event+0xa6>
		poller->is_polling = false;
   3a3cc:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   3a3ce:	e7b0      	b.n	3a332 <signal_poll_event+0x42>
   3a3d0:	0004c079 	.word	0x0004c079
   3a3d4:	0004c140 	.word	0x0004c140
   3a3d8:	00044dbf 	.word	0x00044dbf
   3a3dc:	0004c156 	.word	0x0004c156

0003a3e0 <register_events>:
{
   3a3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   3a3e4:	2700      	movs	r7, #0
{
   3a3e6:	4615      	mov	r5, r2
   3a3e8:	4604      	mov	r4, r0
	int events_registered = 0;
   3a3ea:	46b9      	mov	r9, r7
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a3ec:	4e6a      	ldr	r6, [pc, #424]	; (3a598 <register_events+0x1b8>)
   3a3ee:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 3a5d4 <register_events+0x1f4>
   3a3f2:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 3a5d8 <register_events+0x1f8>
{
   3a3f6:	9100      	str	r1, [sp, #0]
   3a3f8:	9301      	str	r3, [sp, #4]
	for (int ii = 0; ii < num_events; ii++) {
   3a3fa:	9b00      	ldr	r3, [sp, #0]
   3a3fc:	429f      	cmp	r7, r3
   3a3fe:	db03      	blt.n	3a408 <register_events+0x28>
}
   3a400:	4648      	mov	r0, r9
   3a402:	b003      	add	sp, #12
   3a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a408:	f04f 0320 	mov.w	r3, #32
   3a40c:	f3ef 8b11 	mrs	fp, BASEPRI
   3a410:	f383 8811 	msr	BASEPRI, r3
   3a414:	f3bf 8f6f 	isb	sy
   3a418:	4630      	mov	r0, r6
   3a41a:	f7ff f98d 	bl	39738 <z_spin_lock_valid>
   3a41e:	b968      	cbnz	r0, 3a43c <register_events+0x5c>
   3a420:	237c      	movs	r3, #124	; 0x7c
   3a422:	4642      	mov	r2, r8
   3a424:	4651      	mov	r1, sl
   3a426:	485d      	ldr	r0, [pc, #372]	; (3a59c <register_events+0x1bc>)
   3a428:	f002 fca5 	bl	3cd76 <printk>
   3a42c:	4631      	mov	r1, r6
   3a42e:	485c      	ldr	r0, [pc, #368]	; (3a5a0 <register_events+0x1c0>)
   3a430:	f002 fca1 	bl	3cd76 <printk>
   3a434:	217c      	movs	r1, #124	; 0x7c
   3a436:	4640      	mov	r0, r8
   3a438:	f002 ff51 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a43c:	4630      	mov	r0, r6
   3a43e:	f7ff f999 	bl	39774 <z_spin_lock_set_owner>
	switch (event->type) {
   3a442:	7b63      	ldrb	r3, [r4, #13]
   3a444:	f003 030f 	and.w	r3, r3, #15
   3a448:	2b04      	cmp	r3, #4
   3a44a:	d844      	bhi.n	3a4d6 <register_events+0xf6>
   3a44c:	e8df f003 	tbb	[pc, r3]
   3a450:	43033d2d 	.word	0x43033d2d
   3a454:	2a          	.byte	0x2a
   3a455:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   3a456:	6923      	ldr	r3, [r4, #16]
   3a458:	689b      	ldr	r3, [r3, #8]
   3a45a:	b333      	cbz	r3, 3a4aa <register_events+0xca>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   3a45c:	2202      	movs	r2, #2
	event->poller = NULL;
   3a45e:	2100      	movs	r1, #0
	event->state |= state;
   3a460:	68e3      	ldr	r3, [r4, #12]
	event->poller = NULL;
   3a462:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   3a464:	f3c3 3004 	ubfx	r0, r3, #12, #5
   3a468:	4302      	orrs	r2, r0
   3a46a:	f362 3310 	bfi	r3, r2, #12, #5
   3a46e:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   3a470:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a472:	4630      	mov	r0, r6
   3a474:	f7ff f96e 	bl	39754 <z_spin_unlock_valid>
   3a478:	b968      	cbnz	r0, 3a496 <register_events+0xb6>
   3a47a:	23a7      	movs	r3, #167	; 0xa7
   3a47c:	4642      	mov	r2, r8
   3a47e:	4949      	ldr	r1, [pc, #292]	; (3a5a4 <register_events+0x1c4>)
   3a480:	4846      	ldr	r0, [pc, #280]	; (3a59c <register_events+0x1bc>)
   3a482:	f002 fc78 	bl	3cd76 <printk>
   3a486:	4631      	mov	r1, r6
   3a488:	4847      	ldr	r0, [pc, #284]	; (3a5a8 <register_events+0x1c8>)
   3a48a:	f002 fc74 	bl	3cd76 <printk>
   3a48e:	21a7      	movs	r1, #167	; 0xa7
   3a490:	4640      	mov	r0, r8
   3a492:	f002 ff24 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3a496:	f38b 8811 	msr	BASEPRI, fp
   3a49a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   3a49e:	3701      	adds	r7, #1
   3a4a0:	3414      	adds	r4, #20
   3a4a2:	e7aa      	b.n	3a3fa <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   3a4a4:	6923      	ldr	r3, [r4, #16]
   3a4a6:	681b      	ldr	r3, [r3, #0]
   3a4a8:	bb33      	cbnz	r3, 3a4f8 <register_events+0x118>
		} else if (!just_check && poller->is_polling) {
   3a4aa:	9b01      	ldr	r3, [sp, #4]
   3a4ac:	2b00      	cmp	r3, #0
   3a4ae:	d1e0      	bne.n	3a472 <register_events+0x92>
   3a4b0:	782b      	ldrb	r3, [r5, #0]
   3a4b2:	2b00      	cmp	r3, #0
   3a4b4:	d0dd      	beq.n	3a472 <register_events+0x92>
	switch (event->type) {
   3a4b6:	7b63      	ldrb	r3, [r4, #13]
   3a4b8:	f003 030f 	and.w	r3, r3, #15
   3a4bc:	2b04      	cmp	r3, #4
   3a4be:	d85d      	bhi.n	3a57c <register_events+0x19c>
   3a4c0:	e8df f003 	tbb	[pc, r3]
   3a4c4:	5c1c4931 	.word	0x5c1c4931
   3a4c8:	35          	.byte	0x35
   3a4c9:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   3a4ca:	6923      	ldr	r3, [r4, #16]
   3a4cc:	689b      	ldr	r3, [r3, #8]
   3a4ce:	2b00      	cmp	r3, #0
   3a4d0:	d0eb      	beq.n	3a4aa <register_events+0xca>
			*state = K_POLL_STATE_SIGNALED;
   3a4d2:	2201      	movs	r2, #1
   3a4d4:	e7c3      	b.n	3a45e <register_events+0x7e>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   3a4d6:	2354      	movs	r3, #84	; 0x54
   3a4d8:	4a34      	ldr	r2, [pc, #208]	; (3a5ac <register_events+0x1cc>)
   3a4da:	4935      	ldr	r1, [pc, #212]	; (3a5b0 <register_events+0x1d0>)
   3a4dc:	482f      	ldr	r0, [pc, #188]	; (3a59c <register_events+0x1bc>)
   3a4de:	f002 fc4a 	bl	3cd76 <printk>
   3a4e2:	7b61      	ldrb	r1, [r4, #13]
   3a4e4:	4833      	ldr	r0, [pc, #204]	; (3a5b4 <register_events+0x1d4>)
   3a4e6:	f001 010f 	and.w	r1, r1, #15
   3a4ea:	f002 fc44 	bl	3cd76 <printk>
   3a4ee:	2154      	movs	r1, #84	; 0x54
   3a4f0:	482e      	ldr	r0, [pc, #184]	; (3a5ac <register_events+0x1cc>)
   3a4f2:	f002 fef4 	bl	3d2de <assert_post_action>
		break;
   3a4f6:	e7d8      	b.n	3a4aa <register_events+0xca>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   3a4f8:	2204      	movs	r2, #4
   3a4fa:	e7b0      	b.n	3a45e <register_events+0x7e>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   3a4fc:	6923      	ldr	r3, [r4, #16]
   3a4fe:	b963      	cbnz	r3, 3a51a <register_events+0x13a>
   3a500:	492d      	ldr	r1, [pc, #180]	; (3a5b8 <register_events+0x1d8>)
   3a502:	237e      	movs	r3, #126	; 0x7e
   3a504:	4a29      	ldr	r2, [pc, #164]	; (3a5ac <register_events+0x1cc>)
   3a506:	4825      	ldr	r0, [pc, #148]	; (3a59c <register_events+0x1bc>)
   3a508:	f002 fc35 	bl	3cd76 <printk>
   3a50c:	482b      	ldr	r0, [pc, #172]	; (3a5bc <register_events+0x1dc>)
   3a50e:	f002 fc32 	bl	3cd76 <printk>
   3a512:	217e      	movs	r1, #126	; 0x7e
   3a514:	4825      	ldr	r0, [pc, #148]	; (3a5ac <register_events+0x1cc>)
   3a516:	f002 fee2 	bl	3d2de <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   3a51a:	462a      	mov	r2, r5
   3a51c:	4621      	mov	r1, r4
   3a51e:	6920      	ldr	r0, [r4, #16]
   3a520:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   3a522:	f007 fb18 	bl	41b56 <add_event>
	event->poller = poller;
   3a526:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   3a528:	f109 0901 	add.w	r9, r9, #1
   3a52c:	e7a1      	b.n	3a472 <register_events+0x92>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   3a52e:	6923      	ldr	r3, [r4, #16]
   3a530:	b963      	cbnz	r3, 3a54c <register_events+0x16c>
   3a532:	4923      	ldr	r1, [pc, #140]	; (3a5c0 <register_events+0x1e0>)
   3a534:	2382      	movs	r3, #130	; 0x82
   3a536:	4a1d      	ldr	r2, [pc, #116]	; (3a5ac <register_events+0x1cc>)
   3a538:	4818      	ldr	r0, [pc, #96]	; (3a59c <register_events+0x1bc>)
   3a53a:	f002 fc1c 	bl	3cd76 <printk>
   3a53e:	4821      	ldr	r0, [pc, #132]	; (3a5c4 <register_events+0x1e4>)
   3a540:	f002 fc19 	bl	3cd76 <printk>
   3a544:	2182      	movs	r1, #130	; 0x82
   3a546:	4819      	ldr	r0, [pc, #100]	; (3a5ac <register_events+0x1cc>)
   3a548:	f002 fec9 	bl	3d2de <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   3a54c:	6920      	ldr	r0, [r4, #16]
   3a54e:	462a      	mov	r2, r5
   3a550:	4621      	mov	r1, r4
   3a552:	3014      	adds	r0, #20
   3a554:	e7e5      	b.n	3a522 <register_events+0x142>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   3a556:	6923      	ldr	r3, [r4, #16]
   3a558:	b963      	cbnz	r3, 3a574 <register_events+0x194>
   3a55a:	491b      	ldr	r1, [pc, #108]	; (3a5c8 <register_events+0x1e8>)
   3a55c:	2386      	movs	r3, #134	; 0x86
   3a55e:	4a13      	ldr	r2, [pc, #76]	; (3a5ac <register_events+0x1cc>)
   3a560:	480e      	ldr	r0, [pc, #56]	; (3a59c <register_events+0x1bc>)
   3a562:	f002 fc08 	bl	3cd76 <printk>
   3a566:	4819      	ldr	r0, [pc, #100]	; (3a5cc <register_events+0x1ec>)
   3a568:	f002 fc05 	bl	3cd76 <printk>
   3a56c:	2186      	movs	r1, #134	; 0x86
   3a56e:	480f      	ldr	r0, [pc, #60]	; (3a5ac <register_events+0x1cc>)
   3a570:	f002 feb5 	bl	3d2de <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   3a574:	462a      	mov	r2, r5
   3a576:	4621      	mov	r1, r4
   3a578:	6920      	ldr	r0, [r4, #16]
   3a57a:	e7d2      	b.n	3a522 <register_events+0x142>
		__ASSERT(false, "invalid event type\n");
   3a57c:	238d      	movs	r3, #141	; 0x8d
   3a57e:	4a0b      	ldr	r2, [pc, #44]	; (3a5ac <register_events+0x1cc>)
   3a580:	490b      	ldr	r1, [pc, #44]	; (3a5b0 <register_events+0x1d0>)
   3a582:	4806      	ldr	r0, [pc, #24]	; (3a59c <register_events+0x1bc>)
   3a584:	f002 fbf7 	bl	3cd76 <printk>
   3a588:	4811      	ldr	r0, [pc, #68]	; (3a5d0 <register_events+0x1f0>)
   3a58a:	f002 fbf4 	bl	3cd76 <printk>
   3a58e:	218d      	movs	r1, #141	; 0x8d
   3a590:	4806      	ldr	r0, [pc, #24]	; (3a5ac <register_events+0x1cc>)
   3a592:	f002 fea4 	bl	3d2de <assert_post_action>
		break;
   3a596:	e7c6      	b.n	3a526 <register_events+0x146>
   3a598:	2001a0d4 	.word	0x2001a0d4
   3a59c:	00044dbf 	.word	0x00044dbf
   3a5a0:	00045573 	.word	0x00045573
   3a5a4:	0004558b 	.word	0x0004558b
   3a5a8:	000455a2 	.word	0x000455a2
   3a5ac:	0004c079 	.word	0x0004c079
   3a5b0:	0004bcc7 	.word	0x0004bcc7
   3a5b4:	0004c175 	.word	0x0004c175
   3a5b8:	0004c09a 	.word	0x0004c09a
   3a5bc:	0004c0b4 	.word	0x0004c0b4
   3a5c0:	0004c0c9 	.word	0x0004c0c9
   3a5c4:	0004c0e5 	.word	0x0004c0e5
   3a5c8:	0004c0f6 	.word	0x0004c0f6
   3a5cc:	0004c113 	.word	0x0004c113
   3a5d0:	0004c12a 	.word	0x0004c12a
   3a5d4:	00045538 	.word	0x00045538
   3a5d8:	0004555e 	.word	0x0004555e

0003a5dc <z_impl_k_poll>:
{
   3a5dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3a5e0:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   3a5e2:	4b77      	ldr	r3, [pc, #476]	; (3a7c0 <z_impl_k_poll+0x1e4>)
{
   3a5e4:	4604      	mov	r4, r0
	struct z_poller *poller = &_current->poller;
   3a5e6:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   3a5e8:	2301      	movs	r3, #1
{
   3a5ea:	4688      	mov	r8, r1
   3a5ec:	4616      	mov	r6, r2
   3a5ee:	b085      	sub	sp, #20
	struct z_poller *poller = &_current->poller;
   3a5f0:	f105 096c 	add.w	r9, r5, #108	; 0x6c
	poller->is_polling = true;
   3a5f4:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
	poller->mode = MODE_POLL;
   3a5f8:	f885 306d 	strb.w	r3, [r5, #109]	; 0x6d
   3a5fc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   3a600:	b173      	cbz	r3, 3a620 <z_impl_k_poll+0x44>
   3a602:	4970      	ldr	r1, [pc, #448]	; (3a7c4 <z_impl_k_poll+0x1e8>)
   3a604:	f44f 7382 	mov.w	r3, #260	; 0x104
   3a608:	4a6f      	ldr	r2, [pc, #444]	; (3a7c8 <z_impl_k_poll+0x1ec>)
   3a60a:	4870      	ldr	r0, [pc, #448]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a60c:	f002 fbb3 	bl	3cd76 <printk>
   3a610:	486f      	ldr	r0, [pc, #444]	; (3a7d0 <z_impl_k_poll+0x1f4>)
   3a612:	f002 fbb0 	bl	3cd76 <printk>
   3a616:	f44f 7182 	mov.w	r1, #260	; 0x104
   3a61a:	486b      	ldr	r0, [pc, #428]	; (3a7c8 <z_impl_k_poll+0x1ec>)
   3a61c:	f002 fe5f 	bl	3d2de <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   3a620:	b974      	cbnz	r4, 3a640 <z_impl_k_poll+0x64>
   3a622:	496c      	ldr	r1, [pc, #432]	; (3a7d4 <z_impl_k_poll+0x1f8>)
   3a624:	f240 1305 	movw	r3, #261	; 0x105
   3a628:	4a67      	ldr	r2, [pc, #412]	; (3a7c8 <z_impl_k_poll+0x1ec>)
   3a62a:	4868      	ldr	r0, [pc, #416]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a62c:	f002 fba3 	bl	3cd76 <printk>
   3a630:	4869      	ldr	r0, [pc, #420]	; (3a7d8 <z_impl_k_poll+0x1fc>)
   3a632:	f002 fba0 	bl	3cd76 <printk>
   3a636:	f240 1105 	movw	r1, #261	; 0x105
   3a63a:	4863      	ldr	r0, [pc, #396]	; (3a7c8 <z_impl_k_poll+0x1ec>)
   3a63c:	f002 fe4f 	bl	3d2de <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   3a640:	f1b8 0f00 	cmp.w	r8, #0
   3a644:	da0e      	bge.n	3a664 <z_impl_k_poll+0x88>
   3a646:	4965      	ldr	r1, [pc, #404]	; (3a7dc <z_impl_k_poll+0x200>)
   3a648:	f44f 7383 	mov.w	r3, #262	; 0x106
   3a64c:	4a5e      	ldr	r2, [pc, #376]	; (3a7c8 <z_impl_k_poll+0x1ec>)
   3a64e:	485f      	ldr	r0, [pc, #380]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a650:	f002 fb91 	bl	3cd76 <printk>
   3a654:	4862      	ldr	r0, [pc, #392]	; (3a7e0 <z_impl_k_poll+0x204>)
   3a656:	f002 fb8e 	bl	3cd76 <printk>
   3a65a:	f44f 7183 	mov.w	r1, #262	; 0x106
   3a65e:	485a      	ldr	r0, [pc, #360]	; (3a7c8 <z_impl_k_poll+0x1ec>)
   3a660:	f002 fe3d 	bl	3d2de <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   3a664:	ea56 0307 	orrs.w	r3, r6, r7
   3a668:	bf0c      	ite	eq
   3a66a:	2301      	moveq	r3, #1
   3a66c:	2300      	movne	r3, #0
   3a66e:	4641      	mov	r1, r8
   3a670:	464a      	mov	r2, r9
   3a672:	4620      	mov	r0, r4
   3a674:	f7ff feb4 	bl	3a3e0 <register_events>
   3a678:	4680      	mov	r8, r0
	__asm__ volatile(
   3a67a:	f04f 0320 	mov.w	r3, #32
   3a67e:	f3ef 8911 	mrs	r9, BASEPRI
   3a682:	f383 8811 	msr	BASEPRI, r3
   3a686:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a68a:	4856      	ldr	r0, [pc, #344]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a68c:	f7ff f854 	bl	39738 <z_spin_lock_valid>
   3a690:	b968      	cbnz	r0, 3a6ae <z_impl_k_poll+0xd2>
   3a692:	237c      	movs	r3, #124	; 0x7c
   3a694:	4a54      	ldr	r2, [pc, #336]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a696:	4955      	ldr	r1, [pc, #340]	; (3a7ec <z_impl_k_poll+0x210>)
   3a698:	484c      	ldr	r0, [pc, #304]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a69a:	f002 fb6c 	bl	3cd76 <printk>
   3a69e:	4951      	ldr	r1, [pc, #324]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a6a0:	4853      	ldr	r0, [pc, #332]	; (3a7f0 <z_impl_k_poll+0x214>)
   3a6a2:	f002 fb68 	bl	3cd76 <printk>
   3a6a6:	217c      	movs	r1, #124	; 0x7c
   3a6a8:	484f      	ldr	r0, [pc, #316]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a6aa:	f002 fe18 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a6ae:	484d      	ldr	r0, [pc, #308]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a6b0:	f7ff f860 	bl	39774 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   3a6b4:	f895 306c 	ldrb.w	r3, [r5, #108]	; 0x6c
   3a6b8:	b9fb      	cbnz	r3, 3a6fa <z_impl_k_poll+0x11e>
		clear_event_registrations(events, events_registered, key);
   3a6ba:	4620      	mov	r0, r4
   3a6bc:	464a      	mov	r2, r9
   3a6be:	4641      	mov	r1, r8
   3a6c0:	f7ff fd5e 	bl	3a180 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a6c4:	4847      	ldr	r0, [pc, #284]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a6c6:	f7ff f845 	bl	39754 <z_spin_unlock_valid>
   3a6ca:	b968      	cbnz	r0, 3a6e8 <z_impl_k_poll+0x10c>
   3a6cc:	23a7      	movs	r3, #167	; 0xa7
   3a6ce:	4a46      	ldr	r2, [pc, #280]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a6d0:	4948      	ldr	r1, [pc, #288]	; (3a7f4 <z_impl_k_poll+0x218>)
   3a6d2:	483e      	ldr	r0, [pc, #248]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a6d4:	f002 fb4f 	bl	3cd76 <printk>
   3a6d8:	4942      	ldr	r1, [pc, #264]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a6da:	4847      	ldr	r0, [pc, #284]	; (3a7f8 <z_impl_k_poll+0x21c>)
   3a6dc:	f002 fb4b 	bl	3cd76 <printk>
   3a6e0:	21a7      	movs	r1, #167	; 0xa7
   3a6e2:	4841      	ldr	r0, [pc, #260]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a6e4:	f002 fdfb 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3a6e8:	f389 8811 	msr	BASEPRI, r9
   3a6ec:	f3bf 8f6f 	isb	sy
		return 0;
   3a6f0:	2500      	movs	r5, #0
}
   3a6f2:	4628      	mov	r0, r5
   3a6f4:	b005      	add	sp, #20
   3a6f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   3a6fa:	2300      	movs	r3, #0
   3a6fc:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   3a700:	ea56 0307 	orrs.w	r3, r6, r7
   3a704:	d118      	bne.n	3a738 <z_impl_k_poll+0x15c>
   3a706:	4837      	ldr	r0, [pc, #220]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a708:	f7ff f824 	bl	39754 <z_spin_unlock_valid>
   3a70c:	b968      	cbnz	r0, 3a72a <z_impl_k_poll+0x14e>
   3a70e:	23a7      	movs	r3, #167	; 0xa7
   3a710:	4a35      	ldr	r2, [pc, #212]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a712:	4938      	ldr	r1, [pc, #224]	; (3a7f4 <z_impl_k_poll+0x218>)
   3a714:	482d      	ldr	r0, [pc, #180]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a716:	f002 fb2e 	bl	3cd76 <printk>
   3a71a:	4932      	ldr	r1, [pc, #200]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a71c:	4836      	ldr	r0, [pc, #216]	; (3a7f8 <z_impl_k_poll+0x21c>)
   3a71e:	f002 fb2a 	bl	3cd76 <printk>
   3a722:	21a7      	movs	r1, #167	; 0xa7
   3a724:	4830      	ldr	r0, [pc, #192]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a726:	f002 fdda 	bl	3d2de <assert_post_action>
   3a72a:	f389 8811 	msr	BASEPRI, r9
   3a72e:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   3a732:	f06f 050a 	mvn.w	r5, #10
   3a736:	e7dc      	b.n	3a6f2 <z_impl_k_poll+0x116>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3a738:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3a73a:	4649      	mov	r1, r9
   3a73c:	e9cd 6700 	strd	r6, r7, [sp]
   3a740:	4828      	ldr	r0, [pc, #160]	; (3a7e4 <z_impl_k_poll+0x208>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   3a742:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   3a746:	f7fe fad1 	bl	38cec <z_pend_curr>
   3a74a:	4605      	mov	r5, r0
	__asm__ volatile(
   3a74c:	f04f 0320 	mov.w	r3, #32
   3a750:	f3ef 8611 	mrs	r6, BASEPRI
   3a754:	f383 8811 	msr	BASEPRI, r3
   3a758:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a75c:	4821      	ldr	r0, [pc, #132]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a75e:	f7fe ffeb 	bl	39738 <z_spin_lock_valid>
   3a762:	b968      	cbnz	r0, 3a780 <z_impl_k_poll+0x1a4>
   3a764:	237c      	movs	r3, #124	; 0x7c
   3a766:	4a20      	ldr	r2, [pc, #128]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a768:	4920      	ldr	r1, [pc, #128]	; (3a7ec <z_impl_k_poll+0x210>)
   3a76a:	4818      	ldr	r0, [pc, #96]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a76c:	f002 fb03 	bl	3cd76 <printk>
   3a770:	491c      	ldr	r1, [pc, #112]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a772:	481f      	ldr	r0, [pc, #124]	; (3a7f0 <z_impl_k_poll+0x214>)
   3a774:	f002 faff 	bl	3cd76 <printk>
   3a778:	217c      	movs	r1, #124	; 0x7c
   3a77a:	481b      	ldr	r0, [pc, #108]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a77c:	f002 fdaf 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a780:	4818      	ldr	r0, [pc, #96]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a782:	f7fe fff7 	bl	39774 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   3a786:	4620      	mov	r0, r4
   3a788:	4632      	mov	r2, r6
   3a78a:	4641      	mov	r1, r8
   3a78c:	f7ff fcf8 	bl	3a180 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a790:	4814      	ldr	r0, [pc, #80]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a792:	f7fe ffdf 	bl	39754 <z_spin_unlock_valid>
   3a796:	b968      	cbnz	r0, 3a7b4 <z_impl_k_poll+0x1d8>
   3a798:	23a7      	movs	r3, #167	; 0xa7
   3a79a:	4a13      	ldr	r2, [pc, #76]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a79c:	4915      	ldr	r1, [pc, #84]	; (3a7f4 <z_impl_k_poll+0x218>)
   3a79e:	480b      	ldr	r0, [pc, #44]	; (3a7cc <z_impl_k_poll+0x1f0>)
   3a7a0:	f002 fae9 	bl	3cd76 <printk>
   3a7a4:	490f      	ldr	r1, [pc, #60]	; (3a7e4 <z_impl_k_poll+0x208>)
   3a7a6:	4814      	ldr	r0, [pc, #80]	; (3a7f8 <z_impl_k_poll+0x21c>)
   3a7a8:	f002 fae5 	bl	3cd76 <printk>
   3a7ac:	21a7      	movs	r1, #167	; 0xa7
   3a7ae:	480e      	ldr	r0, [pc, #56]	; (3a7e8 <z_impl_k_poll+0x20c>)
   3a7b0:	f002 fd95 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3a7b4:	f386 8811 	msr	BASEPRI, r6
   3a7b8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   3a7bc:	e799      	b.n	3a6f2 <z_impl_k_poll+0x116>
   3a7be:	bf00      	nop
   3a7c0:	2001a07c 	.word	0x2001a07c
   3a7c4:	0004bb6f 	.word	0x0004bb6f
   3a7c8:	0004c079 	.word	0x0004c079
   3a7cc:	00044dbf 	.word	0x00044dbf
   3a7d0:	00045c27 	.word	0x00045c27
   3a7d4:	0004c192 	.word	0x0004c192
   3a7d8:	0004c1a8 	.word	0x0004c1a8
   3a7dc:	0004c1b7 	.word	0x0004c1b7
   3a7e0:	0004c1c7 	.word	0x0004c1c7
   3a7e4:	2001a0d4 	.word	0x2001a0d4
   3a7e8:	00045538 	.word	0x00045538
   3a7ec:	0004555e 	.word	0x0004555e
   3a7f0:	00045573 	.word	0x00045573
   3a7f4:	0004558b 	.word	0x0004558b
   3a7f8:	000455a2 	.word	0x000455a2

0003a7fc <z_impl_k_poll_signal_raise>:
{
   3a7fc:	b570      	push	{r4, r5, r6, lr}
   3a7fe:	4604      	mov	r4, r0
   3a800:	460d      	mov	r5, r1
	__asm__ volatile(
   3a802:	f04f 0320 	mov.w	r3, #32
   3a806:	f3ef 8611 	mrs	r6, BASEPRI
   3a80a:	f383 8811 	msr	BASEPRI, r3
   3a80e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   3a812:	4821      	ldr	r0, [pc, #132]	; (3a898 <z_impl_k_poll_signal_raise+0x9c>)
   3a814:	f7fe ff90 	bl	39738 <z_spin_lock_valid>
   3a818:	b968      	cbnz	r0, 3a836 <z_impl_k_poll_signal_raise+0x3a>
   3a81a:	237c      	movs	r3, #124	; 0x7c
   3a81c:	4a1f      	ldr	r2, [pc, #124]	; (3a89c <z_impl_k_poll_signal_raise+0xa0>)
   3a81e:	4920      	ldr	r1, [pc, #128]	; (3a8a0 <z_impl_k_poll_signal_raise+0xa4>)
   3a820:	4820      	ldr	r0, [pc, #128]	; (3a8a4 <z_impl_k_poll_signal_raise+0xa8>)
   3a822:	f002 faa8 	bl	3cd76 <printk>
   3a826:	491c      	ldr	r1, [pc, #112]	; (3a898 <z_impl_k_poll_signal_raise+0x9c>)
   3a828:	481f      	ldr	r0, [pc, #124]	; (3a8a8 <z_impl_k_poll_signal_raise+0xac>)
   3a82a:	f002 faa4 	bl	3cd76 <printk>
   3a82e:	217c      	movs	r1, #124	; 0x7c
   3a830:	481a      	ldr	r0, [pc, #104]	; (3a89c <z_impl_k_poll_signal_raise+0xa0>)
   3a832:	f002 fd54 	bl	3d2de <assert_post_action>
	z_spin_lock_set_owner(l);
   3a836:	4818      	ldr	r0, [pc, #96]	; (3a898 <z_impl_k_poll_signal_raise+0x9c>)
   3a838:	f7fe ff9c 	bl	39774 <z_spin_lock_set_owner>
	signal->signaled = 1U;
   3a83c:	2101      	movs	r1, #1
	return list->head == list;
   3a83e:	6820      	ldr	r0, [r4, #0]
	signal->result = result;
   3a840:	60e5      	str	r5, [r4, #12]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   3a842:	4284      	cmp	r4, r0
	signal->signaled = 1U;
   3a844:	60a1      	str	r1, [r4, #8]
   3a846:	d117      	bne.n	3a878 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   3a848:	4813      	ldr	r0, [pc, #76]	; (3a898 <z_impl_k_poll_signal_raise+0x9c>)
   3a84a:	f7fe ff83 	bl	39754 <z_spin_unlock_valid>
   3a84e:	b968      	cbnz	r0, 3a86c <z_impl_k_poll_signal_raise+0x70>
   3a850:	23a7      	movs	r3, #167	; 0xa7
   3a852:	4a12      	ldr	r2, [pc, #72]	; (3a89c <z_impl_k_poll_signal_raise+0xa0>)
   3a854:	4915      	ldr	r1, [pc, #84]	; (3a8ac <z_impl_k_poll_signal_raise+0xb0>)
   3a856:	4813      	ldr	r0, [pc, #76]	; (3a8a4 <z_impl_k_poll_signal_raise+0xa8>)
   3a858:	f002 fa8d 	bl	3cd76 <printk>
   3a85c:	490e      	ldr	r1, [pc, #56]	; (3a898 <z_impl_k_poll_signal_raise+0x9c>)
   3a85e:	4814      	ldr	r0, [pc, #80]	; (3a8b0 <z_impl_k_poll_signal_raise+0xb4>)
   3a860:	f002 fa89 	bl	3cd76 <printk>
   3a864:	21a7      	movs	r1, #167	; 0xa7
   3a866:	480d      	ldr	r0, [pc, #52]	; (3a89c <z_impl_k_poll_signal_raise+0xa0>)
   3a868:	f002 fd39 	bl	3d2de <assert_post_action>
	__asm__ volatile(
   3a86c:	f386 8811 	msr	BASEPRI, r6
   3a870:	f3bf 8f6f 	isb	sy
		return 0;
   3a874:	2400      	movs	r4, #0
   3a876:	e00d      	b.n	3a894 <z_impl_k_poll_signal_raise+0x98>
	node->prev->next = node->next;
   3a878:	e9d0 3200 	ldrd	r3, r2, [r0]
   3a87c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   3a87e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   3a880:	2300      	movs	r3, #0
	node->prev = NULL;
   3a882:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3a886:	f7ff fd33 	bl	3a2f0 <signal_poll_event>
	z_reschedule(&lock, key);
   3a88a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   3a88c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   3a88e:	4802      	ldr	r0, [pc, #8]	; (3a898 <z_impl_k_poll_signal_raise+0x9c>)
   3a890:	f7fd fb7c 	bl	37f8c <z_reschedule>
}
   3a894:	4620      	mov	r0, r4
   3a896:	bd70      	pop	{r4, r5, r6, pc}
   3a898:	2001a0d4 	.word	0x2001a0d4
   3a89c:	00045538 	.word	0x00045538
   3a8a0:	0004555e 	.word	0x0004555e
   3a8a4:	00044dbf 	.word	0x00044dbf
   3a8a8:	00045573 	.word	0x00045573
   3a8ac:	0004558b 	.word	0x0004558b
   3a8b0:	000455a2 	.word	0x000455a2

0003a8b4 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   3a8b4:	2803      	cmp	r0, #3
{
   3a8b6:	b538      	push	{r3, r4, r5, lr}
   3a8b8:	4604      	mov	r4, r0
   3a8ba:	460d      	mov	r5, r1
	__ASSERT(align / sizeof(void *) >= 1
   3a8bc:	d901      	bls.n	3a8c2 <k_aligned_alloc+0xe>
   3a8be:	0783      	lsls	r3, r0, #30
   3a8c0:	d00c      	beq.n	3a8dc <k_aligned_alloc+0x28>
   3a8c2:	4912      	ldr	r1, [pc, #72]	; (3a90c <k_aligned_alloc+0x58>)
   3a8c4:	233e      	movs	r3, #62	; 0x3e
   3a8c6:	4a12      	ldr	r2, [pc, #72]	; (3a910 <k_aligned_alloc+0x5c>)
   3a8c8:	4812      	ldr	r0, [pc, #72]	; (3a914 <k_aligned_alloc+0x60>)
   3a8ca:	f002 fa54 	bl	3cd76 <printk>
   3a8ce:	4812      	ldr	r0, [pc, #72]	; (3a918 <k_aligned_alloc+0x64>)
   3a8d0:	f002 fa51 	bl	3cd76 <printk>
   3a8d4:	213e      	movs	r1, #62	; 0x3e
   3a8d6:	480e      	ldr	r0, [pc, #56]	; (3a910 <k_aligned_alloc+0x5c>)
   3a8d8:	f002 fd01 	bl	3d2de <assert_post_action>
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   3a8dc:	1e63      	subs	r3, r4, #1
   3a8de:	4223      	tst	r3, r4
   3a8e0:	d00c      	beq.n	3a8fc <k_aligned_alloc+0x48>
   3a8e2:	490e      	ldr	r1, [pc, #56]	; (3a91c <k_aligned_alloc+0x68>)
   3a8e4:	2342      	movs	r3, #66	; 0x42
   3a8e6:	4a0a      	ldr	r2, [pc, #40]	; (3a910 <k_aligned_alloc+0x5c>)
   3a8e8:	480a      	ldr	r0, [pc, #40]	; (3a914 <k_aligned_alloc+0x60>)
   3a8ea:	f002 fa44 	bl	3cd76 <printk>
   3a8ee:	480c      	ldr	r0, [pc, #48]	; (3a920 <k_aligned_alloc+0x6c>)
   3a8f0:	f002 fa41 	bl	3cd76 <printk>
   3a8f4:	2142      	movs	r1, #66	; 0x42
   3a8f6:	4806      	ldr	r0, [pc, #24]	; (3a910 <k_aligned_alloc+0x5c>)
   3a8f8:	f002 fcf1 	bl	3d2de <assert_post_action>
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   3a8fc:	462a      	mov	r2, r5
   3a8fe:	4621      	mov	r1, r4
}
   3a900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   3a904:	4807      	ldr	r0, [pc, #28]	; (3a924 <k_aligned_alloc+0x70>)
   3a906:	f007 b969 	b.w	41bdc <z_heap_aligned_alloc>
   3a90a:	bf00      	nop
   3a90c:	0004c1f8 	.word	0x0004c1f8
   3a910:	0004c1d4 	.word	0x0004c1d4
   3a914:	00044dbf 	.word	0x00044dbf
   3a918:	0004c235 	.word	0x0004c235
   3a91c:	0004593a 	.word	0x0004593a
   3a920:	00045955 	.word	0x00045955
   3a924:	20015a30 	.word	0x20015a30

0003a928 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   3a928:	b513      	push	{r0, r1, r4, lr}
   3a92a:	4604      	mov	r4, r0
   3a92c:	9101      	str	r1, [sp, #4]
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   3a92e:	f007 f867 	bl	41a00 <k_is_in_isr>
   3a932:	9a01      	ldr	r2, [sp, #4]
   3a934:	b958      	cbnz	r0, 3a94e <z_thread_aligned_alloc+0x26>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   3a936:	4b08      	ldr	r3, [pc, #32]	; (3a958 <z_thread_aligned_alloc+0x30>)
   3a938:	689b      	ldr	r3, [r3, #8]
   3a93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	}

	if (heap) {
   3a93e:	b143      	cbz	r3, 3a952 <z_thread_aligned_alloc+0x2a>
		ret = z_heap_aligned_alloc(heap, align, size);
   3a940:	4621      	mov	r1, r4
   3a942:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   3a944:	b002      	add	sp, #8
   3a946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   3a94a:	f007 b947 	b.w	41bdc <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   3a94e:	4b03      	ldr	r3, [pc, #12]	; (3a95c <z_thread_aligned_alloc+0x34>)
   3a950:	e7f6      	b.n	3a940 <z_thread_aligned_alloc+0x18>
}
   3a952:	b002      	add	sp, #8
   3a954:	bd10      	pop	{r4, pc}
   3a956:	bf00      	nop
   3a958:	2001a07c 	.word	0x2001a07c
   3a95c:	20015a30 	.word	0x20015a30

0003a960 <__assert_func>:
   3a960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3a962:	4614      	mov	r4, r2
   3a964:	461a      	mov	r2, r3
   3a966:	4b09      	ldr	r3, [pc, #36]	; (3a98c <__assert_func+0x2c>)
   3a968:	4605      	mov	r5, r0
   3a96a:	681b      	ldr	r3, [r3, #0]
   3a96c:	68d8      	ldr	r0, [r3, #12]
   3a96e:	b14c      	cbz	r4, 3a984 <__assert_func+0x24>
   3a970:	4b07      	ldr	r3, [pc, #28]	; (3a990 <__assert_func+0x30>)
   3a972:	9100      	str	r1, [sp, #0]
   3a974:	4907      	ldr	r1, [pc, #28]	; (3a994 <__assert_func+0x34>)
   3a976:	e9cd 3401 	strd	r3, r4, [sp, #4]
   3a97a:	462b      	mov	r3, r5
   3a97c:	f000 f80e 	bl	3a99c <fiprintf>
   3a980:	f007 fc2b 	bl	421da <abort>
   3a984:	4b04      	ldr	r3, [pc, #16]	; (3a998 <__assert_func+0x38>)
   3a986:	461c      	mov	r4, r3
   3a988:	e7f3      	b.n	3a972 <__assert_func+0x12>
   3a98a:	bf00      	nop
   3a98c:	2001563c 	.word	0x2001563c
   3a990:	0004c262 	.word	0x0004c262
   3a994:	0004c26f 	.word	0x0004c26f
   3a998:	00045c29 	.word	0x00045c29

0003a99c <fiprintf>:
   3a99c:	b40e      	push	{r1, r2, r3}
   3a99e:	b503      	push	{r0, r1, lr}
   3a9a0:	ab03      	add	r3, sp, #12
   3a9a2:	4601      	mov	r1, r0
   3a9a4:	4805      	ldr	r0, [pc, #20]	; (3a9bc <fiprintf+0x20>)
   3a9a6:	f853 2b04 	ldr.w	r2, [r3], #4
   3a9aa:	6800      	ldr	r0, [r0, #0]
   3a9ac:	9301      	str	r3, [sp, #4]
   3a9ae:	f000 f8c1 	bl	3ab34 <_vfiprintf_r>
   3a9b2:	b002      	add	sp, #8
   3a9b4:	f85d eb04 	ldr.w	lr, [sp], #4
   3a9b8:	b003      	add	sp, #12
   3a9ba:	4770      	bx	lr
   3a9bc:	2001563c 	.word	0x2001563c

0003a9c0 <malloc>:
   3a9c0:	4b02      	ldr	r3, [pc, #8]	; (3a9cc <malloc+0xc>)
   3a9c2:	4601      	mov	r1, r0
   3a9c4:	6818      	ldr	r0, [r3, #0]
   3a9c6:	f000 b85b 	b.w	3aa80 <_malloc_r>
   3a9ca:	bf00      	nop
   3a9cc:	2001563c 	.word	0x2001563c

0003a9d0 <free>:
   3a9d0:	4b02      	ldr	r3, [pc, #8]	; (3a9dc <free+0xc>)
   3a9d2:	4601      	mov	r1, r0
   3a9d4:	6818      	ldr	r0, [r3, #0]
   3a9d6:	f000 b803 	b.w	3a9e0 <_free_r>
   3a9da:	bf00      	nop
   3a9dc:	2001563c 	.word	0x2001563c

0003a9e0 <_free_r>:
   3a9e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3a9e2:	2900      	cmp	r1, #0
   3a9e4:	d047      	beq.n	3aa76 <_free_r+0x96>
   3a9e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   3a9ea:	1f0c      	subs	r4, r1, #4
   3a9ec:	9001      	str	r0, [sp, #4]
   3a9ee:	2b00      	cmp	r3, #0
   3a9f0:	bfb8      	it	lt
   3a9f2:	18e4      	addlt	r4, r4, r3
   3a9f4:	f001 fc26 	bl	3c244 <__malloc_lock>
   3a9f8:	4a20      	ldr	r2, [pc, #128]	; (3aa7c <_free_r+0x9c>)
   3a9fa:	9801      	ldr	r0, [sp, #4]
   3a9fc:	6813      	ldr	r3, [r2, #0]
   3a9fe:	4615      	mov	r5, r2
   3aa00:	b933      	cbnz	r3, 3aa10 <_free_r+0x30>
   3aa02:	6063      	str	r3, [r4, #4]
   3aa04:	6014      	str	r4, [r2, #0]
   3aa06:	b003      	add	sp, #12
   3aa08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3aa0c:	f001 bc20 	b.w	3c250 <__malloc_unlock>
   3aa10:	42a3      	cmp	r3, r4
   3aa12:	d90b      	bls.n	3aa2c <_free_r+0x4c>
   3aa14:	6821      	ldr	r1, [r4, #0]
   3aa16:	1862      	adds	r2, r4, r1
   3aa18:	4293      	cmp	r3, r2
   3aa1a:	bf02      	ittt	eq
   3aa1c:	681a      	ldreq	r2, [r3, #0]
   3aa1e:	685b      	ldreq	r3, [r3, #4]
   3aa20:	1852      	addeq	r2, r2, r1
   3aa22:	6063      	str	r3, [r4, #4]
   3aa24:	bf08      	it	eq
   3aa26:	6022      	streq	r2, [r4, #0]
   3aa28:	602c      	str	r4, [r5, #0]
   3aa2a:	e7ec      	b.n	3aa06 <_free_r+0x26>
   3aa2c:	461a      	mov	r2, r3
   3aa2e:	685b      	ldr	r3, [r3, #4]
   3aa30:	b10b      	cbz	r3, 3aa36 <_free_r+0x56>
   3aa32:	42a3      	cmp	r3, r4
   3aa34:	d9fa      	bls.n	3aa2c <_free_r+0x4c>
   3aa36:	6811      	ldr	r1, [r2, #0]
   3aa38:	1855      	adds	r5, r2, r1
   3aa3a:	42a5      	cmp	r5, r4
   3aa3c:	d10b      	bne.n	3aa56 <_free_r+0x76>
   3aa3e:	6824      	ldr	r4, [r4, #0]
   3aa40:	4421      	add	r1, r4
   3aa42:	1854      	adds	r4, r2, r1
   3aa44:	6011      	str	r1, [r2, #0]
   3aa46:	42a3      	cmp	r3, r4
   3aa48:	d1dd      	bne.n	3aa06 <_free_r+0x26>
   3aa4a:	681c      	ldr	r4, [r3, #0]
   3aa4c:	685b      	ldr	r3, [r3, #4]
   3aa4e:	4421      	add	r1, r4
   3aa50:	6053      	str	r3, [r2, #4]
   3aa52:	6011      	str	r1, [r2, #0]
   3aa54:	e7d7      	b.n	3aa06 <_free_r+0x26>
   3aa56:	d902      	bls.n	3aa5e <_free_r+0x7e>
   3aa58:	230c      	movs	r3, #12
   3aa5a:	6003      	str	r3, [r0, #0]
   3aa5c:	e7d3      	b.n	3aa06 <_free_r+0x26>
   3aa5e:	6825      	ldr	r5, [r4, #0]
   3aa60:	1961      	adds	r1, r4, r5
   3aa62:	428b      	cmp	r3, r1
   3aa64:	bf02      	ittt	eq
   3aa66:	6819      	ldreq	r1, [r3, #0]
   3aa68:	685b      	ldreq	r3, [r3, #4]
   3aa6a:	1949      	addeq	r1, r1, r5
   3aa6c:	6063      	str	r3, [r4, #4]
   3aa6e:	bf08      	it	eq
   3aa70:	6021      	streq	r1, [r4, #0]
   3aa72:	6054      	str	r4, [r2, #4]
   3aa74:	e7c7      	b.n	3aa06 <_free_r+0x26>
   3aa76:	b003      	add	sp, #12
   3aa78:	bd30      	pop	{r4, r5, pc}
   3aa7a:	bf00      	nop
   3aa7c:	2001e0d8 	.word	0x2001e0d8

0003aa80 <_malloc_r>:
   3aa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3aa82:	1ccd      	adds	r5, r1, #3
   3aa84:	4606      	mov	r6, r0
   3aa86:	f025 0503 	bic.w	r5, r5, #3
   3aa8a:	3508      	adds	r5, #8
   3aa8c:	2d0c      	cmp	r5, #12
   3aa8e:	bf38      	it	cc
   3aa90:	250c      	movcc	r5, #12
   3aa92:	2d00      	cmp	r5, #0
   3aa94:	db01      	blt.n	3aa9a <_malloc_r+0x1a>
   3aa96:	42a9      	cmp	r1, r5
   3aa98:	d903      	bls.n	3aaa2 <_malloc_r+0x22>
   3aa9a:	230c      	movs	r3, #12
   3aa9c:	6033      	str	r3, [r6, #0]
   3aa9e:	2000      	movs	r0, #0
   3aaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3aaa2:	f001 fbcf 	bl	3c244 <__malloc_lock>
   3aaa6:	4921      	ldr	r1, [pc, #132]	; (3ab2c <_malloc_r+0xac>)
   3aaa8:	680a      	ldr	r2, [r1, #0]
   3aaaa:	4614      	mov	r4, r2
   3aaac:	b99c      	cbnz	r4, 3aad6 <_malloc_r+0x56>
   3aaae:	4f20      	ldr	r7, [pc, #128]	; (3ab30 <_malloc_r+0xb0>)
   3aab0:	683b      	ldr	r3, [r7, #0]
   3aab2:	b923      	cbnz	r3, 3aabe <_malloc_r+0x3e>
   3aab4:	4621      	mov	r1, r4
   3aab6:	4630      	mov	r0, r6
   3aab8:	f000 fd28 	bl	3b50c <_sbrk_r>
   3aabc:	6038      	str	r0, [r7, #0]
   3aabe:	4629      	mov	r1, r5
   3aac0:	4630      	mov	r0, r6
   3aac2:	f000 fd23 	bl	3b50c <_sbrk_r>
   3aac6:	1c43      	adds	r3, r0, #1
   3aac8:	d123      	bne.n	3ab12 <_malloc_r+0x92>
   3aaca:	230c      	movs	r3, #12
   3aacc:	4630      	mov	r0, r6
   3aace:	6033      	str	r3, [r6, #0]
   3aad0:	f001 fbbe 	bl	3c250 <__malloc_unlock>
   3aad4:	e7e3      	b.n	3aa9e <_malloc_r+0x1e>
   3aad6:	6823      	ldr	r3, [r4, #0]
   3aad8:	1b5b      	subs	r3, r3, r5
   3aada:	d417      	bmi.n	3ab0c <_malloc_r+0x8c>
   3aadc:	2b0b      	cmp	r3, #11
   3aade:	d903      	bls.n	3aae8 <_malloc_r+0x68>
   3aae0:	6023      	str	r3, [r4, #0]
   3aae2:	441c      	add	r4, r3
   3aae4:	6025      	str	r5, [r4, #0]
   3aae6:	e004      	b.n	3aaf2 <_malloc_r+0x72>
   3aae8:	6863      	ldr	r3, [r4, #4]
   3aaea:	42a2      	cmp	r2, r4
   3aaec:	bf0c      	ite	eq
   3aaee:	600b      	streq	r3, [r1, #0]
   3aaf0:	6053      	strne	r3, [r2, #4]
   3aaf2:	4630      	mov	r0, r6
   3aaf4:	f001 fbac 	bl	3c250 <__malloc_unlock>
   3aaf8:	f104 000b 	add.w	r0, r4, #11
   3aafc:	1d23      	adds	r3, r4, #4
   3aafe:	f020 0007 	bic.w	r0, r0, #7
   3ab02:	1ac2      	subs	r2, r0, r3
   3ab04:	d0cc      	beq.n	3aaa0 <_malloc_r+0x20>
   3ab06:	1a1b      	subs	r3, r3, r0
   3ab08:	50a3      	str	r3, [r4, r2]
   3ab0a:	e7c9      	b.n	3aaa0 <_malloc_r+0x20>
   3ab0c:	4622      	mov	r2, r4
   3ab0e:	6864      	ldr	r4, [r4, #4]
   3ab10:	e7cc      	b.n	3aaac <_malloc_r+0x2c>
   3ab12:	1cc4      	adds	r4, r0, #3
   3ab14:	f024 0403 	bic.w	r4, r4, #3
   3ab18:	42a0      	cmp	r0, r4
   3ab1a:	d0e3      	beq.n	3aae4 <_malloc_r+0x64>
   3ab1c:	1a21      	subs	r1, r4, r0
   3ab1e:	4630      	mov	r0, r6
   3ab20:	f000 fcf4 	bl	3b50c <_sbrk_r>
   3ab24:	3001      	adds	r0, #1
   3ab26:	d1dd      	bne.n	3aae4 <_malloc_r+0x64>
   3ab28:	e7cf      	b.n	3aaca <_malloc_r+0x4a>
   3ab2a:	bf00      	nop
   3ab2c:	2001e0d8 	.word	0x2001e0d8
   3ab30:	2001e0dc 	.word	0x2001e0dc

0003ab34 <_vfiprintf_r>:
   3ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ab38:	460d      	mov	r5, r1
   3ab3a:	b09d      	sub	sp, #116	; 0x74
   3ab3c:	4614      	mov	r4, r2
   3ab3e:	4698      	mov	r8, r3
   3ab40:	4606      	mov	r6, r0
   3ab42:	b118      	cbz	r0, 3ab4c <_vfiprintf_r+0x18>
   3ab44:	6983      	ldr	r3, [r0, #24]
   3ab46:	b90b      	cbnz	r3, 3ab4c <_vfiprintf_r+0x18>
   3ab48:	f001 f874 	bl	3bc34 <__sinit>
   3ab4c:	4b89      	ldr	r3, [pc, #548]	; (3ad74 <_vfiprintf_r+0x240>)
   3ab4e:	429d      	cmp	r5, r3
   3ab50:	d11b      	bne.n	3ab8a <_vfiprintf_r+0x56>
   3ab52:	6875      	ldr	r5, [r6, #4]
   3ab54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ab56:	07d9      	lsls	r1, r3, #31
   3ab58:	d405      	bmi.n	3ab66 <_vfiprintf_r+0x32>
   3ab5a:	89ab      	ldrh	r3, [r5, #12]
   3ab5c:	059a      	lsls	r2, r3, #22
   3ab5e:	d402      	bmi.n	3ab66 <_vfiprintf_r+0x32>
   3ab60:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3ab62:	f007 fd2e 	bl	425c2 <__retarget_lock_acquire_recursive>
   3ab66:	89ab      	ldrh	r3, [r5, #12]
   3ab68:	071b      	lsls	r3, r3, #28
   3ab6a:	d501      	bpl.n	3ab70 <_vfiprintf_r+0x3c>
   3ab6c:	692b      	ldr	r3, [r5, #16]
   3ab6e:	b9eb      	cbnz	r3, 3abac <_vfiprintf_r+0x78>
   3ab70:	4629      	mov	r1, r5
   3ab72:	4630      	mov	r0, r6
   3ab74:	f000 fede 	bl	3b934 <__swsetup_r>
   3ab78:	b1c0      	cbz	r0, 3abac <_vfiprintf_r+0x78>
   3ab7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ab7c:	07dc      	lsls	r4, r3, #31
   3ab7e:	d50e      	bpl.n	3ab9e <_vfiprintf_r+0x6a>
   3ab80:	f04f 30ff 	mov.w	r0, #4294967295
   3ab84:	b01d      	add	sp, #116	; 0x74
   3ab86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ab8a:	4b7b      	ldr	r3, [pc, #492]	; (3ad78 <_vfiprintf_r+0x244>)
   3ab8c:	429d      	cmp	r5, r3
   3ab8e:	d101      	bne.n	3ab94 <_vfiprintf_r+0x60>
   3ab90:	68b5      	ldr	r5, [r6, #8]
   3ab92:	e7df      	b.n	3ab54 <_vfiprintf_r+0x20>
   3ab94:	4b79      	ldr	r3, [pc, #484]	; (3ad7c <_vfiprintf_r+0x248>)
   3ab96:	429d      	cmp	r5, r3
   3ab98:	bf08      	it	eq
   3ab9a:	68f5      	ldreq	r5, [r6, #12]
   3ab9c:	e7da      	b.n	3ab54 <_vfiprintf_r+0x20>
   3ab9e:	89ab      	ldrh	r3, [r5, #12]
   3aba0:	0598      	lsls	r0, r3, #22
   3aba2:	d4ed      	bmi.n	3ab80 <_vfiprintf_r+0x4c>
   3aba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3aba6:	f007 fd0d 	bl	425c4 <__retarget_lock_release_recursive>
   3abaa:	e7e9      	b.n	3ab80 <_vfiprintf_r+0x4c>
   3abac:	2300      	movs	r3, #0
   3abae:	f8cd 800c 	str.w	r8, [sp, #12]
   3abb2:	f04f 0901 	mov.w	r9, #1
   3abb6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 3ad80 <_vfiprintf_r+0x24c>
   3abba:	9309      	str	r3, [sp, #36]	; 0x24
   3abbc:	2320      	movs	r3, #32
   3abbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3abc2:	2330      	movs	r3, #48	; 0x30
   3abc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3abc8:	4623      	mov	r3, r4
   3abca:	469a      	mov	sl, r3
   3abcc:	f813 2b01 	ldrb.w	r2, [r3], #1
   3abd0:	b10a      	cbz	r2, 3abd6 <_vfiprintf_r+0xa2>
   3abd2:	2a25      	cmp	r2, #37	; 0x25
   3abd4:	d1f9      	bne.n	3abca <_vfiprintf_r+0x96>
   3abd6:	ebba 0b04 	subs.w	fp, sl, r4
   3abda:	d00b      	beq.n	3abf4 <_vfiprintf_r+0xc0>
   3abdc:	465b      	mov	r3, fp
   3abde:	4622      	mov	r2, r4
   3abe0:	4629      	mov	r1, r5
   3abe2:	4630      	mov	r0, r6
   3abe4:	f007 f8a3 	bl	41d2e <__sfputs_r>
   3abe8:	3001      	adds	r0, #1
   3abea:	f000 80aa 	beq.w	3ad42 <_vfiprintf_r+0x20e>
   3abee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3abf0:	445a      	add	r2, fp
   3abf2:	9209      	str	r2, [sp, #36]	; 0x24
   3abf4:	f89a 3000 	ldrb.w	r3, [sl]
   3abf8:	2b00      	cmp	r3, #0
   3abfa:	f000 80a2 	beq.w	3ad42 <_vfiprintf_r+0x20e>
   3abfe:	2300      	movs	r3, #0
   3ac00:	f04f 32ff 	mov.w	r2, #4294967295
   3ac04:	f10a 0a01 	add.w	sl, sl, #1
   3ac08:	9304      	str	r3, [sp, #16]
   3ac0a:	9307      	str	r3, [sp, #28]
   3ac0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3ac10:	931a      	str	r3, [sp, #104]	; 0x68
   3ac12:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3ac16:	4654      	mov	r4, sl
   3ac18:	2205      	movs	r2, #5
   3ac1a:	4859      	ldr	r0, [pc, #356]	; (3ad80 <_vfiprintf_r+0x24c>)
   3ac1c:	f814 1b01 	ldrb.w	r1, [r4], #1
   3ac20:	f007 f821 	bl	41c66 <memchr>
   3ac24:	9a04      	ldr	r2, [sp, #16]
   3ac26:	b9d8      	cbnz	r0, 3ac60 <_vfiprintf_r+0x12c>
   3ac28:	06d1      	lsls	r1, r2, #27
   3ac2a:	bf44      	itt	mi
   3ac2c:	2320      	movmi	r3, #32
   3ac2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3ac32:	0713      	lsls	r3, r2, #28
   3ac34:	bf44      	itt	mi
   3ac36:	232b      	movmi	r3, #43	; 0x2b
   3ac38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3ac3c:	f89a 3000 	ldrb.w	r3, [sl]
   3ac40:	2b2a      	cmp	r3, #42	; 0x2a
   3ac42:	d015      	beq.n	3ac70 <_vfiprintf_r+0x13c>
   3ac44:	9a07      	ldr	r2, [sp, #28]
   3ac46:	4654      	mov	r4, sl
   3ac48:	2000      	movs	r0, #0
   3ac4a:	f04f 0c0a 	mov.w	ip, #10
   3ac4e:	4621      	mov	r1, r4
   3ac50:	f811 3b01 	ldrb.w	r3, [r1], #1
   3ac54:	3b30      	subs	r3, #48	; 0x30
   3ac56:	2b09      	cmp	r3, #9
   3ac58:	d94e      	bls.n	3acf8 <_vfiprintf_r+0x1c4>
   3ac5a:	b1b0      	cbz	r0, 3ac8a <_vfiprintf_r+0x156>
   3ac5c:	9207      	str	r2, [sp, #28]
   3ac5e:	e014      	b.n	3ac8a <_vfiprintf_r+0x156>
   3ac60:	eba0 0308 	sub.w	r3, r0, r8
   3ac64:	46a2      	mov	sl, r4
   3ac66:	fa09 f303 	lsl.w	r3, r9, r3
   3ac6a:	4313      	orrs	r3, r2
   3ac6c:	9304      	str	r3, [sp, #16]
   3ac6e:	e7d2      	b.n	3ac16 <_vfiprintf_r+0xe2>
   3ac70:	9b03      	ldr	r3, [sp, #12]
   3ac72:	1d19      	adds	r1, r3, #4
   3ac74:	681b      	ldr	r3, [r3, #0]
   3ac76:	2b00      	cmp	r3, #0
   3ac78:	9103      	str	r1, [sp, #12]
   3ac7a:	bfbb      	ittet	lt
   3ac7c:	425b      	neglt	r3, r3
   3ac7e:	f042 0202 	orrlt.w	r2, r2, #2
   3ac82:	9307      	strge	r3, [sp, #28]
   3ac84:	9307      	strlt	r3, [sp, #28]
   3ac86:	bfb8      	it	lt
   3ac88:	9204      	strlt	r2, [sp, #16]
   3ac8a:	7823      	ldrb	r3, [r4, #0]
   3ac8c:	2b2e      	cmp	r3, #46	; 0x2e
   3ac8e:	d10c      	bne.n	3acaa <_vfiprintf_r+0x176>
   3ac90:	7863      	ldrb	r3, [r4, #1]
   3ac92:	2b2a      	cmp	r3, #42	; 0x2a
   3ac94:	d135      	bne.n	3ad02 <_vfiprintf_r+0x1ce>
   3ac96:	9b03      	ldr	r3, [sp, #12]
   3ac98:	3402      	adds	r4, #2
   3ac9a:	1d1a      	adds	r2, r3, #4
   3ac9c:	681b      	ldr	r3, [r3, #0]
   3ac9e:	2b00      	cmp	r3, #0
   3aca0:	9203      	str	r2, [sp, #12]
   3aca2:	bfb8      	it	lt
   3aca4:	f04f 33ff 	movlt.w	r3, #4294967295
   3aca8:	9305      	str	r3, [sp, #20]
   3acaa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 3ad90 <_vfiprintf_r+0x25c>
   3acae:	2203      	movs	r2, #3
   3acb0:	7821      	ldrb	r1, [r4, #0]
   3acb2:	4650      	mov	r0, sl
   3acb4:	f006 ffd7 	bl	41c66 <memchr>
   3acb8:	b140      	cbz	r0, 3accc <_vfiprintf_r+0x198>
   3acba:	2340      	movs	r3, #64	; 0x40
   3acbc:	eba0 000a 	sub.w	r0, r0, sl
   3acc0:	3401      	adds	r4, #1
   3acc2:	fa03 f000 	lsl.w	r0, r3, r0
   3acc6:	9b04      	ldr	r3, [sp, #16]
   3acc8:	4303      	orrs	r3, r0
   3acca:	9304      	str	r3, [sp, #16]
   3accc:	f814 1b01 	ldrb.w	r1, [r4], #1
   3acd0:	2206      	movs	r2, #6
   3acd2:	482c      	ldr	r0, [pc, #176]	; (3ad84 <_vfiprintf_r+0x250>)
   3acd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3acd8:	f006 ffc5 	bl	41c66 <memchr>
   3acdc:	2800      	cmp	r0, #0
   3acde:	d03f      	beq.n	3ad60 <_vfiprintf_r+0x22c>
   3ace0:	4b29      	ldr	r3, [pc, #164]	; (3ad88 <_vfiprintf_r+0x254>)
   3ace2:	bb1b      	cbnz	r3, 3ad2c <_vfiprintf_r+0x1f8>
   3ace4:	9b03      	ldr	r3, [sp, #12]
   3ace6:	3307      	adds	r3, #7
   3ace8:	f023 0307 	bic.w	r3, r3, #7
   3acec:	3308      	adds	r3, #8
   3acee:	9303      	str	r3, [sp, #12]
   3acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3acf2:	443b      	add	r3, r7
   3acf4:	9309      	str	r3, [sp, #36]	; 0x24
   3acf6:	e767      	b.n	3abc8 <_vfiprintf_r+0x94>
   3acf8:	fb0c 3202 	mla	r2, ip, r2, r3
   3acfc:	460c      	mov	r4, r1
   3acfe:	2001      	movs	r0, #1
   3ad00:	e7a5      	b.n	3ac4e <_vfiprintf_r+0x11a>
   3ad02:	2300      	movs	r3, #0
   3ad04:	3401      	adds	r4, #1
   3ad06:	f04f 0c0a 	mov.w	ip, #10
   3ad0a:	4619      	mov	r1, r3
   3ad0c:	9305      	str	r3, [sp, #20]
   3ad0e:	4620      	mov	r0, r4
   3ad10:	f810 2b01 	ldrb.w	r2, [r0], #1
   3ad14:	3a30      	subs	r2, #48	; 0x30
   3ad16:	2a09      	cmp	r2, #9
   3ad18:	d903      	bls.n	3ad22 <_vfiprintf_r+0x1ee>
   3ad1a:	2b00      	cmp	r3, #0
   3ad1c:	d0c5      	beq.n	3acaa <_vfiprintf_r+0x176>
   3ad1e:	9105      	str	r1, [sp, #20]
   3ad20:	e7c3      	b.n	3acaa <_vfiprintf_r+0x176>
   3ad22:	fb0c 2101 	mla	r1, ip, r1, r2
   3ad26:	4604      	mov	r4, r0
   3ad28:	2301      	movs	r3, #1
   3ad2a:	e7f0      	b.n	3ad0e <_vfiprintf_r+0x1da>
   3ad2c:	ab03      	add	r3, sp, #12
   3ad2e:	462a      	mov	r2, r5
   3ad30:	a904      	add	r1, sp, #16
   3ad32:	4630      	mov	r0, r6
   3ad34:	9300      	str	r3, [sp, #0]
   3ad36:	4b15      	ldr	r3, [pc, #84]	; (3ad8c <_vfiprintf_r+0x258>)
   3ad38:	f000 f82c 	bl	3ad94 <_printf_float>
   3ad3c:	4607      	mov	r7, r0
   3ad3e:	1c78      	adds	r0, r7, #1
   3ad40:	d1d6      	bne.n	3acf0 <_vfiprintf_r+0x1bc>
   3ad42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   3ad44:	07d9      	lsls	r1, r3, #31
   3ad46:	d405      	bmi.n	3ad54 <_vfiprintf_r+0x220>
   3ad48:	89ab      	ldrh	r3, [r5, #12]
   3ad4a:	059a      	lsls	r2, r3, #22
   3ad4c:	d402      	bmi.n	3ad54 <_vfiprintf_r+0x220>
   3ad4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   3ad50:	f007 fc38 	bl	425c4 <__retarget_lock_release_recursive>
   3ad54:	89ab      	ldrh	r3, [r5, #12]
   3ad56:	065b      	lsls	r3, r3, #25
   3ad58:	f53f af12 	bmi.w	3ab80 <_vfiprintf_r+0x4c>
   3ad5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   3ad5e:	e711      	b.n	3ab84 <_vfiprintf_r+0x50>
   3ad60:	ab03      	add	r3, sp, #12
   3ad62:	462a      	mov	r2, r5
   3ad64:	a904      	add	r1, sp, #16
   3ad66:	4630      	mov	r0, r6
   3ad68:	9300      	str	r3, [sp, #0]
   3ad6a:	4b08      	ldr	r3, [pc, #32]	; (3ad8c <_vfiprintf_r+0x258>)
   3ad6c:	f000 fa48 	bl	3b200 <_printf_i>
   3ad70:	e7e4      	b.n	3ad3c <_vfiprintf_r+0x208>
   3ad72:	bf00      	nop
   3ad74:	0004413c 	.word	0x0004413c
   3ad78:	0004415c 	.word	0x0004415c
   3ad7c:	0004411c 	.word	0x0004411c
   3ad80:	0004c39f 	.word	0x0004c39f
   3ad84:	0004c3a9 	.word	0x0004c3a9
   3ad88:	0003ad95 	.word	0x0003ad95
   3ad8c:	00041d2f 	.word	0x00041d2f
   3ad90:	0004c3a5 	.word	0x0004c3a5

0003ad94 <_printf_float>:
   3ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ad98:	ed2d 8b02 	vpush	{d8}
   3ad9c:	b08d      	sub	sp, #52	; 0x34
   3ad9e:	460c      	mov	r4, r1
   3ada0:	4616      	mov	r6, r2
   3ada2:	461f      	mov	r7, r3
   3ada4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   3ada8:	4605      	mov	r5, r0
   3adaa:	f001 f9f5 	bl	3c198 <_localeconv_r>
   3adae:	f8d0 a000 	ldr.w	sl, [r0]
   3adb2:	4650      	mov	r0, sl
   3adb4:	f7e2 fa52 	bl	1d25c <strlen>
   3adb8:	2300      	movs	r3, #0
   3adba:	f894 b018 	ldrb.w	fp, [r4, #24]
   3adbe:	ee08 0a10 	vmov	s16, r0
   3adc2:	930a      	str	r3, [sp, #40]	; 0x28
   3adc4:	6823      	ldr	r3, [r4, #0]
   3adc6:	9305      	str	r3, [sp, #20]
   3adc8:	f8d8 3000 	ldr.w	r3, [r8]
   3adcc:	3307      	adds	r3, #7
   3adce:	f023 0307 	bic.w	r3, r3, #7
   3add2:	f103 0208 	add.w	r2, r3, #8
   3add6:	f8c8 2000 	str.w	r2, [r8]
   3adda:	e9d3 2300 	ldrd	r2, r3, [r3]
   3adde:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   3ade2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
   3ade6:	f04f 32ff 	mov.w	r2, #4294967295
   3adea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
   3adee:	f8cd 8018 	str.w	r8, [sp, #24]
   3adf2:	9307      	str	r3, [sp, #28]
   3adf4:	4b9e      	ldr	r3, [pc, #632]	; (3b070 <_printf_float+0x2dc>)
   3adf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   3adfa:	f7e2 fa0f 	bl	1d21c <__aeabi_dcmpun>
   3adfe:	bb88      	cbnz	r0, 3ae64 <_printf_float+0xd0>
   3ae00:	f04f 32ff 	mov.w	r2, #4294967295
   3ae04:	4b9a      	ldr	r3, [pc, #616]	; (3b070 <_printf_float+0x2dc>)
   3ae06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   3ae0a:	f7e1 ff51 	bl	1ccb0 <__aeabi_dcmple>
   3ae0e:	bb48      	cbnz	r0, 3ae64 <_printf_float+0xd0>
   3ae10:	2200      	movs	r2, #0
   3ae12:	2300      	movs	r3, #0
   3ae14:	4640      	mov	r0, r8
   3ae16:	4649      	mov	r1, r9
   3ae18:	f7e1 ff40 	bl	1cc9c <__aeabi_dcmplt>
   3ae1c:	b110      	cbz	r0, 3ae24 <_printf_float+0x90>
   3ae1e:	232d      	movs	r3, #45	; 0x2d
   3ae20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3ae24:	4b93      	ldr	r3, [pc, #588]	; (3b074 <_printf_float+0x2e0>)
   3ae26:	4894      	ldr	r0, [pc, #592]	; (3b078 <_printf_float+0x2e4>)
   3ae28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   3ae2c:	bf94      	ite	ls
   3ae2e:	4698      	movls	r8, r3
   3ae30:	4680      	movhi	r8, r0
   3ae32:	2303      	movs	r3, #3
   3ae34:	f04f 0900 	mov.w	r9, #0
   3ae38:	6123      	str	r3, [r4, #16]
   3ae3a:	9b05      	ldr	r3, [sp, #20]
   3ae3c:	f023 0204 	bic.w	r2, r3, #4
   3ae40:	6022      	str	r2, [r4, #0]
   3ae42:	4633      	mov	r3, r6
   3ae44:	aa0b      	add	r2, sp, #44	; 0x2c
   3ae46:	4621      	mov	r1, r4
   3ae48:	4628      	mov	r0, r5
   3ae4a:	9700      	str	r7, [sp, #0]
   3ae4c:	f007 f821 	bl	41e92 <_printf_common>
   3ae50:	3001      	adds	r0, #1
   3ae52:	f040 8090 	bne.w	3af76 <_printf_float+0x1e2>
   3ae56:	f04f 30ff 	mov.w	r0, #4294967295
   3ae5a:	b00d      	add	sp, #52	; 0x34
   3ae5c:	ecbd 8b02 	vpop	{d8}
   3ae60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ae64:	4642      	mov	r2, r8
   3ae66:	464b      	mov	r3, r9
   3ae68:	4640      	mov	r0, r8
   3ae6a:	4649      	mov	r1, r9
   3ae6c:	f7e2 f9d6 	bl	1d21c <__aeabi_dcmpun>
   3ae70:	b140      	cbz	r0, 3ae84 <_printf_float+0xf0>
   3ae72:	464b      	mov	r3, r9
   3ae74:	4881      	ldr	r0, [pc, #516]	; (3b07c <_printf_float+0x2e8>)
   3ae76:	2b00      	cmp	r3, #0
   3ae78:	bfbc      	itt	lt
   3ae7a:	232d      	movlt	r3, #45	; 0x2d
   3ae7c:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   3ae80:	4b7f      	ldr	r3, [pc, #508]	; (3b080 <_printf_float+0x2ec>)
   3ae82:	e7d1      	b.n	3ae28 <_printf_float+0x94>
   3ae84:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   3ae88:	6863      	ldr	r3, [r4, #4]
   3ae8a:	9206      	str	r2, [sp, #24]
   3ae8c:	1c5a      	adds	r2, r3, #1
   3ae8e:	d13f      	bne.n	3af10 <_printf_float+0x17c>
   3ae90:	2306      	movs	r3, #6
   3ae92:	6063      	str	r3, [r4, #4]
   3ae94:	9b05      	ldr	r3, [sp, #20]
   3ae96:	4628      	mov	r0, r5
   3ae98:	6861      	ldr	r1, [r4, #4]
   3ae9a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
   3ae9e:	2300      	movs	r3, #0
   3aea0:	9303      	str	r3, [sp, #12]
   3aea2:	ab0a      	add	r3, sp, #40	; 0x28
   3aea4:	6022      	str	r2, [r4, #0]
   3aea6:	e9cd b301 	strd	fp, r3, [sp, #4]
   3aeaa:	ab09      	add	r3, sp, #36	; 0x24
   3aeac:	ec49 8b10 	vmov	d0, r8, r9
   3aeb0:	9300      	str	r3, [sp, #0]
   3aeb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   3aeb6:	f006 ff4c 	bl	41d52 <__cvt>
   3aeba:	9b06      	ldr	r3, [sp, #24]
   3aebc:	4680      	mov	r8, r0
   3aebe:	9909      	ldr	r1, [sp, #36]	; 0x24
   3aec0:	2b47      	cmp	r3, #71	; 0x47
   3aec2:	d108      	bne.n	3aed6 <_printf_float+0x142>
   3aec4:	1cc8      	adds	r0, r1, #3
   3aec6:	db02      	blt.n	3aece <_printf_float+0x13a>
   3aec8:	6863      	ldr	r3, [r4, #4]
   3aeca:	4299      	cmp	r1, r3
   3aecc:	dd41      	ble.n	3af52 <_printf_float+0x1be>
   3aece:	f1ab 0b02 	sub.w	fp, fp, #2
   3aed2:	fa5f fb8b 	uxtb.w	fp, fp
   3aed6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3aeda:	d820      	bhi.n	3af1e <_printf_float+0x18a>
   3aedc:	3901      	subs	r1, #1
   3aede:	465a      	mov	r2, fp
   3aee0:	f104 0050 	add.w	r0, r4, #80	; 0x50
   3aee4:	9109      	str	r1, [sp, #36]	; 0x24
   3aee6:	f006 ff96 	bl	41e16 <__exponent>
   3aeea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3aeec:	4681      	mov	r9, r0
   3aeee:	1813      	adds	r3, r2, r0
   3aef0:	2a01      	cmp	r2, #1
   3aef2:	6123      	str	r3, [r4, #16]
   3aef4:	dc02      	bgt.n	3aefc <_printf_float+0x168>
   3aef6:	6822      	ldr	r2, [r4, #0]
   3aef8:	07d2      	lsls	r2, r2, #31
   3aefa:	d501      	bpl.n	3af00 <_printf_float+0x16c>
   3aefc:	3301      	adds	r3, #1
   3aefe:	6123      	str	r3, [r4, #16]
   3af00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   3af04:	2b00      	cmp	r3, #0
   3af06:	d09c      	beq.n	3ae42 <_printf_float+0xae>
   3af08:	232d      	movs	r3, #45	; 0x2d
   3af0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3af0e:	e798      	b.n	3ae42 <_printf_float+0xae>
   3af10:	9a06      	ldr	r2, [sp, #24]
   3af12:	2a47      	cmp	r2, #71	; 0x47
   3af14:	d1be      	bne.n	3ae94 <_printf_float+0x100>
   3af16:	2b00      	cmp	r3, #0
   3af18:	d1bc      	bne.n	3ae94 <_printf_float+0x100>
   3af1a:	2301      	movs	r3, #1
   3af1c:	e7b9      	b.n	3ae92 <_printf_float+0xfe>
   3af1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   3af22:	d118      	bne.n	3af56 <_printf_float+0x1c2>
   3af24:	2900      	cmp	r1, #0
   3af26:	6863      	ldr	r3, [r4, #4]
   3af28:	dd0b      	ble.n	3af42 <_printf_float+0x1ae>
   3af2a:	6121      	str	r1, [r4, #16]
   3af2c:	b913      	cbnz	r3, 3af34 <_printf_float+0x1a0>
   3af2e:	6822      	ldr	r2, [r4, #0]
   3af30:	07d0      	lsls	r0, r2, #31
   3af32:	d502      	bpl.n	3af3a <_printf_float+0x1a6>
   3af34:	3301      	adds	r3, #1
   3af36:	440b      	add	r3, r1
   3af38:	6123      	str	r3, [r4, #16]
   3af3a:	f04f 0900 	mov.w	r9, #0
   3af3e:	65a1      	str	r1, [r4, #88]	; 0x58
   3af40:	e7de      	b.n	3af00 <_printf_float+0x16c>
   3af42:	b913      	cbnz	r3, 3af4a <_printf_float+0x1b6>
   3af44:	6822      	ldr	r2, [r4, #0]
   3af46:	07d2      	lsls	r2, r2, #31
   3af48:	d501      	bpl.n	3af4e <_printf_float+0x1ba>
   3af4a:	3302      	adds	r3, #2
   3af4c:	e7f4      	b.n	3af38 <_printf_float+0x1a4>
   3af4e:	2301      	movs	r3, #1
   3af50:	e7f2      	b.n	3af38 <_printf_float+0x1a4>
   3af52:	f04f 0b67 	mov.w	fp, #103	; 0x67
   3af56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3af58:	4299      	cmp	r1, r3
   3af5a:	db05      	blt.n	3af68 <_printf_float+0x1d4>
   3af5c:	6823      	ldr	r3, [r4, #0]
   3af5e:	6121      	str	r1, [r4, #16]
   3af60:	07d8      	lsls	r0, r3, #31
   3af62:	d5ea      	bpl.n	3af3a <_printf_float+0x1a6>
   3af64:	1c4b      	adds	r3, r1, #1
   3af66:	e7e7      	b.n	3af38 <_printf_float+0x1a4>
   3af68:	2900      	cmp	r1, #0
   3af6a:	bfd4      	ite	le
   3af6c:	f1c1 0202 	rsble	r2, r1, #2
   3af70:	2201      	movgt	r2, #1
   3af72:	4413      	add	r3, r2
   3af74:	e7e0      	b.n	3af38 <_printf_float+0x1a4>
   3af76:	6823      	ldr	r3, [r4, #0]
   3af78:	055a      	lsls	r2, r3, #21
   3af7a:	d407      	bmi.n	3af8c <_printf_float+0x1f8>
   3af7c:	6923      	ldr	r3, [r4, #16]
   3af7e:	4642      	mov	r2, r8
   3af80:	4631      	mov	r1, r6
   3af82:	4628      	mov	r0, r5
   3af84:	47b8      	blx	r7
   3af86:	3001      	adds	r0, #1
   3af88:	d12c      	bne.n	3afe4 <_printf_float+0x250>
   3af8a:	e764      	b.n	3ae56 <_printf_float+0xc2>
   3af8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   3af90:	f240 80e0 	bls.w	3b154 <_printf_float+0x3c0>
   3af94:	2200      	movs	r2, #0
   3af96:	2300      	movs	r3, #0
   3af98:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3af9c:	f7e1 fe74 	bl	1cc88 <__aeabi_dcmpeq>
   3afa0:	2800      	cmp	r0, #0
   3afa2:	d034      	beq.n	3b00e <_printf_float+0x27a>
   3afa4:	2301      	movs	r3, #1
   3afa6:	4a37      	ldr	r2, [pc, #220]	; (3b084 <_printf_float+0x2f0>)
   3afa8:	4631      	mov	r1, r6
   3afaa:	4628      	mov	r0, r5
   3afac:	47b8      	blx	r7
   3afae:	3001      	adds	r0, #1
   3afb0:	f43f af51 	beq.w	3ae56 <_printf_float+0xc2>
   3afb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3afb8:	429a      	cmp	r2, r3
   3afba:	db02      	blt.n	3afc2 <_printf_float+0x22e>
   3afbc:	6823      	ldr	r3, [r4, #0]
   3afbe:	07d8      	lsls	r0, r3, #31
   3afc0:	d510      	bpl.n	3afe4 <_printf_float+0x250>
   3afc2:	ee18 3a10 	vmov	r3, s16
   3afc6:	4652      	mov	r2, sl
   3afc8:	4631      	mov	r1, r6
   3afca:	4628      	mov	r0, r5
   3afcc:	47b8      	blx	r7
   3afce:	3001      	adds	r0, #1
   3afd0:	f43f af41 	beq.w	3ae56 <_printf_float+0xc2>
   3afd4:	f04f 0800 	mov.w	r8, #0
   3afd8:	f104 091a 	add.w	r9, r4, #26
   3afdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3afde:	3b01      	subs	r3, #1
   3afe0:	4543      	cmp	r3, r8
   3afe2:	dc09      	bgt.n	3aff8 <_printf_float+0x264>
   3afe4:	6823      	ldr	r3, [r4, #0]
   3afe6:	079b      	lsls	r3, r3, #30
   3afe8:	f100 8105 	bmi.w	3b1f6 <_printf_float+0x462>
   3afec:	68e0      	ldr	r0, [r4, #12]
   3afee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   3aff0:	4298      	cmp	r0, r3
   3aff2:	bfb8      	it	lt
   3aff4:	4618      	movlt	r0, r3
   3aff6:	e730      	b.n	3ae5a <_printf_float+0xc6>
   3aff8:	2301      	movs	r3, #1
   3affa:	464a      	mov	r2, r9
   3affc:	4631      	mov	r1, r6
   3affe:	4628      	mov	r0, r5
   3b000:	47b8      	blx	r7
   3b002:	3001      	adds	r0, #1
   3b004:	f43f af27 	beq.w	3ae56 <_printf_float+0xc2>
   3b008:	f108 0801 	add.w	r8, r8, #1
   3b00c:	e7e6      	b.n	3afdc <_printf_float+0x248>
   3b00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b010:	2b00      	cmp	r3, #0
   3b012:	dc39      	bgt.n	3b088 <_printf_float+0x2f4>
   3b014:	2301      	movs	r3, #1
   3b016:	4a1b      	ldr	r2, [pc, #108]	; (3b084 <_printf_float+0x2f0>)
   3b018:	4631      	mov	r1, r6
   3b01a:	4628      	mov	r0, r5
   3b01c:	47b8      	blx	r7
   3b01e:	3001      	adds	r0, #1
   3b020:	f43f af19 	beq.w	3ae56 <_printf_float+0xc2>
   3b024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3b028:	4313      	orrs	r3, r2
   3b02a:	d102      	bne.n	3b032 <_printf_float+0x29e>
   3b02c:	6823      	ldr	r3, [r4, #0]
   3b02e:	07d9      	lsls	r1, r3, #31
   3b030:	d5d8      	bpl.n	3afe4 <_printf_float+0x250>
   3b032:	ee18 3a10 	vmov	r3, s16
   3b036:	4652      	mov	r2, sl
   3b038:	4631      	mov	r1, r6
   3b03a:	4628      	mov	r0, r5
   3b03c:	47b8      	blx	r7
   3b03e:	3001      	adds	r0, #1
   3b040:	f43f af09 	beq.w	3ae56 <_printf_float+0xc2>
   3b044:	f04f 0900 	mov.w	r9, #0
   3b048:	f104 0a1a 	add.w	sl, r4, #26
   3b04c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3b04e:	425b      	negs	r3, r3
   3b050:	454b      	cmp	r3, r9
   3b052:	dc01      	bgt.n	3b058 <_printf_float+0x2c4>
   3b054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3b056:	e792      	b.n	3af7e <_printf_float+0x1ea>
   3b058:	2301      	movs	r3, #1
   3b05a:	4652      	mov	r2, sl
   3b05c:	4631      	mov	r1, r6
   3b05e:	4628      	mov	r0, r5
   3b060:	47b8      	blx	r7
   3b062:	3001      	adds	r0, #1
   3b064:	f43f aef7 	beq.w	3ae56 <_printf_float+0xc2>
   3b068:	f109 0901 	add.w	r9, r9, #1
   3b06c:	e7ee      	b.n	3b04c <_printf_float+0x2b8>
   3b06e:	bf00      	nop
   3b070:	7fefffff 	.word	0x7fefffff
   3b074:	0004c3b0 	.word	0x0004c3b0
   3b078:	00045b47 	.word	0x00045b47
   3b07c:	0004c3b8 	.word	0x0004c3b8
   3b080:	0004c3b4 	.word	0x0004c3b4
   3b084:	0004bcc7 	.word	0x0004bcc7
   3b088:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3b08a:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3b08c:	429a      	cmp	r2, r3
   3b08e:	bfa8      	it	ge
   3b090:	461a      	movge	r2, r3
   3b092:	2a00      	cmp	r2, #0
   3b094:	4691      	mov	r9, r2
   3b096:	dc37      	bgt.n	3b108 <_printf_float+0x374>
   3b098:	f04f 0b00 	mov.w	fp, #0
   3b09c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3b0a0:	f104 021a 	add.w	r2, r4, #26
   3b0a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   3b0a6:	9305      	str	r3, [sp, #20]
   3b0a8:	eba3 0309 	sub.w	r3, r3, r9
   3b0ac:	455b      	cmp	r3, fp
   3b0ae:	dc33      	bgt.n	3b118 <_printf_float+0x384>
   3b0b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3b0b4:	429a      	cmp	r2, r3
   3b0b6:	db3b      	blt.n	3b130 <_printf_float+0x39c>
   3b0b8:	6823      	ldr	r3, [r4, #0]
   3b0ba:	07da      	lsls	r2, r3, #31
   3b0bc:	d438      	bmi.n	3b130 <_printf_float+0x39c>
   3b0be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3b0c0:	9b05      	ldr	r3, [sp, #20]
   3b0c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   3b0c4:	1ad3      	subs	r3, r2, r3
   3b0c6:	eba2 0901 	sub.w	r9, r2, r1
   3b0ca:	4599      	cmp	r9, r3
   3b0cc:	bfa8      	it	ge
   3b0ce:	4699      	movge	r9, r3
   3b0d0:	f1b9 0f00 	cmp.w	r9, #0
   3b0d4:	dc35      	bgt.n	3b142 <_printf_float+0x3ae>
   3b0d6:	f04f 0800 	mov.w	r8, #0
   3b0da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   3b0de:	f104 0a1a 	add.w	sl, r4, #26
   3b0e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   3b0e6:	1a9b      	subs	r3, r3, r2
   3b0e8:	eba3 0309 	sub.w	r3, r3, r9
   3b0ec:	4543      	cmp	r3, r8
   3b0ee:	f77f af79 	ble.w	3afe4 <_printf_float+0x250>
   3b0f2:	2301      	movs	r3, #1
   3b0f4:	4652      	mov	r2, sl
   3b0f6:	4631      	mov	r1, r6
   3b0f8:	4628      	mov	r0, r5
   3b0fa:	47b8      	blx	r7
   3b0fc:	3001      	adds	r0, #1
   3b0fe:	f43f aeaa 	beq.w	3ae56 <_printf_float+0xc2>
   3b102:	f108 0801 	add.w	r8, r8, #1
   3b106:	e7ec      	b.n	3b0e2 <_printf_float+0x34e>
   3b108:	4613      	mov	r3, r2
   3b10a:	4631      	mov	r1, r6
   3b10c:	4642      	mov	r2, r8
   3b10e:	4628      	mov	r0, r5
   3b110:	47b8      	blx	r7
   3b112:	3001      	adds	r0, #1
   3b114:	d1c0      	bne.n	3b098 <_printf_float+0x304>
   3b116:	e69e      	b.n	3ae56 <_printf_float+0xc2>
   3b118:	2301      	movs	r3, #1
   3b11a:	4631      	mov	r1, r6
   3b11c:	4628      	mov	r0, r5
   3b11e:	9205      	str	r2, [sp, #20]
   3b120:	47b8      	blx	r7
   3b122:	3001      	adds	r0, #1
   3b124:	f43f ae97 	beq.w	3ae56 <_printf_float+0xc2>
   3b128:	f10b 0b01 	add.w	fp, fp, #1
   3b12c:	9a05      	ldr	r2, [sp, #20]
   3b12e:	e7b9      	b.n	3b0a4 <_printf_float+0x310>
   3b130:	ee18 3a10 	vmov	r3, s16
   3b134:	4652      	mov	r2, sl
   3b136:	4631      	mov	r1, r6
   3b138:	4628      	mov	r0, r5
   3b13a:	47b8      	blx	r7
   3b13c:	3001      	adds	r0, #1
   3b13e:	d1be      	bne.n	3b0be <_printf_float+0x32a>
   3b140:	e689      	b.n	3ae56 <_printf_float+0xc2>
   3b142:	9a05      	ldr	r2, [sp, #20]
   3b144:	464b      	mov	r3, r9
   3b146:	4631      	mov	r1, r6
   3b148:	4628      	mov	r0, r5
   3b14a:	4442      	add	r2, r8
   3b14c:	47b8      	blx	r7
   3b14e:	3001      	adds	r0, #1
   3b150:	d1c1      	bne.n	3b0d6 <_printf_float+0x342>
   3b152:	e680      	b.n	3ae56 <_printf_float+0xc2>
   3b154:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   3b156:	2a01      	cmp	r2, #1
   3b158:	dc01      	bgt.n	3b15e <_printf_float+0x3ca>
   3b15a:	07db      	lsls	r3, r3, #31
   3b15c:	d538      	bpl.n	3b1d0 <_printf_float+0x43c>
   3b15e:	2301      	movs	r3, #1
   3b160:	4642      	mov	r2, r8
   3b162:	4631      	mov	r1, r6
   3b164:	4628      	mov	r0, r5
   3b166:	47b8      	blx	r7
   3b168:	3001      	adds	r0, #1
   3b16a:	f43f ae74 	beq.w	3ae56 <_printf_float+0xc2>
   3b16e:	ee18 3a10 	vmov	r3, s16
   3b172:	4652      	mov	r2, sl
   3b174:	4631      	mov	r1, r6
   3b176:	4628      	mov	r0, r5
   3b178:	47b8      	blx	r7
   3b17a:	3001      	adds	r0, #1
   3b17c:	f43f ae6b 	beq.w	3ae56 <_printf_float+0xc2>
   3b180:	2200      	movs	r2, #0
   3b182:	2300      	movs	r3, #0
   3b184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   3b188:	f7e1 fd7e 	bl	1cc88 <__aeabi_dcmpeq>
   3b18c:	b9d8      	cbnz	r0, 3b1c6 <_printf_float+0x432>
   3b18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3b190:	f108 0201 	add.w	r2, r8, #1
   3b194:	3b01      	subs	r3, #1
   3b196:	4631      	mov	r1, r6
   3b198:	4628      	mov	r0, r5
   3b19a:	47b8      	blx	r7
   3b19c:	3001      	adds	r0, #1
   3b19e:	d10e      	bne.n	3b1be <_printf_float+0x42a>
   3b1a0:	e659      	b.n	3ae56 <_printf_float+0xc2>
   3b1a2:	2301      	movs	r3, #1
   3b1a4:	4652      	mov	r2, sl
   3b1a6:	4631      	mov	r1, r6
   3b1a8:	4628      	mov	r0, r5
   3b1aa:	47b8      	blx	r7
   3b1ac:	3001      	adds	r0, #1
   3b1ae:	f43f ae52 	beq.w	3ae56 <_printf_float+0xc2>
   3b1b2:	f108 0801 	add.w	r8, r8, #1
   3b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   3b1b8:	3b01      	subs	r3, #1
   3b1ba:	4543      	cmp	r3, r8
   3b1bc:	dcf1      	bgt.n	3b1a2 <_printf_float+0x40e>
   3b1be:	464b      	mov	r3, r9
   3b1c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
   3b1c4:	e6dc      	b.n	3af80 <_printf_float+0x1ec>
   3b1c6:	f04f 0800 	mov.w	r8, #0
   3b1ca:	f104 0a1a 	add.w	sl, r4, #26
   3b1ce:	e7f2      	b.n	3b1b6 <_printf_float+0x422>
   3b1d0:	2301      	movs	r3, #1
   3b1d2:	4642      	mov	r2, r8
   3b1d4:	e7df      	b.n	3b196 <_printf_float+0x402>
   3b1d6:	2301      	movs	r3, #1
   3b1d8:	464a      	mov	r2, r9
   3b1da:	4631      	mov	r1, r6
   3b1dc:	4628      	mov	r0, r5
   3b1de:	47b8      	blx	r7
   3b1e0:	3001      	adds	r0, #1
   3b1e2:	f43f ae38 	beq.w	3ae56 <_printf_float+0xc2>
   3b1e6:	f108 0801 	add.w	r8, r8, #1
   3b1ea:	68e3      	ldr	r3, [r4, #12]
   3b1ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3b1ee:	1a5b      	subs	r3, r3, r1
   3b1f0:	4543      	cmp	r3, r8
   3b1f2:	dcf0      	bgt.n	3b1d6 <_printf_float+0x442>
   3b1f4:	e6fa      	b.n	3afec <_printf_float+0x258>
   3b1f6:	f04f 0800 	mov.w	r8, #0
   3b1fa:	f104 0919 	add.w	r9, r4, #25
   3b1fe:	e7f4      	b.n	3b1ea <_printf_float+0x456>

0003b200 <_printf_i>:
   3b200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   3b204:	460c      	mov	r4, r1
   3b206:	4691      	mov	r9, r2
   3b208:	4680      	mov	r8, r0
   3b20a:	469a      	mov	sl, r3
   3b20c:	7e27      	ldrb	r7, [r4, #24]
   3b20e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   3b212:	990c      	ldr	r1, [sp, #48]	; 0x30
   3b214:	2f78      	cmp	r7, #120	; 0x78
   3b216:	d807      	bhi.n	3b228 <_printf_i+0x28>
   3b218:	2f62      	cmp	r7, #98	; 0x62
   3b21a:	d80a      	bhi.n	3b232 <_printf_i+0x32>
   3b21c:	2f00      	cmp	r7, #0
   3b21e:	f000 80d8 	beq.w	3b3d2 <_printf_i+0x1d2>
   3b222:	2f58      	cmp	r7, #88	; 0x58
   3b224:	f000 80a3 	beq.w	3b36e <_printf_i+0x16e>
   3b228:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3b22c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   3b230:	e03a      	b.n	3b2a8 <_printf_i+0xa8>
   3b232:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   3b236:	2b15      	cmp	r3, #21
   3b238:	d8f6      	bhi.n	3b228 <_printf_i+0x28>
   3b23a:	a001      	add	r0, pc, #4	; (adr r0, 3b240 <_printf_i+0x40>)
   3b23c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   3b240:	0003b299 	.word	0x0003b299
   3b244:	0003b2ad 	.word	0x0003b2ad
   3b248:	0003b229 	.word	0x0003b229
   3b24c:	0003b229 	.word	0x0003b229
   3b250:	0003b229 	.word	0x0003b229
   3b254:	0003b229 	.word	0x0003b229
   3b258:	0003b2ad 	.word	0x0003b2ad
   3b25c:	0003b229 	.word	0x0003b229
   3b260:	0003b229 	.word	0x0003b229
   3b264:	0003b229 	.word	0x0003b229
   3b268:	0003b229 	.word	0x0003b229
   3b26c:	0003b3b9 	.word	0x0003b3b9
   3b270:	0003b2dd 	.word	0x0003b2dd
   3b274:	0003b39b 	.word	0x0003b39b
   3b278:	0003b229 	.word	0x0003b229
   3b27c:	0003b229 	.word	0x0003b229
   3b280:	0003b3db 	.word	0x0003b3db
   3b284:	0003b229 	.word	0x0003b229
   3b288:	0003b2dd 	.word	0x0003b2dd
   3b28c:	0003b229 	.word	0x0003b229
   3b290:	0003b229 	.word	0x0003b229
   3b294:	0003b3a3 	.word	0x0003b3a3
   3b298:	680b      	ldr	r3, [r1, #0]
   3b29a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   3b29e:	1d1a      	adds	r2, r3, #4
   3b2a0:	681b      	ldr	r3, [r3, #0]
   3b2a2:	600a      	str	r2, [r1, #0]
   3b2a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   3b2a8:	2301      	movs	r3, #1
   3b2aa:	e0a3      	b.n	3b3f4 <_printf_i+0x1f4>
   3b2ac:	6825      	ldr	r5, [r4, #0]
   3b2ae:	6808      	ldr	r0, [r1, #0]
   3b2b0:	062e      	lsls	r6, r5, #24
   3b2b2:	f100 0304 	add.w	r3, r0, #4
   3b2b6:	d50a      	bpl.n	3b2ce <_printf_i+0xce>
   3b2b8:	6805      	ldr	r5, [r0, #0]
   3b2ba:	600b      	str	r3, [r1, #0]
   3b2bc:	2d00      	cmp	r5, #0
   3b2be:	da03      	bge.n	3b2c8 <_printf_i+0xc8>
   3b2c0:	232d      	movs	r3, #45	; 0x2d
   3b2c2:	426d      	negs	r5, r5
   3b2c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3b2c8:	485e      	ldr	r0, [pc, #376]	; (3b444 <_printf_i+0x244>)
   3b2ca:	230a      	movs	r3, #10
   3b2cc:	e019      	b.n	3b302 <_printf_i+0x102>
   3b2ce:	f015 0f40 	tst.w	r5, #64	; 0x40
   3b2d2:	6805      	ldr	r5, [r0, #0]
   3b2d4:	600b      	str	r3, [r1, #0]
   3b2d6:	bf18      	it	ne
   3b2d8:	b22d      	sxthne	r5, r5
   3b2da:	e7ef      	b.n	3b2bc <_printf_i+0xbc>
   3b2dc:	680b      	ldr	r3, [r1, #0]
   3b2de:	6825      	ldr	r5, [r4, #0]
   3b2e0:	1d18      	adds	r0, r3, #4
   3b2e2:	6008      	str	r0, [r1, #0]
   3b2e4:	0628      	lsls	r0, r5, #24
   3b2e6:	d501      	bpl.n	3b2ec <_printf_i+0xec>
   3b2e8:	681d      	ldr	r5, [r3, #0]
   3b2ea:	e002      	b.n	3b2f2 <_printf_i+0xf2>
   3b2ec:	0669      	lsls	r1, r5, #25
   3b2ee:	d5fb      	bpl.n	3b2e8 <_printf_i+0xe8>
   3b2f0:	881d      	ldrh	r5, [r3, #0]
   3b2f2:	2f6f      	cmp	r7, #111	; 0x6f
   3b2f4:	4853      	ldr	r0, [pc, #332]	; (3b444 <_printf_i+0x244>)
   3b2f6:	bf0c      	ite	eq
   3b2f8:	2308      	moveq	r3, #8
   3b2fa:	230a      	movne	r3, #10
   3b2fc:	2100      	movs	r1, #0
   3b2fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   3b302:	6866      	ldr	r6, [r4, #4]
   3b304:	2e00      	cmp	r6, #0
   3b306:	60a6      	str	r6, [r4, #8]
   3b308:	bfa2      	ittt	ge
   3b30a:	6821      	ldrge	r1, [r4, #0]
   3b30c:	f021 0104 	bicge.w	r1, r1, #4
   3b310:	6021      	strge	r1, [r4, #0]
   3b312:	b90d      	cbnz	r5, 3b318 <_printf_i+0x118>
   3b314:	2e00      	cmp	r6, #0
   3b316:	d04d      	beq.n	3b3b4 <_printf_i+0x1b4>
   3b318:	4616      	mov	r6, r2
   3b31a:	fbb5 f1f3 	udiv	r1, r5, r3
   3b31e:	fb03 5711 	mls	r7, r3, r1, r5
   3b322:	5dc7      	ldrb	r7, [r0, r7]
   3b324:	f806 7d01 	strb.w	r7, [r6, #-1]!
   3b328:	462f      	mov	r7, r5
   3b32a:	460d      	mov	r5, r1
   3b32c:	42bb      	cmp	r3, r7
   3b32e:	d9f4      	bls.n	3b31a <_printf_i+0x11a>
   3b330:	2b08      	cmp	r3, #8
   3b332:	d10b      	bne.n	3b34c <_printf_i+0x14c>
   3b334:	6823      	ldr	r3, [r4, #0]
   3b336:	07df      	lsls	r7, r3, #31
   3b338:	d508      	bpl.n	3b34c <_printf_i+0x14c>
   3b33a:	6923      	ldr	r3, [r4, #16]
   3b33c:	6861      	ldr	r1, [r4, #4]
   3b33e:	4299      	cmp	r1, r3
   3b340:	bfde      	ittt	le
   3b342:	2330      	movle	r3, #48	; 0x30
   3b344:	f806 3c01 	strble.w	r3, [r6, #-1]
   3b348:	f106 36ff 	addle.w	r6, r6, #4294967295
   3b34c:	1b92      	subs	r2, r2, r6
   3b34e:	6122      	str	r2, [r4, #16]
   3b350:	464b      	mov	r3, r9
   3b352:	aa03      	add	r2, sp, #12
   3b354:	4621      	mov	r1, r4
   3b356:	4640      	mov	r0, r8
   3b358:	f8cd a000 	str.w	sl, [sp]
   3b35c:	f006 fd99 	bl	41e92 <_printf_common>
   3b360:	3001      	adds	r0, #1
   3b362:	d14c      	bne.n	3b3fe <_printf_i+0x1fe>
   3b364:	f04f 30ff 	mov.w	r0, #4294967295
   3b368:	b004      	add	sp, #16
   3b36a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b36e:	4835      	ldr	r0, [pc, #212]	; (3b444 <_printf_i+0x244>)
   3b370:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   3b374:	6823      	ldr	r3, [r4, #0]
   3b376:	680e      	ldr	r6, [r1, #0]
   3b378:	061f      	lsls	r7, r3, #24
   3b37a:	f856 5b04 	ldr.w	r5, [r6], #4
   3b37e:	600e      	str	r6, [r1, #0]
   3b380:	d514      	bpl.n	3b3ac <_printf_i+0x1ac>
   3b382:	07d9      	lsls	r1, r3, #31
   3b384:	bf44      	itt	mi
   3b386:	f043 0320 	orrmi.w	r3, r3, #32
   3b38a:	6023      	strmi	r3, [r4, #0]
   3b38c:	b91d      	cbnz	r5, 3b396 <_printf_i+0x196>
   3b38e:	6823      	ldr	r3, [r4, #0]
   3b390:	f023 0320 	bic.w	r3, r3, #32
   3b394:	6023      	str	r3, [r4, #0]
   3b396:	2310      	movs	r3, #16
   3b398:	e7b0      	b.n	3b2fc <_printf_i+0xfc>
   3b39a:	6823      	ldr	r3, [r4, #0]
   3b39c:	f043 0320 	orr.w	r3, r3, #32
   3b3a0:	6023      	str	r3, [r4, #0]
   3b3a2:	2378      	movs	r3, #120	; 0x78
   3b3a4:	4828      	ldr	r0, [pc, #160]	; (3b448 <_printf_i+0x248>)
   3b3a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   3b3aa:	e7e3      	b.n	3b374 <_printf_i+0x174>
   3b3ac:	065e      	lsls	r6, r3, #25
   3b3ae:	bf48      	it	mi
   3b3b0:	b2ad      	uxthmi	r5, r5
   3b3b2:	e7e6      	b.n	3b382 <_printf_i+0x182>
   3b3b4:	4616      	mov	r6, r2
   3b3b6:	e7bb      	b.n	3b330 <_printf_i+0x130>
   3b3b8:	680b      	ldr	r3, [r1, #0]
   3b3ba:	6826      	ldr	r6, [r4, #0]
   3b3bc:	1d1d      	adds	r5, r3, #4
   3b3be:	6960      	ldr	r0, [r4, #20]
   3b3c0:	600d      	str	r5, [r1, #0]
   3b3c2:	0635      	lsls	r5, r6, #24
   3b3c4:	681b      	ldr	r3, [r3, #0]
   3b3c6:	d501      	bpl.n	3b3cc <_printf_i+0x1cc>
   3b3c8:	6018      	str	r0, [r3, #0]
   3b3ca:	e002      	b.n	3b3d2 <_printf_i+0x1d2>
   3b3cc:	0671      	lsls	r1, r6, #25
   3b3ce:	d5fb      	bpl.n	3b3c8 <_printf_i+0x1c8>
   3b3d0:	8018      	strh	r0, [r3, #0]
   3b3d2:	2300      	movs	r3, #0
   3b3d4:	4616      	mov	r6, r2
   3b3d6:	6123      	str	r3, [r4, #16]
   3b3d8:	e7ba      	b.n	3b350 <_printf_i+0x150>
   3b3da:	680b      	ldr	r3, [r1, #0]
   3b3dc:	1d1a      	adds	r2, r3, #4
   3b3de:	600a      	str	r2, [r1, #0]
   3b3e0:	2100      	movs	r1, #0
   3b3e2:	681e      	ldr	r6, [r3, #0]
   3b3e4:	6862      	ldr	r2, [r4, #4]
   3b3e6:	4630      	mov	r0, r6
   3b3e8:	f006 fc3d 	bl	41c66 <memchr>
   3b3ec:	b108      	cbz	r0, 3b3f2 <_printf_i+0x1f2>
   3b3ee:	1b80      	subs	r0, r0, r6
   3b3f0:	6060      	str	r0, [r4, #4]
   3b3f2:	6863      	ldr	r3, [r4, #4]
   3b3f4:	6123      	str	r3, [r4, #16]
   3b3f6:	2300      	movs	r3, #0
   3b3f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   3b3fc:	e7a8      	b.n	3b350 <_printf_i+0x150>
   3b3fe:	6923      	ldr	r3, [r4, #16]
   3b400:	4632      	mov	r2, r6
   3b402:	4649      	mov	r1, r9
   3b404:	4640      	mov	r0, r8
   3b406:	47d0      	blx	sl
   3b408:	3001      	adds	r0, #1
   3b40a:	d0ab      	beq.n	3b364 <_printf_i+0x164>
   3b40c:	6823      	ldr	r3, [r4, #0]
   3b40e:	079b      	lsls	r3, r3, #30
   3b410:	d413      	bmi.n	3b43a <_printf_i+0x23a>
   3b412:	68e0      	ldr	r0, [r4, #12]
   3b414:	9b03      	ldr	r3, [sp, #12]
   3b416:	4298      	cmp	r0, r3
   3b418:	bfb8      	it	lt
   3b41a:	4618      	movlt	r0, r3
   3b41c:	e7a4      	b.n	3b368 <_printf_i+0x168>
   3b41e:	2301      	movs	r3, #1
   3b420:	4632      	mov	r2, r6
   3b422:	4649      	mov	r1, r9
   3b424:	4640      	mov	r0, r8
   3b426:	47d0      	blx	sl
   3b428:	3001      	adds	r0, #1
   3b42a:	d09b      	beq.n	3b364 <_printf_i+0x164>
   3b42c:	3501      	adds	r5, #1
   3b42e:	68e3      	ldr	r3, [r4, #12]
   3b430:	9903      	ldr	r1, [sp, #12]
   3b432:	1a5b      	subs	r3, r3, r1
   3b434:	42ab      	cmp	r3, r5
   3b436:	dcf2      	bgt.n	3b41e <_printf_i+0x21e>
   3b438:	e7eb      	b.n	3b412 <_printf_i+0x212>
   3b43a:	2500      	movs	r5, #0
   3b43c:	f104 0619 	add.w	r6, r4, #25
   3b440:	e7f5      	b.n	3b42e <_printf_i+0x22e>
   3b442:	bf00      	nop
   3b444:	0004c3bc 	.word	0x0004c3bc
   3b448:	0004c3cd 	.word	0x0004c3cd

0003b44c <srand>:
   3b44c:	b538      	push	{r3, r4, r5, lr}
   3b44e:	4b0d      	ldr	r3, [pc, #52]	; (3b484 <srand+0x38>)
   3b450:	4604      	mov	r4, r0
   3b452:	681d      	ldr	r5, [r3, #0]
   3b454:	6bab      	ldr	r3, [r5, #56]	; 0x38
   3b456:	b97b      	cbnz	r3, 3b478 <srand+0x2c>
   3b458:	2018      	movs	r0, #24
   3b45a:	f7ff fab1 	bl	3a9c0 <malloc>
   3b45e:	4a0a      	ldr	r2, [pc, #40]	; (3b488 <srand+0x3c>)
   3b460:	4b0a      	ldr	r3, [pc, #40]	; (3b48c <srand+0x40>)
   3b462:	63a8      	str	r0, [r5, #56]	; 0x38
   3b464:	e9c0 2300 	strd	r2, r3, [r0]
   3b468:	4b09      	ldr	r3, [pc, #36]	; (3b490 <srand+0x44>)
   3b46a:	2201      	movs	r2, #1
   3b46c:	6083      	str	r3, [r0, #8]
   3b46e:	230b      	movs	r3, #11
   3b470:	8183      	strh	r3, [r0, #12]
   3b472:	2300      	movs	r3, #0
   3b474:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3b478:	6bab      	ldr	r3, [r5, #56]	; 0x38
   3b47a:	2200      	movs	r2, #0
   3b47c:	611c      	str	r4, [r3, #16]
   3b47e:	615a      	str	r2, [r3, #20]
   3b480:	bd38      	pop	{r3, r4, r5, pc}
   3b482:	bf00      	nop
   3b484:	2001563c 	.word	0x2001563c
   3b488:	abcd330e 	.word	0xabcd330e
   3b48c:	e66d1234 	.word	0xe66d1234
   3b490:	0005deec 	.word	0x0005deec

0003b494 <rand>:
   3b494:	4b13      	ldr	r3, [pc, #76]	; (3b4e4 <rand+0x50>)
   3b496:	b510      	push	{r4, lr}
   3b498:	681c      	ldr	r4, [r3, #0]
   3b49a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3b49c:	b97b      	cbnz	r3, 3b4be <rand+0x2a>
   3b49e:	2018      	movs	r0, #24
   3b4a0:	f7ff fa8e 	bl	3a9c0 <malloc>
   3b4a4:	4a10      	ldr	r2, [pc, #64]	; (3b4e8 <rand+0x54>)
   3b4a6:	4b11      	ldr	r3, [pc, #68]	; (3b4ec <rand+0x58>)
   3b4a8:	63a0      	str	r0, [r4, #56]	; 0x38
   3b4aa:	e9c0 2300 	strd	r2, r3, [r0]
   3b4ae:	4b10      	ldr	r3, [pc, #64]	; (3b4f0 <rand+0x5c>)
   3b4b0:	2201      	movs	r2, #1
   3b4b2:	6083      	str	r3, [r0, #8]
   3b4b4:	230b      	movs	r3, #11
   3b4b6:	8183      	strh	r3, [r0, #12]
   3b4b8:	2300      	movs	r3, #0
   3b4ba:	e9c0 2304 	strd	r2, r3, [r0, #16]
   3b4be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   3b4c0:	480c      	ldr	r0, [pc, #48]	; (3b4f4 <rand+0x60>)
   3b4c2:	690a      	ldr	r2, [r1, #16]
   3b4c4:	694b      	ldr	r3, [r1, #20]
   3b4c6:	4c0c      	ldr	r4, [pc, #48]	; (3b4f8 <rand+0x64>)
   3b4c8:	4350      	muls	r0, r2
   3b4ca:	fb04 0003 	mla	r0, r4, r3, r0
   3b4ce:	fba2 3404 	umull	r3, r4, r2, r4
   3b4d2:	1c5a      	adds	r2, r3, #1
   3b4d4:	4404      	add	r4, r0
   3b4d6:	f144 0000 	adc.w	r0, r4, #0
   3b4da:	e9c1 2004 	strd	r2, r0, [r1, #16]
   3b4de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
   3b4e2:	bd10      	pop	{r4, pc}
   3b4e4:	2001563c 	.word	0x2001563c
   3b4e8:	abcd330e 	.word	0xabcd330e
   3b4ec:	e66d1234 	.word	0xe66d1234
   3b4f0:	0005deec 	.word	0x0005deec
   3b4f4:	5851f42d 	.word	0x5851f42d
   3b4f8:	4c957f2d 	.word	0x4c957f2d

0003b4fc <realloc>:
   3b4fc:	4b02      	ldr	r3, [pc, #8]	; (3b508 <realloc+0xc>)
   3b4fe:	460a      	mov	r2, r1
   3b500:	4601      	mov	r1, r0
   3b502:	6818      	ldr	r0, [r3, #0]
   3b504:	f007 bc39 	b.w	42d7a <_realloc_r>
   3b508:	2001563c 	.word	0x2001563c

0003b50c <_sbrk_r>:
   3b50c:	b538      	push	{r3, r4, r5, lr}
   3b50e:	2300      	movs	r3, #0
   3b510:	4d05      	ldr	r5, [pc, #20]	; (3b528 <_sbrk_r+0x1c>)
   3b512:	4604      	mov	r4, r0
   3b514:	4608      	mov	r0, r1
   3b516:	602b      	str	r3, [r5, #0]
   3b518:	f7eb fec8 	bl	272ac <_sbrk>
   3b51c:	1c43      	adds	r3, r0, #1
   3b51e:	d102      	bne.n	3b526 <_sbrk_r+0x1a>
   3b520:	682b      	ldr	r3, [r5, #0]
   3b522:	b103      	cbz	r3, 3b526 <_sbrk_r+0x1a>
   3b524:	6023      	str	r3, [r4, #0]
   3b526:	bd38      	pop	{r3, r4, r5, pc}
   3b528:	20020e58 	.word	0x20020e58

0003b52c <sniprintf>:
   3b52c:	b40c      	push	{r2, r3}
   3b52e:	4b18      	ldr	r3, [pc, #96]	; (3b590 <sniprintf+0x64>)
   3b530:	b530      	push	{r4, r5, lr}
   3b532:	1e0c      	subs	r4, r1, #0
   3b534:	b09d      	sub	sp, #116	; 0x74
   3b536:	681d      	ldr	r5, [r3, #0]
   3b538:	da08      	bge.n	3b54c <sniprintf+0x20>
   3b53a:	238b      	movs	r3, #139	; 0x8b
   3b53c:	f04f 30ff 	mov.w	r0, #4294967295
   3b540:	602b      	str	r3, [r5, #0]
   3b542:	b01d      	add	sp, #116	; 0x74
   3b544:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   3b548:	b002      	add	sp, #8
   3b54a:	4770      	bx	lr
   3b54c:	f44f 7302 	mov.w	r3, #520	; 0x208
   3b550:	9002      	str	r0, [sp, #8]
   3b552:	9006      	str	r0, [sp, #24]
   3b554:	a902      	add	r1, sp, #8
   3b556:	f8ad 3014 	strh.w	r3, [sp, #20]
   3b55a:	bf14      	ite	ne
   3b55c:	f104 33ff 	addne.w	r3, r4, #4294967295
   3b560:	4623      	moveq	r3, r4
   3b562:	9a20      	ldr	r2, [sp, #128]	; 0x80
   3b564:	4628      	mov	r0, r5
   3b566:	9304      	str	r3, [sp, #16]
   3b568:	9307      	str	r3, [sp, #28]
   3b56a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3b56e:	f8ad 3016 	strh.w	r3, [sp, #22]
   3b572:	ab21      	add	r3, sp, #132	; 0x84
   3b574:	9301      	str	r3, [sp, #4]
   3b576:	f000 ff39 	bl	3c3ec <_svfiprintf_r>
   3b57a:	1c43      	adds	r3, r0, #1
   3b57c:	bfbc      	itt	lt
   3b57e:	238b      	movlt	r3, #139	; 0x8b
   3b580:	602b      	strlt	r3, [r5, #0]
   3b582:	2c00      	cmp	r4, #0
   3b584:	d0dd      	beq.n	3b542 <sniprintf+0x16>
   3b586:	9b02      	ldr	r3, [sp, #8]
   3b588:	2200      	movs	r2, #0
   3b58a:	701a      	strb	r2, [r3, #0]
   3b58c:	e7d9      	b.n	3b542 <sniprintf+0x16>
   3b58e:	bf00      	nop
   3b590:	2001563c 	.word	0x2001563c

0003b594 <siscanf>:
   3b594:	b40e      	push	{r1, r2, r3}
   3b596:	b510      	push	{r4, lr}
   3b598:	b09f      	sub	sp, #124	; 0x7c
   3b59a:	f44f 7101 	mov.w	r1, #516	; 0x204
   3b59e:	ac21      	add	r4, sp, #132	; 0x84
   3b5a0:	f8ad 101c 	strh.w	r1, [sp, #28]
   3b5a4:	9004      	str	r0, [sp, #16]
   3b5a6:	f854 2b04 	ldr.w	r2, [r4], #4
   3b5aa:	9008      	str	r0, [sp, #32]
   3b5ac:	9201      	str	r2, [sp, #4]
   3b5ae:	f7e1 fe55 	bl	1d25c <strlen>
   3b5b2:	4b0c      	ldr	r3, [pc, #48]	; (3b5e4 <siscanf+0x50>)
   3b5b4:	a904      	add	r1, sp, #16
   3b5b6:	9005      	str	r0, [sp, #20]
   3b5b8:	930d      	str	r3, [sp, #52]	; 0x34
   3b5ba:	2300      	movs	r3, #0
   3b5bc:	9009      	str	r0, [sp, #36]	; 0x24
   3b5be:	9311      	str	r3, [sp, #68]	; 0x44
   3b5c0:	9316      	str	r3, [sp, #88]	; 0x58
   3b5c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   3b5c6:	4808      	ldr	r0, [pc, #32]	; (3b5e8 <siscanf+0x54>)
   3b5c8:	f8ad 301e 	strh.w	r3, [sp, #30]
   3b5cc:	4623      	mov	r3, r4
   3b5ce:	9a01      	ldr	r2, [sp, #4]
   3b5d0:	6800      	ldr	r0, [r0, #0]
   3b5d2:	9403      	str	r4, [sp, #12]
   3b5d4:	f001 f80a 	bl	3c5ec <__ssvfiscanf_r>
   3b5d8:	b01f      	add	sp, #124	; 0x7c
   3b5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3b5de:	b003      	add	sp, #12
   3b5e0:	4770      	bx	lr
   3b5e2:	bf00      	nop
   3b5e4:	00041fc9 	.word	0x00041fc9
   3b5e8:	2001563c 	.word	0x2001563c

0003b5ec <strtod>:
   3b5ec:	460a      	mov	r2, r1
   3b5ee:	4601      	mov	r1, r0
   3b5f0:	4802      	ldr	r0, [pc, #8]	; (3b5fc <strtod+0x10>)
   3b5f2:	4b03      	ldr	r3, [pc, #12]	; (3b600 <strtod+0x14>)
   3b5f4:	6800      	ldr	r0, [r0, #0]
   3b5f6:	f7e2 be9b 	b.w	1e330 <_strtod_l>
   3b5fa:	bf00      	nop
   3b5fc:	2001563c 	.word	0x2001563c
   3b600:	200156a0 	.word	0x200156a0

0003b604 <_strtol_l.isra.0>:
   3b604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3b608:	468c      	mov	ip, r1
   3b60a:	4686      	mov	lr, r0
   3b60c:	4e38      	ldr	r6, [pc, #224]	; (3b6f0 <_strtol_l.isra.0+0xec>)
   3b60e:	4660      	mov	r0, ip
   3b610:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3b614:	5da5      	ldrb	r5, [r4, r6]
   3b616:	f015 0508 	ands.w	r5, r5, #8
   3b61a:	d1f8      	bne.n	3b60e <_strtol_l.isra.0+0xa>
   3b61c:	2c2d      	cmp	r4, #45	; 0x2d
   3b61e:	d133      	bne.n	3b688 <_strtol_l.isra.0+0x84>
   3b620:	f89c 4000 	ldrb.w	r4, [ip]
   3b624:	f04f 0801 	mov.w	r8, #1
   3b628:	f100 0c02 	add.w	ip, r0, #2
   3b62c:	2b00      	cmp	r3, #0
   3b62e:	d05b      	beq.n	3b6e8 <_strtol_l.isra.0+0xe4>
   3b630:	2b10      	cmp	r3, #16
   3b632:	d10c      	bne.n	3b64e <_strtol_l.isra.0+0x4a>
   3b634:	2c30      	cmp	r4, #48	; 0x30
   3b636:	d10a      	bne.n	3b64e <_strtol_l.isra.0+0x4a>
   3b638:	f89c 0000 	ldrb.w	r0, [ip]
   3b63c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3b640:	2858      	cmp	r0, #88	; 0x58
   3b642:	d14c      	bne.n	3b6de <_strtol_l.isra.0+0xda>
   3b644:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3b648:	2310      	movs	r3, #16
   3b64a:	f10c 0c02 	add.w	ip, ip, #2
   3b64e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   3b652:	2600      	movs	r6, #0
   3b654:	3f01      	subs	r7, #1
   3b656:	4630      	mov	r0, r6
   3b658:	fbb7 f9f3 	udiv	r9, r7, r3
   3b65c:	fb03 7a19 	mls	sl, r3, r9, r7
   3b660:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   3b664:	2d09      	cmp	r5, #9
   3b666:	d817      	bhi.n	3b698 <_strtol_l.isra.0+0x94>
   3b668:	462c      	mov	r4, r5
   3b66a:	42a3      	cmp	r3, r4
   3b66c:	dd23      	ble.n	3b6b6 <_strtol_l.isra.0+0xb2>
   3b66e:	1c75      	adds	r5, r6, #1
   3b670:	d007      	beq.n	3b682 <_strtol_l.isra.0+0x7e>
   3b672:	4581      	cmp	r9, r0
   3b674:	d31c      	bcc.n	3b6b0 <_strtol_l.isra.0+0xac>
   3b676:	d101      	bne.n	3b67c <_strtol_l.isra.0+0x78>
   3b678:	45a2      	cmp	sl, r4
   3b67a:	db19      	blt.n	3b6b0 <_strtol_l.isra.0+0xac>
   3b67c:	fb00 4003 	mla	r0, r0, r3, r4
   3b680:	2601      	movs	r6, #1
   3b682:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3b686:	e7eb      	b.n	3b660 <_strtol_l.isra.0+0x5c>
   3b688:	2c2b      	cmp	r4, #43	; 0x2b
   3b68a:	46a8      	mov	r8, r5
   3b68c:	bf04      	itt	eq
   3b68e:	f89c 4000 	ldrbeq.w	r4, [ip]
   3b692:	f100 0c02 	addeq.w	ip, r0, #2
   3b696:	e7c9      	b.n	3b62c <_strtol_l.isra.0+0x28>
   3b698:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   3b69c:	2d19      	cmp	r5, #25
   3b69e:	d801      	bhi.n	3b6a4 <_strtol_l.isra.0+0xa0>
   3b6a0:	3c37      	subs	r4, #55	; 0x37
   3b6a2:	e7e2      	b.n	3b66a <_strtol_l.isra.0+0x66>
   3b6a4:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   3b6a8:	2d19      	cmp	r5, #25
   3b6aa:	d804      	bhi.n	3b6b6 <_strtol_l.isra.0+0xb2>
   3b6ac:	3c57      	subs	r4, #87	; 0x57
   3b6ae:	e7dc      	b.n	3b66a <_strtol_l.isra.0+0x66>
   3b6b0:	f04f 36ff 	mov.w	r6, #4294967295
   3b6b4:	e7e5      	b.n	3b682 <_strtol_l.isra.0+0x7e>
   3b6b6:	1c73      	adds	r3, r6, #1
   3b6b8:	d106      	bne.n	3b6c8 <_strtol_l.isra.0+0xc4>
   3b6ba:	2322      	movs	r3, #34	; 0x22
   3b6bc:	4638      	mov	r0, r7
   3b6be:	f8ce 3000 	str.w	r3, [lr]
   3b6c2:	b942      	cbnz	r2, 3b6d6 <_strtol_l.isra.0+0xd2>
   3b6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3b6c8:	f1b8 0f00 	cmp.w	r8, #0
   3b6cc:	d000      	beq.n	3b6d0 <_strtol_l.isra.0+0xcc>
   3b6ce:	4240      	negs	r0, r0
   3b6d0:	2a00      	cmp	r2, #0
   3b6d2:	d0f7      	beq.n	3b6c4 <_strtol_l.isra.0+0xc0>
   3b6d4:	b10e      	cbz	r6, 3b6da <_strtol_l.isra.0+0xd6>
   3b6d6:	f10c 31ff 	add.w	r1, ip, #4294967295
   3b6da:	6011      	str	r1, [r2, #0]
   3b6dc:	e7f2      	b.n	3b6c4 <_strtol_l.isra.0+0xc0>
   3b6de:	2430      	movs	r4, #48	; 0x30
   3b6e0:	2b00      	cmp	r3, #0
   3b6e2:	d1b4      	bne.n	3b64e <_strtol_l.isra.0+0x4a>
   3b6e4:	2308      	movs	r3, #8
   3b6e6:	e7b2      	b.n	3b64e <_strtol_l.isra.0+0x4a>
   3b6e8:	2c30      	cmp	r4, #48	; 0x30
   3b6ea:	d0a5      	beq.n	3b638 <_strtol_l.isra.0+0x34>
   3b6ec:	230a      	movs	r3, #10
   3b6ee:	e7ae      	b.n	3b64e <_strtol_l.isra.0+0x4a>
   3b6f0:	0004c29f 	.word	0x0004c29f

0003b6f4 <strtol>:
   3b6f4:	4613      	mov	r3, r2
   3b6f6:	460a      	mov	r2, r1
   3b6f8:	4601      	mov	r1, r0
   3b6fa:	4802      	ldr	r0, [pc, #8]	; (3b704 <strtol+0x10>)
   3b6fc:	6800      	ldr	r0, [r0, #0]
   3b6fe:	f7ff bf81 	b.w	3b604 <_strtol_l.isra.0>
   3b702:	bf00      	nop
   3b704:	2001563c 	.word	0x2001563c

0003b708 <_strtoul_l.isra.0>:
   3b708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   3b70c:	468c      	mov	ip, r1
   3b70e:	4686      	mov	lr, r0
   3b710:	4e39      	ldr	r6, [pc, #228]	; (3b7f8 <_strtoul_l.isra.0+0xf0>)
   3b712:	4660      	mov	r0, ip
   3b714:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3b718:	5da5      	ldrb	r5, [r4, r6]
   3b71a:	f015 0508 	ands.w	r5, r5, #8
   3b71e:	d1f8      	bne.n	3b712 <_strtoul_l.isra.0+0xa>
   3b720:	2c2d      	cmp	r4, #45	; 0x2d
   3b722:	d134      	bne.n	3b78e <_strtoul_l.isra.0+0x86>
   3b724:	f89c 4000 	ldrb.w	r4, [ip]
   3b728:	f04f 0801 	mov.w	r8, #1
   3b72c:	f100 0c02 	add.w	ip, r0, #2
   3b730:	2b00      	cmp	r3, #0
   3b732:	d05d      	beq.n	3b7f0 <_strtoul_l.isra.0+0xe8>
   3b734:	2b10      	cmp	r3, #16
   3b736:	d10c      	bne.n	3b752 <_strtoul_l.isra.0+0x4a>
   3b738:	2c30      	cmp	r4, #48	; 0x30
   3b73a:	d10a      	bne.n	3b752 <_strtoul_l.isra.0+0x4a>
   3b73c:	f89c 0000 	ldrb.w	r0, [ip]
   3b740:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   3b744:	2858      	cmp	r0, #88	; 0x58
   3b746:	d14e      	bne.n	3b7e6 <_strtoul_l.isra.0+0xde>
   3b748:	f89c 4001 	ldrb.w	r4, [ip, #1]
   3b74c:	2310      	movs	r3, #16
   3b74e:	f10c 0c02 	add.w	ip, ip, #2
   3b752:	f04f 37ff 	mov.w	r7, #4294967295
   3b756:	2500      	movs	r5, #0
   3b758:	fbb7 f7f3 	udiv	r7, r7, r3
   3b75c:	fb03 f907 	mul.w	r9, r3, r7
   3b760:	4628      	mov	r0, r5
   3b762:	ea6f 0909 	mvn.w	r9, r9
   3b766:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   3b76a:	2e09      	cmp	r6, #9
   3b76c:	d817      	bhi.n	3b79e <_strtoul_l.isra.0+0x96>
   3b76e:	4634      	mov	r4, r6
   3b770:	42a3      	cmp	r3, r4
   3b772:	dd23      	ble.n	3b7bc <_strtoul_l.isra.0+0xb4>
   3b774:	2d00      	cmp	r5, #0
   3b776:	db1e      	blt.n	3b7b6 <_strtoul_l.isra.0+0xae>
   3b778:	4287      	cmp	r7, r0
   3b77a:	d31c      	bcc.n	3b7b6 <_strtoul_l.isra.0+0xae>
   3b77c:	d101      	bne.n	3b782 <_strtoul_l.isra.0+0x7a>
   3b77e:	45a1      	cmp	r9, r4
   3b780:	db19      	blt.n	3b7b6 <_strtoul_l.isra.0+0xae>
   3b782:	fb00 4003 	mla	r0, r0, r3, r4
   3b786:	2501      	movs	r5, #1
   3b788:	f81c 4b01 	ldrb.w	r4, [ip], #1
   3b78c:	e7eb      	b.n	3b766 <_strtoul_l.isra.0+0x5e>
   3b78e:	2c2b      	cmp	r4, #43	; 0x2b
   3b790:	46a8      	mov	r8, r5
   3b792:	bf04      	itt	eq
   3b794:	f89c 4000 	ldrbeq.w	r4, [ip]
   3b798:	f100 0c02 	addeq.w	ip, r0, #2
   3b79c:	e7c8      	b.n	3b730 <_strtoul_l.isra.0+0x28>
   3b79e:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   3b7a2:	2e19      	cmp	r6, #25
   3b7a4:	d801      	bhi.n	3b7aa <_strtoul_l.isra.0+0xa2>
   3b7a6:	3c37      	subs	r4, #55	; 0x37
   3b7a8:	e7e2      	b.n	3b770 <_strtoul_l.isra.0+0x68>
   3b7aa:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   3b7ae:	2e19      	cmp	r6, #25
   3b7b0:	d804      	bhi.n	3b7bc <_strtoul_l.isra.0+0xb4>
   3b7b2:	3c57      	subs	r4, #87	; 0x57
   3b7b4:	e7dc      	b.n	3b770 <_strtoul_l.isra.0+0x68>
   3b7b6:	f04f 35ff 	mov.w	r5, #4294967295
   3b7ba:	e7e5      	b.n	3b788 <_strtoul_l.isra.0+0x80>
   3b7bc:	2d00      	cmp	r5, #0
   3b7be:	da07      	bge.n	3b7d0 <_strtoul_l.isra.0+0xc8>
   3b7c0:	2322      	movs	r3, #34	; 0x22
   3b7c2:	f04f 30ff 	mov.w	r0, #4294967295
   3b7c6:	f8ce 3000 	str.w	r3, [lr]
   3b7ca:	b942      	cbnz	r2, 3b7de <_strtoul_l.isra.0+0xd6>
   3b7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   3b7d0:	f1b8 0f00 	cmp.w	r8, #0
   3b7d4:	d000      	beq.n	3b7d8 <_strtoul_l.isra.0+0xd0>
   3b7d6:	4240      	negs	r0, r0
   3b7d8:	2a00      	cmp	r2, #0
   3b7da:	d0f7      	beq.n	3b7cc <_strtoul_l.isra.0+0xc4>
   3b7dc:	b10d      	cbz	r5, 3b7e2 <_strtoul_l.isra.0+0xda>
   3b7de:	f10c 31ff 	add.w	r1, ip, #4294967295
   3b7e2:	6011      	str	r1, [r2, #0]
   3b7e4:	e7f2      	b.n	3b7cc <_strtoul_l.isra.0+0xc4>
   3b7e6:	2430      	movs	r4, #48	; 0x30
   3b7e8:	2b00      	cmp	r3, #0
   3b7ea:	d1b2      	bne.n	3b752 <_strtoul_l.isra.0+0x4a>
   3b7ec:	2308      	movs	r3, #8
   3b7ee:	e7b0      	b.n	3b752 <_strtoul_l.isra.0+0x4a>
   3b7f0:	2c30      	cmp	r4, #48	; 0x30
   3b7f2:	d0a3      	beq.n	3b73c <_strtoul_l.isra.0+0x34>
   3b7f4:	230a      	movs	r3, #10
   3b7f6:	e7ac      	b.n	3b752 <_strtoul_l.isra.0+0x4a>
   3b7f8:	0004c29f 	.word	0x0004c29f

0003b7fc <strtoul>:
   3b7fc:	4613      	mov	r3, r2
   3b7fe:	460a      	mov	r2, r1
   3b800:	4601      	mov	r1, r0
   3b802:	4802      	ldr	r0, [pc, #8]	; (3b80c <strtoul+0x10>)
   3b804:	6800      	ldr	r0, [r0, #0]
   3b806:	f7ff bf7f 	b.w	3b708 <_strtoul_l.isra.0>
   3b80a:	bf00      	nop
   3b80c:	2001563c 	.word	0x2001563c

0003b810 <vsniprintf>:
   3b810:	b507      	push	{r0, r1, r2, lr}
   3b812:	9300      	str	r3, [sp, #0]
   3b814:	4613      	mov	r3, r2
   3b816:	460a      	mov	r2, r1
   3b818:	4601      	mov	r1, r0
   3b81a:	4803      	ldr	r0, [pc, #12]	; (3b828 <vsniprintf+0x18>)
   3b81c:	6800      	ldr	r0, [r0, #0]
   3b81e:	f006 fcb0 	bl	42182 <_vsniprintf_r>
   3b822:	b003      	add	sp, #12
   3b824:	f85d fb04 	ldr.w	pc, [sp], #4
   3b828:	2001563c 	.word	0x2001563c

0003b82c <_vsiprintf_r>:
   3b82c:	b500      	push	{lr}
   3b82e:	b09b      	sub	sp, #108	; 0x6c
   3b830:	9100      	str	r1, [sp, #0]
   3b832:	9104      	str	r1, [sp, #16]
   3b834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   3b838:	9105      	str	r1, [sp, #20]
   3b83a:	9102      	str	r1, [sp, #8]
   3b83c:	4905      	ldr	r1, [pc, #20]	; (3b854 <_vsiprintf_r+0x28>)
   3b83e:	9103      	str	r1, [sp, #12]
   3b840:	4669      	mov	r1, sp
   3b842:	f000 fdd3 	bl	3c3ec <_svfiprintf_r>
   3b846:	9b00      	ldr	r3, [sp, #0]
   3b848:	2200      	movs	r2, #0
   3b84a:	701a      	strb	r2, [r3, #0]
   3b84c:	b01b      	add	sp, #108	; 0x6c
   3b84e:	f85d fb04 	ldr.w	pc, [sp], #4
   3b852:	bf00      	nop
   3b854:	ffff0208 	.word	0xffff0208

0003b858 <vsiprintf>:
   3b858:	4613      	mov	r3, r2
   3b85a:	460a      	mov	r2, r1
   3b85c:	4601      	mov	r1, r0
   3b85e:	4802      	ldr	r0, [pc, #8]	; (3b868 <vsiprintf+0x10>)
   3b860:	6800      	ldr	r0, [r0, #0]
   3b862:	f7ff bfe3 	b.w	3b82c <_vsiprintf_r>
   3b866:	bf00      	nop
   3b868:	2001563c 	.word	0x2001563c

0003b86c <__swbuf_r>:
   3b86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b86e:	460e      	mov	r6, r1
   3b870:	4614      	mov	r4, r2
   3b872:	4605      	mov	r5, r0
   3b874:	b118      	cbz	r0, 3b87e <__swbuf_r+0x12>
   3b876:	6983      	ldr	r3, [r0, #24]
   3b878:	b90b      	cbnz	r3, 3b87e <__swbuf_r+0x12>
   3b87a:	f000 f9db 	bl	3bc34 <__sinit>
   3b87e:	4b21      	ldr	r3, [pc, #132]	; (3b904 <__swbuf_r+0x98>)
   3b880:	429c      	cmp	r4, r3
   3b882:	d12b      	bne.n	3b8dc <__swbuf_r+0x70>
   3b884:	686c      	ldr	r4, [r5, #4]
   3b886:	69a3      	ldr	r3, [r4, #24]
   3b888:	60a3      	str	r3, [r4, #8]
   3b88a:	89a3      	ldrh	r3, [r4, #12]
   3b88c:	071a      	lsls	r2, r3, #28
   3b88e:	d52f      	bpl.n	3b8f0 <__swbuf_r+0x84>
   3b890:	6923      	ldr	r3, [r4, #16]
   3b892:	b36b      	cbz	r3, 3b8f0 <__swbuf_r+0x84>
   3b894:	6923      	ldr	r3, [r4, #16]
   3b896:	b2f6      	uxtb	r6, r6
   3b898:	6820      	ldr	r0, [r4, #0]
   3b89a:	4637      	mov	r7, r6
   3b89c:	1ac0      	subs	r0, r0, r3
   3b89e:	6963      	ldr	r3, [r4, #20]
   3b8a0:	4283      	cmp	r3, r0
   3b8a2:	dc04      	bgt.n	3b8ae <__swbuf_r+0x42>
   3b8a4:	4621      	mov	r1, r4
   3b8a6:	4628      	mov	r0, r5
   3b8a8:	f000 f946 	bl	3bb38 <_fflush_r>
   3b8ac:	bb30      	cbnz	r0, 3b8fc <__swbuf_r+0x90>
   3b8ae:	68a3      	ldr	r3, [r4, #8]
   3b8b0:	3001      	adds	r0, #1
   3b8b2:	3b01      	subs	r3, #1
   3b8b4:	60a3      	str	r3, [r4, #8]
   3b8b6:	6823      	ldr	r3, [r4, #0]
   3b8b8:	1c5a      	adds	r2, r3, #1
   3b8ba:	6022      	str	r2, [r4, #0]
   3b8bc:	701e      	strb	r6, [r3, #0]
   3b8be:	6963      	ldr	r3, [r4, #20]
   3b8c0:	4283      	cmp	r3, r0
   3b8c2:	d004      	beq.n	3b8ce <__swbuf_r+0x62>
   3b8c4:	89a3      	ldrh	r3, [r4, #12]
   3b8c6:	07db      	lsls	r3, r3, #31
   3b8c8:	d506      	bpl.n	3b8d8 <__swbuf_r+0x6c>
   3b8ca:	2e0a      	cmp	r6, #10
   3b8cc:	d104      	bne.n	3b8d8 <__swbuf_r+0x6c>
   3b8ce:	4621      	mov	r1, r4
   3b8d0:	4628      	mov	r0, r5
   3b8d2:	f000 f931 	bl	3bb38 <_fflush_r>
   3b8d6:	b988      	cbnz	r0, 3b8fc <__swbuf_r+0x90>
   3b8d8:	4638      	mov	r0, r7
   3b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3b8dc:	4b0a      	ldr	r3, [pc, #40]	; (3b908 <__swbuf_r+0x9c>)
   3b8de:	429c      	cmp	r4, r3
   3b8e0:	d101      	bne.n	3b8e6 <__swbuf_r+0x7a>
   3b8e2:	68ac      	ldr	r4, [r5, #8]
   3b8e4:	e7cf      	b.n	3b886 <__swbuf_r+0x1a>
   3b8e6:	4b09      	ldr	r3, [pc, #36]	; (3b90c <__swbuf_r+0xa0>)
   3b8e8:	429c      	cmp	r4, r3
   3b8ea:	bf08      	it	eq
   3b8ec:	68ec      	ldreq	r4, [r5, #12]
   3b8ee:	e7ca      	b.n	3b886 <__swbuf_r+0x1a>
   3b8f0:	4621      	mov	r1, r4
   3b8f2:	4628      	mov	r0, r5
   3b8f4:	f000 f81e 	bl	3b934 <__swsetup_r>
   3b8f8:	2800      	cmp	r0, #0
   3b8fa:	d0cb      	beq.n	3b894 <__swbuf_r+0x28>
   3b8fc:	f04f 37ff 	mov.w	r7, #4294967295
   3b900:	e7ea      	b.n	3b8d8 <__swbuf_r+0x6c>
   3b902:	bf00      	nop
   3b904:	0004413c 	.word	0x0004413c
   3b908:	0004415c 	.word	0x0004415c
   3b90c:	0004411c 	.word	0x0004411c

0003b910 <_write_r>:
   3b910:	b538      	push	{r3, r4, r5, lr}
   3b912:	4604      	mov	r4, r0
   3b914:	4d06      	ldr	r5, [pc, #24]	; (3b930 <_write_r+0x20>)
   3b916:	4608      	mov	r0, r1
   3b918:	4611      	mov	r1, r2
   3b91a:	2200      	movs	r2, #0
   3b91c:	602a      	str	r2, [r5, #0]
   3b91e:	461a      	mov	r2, r3
   3b920:	f002 fbc4 	bl	3e0ac <_write>
   3b924:	1c43      	adds	r3, r0, #1
   3b926:	d102      	bne.n	3b92e <_write_r+0x1e>
   3b928:	682b      	ldr	r3, [r5, #0]
   3b92a:	b103      	cbz	r3, 3b92e <_write_r+0x1e>
   3b92c:	6023      	str	r3, [r4, #0]
   3b92e:	bd38      	pop	{r3, r4, r5, pc}
   3b930:	20020e58 	.word	0x20020e58

0003b934 <__swsetup_r>:
   3b934:	4b32      	ldr	r3, [pc, #200]	; (3ba00 <__swsetup_r+0xcc>)
   3b936:	b570      	push	{r4, r5, r6, lr}
   3b938:	681d      	ldr	r5, [r3, #0]
   3b93a:	4606      	mov	r6, r0
   3b93c:	460c      	mov	r4, r1
   3b93e:	b125      	cbz	r5, 3b94a <__swsetup_r+0x16>
   3b940:	69ab      	ldr	r3, [r5, #24]
   3b942:	b913      	cbnz	r3, 3b94a <__swsetup_r+0x16>
   3b944:	4628      	mov	r0, r5
   3b946:	f000 f975 	bl	3bc34 <__sinit>
   3b94a:	4b2e      	ldr	r3, [pc, #184]	; (3ba04 <__swsetup_r+0xd0>)
   3b94c:	429c      	cmp	r4, r3
   3b94e:	d10f      	bne.n	3b970 <__swsetup_r+0x3c>
   3b950:	686c      	ldr	r4, [r5, #4]
   3b952:	89a3      	ldrh	r3, [r4, #12]
   3b954:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3b958:	0719      	lsls	r1, r3, #28
   3b95a:	d42c      	bmi.n	3b9b6 <__swsetup_r+0x82>
   3b95c:	06dd      	lsls	r5, r3, #27
   3b95e:	d411      	bmi.n	3b984 <__swsetup_r+0x50>
   3b960:	2309      	movs	r3, #9
   3b962:	6033      	str	r3, [r6, #0]
   3b964:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   3b968:	f04f 30ff 	mov.w	r0, #4294967295
   3b96c:	81a3      	strh	r3, [r4, #12]
   3b96e:	e03e      	b.n	3b9ee <__swsetup_r+0xba>
   3b970:	4b25      	ldr	r3, [pc, #148]	; (3ba08 <__swsetup_r+0xd4>)
   3b972:	429c      	cmp	r4, r3
   3b974:	d101      	bne.n	3b97a <__swsetup_r+0x46>
   3b976:	68ac      	ldr	r4, [r5, #8]
   3b978:	e7eb      	b.n	3b952 <__swsetup_r+0x1e>
   3b97a:	4b24      	ldr	r3, [pc, #144]	; (3ba0c <__swsetup_r+0xd8>)
   3b97c:	429c      	cmp	r4, r3
   3b97e:	bf08      	it	eq
   3b980:	68ec      	ldreq	r4, [r5, #12]
   3b982:	e7e6      	b.n	3b952 <__swsetup_r+0x1e>
   3b984:	0758      	lsls	r0, r3, #29
   3b986:	d512      	bpl.n	3b9ae <__swsetup_r+0x7a>
   3b988:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3b98a:	b141      	cbz	r1, 3b99e <__swsetup_r+0x6a>
   3b98c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3b990:	4299      	cmp	r1, r3
   3b992:	d002      	beq.n	3b99a <__swsetup_r+0x66>
   3b994:	4630      	mov	r0, r6
   3b996:	f7ff f823 	bl	3a9e0 <_free_r>
   3b99a:	2300      	movs	r3, #0
   3b99c:	6363      	str	r3, [r4, #52]	; 0x34
   3b99e:	89a3      	ldrh	r3, [r4, #12]
   3b9a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   3b9a4:	81a3      	strh	r3, [r4, #12]
   3b9a6:	2300      	movs	r3, #0
   3b9a8:	6063      	str	r3, [r4, #4]
   3b9aa:	6923      	ldr	r3, [r4, #16]
   3b9ac:	6023      	str	r3, [r4, #0]
   3b9ae:	89a3      	ldrh	r3, [r4, #12]
   3b9b0:	f043 0308 	orr.w	r3, r3, #8
   3b9b4:	81a3      	strh	r3, [r4, #12]
   3b9b6:	6923      	ldr	r3, [r4, #16]
   3b9b8:	b94b      	cbnz	r3, 3b9ce <__swsetup_r+0x9a>
   3b9ba:	89a3      	ldrh	r3, [r4, #12]
   3b9bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
   3b9c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   3b9c4:	d003      	beq.n	3b9ce <__swsetup_r+0x9a>
   3b9c6:	4621      	mov	r1, r4
   3b9c8:	4630      	mov	r0, r6
   3b9ca:	f000 fbfb 	bl	3c1c4 <__smakebuf_r>
   3b9ce:	89a0      	ldrh	r0, [r4, #12]
   3b9d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   3b9d4:	f010 0301 	ands.w	r3, r0, #1
   3b9d8:	d00a      	beq.n	3b9f0 <__swsetup_r+0xbc>
   3b9da:	2300      	movs	r3, #0
   3b9dc:	60a3      	str	r3, [r4, #8]
   3b9de:	6963      	ldr	r3, [r4, #20]
   3b9e0:	425b      	negs	r3, r3
   3b9e2:	61a3      	str	r3, [r4, #24]
   3b9e4:	6923      	ldr	r3, [r4, #16]
   3b9e6:	b943      	cbnz	r3, 3b9fa <__swsetup_r+0xc6>
   3b9e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   3b9ec:	d1ba      	bne.n	3b964 <__swsetup_r+0x30>
   3b9ee:	bd70      	pop	{r4, r5, r6, pc}
   3b9f0:	0781      	lsls	r1, r0, #30
   3b9f2:	bf58      	it	pl
   3b9f4:	6963      	ldrpl	r3, [r4, #20]
   3b9f6:	60a3      	str	r3, [r4, #8]
   3b9f8:	e7f4      	b.n	3b9e4 <__swsetup_r+0xb0>
   3b9fa:	2000      	movs	r0, #0
   3b9fc:	e7f7      	b.n	3b9ee <__swsetup_r+0xba>
   3b9fe:	bf00      	nop
   3ba00:	2001563c 	.word	0x2001563c
   3ba04:	0004413c 	.word	0x0004413c
   3ba08:	0004415c 	.word	0x0004415c
   3ba0c:	0004411c 	.word	0x0004411c

0003ba10 <_close_r>:
   3ba10:	b538      	push	{r3, r4, r5, lr}
   3ba12:	2300      	movs	r3, #0
   3ba14:	4d05      	ldr	r5, [pc, #20]	; (3ba2c <_close_r+0x1c>)
   3ba16:	4604      	mov	r4, r0
   3ba18:	4608      	mov	r0, r1
   3ba1a:	602b      	str	r3, [r5, #0]
   3ba1c:	f002 fb4a 	bl	3e0b4 <_close>
   3ba20:	1c43      	adds	r3, r0, #1
   3ba22:	d102      	bne.n	3ba2a <_close_r+0x1a>
   3ba24:	682b      	ldr	r3, [r5, #0]
   3ba26:	b103      	cbz	r3, 3ba2a <_close_r+0x1a>
   3ba28:	6023      	str	r3, [r4, #0]
   3ba2a:	bd38      	pop	{r3, r4, r5, pc}
   3ba2c:	20020e58 	.word	0x20020e58

0003ba30 <__sflush_r>:
   3ba30:	898a      	ldrh	r2, [r1, #12]
   3ba32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3ba36:	4605      	mov	r5, r0
   3ba38:	0710      	lsls	r0, r2, #28
   3ba3a:	460c      	mov	r4, r1
   3ba3c:	d458      	bmi.n	3baf0 <__sflush_r+0xc0>
   3ba3e:	684b      	ldr	r3, [r1, #4]
   3ba40:	2b00      	cmp	r3, #0
   3ba42:	dc05      	bgt.n	3ba50 <__sflush_r+0x20>
   3ba44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   3ba46:	2b00      	cmp	r3, #0
   3ba48:	dc02      	bgt.n	3ba50 <__sflush_r+0x20>
   3ba4a:	2000      	movs	r0, #0
   3ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3ba50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ba52:	2e00      	cmp	r6, #0
   3ba54:	d0f9      	beq.n	3ba4a <__sflush_r+0x1a>
   3ba56:	2300      	movs	r3, #0
   3ba58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   3ba5c:	682f      	ldr	r7, [r5, #0]
   3ba5e:	602b      	str	r3, [r5, #0]
   3ba60:	d032      	beq.n	3bac8 <__sflush_r+0x98>
   3ba62:	6d60      	ldr	r0, [r4, #84]	; 0x54
   3ba64:	89a3      	ldrh	r3, [r4, #12]
   3ba66:	075a      	lsls	r2, r3, #29
   3ba68:	d505      	bpl.n	3ba76 <__sflush_r+0x46>
   3ba6a:	6863      	ldr	r3, [r4, #4]
   3ba6c:	1ac0      	subs	r0, r0, r3
   3ba6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3ba70:	b10b      	cbz	r3, 3ba76 <__sflush_r+0x46>
   3ba72:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3ba74:	1ac0      	subs	r0, r0, r3
   3ba76:	2300      	movs	r3, #0
   3ba78:	4602      	mov	r2, r0
   3ba7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   3ba7c:	4628      	mov	r0, r5
   3ba7e:	6a21      	ldr	r1, [r4, #32]
   3ba80:	47b0      	blx	r6
   3ba82:	1c43      	adds	r3, r0, #1
   3ba84:	89a3      	ldrh	r3, [r4, #12]
   3ba86:	d106      	bne.n	3ba96 <__sflush_r+0x66>
   3ba88:	6829      	ldr	r1, [r5, #0]
   3ba8a:	291d      	cmp	r1, #29
   3ba8c:	d82c      	bhi.n	3bae8 <__sflush_r+0xb8>
   3ba8e:	4a29      	ldr	r2, [pc, #164]	; (3bb34 <__sflush_r+0x104>)
   3ba90:	40ca      	lsrs	r2, r1
   3ba92:	07d6      	lsls	r6, r2, #31
   3ba94:	d528      	bpl.n	3bae8 <__sflush_r+0xb8>
   3ba96:	2200      	movs	r2, #0
   3ba98:	04d9      	lsls	r1, r3, #19
   3ba9a:	6062      	str	r2, [r4, #4]
   3ba9c:	6922      	ldr	r2, [r4, #16]
   3ba9e:	6022      	str	r2, [r4, #0]
   3baa0:	d504      	bpl.n	3baac <__sflush_r+0x7c>
   3baa2:	1c42      	adds	r2, r0, #1
   3baa4:	d101      	bne.n	3baaa <__sflush_r+0x7a>
   3baa6:	682b      	ldr	r3, [r5, #0]
   3baa8:	b903      	cbnz	r3, 3baac <__sflush_r+0x7c>
   3baaa:	6560      	str	r0, [r4, #84]	; 0x54
   3baac:	6b61      	ldr	r1, [r4, #52]	; 0x34
   3baae:	602f      	str	r7, [r5, #0]
   3bab0:	2900      	cmp	r1, #0
   3bab2:	d0ca      	beq.n	3ba4a <__sflush_r+0x1a>
   3bab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3bab8:	4299      	cmp	r1, r3
   3baba:	d002      	beq.n	3bac2 <__sflush_r+0x92>
   3babc:	4628      	mov	r0, r5
   3babe:	f7fe ff8f 	bl	3a9e0 <_free_r>
   3bac2:	2000      	movs	r0, #0
   3bac4:	6360      	str	r0, [r4, #52]	; 0x34
   3bac6:	e7c1      	b.n	3ba4c <__sflush_r+0x1c>
   3bac8:	6a21      	ldr	r1, [r4, #32]
   3baca:	2301      	movs	r3, #1
   3bacc:	4628      	mov	r0, r5
   3bace:	47b0      	blx	r6
   3bad0:	1c41      	adds	r1, r0, #1
   3bad2:	d1c7      	bne.n	3ba64 <__sflush_r+0x34>
   3bad4:	682b      	ldr	r3, [r5, #0]
   3bad6:	2b00      	cmp	r3, #0
   3bad8:	d0c4      	beq.n	3ba64 <__sflush_r+0x34>
   3bada:	2b1d      	cmp	r3, #29
   3badc:	d001      	beq.n	3bae2 <__sflush_r+0xb2>
   3bade:	2b16      	cmp	r3, #22
   3bae0:	d101      	bne.n	3bae6 <__sflush_r+0xb6>
   3bae2:	602f      	str	r7, [r5, #0]
   3bae4:	e7b1      	b.n	3ba4a <__sflush_r+0x1a>
   3bae6:	89a3      	ldrh	r3, [r4, #12]
   3bae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3baec:	81a3      	strh	r3, [r4, #12]
   3baee:	e7ad      	b.n	3ba4c <__sflush_r+0x1c>
   3baf0:	690f      	ldr	r7, [r1, #16]
   3baf2:	2f00      	cmp	r7, #0
   3baf4:	d0a9      	beq.n	3ba4a <__sflush_r+0x1a>
   3baf6:	0793      	lsls	r3, r2, #30
   3baf8:	680e      	ldr	r6, [r1, #0]
   3bafa:	600f      	str	r7, [r1, #0]
   3bafc:	bf0c      	ite	eq
   3bafe:	694b      	ldreq	r3, [r1, #20]
   3bb00:	2300      	movne	r3, #0
   3bb02:	eba6 0807 	sub.w	r8, r6, r7
   3bb06:	608b      	str	r3, [r1, #8]
   3bb08:	f1b8 0f00 	cmp.w	r8, #0
   3bb0c:	dd9d      	ble.n	3ba4a <__sflush_r+0x1a>
   3bb0e:	4643      	mov	r3, r8
   3bb10:	463a      	mov	r2, r7
   3bb12:	6a21      	ldr	r1, [r4, #32]
   3bb14:	4628      	mov	r0, r5
   3bb16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3bb18:	47b0      	blx	r6
   3bb1a:	2800      	cmp	r0, #0
   3bb1c:	dc06      	bgt.n	3bb2c <__sflush_r+0xfc>
   3bb1e:	89a3      	ldrh	r3, [r4, #12]
   3bb20:	f04f 30ff 	mov.w	r0, #4294967295
   3bb24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3bb28:	81a3      	strh	r3, [r4, #12]
   3bb2a:	e78f      	b.n	3ba4c <__sflush_r+0x1c>
   3bb2c:	4407      	add	r7, r0
   3bb2e:	eba8 0800 	sub.w	r8, r8, r0
   3bb32:	e7e9      	b.n	3bb08 <__sflush_r+0xd8>
   3bb34:	20400001 	.word	0x20400001

0003bb38 <_fflush_r>:
   3bb38:	b538      	push	{r3, r4, r5, lr}
   3bb3a:	690b      	ldr	r3, [r1, #16]
   3bb3c:	4605      	mov	r5, r0
   3bb3e:	460c      	mov	r4, r1
   3bb40:	b913      	cbnz	r3, 3bb48 <_fflush_r+0x10>
   3bb42:	2500      	movs	r5, #0
   3bb44:	4628      	mov	r0, r5
   3bb46:	bd38      	pop	{r3, r4, r5, pc}
   3bb48:	b118      	cbz	r0, 3bb52 <_fflush_r+0x1a>
   3bb4a:	6983      	ldr	r3, [r0, #24]
   3bb4c:	b90b      	cbnz	r3, 3bb52 <_fflush_r+0x1a>
   3bb4e:	f000 f871 	bl	3bc34 <__sinit>
   3bb52:	4b14      	ldr	r3, [pc, #80]	; (3bba4 <_fflush_r+0x6c>)
   3bb54:	429c      	cmp	r4, r3
   3bb56:	d11b      	bne.n	3bb90 <_fflush_r+0x58>
   3bb58:	686c      	ldr	r4, [r5, #4]
   3bb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3bb5e:	2b00      	cmp	r3, #0
   3bb60:	d0ef      	beq.n	3bb42 <_fflush_r+0xa>
   3bb62:	6e62      	ldr	r2, [r4, #100]	; 0x64
   3bb64:	07d0      	lsls	r0, r2, #31
   3bb66:	d404      	bmi.n	3bb72 <_fflush_r+0x3a>
   3bb68:	0599      	lsls	r1, r3, #22
   3bb6a:	d402      	bmi.n	3bb72 <_fflush_r+0x3a>
   3bb6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3bb6e:	f006 fd28 	bl	425c2 <__retarget_lock_acquire_recursive>
   3bb72:	4628      	mov	r0, r5
   3bb74:	4621      	mov	r1, r4
   3bb76:	f7ff ff5b 	bl	3ba30 <__sflush_r>
   3bb7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3bb7c:	4605      	mov	r5, r0
   3bb7e:	07da      	lsls	r2, r3, #31
   3bb80:	d4e0      	bmi.n	3bb44 <_fflush_r+0xc>
   3bb82:	89a3      	ldrh	r3, [r4, #12]
   3bb84:	059b      	lsls	r3, r3, #22
   3bb86:	d4dd      	bmi.n	3bb44 <_fflush_r+0xc>
   3bb88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   3bb8a:	f006 fd1b 	bl	425c4 <__retarget_lock_release_recursive>
   3bb8e:	e7d9      	b.n	3bb44 <_fflush_r+0xc>
   3bb90:	4b05      	ldr	r3, [pc, #20]	; (3bba8 <_fflush_r+0x70>)
   3bb92:	429c      	cmp	r4, r3
   3bb94:	d101      	bne.n	3bb9a <_fflush_r+0x62>
   3bb96:	68ac      	ldr	r4, [r5, #8]
   3bb98:	e7df      	b.n	3bb5a <_fflush_r+0x22>
   3bb9a:	4b04      	ldr	r3, [pc, #16]	; (3bbac <_fflush_r+0x74>)
   3bb9c:	429c      	cmp	r4, r3
   3bb9e:	bf08      	it	eq
   3bba0:	68ec      	ldreq	r4, [r5, #12]
   3bba2:	e7da      	b.n	3bb5a <_fflush_r+0x22>
   3bba4:	0004413c 	.word	0x0004413c
   3bba8:	0004415c 	.word	0x0004415c
   3bbac:	0004411c 	.word	0x0004411c

0003bbb0 <std>:
   3bbb0:	2300      	movs	r3, #0
   3bbb2:	b510      	push	{r4, lr}
   3bbb4:	4604      	mov	r4, r0
   3bbb6:	6083      	str	r3, [r0, #8]
   3bbb8:	8181      	strh	r1, [r0, #12]
   3bbba:	4619      	mov	r1, r3
   3bbbc:	6643      	str	r3, [r0, #100]	; 0x64
   3bbbe:	81c2      	strh	r2, [r0, #14]
   3bbc0:	2208      	movs	r2, #8
   3bbc2:	6183      	str	r3, [r0, #24]
   3bbc4:	e9c0 3300 	strd	r3, r3, [r0]
   3bbc8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   3bbcc:	305c      	adds	r0, #92	; 0x5c
   3bbce:	f006 f886 	bl	41cde <memset>
   3bbd2:	4b05      	ldr	r3, [pc, #20]	; (3bbe8 <std+0x38>)
   3bbd4:	6224      	str	r4, [r4, #32]
   3bbd6:	6263      	str	r3, [r4, #36]	; 0x24
   3bbd8:	4b04      	ldr	r3, [pc, #16]	; (3bbec <std+0x3c>)
   3bbda:	62a3      	str	r3, [r4, #40]	; 0x28
   3bbdc:	4b04      	ldr	r3, [pc, #16]	; (3bbf0 <std+0x40>)
   3bbde:	62e3      	str	r3, [r4, #44]	; 0x2c
   3bbe0:	4b04      	ldr	r3, [pc, #16]	; (3bbf4 <std+0x44>)
   3bbe2:	6323      	str	r3, [r4, #48]	; 0x30
   3bbe4:	bd10      	pop	{r4, pc}
   3bbe6:	bf00      	nop
   3bbe8:	00041fa7 	.word	0x00041fa7
   3bbec:	00041fcd 	.word	0x00041fcd
   3bbf0:	00042005 	.word	0x00042005
   3bbf4:	00042029 	.word	0x00042029

0003bbf8 <_cleanup_r>:
   3bbf8:	4901      	ldr	r1, [pc, #4]	; (3bc00 <_cleanup_r+0x8>)
   3bbfa:	f006 bb9a 	b.w	42332 <_fwalk_reent>
   3bbfe:	bf00      	nop
   3bc00:	0003bb39 	.word	0x0003bb39

0003bc04 <__sfp_lock_acquire>:
   3bc04:	4801      	ldr	r0, [pc, #4]	; (3bc0c <__sfp_lock_acquire+0x8>)
   3bc06:	f006 bcdc 	b.w	425c2 <__retarget_lock_acquire_recursive>
   3bc0a:	bf00      	nop
   3bc0c:	20020e64 	.word	0x20020e64

0003bc10 <__sfp_lock_release>:
   3bc10:	4801      	ldr	r0, [pc, #4]	; (3bc18 <__sfp_lock_release+0x8>)
   3bc12:	f006 bcd7 	b.w	425c4 <__retarget_lock_release_recursive>
   3bc16:	bf00      	nop
   3bc18:	20020e64 	.word	0x20020e64

0003bc1c <__sinit_lock_acquire>:
   3bc1c:	4801      	ldr	r0, [pc, #4]	; (3bc24 <__sinit_lock_acquire+0x8>)
   3bc1e:	f006 bcd0 	b.w	425c2 <__retarget_lock_acquire_recursive>
   3bc22:	bf00      	nop
   3bc24:	20020e5f 	.word	0x20020e5f

0003bc28 <__sinit_lock_release>:
   3bc28:	4801      	ldr	r0, [pc, #4]	; (3bc30 <__sinit_lock_release+0x8>)
   3bc2a:	f006 bccb 	b.w	425c4 <__retarget_lock_release_recursive>
   3bc2e:	bf00      	nop
   3bc30:	20020e5f 	.word	0x20020e5f

0003bc34 <__sinit>:
   3bc34:	b510      	push	{r4, lr}
   3bc36:	4604      	mov	r4, r0
   3bc38:	f7ff fff0 	bl	3bc1c <__sinit_lock_acquire>
   3bc3c:	69a3      	ldr	r3, [r4, #24]
   3bc3e:	b11b      	cbz	r3, 3bc48 <__sinit+0x14>
   3bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   3bc44:	f7ff bff0 	b.w	3bc28 <__sinit_lock_release>
   3bc48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   3bc4c:	6523      	str	r3, [r4, #80]	; 0x50
   3bc4e:	4620      	mov	r0, r4
   3bc50:	4b12      	ldr	r3, [pc, #72]	; (3bc9c <__sinit+0x68>)
   3bc52:	4a13      	ldr	r2, [pc, #76]	; (3bca0 <__sinit+0x6c>)
   3bc54:	681b      	ldr	r3, [r3, #0]
   3bc56:	62a2      	str	r2, [r4, #40]	; 0x28
   3bc58:	42a3      	cmp	r3, r4
   3bc5a:	bf04      	itt	eq
   3bc5c:	2301      	moveq	r3, #1
   3bc5e:	61a3      	streq	r3, [r4, #24]
   3bc60:	f000 f820 	bl	3bca4 <__sfp>
   3bc64:	6060      	str	r0, [r4, #4]
   3bc66:	4620      	mov	r0, r4
   3bc68:	f000 f81c 	bl	3bca4 <__sfp>
   3bc6c:	60a0      	str	r0, [r4, #8]
   3bc6e:	4620      	mov	r0, r4
   3bc70:	f000 f818 	bl	3bca4 <__sfp>
   3bc74:	2200      	movs	r2, #0
   3bc76:	2104      	movs	r1, #4
   3bc78:	60e0      	str	r0, [r4, #12]
   3bc7a:	6860      	ldr	r0, [r4, #4]
   3bc7c:	f7ff ff98 	bl	3bbb0 <std>
   3bc80:	2201      	movs	r2, #1
   3bc82:	2109      	movs	r1, #9
   3bc84:	68a0      	ldr	r0, [r4, #8]
   3bc86:	f7ff ff93 	bl	3bbb0 <std>
   3bc8a:	2202      	movs	r2, #2
   3bc8c:	2112      	movs	r1, #18
   3bc8e:	68e0      	ldr	r0, [r4, #12]
   3bc90:	f7ff ff8e 	bl	3bbb0 <std>
   3bc94:	2301      	movs	r3, #1
   3bc96:	61a3      	str	r3, [r4, #24]
   3bc98:	e7d2      	b.n	3bc40 <__sinit+0xc>
   3bc9a:	bf00      	nop
   3bc9c:	000440f0 	.word	0x000440f0
   3bca0:	0003bbf9 	.word	0x0003bbf9

0003bca4 <__sfp>:
   3bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3bca6:	4607      	mov	r7, r0
   3bca8:	f7ff ffac 	bl	3bc04 <__sfp_lock_acquire>
   3bcac:	4b1e      	ldr	r3, [pc, #120]	; (3bd28 <__sfp+0x84>)
   3bcae:	681e      	ldr	r6, [r3, #0]
   3bcb0:	69b3      	ldr	r3, [r6, #24]
   3bcb2:	b913      	cbnz	r3, 3bcba <__sfp+0x16>
   3bcb4:	4630      	mov	r0, r6
   3bcb6:	f7ff ffbd 	bl	3bc34 <__sinit>
   3bcba:	3648      	adds	r6, #72	; 0x48
   3bcbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   3bcc0:	3b01      	subs	r3, #1
   3bcc2:	d503      	bpl.n	3bccc <__sfp+0x28>
   3bcc4:	6833      	ldr	r3, [r6, #0]
   3bcc6:	b30b      	cbz	r3, 3bd0c <__sfp+0x68>
   3bcc8:	6836      	ldr	r6, [r6, #0]
   3bcca:	e7f7      	b.n	3bcbc <__sfp+0x18>
   3bccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   3bcd0:	b9d5      	cbnz	r5, 3bd08 <__sfp+0x64>
   3bcd2:	4b16      	ldr	r3, [pc, #88]	; (3bd2c <__sfp+0x88>)
   3bcd4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   3bcd8:	6665      	str	r5, [r4, #100]	; 0x64
   3bcda:	60e3      	str	r3, [r4, #12]
   3bcdc:	f006 fc70 	bl	425c0 <__retarget_lock_init_recursive>
   3bce0:	f7ff ff96 	bl	3bc10 <__sfp_lock_release>
   3bce4:	2208      	movs	r2, #8
   3bce6:	4629      	mov	r1, r5
   3bce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   3bcec:	6025      	str	r5, [r4, #0]
   3bcee:	61a5      	str	r5, [r4, #24]
   3bcf0:	e9c4 5501 	strd	r5, r5, [r4, #4]
   3bcf4:	e9c4 5504 	strd	r5, r5, [r4, #16]
   3bcf8:	f005 fff1 	bl	41cde <memset>
   3bcfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   3bd00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   3bd04:	4620      	mov	r0, r4
   3bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3bd08:	3468      	adds	r4, #104	; 0x68
   3bd0a:	e7d9      	b.n	3bcc0 <__sfp+0x1c>
   3bd0c:	2104      	movs	r1, #4
   3bd0e:	4638      	mov	r0, r7
   3bd10:	f006 faf9 	bl	42306 <__sfmoreglue>
   3bd14:	4604      	mov	r4, r0
   3bd16:	6030      	str	r0, [r6, #0]
   3bd18:	2800      	cmp	r0, #0
   3bd1a:	d1d5      	bne.n	3bcc8 <__sfp+0x24>
   3bd1c:	f7ff ff78 	bl	3bc10 <__sfp_lock_release>
   3bd20:	230c      	movs	r3, #12
   3bd22:	603b      	str	r3, [r7, #0]
   3bd24:	e7ee      	b.n	3bd04 <__sfp+0x60>
   3bd26:	bf00      	nop
   3bd28:	000440f0 	.word	0x000440f0
   3bd2c:	ffff0001 	.word	0xffff0001

0003bd30 <__gethex>:
   3bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3bd34:	ed2d 8b02 	vpush	{d8}
   3bd38:	b089      	sub	sp, #36	; 0x24
   3bd3a:	ee08 0a10 	vmov	s16, r0
   3bd3e:	468b      	mov	fp, r1
   3bd40:	4690      	mov	r8, r2
   3bd42:	9304      	str	r3, [sp, #16]
   3bd44:	4bbb      	ldr	r3, [pc, #748]	; (3c034 <__gethex+0x304>)
   3bd46:	681b      	ldr	r3, [r3, #0]
   3bd48:	4618      	mov	r0, r3
   3bd4a:	9301      	str	r3, [sp, #4]
   3bd4c:	f7e1 fa86 	bl	1d25c <strlen>
   3bd50:	9b01      	ldr	r3, [sp, #4]
   3bd52:	f8db 2000 	ldr.w	r2, [fp]
   3bd56:	4682      	mov	sl, r0
   3bd58:	4403      	add	r3, r0
   3bd5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   3bd5e:	9305      	str	r3, [sp, #20]
   3bd60:	1c93      	adds	r3, r2, #2
   3bd62:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   3bd66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   3bd6a:	32fe      	adds	r2, #254	; 0xfe
   3bd6c:	18d1      	adds	r1, r2, r3
   3bd6e:	461f      	mov	r7, r3
   3bd70:	f813 0b01 	ldrb.w	r0, [r3], #1
   3bd74:	9100      	str	r1, [sp, #0]
   3bd76:	2830      	cmp	r0, #48	; 0x30
   3bd78:	d0f8      	beq.n	3bd6c <__gethex+0x3c>
   3bd7a:	f006 fb4a 	bl	42412 <__hexdig_fun>
   3bd7e:	4604      	mov	r4, r0
   3bd80:	2800      	cmp	r0, #0
   3bd82:	d139      	bne.n	3bdf8 <__gethex+0xc8>
   3bd84:	4652      	mov	r2, sl
   3bd86:	9901      	ldr	r1, [sp, #4]
   3bd88:	4638      	mov	r0, r7
   3bd8a:	f006 f991 	bl	420b0 <strncmp>
   3bd8e:	4605      	mov	r5, r0
   3bd90:	2800      	cmp	r0, #0
   3bd92:	d167      	bne.n	3be64 <__gethex+0x134>
   3bd94:	f817 000a 	ldrb.w	r0, [r7, sl]
   3bd98:	eb07 060a 	add.w	r6, r7, sl
   3bd9c:	f006 fb39 	bl	42412 <__hexdig_fun>
   3bda0:	2800      	cmp	r0, #0
   3bda2:	d061      	beq.n	3be68 <__gethex+0x138>
   3bda4:	4633      	mov	r3, r6
   3bda6:	7818      	ldrb	r0, [r3, #0]
   3bda8:	461f      	mov	r7, r3
   3bdaa:	3301      	adds	r3, #1
   3bdac:	2830      	cmp	r0, #48	; 0x30
   3bdae:	d0fa      	beq.n	3bda6 <__gethex+0x76>
   3bdb0:	f006 fb2f 	bl	42412 <__hexdig_fun>
   3bdb4:	fab0 f480 	clz	r4, r0
   3bdb8:	2301      	movs	r3, #1
   3bdba:	4635      	mov	r5, r6
   3bdbc:	0964      	lsrs	r4, r4, #5
   3bdbe:	9300      	str	r3, [sp, #0]
   3bdc0:	463a      	mov	r2, r7
   3bdc2:	4616      	mov	r6, r2
   3bdc4:	3201      	adds	r2, #1
   3bdc6:	7830      	ldrb	r0, [r6, #0]
   3bdc8:	f006 fb23 	bl	42412 <__hexdig_fun>
   3bdcc:	2800      	cmp	r0, #0
   3bdce:	d1f8      	bne.n	3bdc2 <__gethex+0x92>
   3bdd0:	4652      	mov	r2, sl
   3bdd2:	9901      	ldr	r1, [sp, #4]
   3bdd4:	4630      	mov	r0, r6
   3bdd6:	f006 f96b 	bl	420b0 <strncmp>
   3bdda:	b980      	cbnz	r0, 3bdfe <__gethex+0xce>
   3bddc:	b94d      	cbnz	r5, 3bdf2 <__gethex+0xc2>
   3bdde:	eb06 050a 	add.w	r5, r6, sl
   3bde2:	462a      	mov	r2, r5
   3bde4:	4616      	mov	r6, r2
   3bde6:	3201      	adds	r2, #1
   3bde8:	7830      	ldrb	r0, [r6, #0]
   3bdea:	f006 fb12 	bl	42412 <__hexdig_fun>
   3bdee:	2800      	cmp	r0, #0
   3bdf0:	d1f8      	bne.n	3bde4 <__gethex+0xb4>
   3bdf2:	1bad      	subs	r5, r5, r6
   3bdf4:	00ad      	lsls	r5, r5, #2
   3bdf6:	e004      	b.n	3be02 <__gethex+0xd2>
   3bdf8:	2400      	movs	r4, #0
   3bdfa:	4625      	mov	r5, r4
   3bdfc:	e7e0      	b.n	3bdc0 <__gethex+0x90>
   3bdfe:	2d00      	cmp	r5, #0
   3be00:	d1f7      	bne.n	3bdf2 <__gethex+0xc2>
   3be02:	7833      	ldrb	r3, [r6, #0]
   3be04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   3be08:	2b50      	cmp	r3, #80	; 0x50
   3be0a:	d13b      	bne.n	3be84 <__gethex+0x154>
   3be0c:	7873      	ldrb	r3, [r6, #1]
   3be0e:	2b2b      	cmp	r3, #43	; 0x2b
   3be10:	d02c      	beq.n	3be6c <__gethex+0x13c>
   3be12:	2b2d      	cmp	r3, #45	; 0x2d
   3be14:	d02e      	beq.n	3be74 <__gethex+0x144>
   3be16:	1c71      	adds	r1, r6, #1
   3be18:	f04f 0900 	mov.w	r9, #0
   3be1c:	7808      	ldrb	r0, [r1, #0]
   3be1e:	f006 faf8 	bl	42412 <__hexdig_fun>
   3be22:	1e43      	subs	r3, r0, #1
   3be24:	b2db      	uxtb	r3, r3
   3be26:	2b18      	cmp	r3, #24
   3be28:	d82c      	bhi.n	3be84 <__gethex+0x154>
   3be2a:	f1a0 0210 	sub.w	r2, r0, #16
   3be2e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   3be32:	f006 faee 	bl	42412 <__hexdig_fun>
   3be36:	1e43      	subs	r3, r0, #1
   3be38:	b2db      	uxtb	r3, r3
   3be3a:	2b18      	cmp	r3, #24
   3be3c:	d91d      	bls.n	3be7a <__gethex+0x14a>
   3be3e:	f1b9 0f00 	cmp.w	r9, #0
   3be42:	d000      	beq.n	3be46 <__gethex+0x116>
   3be44:	4252      	negs	r2, r2
   3be46:	4415      	add	r5, r2
   3be48:	f8cb 1000 	str.w	r1, [fp]
   3be4c:	b1e4      	cbz	r4, 3be88 <__gethex+0x158>
   3be4e:	9b00      	ldr	r3, [sp, #0]
   3be50:	2b00      	cmp	r3, #0
   3be52:	bf14      	ite	ne
   3be54:	2700      	movne	r7, #0
   3be56:	2706      	moveq	r7, #6
   3be58:	4638      	mov	r0, r7
   3be5a:	b009      	add	sp, #36	; 0x24
   3be5c:	ecbd 8b02 	vpop	{d8}
   3be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3be64:	463e      	mov	r6, r7
   3be66:	4625      	mov	r5, r4
   3be68:	2401      	movs	r4, #1
   3be6a:	e7ca      	b.n	3be02 <__gethex+0xd2>
   3be6c:	f04f 0900 	mov.w	r9, #0
   3be70:	1cb1      	adds	r1, r6, #2
   3be72:	e7d3      	b.n	3be1c <__gethex+0xec>
   3be74:	f04f 0901 	mov.w	r9, #1
   3be78:	e7fa      	b.n	3be70 <__gethex+0x140>
   3be7a:	230a      	movs	r3, #10
   3be7c:	fb03 0202 	mla	r2, r3, r2, r0
   3be80:	3a10      	subs	r2, #16
   3be82:	e7d4      	b.n	3be2e <__gethex+0xfe>
   3be84:	4631      	mov	r1, r6
   3be86:	e7df      	b.n	3be48 <__gethex+0x118>
   3be88:	1bf3      	subs	r3, r6, r7
   3be8a:	4621      	mov	r1, r4
   3be8c:	3b01      	subs	r3, #1
   3be8e:	2b07      	cmp	r3, #7
   3be90:	dc52      	bgt.n	3bf38 <__gethex+0x208>
   3be92:	ee18 0a10 	vmov	r0, s16
   3be96:	f04f 0b00 	mov.w	fp, #0
   3be9a:	f006 fbe4 	bl	42666 <_Balloc>
   3be9e:	f1ca 0301 	rsb	r3, sl, #1
   3bea2:	f100 0914 	add.w	r9, r0, #20
   3bea6:	4604      	mov	r4, r0
   3bea8:	f8cd b000 	str.w	fp, [sp]
   3beac:	f8cd 9008 	str.w	r9, [sp, #8]
   3beb0:	9306      	str	r3, [sp, #24]
   3beb2:	42b7      	cmp	r7, r6
   3beb4:	d343      	bcc.n	3bf3e <__gethex+0x20e>
   3beb6:	9802      	ldr	r0, [sp, #8]
   3beb8:	9b00      	ldr	r3, [sp, #0]
   3beba:	f840 3b04 	str.w	r3, [r0], #4
   3bebe:	eba0 0009 	sub.w	r0, r0, r9
   3bec2:	1080      	asrs	r0, r0, #2
   3bec4:	0146      	lsls	r6, r0, #5
   3bec6:	6120      	str	r0, [r4, #16]
   3bec8:	4618      	mov	r0, r3
   3beca:	f006 fc94 	bl	427f6 <__hi0bits>
   3bece:	1a30      	subs	r0, r6, r0
   3bed0:	f8d8 6000 	ldr.w	r6, [r8]
   3bed4:	42b0      	cmp	r0, r6
   3bed6:	dd66      	ble.n	3bfa6 <__gethex+0x276>
   3bed8:	1b87      	subs	r7, r0, r6
   3beda:	4620      	mov	r0, r4
   3bedc:	4639      	mov	r1, r7
   3bede:	f006 ff1c 	bl	42d1a <__any_on>
   3bee2:	4682      	mov	sl, r0
   3bee4:	b1a8      	cbz	r0, 3bf12 <__gethex+0x1e2>
   3bee6:	1e7b      	subs	r3, r7, #1
   3bee8:	f04f 0a01 	mov.w	sl, #1
   3beec:	1159      	asrs	r1, r3, #5
   3beee:	f003 021f 	and.w	r2, r3, #31
   3bef2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   3bef6:	fa0a f202 	lsl.w	r2, sl, r2
   3befa:	420a      	tst	r2, r1
   3befc:	d009      	beq.n	3bf12 <__gethex+0x1e2>
   3befe:	4553      	cmp	r3, sl
   3bf00:	dd05      	ble.n	3bf0e <__gethex+0x1de>
   3bf02:	1eb9      	subs	r1, r7, #2
   3bf04:	4620      	mov	r0, r4
   3bf06:	f006 ff08 	bl	42d1a <__any_on>
   3bf0a:	2800      	cmp	r0, #0
   3bf0c:	d148      	bne.n	3bfa0 <__gethex+0x270>
   3bf0e:	f04f 0a02 	mov.w	sl, #2
   3bf12:	443d      	add	r5, r7
   3bf14:	4639      	mov	r1, r7
   3bf16:	4620      	mov	r0, r4
   3bf18:	f006 fa2a 	bl	42370 <rshift>
   3bf1c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3bf20:	42ab      	cmp	r3, r5
   3bf22:	da4f      	bge.n	3bfc4 <__gethex+0x294>
   3bf24:	4621      	mov	r1, r4
   3bf26:	ee18 0a10 	vmov	r0, s16
   3bf2a:	f006 fbd0 	bl	426ce <_Bfree>
   3bf2e:	2300      	movs	r3, #0
   3bf30:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3bf32:	27a3      	movs	r7, #163	; 0xa3
   3bf34:	6013      	str	r3, [r2, #0]
   3bf36:	e78f      	b.n	3be58 <__gethex+0x128>
   3bf38:	3101      	adds	r1, #1
   3bf3a:	105b      	asrs	r3, r3, #1
   3bf3c:	e7a7      	b.n	3be8e <__gethex+0x15e>
   3bf3e:	1e73      	subs	r3, r6, #1
   3bf40:	9a05      	ldr	r2, [sp, #20]
   3bf42:	9303      	str	r3, [sp, #12]
   3bf44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   3bf48:	4293      	cmp	r3, r2
   3bf4a:	d019      	beq.n	3bf80 <__gethex+0x250>
   3bf4c:	f1bb 0f20 	cmp.w	fp, #32
   3bf50:	d107      	bne.n	3bf62 <__gethex+0x232>
   3bf52:	9b02      	ldr	r3, [sp, #8]
   3bf54:	9a00      	ldr	r2, [sp, #0]
   3bf56:	f843 2b04 	str.w	r2, [r3], #4
   3bf5a:	9302      	str	r3, [sp, #8]
   3bf5c:	2300      	movs	r3, #0
   3bf5e:	469b      	mov	fp, r3
   3bf60:	9300      	str	r3, [sp, #0]
   3bf62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   3bf66:	f006 fa54 	bl	42412 <__hexdig_fun>
   3bf6a:	f000 000f 	and.w	r0, r0, #15
   3bf6e:	9b00      	ldr	r3, [sp, #0]
   3bf70:	fa00 f00b 	lsl.w	r0, r0, fp
   3bf74:	f10b 0b04 	add.w	fp, fp, #4
   3bf78:	4303      	orrs	r3, r0
   3bf7a:	9300      	str	r3, [sp, #0]
   3bf7c:	9b03      	ldr	r3, [sp, #12]
   3bf7e:	e00d      	b.n	3bf9c <__gethex+0x26c>
   3bf80:	9b03      	ldr	r3, [sp, #12]
   3bf82:	9a06      	ldr	r2, [sp, #24]
   3bf84:	4413      	add	r3, r2
   3bf86:	42bb      	cmp	r3, r7
   3bf88:	d3e0      	bcc.n	3bf4c <__gethex+0x21c>
   3bf8a:	4618      	mov	r0, r3
   3bf8c:	4652      	mov	r2, sl
   3bf8e:	9901      	ldr	r1, [sp, #4]
   3bf90:	9307      	str	r3, [sp, #28]
   3bf92:	f006 f88d 	bl	420b0 <strncmp>
   3bf96:	9b07      	ldr	r3, [sp, #28]
   3bf98:	2800      	cmp	r0, #0
   3bf9a:	d1d7      	bne.n	3bf4c <__gethex+0x21c>
   3bf9c:	461e      	mov	r6, r3
   3bf9e:	e788      	b.n	3beb2 <__gethex+0x182>
   3bfa0:	f04f 0a03 	mov.w	sl, #3
   3bfa4:	e7b5      	b.n	3bf12 <__gethex+0x1e2>
   3bfa6:	da0a      	bge.n	3bfbe <__gethex+0x28e>
   3bfa8:	1a37      	subs	r7, r6, r0
   3bfaa:	4621      	mov	r1, r4
   3bfac:	ee18 0a10 	vmov	r0, s16
   3bfb0:	463a      	mov	r2, r7
   3bfb2:	1bed      	subs	r5, r5, r7
   3bfb4:	f006 fd13 	bl	429de <__lshift>
   3bfb8:	4604      	mov	r4, r0
   3bfba:	f100 0914 	add.w	r9, r0, #20
   3bfbe:	f04f 0a00 	mov.w	sl, #0
   3bfc2:	e7ab      	b.n	3bf1c <__gethex+0x1ec>
   3bfc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   3bfc8:	42a8      	cmp	r0, r5
   3bfca:	dd6f      	ble.n	3c0ac <__gethex+0x37c>
   3bfcc:	1b45      	subs	r5, r0, r5
   3bfce:	42ae      	cmp	r6, r5
   3bfd0:	dc32      	bgt.n	3c038 <__gethex+0x308>
   3bfd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3bfd6:	2b02      	cmp	r3, #2
   3bfd8:	d023      	beq.n	3c022 <__gethex+0x2f2>
   3bfda:	2b03      	cmp	r3, #3
   3bfdc:	d025      	beq.n	3c02a <__gethex+0x2fa>
   3bfde:	2b01      	cmp	r3, #1
   3bfe0:	d115      	bne.n	3c00e <__gethex+0x2de>
   3bfe2:	42ae      	cmp	r6, r5
   3bfe4:	d113      	bne.n	3c00e <__gethex+0x2de>
   3bfe6:	2e01      	cmp	r6, #1
   3bfe8:	d10b      	bne.n	3c002 <__gethex+0x2d2>
   3bfea:	f8d8 3004 	ldr.w	r3, [r8, #4]
   3bfee:	2762      	movs	r7, #98	; 0x62
   3bff0:	9a04      	ldr	r2, [sp, #16]
   3bff2:	6013      	str	r3, [r2, #0]
   3bff4:	2301      	movs	r3, #1
   3bff6:	6123      	str	r3, [r4, #16]
   3bff8:	f8c9 3000 	str.w	r3, [r9]
   3bffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3bffe:	601c      	str	r4, [r3, #0]
   3c000:	e72a      	b.n	3be58 <__gethex+0x128>
   3c002:	1e71      	subs	r1, r6, #1
   3c004:	4620      	mov	r0, r4
   3c006:	f006 fe88 	bl	42d1a <__any_on>
   3c00a:	2800      	cmp	r0, #0
   3c00c:	d1ed      	bne.n	3bfea <__gethex+0x2ba>
   3c00e:	4621      	mov	r1, r4
   3c010:	ee18 0a10 	vmov	r0, s16
   3c014:	f006 fb5b 	bl	426ce <_Bfree>
   3c018:	2300      	movs	r3, #0
   3c01a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   3c01c:	2750      	movs	r7, #80	; 0x50
   3c01e:	6013      	str	r3, [r2, #0]
   3c020:	e71a      	b.n	3be58 <__gethex+0x128>
   3c022:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3c024:	2b00      	cmp	r3, #0
   3c026:	d1f2      	bne.n	3c00e <__gethex+0x2de>
   3c028:	e7df      	b.n	3bfea <__gethex+0x2ba>
   3c02a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3c02c:	2b00      	cmp	r3, #0
   3c02e:	d1dc      	bne.n	3bfea <__gethex+0x2ba>
   3c030:	e7ed      	b.n	3c00e <__gethex+0x2de>
   3c032:	bf00      	nop
   3c034:	0004417c 	.word	0x0004417c
   3c038:	1e6f      	subs	r7, r5, #1
   3c03a:	f1ba 0f00 	cmp.w	sl, #0
   3c03e:	d132      	bne.n	3c0a6 <__gethex+0x376>
   3c040:	b127      	cbz	r7, 3c04c <__gethex+0x31c>
   3c042:	4639      	mov	r1, r7
   3c044:	4620      	mov	r0, r4
   3c046:	f006 fe68 	bl	42d1a <__any_on>
   3c04a:	4682      	mov	sl, r0
   3c04c:	117b      	asrs	r3, r7, #5
   3c04e:	2101      	movs	r1, #1
   3c050:	f007 071f 	and.w	r7, r7, #31
   3c054:	4620      	mov	r0, r4
   3c056:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   3c05a:	1b76      	subs	r6, r6, r5
   3c05c:	fa01 f707 	lsl.w	r7, r1, r7
   3c060:	4629      	mov	r1, r5
   3c062:	421f      	tst	r7, r3
   3c064:	f04f 0702 	mov.w	r7, #2
   3c068:	bf18      	it	ne
   3c06a:	f04a 0a02 	orrne.w	sl, sl, #2
   3c06e:	f006 f97f 	bl	42370 <rshift>
   3c072:	f8d8 5004 	ldr.w	r5, [r8, #4]
   3c076:	f1ba 0f00 	cmp.w	sl, #0
   3c07a:	d048      	beq.n	3c10e <__gethex+0x3de>
   3c07c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   3c080:	2b02      	cmp	r3, #2
   3c082:	d015      	beq.n	3c0b0 <__gethex+0x380>
   3c084:	2b03      	cmp	r3, #3
   3c086:	d017      	beq.n	3c0b8 <__gethex+0x388>
   3c088:	2b01      	cmp	r3, #1
   3c08a:	d109      	bne.n	3c0a0 <__gethex+0x370>
   3c08c:	f01a 0f02 	tst.w	sl, #2
   3c090:	d006      	beq.n	3c0a0 <__gethex+0x370>
   3c092:	f8d9 0000 	ldr.w	r0, [r9]
   3c096:	ea4a 0a00 	orr.w	sl, sl, r0
   3c09a:	f01a 0f01 	tst.w	sl, #1
   3c09e:	d10e      	bne.n	3c0be <__gethex+0x38e>
   3c0a0:	f047 0710 	orr.w	r7, r7, #16
   3c0a4:	e033      	b.n	3c10e <__gethex+0x3de>
   3c0a6:	f04f 0a01 	mov.w	sl, #1
   3c0aa:	e7cf      	b.n	3c04c <__gethex+0x31c>
   3c0ac:	2701      	movs	r7, #1
   3c0ae:	e7e2      	b.n	3c076 <__gethex+0x346>
   3c0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3c0b2:	f1c3 0301 	rsb	r3, r3, #1
   3c0b6:	9315      	str	r3, [sp, #84]	; 0x54
   3c0b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   3c0ba:	2b00      	cmp	r3, #0
   3c0bc:	d0f0      	beq.n	3c0a0 <__gethex+0x370>
   3c0be:	f8d4 9010 	ldr.w	r9, [r4, #16]
   3c0c2:	f104 0314 	add.w	r3, r4, #20
   3c0c6:	f04f 0c00 	mov.w	ip, #0
   3c0ca:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   3c0ce:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   3c0d2:	4618      	mov	r0, r3
   3c0d4:	f853 2b04 	ldr.w	r2, [r3], #4
   3c0d8:	f1b2 3fff 	cmp.w	r2, #4294967295
   3c0dc:	d01c      	beq.n	3c118 <__gethex+0x3e8>
   3c0de:	3201      	adds	r2, #1
   3c0e0:	6002      	str	r2, [r0, #0]
   3c0e2:	2f02      	cmp	r7, #2
   3c0e4:	f104 0314 	add.w	r3, r4, #20
   3c0e8:	d13a      	bne.n	3c160 <__gethex+0x430>
   3c0ea:	f8d8 2000 	ldr.w	r2, [r8]
   3c0ee:	3a01      	subs	r2, #1
   3c0f0:	42b2      	cmp	r2, r6
   3c0f2:	d10a      	bne.n	3c10a <__gethex+0x3da>
   3c0f4:	1171      	asrs	r1, r6, #5
   3c0f6:	2201      	movs	r2, #1
   3c0f8:	f006 061f 	and.w	r6, r6, #31
   3c0fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   3c100:	fa02 f606 	lsl.w	r6, r2, r6
   3c104:	421e      	tst	r6, r3
   3c106:	bf18      	it	ne
   3c108:	4617      	movne	r7, r2
   3c10a:	f047 0720 	orr.w	r7, r7, #32
   3c10e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   3c110:	601c      	str	r4, [r3, #0]
   3c112:	9b04      	ldr	r3, [sp, #16]
   3c114:	601d      	str	r5, [r3, #0]
   3c116:	e69f      	b.n	3be58 <__gethex+0x128>
   3c118:	4299      	cmp	r1, r3
   3c11a:	f843 cc04 	str.w	ip, [r3, #-4]
   3c11e:	d8d8      	bhi.n	3c0d2 <__gethex+0x3a2>
   3c120:	68a3      	ldr	r3, [r4, #8]
   3c122:	4599      	cmp	r9, r3
   3c124:	db14      	blt.n	3c150 <__gethex+0x420>
   3c126:	6861      	ldr	r1, [r4, #4]
   3c128:	ee18 0a10 	vmov	r0, s16
   3c12c:	3101      	adds	r1, #1
   3c12e:	f006 fa9a 	bl	42666 <_Balloc>
   3c132:	6922      	ldr	r2, [r4, #16]
   3c134:	4682      	mov	sl, r0
   3c136:	f104 010c 	add.w	r1, r4, #12
   3c13a:	3202      	adds	r2, #2
   3c13c:	300c      	adds	r0, #12
   3c13e:	0092      	lsls	r2, r2, #2
   3c140:	f005 fdad 	bl	41c9e <memcpy>
   3c144:	4621      	mov	r1, r4
   3c146:	4654      	mov	r4, sl
   3c148:	ee18 0a10 	vmov	r0, s16
   3c14c:	f006 fabf 	bl	426ce <_Bfree>
   3c150:	6923      	ldr	r3, [r4, #16]
   3c152:	1c5a      	adds	r2, r3, #1
   3c154:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   3c158:	6122      	str	r2, [r4, #16]
   3c15a:	2201      	movs	r2, #1
   3c15c:	615a      	str	r2, [r3, #20]
   3c15e:	e7c0      	b.n	3c0e2 <__gethex+0x3b2>
   3c160:	6922      	ldr	r2, [r4, #16]
   3c162:	454a      	cmp	r2, r9
   3c164:	dd0b      	ble.n	3c17e <__gethex+0x44e>
   3c166:	2101      	movs	r1, #1
   3c168:	4620      	mov	r0, r4
   3c16a:	f006 f901 	bl	42370 <rshift>
   3c16e:	3501      	adds	r5, #1
   3c170:	f8d8 3008 	ldr.w	r3, [r8, #8]
   3c174:	42ab      	cmp	r3, r5
   3c176:	f6ff aed5 	blt.w	3bf24 <__gethex+0x1f4>
   3c17a:	2701      	movs	r7, #1
   3c17c:	e7c5      	b.n	3c10a <__gethex+0x3da>
   3c17e:	f016 061f 	ands.w	r6, r6, #31
   3c182:	d0fa      	beq.n	3c17a <__gethex+0x44a>
   3c184:	449b      	add	fp, r3
   3c186:	f1c6 0620 	rsb	r6, r6, #32
   3c18a:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   3c18e:	f006 fb32 	bl	427f6 <__hi0bits>
   3c192:	42b0      	cmp	r0, r6
   3c194:	dbe7      	blt.n	3c166 <__gethex+0x436>
   3c196:	e7f0      	b.n	3c17a <__gethex+0x44a>

0003c198 <_localeconv_r>:
   3c198:	4800      	ldr	r0, [pc, #0]	; (3c19c <_localeconv_r+0x4>)
   3c19a:	4770      	bx	lr
   3c19c:	20015790 	.word	0x20015790

0003c1a0 <_lseek_r>:
   3c1a0:	b538      	push	{r3, r4, r5, lr}
   3c1a2:	4604      	mov	r4, r0
   3c1a4:	4d06      	ldr	r5, [pc, #24]	; (3c1c0 <_lseek_r+0x20>)
   3c1a6:	4608      	mov	r0, r1
   3c1a8:	4611      	mov	r1, r2
   3c1aa:	2200      	movs	r2, #0
   3c1ac:	602a      	str	r2, [r5, #0]
   3c1ae:	461a      	mov	r2, r3
   3c1b0:	f001 ff83 	bl	3e0ba <_lseek>
   3c1b4:	1c43      	adds	r3, r0, #1
   3c1b6:	d102      	bne.n	3c1be <_lseek_r+0x1e>
   3c1b8:	682b      	ldr	r3, [r5, #0]
   3c1ba:	b103      	cbz	r3, 3c1be <_lseek_r+0x1e>
   3c1bc:	6023      	str	r3, [r4, #0]
   3c1be:	bd38      	pop	{r3, r4, r5, pc}
   3c1c0:	20020e58 	.word	0x20020e58

0003c1c4 <__smakebuf_r>:
   3c1c4:	898b      	ldrh	r3, [r1, #12]
   3c1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3c1c8:	079d      	lsls	r5, r3, #30
   3c1ca:	4606      	mov	r6, r0
   3c1cc:	460c      	mov	r4, r1
   3c1ce:	d507      	bpl.n	3c1e0 <__smakebuf_r+0x1c>
   3c1d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
   3c1d4:	6023      	str	r3, [r4, #0]
   3c1d6:	6123      	str	r3, [r4, #16]
   3c1d8:	2301      	movs	r3, #1
   3c1da:	6163      	str	r3, [r4, #20]
   3c1dc:	b002      	add	sp, #8
   3c1de:	bd70      	pop	{r4, r5, r6, pc}
   3c1e0:	ab01      	add	r3, sp, #4
   3c1e2:	466a      	mov	r2, sp
   3c1e4:	f006 f9ef 	bl	425c6 <__swhatbuf_r>
   3c1e8:	9900      	ldr	r1, [sp, #0]
   3c1ea:	4605      	mov	r5, r0
   3c1ec:	4630      	mov	r0, r6
   3c1ee:	f7fe fc47 	bl	3aa80 <_malloc_r>
   3c1f2:	b948      	cbnz	r0, 3c208 <__smakebuf_r+0x44>
   3c1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   3c1f8:	059a      	lsls	r2, r3, #22
   3c1fa:	d4ef      	bmi.n	3c1dc <__smakebuf_r+0x18>
   3c1fc:	f023 0303 	bic.w	r3, r3, #3
   3c200:	f043 0302 	orr.w	r3, r3, #2
   3c204:	81a3      	strh	r3, [r4, #12]
   3c206:	e7e3      	b.n	3c1d0 <__smakebuf_r+0xc>
   3c208:	4b0d      	ldr	r3, [pc, #52]	; (3c240 <__smakebuf_r+0x7c>)
   3c20a:	62b3      	str	r3, [r6, #40]	; 0x28
   3c20c:	89a3      	ldrh	r3, [r4, #12]
   3c20e:	6020      	str	r0, [r4, #0]
   3c210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   3c214:	6120      	str	r0, [r4, #16]
   3c216:	81a3      	strh	r3, [r4, #12]
   3c218:	9b00      	ldr	r3, [sp, #0]
   3c21a:	6163      	str	r3, [r4, #20]
   3c21c:	9b01      	ldr	r3, [sp, #4]
   3c21e:	b15b      	cbz	r3, 3c238 <__smakebuf_r+0x74>
   3c220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   3c224:	4630      	mov	r0, r6
   3c226:	f000 fce5 	bl	3cbf4 <_isatty_r>
   3c22a:	b128      	cbz	r0, 3c238 <__smakebuf_r+0x74>
   3c22c:	89a3      	ldrh	r3, [r4, #12]
   3c22e:	f023 0303 	bic.w	r3, r3, #3
   3c232:	f043 0301 	orr.w	r3, r3, #1
   3c236:	81a3      	strh	r3, [r4, #12]
   3c238:	89a0      	ldrh	r0, [r4, #12]
   3c23a:	4305      	orrs	r5, r0
   3c23c:	81a5      	strh	r5, [r4, #12]
   3c23e:	e7cd      	b.n	3c1dc <__smakebuf_r+0x18>
   3c240:	0003bbf9 	.word	0x0003bbf9

0003c244 <__malloc_lock>:
   3c244:	4801      	ldr	r0, [pc, #4]	; (3c24c <__malloc_lock+0x8>)
   3c246:	f006 b9bc 	b.w	425c2 <__retarget_lock_acquire_recursive>
   3c24a:	bf00      	nop
   3c24c:	20020e60 	.word	0x20020e60

0003c250 <__malloc_unlock>:
   3c250:	4801      	ldr	r0, [pc, #4]	; (3c258 <__malloc_unlock+0x8>)
   3c252:	f006 b9b7 	b.w	425c4 <__retarget_lock_release_recursive>
   3c256:	bf00      	nop
   3c258:	20020e60 	.word	0x20020e60

0003c25c <__pow5mult>:
   3c25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c260:	4615      	mov	r5, r2
   3c262:	f012 0203 	ands.w	r2, r2, #3
   3c266:	4606      	mov	r6, r0
   3c268:	460f      	mov	r7, r1
   3c26a:	d007      	beq.n	3c27c <__pow5mult+0x20>
   3c26c:	3a01      	subs	r2, #1
   3c26e:	4c21      	ldr	r4, [pc, #132]	; (3c2f4 <__pow5mult+0x98>)
   3c270:	2300      	movs	r3, #0
   3c272:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   3c276:	f006 fa41 	bl	426fc <__multadd>
   3c27a:	4607      	mov	r7, r0
   3c27c:	10ad      	asrs	r5, r5, #2
   3c27e:	d035      	beq.n	3c2ec <__pow5mult+0x90>
   3c280:	6a74      	ldr	r4, [r6, #36]	; 0x24
   3c282:	b93c      	cbnz	r4, 3c294 <__pow5mult+0x38>
   3c284:	2010      	movs	r0, #16
   3c286:	f7fe fb9b 	bl	3a9c0 <malloc>
   3c28a:	6270      	str	r0, [r6, #36]	; 0x24
   3c28c:	6004      	str	r4, [r0, #0]
   3c28e:	60c4      	str	r4, [r0, #12]
   3c290:	e9c0 4401 	strd	r4, r4, [r0, #4]
   3c294:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   3c298:	f8d8 4008 	ldr.w	r4, [r8, #8]
   3c29c:	b94c      	cbnz	r4, 3c2b2 <__pow5mult+0x56>
   3c29e:	f240 2171 	movw	r1, #625	; 0x271
   3c2a2:	4630      	mov	r0, r6
   3c2a4:	f006 faf7 	bl	42896 <__i2b>
   3c2a8:	2300      	movs	r3, #0
   3c2aa:	4604      	mov	r4, r0
   3c2ac:	f8c8 0008 	str.w	r0, [r8, #8]
   3c2b0:	6003      	str	r3, [r0, #0]
   3c2b2:	f04f 0900 	mov.w	r9, #0
   3c2b6:	07eb      	lsls	r3, r5, #31
   3c2b8:	d50a      	bpl.n	3c2d0 <__pow5mult+0x74>
   3c2ba:	4639      	mov	r1, r7
   3c2bc:	4622      	mov	r2, r4
   3c2be:	4630      	mov	r0, r6
   3c2c0:	f006 faf2 	bl	428a8 <__multiply>
   3c2c4:	4680      	mov	r8, r0
   3c2c6:	4639      	mov	r1, r7
   3c2c8:	4630      	mov	r0, r6
   3c2ca:	4647      	mov	r7, r8
   3c2cc:	f006 f9ff 	bl	426ce <_Bfree>
   3c2d0:	106d      	asrs	r5, r5, #1
   3c2d2:	d00b      	beq.n	3c2ec <__pow5mult+0x90>
   3c2d4:	6820      	ldr	r0, [r4, #0]
   3c2d6:	b938      	cbnz	r0, 3c2e8 <__pow5mult+0x8c>
   3c2d8:	4622      	mov	r2, r4
   3c2da:	4621      	mov	r1, r4
   3c2dc:	4630      	mov	r0, r6
   3c2de:	f006 fae3 	bl	428a8 <__multiply>
   3c2e2:	6020      	str	r0, [r4, #0]
   3c2e4:	f8c0 9000 	str.w	r9, [r0]
   3c2e8:	4604      	mov	r4, r0
   3c2ea:	e7e4      	b.n	3c2b6 <__pow5mult+0x5a>
   3c2ec:	4638      	mov	r0, r7
   3c2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c2f2:	bf00      	nop
   3c2f4:	00044188 	.word	0x00044188

0003c2f8 <__ulp>:
   3c2f8:	b082      	sub	sp, #8
   3c2fa:	4913      	ldr	r1, [pc, #76]	; (3c348 <__ulp+0x50>)
   3c2fc:	ed8d 0b00 	vstr	d0, [sp]
   3c300:	9b01      	ldr	r3, [sp, #4]
   3c302:	4019      	ands	r1, r3
   3c304:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   3c308:	2900      	cmp	r1, #0
   3c30a:	dd05      	ble.n	3c318 <__ulp+0x20>
   3c30c:	2200      	movs	r2, #0
   3c30e:	460b      	mov	r3, r1
   3c310:	ec43 2b10 	vmov	d0, r2, r3
   3c314:	b002      	add	sp, #8
   3c316:	4770      	bx	lr
   3c318:	4249      	negs	r1, r1
   3c31a:	2200      	movs	r2, #0
   3c31c:	2300      	movs	r3, #0
   3c31e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   3c322:	ea4f 5021 	mov.w	r0, r1, asr #20
   3c326:	da04      	bge.n	3c332 <__ulp+0x3a>
   3c328:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   3c32c:	fa41 f300 	asr.w	r3, r1, r0
   3c330:	e7ee      	b.n	3c310 <__ulp+0x18>
   3c332:	f1a0 0114 	sub.w	r1, r0, #20
   3c336:	291e      	cmp	r1, #30
   3c338:	bfd6      	itet	le
   3c33a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   3c33e:	2101      	movgt	r1, #1
   3c340:	fa20 f101 	lsrle.w	r1, r0, r1
   3c344:	460a      	mov	r2, r1
   3c346:	e7e3      	b.n	3c310 <__ulp+0x18>
   3c348:	7ff00000 	.word	0x7ff00000

0003c34c <__b2d>:
   3c34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3c34e:	6905      	ldr	r5, [r0, #16]
   3c350:	f100 0714 	add.w	r7, r0, #20
   3c354:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   3c358:	f855 4c04 	ldr.w	r4, [r5, #-4]
   3c35c:	1f2e      	subs	r6, r5, #4
   3c35e:	4620      	mov	r0, r4
   3c360:	f006 fa49 	bl	427f6 <__hi0bits>
   3c364:	f1c0 0320 	rsb	r3, r0, #32
   3c368:	280a      	cmp	r0, #10
   3c36a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 3c3e8 <__b2d+0x9c>
   3c36e:	600b      	str	r3, [r1, #0]
   3c370:	dc15      	bgt.n	3c39e <__b2d+0x52>
   3c372:	f1c0 0e0b 	rsb	lr, r0, #11
   3c376:	42b7      	cmp	r7, r6
   3c378:	f100 0015 	add.w	r0, r0, #21
   3c37c:	fa24 f10e 	lsr.w	r1, r4, lr
   3c380:	fa04 f000 	lsl.w	r0, r4, r0
   3c384:	ea41 030c 	orr.w	r3, r1, ip
   3c388:	bf34      	ite	cc
   3c38a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3c38e:	2100      	movcs	r1, #0
   3c390:	fa21 f10e 	lsr.w	r1, r1, lr
   3c394:	ea40 0201 	orr.w	r2, r0, r1
   3c398:	ec43 2b10 	vmov	d0, r2, r3
   3c39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3c39e:	42b7      	cmp	r7, r6
   3c3a0:	bf3a      	itte	cc
   3c3a2:	f1a5 0608 	subcc.w	r6, r5, #8
   3c3a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   3c3aa:	2100      	movcs	r1, #0
   3c3ac:	380b      	subs	r0, #11
   3c3ae:	d017      	beq.n	3c3e0 <__b2d+0x94>
   3c3b0:	f1c0 0c20 	rsb	ip, r0, #32
   3c3b4:	fa04 f500 	lsl.w	r5, r4, r0
   3c3b8:	42be      	cmp	r6, r7
   3c3ba:	fa01 f000 	lsl.w	r0, r1, r0
   3c3be:	fa21 f40c 	lsr.w	r4, r1, ip
   3c3c2:	ea45 0504 	orr.w	r5, r5, r4
   3c3c6:	bf8c      	ite	hi
   3c3c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   3c3cc:	2400      	movls	r4, #0
   3c3ce:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   3c3d2:	fa24 f40c 	lsr.w	r4, r4, ip
   3c3d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   3c3da:	ea40 0204 	orr.w	r2, r0, r4
   3c3de:	e7db      	b.n	3c398 <__b2d+0x4c>
   3c3e0:	ea44 030c 	orr.w	r3, r4, ip
   3c3e4:	460a      	mov	r2, r1
   3c3e6:	e7d7      	b.n	3c398 <__b2d+0x4c>
   3c3e8:	3ff00000 	.word	0x3ff00000

0003c3ec <_svfiprintf_r>:
   3c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c3f0:	4698      	mov	r8, r3
   3c3f2:	898b      	ldrh	r3, [r1, #12]
   3c3f4:	b09d      	sub	sp, #116	; 0x74
   3c3f6:	4607      	mov	r7, r0
   3c3f8:	061b      	lsls	r3, r3, #24
   3c3fa:	460d      	mov	r5, r1
   3c3fc:	4614      	mov	r4, r2
   3c3fe:	d50e      	bpl.n	3c41e <_svfiprintf_r+0x32>
   3c400:	690b      	ldr	r3, [r1, #16]
   3c402:	b963      	cbnz	r3, 3c41e <_svfiprintf_r+0x32>
   3c404:	2140      	movs	r1, #64	; 0x40
   3c406:	f7fe fb3b 	bl	3aa80 <_malloc_r>
   3c40a:	6028      	str	r0, [r5, #0]
   3c40c:	6128      	str	r0, [r5, #16]
   3c40e:	b920      	cbnz	r0, 3c41a <_svfiprintf_r+0x2e>
   3c410:	230c      	movs	r3, #12
   3c412:	603b      	str	r3, [r7, #0]
   3c414:	f04f 30ff 	mov.w	r0, #4294967295
   3c418:	e0d1      	b.n	3c5be <_svfiprintf_r+0x1d2>
   3c41a:	2340      	movs	r3, #64	; 0x40
   3c41c:	616b      	str	r3, [r5, #20]
   3c41e:	2300      	movs	r3, #0
   3c420:	f8cd 800c 	str.w	r8, [sp, #12]
   3c424:	f04f 0901 	mov.w	r9, #1
   3c428:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 3c5d8 <_svfiprintf_r+0x1ec>
   3c42c:	9309      	str	r3, [sp, #36]	; 0x24
   3c42e:	2320      	movs	r3, #32
   3c430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   3c434:	2330      	movs	r3, #48	; 0x30
   3c436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   3c43a:	4623      	mov	r3, r4
   3c43c:	469a      	mov	sl, r3
   3c43e:	f813 2b01 	ldrb.w	r2, [r3], #1
   3c442:	b10a      	cbz	r2, 3c448 <_svfiprintf_r+0x5c>
   3c444:	2a25      	cmp	r2, #37	; 0x25
   3c446:	d1f9      	bne.n	3c43c <_svfiprintf_r+0x50>
   3c448:	ebba 0b04 	subs.w	fp, sl, r4
   3c44c:	d00b      	beq.n	3c466 <_svfiprintf_r+0x7a>
   3c44e:	465b      	mov	r3, fp
   3c450:	4622      	mov	r2, r4
   3c452:	4629      	mov	r1, r5
   3c454:	4638      	mov	r0, r7
   3c456:	f006 fcb6 	bl	42dc6 <__ssputs_r>
   3c45a:	3001      	adds	r0, #1
   3c45c:	f000 80aa 	beq.w	3c5b4 <_svfiprintf_r+0x1c8>
   3c460:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3c462:	445a      	add	r2, fp
   3c464:	9209      	str	r2, [sp, #36]	; 0x24
   3c466:	f89a 3000 	ldrb.w	r3, [sl]
   3c46a:	2b00      	cmp	r3, #0
   3c46c:	f000 80a2 	beq.w	3c5b4 <_svfiprintf_r+0x1c8>
   3c470:	2300      	movs	r3, #0
   3c472:	f04f 32ff 	mov.w	r2, #4294967295
   3c476:	f10a 0a01 	add.w	sl, sl, #1
   3c47a:	9304      	str	r3, [sp, #16]
   3c47c:	9307      	str	r3, [sp, #28]
   3c47e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   3c482:	931a      	str	r3, [sp, #104]	; 0x68
   3c484:	e9cd 2305 	strd	r2, r3, [sp, #20]
   3c488:	4654      	mov	r4, sl
   3c48a:	2205      	movs	r2, #5
   3c48c:	4852      	ldr	r0, [pc, #328]	; (3c5d8 <_svfiprintf_r+0x1ec>)
   3c48e:	f814 1b01 	ldrb.w	r1, [r4], #1
   3c492:	f005 fbe8 	bl	41c66 <memchr>
   3c496:	9a04      	ldr	r2, [sp, #16]
   3c498:	b9d8      	cbnz	r0, 3c4d2 <_svfiprintf_r+0xe6>
   3c49a:	06d0      	lsls	r0, r2, #27
   3c49c:	bf44      	itt	mi
   3c49e:	2320      	movmi	r3, #32
   3c4a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3c4a4:	0711      	lsls	r1, r2, #28
   3c4a6:	bf44      	itt	mi
   3c4a8:	232b      	movmi	r3, #43	; 0x2b
   3c4aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   3c4ae:	f89a 3000 	ldrb.w	r3, [sl]
   3c4b2:	2b2a      	cmp	r3, #42	; 0x2a
   3c4b4:	d015      	beq.n	3c4e2 <_svfiprintf_r+0xf6>
   3c4b6:	9a07      	ldr	r2, [sp, #28]
   3c4b8:	4654      	mov	r4, sl
   3c4ba:	2000      	movs	r0, #0
   3c4bc:	f04f 0c0a 	mov.w	ip, #10
   3c4c0:	4621      	mov	r1, r4
   3c4c2:	f811 3b01 	ldrb.w	r3, [r1], #1
   3c4c6:	3b30      	subs	r3, #48	; 0x30
   3c4c8:	2b09      	cmp	r3, #9
   3c4ca:	d94e      	bls.n	3c56a <_svfiprintf_r+0x17e>
   3c4cc:	b1b0      	cbz	r0, 3c4fc <_svfiprintf_r+0x110>
   3c4ce:	9207      	str	r2, [sp, #28]
   3c4d0:	e014      	b.n	3c4fc <_svfiprintf_r+0x110>
   3c4d2:	eba0 0308 	sub.w	r3, r0, r8
   3c4d6:	46a2      	mov	sl, r4
   3c4d8:	fa09 f303 	lsl.w	r3, r9, r3
   3c4dc:	4313      	orrs	r3, r2
   3c4de:	9304      	str	r3, [sp, #16]
   3c4e0:	e7d2      	b.n	3c488 <_svfiprintf_r+0x9c>
   3c4e2:	9b03      	ldr	r3, [sp, #12]
   3c4e4:	1d19      	adds	r1, r3, #4
   3c4e6:	681b      	ldr	r3, [r3, #0]
   3c4e8:	2b00      	cmp	r3, #0
   3c4ea:	9103      	str	r1, [sp, #12]
   3c4ec:	bfbb      	ittet	lt
   3c4ee:	425b      	neglt	r3, r3
   3c4f0:	f042 0202 	orrlt.w	r2, r2, #2
   3c4f4:	9307      	strge	r3, [sp, #28]
   3c4f6:	9307      	strlt	r3, [sp, #28]
   3c4f8:	bfb8      	it	lt
   3c4fa:	9204      	strlt	r2, [sp, #16]
   3c4fc:	7823      	ldrb	r3, [r4, #0]
   3c4fe:	2b2e      	cmp	r3, #46	; 0x2e
   3c500:	d10c      	bne.n	3c51c <_svfiprintf_r+0x130>
   3c502:	7863      	ldrb	r3, [r4, #1]
   3c504:	2b2a      	cmp	r3, #42	; 0x2a
   3c506:	d135      	bne.n	3c574 <_svfiprintf_r+0x188>
   3c508:	9b03      	ldr	r3, [sp, #12]
   3c50a:	3402      	adds	r4, #2
   3c50c:	1d1a      	adds	r2, r3, #4
   3c50e:	681b      	ldr	r3, [r3, #0]
   3c510:	2b00      	cmp	r3, #0
   3c512:	9203      	str	r2, [sp, #12]
   3c514:	bfb8      	it	lt
   3c516:	f04f 33ff 	movlt.w	r3, #4294967295
   3c51a:	9305      	str	r3, [sp, #20]
   3c51c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 3c5e8 <_svfiprintf_r+0x1fc>
   3c520:	2203      	movs	r2, #3
   3c522:	7821      	ldrb	r1, [r4, #0]
   3c524:	4650      	mov	r0, sl
   3c526:	f005 fb9e 	bl	41c66 <memchr>
   3c52a:	b140      	cbz	r0, 3c53e <_svfiprintf_r+0x152>
   3c52c:	2340      	movs	r3, #64	; 0x40
   3c52e:	eba0 000a 	sub.w	r0, r0, sl
   3c532:	3401      	adds	r4, #1
   3c534:	fa03 f000 	lsl.w	r0, r3, r0
   3c538:	9b04      	ldr	r3, [sp, #16]
   3c53a:	4303      	orrs	r3, r0
   3c53c:	9304      	str	r3, [sp, #16]
   3c53e:	f814 1b01 	ldrb.w	r1, [r4], #1
   3c542:	2206      	movs	r2, #6
   3c544:	4825      	ldr	r0, [pc, #148]	; (3c5dc <_svfiprintf_r+0x1f0>)
   3c546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   3c54a:	f005 fb8c 	bl	41c66 <memchr>
   3c54e:	2800      	cmp	r0, #0
   3c550:	d038      	beq.n	3c5c4 <_svfiprintf_r+0x1d8>
   3c552:	4b23      	ldr	r3, [pc, #140]	; (3c5e0 <_svfiprintf_r+0x1f4>)
   3c554:	bb1b      	cbnz	r3, 3c59e <_svfiprintf_r+0x1b2>
   3c556:	9b03      	ldr	r3, [sp, #12]
   3c558:	3307      	adds	r3, #7
   3c55a:	f023 0307 	bic.w	r3, r3, #7
   3c55e:	3308      	adds	r3, #8
   3c560:	9303      	str	r3, [sp, #12]
   3c562:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3c564:	4433      	add	r3, r6
   3c566:	9309      	str	r3, [sp, #36]	; 0x24
   3c568:	e767      	b.n	3c43a <_svfiprintf_r+0x4e>
   3c56a:	fb0c 3202 	mla	r2, ip, r2, r3
   3c56e:	460c      	mov	r4, r1
   3c570:	2001      	movs	r0, #1
   3c572:	e7a5      	b.n	3c4c0 <_svfiprintf_r+0xd4>
   3c574:	2300      	movs	r3, #0
   3c576:	3401      	adds	r4, #1
   3c578:	f04f 0c0a 	mov.w	ip, #10
   3c57c:	4619      	mov	r1, r3
   3c57e:	9305      	str	r3, [sp, #20]
   3c580:	4620      	mov	r0, r4
   3c582:	f810 2b01 	ldrb.w	r2, [r0], #1
   3c586:	3a30      	subs	r2, #48	; 0x30
   3c588:	2a09      	cmp	r2, #9
   3c58a:	d903      	bls.n	3c594 <_svfiprintf_r+0x1a8>
   3c58c:	2b00      	cmp	r3, #0
   3c58e:	d0c5      	beq.n	3c51c <_svfiprintf_r+0x130>
   3c590:	9105      	str	r1, [sp, #20]
   3c592:	e7c3      	b.n	3c51c <_svfiprintf_r+0x130>
   3c594:	fb0c 2101 	mla	r1, ip, r1, r2
   3c598:	4604      	mov	r4, r0
   3c59a:	2301      	movs	r3, #1
   3c59c:	e7f0      	b.n	3c580 <_svfiprintf_r+0x194>
   3c59e:	ab03      	add	r3, sp, #12
   3c5a0:	462a      	mov	r2, r5
   3c5a2:	a904      	add	r1, sp, #16
   3c5a4:	4638      	mov	r0, r7
   3c5a6:	9300      	str	r3, [sp, #0]
   3c5a8:	4b0e      	ldr	r3, [pc, #56]	; (3c5e4 <_svfiprintf_r+0x1f8>)
   3c5aa:	f7fe fbf3 	bl	3ad94 <_printf_float>
   3c5ae:	1c42      	adds	r2, r0, #1
   3c5b0:	4606      	mov	r6, r0
   3c5b2:	d1d6      	bne.n	3c562 <_svfiprintf_r+0x176>
   3c5b4:	89ab      	ldrh	r3, [r5, #12]
   3c5b6:	065b      	lsls	r3, r3, #25
   3c5b8:	f53f af2c 	bmi.w	3c414 <_svfiprintf_r+0x28>
   3c5bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   3c5be:	b01d      	add	sp, #116	; 0x74
   3c5c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c5c4:	ab03      	add	r3, sp, #12
   3c5c6:	462a      	mov	r2, r5
   3c5c8:	a904      	add	r1, sp, #16
   3c5ca:	4638      	mov	r0, r7
   3c5cc:	9300      	str	r3, [sp, #0]
   3c5ce:	4b05      	ldr	r3, [pc, #20]	; (3c5e4 <_svfiprintf_r+0x1f8>)
   3c5d0:	f7fe fe16 	bl	3b200 <_printf_i>
   3c5d4:	e7eb      	b.n	3c5ae <_svfiprintf_r+0x1c2>
   3c5d6:	bf00      	nop
   3c5d8:	0004c39f 	.word	0x0004c39f
   3c5dc:	0004c3a9 	.word	0x0004c3a9
   3c5e0:	0003ad95 	.word	0x0003ad95
   3c5e4:	00042dc7 	.word	0x00042dc7
   3c5e8:	0004c3a5 	.word	0x0004c3a5

0003c5ec <__ssvfiscanf_r>:
   3c5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c5f0:	460c      	mov	r4, r1
   3c5f2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   3c5f6:	2100      	movs	r1, #0
   3c5f8:	4606      	mov	r6, r0
   3c5fa:	f10d 0804 	add.w	r8, sp, #4
   3c5fe:	4fb4      	ldr	r7, [pc, #720]	; (3c8d0 <__ssvfiscanf_r+0x2e4>)
   3c600:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 3c8dc <__ssvfiscanf_r+0x2f0>
   3c604:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   3c608:	9300      	str	r3, [sp, #0]
   3c60a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   3c60e:	49b1      	ldr	r1, [pc, #708]	; (3c8d4 <__ssvfiscanf_r+0x2e8>)
   3c610:	91a0      	str	r1, [sp, #640]	; 0x280
   3c612:	49b1      	ldr	r1, [pc, #708]	; (3c8d8 <__ssvfiscanf_r+0x2ec>)
   3c614:	91a1      	str	r1, [sp, #644]	; 0x284
   3c616:	f892 a000 	ldrb.w	sl, [r2]
   3c61a:	f1ba 0f00 	cmp.w	sl, #0
   3c61e:	f000 8154 	beq.w	3c8ca <__ssvfiscanf_r+0x2de>
   3c622:	f81a 3007 	ldrb.w	r3, [sl, r7]
   3c626:	1c55      	adds	r5, r2, #1
   3c628:	f013 0308 	ands.w	r3, r3, #8
   3c62c:	d019      	beq.n	3c662 <__ssvfiscanf_r+0x76>
   3c62e:	6863      	ldr	r3, [r4, #4]
   3c630:	2b00      	cmp	r3, #0
   3c632:	dd0f      	ble.n	3c654 <__ssvfiscanf_r+0x68>
   3c634:	6823      	ldr	r3, [r4, #0]
   3c636:	781a      	ldrb	r2, [r3, #0]
   3c638:	5cba      	ldrb	r2, [r7, r2]
   3c63a:	0712      	lsls	r2, r2, #28
   3c63c:	d401      	bmi.n	3c642 <__ssvfiscanf_r+0x56>
   3c63e:	462a      	mov	r2, r5
   3c640:	e7e9      	b.n	3c616 <__ssvfiscanf_r+0x2a>
   3c642:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c644:	3301      	adds	r3, #1
   3c646:	3201      	adds	r2, #1
   3c648:	6023      	str	r3, [r4, #0]
   3c64a:	9245      	str	r2, [sp, #276]	; 0x114
   3c64c:	6862      	ldr	r2, [r4, #4]
   3c64e:	3a01      	subs	r2, #1
   3c650:	6062      	str	r2, [r4, #4]
   3c652:	e7ec      	b.n	3c62e <__ssvfiscanf_r+0x42>
   3c654:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c656:	4621      	mov	r1, r4
   3c658:	4630      	mov	r0, r6
   3c65a:	4798      	blx	r3
   3c65c:	2800      	cmp	r0, #0
   3c65e:	d0e9      	beq.n	3c634 <__ssvfiscanf_r+0x48>
   3c660:	e7ed      	b.n	3c63e <__ssvfiscanf_r+0x52>
   3c662:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   3c666:	f040 8086 	bne.w	3c776 <__ssvfiscanf_r+0x18a>
   3c66a:	9341      	str	r3, [sp, #260]	; 0x104
   3c66c:	9343      	str	r3, [sp, #268]	; 0x10c
   3c66e:	7853      	ldrb	r3, [r2, #1]
   3c670:	2b2a      	cmp	r3, #42	; 0x2a
   3c672:	bf04      	itt	eq
   3c674:	2310      	moveq	r3, #16
   3c676:	1c95      	addeq	r5, r2, #2
   3c678:	f04f 020a 	mov.w	r2, #10
   3c67c:	bf08      	it	eq
   3c67e:	9341      	streq	r3, [sp, #260]	; 0x104
   3c680:	46ab      	mov	fp, r5
   3c682:	f81b 1b01 	ldrb.w	r1, [fp], #1
   3c686:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3c68a:	2b09      	cmp	r3, #9
   3c68c:	d91d      	bls.n	3c6ca <__ssvfiscanf_r+0xde>
   3c68e:	2203      	movs	r2, #3
   3c690:	4892      	ldr	r0, [pc, #584]	; (3c8dc <__ssvfiscanf_r+0x2f0>)
   3c692:	f005 fae8 	bl	41c66 <memchr>
   3c696:	b140      	cbz	r0, 3c6aa <__ssvfiscanf_r+0xbe>
   3c698:	2301      	movs	r3, #1
   3c69a:	eba0 0009 	sub.w	r0, r0, r9
   3c69e:	465d      	mov	r5, fp
   3c6a0:	fa03 f000 	lsl.w	r0, r3, r0
   3c6a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c6a6:	4318      	orrs	r0, r3
   3c6a8:	9041      	str	r0, [sp, #260]	; 0x104
   3c6aa:	f815 3b01 	ldrb.w	r3, [r5], #1
   3c6ae:	2b78      	cmp	r3, #120	; 0x78
   3c6b0:	d806      	bhi.n	3c6c0 <__ssvfiscanf_r+0xd4>
   3c6b2:	2b57      	cmp	r3, #87	; 0x57
   3c6b4:	d810      	bhi.n	3c6d8 <__ssvfiscanf_r+0xec>
   3c6b6:	2b25      	cmp	r3, #37	; 0x25
   3c6b8:	d05d      	beq.n	3c776 <__ssvfiscanf_r+0x18a>
   3c6ba:	d857      	bhi.n	3c76c <__ssvfiscanf_r+0x180>
   3c6bc:	2b00      	cmp	r3, #0
   3c6be:	d075      	beq.n	3c7ac <__ssvfiscanf_r+0x1c0>
   3c6c0:	2303      	movs	r3, #3
   3c6c2:	9347      	str	r3, [sp, #284]	; 0x11c
   3c6c4:	230a      	movs	r3, #10
   3c6c6:	9342      	str	r3, [sp, #264]	; 0x108
   3c6c8:	e082      	b.n	3c7d0 <__ssvfiscanf_r+0x1e4>
   3c6ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   3c6cc:	465d      	mov	r5, fp
   3c6ce:	fb02 1303 	mla	r3, r2, r3, r1
   3c6d2:	3b30      	subs	r3, #48	; 0x30
   3c6d4:	9343      	str	r3, [sp, #268]	; 0x10c
   3c6d6:	e7d3      	b.n	3c680 <__ssvfiscanf_r+0x94>
   3c6d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   3c6dc:	2a20      	cmp	r2, #32
   3c6de:	d8ef      	bhi.n	3c6c0 <__ssvfiscanf_r+0xd4>
   3c6e0:	a101      	add	r1, pc, #4	; (adr r1, 3c6e8 <__ssvfiscanf_r+0xfc>)
   3c6e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   3c6e6:	bf00      	nop
   3c6e8:	0003c7bb 	.word	0x0003c7bb
   3c6ec:	0003c6c1 	.word	0x0003c6c1
   3c6f0:	0003c6c1 	.word	0x0003c6c1
   3c6f4:	0003c819 	.word	0x0003c819
   3c6f8:	0003c6c1 	.word	0x0003c6c1
   3c6fc:	0003c6c1 	.word	0x0003c6c1
   3c700:	0003c6c1 	.word	0x0003c6c1
   3c704:	0003c6c1 	.word	0x0003c6c1
   3c708:	0003c6c1 	.word	0x0003c6c1
   3c70c:	0003c6c1 	.word	0x0003c6c1
   3c710:	0003c6c1 	.word	0x0003c6c1
   3c714:	0003c82f 	.word	0x0003c82f
   3c718:	0003c805 	.word	0x0003c805
   3c71c:	0003c773 	.word	0x0003c773
   3c720:	0003c773 	.word	0x0003c773
   3c724:	0003c773 	.word	0x0003c773
   3c728:	0003c6c1 	.word	0x0003c6c1
   3c72c:	0003c809 	.word	0x0003c809
   3c730:	0003c6c1 	.word	0x0003c6c1
   3c734:	0003c6c1 	.word	0x0003c6c1
   3c738:	0003c6c1 	.word	0x0003c6c1
   3c73c:	0003c6c1 	.word	0x0003c6c1
   3c740:	0003c83f 	.word	0x0003c83f
   3c744:	0003c811 	.word	0x0003c811
   3c748:	0003c7b3 	.word	0x0003c7b3
   3c74c:	0003c6c1 	.word	0x0003c6c1
   3c750:	0003c6c1 	.word	0x0003c6c1
   3c754:	0003c83b 	.word	0x0003c83b
   3c758:	0003c6c1 	.word	0x0003c6c1
   3c75c:	0003c805 	.word	0x0003c805
   3c760:	0003c6c1 	.word	0x0003c6c1
   3c764:	0003c6c1 	.word	0x0003c6c1
   3c768:	0003c7bb 	.word	0x0003c7bb
   3c76c:	3b45      	subs	r3, #69	; 0x45
   3c76e:	2b02      	cmp	r3, #2
   3c770:	d8a6      	bhi.n	3c6c0 <__ssvfiscanf_r+0xd4>
   3c772:	2305      	movs	r3, #5
   3c774:	e02b      	b.n	3c7ce <__ssvfiscanf_r+0x1e2>
   3c776:	6863      	ldr	r3, [r4, #4]
   3c778:	2b00      	cmp	r3, #0
   3c77a:	dd0d      	ble.n	3c798 <__ssvfiscanf_r+0x1ac>
   3c77c:	6823      	ldr	r3, [r4, #0]
   3c77e:	781a      	ldrb	r2, [r3, #0]
   3c780:	4552      	cmp	r2, sl
   3c782:	f040 80a2 	bne.w	3c8ca <__ssvfiscanf_r+0x2de>
   3c786:	3301      	adds	r3, #1
   3c788:	6862      	ldr	r2, [r4, #4]
   3c78a:	6023      	str	r3, [r4, #0]
   3c78c:	3a01      	subs	r2, #1
   3c78e:	9b45      	ldr	r3, [sp, #276]	; 0x114
   3c790:	6062      	str	r2, [r4, #4]
   3c792:	3301      	adds	r3, #1
   3c794:	9345      	str	r3, [sp, #276]	; 0x114
   3c796:	e752      	b.n	3c63e <__ssvfiscanf_r+0x52>
   3c798:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c79a:	4621      	mov	r1, r4
   3c79c:	4630      	mov	r0, r6
   3c79e:	4798      	blx	r3
   3c7a0:	2800      	cmp	r0, #0
   3c7a2:	d0eb      	beq.n	3c77c <__ssvfiscanf_r+0x190>
   3c7a4:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c7a6:	2800      	cmp	r0, #0
   3c7a8:	f040 8085 	bne.w	3c8b6 <__ssvfiscanf_r+0x2ca>
   3c7ac:	f04f 30ff 	mov.w	r0, #4294967295
   3c7b0:	e087      	b.n	3c8c2 <__ssvfiscanf_r+0x2d6>
   3c7b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c7b4:	f042 0220 	orr.w	r2, r2, #32
   3c7b8:	9241      	str	r2, [sp, #260]	; 0x104
   3c7ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
   3c7bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3c7c0:	9241      	str	r2, [sp, #260]	; 0x104
   3c7c2:	2210      	movs	r2, #16
   3c7c4:	2b6f      	cmp	r3, #111	; 0x6f
   3c7c6:	9242      	str	r2, [sp, #264]	; 0x108
   3c7c8:	bf34      	ite	cc
   3c7ca:	2303      	movcc	r3, #3
   3c7cc:	2304      	movcs	r3, #4
   3c7ce:	9347      	str	r3, [sp, #284]	; 0x11c
   3c7d0:	6863      	ldr	r3, [r4, #4]
   3c7d2:	2b00      	cmp	r3, #0
   3c7d4:	dd42      	ble.n	3c85c <__ssvfiscanf_r+0x270>
   3c7d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c7d8:	0659      	lsls	r1, r3, #25
   3c7da:	d404      	bmi.n	3c7e6 <__ssvfiscanf_r+0x1fa>
   3c7dc:	6823      	ldr	r3, [r4, #0]
   3c7de:	781a      	ldrb	r2, [r3, #0]
   3c7e0:	5cba      	ldrb	r2, [r7, r2]
   3c7e2:	0712      	lsls	r2, r2, #28
   3c7e4:	d441      	bmi.n	3c86a <__ssvfiscanf_r+0x27e>
   3c7e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   3c7e8:	2b02      	cmp	r3, #2
   3c7ea:	dc50      	bgt.n	3c88e <__ssvfiscanf_r+0x2a2>
   3c7ec:	466b      	mov	r3, sp
   3c7ee:	4622      	mov	r2, r4
   3c7f0:	a941      	add	r1, sp, #260	; 0x104
   3c7f2:	4630      	mov	r0, r6
   3c7f4:	f000 f876 	bl	3c8e4 <_scanf_chars>
   3c7f8:	2801      	cmp	r0, #1
   3c7fa:	d066      	beq.n	3c8ca <__ssvfiscanf_r+0x2de>
   3c7fc:	2802      	cmp	r0, #2
   3c7fe:	f47f af1e 	bne.w	3c63e <__ssvfiscanf_r+0x52>
   3c802:	e7cf      	b.n	3c7a4 <__ssvfiscanf_r+0x1b8>
   3c804:	220a      	movs	r2, #10
   3c806:	e7dd      	b.n	3c7c4 <__ssvfiscanf_r+0x1d8>
   3c808:	2300      	movs	r3, #0
   3c80a:	9342      	str	r3, [sp, #264]	; 0x108
   3c80c:	2303      	movs	r3, #3
   3c80e:	e7de      	b.n	3c7ce <__ssvfiscanf_r+0x1e2>
   3c810:	2308      	movs	r3, #8
   3c812:	9342      	str	r3, [sp, #264]	; 0x108
   3c814:	2304      	movs	r3, #4
   3c816:	e7da      	b.n	3c7ce <__ssvfiscanf_r+0x1e2>
   3c818:	4629      	mov	r1, r5
   3c81a:	4640      	mov	r0, r8
   3c81c:	f006 fb88 	bl	42f30 <__sccl>
   3c820:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c822:	4605      	mov	r5, r0
   3c824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c828:	9341      	str	r3, [sp, #260]	; 0x104
   3c82a:	2301      	movs	r3, #1
   3c82c:	e7cf      	b.n	3c7ce <__ssvfiscanf_r+0x1e2>
   3c82e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   3c830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3c834:	9341      	str	r3, [sp, #260]	; 0x104
   3c836:	2300      	movs	r3, #0
   3c838:	e7c9      	b.n	3c7ce <__ssvfiscanf_r+0x1e2>
   3c83a:	2302      	movs	r3, #2
   3c83c:	e7c7      	b.n	3c7ce <__ssvfiscanf_r+0x1e2>
   3c83e:	9841      	ldr	r0, [sp, #260]	; 0x104
   3c840:	06c3      	lsls	r3, r0, #27
   3c842:	f53f aefc 	bmi.w	3c63e <__ssvfiscanf_r+0x52>
   3c846:	9b00      	ldr	r3, [sp, #0]
   3c848:	07c0      	lsls	r0, r0, #31
   3c84a:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c84c:	f103 0104 	add.w	r1, r3, #4
   3c850:	9100      	str	r1, [sp, #0]
   3c852:	681b      	ldr	r3, [r3, #0]
   3c854:	bf4c      	ite	mi
   3c856:	801a      	strhmi	r2, [r3, #0]
   3c858:	601a      	strpl	r2, [r3, #0]
   3c85a:	e6f0      	b.n	3c63e <__ssvfiscanf_r+0x52>
   3c85c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c85e:	4621      	mov	r1, r4
   3c860:	4630      	mov	r0, r6
   3c862:	4798      	blx	r3
   3c864:	2800      	cmp	r0, #0
   3c866:	d0b6      	beq.n	3c7d6 <__ssvfiscanf_r+0x1ea>
   3c868:	e79c      	b.n	3c7a4 <__ssvfiscanf_r+0x1b8>
   3c86a:	9a45      	ldr	r2, [sp, #276]	; 0x114
   3c86c:	3201      	adds	r2, #1
   3c86e:	9245      	str	r2, [sp, #276]	; 0x114
   3c870:	6862      	ldr	r2, [r4, #4]
   3c872:	3a01      	subs	r2, #1
   3c874:	2a00      	cmp	r2, #0
   3c876:	6062      	str	r2, [r4, #4]
   3c878:	dd02      	ble.n	3c880 <__ssvfiscanf_r+0x294>
   3c87a:	3301      	adds	r3, #1
   3c87c:	6023      	str	r3, [r4, #0]
   3c87e:	e7ad      	b.n	3c7dc <__ssvfiscanf_r+0x1f0>
   3c880:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   3c882:	4621      	mov	r1, r4
   3c884:	4630      	mov	r0, r6
   3c886:	4798      	blx	r3
   3c888:	2800      	cmp	r0, #0
   3c88a:	d0a7      	beq.n	3c7dc <__ssvfiscanf_r+0x1f0>
   3c88c:	e78a      	b.n	3c7a4 <__ssvfiscanf_r+0x1b8>
   3c88e:	2b04      	cmp	r3, #4
   3c890:	dc06      	bgt.n	3c8a0 <__ssvfiscanf_r+0x2b4>
   3c892:	466b      	mov	r3, sp
   3c894:	4622      	mov	r2, r4
   3c896:	a941      	add	r1, sp, #260	; 0x104
   3c898:	4630      	mov	r0, r6
   3c89a:	f000 f87b 	bl	3c994 <_scanf_i>
   3c89e:	e7ab      	b.n	3c7f8 <__ssvfiscanf_r+0x20c>
   3c8a0:	4b0f      	ldr	r3, [pc, #60]	; (3c8e0 <__ssvfiscanf_r+0x2f4>)
   3c8a2:	2b00      	cmp	r3, #0
   3c8a4:	f43f aecb 	beq.w	3c63e <__ssvfiscanf_r+0x52>
   3c8a8:	466b      	mov	r3, sp
   3c8aa:	4622      	mov	r2, r4
   3c8ac:	a941      	add	r1, sp, #260	; 0x104
   3c8ae:	4630      	mov	r0, r6
   3c8b0:	e000      	b.n	3c8b4 <__ssvfiscanf_r+0x2c8>
   3c8b2:	bf00      	nop
   3c8b4:	e7a0      	b.n	3c7f8 <__ssvfiscanf_r+0x20c>
   3c8b6:	89a3      	ldrh	r3, [r4, #12]
   3c8b8:	f013 0f40 	tst.w	r3, #64	; 0x40
   3c8bc:	bf18      	it	ne
   3c8be:	f04f 30ff 	movne.w	r0, #4294967295
   3c8c2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   3c8c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c8ca:	9844      	ldr	r0, [sp, #272]	; 0x110
   3c8cc:	e7f9      	b.n	3c8c2 <__ssvfiscanf_r+0x2d6>
   3c8ce:	bf00      	nop
   3c8d0:	0004c29f 	.word	0x0004c29f
   3c8d4:	00042e7d 	.word	0x00042e7d
   3c8d8:	00042ef7 	.word	0x00042ef7
   3c8dc:	0004c3a5 	.word	0x0004c3a5
   3c8e0:	00000000 	.word	0x00000000

0003c8e4 <_scanf_chars>:
   3c8e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3c8e8:	4615      	mov	r5, r2
   3c8ea:	688a      	ldr	r2, [r1, #8]
   3c8ec:	4680      	mov	r8, r0
   3c8ee:	460c      	mov	r4, r1
   3c8f0:	b932      	cbnz	r2, 3c900 <_scanf_chars+0x1c>
   3c8f2:	698a      	ldr	r2, [r1, #24]
   3c8f4:	2a00      	cmp	r2, #0
   3c8f6:	bf0c      	ite	eq
   3c8f8:	2201      	moveq	r2, #1
   3c8fa:	f04f 32ff 	movne.w	r2, #4294967295
   3c8fe:	608a      	str	r2, [r1, #8]
   3c900:	6822      	ldr	r2, [r4, #0]
   3c902:	2700      	movs	r7, #0
   3c904:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3c990 <_scanf_chars+0xac>
   3c908:	06d1      	lsls	r1, r2, #27
   3c90a:	bf5f      	itttt	pl
   3c90c:	681a      	ldrpl	r2, [r3, #0]
   3c90e:	1d11      	addpl	r1, r2, #4
   3c910:	6019      	strpl	r1, [r3, #0]
   3c912:	6816      	ldrpl	r6, [r2, #0]
   3c914:	69a0      	ldr	r0, [r4, #24]
   3c916:	b188      	cbz	r0, 3c93c <_scanf_chars+0x58>
   3c918:	2801      	cmp	r0, #1
   3c91a:	d107      	bne.n	3c92c <_scanf_chars+0x48>
   3c91c:	682b      	ldr	r3, [r5, #0]
   3c91e:	781a      	ldrb	r2, [r3, #0]
   3c920:	6963      	ldr	r3, [r4, #20]
   3c922:	5c9b      	ldrb	r3, [r3, r2]
   3c924:	b953      	cbnz	r3, 3c93c <_scanf_chars+0x58>
   3c926:	bb27      	cbnz	r7, 3c972 <_scanf_chars+0x8e>
   3c928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   3c92c:	2802      	cmp	r0, #2
   3c92e:	d120      	bne.n	3c972 <_scanf_chars+0x8e>
   3c930:	682b      	ldr	r3, [r5, #0]
   3c932:	781b      	ldrb	r3, [r3, #0]
   3c934:	f813 3009 	ldrb.w	r3, [r3, r9]
   3c938:	071b      	lsls	r3, r3, #28
   3c93a:	d41a      	bmi.n	3c972 <_scanf_chars+0x8e>
   3c93c:	6823      	ldr	r3, [r4, #0]
   3c93e:	3701      	adds	r7, #1
   3c940:	06da      	lsls	r2, r3, #27
   3c942:	bf5e      	ittt	pl
   3c944:	682b      	ldrpl	r3, [r5, #0]
   3c946:	781b      	ldrbpl	r3, [r3, #0]
   3c948:	f806 3b01 	strbpl.w	r3, [r6], #1
   3c94c:	682a      	ldr	r2, [r5, #0]
   3c94e:	686b      	ldr	r3, [r5, #4]
   3c950:	3201      	adds	r2, #1
   3c952:	3b01      	subs	r3, #1
   3c954:	602a      	str	r2, [r5, #0]
   3c956:	68a2      	ldr	r2, [r4, #8]
   3c958:	606b      	str	r3, [r5, #4]
   3c95a:	3a01      	subs	r2, #1
   3c95c:	60a2      	str	r2, [r4, #8]
   3c95e:	b142      	cbz	r2, 3c972 <_scanf_chars+0x8e>
   3c960:	2b00      	cmp	r3, #0
   3c962:	dcd7      	bgt.n	3c914 <_scanf_chars+0x30>
   3c964:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3c968:	4629      	mov	r1, r5
   3c96a:	4640      	mov	r0, r8
   3c96c:	4798      	blx	r3
   3c96e:	2800      	cmp	r0, #0
   3c970:	d0d0      	beq.n	3c914 <_scanf_chars+0x30>
   3c972:	6823      	ldr	r3, [r4, #0]
   3c974:	f013 0310 	ands.w	r3, r3, #16
   3c978:	d105      	bne.n	3c986 <_scanf_chars+0xa2>
   3c97a:	68e2      	ldr	r2, [r4, #12]
   3c97c:	3201      	adds	r2, #1
   3c97e:	60e2      	str	r2, [r4, #12]
   3c980:	69a2      	ldr	r2, [r4, #24]
   3c982:	b102      	cbz	r2, 3c986 <_scanf_chars+0xa2>
   3c984:	7033      	strb	r3, [r6, #0]
   3c986:	6923      	ldr	r3, [r4, #16]
   3c988:	2000      	movs	r0, #0
   3c98a:	441f      	add	r7, r3
   3c98c:	6127      	str	r7, [r4, #16]
   3c98e:	e7cb      	b.n	3c928 <_scanf_chars+0x44>
   3c990:	0004c29f 	.word	0x0004c29f

0003c994 <_scanf_i>:
   3c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c998:	4698      	mov	r8, r3
   3c99a:	b087      	sub	sp, #28
   3c99c:	4b72      	ldr	r3, [pc, #456]	; (3cb68 <_scanf_i+0x1d4>)
   3c99e:	460c      	mov	r4, r1
   3c9a0:	4682      	mov	sl, r0
   3c9a2:	4616      	mov	r6, r2
   3c9a4:	4627      	mov	r7, r4
   3c9a6:	f04f 0b00 	mov.w	fp, #0
   3c9aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   3c9ae:	ab03      	add	r3, sp, #12
   3c9b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   3c9b4:	4b6d      	ldr	r3, [pc, #436]	; (3cb6c <_scanf_i+0x1d8>)
   3c9b6:	69a1      	ldr	r1, [r4, #24]
   3c9b8:	4a6d      	ldr	r2, [pc, #436]	; (3cb70 <_scanf_i+0x1dc>)
   3c9ba:	2903      	cmp	r1, #3
   3c9bc:	bf18      	it	ne
   3c9be:	461a      	movne	r2, r3
   3c9c0:	68a3      	ldr	r3, [r4, #8]
   3c9c2:	9201      	str	r2, [sp, #4]
   3c9c4:	1e5a      	subs	r2, r3, #1
   3c9c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   3c9ca:	bf89      	itett	hi
   3c9cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   3c9d0:	f04f 0900 	movls.w	r9, #0
   3c9d4:	eb03 0905 	addhi.w	r9, r3, r5
   3c9d8:	f240 135d 	movwhi	r3, #349	; 0x15d
   3c9dc:	bf88      	it	hi
   3c9de:	60a3      	strhi	r3, [r4, #8]
   3c9e0:	f857 3b1c 	ldr.w	r3, [r7], #28
   3c9e4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   3c9e8:	463d      	mov	r5, r7
   3c9ea:	6023      	str	r3, [r4, #0]
   3c9ec:	6831      	ldr	r1, [r6, #0]
   3c9ee:	ab03      	add	r3, sp, #12
   3c9f0:	2202      	movs	r2, #2
   3c9f2:	7809      	ldrb	r1, [r1, #0]
   3c9f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   3c9f8:	f005 f935 	bl	41c66 <memchr>
   3c9fc:	b328      	cbz	r0, 3ca4a <_scanf_i+0xb6>
   3c9fe:	f1bb 0f01 	cmp.w	fp, #1
   3ca02:	d159      	bne.n	3cab8 <_scanf_i+0x124>
   3ca04:	6862      	ldr	r2, [r4, #4]
   3ca06:	b92a      	cbnz	r2, 3ca14 <_scanf_i+0x80>
   3ca08:	6822      	ldr	r2, [r4, #0]
   3ca0a:	2308      	movs	r3, #8
   3ca0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   3ca10:	6063      	str	r3, [r4, #4]
   3ca12:	6022      	str	r2, [r4, #0]
   3ca14:	6822      	ldr	r2, [r4, #0]
   3ca16:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   3ca1a:	6022      	str	r2, [r4, #0]
   3ca1c:	68a2      	ldr	r2, [r4, #8]
   3ca1e:	1e51      	subs	r1, r2, #1
   3ca20:	60a1      	str	r1, [r4, #8]
   3ca22:	b192      	cbz	r2, 3ca4a <_scanf_i+0xb6>
   3ca24:	6832      	ldr	r2, [r6, #0]
   3ca26:	1c51      	adds	r1, r2, #1
   3ca28:	6031      	str	r1, [r6, #0]
   3ca2a:	7812      	ldrb	r2, [r2, #0]
   3ca2c:	f805 2b01 	strb.w	r2, [r5], #1
   3ca30:	6872      	ldr	r2, [r6, #4]
   3ca32:	3a01      	subs	r2, #1
   3ca34:	2a00      	cmp	r2, #0
   3ca36:	6072      	str	r2, [r6, #4]
   3ca38:	dc07      	bgt.n	3ca4a <_scanf_i+0xb6>
   3ca3a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   3ca3e:	4631      	mov	r1, r6
   3ca40:	4650      	mov	r0, sl
   3ca42:	4790      	blx	r2
   3ca44:	2800      	cmp	r0, #0
   3ca46:	f040 8085 	bne.w	3cb54 <_scanf_i+0x1c0>
   3ca4a:	f10b 0b01 	add.w	fp, fp, #1
   3ca4e:	f1bb 0f03 	cmp.w	fp, #3
   3ca52:	d1cb      	bne.n	3c9ec <_scanf_i+0x58>
   3ca54:	6863      	ldr	r3, [r4, #4]
   3ca56:	b90b      	cbnz	r3, 3ca5c <_scanf_i+0xc8>
   3ca58:	230a      	movs	r3, #10
   3ca5a:	6063      	str	r3, [r4, #4]
   3ca5c:	6863      	ldr	r3, [r4, #4]
   3ca5e:	f04f 0b00 	mov.w	fp, #0
   3ca62:	4944      	ldr	r1, [pc, #272]	; (3cb74 <_scanf_i+0x1e0>)
   3ca64:	6960      	ldr	r0, [r4, #20]
   3ca66:	1ac9      	subs	r1, r1, r3
   3ca68:	f006 fa62 	bl	42f30 <__sccl>
   3ca6c:	68a3      	ldr	r3, [r4, #8]
   3ca6e:	6822      	ldr	r2, [r4, #0]
   3ca70:	2b00      	cmp	r3, #0
   3ca72:	d03d      	beq.n	3caf0 <_scanf_i+0x15c>
   3ca74:	6831      	ldr	r1, [r6, #0]
   3ca76:	6960      	ldr	r0, [r4, #20]
   3ca78:	f891 c000 	ldrb.w	ip, [r1]
   3ca7c:	f810 000c 	ldrb.w	r0, [r0, ip]
   3ca80:	2800      	cmp	r0, #0
   3ca82:	d035      	beq.n	3caf0 <_scanf_i+0x15c>
   3ca84:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   3ca88:	d124      	bne.n	3cad4 <_scanf_i+0x140>
   3ca8a:	0510      	lsls	r0, r2, #20
   3ca8c:	d522      	bpl.n	3cad4 <_scanf_i+0x140>
   3ca8e:	f10b 0b01 	add.w	fp, fp, #1
   3ca92:	f1b9 0f00 	cmp.w	r9, #0
   3ca96:	d003      	beq.n	3caa0 <_scanf_i+0x10c>
   3ca98:	3301      	adds	r3, #1
   3ca9a:	f109 39ff 	add.w	r9, r9, #4294967295
   3ca9e:	60a3      	str	r3, [r4, #8]
   3caa0:	6873      	ldr	r3, [r6, #4]
   3caa2:	3b01      	subs	r3, #1
   3caa4:	2b00      	cmp	r3, #0
   3caa6:	6073      	str	r3, [r6, #4]
   3caa8:	dd1b      	ble.n	3cae2 <_scanf_i+0x14e>
   3caaa:	6833      	ldr	r3, [r6, #0]
   3caac:	3301      	adds	r3, #1
   3caae:	6033      	str	r3, [r6, #0]
   3cab0:	68a3      	ldr	r3, [r4, #8]
   3cab2:	3b01      	subs	r3, #1
   3cab4:	60a3      	str	r3, [r4, #8]
   3cab6:	e7d9      	b.n	3ca6c <_scanf_i+0xd8>
   3cab8:	f1bb 0f02 	cmp.w	fp, #2
   3cabc:	d1ae      	bne.n	3ca1c <_scanf_i+0x88>
   3cabe:	6822      	ldr	r2, [r4, #0]
   3cac0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   3cac4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   3cac8:	d1bf      	bne.n	3ca4a <_scanf_i+0xb6>
   3caca:	2310      	movs	r3, #16
   3cacc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   3cad0:	6063      	str	r3, [r4, #4]
   3cad2:	e7a2      	b.n	3ca1a <_scanf_i+0x86>
   3cad4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   3cad8:	6022      	str	r2, [r4, #0]
   3cada:	780b      	ldrb	r3, [r1, #0]
   3cadc:	f805 3b01 	strb.w	r3, [r5], #1
   3cae0:	e7de      	b.n	3caa0 <_scanf_i+0x10c>
   3cae2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   3cae6:	4631      	mov	r1, r6
   3cae8:	4650      	mov	r0, sl
   3caea:	4798      	blx	r3
   3caec:	2800      	cmp	r0, #0
   3caee:	d0df      	beq.n	3cab0 <_scanf_i+0x11c>
   3caf0:	6823      	ldr	r3, [r4, #0]
   3caf2:	05d9      	lsls	r1, r3, #23
   3caf4:	d50d      	bpl.n	3cb12 <_scanf_i+0x17e>
   3caf6:	42bd      	cmp	r5, r7
   3caf8:	d909      	bls.n	3cb0e <_scanf_i+0x17a>
   3cafa:	f105 39ff 	add.w	r9, r5, #4294967295
   3cafe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   3cb02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   3cb06:	4632      	mov	r2, r6
   3cb08:	464d      	mov	r5, r9
   3cb0a:	4650      	mov	r0, sl
   3cb0c:	4798      	blx	r3
   3cb0e:	42bd      	cmp	r5, r7
   3cb10:	d028      	beq.n	3cb64 <_scanf_i+0x1d0>
   3cb12:	6822      	ldr	r2, [r4, #0]
   3cb14:	f012 0210 	ands.w	r2, r2, #16
   3cb18:	d113      	bne.n	3cb42 <_scanf_i+0x1ae>
   3cb1a:	702a      	strb	r2, [r5, #0]
   3cb1c:	4639      	mov	r1, r7
   3cb1e:	6863      	ldr	r3, [r4, #4]
   3cb20:	4650      	mov	r0, sl
   3cb22:	9e01      	ldr	r6, [sp, #4]
   3cb24:	47b0      	blx	r6
   3cb26:	f8d8 3000 	ldr.w	r3, [r8]
   3cb2a:	6821      	ldr	r1, [r4, #0]
   3cb2c:	1d1a      	adds	r2, r3, #4
   3cb2e:	f011 0f20 	tst.w	r1, #32
   3cb32:	f8c8 2000 	str.w	r2, [r8]
   3cb36:	681b      	ldr	r3, [r3, #0]
   3cb38:	d00f      	beq.n	3cb5a <_scanf_i+0x1c6>
   3cb3a:	6018      	str	r0, [r3, #0]
   3cb3c:	68e3      	ldr	r3, [r4, #12]
   3cb3e:	3301      	adds	r3, #1
   3cb40:	60e3      	str	r3, [r4, #12]
   3cb42:	1bed      	subs	r5, r5, r7
   3cb44:	2000      	movs	r0, #0
   3cb46:	44ab      	add	fp, r5
   3cb48:	6925      	ldr	r5, [r4, #16]
   3cb4a:	445d      	add	r5, fp
   3cb4c:	6125      	str	r5, [r4, #16]
   3cb4e:	b007      	add	sp, #28
   3cb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cb54:	f04f 0b00 	mov.w	fp, #0
   3cb58:	e7ca      	b.n	3caf0 <_scanf_i+0x15c>
   3cb5a:	07ca      	lsls	r2, r1, #31
   3cb5c:	bf4c      	ite	mi
   3cb5e:	8018      	strhmi	r0, [r3, #0]
   3cb60:	6018      	strpl	r0, [r3, #0]
   3cb62:	e7eb      	b.n	3cb3c <_scanf_i+0x1a8>
   3cb64:	2001      	movs	r0, #1
   3cb66:	e7f2      	b.n	3cb4e <_scanf_i+0x1ba>
   3cb68:	00043584 	.word	0x00043584
   3cb6c:	0004217f 	.word	0x0004217f
   3cb70:	0004217b 	.word	0x0004217b
   3cb74:	0004c40a 	.word	0x0004c40a

0003cb78 <_read_r>:
   3cb78:	b538      	push	{r3, r4, r5, lr}
   3cb7a:	4604      	mov	r4, r0
   3cb7c:	4d06      	ldr	r5, [pc, #24]	; (3cb98 <_read_r+0x20>)
   3cb7e:	4608      	mov	r0, r1
   3cb80:	4611      	mov	r1, r2
   3cb82:	2200      	movs	r2, #0
   3cb84:	602a      	str	r2, [r5, #0]
   3cb86:	461a      	mov	r2, r3
   3cb88:	f001 fa8c 	bl	3e0a4 <_read>
   3cb8c:	1c43      	adds	r3, r0, #1
   3cb8e:	d102      	bne.n	3cb96 <_read_r+0x1e>
   3cb90:	682b      	ldr	r3, [r5, #0]
   3cb92:	b103      	cbz	r3, 3cb96 <_read_r+0x1e>
   3cb94:	6023      	str	r3, [r4, #0]
   3cb96:	bd38      	pop	{r3, r4, r5, pc}
   3cb98:	20020e58 	.word	0x20020e58

0003cb9c <raise>:
   3cb9c:	4b02      	ldr	r3, [pc, #8]	; (3cba8 <raise+0xc>)
   3cb9e:	4601      	mov	r1, r0
   3cba0:	6818      	ldr	r0, [r3, #0]
   3cba2:	f006 b9fe 	b.w	42fa2 <_raise_r>
   3cba6:	bf00      	nop
   3cba8:	2001563c 	.word	0x2001563c

0003cbac <_kill_r>:
   3cbac:	b538      	push	{r3, r4, r5, lr}
   3cbae:	2300      	movs	r3, #0
   3cbb0:	4d06      	ldr	r5, [pc, #24]	; (3cbcc <_kill_r+0x20>)
   3cbb2:	4604      	mov	r4, r0
   3cbb4:	4608      	mov	r0, r1
   3cbb6:	4611      	mov	r1, r2
   3cbb8:	602b      	str	r3, [r5, #0]
   3cbba:	f001 fa85 	bl	3e0c8 <_kill>
   3cbbe:	1c43      	adds	r3, r0, #1
   3cbc0:	d102      	bne.n	3cbc8 <_kill_r+0x1c>
   3cbc2:	682b      	ldr	r3, [r5, #0]
   3cbc4:	b103      	cbz	r3, 3cbc8 <_kill_r+0x1c>
   3cbc6:	6023      	str	r3, [r4, #0]
   3cbc8:	bd38      	pop	{r3, r4, r5, pc}
   3cbca:	bf00      	nop
   3cbcc:	20020e58 	.word	0x20020e58

0003cbd0 <_fstat_r>:
   3cbd0:	b538      	push	{r3, r4, r5, lr}
   3cbd2:	2300      	movs	r3, #0
   3cbd4:	4d06      	ldr	r5, [pc, #24]	; (3cbf0 <_fstat_r+0x20>)
   3cbd6:	4604      	mov	r4, r0
   3cbd8:	4608      	mov	r0, r1
   3cbda:	4611      	mov	r1, r2
   3cbdc:	602b      	str	r3, [r5, #0]
   3cbde:	f001 fa77 	bl	3e0d0 <_fstat>
   3cbe2:	1c43      	adds	r3, r0, #1
   3cbe4:	d102      	bne.n	3cbec <_fstat_r+0x1c>
   3cbe6:	682b      	ldr	r3, [r5, #0]
   3cbe8:	b103      	cbz	r3, 3cbec <_fstat_r+0x1c>
   3cbea:	6023      	str	r3, [r4, #0]
   3cbec:	bd38      	pop	{r3, r4, r5, pc}
   3cbee:	bf00      	nop
   3cbf0:	20020e58 	.word	0x20020e58

0003cbf4 <_isatty_r>:
   3cbf4:	b538      	push	{r3, r4, r5, lr}
   3cbf6:	2300      	movs	r3, #0
   3cbf8:	4d05      	ldr	r5, [pc, #20]	; (3cc10 <_isatty_r+0x1c>)
   3cbfa:	4604      	mov	r4, r0
   3cbfc:	4608      	mov	r0, r1
   3cbfe:	602b      	str	r3, [r5, #0]
   3cc00:	f001 fa5d 	bl	3e0be <_isatty>
   3cc04:	1c43      	adds	r3, r0, #1
   3cc06:	d102      	bne.n	3cc0e <_isatty_r+0x1a>
   3cc08:	682b      	ldr	r3, [r5, #0]
   3cc0a:	b103      	cbz	r3, 3cc0e <_isatty_r+0x1a>
   3cc0c:	6023      	str	r3, [r4, #0]
   3cc0e:	bd38      	pop	{r3, r4, r5, pc}
   3cc10:	20020e58 	.word	0x20020e58

0003cc14 <k_delayed_work_init>:
{
   3cc14:	b538      	push	{r3, r4, r5, lr}
   3cc16:	4604      	mov	r4, r0
   3cc18:	460d      	mov	r5, r1
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   3cc1a:	2230      	movs	r2, #48	; 0x30
   3cc1c:	2100      	movs	r1, #0
   3cc1e:	f005 f85e 	bl	41cde <memset>
   3cc22:	6065      	str	r5, [r4, #4]
}
   3cc24:	bd38      	pop	{r3, r4, r5, pc}

0003cc26 <cloud_send>:
 * @return 0 or a negative error code indicating reason of failure.
 */
static inline int cloud_send(const struct cloud_backend *const backend,
			     struct cloud_msg *msg)
{
	if (backend == NULL || backend->api == NULL ||
   3cc26:	b120      	cbz	r0, 3cc32 <cloud_send+0xc>
   3cc28:	6803      	ldr	r3, [r0, #0]
   3cc2a:	b113      	cbz	r3, 3cc32 <cloud_send+0xc>
	    backend->api->send == NULL) {
   3cc2c:	691b      	ldr	r3, [r3, #16]
	if (backend == NULL || backend->api == NULL ||
   3cc2e:	b103      	cbz	r3, 3cc32 <cloud_send+0xc>
		return -ENOTSUP;
	}

	return backend->api->send(backend, msg);
   3cc30:	4718      	bx	r3
}
   3cc32:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3cc36:	4770      	bx	lr

0003cc38 <atomic_set>:
{
   3cc38:	4603      	mov	r3, r0
}
   3cc3a:	e8d3 0fef 	ldaex	r0, [r3]
   3cc3e:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3cc42:	2a00      	cmp	r2, #0
   3cc44:	d1f9      	bne.n	3cc3a <atomic_set+0x2>
   3cc46:	4770      	bx	lr

0003cc48 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   3cc48:	e8d0 0faf 	lda	r0, [r0]
}
   3cc4c:	4770      	bx	lr

0003cc4e <k_uptime_get>:
{
   3cc4e:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3cc50:	f004 ff42 	bl	41ad8 <z_impl_k_uptime_ticks>
   3cc54:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3cc58:	fba0 2304 	umull	r2, r3, r0, r4
   3cc5c:	fb04 3301 	mla	r3, r4, r1, r3
   3cc60:	0bd0      	lsrs	r0, r2, #15
}
   3cc62:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3cc66:	0bd9      	lsrs	r1, r3, #15
   3cc68:	bd10      	pop	{r4, pc}

0003cc6a <cloud_reboot_handler>:
	error_handler(ERROR_CLOUD, -ETIMEDOUT);
   3cc6a:	f06f 0173 	mvn.w	r1, #115	; 0x73
   3cc6e:	2000      	movs	r0, #0
   3cc70:	f7e3 bcee 	b.w	20650 <error_handler>

0003cc74 <cloud_error_handler>:
{
   3cc74:	4601      	mov	r1, r0
	error_handler(ERROR_CLOUD, err);
   3cc76:	2000      	movs	r0, #0
   3cc78:	f7e3 bcea 	b.w	20650 <error_handler>

0003cc7c <nrf_modem_recoverable_error_handler>:
{
   3cc7c:	4601      	mov	r1, r0
	error_handler(ERROR_MODEM_RECOVERABLE, (int)err);
   3cc7e:	2001      	movs	r0, #1
   3cc80:	f7e3 bce6 	b.w	20650 <error_handler>

0003cc84 <sensors_start_work_fn>:
	sensors_start();
   3cc84:	f7e4 b800 	b.w	20c88 <sensors_start>

0003cc88 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   3cc88:	6883      	ldr	r3, [r0, #8]
   3cc8a:	691b      	ldr	r3, [r3, #16]
   3cc8c:	4718      	bx	r3

0003cc8e <motion_simulate_trigger>:

void motion_simulate_trigger(void)
{
	sensor_trigger_handler(NULL, NULL);
   3cc8e:	f7e4 bb27 	b.w	212e0 <sensor_trigger_handler.isra.0>

0003cc92 <ui_led_set_color>:
}
   3cc92:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3cc96:	4770      	bx	lr

0003cc98 <json_value_string_compare>:
{
   3cc98:	b510      	push	{r4, lr}
   3cc9a:	460c      	mov	r4, r1
	char *json_str = cJSON_GetStringValue(obj);
   3cc9c:	f002 fc0d 	bl	3f4ba <cJSON_GetStringValue>
	if ((json_str == NULL) || (str == NULL)) {
   3cca0:	b130      	cbz	r0, 3ccb0 <json_value_string_compare+0x18>
   3cca2:	b134      	cbz	r4, 3ccb2 <json_value_string_compare+0x1a>
	return (strcmp(json_str, str) == 0);
   3cca4:	4621      	mov	r1, r4
   3cca6:	f7e0 facf 	bl	1d248 <strcmp>
   3ccaa:	fab0 f080 	clz	r0, r0
   3ccae:	0940      	lsrs	r0, r0, #5
}
   3ccb0:	bd10      	pop	{r4, pc}
		return false;
   3ccb2:	4620      	mov	r0, r4
   3ccb4:	e7fc      	b.n	3ccb0 <json_value_string_compare+0x18>

0003ccb6 <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3ccb6:	b108      	cbz	r0, 3ccbc <json_object_decode+0x6>
   3ccb8:	f002 bb87 	b.w	3f3ca <cJSON_GetObjectItem>
}
   3ccbc:	4770      	bx	lr

0003ccbe <add_array_obj>:
{
   3ccbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3ccc2:	4681      	mov	r9, r0
   3ccc4:	4688      	mov	r8, r1
   3ccc6:	4617      	mov	r7, r2
	if ((obj == NULL) || (item_name == NULL)) {
   3ccc8:	461d      	mov	r5, r3
   3ccca:	b32b      	cbz	r3, 3cd18 <add_array_obj+0x5a>
	obj_to_add = cJSON_CreateArray();
   3cccc:	f7ec f942 	bl	28f54 <cJSON_CreateArray>
	if (obj_to_add == NULL) {
   3ccd0:	4604      	mov	r4, r0
   3ccd2:	b1d0      	cbz	r0, 3cd0a <add_array_obj+0x4c>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3ccd4:	2600      	movs	r6, #0
   3ccd6:	4546      	cmp	r6, r8
   3ccd8:	d10d      	bne.n	3ccf6 <add_array_obj+0x38>
	if (cJSON_GetArraySize(obj_to_add) == 0) {
   3ccda:	4620      	mov	r0, r4
   3ccdc:	f002 fb67 	bl	3f3ae <cJSON_GetArraySize>
   3cce0:	b908      	cbnz	r0, 3cce6 <add_array_obj+0x28>
		obj_to_add->type = cJSON_NULL;
   3cce2:	2304      	movs	r3, #4
   3cce4:	60e3      	str	r3, [r4, #12]
	cJSON_AddItemToObject(obj, item_name, obj_to_add);
   3cce6:	4628      	mov	r0, r5
   3cce8:	4622      	mov	r2, r4
   3ccea:	4639      	mov	r1, r7
   3ccec:	f002 fb79 	bl	3f3e2 <cJSON_AddItemToObject>
	return 0;
   3ccf0:	2000      	movs	r0, #0
}
   3ccf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (items[cnt] != NULL) {
   3ccf6:	f859 0026 	ldr.w	r0, [r9, r6, lsl #2]
   3ccfa:	b158      	cbz	r0, 3cd14 <add_array_obj+0x56>
			str = cJSON_CreateString(items[cnt]);
   3ccfc:	f7ec f912 	bl	28f24 <cJSON_CreateString>
			if (str == NULL) {
   3cd00:	4601      	mov	r1, r0
				cJSON_Delete(obj_to_add);
   3cd02:	4620      	mov	r0, r4
			if (str == NULL) {
   3cd04:	b921      	cbnz	r1, 3cd10 <add_array_obj+0x52>
				cJSON_Delete(obj_to_add);
   3cd06:	f7ec f85d 	bl	28dc4 <cJSON_Delete>
		return -ENOMEM;
   3cd0a:	f06f 000b 	mvn.w	r0, #11
   3cd0e:	e7f0      	b.n	3ccf2 <add_array_obj+0x34>
			cJSON_AddItemToArray(obj_to_add, str);
   3cd10:	f002 fb65 	bl	3f3de <cJSON_AddItemToArray>
	for (uint32_t cnt = 0; cnt < item_cnt; ++cnt) {
   3cd14:	3601      	adds	r6, #1
   3cd16:	e7de      	b.n	3ccd6 <add_array_obj+0x18>
		return -EINVAL;
   3cd18:	f06f 0015 	mvn.w	r0, #21
   3cd1c:	e7e9      	b.n	3ccf2 <add_array_obj+0x34>

0003cd1e <env_sensors_get_air_quality>:
}
   3cd1e:	f04f 30ff 	mov.w	r0, #4294967295
   3cd22:	4770      	bx	lr

0003cd24 <sys_notify_validate>:
	if (notify == NULL) {
   3cd24:	b140      	cbz	r0, 3cd38 <sys_notify_validate+0x14>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   3cd26:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   3cd28:	f003 0303 	and.w	r3, r3, #3
	switch (sys_notify_get_method(notify)) {
   3cd2c:	2b02      	cmp	r3, #2
   3cd2e:	d006      	beq.n	3cd3e <sys_notify_validate+0x1a>
   3cd30:	2b03      	cmp	r3, #3
   3cd32:	d004      	beq.n	3cd3e <sys_notify_validate+0x1a>
   3cd34:	2b01      	cmp	r3, #1
   3cd36:	d005      	beq.n	3cd44 <sys_notify_validate+0x20>
		return -EINVAL;
   3cd38:	f06f 0015 	mvn.w	r0, #21
}
   3cd3c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   3cd3e:	6803      	ldr	r3, [r0, #0]
   3cd40:	2b00      	cmp	r3, #0
   3cd42:	d0f9      	beq.n	3cd38 <sys_notify_validate+0x14>
		notify->result = 0;
   3cd44:	2300      	movs	r3, #0
   3cd46:	6083      	str	r3, [r0, #8]
   3cd48:	4618      	mov	r0, r3
   3cd4a:	4770      	bx	lr

0003cd4c <arch_printk_char_out>:
}
   3cd4c:	2000      	movs	r0, #0
   3cd4e:	4770      	bx	lr

0003cd50 <str_out>:
{
   3cd50:	b530      	push	{r4, r5, lr}
   3cd52:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   3cd54:	680c      	ldr	r4, [r1, #0]
   3cd56:	1c55      	adds	r5, r2, #1
   3cd58:	b114      	cbz	r4, 3cd60 <str_out+0x10>
   3cd5a:	684b      	ldr	r3, [r1, #4]
   3cd5c:	4293      	cmp	r3, r2
   3cd5e:	dc01      	bgt.n	3cd64 <str_out+0x14>
		ctx->count++;
   3cd60:	608d      	str	r5, [r1, #8]
}
   3cd62:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   3cd64:	3b01      	subs	r3, #1
   3cd66:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   3cd68:	bf08      	it	eq
   3cd6a:	2200      	moveq	r2, #0
   3cd6c:	608d      	str	r5, [r1, #8]
   3cd6e:	bf0c      	ite	eq
   3cd70:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   3cd72:	54a0      	strbne	r0, [r4, r2]
   3cd74:	e7f5      	b.n	3cd62 <str_out+0x12>

0003cd76 <printk>:
{
   3cd76:	b40f      	push	{r0, r1, r2, r3}
   3cd78:	b507      	push	{r0, r1, r2, lr}
   3cd7a:	a904      	add	r1, sp, #16
   3cd7c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   3cd80:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   3cd82:	f7e5 ff0d 	bl	22ba0 <vprintk>
}
   3cd86:	b003      	add	sp, #12
   3cd88:	f85d eb04 	ldr.w	lr, [sp], #4
   3cd8c:	b004      	add	sp, #16
   3cd8e:	4770      	bx	lr

0003cd90 <snprintk>:
{
   3cd90:	b40c      	push	{r2, r3}
   3cd92:	b507      	push	{r0, r1, r2, lr}
   3cd94:	ab04      	add	r3, sp, #16
   3cd96:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   3cd9a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   3cd9c:	f7e5 ff0e 	bl	22bbc <vsnprintk>
}
   3cda0:	b003      	add	sp, #12
   3cda2:	f85d eb04 	ldr.w	lr, [sp], #4
   3cda6:	b002      	add	sp, #8
   3cda8:	4770      	bx	lr

0003cdaa <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   3cdaa:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   3cdac:	f013 0307 	ands.w	r3, r3, #7
   3cdb0:	d105      	bne.n	3cdbe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   3cdb2:	6803      	ldr	r3, [r0, #0]
   3cdb4:	2b00      	cmp	r3, #0
		evt = EVT_START;
   3cdb6:	bf0c      	ite	eq
   3cdb8:	2000      	moveq	r0, #0
   3cdba:	2003      	movne	r0, #3
   3cdbc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   3cdbe:	2b02      	cmp	r3, #2
   3cdc0:	d105      	bne.n	3cdce <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   3cdc2:	8bc3      	ldrh	r3, [r0, #30]
   3cdc4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   3cdc6:	bf14      	ite	ne
   3cdc8:	2000      	movne	r0, #0
   3cdca:	2004      	moveq	r0, #4
   3cdcc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   3cdce:	2b01      	cmp	r3, #1
   3cdd0:	d105      	bne.n	3cdde <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   3cdd2:	6803      	ldr	r3, [r0, #0]
   3cdd4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   3cdd6:	bf0c      	ite	eq
   3cdd8:	2000      	moveq	r0, #0
   3cdda:	2005      	movne	r0, #5
   3cddc:	4770      	bx	lr
	int evt = EVT_NOP;
   3cdde:	2000      	movs	r0, #0
}
   3cde0:	4770      	bx	lr

0003cde2 <notify_one>:
{
   3cde2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3cde4:	460d      	mov	r5, r1
   3cde6:	4606      	mov	r6, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3cde8:	4619      	mov	r1, r3
   3cdea:	1d28      	adds	r0, r5, #4
{
   3cdec:	9201      	str	r2, [sp, #4]
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   3cdee:	9300      	str	r3, [sp, #0]
   3cdf0:	f7e5 fe98 	bl	22b24 <sys_notify_finalize>
	if (cb) {
   3cdf4:	4604      	mov	r4, r0
   3cdf6:	b140      	cbz	r0, 3ce0a <notify_one+0x28>
		cb(mgr, cli, state, res);
   3cdf8:	e9dd 3200 	ldrd	r3, r2, [sp]
   3cdfc:	4629      	mov	r1, r5
   3cdfe:	4630      	mov	r0, r6
   3ce00:	46a4      	mov	ip, r4
}
   3ce02:	b002      	add	sp, #8
   3ce04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		cb(mgr, cli, state, res);
   3ce08:	4760      	bx	ip
}
   3ce0a:	b002      	add	sp, #8
   3ce0c:	bd70      	pop	{r4, r5, r6, pc}

0003ce0e <validate_args>:
{
   3ce0e:	b510      	push	{r4, lr}
   3ce10:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   3ce12:	b140      	cbz	r0, 3ce26 <validate_args+0x18>
   3ce14:	b139      	cbz	r1, 3ce26 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   3ce16:	1d08      	adds	r0, r1, #4
   3ce18:	f7ff ff84 	bl	3cd24 <sys_notify_validate>
	if ((rv == 0)
   3ce1c:	b928      	cbnz	r0, 3ce2a <validate_args+0x1c>
	    && ((cli->notify.flags
   3ce1e:	68a3      	ldr	r3, [r4, #8]
   3ce20:	f033 0303 	bics.w	r3, r3, #3
   3ce24:	d001      	beq.n	3ce2a <validate_args+0x1c>
		rv = -EINVAL;
   3ce26:	f06f 0015 	mvn.w	r0, #21
}
   3ce2a:	bd10      	pop	{r4, pc}

0003ce2c <onoff_manager_init>:
{
   3ce2c:	b538      	push	{r3, r4, r5, lr}
   3ce2e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   3ce30:	4605      	mov	r5, r0
   3ce32:	b158      	cbz	r0, 3ce4c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   3ce34:	b151      	cbz	r1, 3ce4c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   3ce36:	680b      	ldr	r3, [r1, #0]
   3ce38:	b143      	cbz	r3, 3ce4c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   3ce3a:	684b      	ldr	r3, [r1, #4]
   3ce3c:	b133      	cbz	r3, 3ce4c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3ce3e:	2220      	movs	r2, #32
   3ce40:	2100      	movs	r1, #0
   3ce42:	f004 ff4c 	bl	41cde <memset>
	return 0;
   3ce46:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   3ce48:	612c      	str	r4, [r5, #16]
}
   3ce4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3ce4c:	f06f 0015 	mvn.w	r0, #21
   3ce50:	e7fb      	b.n	3ce4a <onoff_manager_init+0x1e>

0003ce52 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   3ce52:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   3ce54:	f7fc fa2e 	bl	392b4 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   3ce58:	2000      	movs	r0, #0
   3ce5a:	bd08      	pop	{r3, pc}

0003ce5c <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   3ce5c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   3ce5e:	f7fc fa6d 	bl	3933c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   3ce62:	f110 0f0b 	cmn.w	r0, #11
   3ce66:	d005      	beq.n	3ce74 <sys_sem_take+0x18>
   3ce68:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   3ce6c:	bf08      	it	eq
   3ce6e:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   3ce72:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   3ce74:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   3ce78:	e7fb      	b.n	3ce72 <sys_sem_take+0x16>

0003ce7a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   3ce7a:	4604      	mov	r4, r0
   3ce7c:	b508      	push	{r3, lr}
   3ce7e:	4608      	mov	r0, r1
   3ce80:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   3ce82:	461a      	mov	r2, r3
   3ce84:	47a0      	blx	r4
	return z_impl_k_current_get();
   3ce86:	f7fc fa0f 	bl	392a8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   3ce8a:	f7e9 ffa9 	bl	26de0 <z_impl_k_thread_abort>

0003ce8e <chunk_field>:
	if (big_heap(h)) {
   3ce8e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   3ce90:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3ce94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   3ce98:	bf2c      	ite	cs
   3ce9a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
		return ((uint16_t *)cmem)[f];
   3ce9e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
}
   3cea2:	4770      	bx	lr

0003cea4 <chunk_set>:
	void *cmem = &buf[c];
   3cea4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3cea8:	6880      	ldr	r0, [r0, #8]
   3ceaa:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((uint32_t *)cmem)[f] = val;
   3ceae:	bf2c      	ite	cs
   3ceb0:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
		((uint16_t *)cmem)[f] = val;
   3ceb4:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
}
   3ceb8:	4770      	bx	lr

0003ceba <chunk_size>:
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3ceba:	2201      	movs	r2, #1
{
   3cebc:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   3cebe:	f7ff ffe6 	bl	3ce8e <chunk_field>
}
   3cec2:	0840      	lsrs	r0, r0, #1
   3cec4:	bd08      	pop	{r3, pc}

0003cec6 <set_chunk_used>:
	if (big_heap(h)) {
   3cec6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   3cec8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   3cecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3ced0:	d308      	bcc.n	3cee4 <set_chunk_used+0x1e>
		if (used) {
   3ced2:	684b      	ldr	r3, [r1, #4]
   3ced4:	b11a      	cbz	r2, 3cede <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   3ced6:	f043 0301 	orr.w	r3, r3, #1
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3ceda:	604b      	str	r3, [r1, #4]
   3cedc:	4770      	bx	lr
   3cede:	f023 0301 	bic.w	r3, r3, #1
   3cee2:	e7fa      	b.n	3ceda <set_chunk_used+0x14>
		if (used) {
   3cee4:	884b      	ldrh	r3, [r1, #2]
   3cee6:	b11a      	cbz	r2, 3cef0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   3cee8:	f043 0301 	orr.w	r3, r3, #1
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3ceec:	804b      	strh	r3, [r1, #2]
}
   3ceee:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   3cef0:	f023 0301 	bic.w	r3, r3, #1
   3cef4:	e7fa      	b.n	3ceec <set_chunk_used+0x26>

0003cef6 <set_chunk_size>:
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   3cef6:	0053      	lsls	r3, r2, #1
   3cef8:	2201      	movs	r2, #1
   3cefa:	f7ff bfd3 	b.w	3cea4 <chunk_set>

0003cefe <bytes_to_chunksz>:
	return big_heap(h) ? 8 : 4;
   3cefe:	6883      	ldr	r3, [r0, #8]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3cf00:	3107      	adds	r1, #7
	return big_heap(h) ? 8 : 4;
   3cf02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3cf06:	bf2c      	ite	cs
   3cf08:	2008      	movcs	r0, #8
   3cf0a:	2004      	movcc	r0, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   3cf0c:	4408      	add	r0, r1
}
   3cf0e:	08c0      	lsrs	r0, r0, #3
   3cf10:	4770      	bx	lr

0003cf12 <bucket_idx>:
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
   3cf12:	460a      	mov	r2, r1
   3cf14:	b508      	push	{r3, lr}
	return bytes_to_chunksz(h, 1);
   3cf16:	2101      	movs	r1, #1
   3cf18:	f7ff fff1 	bl	3cefe <bytes_to_chunksz>
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   3cf1c:	3201      	adds	r2, #1
   3cf1e:	1a10      	subs	r0, r2, r0
	return 31 - __builtin_clz(usable_sz);
   3cf20:	fab0 f080 	clz	r0, r0
}
   3cf24:	f1c0 001f 	rsb	r0, r0, #31
   3cf28:	bd08      	pop	{r3, pc}

0003cf2a <merge_chunks>:
{
   3cf2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3cf2c:	4616      	mov	r6, r2
   3cf2e:	4604      	mov	r4, r0
   3cf30:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   3cf32:	f7ff ffc2 	bl	3ceba <chunk_size>
   3cf36:	4631      	mov	r1, r6
   3cf38:	4605      	mov	r5, r0
   3cf3a:	4620      	mov	r0, r4
   3cf3c:	f7ff ffbd 	bl	3ceba <chunk_size>
   3cf40:	182b      	adds	r3, r5, r0
	set_chunk_size(h, lc, newsz);
   3cf42:	461a      	mov	r2, r3
   3cf44:	4639      	mov	r1, r7
   3cf46:	4620      	mov	r0, r4
   3cf48:	9301      	str	r3, [sp, #4]
   3cf4a:	f7ff ffd4 	bl	3cef6 <set_chunk_size>
	return c + chunk_size(h, c);
   3cf4e:	4631      	mov	r1, r6
   3cf50:	4620      	mov	r0, r4
   3cf52:	f7ff ffb2 	bl	3ceba <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   3cf56:	2200      	movs	r2, #0
   3cf58:	1831      	adds	r1, r6, r0
   3cf5a:	4620      	mov	r0, r4
   3cf5c:	9b01      	ldr	r3, [sp, #4]
}
   3cf5e:	b003      	add	sp, #12
   3cf60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   3cf64:	f7ff bf9e 	b.w	3cea4 <chunk_set>

0003cf68 <split_chunks>:
{
   3cf68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3cf6a:	4614      	mov	r4, r2
   3cf6c:	460e      	mov	r6, r1
   3cf6e:	4605      	mov	r5, r0
	size_t sz0 = chunk_size(h, lc);
   3cf70:	f7ff ffa3 	bl	3ceba <chunk_size>
	size_t lsz = rc - lc;
   3cf74:	1ba3      	subs	r3, r4, r6
	size_t rsz = sz0 - lsz;
   3cf76:	1b32      	subs	r2, r6, r4
   3cf78:	1817      	adds	r7, r2, r0
	set_chunk_size(h, lc, lsz);
   3cf7a:	4631      	mov	r1, r6
   3cf7c:	461a      	mov	r2, r3
   3cf7e:	4628      	mov	r0, r5
   3cf80:	9301      	str	r3, [sp, #4]
   3cf82:	f7ff ffb8 	bl	3cef6 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   3cf86:	463a      	mov	r2, r7
   3cf88:	4621      	mov	r1, r4
   3cf8a:	4628      	mov	r0, r5
   3cf8c:	f7ff ffb3 	bl	3cef6 <set_chunk_size>
   3cf90:	9b01      	ldr	r3, [sp, #4]
   3cf92:	2200      	movs	r2, #0
   3cf94:	4621      	mov	r1, r4
   3cf96:	4628      	mov	r0, r5
   3cf98:	f7ff ff84 	bl	3cea4 <chunk_set>
	return c + chunk_size(h, c);
   3cf9c:	4621      	mov	r1, r4
   3cf9e:	4628      	mov	r0, r5
   3cfa0:	f7ff ff8b 	bl	3ceba <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   3cfa4:	463b      	mov	r3, r7
   3cfa6:	1821      	adds	r1, r4, r0
   3cfa8:	2200      	movs	r2, #0
   3cfaa:	4628      	mov	r0, r5
}
   3cfac:	b003      	add	sp, #12
   3cfae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   3cfb2:	f7ff bf77 	b.w	3cea4 <chunk_set>

0003cfb6 <free_list_remove_bidx>:
{
   3cfb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3cfba:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   3cfbc:	2203      	movs	r2, #3
   3cfbe:	460e      	mov	r6, r1
   3cfc0:	4604      	mov	r4, r0
   3cfc2:	f7ff ff64 	bl	3ce8e <chunk_field>
	if (next_free_chunk(h, c) == c) {
   3cfc6:	4286      	cmp	r6, r0
   3cfc8:	4605      	mov	r5, r0
   3cfca:	f107 0804 	add.w	r8, r7, #4
   3cfce:	d10b      	bne.n	3cfe8 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   3cfd0:	2301      	movs	r3, #1
   3cfd2:	fa03 f707 	lsl.w	r7, r3, r7
   3cfd6:	68e3      	ldr	r3, [r4, #12]
   3cfd8:	ea23 0307 	bic.w	r3, r3, r7
   3cfdc:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   3cfde:	2300      	movs	r3, #0
   3cfe0:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   3cfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   3cfe8:	4631      	mov	r1, r6
   3cfea:	2202      	movs	r2, #2
   3cfec:	4620      	mov	r0, r4
   3cfee:	f7ff ff4e 	bl	3ce8e <chunk_field>
   3cff2:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   3cff4:	462b      	mov	r3, r5
   3cff6:	4601      	mov	r1, r0
   3cff8:	2203      	movs	r2, #3
   3cffa:	4620      	mov	r0, r4
		b->next = second;
   3cffc:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   3d000:	f7ff ff50 	bl	3cea4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   3d004:	4633      	mov	r3, r6
   3d006:	4629      	mov	r1, r5
   3d008:	4620      	mov	r0, r4
}
   3d00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d00e:	2202      	movs	r2, #2
   3d010:	f7ff bf48 	b.w	3cea4 <chunk_set>

0003d014 <free_list_remove>:
{
   3d014:	b538      	push	{r3, r4, r5, lr}
   3d016:	4604      	mov	r4, r0
   3d018:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   3d01a:	f7ff ff4e 	bl	3ceba <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   3d01e:	68a3      	ldr	r3, [r4, #8]
   3d020:	4601      	mov	r1, r0
   3d022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3d026:	d301      	bcc.n	3d02c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   3d028:	2801      	cmp	r0, #1
   3d02a:	d009      	beq.n	3d040 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   3d02c:	4620      	mov	r0, r4
   3d02e:	f7ff ff70 	bl	3cf12 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   3d032:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   3d034:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   3d036:	4620      	mov	r0, r4
}
   3d038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   3d03c:	f7ff bfbb 	b.w	3cfb6 <free_list_remove_bidx>
}
   3d040:	bd38      	pop	{r3, r4, r5, pc}

0003d042 <alloc_chunk>:
{
   3d042:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   3d046:	4604      	mov	r4, r0
   3d048:	460f      	mov	r7, r1
	int bi = bucket_idx(h, sz);
   3d04a:	f7ff ff62 	bl	3cf12 <bucket_idx>
	if (bi > bucket_idx(h, h->len)) {
   3d04e:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   3d050:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   3d052:	4620      	mov	r0, r4
   3d054:	f7ff ff5d 	bl	3cf12 <bucket_idx>
   3d058:	42a8      	cmp	r0, r5
   3d05a:	da04      	bge.n	3d066 <alloc_chunk+0x24>
		return 0;
   3d05c:	2100      	movs	r1, #0
}
   3d05e:	4608      	mov	r0, r1
   3d060:	b003      	add	sp, #12
   3d062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (b->next) {
   3d066:	eb04 0985 	add.w	r9, r4, r5, lsl #2
   3d06a:	f8d9 8010 	ldr.w	r8, [r9, #16]
   3d06e:	f1b8 0f00 	cmp.w	r8, #0
   3d072:	d019      	beq.n	3d0a8 <alloc_chunk+0x66>
   3d074:	2603      	movs	r6, #3
			chunkid_t c = b->next;
   3d076:	f8d9 1010 	ldr.w	r1, [r9, #16]
			if (chunk_size(h, c) >= sz) {
   3d07a:	4620      	mov	r0, r4
   3d07c:	9101      	str	r1, [sp, #4]
   3d07e:	f7ff ff1c 	bl	3ceba <chunk_size>
   3d082:	42b8      	cmp	r0, r7
   3d084:	9901      	ldr	r1, [sp, #4]
   3d086:	d305      	bcc.n	3d094 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   3d088:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   3d08a:	4620      	mov	r0, r4
   3d08c:	f7ff ff93 	bl	3cfb6 <free_list_remove_bidx>
   3d090:	9901      	ldr	r1, [sp, #4]
		return c;
   3d092:	e7e4      	b.n	3d05e <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   3d094:	2203      	movs	r2, #3
   3d096:	4620      	mov	r0, r4
   3d098:	f7ff fef9 	bl	3ce8e <chunk_field>
		} while (--i && b->next != first);
   3d09c:	3e01      	subs	r6, #1
			b->next = next_free_chunk(h, c);
   3d09e:	f8c9 0010 	str.w	r0, [r9, #16]
		} while (--i && b->next != first);
   3d0a2:	d001      	beq.n	3d0a8 <alloc_chunk+0x66>
   3d0a4:	4580      	cmp	r8, r0
   3d0a6:	d1e6      	bne.n	3d076 <alloc_chunk+0x34>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   3d0a8:	f04f 32ff 	mov.w	r2, #4294967295
   3d0ac:	68e3      	ldr	r3, [r4, #12]
   3d0ae:	3501      	adds	r5, #1
   3d0b0:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   3d0b2:	401a      	ands	r2, r3
   3d0b4:	d0d2      	beq.n	3d05c <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   3d0b6:	fa92 f2a2 	rbit	r2, r2
   3d0ba:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   3d0be:	1d13      	adds	r3, r2, #4
   3d0c0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   3d0c4:	9101      	str	r1, [sp, #4]
   3d0c6:	e7e0      	b.n	3d08a <alloc_chunk+0x48>

0003d0c8 <free_list_add>:
{
   3d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3d0cc:	4604      	mov	r4, r0
   3d0ce:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   3d0d0:	f7ff fef3 	bl	3ceba <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   3d0d4:	68a3      	ldr	r3, [r4, #8]
   3d0d6:	4601      	mov	r1, r0
   3d0d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3d0dc:	d301      	bcc.n	3d0e2 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   3d0de:	2801      	cmp	r0, #1
   3d0e0:	d035      	beq.n	3d14e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   3d0e2:	4620      	mov	r0, r4
   3d0e4:	f7ff ff15 	bl	3cf12 <bucket_idx>
	if (b->next == 0U) {
   3d0e8:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   3d0ec:	6916      	ldr	r6, [r2, #16]
   3d0ee:	b99e      	cbnz	r6, 3d118 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   3d0f0:	2301      	movs	r3, #1
   3d0f2:	fa03 f000 	lsl.w	r0, r3, r0
   3d0f6:	68e3      	ldr	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   3d0f8:	4629      	mov	r1, r5
   3d0fa:	4303      	orrs	r3, r0
   3d0fc:	60e3      	str	r3, [r4, #12]
   3d0fe:	4620      	mov	r0, r4
		b->next = c;
   3d100:	6115      	str	r5, [r2, #16]
   3d102:	462b      	mov	r3, r5
   3d104:	2202      	movs	r2, #2
   3d106:	f7ff fecd 	bl	3cea4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3d10a:	2203      	movs	r2, #3
   3d10c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   3d10e:	4620      	mov	r0, r4
}
   3d110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   3d114:	f7ff bec6 	b.w	3cea4 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   3d118:	2202      	movs	r2, #2
   3d11a:	4631      	mov	r1, r6
   3d11c:	4620      	mov	r0, r4
   3d11e:	f7ff feb6 	bl	3ce8e <chunk_field>
   3d122:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   3d124:	4603      	mov	r3, r0
   3d126:	2202      	movs	r2, #2
   3d128:	4629      	mov	r1, r5
   3d12a:	4620      	mov	r0, r4
   3d12c:	f7ff feba 	bl	3cea4 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   3d130:	4633      	mov	r3, r6
   3d132:	2203      	movs	r2, #3
   3d134:	4629      	mov	r1, r5
   3d136:	4620      	mov	r0, r4
   3d138:	f7ff feb4 	bl	3cea4 <chunk_set>
   3d13c:	2203      	movs	r2, #3
   3d13e:	4639      	mov	r1, r7
   3d140:	462b      	mov	r3, r5
   3d142:	4620      	mov	r0, r4
   3d144:	f7ff feae 	bl	3cea4 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   3d148:	2202      	movs	r2, #2
   3d14a:	4631      	mov	r1, r6
   3d14c:	e7df      	b.n	3d10e <free_list_add+0x46>
   3d14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003d152 <free_chunk>:
{
   3d152:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3d154:	4605      	mov	r5, r0
   3d156:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   3d158:	f7ff feaf 	bl	3ceba <chunk_size>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3d15c:	2201      	movs	r2, #1
	return c + chunk_size(h, c);
   3d15e:	1821      	adds	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3d160:	4628      	mov	r0, r5
   3d162:	9101      	str	r1, [sp, #4]
   3d164:	f7ff fe93 	bl	3ce8e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   3d168:	f010 0f01 	tst.w	r0, #1
   3d16c:	9901      	ldr	r1, [sp, #4]
   3d16e:	d10b      	bne.n	3d188 <free_chunk+0x36>
		free_list_remove(h, right_chunk(h, c));
   3d170:	4628      	mov	r0, r5
   3d172:	f7ff ff4f 	bl	3d014 <free_list_remove>
	return c + chunk_size(h, c);
   3d176:	4621      	mov	r1, r4
   3d178:	4628      	mov	r0, r5
   3d17a:	f7ff fe9e 	bl	3ceba <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   3d17e:	4621      	mov	r1, r4
   3d180:	1822      	adds	r2, r4, r0
   3d182:	4628      	mov	r0, r5
   3d184:	f7ff fed1 	bl	3cf2a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   3d188:	2200      	movs	r2, #0
   3d18a:	4621      	mov	r1, r4
   3d18c:	4628      	mov	r0, r5
   3d18e:	f7ff fe7e 	bl	3ce8e <chunk_field>
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3d192:	2201      	movs	r2, #1
	return c - chunk_field(h, c, LEFT_SIZE);
   3d194:	1a21      	subs	r1, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   3d196:	4628      	mov	r0, r5
   3d198:	9101      	str	r1, [sp, #4]
   3d19a:	f7ff fe78 	bl	3ce8e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   3d19e:	f010 0601 	ands.w	r6, r0, #1
   3d1a2:	9901      	ldr	r1, [sp, #4]
   3d1a4:	d112      	bne.n	3d1cc <free_chunk+0x7a>
		free_list_remove(h, left_chunk(h, c));
   3d1a6:	4628      	mov	r0, r5
   3d1a8:	f7ff ff34 	bl	3d014 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   3d1ac:	4621      	mov	r1, r4
   3d1ae:	4632      	mov	r2, r6
   3d1b0:	4628      	mov	r0, r5
   3d1b2:	f7ff fe6c 	bl	3ce8e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   3d1b6:	4622      	mov	r2, r4
   3d1b8:	1a21      	subs	r1, r4, r0
   3d1ba:	4628      	mov	r0, r5
   3d1bc:	f7ff feb5 	bl	3cf2a <merge_chunks>
   3d1c0:	4621      	mov	r1, r4
   3d1c2:	4632      	mov	r2, r6
   3d1c4:	4628      	mov	r0, r5
   3d1c6:	f7ff fe62 	bl	3ce8e <chunk_field>
   3d1ca:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   3d1cc:	4621      	mov	r1, r4
   3d1ce:	4628      	mov	r0, r5
}
   3d1d0:	b002      	add	sp, #8
   3d1d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_list_add(h, c);
   3d1d6:	f7ff bf77 	b.w	3d0c8 <free_list_add>

0003d1da <sys_heap_alloc>:
{
   3d1da:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   3d1dc:	6804      	ldr	r4, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   3d1de:	b909      	cbnz	r1, 3d1e4 <sys_heap_alloc+0xa>
		return NULL;
   3d1e0:	2000      	movs	r0, #0
}
   3d1e2:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   3d1e4:	68a2      	ldr	r2, [r4, #8]
   3d1e6:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   3d1ea:	d9f9      	bls.n	3d1e0 <sys_heap_alloc+0x6>
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   3d1ec:	4620      	mov	r0, r4
   3d1ee:	f7ff fe86 	bl	3cefe <bytes_to_chunksz>
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3d1f2:	4601      	mov	r1, r0
	size_t chunk_sz = bytes_to_chunksz(h, bytes);
   3d1f4:	4606      	mov	r6, r0
	chunkid_t c = alloc_chunk(h, chunk_sz);
   3d1f6:	4620      	mov	r0, r4
   3d1f8:	f7ff ff23 	bl	3d042 <alloc_chunk>
	if (c == 0U) {
   3d1fc:	4605      	mov	r5, r0
   3d1fe:	2800      	cmp	r0, #0
   3d200:	d0ee      	beq.n	3d1e0 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   3d202:	4601      	mov	r1, r0
   3d204:	4620      	mov	r0, r4
   3d206:	f7ff fe58 	bl	3ceba <chunk_size>
   3d20a:	42b0      	cmp	r0, r6
   3d20c:	d909      	bls.n	3d222 <sys_heap_alloc+0x48>
		split_chunks(h, c, c + chunk_sz);
   3d20e:	442e      	add	r6, r5
   3d210:	4629      	mov	r1, r5
   3d212:	4620      	mov	r0, r4
   3d214:	4632      	mov	r2, r6
   3d216:	f7ff fea7 	bl	3cf68 <split_chunks>
		free_list_add(h, c + chunk_sz);
   3d21a:	4631      	mov	r1, r6
   3d21c:	4620      	mov	r0, r4
   3d21e:	f7ff ff53 	bl	3d0c8 <free_list_add>
	set_chunk_used(h, c, true);
   3d222:	4620      	mov	r0, r4
   3d224:	2201      	movs	r2, #1
   3d226:	4629      	mov	r1, r5
   3d228:	f7ff fe4d 	bl	3cec6 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   3d22c:	68a3      	ldr	r3, [r4, #8]
   3d22e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   3d232:	bf2c      	ite	cs
   3d234:	2008      	movcs	r0, #8
   3d236:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   3d238:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
   3d23c:	4420      	add	r0, r4
	return chunk_mem(h, c);
   3d23e:	e7d0      	b.n	3d1e2 <sys_heap_alloc+0x8>

0003d240 <_ldiv5>:
{
   3d240:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
	uint32_t v_lo = *v;
   3d244:	e9d0 2400 	ldrd	r2, r4, [r0]
	__asm__ ("" : "+r" (m));
   3d248:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   3d24c:	fba2 bc03 	umull	fp, ip, r2, r3
   3d250:	eb1b 0603 	adds.w	r6, fp, r3
   3d254:	eb4c 0503 	adc.w	r5, ip, r3
	result >>= 32;
   3d258:	462f      	mov	r7, r5
   3d25a:	2600      	movs	r6, #0
	result += (uint64_t)v_hi * m;
   3d25c:	fba4 4503 	umull	r4, r5, r4, r3
   3d260:	eb1b 0204 	adds.w	r2, fp, r4
   3d264:	eb4c 0105 	adc.w	r1, ip, r5
   3d268:	19d2      	adds	r2, r2, r7
	result >>= 32;
   3d26a:	4632      	mov	r2, r6
	result += (uint64_t)v_hi * m;
   3d26c:	eb46 0101 	adc.w	r1, r6, r1
	result += (uint64_t)v_hi * m;
   3d270:	1863      	adds	r3, r4, r1
   3d272:	eb45 0202 	adc.w	r2, r5, r2
	*v = result;
   3d276:	e9c0 3200 	strd	r3, r2, [r0]
}
   3d27a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}

0003d27e <_get_digit>:
	if (*digit_count > 0) {
   3d27e:	680b      	ldr	r3, [r1, #0]
{
   3d280:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
   3d282:	2b00      	cmp	r3, #0
   3d284:	dd10      	ble.n	3d2a8 <_get_digit+0x2a>
		--*digit_count;
   3d286:	3b01      	subs	r3, #1
   3d288:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   3d28a:	210a      	movs	r1, #10
   3d28c:	6802      	ldr	r2, [r0, #0]
   3d28e:	6844      	ldr	r4, [r0, #4]
   3d290:	fba2 5601 	umull	r5, r6, r2, r1
   3d294:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= (BIT64(60) - 1U);
   3d298:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   3d29c:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
   3d2a0:	0f31      	lsrs	r1, r6, #28
   3d2a2:	3130      	adds	r1, #48	; 0x30
}
   3d2a4:	4608      	mov	r0, r1
   3d2a6:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   3d2a8:	2130      	movs	r1, #48	; 0x30
   3d2aa:	e7fb      	b.n	3d2a4 <_get_digit+0x26>

0003d2ac <outs>:
{
   3d2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3d2b0:	4680      	mov	r8, r0
   3d2b2:	4689      	mov	r9, r1
   3d2b4:	4616      	mov	r6, r2
   3d2b6:	461f      	mov	r7, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3d2b8:	4615      	mov	r5, r2
   3d2ba:	42bd      	cmp	r5, r7
   3d2bc:	eba5 0406 	sub.w	r4, r5, r6
   3d2c0:	d305      	bcc.n	3d2ce <outs+0x22>
   3d2c2:	b10f      	cbz	r7, 3d2c8 <outs+0x1c>
	return (int)count;
   3d2c4:	4620      	mov	r0, r4
   3d2c6:	e008      	b.n	3d2da <outs+0x2e>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   3d2c8:	782b      	ldrb	r3, [r5, #0]
   3d2ca:	2b00      	cmp	r3, #0
   3d2cc:	d0fa      	beq.n	3d2c4 <outs+0x18>
		int rc = out((int)*sp++, ctx);
   3d2ce:	4649      	mov	r1, r9
   3d2d0:	f815 0b01 	ldrb.w	r0, [r5], #1
   3d2d4:	47c0      	blx	r8
		if (rc < 0) {
   3d2d6:	2800      	cmp	r0, #0
   3d2d8:	daef      	bge.n	3d2ba <outs+0xe>
}
   3d2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003d2de <assert_post_action>:
	if (_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   3d2de:	4040      	eors	r0, r0
   3d2e0:	f380 8811 	msr	BASEPRI, r0
   3d2e4:	f04f 0004 	mov.w	r0, #4
   3d2e8:	df02      	svc	2
}
   3d2ea:	4770      	bx	lr

0003d2ec <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL_INF, 1);
GEN_ABSOLUTE_SYM(CONFIG_ASSET_TRACKER_LOG_LEVEL, 3);

GEN_ABS_SYM_END
   3d2ec:	4770      	bx	lr

0003d2ee <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   3d2ee:	f7f9 b9ff 	b.w	366f0 <SystemInit>

0003d2f2 <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   3d2f2:	6843      	ldr	r3, [r0, #4]
}
   3d2f4:	7958      	ldrb	r0, [r3, #5]
   3d2f6:	4770      	bx	lr

0003d2f8 <k_cycle_get_32_wrapper>:
   3d2f8:	f7e8 bfec 	b.w	262d4 <z_timer_cycle_get_32>

0003d2fc <dummy_timestamp>:
   3d2fc:	2000      	movs	r0, #0
   3d2fe:	4770      	bx	lr

0003d300 <log_string_sync>:
{
   3d300:	b40e      	push	{r1, r2, r3}
   3d302:	b503      	push	{r0, r1, lr}
   3d304:	aa03      	add	r2, sp, #12
   3d306:	f852 1b04 	ldr.w	r1, [r2], #4
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   3d30a:	2300      	movs	r3, #0
	va_start(ap, fmt);
   3d30c:	9201      	str	r2, [sp, #4]
	log_generic(src_level, fmt, ap, LOG_STRDUP_SKIP);
   3d30e:	f7e7 f879 	bl	24404 <log_generic>
}
   3d312:	b002      	add	sp, #8
   3d314:	f85d eb04 	ldr.w	lr, [sp], #4
   3d318:	b003      	add	sp, #12
   3d31a:	4770      	bx	lr

0003d31c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   3d31c:	b508      	push	{r3, lr}
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0, K_NO_WAIT);
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   3d31e:	f7e7 f8e7 	bl	244f0 <log_init>
	}

	return 0;
}
   3d322:	2000      	movs	r0, #0
   3d324:	bd08      	pop	{r3, pc}

0003d326 <log_strdup>:
}
   3d326:	4770      	bx	lr

0003d328 <out_func>:
{
   3d328:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   3d32a:	e9d1 3200 	ldrd	r3, r2, [r1]
{
   3d32e:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   3d330:	2101      	movs	r1, #1
   3d332:	6852      	ldr	r2, [r2, #4]
   3d334:	a801      	add	r0, sp, #4
   3d336:	4798      	blx	r3
}
   3d338:	2000      	movs	r0, #0
   3d33a:	b003      	add	sp, #12
   3d33c:	f85d fb04 	ldr.w	pc, [sp], #4

0003d340 <buffer_write>:
{
   3d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d342:	4606      	mov	r6, r0
   3d344:	460d      	mov	r5, r1
   3d346:	4614      	mov	r4, r2
   3d348:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   3d34a:	4621      	mov	r1, r4
   3d34c:	4628      	mov	r0, r5
   3d34e:	463a      	mov	r2, r7
   3d350:	47b0      	blx	r6
	} while (len != 0);
   3d352:	1a24      	subs	r4, r4, r0
		buf += processed;
   3d354:	4405      	add	r5, r0
	} while (len != 0);
   3d356:	d1f8      	bne.n	3d34a <buffer_write+0xa>
}
   3d358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003d35a <log_output_flush>:
		     log_output->control_block->offset,
   3d35a:	6842      	ldr	r2, [r0, #4]
{
   3d35c:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   3d35e:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   3d362:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   3d364:	6881      	ldr	r1, [r0, #8]
   3d366:	6800      	ldr	r0, [r0, #0]
   3d368:	f7ff ffea 	bl	3d340 <buffer_write>
	log_output->control_block->offset = 0;
   3d36c:	2200      	movs	r2, #0
   3d36e:	6863      	ldr	r3, [r4, #4]
   3d370:	601a      	str	r2, [r3, #0]
}
   3d372:	bd10      	pop	{r4, pc}

0003d374 <fcb_append_to_scratch>:
{
   3d374:	b538      	push	{r3, r4, r5, lr}
   3d376:	4604      	mov	r4, r0
		cur = fcb_getnext_sector(fcb, cur);
   3d378:	6a41      	ldr	r1, [r0, #36]	; 0x24
   3d37a:	f000 fa47 	bl	3d80c <fcb_getnext_sector>
		if (cur == fcb->f_oldest) {
   3d37e:	6a23      	ldr	r3, [r4, #32]
		cur = fcb_getnext_sector(fcb, cur);
   3d380:	4605      	mov	r5, r0
		if (cur == fcb->f_oldest) {
   3d382:	4298      	cmp	r0, r3
   3d384:	d00f      	beq.n	3d3a6 <fcb_append_to_scratch+0x32>
	if (!sector) {
   3d386:	b170      	cbz	r0, 3d3a6 <fcb_append_to_scratch+0x32>
	rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d388:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d38a:	4601      	mov	r1, r0
   3d38c:	3201      	adds	r2, #1
   3d38e:	4620      	mov	r0, r4
   3d390:	b292      	uxth	r2, r2
   3d392:	f000 f8ca 	bl	3d52a <fcb_sector_hdr_init>
	if (rc) {
   3d396:	b928      	cbnz	r0, 3d3a4 <fcb_append_to_scratch+0x30>
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d398:	2308      	movs	r3, #8
   3d39a:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id++;
   3d39c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
	fcb->f_active.fe_sector = sector;
   3d39e:	6265      	str	r5, [r4, #36]	; 0x24
	fcb->f_active_id++;
   3d3a0:	3301      	adds	r3, #1
   3d3a2:	86a3      	strh	r3, [r4, #52]	; 0x34
}
   3d3a4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOSPC;
   3d3a6:	f06f 001b 	mvn.w	r0, #27
   3d3aa:	e7fb      	b.n	3d3a4 <fcb_append_to_scratch+0x30>

0003d3ac <fcb_append_finish>:

int
fcb_append_finish(struct fcb *fcb, struct fcb_entry *loc)
{
   3d3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   3d3ae:	b083      	sub	sp, #12
   3d3b0:	4604      	mov	r4, r0
   3d3b2:	460d      	mov	r5, r1
	int rc;
	uint8_t crc8[fcb->f_align];
   3d3b4:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
{
   3d3b8:	af02      	add	r7, sp, #8
	uint8_t crc8[fcb->f_align];
   3d3ba:	1dd3      	adds	r3, r2, #7
   3d3bc:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
   3d3c0:	ebad 0d03 	sub.w	sp, sp, r3
   3d3c4:	ae02      	add	r6, sp, #8
__ssp_bos_icheck3(memset, void *, int)
   3d3c6:	21ff      	movs	r1, #255	; 0xff
   3d3c8:	4630      	mov	r0, r6
   3d3ca:	f004 fc88 	bl	41cde <memset>
	off_t off;

	(void)memset(crc8, 0xFF, sizeof(crc8));

	rc = fcb_elem_crc8(fcb, loc, &crc8[0]);
   3d3ce:	4632      	mov	r2, r6
   3d3d0:	4629      	mov	r1, r5
   3d3d2:	4620      	mov	r0, r4
   3d3d4:	f000 f970 	bl	3d6b8 <fcb_elem_crc8>
	if (rc) {
   3d3d8:	b9b0      	cbnz	r0, 3d408 <fcb_append_finish+0x5c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d3da:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
   3d3de:	89aa      	ldrh	r2, [r5, #12]
	if (fcb->f_align <= 1U) {
   3d3e0:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d3e2:	bf82      	ittt	hi
   3d3e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
   3d3e8:	18d2      	addhi	r2, r2, r3
   3d3ea:	4258      	neghi	r0, r3
   3d3ec:	68a9      	ldr	r1, [r5, #8]
   3d3ee:	bf88      	it	hi
   3d3f0:	4002      	andhi	r2, r0

	rc = fcb_flash_write(fcb, loc->fe_sector, off, crc8, fcb->f_align);
   3d3f2:	9300      	str	r3, [sp, #0]
   3d3f4:	440a      	add	r2, r1
   3d3f6:	4633      	mov	r3, r6
   3d3f8:	4620      	mov	r0, r4
   3d3fa:	6829      	ldr	r1, [r5, #0]
   3d3fc:	f000 f821 	bl	3d442 <fcb_flash_write>
	if (rc) {
   3d400:	2800      	cmp	r0, #0
		return -EIO;
   3d402:	bf18      	it	ne
   3d404:	f06f 0004 	mvnne.w	r0, #4
	}
	return 0;
}
   3d408:	3704      	adds	r7, #4
   3d40a:	46bd      	mov	sp, r7
   3d40c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003d40e <fcb_get_align>:
uint8_t
fcb_get_align(const struct fcb *fcb)
{
	uint8_t align;

	if (fcb->fap == NULL) {
   3d40e:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3d410:	b108      	cbz	r0, 3d416 <fcb_get_align+0x8>
		return 0;
	}

	align = flash_area_align(fcb->fap);
   3d412:	f000 bc23 	b.w	3dc5c <flash_area_align>

	return align;
}
   3d416:	4770      	bx	lr

0003d418 <fcb_flash_read>:

int fcb_flash_read(const struct fcb *fcb, const struct flash_sector *sector,
		   off_t off, void *dst, size_t len)
{
   3d418:	b570      	push	{r4, r5, r6, lr}
   3d41a:	4614      	mov	r4, r2
   3d41c:	461a      	mov	r2, r3
   3d41e:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3d420:	684d      	ldr	r5, [r1, #4]
   3d422:	18e6      	adds	r6, r4, r3
   3d424:	42ae      	cmp	r6, r5
   3d426:	d809      	bhi.n	3d43c <fcb_flash_read+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3d428:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3d42a:	b120      	cbz	r0, 3d436 <fcb_flash_read+0x1e>
		return -EIO;
	}

	rc = flash_area_read(fcb->fap, sector->fs_off + off, dst, len);
   3d42c:	6809      	ldr	r1, [r1, #0]
   3d42e:	4421      	add	r1, r4
   3d430:	f000 fba8 	bl	3db84 <flash_area_read>

	if (rc != 0) {
   3d434:	b108      	cbz	r0, 3d43a <fcb_flash_read+0x22>
		return -EIO;
   3d436:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3d43a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3d43c:	f06f 0015 	mvn.w	r0, #21
   3d440:	e7fb      	b.n	3d43a <fcb_flash_read+0x22>

0003d442 <fcb_flash_write>:

int fcb_flash_write(const struct fcb *fcb, const struct flash_sector *sector,
		    off_t off, const void *src, size_t len)
{
   3d442:	b570      	push	{r4, r5, r6, lr}
   3d444:	4614      	mov	r4, r2
   3d446:	461a      	mov	r2, r3
   3d448:	9b04      	ldr	r3, [sp, #16]
	int rc;

	if (off + len > sector->fs_size) {
   3d44a:	684d      	ldr	r5, [r1, #4]
   3d44c:	18e6      	adds	r6, r4, r3
   3d44e:	42ae      	cmp	r6, r5
   3d450:	d809      	bhi.n	3d466 <fcb_flash_write+0x24>
		return -EINVAL;
	}

	if (fcb->fap == NULL) {
   3d452:	6b80      	ldr	r0, [r0, #56]	; 0x38
   3d454:	b120      	cbz	r0, 3d460 <fcb_flash_write+0x1e>
		return -EIO;
	}

	rc = flash_area_write(fcb->fap, sector->fs_off + off, src, len);
   3d456:	6809      	ldr	r1, [r1, #0]
   3d458:	4421      	add	r1, r4
   3d45a:	f000 fbb0 	bl	3dbbe <flash_area_write>

	if (rc != 0) {
   3d45e:	b108      	cbz	r0, 3d464 <fcb_flash_write+0x22>
		return -EIO;
   3d460:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3d464:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3d466:	f06f 0015 	mvn.w	r0, #21
   3d46a:	e7fb      	b.n	3d464 <fcb_flash_write+0x22>

0003d46c <fcb_erase_sector>:
int
fcb_erase_sector(const struct fcb *fcb, const struct flash_sector *sector)
{
	int rc;

	if (fcb->fap == NULL) {
   3d46c:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
   3d46e:	b508      	push	{r3, lr}
	if (fcb->fap == NULL) {
   3d470:	b120      	cbz	r0, 3d47c <fcb_erase_sector+0x10>
		return -EIO;
	}

	rc = flash_area_erase(fcb->fap, sector->fs_off, sector->fs_size);
   3d472:	e9d1 1200 	ldrd	r1, r2, [r1]
   3d476:	f000 fbcb 	bl	3dc10 <flash_area_erase>

	if (rc != 0) {
   3d47a:	b108      	cbz	r0, 3d480 <fcb_erase_sector+0x14>
		return -EIO;
   3d47c:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   3d480:	bd08      	pop	{r3, pc}

0003d482 <fcb_free_sector_cnt>:
	return rc;
}

int
fcb_free_sector_cnt(struct fcb *fcb)
{
   3d482:	b538      	push	{r3, r4, r5, lr}
   3d484:	4604      	mov	r4, r0
	int i;
	struct flash_sector *fa;

	fa = fcb->f_active.fe_sector;
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d486:	2500      	movs	r5, #0
	fa = fcb->f_active.fe_sector;
   3d488:	6a41      	ldr	r1, [r0, #36]	; 0x24
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d48a:	7963      	ldrb	r3, [r4, #5]
   3d48c:	42ab      	cmp	r3, r5
   3d48e:	dc01      	bgt.n	3d494 <fcb_free_sector_cnt+0x12>
		if (fa == fcb->f_oldest) {
			break;
		}
	}
	return i;
}
   3d490:	4628      	mov	r0, r5
   3d492:	bd38      	pop	{r3, r4, r5, pc}
		fa = fcb_getnext_sector(fcb, fa);
   3d494:	4620      	mov	r0, r4
   3d496:	f000 f9b9 	bl	3d80c <fcb_getnext_sector>
		if (fa == fcb->f_oldest) {
   3d49a:	6a23      	ldr	r3, [r4, #32]
		fa = fcb_getnext_sector(fcb, fa);
   3d49c:	4601      	mov	r1, r0
		if (fa == fcb->f_oldest) {
   3d49e:	4283      	cmp	r3, r0
   3d4a0:	d0f6      	beq.n	3d490 <fcb_free_sector_cnt+0xe>
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d4a2:	3501      	adds	r5, #1
   3d4a4:	e7f1      	b.n	3d48a <fcb_free_sector_cnt+0x8>

0003d4a6 <fcb_put_len>:
 * and if there is any data at all or both bytes are equal to erase value.
 */
int
fcb_put_len(const struct fcb *fcb, uint8_t *buf, uint16_t len)
{
	if (len < 0x80) {
   3d4a6:	2a7f      	cmp	r2, #127	; 0x7f
{
   3d4a8:	b510      	push	{r4, lr}
	if (len < 0x80) {
   3d4aa:	d806      	bhi.n	3d4ba <fcb_put_len+0x14>
		buf[0] = len ^ ~fcb->f_erase_value;
   3d4ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 1;
   3d4b0:	2001      	movs	r0, #1
		buf[0] = len ^ ~fcb->f_erase_value;
   3d4b2:	405a      	eors	r2, r3
   3d4b4:	43d2      	mvns	r2, r2
   3d4b6:	700a      	strb	r2, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
		return 2;
	} else {
		return -EINVAL;
	}
}
   3d4b8:	bd10      	pop	{r4, pc}
	} else if (len < FCB_MAX_LEN) {
   3d4ba:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   3d4be:	429a      	cmp	r2, r3
   3d4c0:	d80e      	bhi.n	3d4e0 <fcb_put_len+0x3a>
		buf[0] = (len | 0x80) ^ ~fcb->f_erase_value;
   3d4c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3d4c6:	f062 047f 	orn	r4, r2, #127	; 0x7f
   3d4ca:	4063      	eors	r3, r4
   3d4cc:	43db      	mvns	r3, r3
   3d4ce:	700b      	strb	r3, [r1, #0]
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3d4d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
		return 2;
   3d4d4:	2002      	movs	r0, #2
		buf[1] = (len >> 7) ^ ~fcb->f_erase_value;
   3d4d6:	ea83 12d2 	eor.w	r2, r3, r2, lsr #7
   3d4da:	43d2      	mvns	r2, r2
   3d4dc:	704a      	strb	r2, [r1, #1]
		return 2;
   3d4de:	e7eb      	b.n	3d4b8 <fcb_put_len+0x12>
		return -EINVAL;
   3d4e0:	f06f 0015 	mvn.w	r0, #21
   3d4e4:	e7e8      	b.n	3d4b8 <fcb_put_len+0x12>

0003d4e6 <fcb_get_len>:

int
fcb_get_len(const struct fcb *fcb, uint8_t *buf, uint16_t *len)
{
   3d4e6:	b530      	push	{r4, r5, lr}
	int rc;

	if ((buf[0] ^ ~fcb->f_erase_value) & 0x80) {
   3d4e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   3d4ec:	780d      	ldrb	r5, [r1, #0]
   3d4ee:	ea83 0405 	eor.w	r4, r3, r5
   3d4f2:	f014 0f80 	tst.w	r4, #128	; 0x80
   3d4f6:	4620      	mov	r0, r4
   3d4f8:	d10f      	bne.n	3d51a <fcb_get_len+0x34>
		if ((buf[0] == fcb->f_erase_value) &&
   3d4fa:	42ab      	cmp	r3, r5
   3d4fc:	7849      	ldrb	r1, [r1, #1]
   3d4fe:	d101      	bne.n	3d504 <fcb_get_len+0x1e>
   3d500:	428b      	cmp	r3, r1
   3d502:	d00f      	beq.n	3d524 <fcb_get_len+0x3e>
		    (buf[1] == fcb->f_erase_value)) {
			return -ENOTSUP;
		}
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d504:	43c0      	mvns	r0, r0
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3d506:	404b      	eors	r3, r1
   3d508:	01db      	lsls	r3, r3, #7
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d50a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
			((uint8_t)(buf[1] ^ ~fcb->f_erase_value) << 7);
   3d50e:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d512:	4303      	orrs	r3, r0
		rc = 2;
   3d514:	2002      	movs	r0, #2
		*len = ((buf[0] ^ ~fcb->f_erase_value) & 0x7f) |
   3d516:	8013      	strh	r3, [r2, #0]
	} else {
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
		rc = 1;
	}
	return rc;
}
   3d518:	bd30      	pop	{r4, r5, pc}
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3d51a:	43e3      	mvns	r3, r4
   3d51c:	b2db      	uxtb	r3, r3
		rc = 1;
   3d51e:	2001      	movs	r0, #1
		*len = (uint8_t)(buf[0] ^ ~fcb->f_erase_value);
   3d520:	8013      	strh	r3, [r2, #0]
		rc = 1;
   3d522:	e7f9      	b.n	3d518 <fcb_get_len+0x32>
			return -ENOTSUP;
   3d524:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d528:	e7f6      	b.n	3d518 <fcb_get_len+0x32>

0003d52a <fcb_sector_hdr_init>:
/**
 * Initialize erased sector for use.
 */
int
fcb_sector_hdr_init(struct fcb *fcb, struct flash_sector *sector, uint16_t id)
{
   3d52a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const uint8_t ev = fcb->f_erase_value;
   3d52c:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
	return (fcb->f_magic ^ ~MK32(ev));
   3d530:	6806      	ldr	r6, [r0, #0]
   3d532:	0423      	lsls	r3, r4, #16
   3d534:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   3d538:	4323      	orrs	r3, r4
   3d53a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   3d53e:	4073      	eors	r3, r6
   3d540:	43db      	mvns	r3, r3
	struct fcb_disk_area fda;
	int rc;

	fda.fd_magic = fcb_flash_magic(fcb);
   3d542:	9302      	str	r3, [sp, #8]
	fda.fd_ver = fcb->f_version;
   3d544:	7903      	ldrb	r3, [r0, #4]
	fda._pad = fcb->f_erase_value;
	fda.fd_id = id;
   3d546:	f8ad 200e 	strh.w	r2, [sp, #14]
	fda.fd_ver = fcb->f_version;
   3d54a:	f88d 300c 	strb.w	r3, [sp, #12]

	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3d54e:	2308      	movs	r3, #8
   3d550:	2200      	movs	r2, #0
   3d552:	9300      	str	r3, [sp, #0]
   3d554:	446b      	add	r3, sp
	fda._pad = fcb->f_erase_value;
   3d556:	f88d 400d 	strb.w	r4, [sp, #13]
	rc = fcb_flash_write(fcb, sector, 0, &fda, sizeof(fda));
   3d55a:	f7ff ff72 	bl	3d442 <fcb_flash_write>
	if (rc != 0) {
   3d55e:	2800      	cmp	r0, #0
		return -EIO;
	}
	return 0;
}
   3d560:	bf18      	it	ne
   3d562:	f06f 0004 	mvnne.w	r0, #4
   3d566:	b004      	add	sp, #16
   3d568:	bd70      	pop	{r4, r5, r6, pc}

0003d56a <fcb_sector_hdr_read>:
 * Returns 0 if sector is unused;
 * Returns 1 if sector has data.
 */
int fcb_sector_hdr_read(struct fcb *fcb, struct flash_sector *sector,
			struct fcb_disk_area *fdap)
{
   3d56a:	b530      	push	{r4, r5, lr}
   3d56c:	4605      	mov	r5, r0
	struct fcb_disk_area fda;
	int rc;

	if (!fdap) {
   3d56e:	4614      	mov	r4, r2
{
   3d570:	b085      	sub	sp, #20
	if (!fdap) {
   3d572:	b902      	cbnz	r2, 3d576 <fcb_sector_hdr_read+0xc>
		fdap = &fda;
   3d574:	ac02      	add	r4, sp, #8
	}
	rc = fcb_flash_read(fcb, sector, 0, fdap, sizeof(*fdap));
   3d576:	2308      	movs	r3, #8
   3d578:	2200      	movs	r2, #0
   3d57a:	9300      	str	r3, [sp, #0]
   3d57c:	4628      	mov	r0, r5
   3d57e:	4623      	mov	r3, r4
   3d580:	f7ff ff4a 	bl	3d418 <fcb_flash_read>
	if (rc) {
   3d584:	b9a0      	cbnz	r0, 3d5b0 <fcb_sector_hdr_read+0x46>
		return -EIO;
	}
	if (fdap->fd_magic == MK32(fcb->f_erase_value)) {
   3d586:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   3d58a:	6821      	ldr	r1, [r4, #0]
   3d58c:	0413      	lsls	r3, r2, #16
   3d58e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   3d592:	4313      	orrs	r3, r2
   3d594:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   3d598:	4299      	cmp	r1, r3
   3d59a:	d007      	beq.n	3d5ac <fcb_sector_hdr_read+0x42>
   3d59c:	682a      	ldr	r2, [r5, #0]
   3d59e:	4053      	eors	r3, r2
   3d5a0:	43db      	mvns	r3, r3
		return 0;
	}
	if (fdap->fd_magic != fcb_flash_magic(fcb)) {
   3d5a2:	4299      	cmp	r1, r3
		return -ENOMSG;
   3d5a4:	bf0c      	ite	eq
   3d5a6:	2001      	moveq	r0, #1
   3d5a8:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	}
	return 1;
}
   3d5ac:	b005      	add	sp, #20
   3d5ae:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3d5b0:	f06f 0004 	mvn.w	r0, #4
   3d5b4:	e7fa      	b.n	3d5ac <fcb_sector_hdr_read+0x42>

0003d5b6 <fcb_init>:
{
   3d5b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3d5ba:	688b      	ldr	r3, [r1, #8]
{
   3d5bc:	460c      	mov	r4, r1
   3d5be:	b085      	sub	sp, #20
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3d5c0:	b92b      	cbnz	r3, 3d5ce <fcb_init+0x18>
		return -EINVAL;
   3d5c2:	f06f 0515 	mvn.w	r5, #21
}
   3d5c6:	4628      	mov	r0, r5
   3d5c8:	b005      	add	sp, #20
   3d5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fcb->f_sectors || fcb->f_sector_cnt - fcb->f_scratch_cnt < 1) {
   3d5ce:	794b      	ldrb	r3, [r1, #5]
   3d5d0:	798a      	ldrb	r2, [r1, #6]
   3d5d2:	1a9b      	subs	r3, r3, r2
   3d5d4:	2b00      	cmp	r3, #0
   3d5d6:	ddf4      	ble.n	3d5c2 <fcb_init+0xc>
	rc = flash_area_open(f_area_id, &fcb->fap);
   3d5d8:	3138      	adds	r1, #56	; 0x38
   3d5da:	b2c0      	uxtb	r0, r0
   3d5dc:	f7e7 fc7a 	bl	24ed4 <flash_area_open>
	if (rc != 0) {
   3d5e0:	4606      	mov	r6, r0
   3d5e2:	2800      	cmp	r0, #0
   3d5e4:	d1ed      	bne.n	3d5c2 <fcb_init+0xc>
	dev = device_get_binding(fcb->fap->fa_dev_name);
   3d5e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   3d5e8:	68d8      	ldr	r0, [r3, #12]
   3d5ea:	f7f9 fd3b 	bl	37064 <z_impl_device_get_binding>
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
   3d5ee:	6883      	ldr	r3, [r0, #8]
   3d5f0:	691b      	ldr	r3, [r3, #16]
   3d5f2:	4798      	blx	r3
	fcb->f_erase_value = fparam->erase_value;
   3d5f4:	7903      	ldrb	r3, [r0, #4]
	align = fcb_get_align(fcb);
   3d5f6:	4620      	mov	r0, r4
	fcb->f_erase_value = fparam->erase_value;
   3d5f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	align = fcb_get_align(fcb);
   3d5fc:	f7ff ff07 	bl	3d40e <fcb_get_align>
	if (align == 0U) {
   3d600:	4681      	mov	r9, r0
   3d602:	2800      	cmp	r0, #0
   3d604:	d0dd      	beq.n	3d5c2 <fcb_init+0xc>
	int oldest = -1, newest = -1;
   3d606:	f04f 3bff 	mov.w	fp, #4294967295
	struct flash_sector *oldest_sector = NULL, *newest_sector = NULL;
   3d60a:	46b2      	mov	sl, r6
   3d60c:	4637      	mov	r7, r6
	int oldest = -1, newest = -1;
   3d60e:	46d8      	mov	r8, fp
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d610:	7963      	ldrb	r3, [r4, #5]
   3d612:	42b3      	cmp	r3, r6
   3d614:	dc24      	bgt.n	3d660 <fcb_init+0xaa>
	if (oldest < 0) {
   3d616:	f1b8 3fff 	cmp.w	r8, #4294967295
   3d61a:	d149      	bne.n	3d6b0 <fcb_init+0xfa>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3d61c:	68a7      	ldr	r7, [r4, #8]
		rc = fcb_sector_hdr_init(fcb, oldest_sector, 0);
   3d61e:	2200      	movs	r2, #0
   3d620:	4639      	mov	r1, r7
   3d622:	4620      	mov	r0, r4
   3d624:	f7ff ff81 	bl	3d52a <fcb_sector_hdr_init>
		if (rc) {
   3d628:	4605      	mov	r5, r0
   3d62a:	2800      	cmp	r0, #0
   3d62c:	d1cb      	bne.n	3d5c6 <fcb_init+0x10>
		oldest_sector = newest_sector = &fcb->f_sectors[0];
   3d62e:	46ba      	mov	sl, r7
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d630:	2308      	movs	r3, #8
	fcb->f_active.fe_sector = newest_sector;
   3d632:	e9c4 7a08 	strd	r7, sl, [r4, #32]
	fcb->f_align = align;
   3d636:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
	fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d63a:	62a3      	str	r3, [r4, #40]	; 0x28
	fcb->f_active_id = newest;
   3d63c:	86a5      	strh	r5, [r4, #52]	; 0x34
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3d63e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   3d642:	4631      	mov	r1, r6
   3d644:	4620      	mov	r0, r4
   3d646:	f000 f8be 	bl	3d7c6 <fcb_getnext_in_sector>
		if (rc == -ENOTSUP) {
   3d64a:	f110 0f86 	cmn.w	r0, #134	; 0x86
		rc = fcb_getnext_in_sector(fcb, &fcb->f_active);
   3d64e:	4605      	mov	r5, r0
		if (rc == -ENOTSUP) {
   3d650:	d030      	beq.n	3d6b4 <fcb_init+0xfe>
		if (rc != 0) {
   3d652:	2800      	cmp	r0, #0
   3d654:	d0f5      	beq.n	3d642 <fcb_init+0x8c>
	return z_impl_k_mutex_init(mutex);
   3d656:	f104 000c 	add.w	r0, r4, #12
   3d65a:	f004 f94e 	bl	418fa <z_impl_k_mutex_init>
   3d65e:	e7b2      	b.n	3d5c6 <fcb_init+0x10>
		sector = &fcb->f_sectors[i];
   3d660:	68a1      	ldr	r1, [r4, #8]
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3d662:	4620      	mov	r0, r4
		sector = &fcb->f_sectors[i];
   3d664:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
		rc = fcb_sector_hdr_read(fcb, sector, &fda);
   3d668:	aa02      	add	r2, sp, #8
   3d66a:	9101      	str	r1, [sp, #4]
   3d66c:	f7ff ff7d 	bl	3d56a <fcb_sector_hdr_read>
		if (rc < 0) {
   3d670:	1e05      	subs	r5, r0, #0
   3d672:	dba8      	blt.n	3d5c6 <fcb_init+0x10>
		if (rc == 0) {
   3d674:	d009      	beq.n	3d68a <fcb_init+0xd4>
		if (oldest < 0) {
   3d676:	f1b8 3fff 	cmp.w	r8, #4294967295
   3d67a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   3d67e:	9901      	ldr	r1, [sp, #4]
   3d680:	d105      	bne.n	3d68e <fcb_init+0xd8>
			oldest = newest = fda.fd_id;
   3d682:	4698      	mov	r8, r3
			oldest_sector = newest_sector = sector;
   3d684:	468a      	mov	sl, r1
   3d686:	460f      	mov	r7, r1
			oldest = newest = fda.fd_id;
   3d688:	469b      	mov	fp, r3
	for (i = 0; i < fcb->f_sector_cnt; i++) {
   3d68a:	3601      	adds	r6, #1
   3d68c:	e7c0      	b.n	3d610 <fcb_init+0x5a>
		if (FCB_ID_GT(fda.fd_id, newest)) {
   3d68e:	b21d      	sxth	r5, r3
   3d690:	fa0f f08b 	sxth.w	r0, fp
   3d694:	1a28      	subs	r0, r5, r0
   3d696:	2800      	cmp	r0, #0
   3d698:	dd02      	ble.n	3d6a0 <fcb_init+0xea>
			newest = fda.fd_id;
   3d69a:	469b      	mov	fp, r3
			newest_sector = sector;
   3d69c:	468a      	mov	sl, r1
   3d69e:	e7f4      	b.n	3d68a <fcb_init+0xd4>
		} else if (FCB_ID_GT(oldest, fda.fd_id)) {
   3d6a0:	fa0f f288 	sxth.w	r2, r8
   3d6a4:	1b52      	subs	r2, r2, r5
			oldest = fda.fd_id;
   3d6a6:	2a00      	cmp	r2, #0
   3d6a8:	bfc4      	itt	gt
   3d6aa:	4698      	movgt	r8, r3
   3d6ac:	460f      	movgt	r7, r1
   3d6ae:	e7ec      	b.n	3d68a <fcb_init+0xd4>
   3d6b0:	465d      	mov	r5, fp
   3d6b2:	e7bd      	b.n	3d630 <fcb_init+0x7a>
			rc = 0;
   3d6b4:	2500      	movs	r5, #0
   3d6b6:	e7ce      	b.n	3d656 <fcb_init+0xa0>

0003d6b8 <fcb_elem_crc8>:
 * Given offset in flash sector, fill in rest of the fcb_entry, and crc8 over
 * the data.
 */
int
fcb_elem_crc8(struct fcb *fcb, struct fcb_entry *loc, uint8_t *c8p)
{
   3d6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3d6bc:	460c      	mov	r4, r1
   3d6be:	4617      	mov	r7, r2
	uint16_t len;
	uint32_t off;
	uint32_t end;
	int rc;

	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3d6c0:	e9d1 1200 	ldrd	r1, r2, [r1]
   3d6c4:	684b      	ldr	r3, [r1, #4]
   3d6c6:	1c95      	adds	r5, r2, #2
   3d6c8:	429d      	cmp	r5, r3
{
   3d6ca:	4606      	mov	r6, r0
   3d6cc:	b08c      	sub	sp, #48	; 0x30
	if (loc->fe_elem_off + 2 > loc->fe_sector->fs_size) {
   3d6ce:	d84c      	bhi.n	3d76a <fcb_elem_crc8+0xb2>
		return -ENOTSUP;
	}
	rc = fcb_flash_read(fcb, loc->fe_sector, loc->fe_elem_off, tmp_str, 2);
   3d6d0:	2302      	movs	r3, #2
   3d6d2:	9300      	str	r3, [sp, #0]
   3d6d4:	ab04      	add	r3, sp, #16
   3d6d6:	f7ff fe9f 	bl	3d418 <fcb_flash_read>
	if (rc) {
   3d6da:	b120      	cbz	r0, 3d6e6 <fcb_elem_crc8+0x2e>
		return -EIO;
   3d6dc:	f06f 0004 	mvn.w	r0, #4
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
	}
	*c8p = crc8;

	return 0;
}
   3d6e0:	b00c      	add	sp, #48	; 0x30
   3d6e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	cnt = fcb_get_len(fcb, tmp_str, &len);
   3d6e6:	4630      	mov	r0, r6
   3d6e8:	f10d 020e 	add.w	r2, sp, #14
   3d6ec:	a904      	add	r1, sp, #16
   3d6ee:	f7ff fefa 	bl	3d4e6 <fcb_get_len>
	if (cnt < 0) {
   3d6f2:	2800      	cmp	r0, #0
   3d6f4:	dbf4      	blt.n	3d6e0 <fcb_elem_crc8+0x28>
	loc->fe_data_off = loc->fe_elem_off + fcb_len_in_flash(fcb, cnt);
   3d6f6:	f896 2036 	ldrb.w	r2, [r6, #54]	; 0x36
	if (fcb->f_align <= 1U) {
   3d6fa:	b283      	uxth	r3, r0
   3d6fc:	2a01      	cmp	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d6fe:	bf84      	itt	hi
   3d700:	f102 35ff 	addhi.w	r5, r2, #4294967295
   3d704:	195b      	addhi	r3, r3, r5
   3d706:	6861      	ldr	r1, [r4, #4]
   3d708:	bf84      	itt	hi
   3d70a:	4252      	neghi	r2, r2
   3d70c:	4013      	andhi	r3, r2
   3d70e:	440b      	add	r3, r1
   3d710:	60a3      	str	r3, [r4, #8]
	loc->fe_data_len = len;
   3d712:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3d716:	4602      	mov	r2, r0
	loc->fe_data_len = len;
   3d718:	81a3      	strh	r3, [r4, #12]
	crc8 = crc8_ccitt(crc8, tmp_str, cnt);
   3d71a:	20ff      	movs	r0, #255	; 0xff
   3d71c:	a904      	add	r1, sp, #16
   3d71e:	f7e5 f945 	bl	229ac <crc8_ccitt>
   3d722:	4605      	mov	r5, r0
	off = loc->fe_data_off;
   3d724:	f8d4 8008 	ldr.w	r8, [r4, #8]
	end = loc->fe_data_off + len;
   3d728:	f8bd a00e 	ldrh.w	sl, [sp, #14]
   3d72c:	44c2      	add	sl, r8
	for (; off < end; off += blk_sz) {
   3d72e:	45d0      	cmp	r8, sl
   3d730:	d302      	bcc.n	3d738 <fcb_elem_crc8+0x80>
	return 0;
   3d732:	2000      	movs	r0, #0
	*c8p = crc8;
   3d734:	703d      	strb	r5, [r7, #0]
	return 0;
   3d736:	e7d3      	b.n	3d6e0 <fcb_elem_crc8+0x28>
		blk_sz = end - off;
   3d738:	ebaa 0908 	sub.w	r9, sl, r8
   3d73c:	f1b9 0f20 	cmp.w	r9, #32
   3d740:	bf28      	it	cs
   3d742:	f04f 0920 	movcs.w	r9, #32
		rc = fcb_flash_read(fcb, loc->fe_sector, off, tmp_str, blk_sz);
   3d746:	4642      	mov	r2, r8
   3d748:	4630      	mov	r0, r6
   3d74a:	6821      	ldr	r1, [r4, #0]
   3d74c:	f8cd 9000 	str.w	r9, [sp]
   3d750:	ab04      	add	r3, sp, #16
   3d752:	f7ff fe61 	bl	3d418 <fcb_flash_read>
		if (rc) {
   3d756:	2800      	cmp	r0, #0
   3d758:	d1c0      	bne.n	3d6dc <fcb_elem_crc8+0x24>
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3d75a:	4628      	mov	r0, r5
   3d75c:	464a      	mov	r2, r9
   3d75e:	a904      	add	r1, sp, #16
   3d760:	f7e5 f924 	bl	229ac <crc8_ccitt>
	for (; off < end; off += blk_sz) {
   3d764:	44c8      	add	r8, r9
		crc8 = crc8_ccitt(crc8, tmp_str, blk_sz);
   3d766:	4605      	mov	r5, r0
	for (; off < end; off += blk_sz) {
   3d768:	e7e1      	b.n	3d72e <fcb_elem_crc8+0x76>
		return -ENOTSUP;
   3d76a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d76e:	e7b7      	b.n	3d6e0 <fcb_elem_crc8+0x28>

0003d770 <fcb_elem_info>:

int fcb_elem_info(struct fcb *fcb, struct fcb_entry *loc)
{
   3d770:	b530      	push	{r4, r5, lr}
   3d772:	b085      	sub	sp, #20
	int rc;
	uint8_t crc8;
	uint8_t fl_crc8;
	off_t off;

	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3d774:	f10d 020e 	add.w	r2, sp, #14
{
   3d778:	4605      	mov	r5, r0
   3d77a:	460c      	mov	r4, r1
	rc = fcb_elem_crc8(fcb, loc, &crc8);
   3d77c:	f7ff ff9c 	bl	3d6b8 <fcb_elem_crc8>
	if (rc) {
   3d780:	b9e0      	cbnz	r0, 3d7bc <fcb_elem_info+0x4c>
		return rc;
	}
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d782:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   3d786:	89a2      	ldrh	r2, [r4, #12]
	if (fcb->f_align <= 1U) {
   3d788:	2b01      	cmp	r3, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d78a:	bf81      	itttt	hi
   3d78c:	f102 32ff 	addhi.w	r2, r2, #4294967295
   3d790:	18d2      	addhi	r2, r2, r3
   3d792:	425b      	neghi	r3, r3
   3d794:	401a      	andhi	r2, r3

	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3d796:	2301      	movs	r3, #1
	off = loc->fe_data_off + fcb_len_in_flash(fcb, loc->fe_data_len);
   3d798:	68a1      	ldr	r1, [r4, #8]
	rc = fcb_flash_read(fcb, loc->fe_sector, off, &fl_crc8, sizeof(fl_crc8));
   3d79a:	9300      	str	r3, [sp, #0]
   3d79c:	440a      	add	r2, r1
   3d79e:	4628      	mov	r0, r5
   3d7a0:	6821      	ldr	r1, [r4, #0]
   3d7a2:	f10d 030f 	add.w	r3, sp, #15
   3d7a6:	f7ff fe37 	bl	3d418 <fcb_flash_read>
	if (rc) {
   3d7aa:	b948      	cbnz	r0, 3d7c0 <fcb_elem_info+0x50>
		return -EIO;
	}

	if (fl_crc8 != crc8) {
   3d7ac:	f89d 200f 	ldrb.w	r2, [sp, #15]
   3d7b0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   3d7b4:	429a      	cmp	r2, r3
		return -EBADMSG;
   3d7b6:	bf18      	it	ne
   3d7b8:	f06f 004c 	mvnne.w	r0, #76	; 0x4c
	}
	return 0;
}
   3d7bc:	b005      	add	sp, #20
   3d7be:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   3d7c0:	f06f 0004 	mvn.w	r0, #4
   3d7c4:	e7fa      	b.n	3d7bc <fcb_elem_info+0x4c>

0003d7c6 <fcb_getnext_in_sector>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_getnext_in_sector(struct fcb *fcb, struct fcb_entry *loc)
{
   3d7c6:	b538      	push	{r3, r4, r5, lr}
   3d7c8:	4604      	mov	r4, r0
   3d7ca:	460d      	mov	r5, r1
	int rc;

	rc = fcb_elem_info(fcb, loc);
   3d7cc:	f7ff ffd0 	bl	3d770 <fcb_elem_info>
	if (rc == 0 || rc == -EBADMSG) {
   3d7d0:	b110      	cbz	r0, 3d7d8 <fcb_getnext_in_sector+0x12>
   3d7d2:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d7d6:	d118      	bne.n	3d80a <fcb_getnext_in_sector+0x44>
		do {
			loc->fe_elem_off = loc->fe_data_off +
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3d7d8:	f894 1036 	ldrb.w	r1, [r4, #54]	; 0x36
   3d7dc:	89ab      	ldrh	r3, [r5, #12]
	if (fcb->f_align <= 1U) {
   3d7de:	2901      	cmp	r1, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d7e0:	bf88      	it	hi
   3d7e2:	f103 33ff 	addhi.w	r3, r3, #4294967295
			loc->fe_elem_off = loc->fe_data_off +
   3d7e6:	68aa      	ldr	r2, [r5, #8]
   3d7e8:	bf82      	ittt	hi
   3d7ea:	185b      	addhi	r3, r3, r1
   3d7ec:	4248      	neghi	r0, r1
   3d7ee:	4003      	andhi	r3, r0
	if (fcb->f_align <= 1U) {
   3d7f0:	2901      	cmp	r1, #1
   3d7f2:	4413      	add	r3, r2
		return len;
   3d7f4:	bf92      	itee	ls
   3d7f6:	2201      	movls	r2, #1
	return (len + (fcb->f_align - 1U)) & ~(fcb->f_align - 1U);
   3d7f8:	424a      	neghi	r2, r1
   3d7fa:	400a      	andhi	r2, r1
			  fcb_len_in_flash(fcb, loc->fe_data_len) +
   3d7fc:	4413      	add	r3, r2
			  fcb_len_in_flash(fcb, FCB_CRC_SZ);
			rc = fcb_elem_info(fcb, loc);
   3d7fe:	4629      	mov	r1, r5
   3d800:	4620      	mov	r0, r4
			loc->fe_elem_off = loc->fe_data_off +
   3d802:	606b      	str	r3, [r5, #4]
			rc = fcb_elem_info(fcb, loc);
   3d804:	f7ff ffb4 	bl	3d770 <fcb_elem_info>
			if (rc != -EBADMSG) {
   3d808:	e7e3      	b.n	3d7d2 <fcb_getnext_in_sector+0xc>
				break;
			}
		} while (rc == -EBADMSG);
	}
	return rc;
}
   3d80a:	bd38      	pop	{r3, r4, r5, pc}

0003d80c <fcb_getnext_sector>:

struct flash_sector *
fcb_getnext_sector(struct fcb *fcb, struct flash_sector *sector)
{
	sector++;
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3d80c:	6882      	ldr	r2, [r0, #8]
   3d80e:	7943      	ldrb	r3, [r0, #5]
	sector++;
   3d810:	3108      	adds	r1, #8
	if (sector >= &fcb->f_sectors[fcb->f_sector_cnt]) {
   3d812:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		sector = &fcb->f_sectors[0];
	}
	return sector;
}
   3d816:	4299      	cmp	r1, r3
   3d818:	bf34      	ite	cc
   3d81a:	4608      	movcc	r0, r1
   3d81c:	4610      	movcs	r0, r2
   3d81e:	4770      	bx	lr

0003d820 <fcb_getnext_nolock>:
int
fcb_getnext_nolock(struct fcb *fcb, struct fcb_entry *loc)
{
	int rc;

	if (loc->fe_sector == NULL) {
   3d820:	680b      	ldr	r3, [r1, #0]
{
   3d822:	b570      	push	{r4, r5, r6, lr}
   3d824:	4605      	mov	r5, r0
   3d826:	460c      	mov	r4, r1
	if (loc->fe_sector == NULL) {
   3d828:	b90b      	cbnz	r3, 3d82e <fcb_getnext_nolock+0xe>
		/*
		 * Find the first one we have in flash.
		 */
		loc->fe_sector = fcb->f_oldest;
   3d82a:	6a03      	ldr	r3, [r0, #32]
   3d82c:	600b      	str	r3, [r1, #0]
	}
	if (loc->fe_elem_off == 0U) {
   3d82e:	6863      	ldr	r3, [r4, #4]
   3d830:	b95b      	cbnz	r3, 3d84a <fcb_getnext_nolock+0x2a>
		/*
		 * If offset is zero, we serve the first entry from the sector.
		 */
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d832:	2308      	movs	r3, #8
		rc = fcb_elem_info(fcb, loc);
   3d834:	4621      	mov	r1, r4
   3d836:	4628      	mov	r0, r5
		loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d838:	6063      	str	r3, [r4, #4]
		rc = fcb_elem_info(fcb, loc);
   3d83a:	f7ff ff99 	bl	3d770 <fcb_elem_info>
		switch (rc) {
   3d83e:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d842:	d021      	beq.n	3d888 <fcb_getnext_nolock+0x68>
   3d844:	b950      	cbnz	r0, 3d85c <fcb_getnext_nolock+0x3c>
			goto next_sector;
		}
	} else {
		rc = fcb_getnext_in_sector(fcb, loc);
		if (rc == 0) {
			return 0;
   3d846:	2000      	movs	r0, #0
			}
		}
	}

	return 0;
}
   3d848:	bd70      	pop	{r4, r5, r6, pc}
		rc = fcb_getnext_in_sector(fcb, loc);
   3d84a:	4621      	mov	r1, r4
   3d84c:	4628      	mov	r0, r5
   3d84e:	f7ff ffba 	bl	3d7c6 <fcb_getnext_in_sector>
		if (rc == 0) {
   3d852:	2800      	cmp	r0, #0
   3d854:	d0f7      	beq.n	3d846 <fcb_getnext_nolock+0x26>
		if (rc == -ENOTSUP) {
   3d856:	f110 0f86 	cmn.w	r0, #134	; 0x86
   3d85a:	d113      	bne.n	3d884 <fcb_getnext_nolock+0x64>
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d85c:	2608      	movs	r6, #8
			if (loc->fe_sector == fcb->f_active.fe_sector) {
   3d85e:	6821      	ldr	r1, [r4, #0]
   3d860:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   3d862:	4299      	cmp	r1, r3
   3d864:	d019      	beq.n	3d89a <fcb_getnext_nolock+0x7a>
			loc->fe_sector = fcb_getnext_sector(fcb, loc->fe_sector);
   3d866:	4628      	mov	r0, r5
   3d868:	f7ff ffd0 	bl	3d80c <fcb_getnext_sector>
			rc = fcb_elem_info(fcb, loc);
   3d86c:	4621      	mov	r1, r4
			loc->fe_elem_off = sizeof(struct fcb_disk_area);
   3d86e:	e9c4 0600 	strd	r0, r6, [r4]
			rc = fcb_elem_info(fcb, loc);
   3d872:	4628      	mov	r0, r5
   3d874:	f7ff ff7c 	bl	3d770 <fcb_elem_info>
			switch (rc) {
   3d878:	f110 0f4d 	cmn.w	r0, #77	; 0x4d
   3d87c:	d004      	beq.n	3d888 <fcb_getnext_nolock+0x68>
   3d87e:	2800      	cmp	r0, #0
   3d880:	d0e1      	beq.n	3d846 <fcb_getnext_nolock+0x26>
   3d882:	e7ec      	b.n	3d85e <fcb_getnext_nolock+0x3e>
	while (rc == -EBADMSG) {
   3d884:	304d      	adds	r0, #77	; 0x4d
   3d886:	d1de      	bne.n	3d846 <fcb_getnext_nolock+0x26>
		rc = fcb_getnext_in_sector(fcb, loc);
   3d888:	4621      	mov	r1, r4
   3d88a:	4628      	mov	r0, r5
   3d88c:	f7ff ff9b 	bl	3d7c6 <fcb_getnext_in_sector>
		if (rc == 0) {
   3d890:	2800      	cmp	r0, #0
   3d892:	d0d8      	beq.n	3d846 <fcb_getnext_nolock+0x26>
		if (rc != -EBADMSG) {
   3d894:	304d      	adds	r0, #77	; 0x4d
   3d896:	d0f7      	beq.n	3d888 <fcb_getnext_nolock+0x68>
next_sector:
   3d898:	e7e0      	b.n	3d85c <fcb_getnext_nolock+0x3c>
				return -ENOTSUP;
   3d89a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   3d89e:	e7d3      	b.n	3d848 <fcb_getnext_nolock+0x28>

0003d8a0 <fcb_getnext>:

int
fcb_getnext(struct fcb *fcb, struct fcb_entry *loc)
{
   3d8a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3d8a2:	4604      	mov	r4, r0
   3d8a4:	9101      	str	r1, [sp, #4]
	int rc;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d8a6:	f100 050c 	add.w	r5, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d8aa:	f04f 32ff 	mov.w	r2, #4294967295
   3d8ae:	f04f 33ff 	mov.w	r3, #4294967295
   3d8b2:	4628      	mov	r0, r5
   3d8b4:	f7fa f80c 	bl	378d0 <z_impl_k_mutex_lock>
	if (rc) {
   3d8b8:	b950      	cbnz	r0, 3d8d0 <fcb_getnext+0x30>
		return -EINVAL;
	}
	rc = fcb_getnext_nolock(fcb, loc);
   3d8ba:	4620      	mov	r0, r4
   3d8bc:	9901      	ldr	r1, [sp, #4]
   3d8be:	f7ff ffaf 	bl	3d820 <fcb_getnext_nolock>
   3d8c2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   3d8c4:	4628      	mov	r0, r5
   3d8c6:	f7fa f8fd 	bl	37ac4 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&fcb->f_mtx);

	return rc;
}
   3d8ca:	4620      	mov	r0, r4
   3d8cc:	b003      	add	sp, #12
   3d8ce:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   3d8d0:	f06f 0415 	mvn.w	r4, #21
   3d8d4:	e7f9      	b.n	3d8ca <fcb_getnext+0x2a>

0003d8d6 <fcb_rotate>:
#include <fs/fcb.h>
#include "fcb_priv.h"

int
fcb_rotate(struct fcb *fcb)
{
   3d8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3d8d8:	4604      	mov	r4, r0
	struct flash_sector *sector;
	int rc = 0;

	rc = k_mutex_lock(&fcb->f_mtx, K_FOREVER);
   3d8da:	f100 070c 	add.w	r7, r0, #12
	return z_impl_k_mutex_lock(mutex, timeout);
   3d8de:	f04f 32ff 	mov.w	r2, #4294967295
   3d8e2:	f04f 33ff 	mov.w	r3, #4294967295
   3d8e6:	4638      	mov	r0, r7
   3d8e8:	f7f9 fff2 	bl	378d0 <z_impl_k_mutex_lock>
	if (rc) {
   3d8ec:	bb48      	cbnz	r0, 3d942 <fcb_rotate+0x6c>
		return -EINVAL;
	}

	rc = fcb_erase_sector(fcb, fcb->f_oldest);
   3d8ee:	4620      	mov	r0, r4
   3d8f0:	6a21      	ldr	r1, [r4, #32]
   3d8f2:	f7ff fdbb 	bl	3d46c <fcb_erase_sector>
	if (rc) {
   3d8f6:	bb08      	cbnz	r0, 3d93c <fcb_rotate+0x66>
		rc = -EIO;
		goto out;
	}
	if (fcb->f_oldest == fcb->f_active.fe_sector) {
   3d8f8:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   3d8fc:	4299      	cmp	r1, r3
   3d8fe:	d112      	bne.n	3d926 <fcb_rotate+0x50>
		/*
		 * Need to create a new active area, as we're wiping
		 * the current.
		 */
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d900:	4620      	mov	r0, r4
   3d902:	f7ff ff83 	bl	3d80c <fcb_getnext_sector>
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d906:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   3d908:	4601      	mov	r1, r0
   3d90a:	3201      	adds	r2, #1
		sector = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d90c:	4606      	mov	r6, r0
		rc = fcb_sector_hdr_init(fcb, sector, fcb->f_active_id + 1);
   3d90e:	b292      	uxth	r2, r2
   3d910:	4620      	mov	r0, r4
   3d912:	f7ff fe0a 	bl	3d52a <fcb_sector_hdr_init>
		if (rc) {
   3d916:	4605      	mov	r5, r0
   3d918:	b958      	cbnz	r0, 3d932 <fcb_rotate+0x5c>
			goto out;
		}
		fcb->f_active.fe_sector = sector;
		fcb->f_active.fe_elem_off = sizeof(struct fcb_disk_area);
   3d91a:	2308      	movs	r3, #8
   3d91c:	62a3      	str	r3, [r4, #40]	; 0x28
		fcb->f_active_id++;
   3d91e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
		fcb->f_active.fe_sector = sector;
   3d920:	6266      	str	r6, [r4, #36]	; 0x24
		fcb->f_active_id++;
   3d922:	3301      	adds	r3, #1
   3d924:	86a3      	strh	r3, [r4, #52]	; 0x34
	}
	fcb->f_oldest = fcb_getnext_sector(fcb, fcb->f_oldest);
   3d926:	4620      	mov	r0, r4
   3d928:	6a21      	ldr	r1, [r4, #32]
   3d92a:	f7ff ff6f 	bl	3d80c <fcb_getnext_sector>
   3d92e:	2500      	movs	r5, #0
   3d930:	6220      	str	r0, [r4, #32]
	return z_impl_k_mutex_unlock(mutex);
   3d932:	4638      	mov	r0, r7
   3d934:	f7fa f8c6 	bl	37ac4 <z_impl_k_mutex_unlock>
out:
	k_mutex_unlock(&fcb->f_mtx);
	return rc;
}
   3d938:	4628      	mov	r0, r5
   3d93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = -EIO;
   3d93c:	f06f 0504 	mvn.w	r5, #4
   3d940:	e7f7      	b.n	3d932 <fcb_rotate+0x5c>
		return -EINVAL;
   3d942:	f06f 0515 	mvn.w	r5, #21
   3d946:	e7f7      	b.n	3d938 <fcb_rotate+0x62>

0003d948 <sntp_init>:
{
   3d948:	b570      	push	{r4, r5, r6, lr}
   3d94a:	460d      	mov	r5, r1
   3d94c:	4616      	mov	r6, r2
	if (!ctx || !addr) {
   3d94e:	4604      	mov	r4, r0
   3d950:	b330      	cbz	r0, 3d9a0 <sntp_init+0x58>
   3d952:	b329      	cbz	r1, 3d9a0 <sntp_init+0x58>
   3d954:	2214      	movs	r2, #20
   3d956:	2100      	movs	r1, #0
   3d958:	f004 f9c1 	bl	41cde <memset>
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d95c:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3d95e:	2211      	movs	r2, #17
   3d960:	2102      	movs	r1, #2
   3d962:	f7e7 f8c7 	bl	24af4 <z_impl_zsock_socket>
	if (ctx->sock.fd < 0) {
   3d966:	2800      	cmp	r0, #0
	ctx->sock.fd = socket(addr->sa_family, SOCK_DGRAM, IPPROTO_UDP);
   3d968:	60e0      	str	r0, [r4, #12]
	if (ctx->sock.fd < 0) {
   3d96a:	da04      	bge.n	3d976 <sntp_init+0x2e>
		return -errno;
   3d96c:	f000 fbb5 	bl	3e0da <__errno>
   3d970:	6800      	ldr	r0, [r0, #0]
   3d972:	4240      	negs	r0, r0
}
   3d974:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_connect(sock, addr, addrlen);
   3d976:	4632      	mov	r2, r6
   3d978:	4629      	mov	r1, r5
   3d97a:	f000 f843 	bl	3da04 <z_impl_zsock_connect>
	if (ret < 0) {
   3d97e:	2800      	cmp	r0, #0
   3d980:	68e0      	ldr	r0, [r4, #12]
   3d982:	da02      	bge.n	3d98a <sntp_init+0x42>
	return z_impl_zsock_close(sock);
   3d984:	f000 f827 	bl	3d9d6 <z_impl_zsock_close>
   3d988:	e7f0      	b.n	3d96c <sntp_init+0x24>
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d98a:	2101      	movs	r1, #1
	ctx->sock.fds[ctx->sock.nfds].fd = ctx->sock.fd;
   3d98c:	68a3      	ldr	r3, [r4, #8]
   3d98e:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d992:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
	ctx->sock.nfds++;
   3d996:	440b      	add	r3, r1
	ctx->sock.fds[ctx->sock.nfds].events = POLLIN;
   3d998:	8091      	strh	r1, [r2, #4]
	return 0;
   3d99a:	2000      	movs	r0, #0
	ctx->sock.nfds++;
   3d99c:	60a3      	str	r3, [r4, #8]
	return 0;
   3d99e:	e7e9      	b.n	3d974 <sntp_init+0x2c>
		return -EFAULT;
   3d9a0:	f06f 000d 	mvn.w	r0, #13
   3d9a4:	e7e6      	b.n	3d974 <sntp_init+0x2c>

0003d9a6 <sntp_close>:

void sntp_close(struct sntp_ctx *ctx)
{
	if (ctx) {
   3d9a6:	b110      	cbz	r0, 3d9ae <sntp_close+0x8>
		(void)close(ctx->sock.fd);
   3d9a8:	68c0      	ldr	r0, [r0, #12]
   3d9aa:	f000 b814 	b.w	3d9d6 <z_impl_zsock_close>
	}
}
   3d9ae:	4770      	bx	lr

0003d9b0 <zsock_getaddrinfo>:
int zsock_getaddrinfo(const char *host, const char *service,
		      const struct zsock_addrinfo *hints,
		      struct zsock_addrinfo **res)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_getaddrinfo(host, service, hints, res);
   3d9b0:	f7e7 ba18 	b.w	24de4 <socket_offload_getaddrinfo>

0003d9b4 <zsock_freeaddrinfo>:
}

void zsock_freeaddrinfo(struct zsock_addrinfo *ai)
{
	if (IS_ENABLED(CONFIG_NET_SOCKETS_OFFLOAD)) {
		return socket_offload_freeaddrinfo(ai);
   3d9b4:	f7e7 ba4a 	b.w	24e4c <socket_offload_freeaddrinfo>

0003d9b8 <z_fdtable_call_ioctl>:
 * @param request ioctl request number
 * @param ... Variadic arguments to ioctl
 */
static inline int z_fdtable_call_ioctl(const struct fd_op_vtable *vtable, void *obj,
				       unsigned long request, ...)
{
   3d9b8:	b40c      	push	{r2, r3}
   3d9ba:	4603      	mov	r3, r0
   3d9bc:	b507      	push	{r0, r1, r2, lr}
   3d9be:	aa04      	add	r2, sp, #16
   3d9c0:	4608      	mov	r0, r1
   3d9c2:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list args;
	int res;

	va_start(args, request);
	res = vtable->ioctl(obj, request, args);
   3d9c6:	68db      	ldr	r3, [r3, #12]
	va_start(args, request);
   3d9c8:	9201      	str	r2, [sp, #4]
	res = vtable->ioctl(obj, request, args);
   3d9ca:	4798      	blx	r3
	va_end(args);

	return res;
}
   3d9cc:	b003      	add	sp, #12
   3d9ce:	f85d eb04 	ldr.w	lr, [sp], #4
   3d9d2:	b002      	add	sp, #8
   3d9d4:	4770      	bx	lr

0003d9d6 <z_impl_zsock_close>:
{
   3d9d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ctx = z_get_fd_obj_and_vtable(sock,
   3d9d8:	a901      	add	r1, sp, #4
{
   3d9da:	4605      	mov	r5, r0
	ctx = z_get_fd_obj_and_vtable(sock,
   3d9dc:	f7e5 f832 	bl	22a44 <z_get_fd_obj_and_vtable>
	if (ctx == NULL) {
   3d9e0:	b940      	cbnz	r0, 3d9f4 <z_impl_zsock_close+0x1e>
		errno = EBADF;
   3d9e2:	f000 fb7a 	bl	3e0da <__errno>
   3d9e6:	2309      	movs	r3, #9
		return -1;
   3d9e8:	f04f 34ff 	mov.w	r4, #4294967295
		errno = EBADF;
   3d9ec:	6003      	str	r3, [r0, #0]
}
   3d9ee:	4620      	mov	r0, r4
   3d9f0:	b003      	add	sp, #12
   3d9f2:	bd30      	pop	{r4, r5, pc}
	ret = vtable->fd_vtable.close(ctx);
   3d9f4:	9b01      	ldr	r3, [sp, #4]
   3d9f6:	689b      	ldr	r3, [r3, #8]
   3d9f8:	4798      	blx	r3
   3d9fa:	4604      	mov	r4, r0
	z_free_fd(sock);
   3d9fc:	4628      	mov	r0, r5
   3d9fe:	f7e5 f871 	bl	22ae4 <z_free_fd>
	return ret;
   3da02:	e7f4      	b.n	3d9ee <z_impl_zsock_close+0x18>

0003da04 <z_impl_zsock_connect>:
{
   3da04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3da06:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   3da08:	a903      	add	r1, sp, #12
{
   3da0a:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   3da0c:	f7e5 f81a 	bl	22a44 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(connect, sock, addr, addrlen);
   3da10:	b118      	cbz	r0, 3da1a <z_impl_zsock_connect+0x16>
   3da12:	9b03      	ldr	r3, [sp, #12]
   3da14:	9a01      	ldr	r2, [sp, #4]
   3da16:	695b      	ldr	r3, [r3, #20]
   3da18:	b93b      	cbnz	r3, 3da2a <z_impl_zsock_connect+0x26>
   3da1a:	f000 fb5e 	bl	3e0da <__errno>
   3da1e:	2309      	movs	r3, #9
   3da20:	6003      	str	r3, [r0, #0]
   3da22:	f04f 30ff 	mov.w	r0, #4294967295
}
   3da26:	b004      	add	sp, #16
   3da28:	bd10      	pop	{r4, pc}
	VTABLE_CALL(connect, sock, addr, addrlen);
   3da2a:	4621      	mov	r1, r4
   3da2c:	4798      	blx	r3
   3da2e:	e7fa      	b.n	3da26 <z_impl_zsock_connect+0x22>

0003da30 <z_impl_zsock_sendto>:
{
   3da30:	b530      	push	{r4, r5, lr}
   3da32:	b087      	sub	sp, #28
   3da34:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   3da36:	a905      	add	r1, sp, #20
{
   3da38:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   3da3c:	f7e5 f802 	bl	22a44 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3da40:	b120      	cbz	r0, 3da4c <z_impl_zsock_sendto+0x1c>
   3da42:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3da46:	9905      	ldr	r1, [sp, #20]
   3da48:	6a0d      	ldr	r5, [r1, #32]
   3da4a:	b93d      	cbnz	r5, 3da5c <z_impl_zsock_sendto+0x2c>
   3da4c:	f000 fb45 	bl	3e0da <__errno>
   3da50:	2309      	movs	r3, #9
   3da52:	6003      	str	r3, [r0, #0]
   3da54:	f04f 30ff 	mov.w	r0, #4294967295
}
   3da58:	b007      	add	sp, #28
   3da5a:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(sendto, sock, buf, len, flags, dest_addr, addrlen);
   3da5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3da5e:	9101      	str	r1, [sp, #4]
   3da60:	990a      	ldr	r1, [sp, #40]	; 0x28
   3da62:	9100      	str	r1, [sp, #0]
   3da64:	4621      	mov	r1, r4
   3da66:	47a8      	blx	r5
   3da68:	e7f6      	b.n	3da58 <z_impl_zsock_sendto+0x28>

0003da6a <z_impl_zsock_sendmsg>:
{
   3da6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   3da6c:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   3da6e:	a903      	add	r1, sp, #12
{
   3da70:	9201      	str	r2, [sp, #4]
	ctx = z_get_fd_obj_and_vtable(sock,
   3da72:	f7e4 ffe7 	bl	22a44 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3da76:	b118      	cbz	r0, 3da80 <z_impl_zsock_sendmsg+0x16>
   3da78:	9b03      	ldr	r3, [sp, #12]
   3da7a:	9a01      	ldr	r2, [sp, #4]
   3da7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   3da7e:	b93b      	cbnz	r3, 3da90 <z_impl_zsock_sendmsg+0x26>
   3da80:	f000 fb2b 	bl	3e0da <__errno>
   3da84:	2309      	movs	r3, #9
   3da86:	6003      	str	r3, [r0, #0]
   3da88:	f04f 30ff 	mov.w	r0, #4294967295
}
   3da8c:	b004      	add	sp, #16
   3da8e:	bd10      	pop	{r4, pc}
	VTABLE_CALL(sendmsg, sock, msg, flags);
   3da90:	4621      	mov	r1, r4
   3da92:	4798      	blx	r3
   3da94:	e7fa      	b.n	3da8c <z_impl_zsock_sendmsg+0x22>

0003da96 <z_impl_zsock_recvfrom>:
{
   3da96:	b530      	push	{r4, r5, lr}
   3da98:	b087      	sub	sp, #28
   3da9a:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   3da9c:	a905      	add	r1, sp, #20
{
   3da9e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   3daa2:	f7e4 ffcf 	bl	22a44 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3daa6:	b120      	cbz	r0, 3dab2 <z_impl_zsock_recvfrom+0x1c>
   3daa8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3daac:	9905      	ldr	r1, [sp, #20]
   3daae:	6a4d      	ldr	r5, [r1, #36]	; 0x24
   3dab0:	b93d      	cbnz	r5, 3dac2 <z_impl_zsock_recvfrom+0x2c>
   3dab2:	f000 fb12 	bl	3e0da <__errno>
   3dab6:	2309      	movs	r3, #9
   3dab8:	6003      	str	r3, [r0, #0]
   3daba:	f04f 30ff 	mov.w	r0, #4294967295
}
   3dabe:	b007      	add	sp, #28
   3dac0:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(recvfrom, sock, buf, max_len, flags, src_addr, addrlen);
   3dac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   3dac4:	9101      	str	r1, [sp, #4]
   3dac6:	990a      	ldr	r1, [sp, #40]	; 0x28
   3dac8:	9100      	str	r1, [sp, #0]
   3daca:	4621      	mov	r1, r4
   3dacc:	47a8      	blx	r5
   3dace:	e7f6      	b.n	3dabe <z_impl_zsock_recvfrom+0x28>

0003dad0 <z_impl_zsock_getsockopt>:
	return -1;
}

int z_impl_zsock_getsockopt(int sock, int level, int optname,
			    void *optval, socklen_t *optlen)
{
   3dad0:	b530      	push	{r4, r5, lr}
   3dad2:	b087      	sub	sp, #28
   3dad4:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   3dad6:	a905      	add	r1, sp, #20
{
   3dad8:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   3dadc:	f7e4 ffb2 	bl	22a44 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   3dae0:	b120      	cbz	r0, 3daec <z_impl_zsock_getsockopt+0x1c>
   3dae2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3dae6:	9905      	ldr	r1, [sp, #20]
   3dae8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   3daea:	b93d      	cbnz	r5, 3dafc <z_impl_zsock_getsockopt+0x2c>
   3daec:	f000 faf5 	bl	3e0da <__errno>
   3daf0:	2309      	movs	r3, #9
   3daf2:	6003      	str	r3, [r0, #0]
   3daf4:	f04f 30ff 	mov.w	r0, #4294967295
}
   3daf8:	b007      	add	sp, #28
   3dafa:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(getsockopt, sock, level, optname, optval, optlen);
   3dafc:	990a      	ldr	r1, [sp, #40]	; 0x28
   3dafe:	9100      	str	r1, [sp, #0]
   3db00:	4621      	mov	r1, r4
   3db02:	47a8      	blx	r5
   3db04:	e7f8      	b.n	3daf8 <z_impl_zsock_getsockopt+0x28>

0003db06 <z_impl_zsock_setsockopt>:
	return -1;
}

int z_impl_zsock_setsockopt(int sock, int level, int optname,
			    const void *optval, socklen_t optlen)
{
   3db06:	b530      	push	{r4, r5, lr}
   3db08:	b087      	sub	sp, #28
   3db0a:	460c      	mov	r4, r1
	ctx = z_get_fd_obj_and_vtable(sock,
   3db0c:	a905      	add	r1, sp, #20
{
   3db0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	ctx = z_get_fd_obj_and_vtable(sock,
   3db12:	f7e4 ff97 	bl	22a44 <z_get_fd_obj_and_vtable>
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3db16:	b120      	cbz	r0, 3db22 <z_impl_zsock_setsockopt+0x1c>
   3db18:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   3db1c:	9905      	ldr	r1, [sp, #20]
   3db1e:	6acd      	ldr	r5, [r1, #44]	; 0x2c
   3db20:	b93d      	cbnz	r5, 3db32 <z_impl_zsock_setsockopt+0x2c>
   3db22:	f000 fada 	bl	3e0da <__errno>
   3db26:	2309      	movs	r3, #9
   3db28:	6003      	str	r3, [r0, #0]
   3db2a:	f04f 30ff 	mov.w	r0, #4294967295
}
   3db2e:	b007      	add	sp, #28
   3db30:	bd30      	pop	{r4, r5, pc}
	VTABLE_CALL(setsockopt, sock, level, optname, optval, optlen);
   3db32:	990a      	ldr	r1, [sp, #40]	; 0x28
   3db34:	9100      	str	r1, [sp, #0]
   3db36:	4621      	mov	r1, r4
   3db38:	47a8      	blx	r5
   3db3a:	e7f8      	b.n	3db2e <z_impl_zsock_setsockopt+0x28>

0003db3c <z_impl_flash_write_protection_set>:
	return api->write_protection(dev, enable);
   3db3c:	6883      	ldr	r3, [r0, #8]
   3db3e:	68db      	ldr	r3, [r3, #12]
   3db40:	4718      	bx	r3

0003db42 <device_get_binding>:
   3db42:	f7f9 ba8f 	b.w	37064 <z_impl_device_get_binding>

0003db46 <get_sectors_cb>:
{
   3db46:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   3db48:	6802      	ldr	r2, [r0, #0]
   3db4a:	684c      	ldr	r4, [r1, #4]
   3db4c:	42a2      	cmp	r2, r4
   3db4e:	d316      	bcc.n	3db7e <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   3db50:	688b      	ldr	r3, [r1, #8]
   3db52:	4423      	add	r3, r4
   3db54:	429a      	cmp	r2, r3
   3db56:	d206      	bcs.n	3db66 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   3db58:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   3db5c:	42ab      	cmp	r3, r5
   3db5e:	d304      	bcc.n	3db6a <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   3db60:	f06f 030b 	mvn.w	r3, #11
   3db64:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   3db66:	2000      	movs	r0, #0
   3db68:	e00a      	b.n	3db80 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3db6a:	68cd      	ldr	r5, [r1, #12]
   3db6c:	1b12      	subs	r2, r2, r4
   3db6e:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   3db72:	6842      	ldr	r2, [r0, #4]
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   3db74:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
	data->ret_idx++;
   3db78:	3301      	adds	r3, #1
	ret[data->ret_idx].fs_size = info->size;
   3db7a:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   3db7c:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   3db7e:	2001      	movs	r0, #1
}
   3db80:	bd70      	pop	{r4, r5, r6, pc}

0003db82 <flash_area_close>:
}
   3db82:	4770      	bx	lr

0003db84 <flash_area_read>:
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   3db84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   3db86:	461e      	mov	r6, r3
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3db88:	6883      	ldr	r3, [r0, #8]
{
   3db8a:	4605      	mov	r5, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3db8c:	428b      	cmp	r3, r1
{
   3db8e:	460c      	mov	r4, r1
   3db90:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3db92:	d310      	bcc.n	3dbb6 <flash_area_read+0x32>
   3db94:	1871      	adds	r1, r6, r1
   3db96:	428b      	cmp	r3, r1
   3db98:	d30d      	bcc.n	3dbb6 <flash_area_read+0x32>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   3db9a:	68c0      	ldr	r0, [r0, #12]
   3db9c:	f7ff ffd1 	bl	3db42 <device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   3dba0:	6869      	ldr	r1, [r5, #4]
   3dba2:	4421      	add	r1, r4
	return api->read(dev, offset, data, len);
   3dba4:	6883      	ldr	r3, [r0, #8]
   3dba6:	9a01      	ldr	r2, [sp, #4]
   3dba8:	681c      	ldr	r4, [r3, #0]
   3dbaa:	4633      	mov	r3, r6
   3dbac:	46a4      	mov	ip, r4
}
   3dbae:	b002      	add	sp, #8
   3dbb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   3dbb4:	4760      	bx	ip
   3dbb6:	f06f 0015 	mvn.w	r0, #21
   3dbba:	b002      	add	sp, #8
   3dbbc:	bd70      	pop	{r4, r5, r6, pc}

0003dbbe <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   3dbbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3dbc2:	4698      	mov	r8, r3
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3dbc4:	6883      	ldr	r3, [r0, #8]
{
   3dbc6:	4607      	mov	r7, r0
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3dbc8:	428b      	cmp	r3, r1
{
   3dbca:	460d      	mov	r5, r1
   3dbcc:	9201      	str	r2, [sp, #4]
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3dbce:	d31c      	bcc.n	3dc0a <flash_area_write+0x4c>
   3dbd0:	4441      	add	r1, r8
   3dbd2:	428b      	cmp	r3, r1
   3dbd4:	d319      	bcc.n	3dc0a <flash_area_write+0x4c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3dbd6:	68c0      	ldr	r0, [r0, #12]
   3dbd8:	f7ff ffb3 	bl	3db42 <device_get_binding>
   3dbdc:	4606      	mov	r6, r0
	return z_impl_flash_write_protection_set(dev, enable);
   3dbde:	2100      	movs	r1, #0
   3dbe0:	f7ff ffac 	bl	3db3c <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3dbe4:	4604      	mov	r4, r0
   3dbe6:	b960      	cbnz	r0, 3dc02 <flash_area_write+0x44>
		return rc;
	}

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   3dbe8:	6879      	ldr	r1, [r7, #4]
   3dbea:	4429      	add	r1, r5
	return api->write(dev, offset, data, len);
   3dbec:	68b3      	ldr	r3, [r6, #8]
   3dbee:	4630      	mov	r0, r6
   3dbf0:	685c      	ldr	r4, [r3, #4]
   3dbf2:	9a01      	ldr	r2, [sp, #4]
   3dbf4:	4643      	mov	r3, r8
   3dbf6:	47a0      	blx	r4
   3dbf8:	4604      	mov	r4, r0
   3dbfa:	2101      	movs	r1, #1
   3dbfc:	4630      	mov	r0, r6
   3dbfe:	f7ff ff9d 	bl	3db3c <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3dc02:	4620      	mov	r0, r4
   3dc04:	b002      	add	sp, #8
   3dc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   3dc0a:	f06f 0415 	mvn.w	r4, #21
   3dc0e:	e7f8      	b.n	3dc02 <flash_area_write+0x44>

0003dc10 <flash_area_erase>:
int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   3dc10:	6883      	ldr	r3, [r0, #8]
{
   3dc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3dc16:	428b      	cmp	r3, r1
{
   3dc18:	4607      	mov	r7, r0
   3dc1a:	460d      	mov	r5, r1
   3dc1c:	4690      	mov	r8, r2
	return (off <= fa->fa_size && off + len <= fa->fa_size);
   3dc1e:	d31a      	bcc.n	3dc56 <flash_area_erase+0x46>
   3dc20:	440a      	add	r2, r1
   3dc22:	4293      	cmp	r3, r2
   3dc24:	d317      	bcc.n	3dc56 <flash_area_erase+0x46>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   3dc26:	68c0      	ldr	r0, [r0, #12]
   3dc28:	f7ff ff8b 	bl	3db42 <device_get_binding>
   3dc2c:	4606      	mov	r6, r0
   3dc2e:	2100      	movs	r1, #0
   3dc30:	f7ff ff84 	bl	3db3c <z_impl_flash_write_protection_set>

	rc = flash_write_protection_set(flash_dev, false);
	if (rc) {
   3dc34:	4604      	mov	r4, r0
   3dc36:	b958      	cbnz	r0, 3dc50 <flash_area_erase+0x40>
		return rc;
	}

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   3dc38:	6879      	ldr	r1, [r7, #4]
   3dc3a:	4429      	add	r1, r5
	return api->erase(dev, offset, size);
   3dc3c:	68b3      	ldr	r3, [r6, #8]
   3dc3e:	4642      	mov	r2, r8
   3dc40:	4630      	mov	r0, r6
   3dc42:	689b      	ldr	r3, [r3, #8]
   3dc44:	4798      	blx	r3
   3dc46:	4604      	mov	r4, r0
   3dc48:	2101      	movs	r1, #1
   3dc4a:	4630      	mov	r0, r6
   3dc4c:	f7ff ff76 	bl	3db3c <z_impl_flash_write_protection_set>

	/* Ignore errors here - this does not affect write operation */
	(void) flash_write_protection_set(flash_dev, true);

	return rc;
}
   3dc50:	4620      	mov	r0, r4
   3dc52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   3dc56:	f06f 0415 	mvn.w	r4, #21
   3dc5a:	e7f9      	b.n	3dc50 <flash_area_erase+0x40>

0003dc5c <flash_area_align>:

uint8_t flash_area_align(const struct flash_area *fa)
{
   3dc5c:	b508      	push	{r3, lr}
	const struct device *dev;

	dev = device_get_binding(fa->fa_dev_name);
   3dc5e:	68c0      	ldr	r0, [r0, #12]
   3dc60:	f7ff ff6f 	bl	3db42 <device_get_binding>
	return api->get_parameters(dev)->write_block_size;
   3dc64:	6883      	ldr	r3, [r0, #8]
   3dc66:	691b      	ldr	r3, [r3, #16]
   3dc68:	4798      	blx	r3

	return flash_get_write_block_size(dev);
}
   3dc6a:	7800      	ldrb	r0, [r0, #0]
   3dc6c:	bd08      	pop	{r3, pc}

0003dc6e <flash_area_erased_val>:
{
	return device_get_binding(fa->fa_dev_name);
}

uint8_t flash_area_erased_val(const struct flash_area *fa)
{
   3dc6e:	b508      	push	{r3, lr}
	const struct flash_parameters *param;

	param = flash_get_parameters(device_get_binding(fa->fa_dev_name));
   3dc70:	68c0      	ldr	r0, [r0, #12]
   3dc72:	f7ff ff66 	bl	3db42 <device_get_binding>
	return api->get_parameters(dev);
   3dc76:	6883      	ldr	r3, [r0, #8]
   3dc78:	691b      	ldr	r3, [r3, #16]
   3dc7a:	4798      	blx	r3

	return param->erase_value;
}
   3dc7c:	7900      	ldrb	r0, [r0, #4]
   3dc7e:	bd08      	pop	{r3, pc}

0003dc80 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   3dc80:	6883      	ldr	r3, [r0, #8]
   3dc82:	68db      	ldr	r3, [r3, #12]
   3dc84:	4718      	bx	r3

0003dc86 <flash_get_write_block_size>:
}


extern size_t z_impl_flash_get_write_block_size(const struct device * dev);
static inline size_t flash_get_write_block_size(const struct device * dev)
{
   3dc86:	b508      	push	{r3, lr}
	return api->get_parameters(dev)->write_block_size;
   3dc88:	6883      	ldr	r3, [r0, #8]
   3dc8a:	691b      	ldr	r3, [r3, #16]
   3dc8c:	4798      	blx	r3
		return (size_t) arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_FLASH_GET_WRITE_BLOCK_SIZE);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_write_block_size(dev);
}
   3dc8e:	6800      	ldr	r0, [r0, #0]
   3dc90:	bd08      	pop	{r3, pc}

0003dc92 <stream_flash_buffered_write>:
{
   3dc92:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   3dc96:	4688      	mov	r8, r1
   3dc98:	4616      	mov	r6, r2
   3dc9a:	461f      	mov	r7, r3
	if (!ctx) {
   3dc9c:	4604      	mov	r4, r0
   3dc9e:	2800      	cmp	r0, #0
   3dca0:	d059      	beq.n	3dd56 <stream_flash_buffered_write+0xc4>
	if (ctx->bytes_written + ctx->buf_bytes + len > ctx->available) {
   3dca2:	6882      	ldr	r2, [r0, #8]
   3dca4:	6903      	ldr	r3, [r0, #16]
   3dca6:	4413      	add	r3, r2
   3dca8:	6982      	ldr	r2, [r0, #24]
   3dcaa:	4433      	add	r3, r6
   3dcac:	4293      	cmp	r3, r2
   3dcae:	d855      	bhi.n	3dd5c <stream_flash_buffered_write+0xca>
	int processed = 0;
   3dcb0:	2500      	movs	r5, #0
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3dcb2:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
	while ((len - processed) >=
   3dcb6:	eba6 0a05 	sub.w	sl, r6, r5
	       (buf_empty_bytes = ctx->buf_len - ctx->buf_bytes)) {
   3dcba:	eba2 0900 	sub.w	r9, r2, r0
	while ((len - processed) >=
   3dcbe:	45ca      	cmp	sl, r9
   3dcc0:	d239      	bcs.n	3dd36 <stream_flash_buffered_write+0xa4>
	if (processed < len) {
   3dcc2:	42b5      	cmp	r5, r6
   3dcc4:	d209      	bcs.n	3dcda <stream_flash_buffered_write+0x48>
		memcpy(ctx->buf + ctx->buf_bytes,
   3dcc6:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3dcc8:	4652      	mov	r2, sl
   3dcca:	4418      	add	r0, r3
   3dccc:	eb08 0105 	add.w	r1, r8, r5
   3dcd0:	f003 ffe5 	bl	41c9e <memcpy>
		ctx->buf_bytes += len - processed;
   3dcd4:	68a3      	ldr	r3, [r4, #8]
   3dcd6:	4453      	add	r3, sl
   3dcd8:	60a3      	str	r3, [r4, #8]
	if (flush && ctx->buf_bytes > 0) {
   3dcda:	2f00      	cmp	r7, #0
   3dcdc:	d041      	beq.n	3dd62 <stream_flash_buffered_write+0xd0>
   3dcde:	68a0      	ldr	r0, [r4, #8]
   3dce0:	b330      	cbz	r0, 3dd30 <stream_flash_buffered_write+0x9e>
		fill_length = flash_get_write_block_size(ctx->fdev);
   3dce2:	68e0      	ldr	r0, [r4, #12]
   3dce4:	f7ff ffcf 	bl	3dc86 <flash_get_write_block_size>
		if (ctx->buf_bytes % fill_length) {
   3dce8:	68a3      	ldr	r3, [r4, #8]
		fill_length = flash_get_write_block_size(ctx->fdev);
   3dcea:	4606      	mov	r6, r0
		if (ctx->buf_bytes % fill_length) {
   3dcec:	fbb3 f5f0 	udiv	r5, r3, r0
   3dcf0:	fb00 3515 	mls	r5, r0, r5, r3
   3dcf4:	b1b5      	cbz	r5, 3dd24 <stream_flash_buffered_write+0x92>
					ctx->offset + ctx->bytes_written,
   3dcf6:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
			rc = flash_read(ctx->fdev,
   3dcfa:	68e0      	ldr	r0, [r4, #12]
					ctx->offset + ctx->bytes_written,
   3dcfc:	4419      	add	r1, r3
	return api->read(dev, offset, data, len);
   3dcfe:	6883      	ldr	r3, [r0, #8]
   3dd00:	f10d 0207 	add.w	r2, sp, #7
   3dd04:	681f      	ldr	r7, [r3, #0]
   3dd06:	2301      	movs	r3, #1
   3dd08:	47b8      	blx	r7
			if (rc != 0) {
   3dd0a:	b988      	cbnz	r0, 3dd30 <stream_flash_buffered_write+0x9e>
			memset(ctx->buf + ctx->buf_bytes, filler, fill_length);
   3dd0c:	68a3      	ldr	r3, [r4, #8]
   3dd0e:	6820      	ldr	r0, [r4, #0]
			fill_length -= ctx->buf_bytes % fill_length;
   3dd10:	1b75      	subs	r5, r6, r5
__ssp_bos_icheck3(memset, void *, int)
   3dd12:	4418      	add	r0, r3
   3dd14:	462a      	mov	r2, r5
   3dd16:	f89d 1007 	ldrb.w	r1, [sp, #7]
   3dd1a:	f003 ffe0 	bl	41cde <memset>
			ctx->buf_bytes += fill_length;
   3dd1e:	68a3      	ldr	r3, [r4, #8]
   3dd20:	442b      	add	r3, r5
   3dd22:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3dd24:	4620      	mov	r0, r4
   3dd26:	f7e7 f96d 	bl	25004 <flash_sync>
		ctx->bytes_written -= fill_length;
   3dd2a:	6923      	ldr	r3, [r4, #16]
   3dd2c:	1b5d      	subs	r5, r3, r5
   3dd2e:	6125      	str	r5, [r4, #16]
}
   3dd30:	b002      	add	sp, #8
   3dd32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		memcpy(ctx->buf + ctx->buf_bytes, data + processed,
   3dd36:	6823      	ldr	r3, [r4, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3dd38:	464a      	mov	r2, r9
   3dd3a:	4418      	add	r0, r3
   3dd3c:	eb08 0105 	add.w	r1, r8, r5
   3dd40:	f003 ffad 	bl	41c9e <memcpy>
		ctx->buf_bytes = ctx->buf_len;
   3dd44:	6863      	ldr	r3, [r4, #4]
		rc = flash_sync(ctx);
   3dd46:	4620      	mov	r0, r4
		ctx->buf_bytes = ctx->buf_len;
   3dd48:	60a3      	str	r3, [r4, #8]
		rc = flash_sync(ctx);
   3dd4a:	f7e7 f95b 	bl	25004 <flash_sync>
		if (rc != 0) {
   3dd4e:	2800      	cmp	r0, #0
   3dd50:	d1ee      	bne.n	3dd30 <stream_flash_buffered_write+0x9e>
		processed += buf_empty_bytes;
   3dd52:	444d      	add	r5, r9
   3dd54:	e7ad      	b.n	3dcb2 <stream_flash_buffered_write+0x20>
		return -EFAULT;
   3dd56:	f06f 000d 	mvn.w	r0, #13
   3dd5a:	e7e9      	b.n	3dd30 <stream_flash_buffered_write+0x9e>
		return -ENOMEM;
   3dd5c:	f06f 000b 	mvn.w	r0, #11
   3dd60:	e7e6      	b.n	3dd30 <stream_flash_buffered_write+0x9e>
   3dd62:	4638      	mov	r0, r7
   3dd64:	e7e4      	b.n	3dd30 <stream_flash_buffered_write+0x9e>

0003dd66 <stream_flash_bytes_written>:
}
   3dd66:	6900      	ldr	r0, [r0, #16]
   3dd68:	4770      	bx	lr

0003dd6a <settings_name_steq>:
{
   3dd6a:	b530      	push	{r4, r5, lr}
	if (next) {
   3dd6c:	b10a      	cbz	r2, 3dd72 <settings_name_steq+0x8>
		*next = NULL;
   3dd6e:	2300      	movs	r3, #0
   3dd70:	6013      	str	r3, [r2, #0]
	if ((!name) || (!key)) {
   3dd72:	b190      	cbz	r0, 3dd9a <settings_name_steq+0x30>
   3dd74:	b151      	cbz	r1, 3dd8c <settings_name_steq+0x22>
   3dd76:	3901      	subs	r1, #1
	while ((*key != '\0') && (*key == *name) &&
   3dd78:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   3dd7c:	4604      	mov	r4, r0
   3dd7e:	f810 3b01 	ldrb.w	r3, [r0], #1
   3dd82:	b15d      	cbz	r5, 3dd9c <settings_name_steq+0x32>
   3dd84:	429d      	cmp	r5, r3
   3dd86:	d101      	bne.n	3dd8c <settings_name_steq+0x22>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   3dd88:	2d3d      	cmp	r5, #61	; 0x3d
   3dd8a:	d1f5      	bne.n	3dd78 <settings_name_steq+0xe>
	return 0;
   3dd8c:	2000      	movs	r0, #0
   3dd8e:	e004      	b.n	3dd9a <settings_name_steq+0x30>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   3dd90:	2b3d      	cmp	r3, #61	; 0x3d
   3dd92:	d008      	beq.n	3dda6 <settings_name_steq+0x3c>
   3dd94:	fab3 f083 	clz	r0, r3
   3dd98:	0940      	lsrs	r0, r0, #5
}
   3dd9a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   3dd9c:	2b2f      	cmp	r3, #47	; 0x2f
   3dd9e:	d1f7      	bne.n	3dd90 <settings_name_steq+0x26>
		if (next) {
   3dda0:	b10a      	cbz	r2, 3dda6 <settings_name_steq+0x3c>
			*next = name + 1;
   3dda2:	3401      	adds	r4, #1
   3dda4:	6014      	str	r4, [r2, #0]
		return 1;
   3dda6:	2001      	movs	r0, #1
   3dda8:	e7f7      	b.n	3dd9a <settings_name_steq+0x30>

0003ddaa <settings_line_len_calc>:
{
   3ddaa:	b510      	push	{r4, lr}
   3ddac:	460c      	mov	r4, r1
	len += strlen(name) + 1;
   3ddae:	f7df fa55 	bl	1d25c <strlen>
   3ddb2:	3401      	adds	r4, #1
}
   3ddb4:	4420      	add	r0, r4
   3ddb6:	bd10      	pop	{r4, pc}

0003ddb8 <settings_line_raw_read>:
{
   3ddb8:	b513      	push	{r0, r1, r4, lr}
	return settings_line_raw_read_until(seek, out, len_req, len_read,
   3ddba:	9c04      	ldr	r4, [sp, #16]
   3ddbc:	9401      	str	r4, [sp, #4]
   3ddbe:	2400      	movs	r4, #0
   3ddc0:	9400      	str	r4, [sp, #0]
   3ddc2:	f7e7 fb83 	bl	254cc <settings_line_raw_read_until>
}
   3ddc6:	b002      	add	sp, #8
   3ddc8:	bd10      	pop	{r4, pc}

0003ddca <settings_line_read_cb>:
{
   3ddca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3ddcc:	6803      	ldr	r3, [r0, #0]
   3ddce:	9300      	str	r3, [sp, #0]
   3ddd0:	6840      	ldr	r0, [r0, #4]
   3ddd2:	ab03      	add	r3, sp, #12
   3ddd4:	f7ff fff0 	bl	3ddb8 <settings_line_raw_read>
	if (rc == 0) {
   3ddd8:	b918      	cbnz	r0, 3dde2 <settings_line_read_cb+0x18>
		return len_read;
   3ddda:	9803      	ldr	r0, [sp, #12]
}
   3dddc:	b005      	add	sp, #20
   3ddde:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   3dde2:	f04f 30ff 	mov.w	r0, #4294967295
   3dde6:	e7f9      	b.n	3dddc <settings_line_read_cb+0x12>

0003dde8 <settings_line_name_read>:
{
   3dde8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char const until_char = '=';
   3ddea:	243d      	movs	r4, #61	; 0x3d
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3ddec:	9301      	str	r3, [sp, #4]
   3ddee:	f10d 030f 	add.w	r3, sp, #15
   3ddf2:	9300      	str	r3, [sp, #0]
   3ddf4:	4613      	mov	r3, r2
   3ddf6:	460a      	mov	r2, r1
   3ddf8:	4601      	mov	r1, r0
   3ddfa:	2000      	movs	r0, #0
	char const until_char = '=';
   3ddfc:	f88d 400f 	strb.w	r4, [sp, #15]
	return settings_line_raw_read_until(0, out, len_req, len_read,
   3de00:	f7e7 fb64 	bl	254cc <settings_line_raw_read_until>
}
   3de04:	b004      	add	sp, #16
   3de06:	bd10      	pop	{r4, pc}

0003de08 <settings_line_dup_check_cb>:
{
   3de08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   3de0c:	460f      	mov	r7, r1
   3de0e:	b088      	sub	sp, #32
	if (strcmp(name, cdca->name)) {
   3de10:	6819      	ldr	r1, [r3, #0]
{
   3de12:	4690      	mov	r8, r2
   3de14:	461c      	mov	r4, r3
	if (strcmp(name, cdca->name)) {
   3de16:	f7df fa17 	bl	1d248 <strcmp>
   3de1a:	4606      	mov	r6, r0
   3de1c:	b940      	cbnz	r0, 3de30 <settings_line_dup_check_cb+0x28>
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3de1e:	4639      	mov	r1, r7
   3de20:	4640      	mov	r0, r8
   3de22:	f7e7 fc13 	bl	2564c <settings_line_val_get_len>
	if (len_read != cdca->val_len) {
   3de26:	68a3      	ldr	r3, [r4, #8]
	len_read = settings_line_val_get_len(off, val_read_cb_ctx);
   3de28:	4605      	mov	r5, r0
	if (len_read != cdca->val_len) {
   3de2a:	4283      	cmp	r3, r0
   3de2c:	d004      	beq.n	3de38 <settings_line_dup_check_cb+0x30>
		cdca->is_dup = 0;
   3de2e:	60e6      	str	r6, [r4, #12]
}
   3de30:	2000      	movs	r0, #0
   3de32:	b008      	add	sp, #32
   3de34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (len_read == 0) {
   3de38:	b913      	cbnz	r3, 3de40 <settings_line_dup_check_cb+0x38>
			cdca->is_dup = 1;
   3de3a:	2301      	movs	r3, #1
			cdca->is_dup = 0;
   3de3c:	60e3      	str	r3, [r4, #12]
   3de3e:	e7f7      	b.n	3de30 <settings_line_dup_check_cb+0x28>
		if (!settings_line_cmp(cdca->val, cdca->val_len,
   3de40:	f8d4 a004 	ldr.w	sl, [r4, #4]
		len_read = exp_len = MIN(sizeof(buf), rem);
   3de44:	2d10      	cmp	r5, #16
   3de46:	46a9      	mov	r9, r5
   3de48:	bf28      	it	cs
   3de4a:	f04f 0910 	movcs.w	r9, #16
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3de4e:	9700      	str	r7, [sp, #0]
   3de50:	464a      	mov	r2, r9
   3de52:	ab03      	add	r3, sp, #12
   3de54:	a904      	add	r1, sp, #16
   3de56:	eb08 0006 	add.w	r0, r8, r6
		len_read = exp_len = MIN(sizeof(buf), rem);
   3de5a:	f8cd 900c 	str.w	r9, [sp, #12]
	return settings_line_raw_read(val_off + off, out, len_req, len_read,
   3de5e:	f7ff ffab 	bl	3ddb8 <settings_line_raw_read>
		if (rc) {
   3de62:	b970      	cbnz	r0, 3de82 <settings_line_dup_check_cb+0x7a>
		if (len_read != exp_len) {
   3de64:	9b03      	ldr	r3, [sp, #12]
   3de66:	4599      	cmp	r9, r3
   3de68:	d10b      	bne.n	3de82 <settings_line_dup_check_cb+0x7a>
		rc = memcmp(val, buf, len_read);
   3de6a:	464a      	mov	r2, r9
   3de6c:	4650      	mov	r0, sl
   3de6e:	a904      	add	r1, sp, #16
   3de70:	f003 ff07 	bl	41c82 <memcmp>
		if (rc) {
   3de74:	b928      	cbnz	r0, 3de82 <settings_line_dup_check_cb+0x7a>
		val += len_read;
   3de76:	9b03      	ldr	r3, [sp, #12]
	for (rem = val_len; rem > 0; rem -= len_read) {
   3de78:	1aed      	subs	r5, r5, r3
		val += len_read;
   3de7a:	449a      	add	sl, r3
		off += len_read;
   3de7c:	441e      	add	r6, r3
	for (rem = val_len; rem > 0; rem -= len_read) {
   3de7e:	d1e1      	bne.n	3de44 <settings_line_dup_check_cb+0x3c>
   3de80:	e7db      	b.n	3de3a <settings_line_dup_check_cb+0x32>
			cdca->is_dup = 0;
   3de82:	2300      	movs	r3, #0
   3de84:	e7da      	b.n	3de3c <settings_line_dup_check_cb+0x34>

0003de86 <get_len_cb>:
}
   3de86:	8980      	ldrh	r0, [r0, #12]
   3de88:	4770      	bx	lr

0003de8a <write_handler>:
{
   3de8a:	b430      	push	{r4, r5}
				FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off,
   3de8c:	6804      	ldr	r4, [r0, #0]
   3de8e:	6885      	ldr	r5, [r0, #8]
   3de90:	6824      	ldr	r4, [r4, #0]
   3de92:	4429      	add	r1, r5
	return flash_area_write(entry_ctx->fap,
   3de94:	4421      	add	r1, r4
   3de96:	6900      	ldr	r0, [r0, #16]
}
   3de98:	bc30      	pop	{r4, r5}
	return flash_area_write(entry_ctx->fap,
   3de9a:	f7ff be90 	b.w	3dbbe <flash_area_write>

0003de9e <read_handler>:
{
   3de9e:	b430      	push	{r4, r5}
	if (off >= entry_ctx->loc.fe_data_len) {
   3dea0:	8984      	ldrh	r4, [r0, #12]
   3dea2:	428c      	cmp	r4, r1
   3dea4:	dc03      	bgt.n	3deae <read_handler+0x10>
}
   3dea6:	bc30      	pop	{r4, r5}
		*len = 0;
   3dea8:	2000      	movs	r0, #0
   3deaa:	6018      	str	r0, [r3, #0]
}
   3deac:	4770      	bx	lr
	if ((off + *len) > entry_ctx->loc.fe_data_len) {
   3deae:	681d      	ldr	r5, [r3, #0]
   3deb0:	440d      	add	r5, r1
   3deb2:	42a5      	cmp	r5, r4
		*len = entry_ctx->loc.fe_data_len - off;
   3deb4:	bf84      	itt	hi
   3deb6:	1a64      	subhi	r4, r4, r1
   3deb8:	601c      	strhi	r4, [r3, #0]
			       FCB_ENTRY_FA_DATA_OFF(entry_ctx->loc) + off, buf,
   3deba:	6804      	ldr	r4, [r0, #0]
   3debc:	6885      	ldr	r5, [r0, #8]
   3debe:	6824      	ldr	r4, [r4, #0]
   3dec0:	4429      	add	r1, r5
	return flash_area_read(entry_ctx->fap,
   3dec2:	4421      	add	r1, r4
   3dec4:	681b      	ldr	r3, [r3, #0]
   3dec6:	6900      	ldr	r0, [r0, #16]
}
   3dec8:	bc30      	pop	{r4, r5}
	return flash_area_read(entry_ctx->fap,
   3deca:	f7ff be5b 	b.w	3db84 <flash_area_read>

0003dece <uart_poll_out>:
	api->poll_out(dev, out_char);
   3dece:	6883      	ldr	r3, [r0, #8]
   3ded0:	685b      	ldr	r3, [r3, #4]
   3ded2:	4718      	bx	r3

0003ded4 <debug_hook_out_nop>:
}
   3ded4:	2000      	movs	r0, #0
   3ded6:	4770      	bx	lr

0003ded8 <set_starting_state>:
{
   3ded8:	b510      	push	{r4, lr}
	__asm__ volatile(
   3deda:	f04f 0320 	mov.w	r3, #32
   3dede:	f3ef 8211 	mrs	r2, BASEPRI
   3dee2:	f383 8811 	msr	BASEPRI, r3
   3dee6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   3deea:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   3deec:	f003 0407 	and.w	r4, r3, #7
   3def0:	2c01      	cmp	r4, #1
   3def2:	d106      	bne.n	3df02 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   3def4:	6001      	str	r1, [r0, #0]
	int err = 0;
   3def6:	2000      	movs	r0, #0
	__asm__ volatile(
   3def8:	f382 8811 	msr	BASEPRI, r2
   3defc:	f3bf 8f6f 	isb	sy
}
   3df00:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   3df02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   3df06:	428b      	cmp	r3, r1
		err = -EALREADY;
   3df08:	bf14      	ite	ne
   3df0a:	f04f 30ff 	movne.w	r0, #4294967295
   3df0e:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   3df12:	e7f1      	b.n	3def8 <set_starting_state+0x20>

0003df14 <set_on_state>:
	__asm__ volatile(
   3df14:	f04f 0320 	mov.w	r3, #32
   3df18:	f3ef 8211 	mrs	r2, BASEPRI
   3df1c:	f383 8811 	msr	BASEPRI, r3
   3df20:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   3df24:	6803      	ldr	r3, [r0, #0]
   3df26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   3df2a:	f043 0302 	orr.w	r3, r3, #2
   3df2e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   3df30:	f382 8811 	msr	BASEPRI, r2
   3df34:	f3bf 8f6f 	isb	sy
}
   3df38:	4770      	bx	lr

0003df3a <onoff_started_callback>:
	return &data->mgr[type];
   3df3a:	68c0      	ldr	r0, [r0, #12]
   3df3c:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   3df3e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   3df42:	2100      	movs	r1, #0
   3df44:	4710      	bx	r2

0003df46 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   3df46:	2000      	movs	r0, #0
   3df48:	f7f8 bc5c 	b.w	36804 <nrfx_clock_start>

0003df4c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   3df4c:	2000      	movs	r0, #0
   3df4e:	f7f8 bcaf 	b.w	368b0 <nrfx_clock_stop>

0003df52 <api_stop>:
	return stop(dev, subsys, CTX_API);
   3df52:	2280      	movs	r2, #128	; 0x80
   3df54:	f7e7 be32 	b.w	25bbc <stop>

0003df58 <blocking_start_callback>:
{
   3df58:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   3df5a:	f7fb b9ab 	b.w	392b4 <z_impl_k_sem_give>

0003df5e <api_start>:
{
   3df5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err = set_starting_state(&subdata->flags, ctx);
   3df62:	240c      	movs	r4, #12
   3df64:	b2c9      	uxtb	r1, r1
   3df66:	434c      	muls	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   3df68:	68c5      	ldr	r5, [r0, #12]
{
   3df6a:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   3df6c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   3df70:	2180      	movs	r1, #128	; 0x80
   3df72:	4428      	add	r0, r5
{
   3df74:	4690      	mov	r8, r2
   3df76:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   3df78:	f7ff ffae 	bl	3ded8 <set_starting_state>
	if (err < 0) {
   3df7c:	2800      	cmp	r0, #0
   3df7e:	db06      	blt.n	3df8e <api_start+0x30>
	subdata->cb = cb;
   3df80:	4425      	add	r5, r4
	subdata->user_data = user_data;
   3df82:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   3df86:	6873      	ldr	r3, [r6, #4]
   3df88:	591b      	ldr	r3, [r3, r4]
   3df8a:	4798      	blx	r3
	return 0;
   3df8c:	2000      	movs	r0, #0
}
   3df8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003df92 <wdt_nrf_disable>:
}
   3df92:	f04f 30ff 	mov.w	r0, #4294967295
   3df96:	4770      	bx	lr

0003df98 <wdt_nrf_feed>:
{
   3df98:	b508      	push	{r3, lr}
	if (channel_id > get_dev_data(dev)->m_allocated_channels) {
   3df9a:	68c3      	ldr	r3, [r0, #12]
   3df9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   3dfa0:	428b      	cmp	r3, r1
   3dfa2:	db05      	blt.n	3dfb0 <wdt_nrf_feed+0x18>
	nrfx_wdt_channel_feed(&get_dev_config(dev)->wdt,
   3dfa4:	6840      	ldr	r0, [r0, #4]
   3dfa6:	b2c9      	uxtb	r1, r1
   3dfa8:	f7f8 ffea 	bl	36f80 <nrfx_wdt_channel_feed>
	return 0;
   3dfac:	2000      	movs	r0, #0
}
   3dfae:	bd08      	pop	{r3, pc}
		return -EINVAL;
   3dfb0:	f06f 0015 	mvn.w	r0, #21
   3dfb4:	e7fb      	b.n	3dfae <wdt_nrf_feed+0x16>

0003dfb6 <wdt_nrf_setup>:
{
   3dfb6:	b538      	push	{r3, r4, r5, lr}
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   3dfb8:	6844      	ldr	r4, [r0, #4]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   3dfba:	f001 0301 	and.w	r3, r1, #1
   3dfbe:	f1c3 0309 	rsb	r3, r3, #9
	if (options & WDT_OPT_PAUSE_HALTED_BY_DBG) {
   3dfc2:	078a      	lsls	r2, r1, #30
	nrf_wdt_behaviour_set(get_dev_config(dev)->wdt.p_reg, behaviour);
   3dfc4:	6825      	ldr	r5, [r4, #0]
	if (options & WDT_OPT_PAUSE_IN_SLEEP) {
   3dfc6:	b2db      	uxtb	r3, r3
		behaviour &= ~NRF_WDT_BEHAVIOUR_RUN_HALT;
   3dfc8:	bf48      	it	mi
   3dfca:	f003 03f7 	andmi.w	r3, r3, #247	; 0xf7
    p_reg->CONFIG = behaviour;
   3dfce:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   3dfd2:	68c3      	ldr	r3, [r0, #12]
			   / 1000));
   3dfd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		(uint32_t)(((uint64_t)get_dev_data(dev)->m_timeout * 32768U)
   3dfd8:	6a19      	ldr	r1, [r3, #32]
			   / 1000));
   3dfda:	2300      	movs	r3, #0
   3dfdc:	03c8      	lsls	r0, r1, #15
   3dfde:	0c49      	lsrs	r1, r1, #17
   3dfe0:	f7de ff6c 	bl	1cebc <__aeabi_uldivmod>
    p_reg->CRV = reload_value;
   3dfe4:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
	nrfx_wdt_enable(&get_dev_config(dev)->wdt);
   3dfe8:	4620      	mov	r0, r4
   3dfea:	f7f8 ff4b 	bl	36e84 <nrfx_wdt_enable>
}
   3dfee:	2000      	movs	r0, #0
   3dff0:	bd38      	pop	{r3, r4, r5, pc}

0003dff2 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   3dff2:	4770      	bx	lr

0003dff4 <sys_clock_disable>:
   3dff4:	4770      	bx	lr

0003dff6 <spm_request_random_number>:
	spm_request_system_reboot();
}
#endif /* CONFIG_SPM_SERVICE_REBOOT */

#ifdef CONFIG_SPM_SERVICE_RNG
NRF_NSE(int, spm_request_random_number, uint8_t *output, size_t len,
   3dff6:	b510      	push	{r4, lr}
   3dff8:	b40f      	push	{r0, r1, r2, r3}
   3dffa:	f7fa f80b 	bl	38014 <k_sched_lock>
   3dffe:	bc0f      	pop	{r0, r1, r2, r3}
   3e000:	f7d9 fff2 	bl	17fe8 <spm_request_random_number_nse>
   3e004:	b40f      	push	{r0, r1, r2, r3}
   3e006:	f7fa f939 	bl	3827c <k_sched_unlock>
   3e00a:	bc0f      	pop	{r0, r1, r2, r3}
   3e00c:	bd10      	pop	{r4, pc}

0003e00e <spm_request_read>:
					size_t *olen);
#endif /* CONFIG_SPM_SERVICE_RNG */

#ifdef CONFIG_SPM_SERVICE_READ
NRF_NSE(int, spm_request_read, void *destination, uint32_t addr, size_t len);
   3e00e:	b510      	push	{r4, lr}
   3e010:	b40f      	push	{r0, r1, r2, r3}
   3e012:	f7f9 ffff 	bl	38014 <k_sched_lock>
   3e016:	bc0f      	pop	{r0, r1, r2, r3}
   3e018:	f7d9 ffee 	bl	17ff8 <spm_request_read_nse>
   3e01c:	b40f      	push	{r0, r1, r2, r3}
   3e01e:	f7fa f92d 	bl	3827c <k_sched_unlock>
   3e022:	bc0f      	pop	{r0, r1, r2, r3}
   3e024:	bd10      	pop	{r4, pc}

0003e026 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   3e026:	2100      	movs	r1, #0
   3e028:	2001      	movs	r0, #1
   3e02a:	f7e8 bb2b 	b.w	26684 <z_arm_fatal_error>

0003e02e <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
   3e02e:	6f43      	ldr	r3, [r0, #116]	; 0x74
   3e030:	f383 880b 	msr	PSPLIM, r3
}
   3e034:	4770      	bx	lr

0003e036 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   3e036:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   3e038:	6800      	ldr	r0, [r0, #0]
   3e03a:	f7e8 bb23 	b.w	26684 <z_arm_fatal_error>

0003e03e <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   3e03e:	b508      	push	{r3, lr}
	handler();
   3e040:	f7e8 fb90 	bl	26764 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   3e044:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   3e048:	f7e8 be68 	b.w	26d1c <z_arm_exc_exit>

0003e04c <mpu_configure_region>:
{
   3e04c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
   3e04e:	890a      	ldrh	r2, [r1, #8]
   3e050:	7a8e      	ldrb	r6, [r1, #10]
	region_conf.base = new_region->start;
   3e052:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   3e054:	684d      	ldr	r5, [r1, #4]
   3e056:	f002 021f 	and.w	r2, r2, #31
   3e05a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
   3e05e:	9300      	str	r3, [sp, #0]
   3e060:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   3e064:	f023 031f 	bic.w	r3, r3, #31
   3e068:	1e6a      	subs	r2, r5, #1
   3e06a:	4413      	add	r3, r2
   3e06c:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
   3e070:	280f      	cmp	r0, #15
   3e072:	9303      	str	r3, [sp, #12]
   3e074:	d903      	bls.n	3e07e <mpu_configure_region+0x32>
   3e076:	f7e8 ff09 	bl	26e8c <region_allocate_and_init.part.0>
}
   3e07a:	b004      	add	sp, #16
   3e07c:	bd70      	pop	{r4, r5, r6, pc}
	region_init(index, region_conf);
   3e07e:	4669      	mov	r1, sp
   3e080:	f7e8 feec 	bl	26e5c <region_init>
	return region_allocate_and_init(index,
   3e084:	e7f9      	b.n	3e07a <mpu_configure_region+0x2e>

0003e086 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   3e086:	e840 f000 	tt	r0, r0
   3e08a:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   3e08c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   3e090:	bf14      	ite	ne
   3e092:	4618      	movne	r0, r3
   3e094:	f06f 0015 	mvneq.w	r0, #21
   3e098:	4770      	bx	lr

0003e09a <_stdout_hook_default>:
}
   3e09a:	f04f 30ff 	mov.w	r0, #4294967295
   3e09e:	4770      	bx	lr

0003e0a0 <_stdin_hook_default>:
}
   3e0a0:	2000      	movs	r0, #0
   3e0a2:	4770      	bx	lr

0003e0a4 <_read>:
{
   3e0a4:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   3e0a6:	4611      	mov	r1, r2
   3e0a8:	f7e9 b8cc 	b.w	27244 <z_impl_zephyr_read_stdin>

0003e0ac <_write>:
{
   3e0ac:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   3e0ae:	4611      	mov	r1, r2
   3e0b0:	f7e9 b8dc 	b.w	2726c <z_impl_zephyr_write_stdout>

0003e0b4 <_close>:
   3e0b4:	f04f 30ff 	mov.w	r0, #4294967295
   3e0b8:	4770      	bx	lr

0003e0ba <_lseek>:
}
   3e0ba:	2000      	movs	r0, #0
   3e0bc:	4770      	bx	lr

0003e0be <_isatty>:
}
   3e0be:	2802      	cmp	r0, #2
   3e0c0:	bfcc      	ite	gt
   3e0c2:	2000      	movgt	r0, #0
   3e0c4:	2001      	movle	r0, #1
   3e0c6:	4770      	bx	lr

0003e0c8 <_kill>:
}
   3e0c8:	2000      	movs	r0, #0
   3e0ca:	4770      	bx	lr

0003e0cc <_getpid>:
}
   3e0cc:	2000      	movs	r0, #0
   3e0ce:	4770      	bx	lr

0003e0d0 <_fstat>:
	st->st_mode = S_IFCHR;
   3e0d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   3e0d4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   3e0d6:	604b      	str	r3, [r1, #4]
}
   3e0d8:	4770      	bx	lr

0003e0da <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   3e0da:	f7f8 bfeb 	b.w	370b4 <z_impl_z_errno>

0003e0de <boot_request_upgrade>:
#endif

}

int boot_request_upgrade(int permanent)
{
   3e0de:	b508      	push	{r3, lr}
#ifdef FLASH_AREA_IMAGE_SECONDARY
	int rc;

	rc = boot_set_pending(permanent);
   3e0e0:	f7f4 fd56 	bl	32b90 <boot_set_pending>
	if (rc) {
   3e0e4:	2800      	cmp	r0, #0
		return -EFAULT;
	}
#endif /* FLASH_AREA_IMAGE_SECONDARY */
	return 0;
}
   3e0e6:	bf18      	it	ne
   3e0e8:	f06f 000d 	mvnne.w	r0, #13
   3e0ec:	bd08      	pop	{r3, pc}

0003e0ee <boot_is_img_confirmed>:

bool boot_is_img_confirmed(void)
{
   3e0ee:	b507      	push	{r0, r1, r2, lr}
	const struct flash_area *fa;
	int rc;
	uint8_t flag_val;

	rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY, &fa);
   3e0f0:	2003      	movs	r0, #3
   3e0f2:	a901      	add	r1, sp, #4
   3e0f4:	f7e6 feee 	bl	24ed4 <flash_area_open>
	if (rc) {
   3e0f8:	b118      	cbz	r0, 3e102 <boot_is_img_confirmed+0x14>
		return false;
   3e0fa:	2000      	movs	r0, #0
	if (rc) {
		return false;
	}

	return flag_val == BOOT_FLAG_SET;
}
   3e0fc:	b003      	add	sp, #12
   3e0fe:	f85d fb04 	ldr.w	pc, [sp], #4
	rc = boot_read_image_ok(fa, &flag_val);
   3e102:	9801      	ldr	r0, [sp, #4]
   3e104:	f10d 0103 	add.w	r1, sp, #3
   3e108:	f002 f86d 	bl	401e6 <boot_read_image_ok>
	if (rc) {
   3e10c:	2800      	cmp	r0, #0
   3e10e:	d1f4      	bne.n	3e0fa <boot_is_img_confirmed+0xc>
	return flag_val == BOOT_FLAG_SET;
   3e110:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e114:	1e43      	subs	r3, r0, #1
   3e116:	4258      	negs	r0, r3
   3e118:	4158      	adcs	r0, r3
   3e11a:	e7ef      	b.n	3e0fc <boot_is_img_confirmed+0xe>

0003e11c <boot_write_img_confirmed>:

int boot_write_img_confirmed(void)
{
   3e11c:	b508      	push	{r3, lr}
	int rc;

	rc = boot_set_confirmed();
   3e11e:	f002 f87a 	bl	40216 <boot_set_confirmed>
	if (rc) {
   3e122:	2800      	cmp	r0, #0
		return -EIO;
	}

	return 0;
}
   3e124:	bf18      	it	ne
   3e126:	f06f 0004 	mvnne.w	r0, #4
   3e12a:	bd08      	pop	{r3, pc}

0003e12c <net_init>:

	return status;
}

static int net_init(const struct device *unused)
{
   3e12c:	b508      	push	{r3, lr}
	net_if_init();
   3e12e:	f7e9 f973 	bl	27418 <net_if_init>
	net_if_post_init();
   3e132:	f7e9 f9a5 	bl	27480 <net_if_post_init>
	net_mgmt_event_init();

	init_rx_queues();

	return services_init();
}
   3e136:	2000      	movs	r0, #0
   3e138:	bd08      	pop	{r3, pc}

0003e13a <net_if_l2>:
	if (!iface || !iface->if_dev) {
   3e13a:	b110      	cbz	r0, 3e142 <net_if_l2+0x8>
   3e13c:	6800      	ldr	r0, [r0, #0]
   3e13e:	b100      	cbz	r0, 3e142 <net_if_l2+0x8>
	return iface->if_dev->l2;
   3e140:	6840      	ldr	r0, [r0, #4]
}
   3e142:	4770      	bx	lr

0003e144 <l2_flags_get>:
{
   3e144:	b510      	push	{r4, lr}
   3e146:	4603      	mov	r3, r0
	if (net_if_l2(iface) && net_if_l2(iface)->get_flags) {
   3e148:	f7ff fff7 	bl	3e13a <net_if_l2>
   3e14c:	b128      	cbz	r0, 3e15a <l2_flags_get+0x16>
   3e14e:	68c2      	ldr	r2, [r0, #12]
   3e150:	b11a      	cbz	r2, 3e15a <l2_flags_get+0x16>
}
   3e152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		flags = net_if_l2(iface)->get_flags(iface);
   3e156:	4618      	mov	r0, r3
   3e158:	4710      	bx	r2
}
   3e15a:	2000      	movs	r0, #0
   3e15c:	bd10      	pop	{r4, pc}

0003e15e <net_byte_to_hex>:
{
   3e15e:	b530      	push	{r4, r5, lr}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3e160:	090d      	lsrs	r5, r1, #4
		if (i == 0 && !pad && !val) {
   3e162:	b1bb      	cbz	r3, 3e194 <net_byte_to_hex+0x36>
		if (val < 10) {
   3e164:	2d09      	cmp	r5, #9
			*ptr++ = (char) (val - 10 + base);
   3e166:	b26b      	sxtb	r3, r5
   3e168:	bf86      	itte	hi
   3e16a:	f1a2 050a 	subhi.w	r5, r2, #10
   3e16e:	195b      	addhi	r3, r3, r5
			*ptr++ = (char) (val + '0');
   3e170:	3330      	addls	r3, #48	; 0x30
   3e172:	1c44      	adds	r4, r0, #1
   3e174:	7003      	strb	r3, [r0, #0]
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   3e176:	f001 030f 	and.w	r3, r1, #15
		if (val < 10) {
   3e17a:	4619      	mov	r1, r3
   3e17c:	2b09      	cmp	r3, #9
	*ptr = '\0';
   3e17e:	f04f 0300 	mov.w	r3, #0
			*ptr++ = (char) (val - 10 + base);
   3e182:	bf83      	ittte	hi
   3e184:	3a0a      	subhi	r2, #10
   3e186:	1889      	addhi	r1, r1, r2
   3e188:	b2c9      	uxtbhi	r1, r1
			*ptr++ = (char) (val + '0');
   3e18a:	3130      	addls	r1, #48	; 0x30
   3e18c:	7021      	strb	r1, [r4, #0]
	*ptr = '\0';
   3e18e:	7063      	strb	r3, [r4, #1]
   3e190:	1c60      	adds	r0, r4, #1
}
   3e192:	bd30      	pop	{r4, r5, pc}
		if (i == 0 && !pad && !val) {
   3e194:	2d00      	cmp	r5, #0
   3e196:	d1e5      	bne.n	3e164 <net_byte_to_hex+0x6>
   3e198:	4604      	mov	r4, r0
   3e19a:	e7ec      	b.n	3e176 <net_byte_to_hex+0x18>

0003e19c <unpack_uint16>:
 */
static int unpack_uint16(struct buf_ctx *buf, uint16_t *val)
{
	MQTT_TRC(">> cur:%p, end:%p", buf->cur, buf->end);

	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3e19c:	e9d0 2300 	ldrd	r2, r3, [r0]
   3e1a0:	1a9b      	subs	r3, r3, r2
   3e1a2:	2b01      	cmp	r3, #1
{
   3e1a4:	b510      	push	{r4, lr}
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3e1a6:	d90c      	bls.n	3e1c2 <unpack_uint16+0x26>
		return -EINVAL;
	}

	*val = *(buf->cur++) << 8; /* MSB */
   3e1a8:	4614      	mov	r4, r2
   3e1aa:	1c53      	adds	r3, r2, #1
   3e1ac:	6003      	str	r3, [r0, #0]
   3e1ae:	f814 3b02 	ldrb.w	r3, [r4], #2
   3e1b2:	021b      	lsls	r3, r3, #8
   3e1b4:	800b      	strh	r3, [r1, #0]
	*val |= *(buf->cur++); /* LSB */
   3e1b6:	6004      	str	r4, [r0, #0]

	MQTT_TRC("<< val:%04x", *val);

	return 0;
   3e1b8:	2000      	movs	r0, #0
	*val |= *(buf->cur++); /* LSB */
   3e1ba:	7852      	ldrb	r2, [r2, #1]
   3e1bc:	4313      	orrs	r3, r2
   3e1be:	800b      	strh	r3, [r1, #0]
}
   3e1c0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3e1c2:	f06f 0015 	mvn.w	r0, #21
   3e1c6:	e7fb      	b.n	3e1c0 <unpack_uint16+0x24>

0003e1c8 <fixed_header_decode>:
	return 0;
}

int fixed_header_decode(struct buf_ctx *buf, uint8_t *type_and_flags,
			uint32_t *length)
{
   3e1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e1ca:	e9d0 3400 	ldrd	r3, r4, [r0]
   3e1ce:	429c      	cmp	r4, r3
   3e1d0:	d01f      	beq.n	3e212 <fixed_header_decode+0x4a>
	*val = *(buf->cur++);
   3e1d2:	1c5c      	adds	r4, r3, #1
   3e1d4:	6004      	str	r4, [r0, #0]
   3e1d6:	781b      	ldrb	r3, [r3, #0]
   3e1d8:	700b      	strb	r3, [r1, #0]
	*length = 0U;
   3e1da:	2100      	movs	r1, #0
		if (buf->cur >= buf->end) {
   3e1dc:	6847      	ldr	r7, [r0, #4]
	*length = 0U;
   3e1de:	6011      	str	r1, [r2, #0]
		if (buf->cur >= buf->end) {
   3e1e0:	6804      	ldr	r4, [r0, #0]
   3e1e2:	42bc      	cmp	r4, r7
   3e1e4:	d218      	bcs.n	3e218 <fixed_header_decode+0x50>
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3e1e6:	4625      	mov	r5, r4
   3e1e8:	f815 3b01 	ldrb.w	r3, [r5], #1
   3e1ec:	6816      	ldr	r6, [r2, #0]
   3e1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
								<< shift;
   3e1f2:	408b      	lsls	r3, r1
		*length += ((uint32_t)*(buf->cur) & MQTT_LENGTH_VALUE_MASK)
   3e1f4:	4433      	add	r3, r6
   3e1f6:	6013      	str	r3, [r2, #0]
	} while ((*(buf->cur++) & MQTT_LENGTH_CONTINUATION_BIT) != 0U);
   3e1f8:	6005      	str	r5, [r0, #0]
   3e1fa:	f994 4000 	ldrsb.w	r4, [r4]
   3e1fe:	2c00      	cmp	r4, #0
   3e200:	db04      	blt.n	3e20c <fixed_header_decode+0x44>
	if (*length > MQTT_MAX_PAYLOAD_SIZE) {
   3e202:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   3e206:	d204      	bcs.n	3e212 <fixed_header_decode+0x4a>
	return 0;
   3e208:	2000      	movs	r0, #0
   3e20a:	e004      	b.n	3e216 <fixed_header_decode+0x4e>
		if (bytes >= MQTT_MAX_LENGTH_BYTES) {
   3e20c:	3107      	adds	r1, #7
   3e20e:	291c      	cmp	r1, #28
   3e210:	d1e6      	bne.n	3e1e0 <fixed_header_decode+0x18>
		return -EINVAL;
   3e212:	f06f 0015 	mvn.w	r0, #21
	if (err_code != 0) {
		return err_code;
	}

	return packet_length_decode(buf, length);
}
   3e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -EAGAIN;
   3e218:	f06f 000a 	mvn.w	r0, #10
   3e21c:	e7fb      	b.n	3e216 <fixed_header_decode+0x4e>

0003e21e <connect_ack_decode>:

int connect_ack_decode(const struct mqtt_client *client, struct buf_ctx *buf,
		       struct mqtt_connack_param *param)
{
   3e21e:	b530      	push	{r4, r5, lr}
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e220:	e9d1 3500 	ldrd	r3, r5, [r1]
   3e224:	429d      	cmp	r5, r3
   3e226:	d102      	bne.n	3e22e <connect_ack_decode+0x10>
		return -EINVAL;
   3e228:	f06f 0015 	mvn.w	r0, #21
	}

	param->return_code = (enum mqtt_conn_return_code)ret_code;

	return 0;
}
   3e22c:	bd30      	pop	{r4, r5, pc}
	*val = *(buf->cur++);
   3e22e:	1c5c      	adds	r4, r3, #1
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e230:	42a5      	cmp	r5, r4
	*val = *(buf->cur++);
   3e232:	600c      	str	r4, [r1, #0]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e234:	d0f8      	beq.n	3e228 <connect_ack_decode+0xa>
	*val = *(buf->cur++);
   3e236:	461d      	mov	r5, r3
   3e238:	f815 4b02 	ldrb.w	r4, [r5], #2
   3e23c:	600d      	str	r5, [r1, #0]
   3e23e:	7859      	ldrb	r1, [r3, #1]
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3e240:	f890 307a 	ldrb.w	r3, [r0, #122]	; 0x7a
	return 0;
   3e244:	2000      	movs	r0, #0
	if (client->protocol_version == MQTT_VERSION_3_1_1) {
   3e246:	2b04      	cmp	r3, #4
			flags & MQTT_CONNACK_FLAG_SESSION_PRESENT;
   3e248:	bf04      	itt	eq
   3e24a:	f004 0301 	andeq.w	r3, r4, #1
		param->session_present_flag =
   3e24e:	7013      	strbeq	r3, [r2, #0]
	param->return_code = (enum mqtt_conn_return_code)ret_code;
   3e250:	7051      	strb	r1, [r2, #1]
	return 0;
   3e252:	e7eb      	b.n	3e22c <connect_ack_decode+0xe>

0003e254 <publish_decode>:

int publish_decode(uint8_t flags, uint32_t var_length, struct buf_ctx *buf,
		   struct mqtt_publish_param *param)
{
   3e254:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3e258:	461c      	mov	r4, r3
   3e25a:	4617      	mov	r7, r2
	int err_code;
	uint32_t var_header_length;

	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3e25c:	7da2      	ldrb	r2, [r4, #22]
   3e25e:	0043      	lsls	r3, r0, #1
   3e260:	f022 0203 	bic.w	r2, r2, #3
   3e264:	f003 0302 	and.w	r3, r3, #2
   3e268:	4313      	orrs	r3, r2
	param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;
	param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);
   3e26a:	f3c0 0041 	ubfx	r0, r0, #1, #2
   3e26e:	7220      	strb	r0, [r4, #8]
{
   3e270:	4688      	mov	r8, r1
	err_code = unpack_uint16(buf, &utf8_strlen);
   3e272:	4638      	mov	r0, r7
	param->dup_flag = flags & MQTT_HEADER_DUP_MASK;
   3e274:	75a3      	strb	r3, [r4, #22]
	err_code = unpack_uint16(buf, &utf8_strlen);
   3e276:	f10d 0106 	add.w	r1, sp, #6
   3e27a:	f7ff ff8f 	bl	3e19c <unpack_uint16>
	if (err_code != 0) {
   3e27e:	4606      	mov	r6, r0
   3e280:	b9c0      	cbnz	r0, 3e2b4 <publish_decode+0x60>
	if ((buf->end - buf->cur) < utf8_strlen) {
   3e282:	683b      	ldr	r3, [r7, #0]
   3e284:	687a      	ldr	r2, [r7, #4]
   3e286:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   3e28a:	1ad2      	subs	r2, r2, r3
   3e28c:	42aa      	cmp	r2, r5
   3e28e:	da02      	bge.n	3e296 <publish_decode+0x42>

	if (var_length < var_header_length) {
		MQTT_ERR("Corrupted PUBLISH message, header length (%u) larger "
			 "than total length (%u)", var_header_length,
			 var_length);
		return -EINVAL;
   3e290:	f06f 0615 	mvn.w	r6, #21
   3e294:	e00e      	b.n	3e2b4 <publish_decode+0x60>
	str->size = utf8_strlen;
   3e296:	6065      	str	r5, [r4, #4]
	if (utf8_strlen) {
   3e298:	b185      	cbz	r5, 3e2bc <publish_decode+0x68>
		str->utf8 = buf->cur;
   3e29a:	6023      	str	r3, [r4, #0]
		buf->cur += utf8_strlen;
   3e29c:	442b      	add	r3, r5
   3e29e:	603b      	str	r3, [r7, #0]
	if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3e2a0:	7a23      	ldrb	r3, [r4, #8]
   3e2a2:	b96b      	cbnz	r3, 3e2c0 <publish_decode+0x6c>
	var_header_length = param->message.topic.topic.size + sizeof(uint16_t);
   3e2a4:	3502      	adds	r5, #2
	if (var_length < var_header_length) {
   3e2a6:	4545      	cmp	r5, r8
   3e2a8:	d8f2      	bhi.n	3e290 <publish_decode+0x3c>
	}

	param->message.payload.data = NULL;
   3e2aa:	2300      	movs	r3, #0
	param->message.payload.len = var_length - var_header_length;
   3e2ac:	eba8 0505 	sub.w	r5, r8, r5
	param->message.payload.data = NULL;
   3e2b0:	60e3      	str	r3, [r4, #12]
	param->message.payload.len = var_length - var_header_length;
   3e2b2:	6125      	str	r5, [r4, #16]

	return 0;
}
   3e2b4:	4630      	mov	r0, r6
   3e2b6:	b002      	add	sp, #8
   3e2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		str->utf8 = NULL;
   3e2bc:	6025      	str	r5, [r4, #0]
	if (err_code != 0) {
   3e2be:	e7ef      	b.n	3e2a0 <publish_decode+0x4c>
		err_code = unpack_uint16(buf, &param->message_id);
   3e2c0:	4638      	mov	r0, r7
   3e2c2:	f104 0114 	add.w	r1, r4, #20
   3e2c6:	f7ff ff69 	bl	3e19c <unpack_uint16>
		if (err_code != 0) {
   3e2ca:	b908      	cbnz	r0, 3e2d0 <publish_decode+0x7c>
		var_header_length += sizeof(uint16_t);
   3e2cc:	3504      	adds	r5, #4
   3e2ce:	e7ea      	b.n	3e2a6 <publish_decode+0x52>
   3e2d0:	4606      	mov	r6, r0
   3e2d2:	e7ef      	b.n	3e2b4 <publish_decode+0x60>

0003e2d4 <publish_ack_decode>:

int publish_ack_decode(struct buf_ctx *buf, struct mqtt_puback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e2d4:	f7ff bf62 	b.w	3e19c <unpack_uint16>

0003e2d8 <publish_receive_decode>:
}

int publish_receive_decode(struct buf_ctx *buf, struct mqtt_pubrec_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e2d8:	f7ff bf60 	b.w	3e19c <unpack_uint16>

0003e2dc <publish_release_decode>:
}

int publish_release_decode(struct buf_ctx *buf, struct mqtt_pubrel_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e2dc:	f7ff bf5e 	b.w	3e19c <unpack_uint16>

0003e2e0 <publish_complete_decode>:
}

int publish_complete_decode(struct buf_ctx *buf,
			    struct mqtt_pubcomp_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e2e0:	f7ff bf5c 	b.w	3e19c <unpack_uint16>

0003e2e4 <subscribe_ack_decode>:
}

int subscribe_ack_decode(struct buf_ctx *buf, struct mqtt_suback_param *param)
{
   3e2e4:	b538      	push	{r3, r4, r5, lr}
   3e2e6:	4605      	mov	r5, r0
   3e2e8:	460c      	mov	r4, r1
	int err_code;

	err_code = unpack_uint16(buf, &param->message_id);
   3e2ea:	f7ff ff57 	bl	3e19c <unpack_uint16>
	if (err_code != 0) {
   3e2ee:	b930      	cbnz	r0, 3e2fe <subscribe_ack_decode+0x1a>
		return err_code;
	}

	return unpack_data(buf->end - buf->cur, buf, &param->return_codes);
   3e2f0:	e9d5 2300 	ldrd	r2, r3, [r5]
   3e2f4:	1a99      	subs	r1, r3, r2
	str->len = length;
   3e2f6:	60a1      	str	r1, [r4, #8]
	if (length > 0) {
   3e2f8:	b111      	cbz	r1, 3e300 <subscribe_ack_decode+0x1c>
		str->data = buf->cur;
   3e2fa:	6062      	str	r2, [r4, #4]
		buf->cur += length;
   3e2fc:	602b      	str	r3, [r5, #0]
}
   3e2fe:	bd38      	pop	{r3, r4, r5, pc}
		str->data = NULL;
   3e300:	6060      	str	r0, [r4, #4]
   3e302:	e7fc      	b.n	3e2fe <subscribe_ack_decode+0x1a>

0003e304 <unsubscribe_ack_decode>:

int unsubscribe_ack_decode(struct buf_ctx *buf,
			   struct mqtt_unsuback_param *param)
{
	return unpack_uint16(buf, &param->message_id);
   3e304:	f7ff bf4a 	b.w	3e19c <unpack_uint16>

0003e308 <pack_uint16>:
	if ((buf->end - buf->cur) < sizeof(uint16_t)) {
   3e308:	e9d1 3200 	ldrd	r3, r2, [r1]
   3e30c:	1ad2      	subs	r2, r2, r3
   3e30e:	2a01      	cmp	r2, #1
   3e310:	d909      	bls.n	3e326 <pack_uint16+0x1e>
	*(buf->cur++) = (val >> 8) & 0xFF;
   3e312:	1c5a      	adds	r2, r3, #1
   3e314:	600a      	str	r2, [r1, #0]
   3e316:	0a02      	lsrs	r2, r0, #8
   3e318:	701a      	strb	r2, [r3, #0]
	*(buf->cur++) = val & 0xFF;
   3e31a:	680b      	ldr	r3, [r1, #0]
   3e31c:	1c5a      	adds	r2, r3, #1
   3e31e:	600a      	str	r2, [r1, #0]
   3e320:	7018      	strb	r0, [r3, #0]
	return 0;
   3e322:	2000      	movs	r0, #0
   3e324:	4770      	bx	lr
		return -ENOMEM;
   3e326:	f06f 000b 	mvn.w	r0, #11
}
   3e32a:	4770      	bx	lr

0003e32c <pack_utf8_str>:
{
   3e32c:	b538      	push	{r3, r4, r5, lr}
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e32e:	e9d1 2300 	ldrd	r2, r3, [r1]
{
   3e332:	4605      	mov	r5, r0
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e334:	6840      	ldr	r0, [r0, #4]
   3e336:	1a9b      	subs	r3, r3, r2
   3e338:	1c82      	adds	r2, r0, #2
   3e33a:	4293      	cmp	r3, r2
{
   3e33c:	460c      	mov	r4, r1
	if ((buf->end - buf->cur) < GET_UT8STR_BUFFER_SIZE(str)) {
   3e33e:	d30d      	bcc.n	3e35c <pack_utf8_str+0x30>
	(void)pack_uint16(str->size, buf);
   3e340:	b280      	uxth	r0, r0
   3e342:	f7ff ffe1 	bl	3e308 <pack_uint16>
   3e346:	e9d5 1200 	ldrd	r1, r2, [r5]
   3e34a:	6820      	ldr	r0, [r4, #0]
   3e34c:	f003 fca7 	bl	41c9e <memcpy>
	return 0;
   3e350:	2000      	movs	r0, #0
	buf->cur += str->size;
   3e352:	6823      	ldr	r3, [r4, #0]
   3e354:	686a      	ldr	r2, [r5, #4]
   3e356:	4413      	add	r3, r2
   3e358:	6023      	str	r3, [r4, #0]
}
   3e35a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOMEM;
   3e35c:	f06f 000b 	mvn.w	r0, #11
   3e360:	e7fb      	b.n	3e35a <pack_utf8_str+0x2e>

0003e362 <mqtt_encode_fixed_header>:
	uint32_t length = buf->cur - start;
   3e362:	6813      	ldr	r3, [r2, #0]
{
   3e364:	b570      	push	{r4, r5, r6, lr}
	uint32_t length = buf->cur - start;
   3e366:	1a5c      	subs	r4, r3, r1
	if (length > MQTT_MAX_PAYLOAD_SIZE) {
   3e368:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   3e36c:	d227      	bcs.n	3e3be <mqtt_encode_fixed_header+0x5c>
   3e36e:	4625      	mov	r5, r4
   3e370:	2600      	movs	r6, #0
	} while (length > 0);
   3e372:	09ed      	lsrs	r5, r5, #7
   3e374:	b2f3      	uxtb	r3, r6
   3e376:	f106 0601 	add.w	r6, r6, #1
   3e37a:	d1fa      	bne.n	3e372 <mqtt_encode_fixed_header+0x10>
	fixed_header_length += sizeof(uint8_t);
   3e37c:	3302      	adds	r3, #2
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e37e:	6856      	ldr	r6, [r2, #4]
	buf->cur = start - fixed_header_length;
   3e380:	b2db      	uxtb	r3, r3
   3e382:	425d      	negs	r5, r3
   3e384:	1acb      	subs	r3, r1, r3
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e386:	42b3      	cmp	r3, r6
	buf->cur = start - fixed_header_length;
   3e388:	6013      	str	r3, [r2, #0]
	*(buf->cur++) = val;
   3e38a:	bf1e      	ittt	ne
   3e38c:	3301      	addne	r3, #1
   3e38e:	6013      	strne	r3, [r2, #0]
   3e390:	5548      	strbne	r0, [r1, r5]
	return 0;
   3e392:	4620      	mov	r0, r4
			*(buf->cur) = length & MQTT_LENGTH_VALUE_MASK;
   3e394:	6813      	ldr	r3, [r2, #0]
   3e396:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   3e39a:	7019      	strb	r1, [r3, #0]
			if (length > 0) {
   3e39c:	09c0      	lsrs	r0, r0, #7
				*(buf->cur) |= MQTT_LENGTH_CONTINUATION_BIT;
   3e39e:	bf1f      	itttt	ne
   3e3a0:	6811      	ldrne	r1, [r2, #0]
   3e3a2:	780b      	ldrbne	r3, [r1, #0]
   3e3a4:	f063 037f 	ornne	r3, r3, #127	; 0x7f
   3e3a8:	700b      	strbne	r3, [r1, #0]
			buf->cur++;
   3e3aa:	6813      	ldr	r3, [r2, #0]
   3e3ac:	3301      	adds	r3, #1
   3e3ae:	6013      	str	r3, [r2, #0]
	} while (length > 0);
   3e3b0:	2800      	cmp	r0, #0
   3e3b2:	d1ef      	bne.n	3e394 <mqtt_encode_fixed_header+0x32>
	buf->cur = buf->cur - fixed_header_length;
   3e3b4:	441d      	add	r5, r3
	buf->end = buf->cur + length + fixed_header_length;
   3e3b6:	4423      	add	r3, r4
	buf->cur = buf->cur - fixed_header_length;
   3e3b8:	6015      	str	r5, [r2, #0]
	buf->end = buf->cur + length + fixed_header_length;
   3e3ba:	6053      	str	r3, [r2, #4]
}
   3e3bc:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   3e3be:	f06f 0079 	mvn.w	r0, #121	; 0x79
   3e3c2:	e7fb      	b.n	3e3bc <mqtt_encode_fixed_header+0x5a>

0003e3c4 <mqtt_message_id_only_enc>:
{
   3e3c4:	b570      	push	{r4, r5, r6, lr}
   3e3c6:	4606      	mov	r6, r0
   3e3c8:	4614      	mov	r4, r2
	if (message_id == 0U) {
   3e3ca:	4608      	mov	r0, r1
   3e3cc:	b169      	cbz	r1, 3e3ea <mqtt_message_id_only_enc+0x26>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e3ce:	6815      	ldr	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3e3d0:	4611      	mov	r1, r2
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e3d2:	3505      	adds	r5, #5
   3e3d4:	6015      	str	r5, [r2, #0]
	err_code = pack_uint16(message_id, buf);
   3e3d6:	f7ff ff97 	bl	3e308 <pack_uint16>
	if (err_code != 0) {
   3e3da:	b940      	cbnz	r0, 3e3ee <mqtt_message_id_only_enc+0x2a>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e3dc:	4622      	mov	r2, r4
   3e3de:	4629      	mov	r1, r5
   3e3e0:	4630      	mov	r0, r6
}
   3e3e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e3e6:	f7ff bfbc 	b.w	3e362 <mqtt_encode_fixed_header>
		return -EINVAL;
   3e3ea:	f06f 0015 	mvn.w	r0, #21
}
   3e3ee:	bd70      	pop	{r4, r5, r6, pc}

0003e3f0 <publish_encode>:
{
   3e3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e3f4:	7d87      	ldrb	r7, [r0, #22]
   3e3f6:	7a04      	ldrb	r4, [r0, #8]
   3e3f8:	f007 0801 	and.w	r8, r7, #1
{
   3e3fc:	4605      	mov	r5, r0
   3e3fe:	4689      	mov	r9, r1
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e400:	f3c7 0740 	ubfx	r7, r7, #1, #1
	if ((param->message.topic.qos) && (param->message_id == 0U)) {
   3e404:	b10c      	cbz	r4, 3e40a <publish_encode+0x1a>
   3e406:	8a83      	ldrh	r3, [r0, #20]
   3e408:	b383      	cbz	r3, 3e46c <publish_encode+0x7c>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e40a:	f8d9 6000 	ldr.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e40e:	4649      	mov	r1, r9
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e410:	3605      	adds	r6, #5
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e412:	4628      	mov	r0, r5
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e414:	f8c9 6000 	str.w	r6, [r9]
	err_code = pack_utf8_str(&param->message.topic.topic, buf);
   3e418:	f7ff ff88 	bl	3e32c <pack_utf8_str>
	if (err_code != 0) {
   3e41c:	b9b0      	cbnz	r0, 3e44c <publish_encode+0x5c>
	if (param->message.topic.qos) {
   3e41e:	7a2b      	ldrb	r3, [r5, #8]
   3e420:	b9b3      	cbnz	r3, 3e450 <publish_encode+0x60>
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e422:	0060      	lsls	r0, r4, #1
   3e424:	f000 0006 	and.w	r0, r0, #6
	buf->cur += param->message.payload.len;
   3e428:	692a      	ldr	r2, [r5, #16]
   3e42a:	f8d9 3000 	ldr.w	r3, [r9]
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e42e:	4338      	orrs	r0, r7
   3e430:	ea40 00c8 	orr.w	r0, r0, r8, lsl #3
	buf->cur += param->message.payload.len;
   3e434:	4413      	add	r3, r2
	const uint8_t message_type = MQTT_MESSAGES_OPTIONS(
   3e436:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3e43a:	464a      	mov	r2, r9
   3e43c:	4631      	mov	r1, r6
	buf->cur += param->message.payload.len;
   3e43e:	f8c9 3000 	str.w	r3, [r9]
	err_code = mqtt_encode_fixed_header(message_type, start, buf);
   3e442:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   3e446:	f7ff ff8c 	bl	3e362 <mqtt_encode_fixed_header>
	if (err_code != 0) {
   3e44a:	b140      	cbz	r0, 3e45e <publish_encode+0x6e>
}
   3e44c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_uint16(param->message_id, buf);
   3e450:	4649      	mov	r1, r9
   3e452:	8aa8      	ldrh	r0, [r5, #20]
   3e454:	f7ff ff58 	bl	3e308 <pack_uint16>
		if (err_code != 0) {
   3e458:	2800      	cmp	r0, #0
   3e45a:	d0e2      	beq.n	3e422 <publish_encode+0x32>
   3e45c:	e7f6      	b.n	3e44c <publish_encode+0x5c>
	buf->end -= param->message.payload.len;
   3e45e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   3e462:	692a      	ldr	r2, [r5, #16]
   3e464:	1a9b      	subs	r3, r3, r2
   3e466:	f8c9 3004 	str.w	r3, [r9, #4]
	return 0;
   3e46a:	e7ef      	b.n	3e44c <publish_encode+0x5c>
		return -EINVAL;
   3e46c:	f06f 0015 	mvn.w	r0, #21
   3e470:	e7ec      	b.n	3e44c <publish_encode+0x5c>

0003e472 <publish_ack_encode>:
{
   3e472:	460a      	mov	r2, r1
	return mqtt_message_id_only_enc(message_type, param->message_id, buf);
   3e474:	8801      	ldrh	r1, [r0, #0]
   3e476:	2040      	movs	r0, #64	; 0x40
   3e478:	f7ff bfa4 	b.w	3e3c4 <mqtt_message_id_only_enc>

0003e47c <subscribe_encode>:
{
   3e47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   3e480:	4606      	mov	r6, r0
	if (param->message_id == 0U) {
   3e482:	88c0      	ldrh	r0, [r0, #6]
{
   3e484:	460d      	mov	r5, r1
	if (param->message_id == 0U) {
   3e486:	b330      	cbz	r0, 3e4d6 <subscribe_encode+0x5a>
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e488:	680f      	ldr	r7, [r1, #0]
   3e48a:	3705      	adds	r7, #5
   3e48c:	600f      	str	r7, [r1, #0]
	err_code = pack_uint16(param->message_id, buf);
   3e48e:	f7ff ff3b 	bl	3e308 <pack_uint16>
	if (err_code != 0) {
   3e492:	4604      	mov	r4, r0
   3e494:	bb08      	cbnz	r0, 3e4da <subscribe_encode+0x5e>
   3e496:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3e49a:	88b3      	ldrh	r3, [r6, #4]
   3e49c:	42a3      	cmp	r3, r4
   3e49e:	dc06      	bgt.n	3e4ae <subscribe_encode+0x32>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e4a0:	462a      	mov	r2, r5
   3e4a2:	4639      	mov	r1, r7
}
   3e4a4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e4a8:	2082      	movs	r0, #130	; 0x82
   3e4aa:	f7ff bf5a 	b.w	3e362 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e4ae:	fb08 f904 	mul.w	r9, r8, r4
   3e4b2:	6830      	ldr	r0, [r6, #0]
   3e4b4:	4629      	mov	r1, r5
   3e4b6:	4448      	add	r0, r9
   3e4b8:	f7ff ff38 	bl	3e32c <pack_utf8_str>
		if (err_code != 0) {
   3e4bc:	b980      	cbnz	r0, 3e4e0 <subscribe_encode+0x64>
		err_code = pack_uint8(param->list[i].qos, buf);
   3e4be:	6833      	ldr	r3, [r6, #0]
   3e4c0:	444b      	add	r3, r9
   3e4c2:	7a1a      	ldrb	r2, [r3, #8]
	if ((buf->end - buf->cur) < sizeof(uint8_t)) {
   3e4c4:	e9d5 3100 	ldrd	r3, r1, [r5]
   3e4c8:	4299      	cmp	r1, r3
   3e4ca:	d00b      	beq.n	3e4e4 <subscribe_encode+0x68>
	*(buf->cur++) = val;
   3e4cc:	1c59      	adds	r1, r3, #1
   3e4ce:	6029      	str	r1, [r5, #0]
	for (i = 0; i < param->list_count; i++) {
   3e4d0:	3401      	adds	r4, #1
	*(buf->cur++) = val;
   3e4d2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < param->list_count; i++) {
   3e4d4:	e7e1      	b.n	3e49a <subscribe_encode+0x1e>
		return -EINVAL;
   3e4d6:	f06f 0415 	mvn.w	r4, #21
}
   3e4da:	4620      	mov	r0, r4
   3e4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e4e0:	4604      	mov	r4, r0
   3e4e2:	e7fa      	b.n	3e4da <subscribe_encode+0x5e>
		return -ENOMEM;
   3e4e4:	f06f 040b 	mvn.w	r4, #11
   3e4e8:	e7f7      	b.n	3e4da <subscribe_encode+0x5e>

0003e4ea <unsubscribe_encode>:
{
   3e4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e4ee:	680f      	ldr	r7, [r1, #0]
{
   3e4f0:	4606      	mov	r6, r0
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e4f2:	3705      	adds	r7, #5
	err_code = pack_uint16(param->message_id, buf);
   3e4f4:	88c0      	ldrh	r0, [r0, #6]
	buf->cur += MQTT_FIXED_HEADER_MAX_SIZE;
   3e4f6:	600f      	str	r7, [r1, #0]
{
   3e4f8:	460d      	mov	r5, r1
	err_code = pack_uint16(param->message_id, buf);
   3e4fa:	f7ff ff05 	bl	3e308 <pack_uint16>
	if (err_code != 0) {
   3e4fe:	4604      	mov	r4, r0
   3e500:	b9a8      	cbnz	r0, 3e52e <unsubscribe_encode+0x44>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e502:	f04f 080c 	mov.w	r8, #12
	for (i = 0; i < param->list_count; i++) {
   3e506:	88b3      	ldrh	r3, [r6, #4]
   3e508:	42a3      	cmp	r3, r4
   3e50a:	dc06      	bgt.n	3e51a <unsubscribe_encode+0x30>
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e50c:	462a      	mov	r2, r5
   3e50e:	4639      	mov	r1, r7
}
   3e510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return mqtt_encode_fixed_header(message_type, start, buf);
   3e514:	20a2      	movs	r0, #162	; 0xa2
   3e516:	f7ff bf24 	b.w	3e362 <mqtt_encode_fixed_header>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e51a:	6830      	ldr	r0, [r6, #0]
   3e51c:	4629      	mov	r1, r5
   3e51e:	fb08 0004 	mla	r0, r8, r4, r0
   3e522:	f7ff ff03 	bl	3e32c <pack_utf8_str>
		if (err_code != 0) {
   3e526:	b908      	cbnz	r0, 3e52c <unsubscribe_encode+0x42>
	for (i = 0; i < param->list_count; i++) {
   3e528:	3401      	adds	r4, #1
   3e52a:	e7ec      	b.n	3e506 <unsubscribe_encode+0x1c>
		err_code = pack_utf8_str(&param->list[i].topic, buf);
   3e52c:	4604      	mov	r4, r0
}
   3e52e:	4620      	mov	r0, r4
   3e530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0003e534 <mqtt_read_message_chunk>:
	return err_code;
}

static int mqtt_read_message_chunk(struct mqtt_client *client,
				   struct buf_ctx *buf, uint32_t length)
{
   3e534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3e536:	460d      	mov	r5, r1
	uint32_t remaining;
	int len;

	/* In case all data requested has already been buffered, return. */
	if (length <= (buf->end - buf->cur)) {
   3e538:	e9d1 3100 	ldrd	r3, r1, [r1]
   3e53c:	1acb      	subs	r3, r1, r3
   3e53e:	4293      	cmp	r3, r2
{
   3e540:	4606      	mov	r6, r0
	if (length <= (buf->end - buf->cur)) {
   3e542:	d301      	bcc.n	3e548 <mqtt_read_message_chunk+0x14>
		return 0;
   3e544:	2000      	movs	r0, #0
		MQTT_TRC("[CID %p]: Message partially received.", client);
		return -EAGAIN;
	}

	return 0;
}
   3e546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	remaining = length - (buf->end - buf->cur);
   3e548:	1ad4      	subs	r4, r2, r3
	if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||
   3e54a:	190f      	adds	r7, r1, r4
   3e54c:	e9d0 231a 	ldrd	r2, r3, [r0, #104]	; 0x68
   3e550:	4413      	add	r3, r2
   3e552:	429f      	cmp	r7, r3
   3e554:	d813      	bhi.n	3e57e <mqtt_read_message_chunk+0x4a>
   3e556:	4297      	cmp	r7, r2
   3e558:	d311      	bcc.n	3e57e <mqtt_read_message_chunk+0x4a>
	len = mqtt_transport_read(client, buf->end, remaining, false);
   3e55a:	2300      	movs	r3, #0
   3e55c:	4622      	mov	r2, r4
   3e55e:	f7e9 f96d 	bl	2783c <mqtt_transport_read>
	if (len < 0) {
   3e562:	2800      	cmp	r0, #0
   3e564:	dbef      	blt.n	3e546 <mqtt_read_message_chunk+0x12>
	if (len == 0) {
   3e566:	d00d      	beq.n	3e584 <mqtt_read_message_chunk+0x50>
	client->internal.rx_buf_datalen += len;
   3e568:	69f3      	ldr	r3, [r6, #28]
	if (len < remaining) {
   3e56a:	42a0      	cmp	r0, r4
	client->internal.rx_buf_datalen += len;
   3e56c:	4403      	add	r3, r0
   3e56e:	61f3      	str	r3, [r6, #28]
	buf->end += len;
   3e570:	686b      	ldr	r3, [r5, #4]
   3e572:	4403      	add	r3, r0
   3e574:	606b      	str	r3, [r5, #4]
	if (len < remaining) {
   3e576:	d2e5      	bcs.n	3e544 <mqtt_read_message_chunk+0x10>
		return -EAGAIN;
   3e578:	f06f 000a 	mvn.w	r0, #10
   3e57c:	e7e3      	b.n	3e546 <mqtt_read_message_chunk+0x12>
		return -ENOMEM;
   3e57e:	f06f 000b 	mvn.w	r0, #11
   3e582:	e7e0      	b.n	3e546 <mqtt_read_message_chunk+0x12>
		return -ENOTCONN;
   3e584:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   3e588:	e7dd      	b.n	3e546 <mqtt_read_message_chunk+0x12>

0003e58a <mqtt_handle_rx>:

	return err_code;
}

int mqtt_handle_rx(struct mqtt_client *client)
{
   3e58a:	b570      	push	{r4, r5, r6, lr}
	int err_code;
	uint8_t type_and_flags;
	uint32_t var_length;
	struct buf_ctx buf;

	buf.cur = client->rx_buf;
   3e58c:	6e83      	ldr	r3, [r0, #104]	; 0x68
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e58e:	69c2      	ldr	r2, [r0, #28]
{
   3e590:	b08c      	sub	sp, #48	; 0x30
	buf.cur = client->rx_buf;
   3e592:	9302      	str	r3, [sp, #8]
{
   3e594:	4605      	mov	r5, r0
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e596:	4413      	add	r3, r2
	uint8_t chunk_size = MQTT_FIXED_HEADER_MIN_SIZE;
   3e598:	2202      	movs	r2, #2
	buf.end = client->rx_buf + client->internal.rx_buf_datalen;
   3e59a:	9303      	str	r3, [sp, #12]
		err_code = mqtt_read_message_chunk(client, buf, chunk_size);
   3e59c:	4628      	mov	r0, r5
   3e59e:	a902      	add	r1, sp, #8
   3e5a0:	f7ff ffc8 	bl	3e534 <mqtt_read_message_chunk>
		if (err_code < 0) {
   3e5a4:	1e04      	subs	r4, r0, #0
   3e5a6:	db2d      	blt.n	3e604 <mqtt_handle_rx+0x7a>
		buf->cur = client->rx_buf;
   3e5a8:	6eab      	ldr	r3, [r5, #104]	; 0x68
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e5aa:	aa01      	add	r2, sp, #4
   3e5ac:	f10d 0103 	add.w	r1, sp, #3
   3e5b0:	a802      	add	r0, sp, #8
		buf->cur = client->rx_buf;
   3e5b2:	9302      	str	r3, [sp, #8]
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e5b4:	f7ff fe08 	bl	3e1c8 <fixed_header_decode>
	} while (err_code == -EAGAIN);
   3e5b8:	f110 0f0b 	cmn.w	r0, #11
		err_code = fixed_header_decode(buf, type_and_flags, var_length);
   3e5bc:	4604      	mov	r4, r0
		chunk_size = 1U;
   3e5be:	f04f 0201 	mov.w	r2, #1
	} while (err_code == -EAGAIN);
   3e5c2:	d0eb      	beq.n	3e59c <mqtt_handle_rx+0x12>

	err_code = mqtt_read_and_parse_fixed_header(client, &type_and_flags,
						    &var_length, &buf);
	if (err_code < 0) {
   3e5c4:	2800      	cmp	r0, #0
   3e5c6:	db21      	blt.n	3e60c <mqtt_handle_rx+0x82>
		return (err_code == -EAGAIN) ? 0 : err_code;
	}

	if ((type_and_flags & 0xF0) == MQTT_PKT_TYPE_PUBLISH) {
   3e5c8:	f89d 6003 	ldrb.w	r6, [sp, #3]
   3e5cc:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
   3e5d0:	2b30      	cmp	r3, #48	; 0x30
   3e5d2:	d11e      	bne.n	3e612 <mqtt_handle_rx+0x88>
	err_code = mqtt_read_message_chunk(client, buf, sizeof(uint16_t));
   3e5d4:	2202      	movs	r2, #2
   3e5d6:	4628      	mov	r0, r5
   3e5d8:	a902      	add	r1, sp, #8
   3e5da:	f7ff ffab 	bl	3e534 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3e5de:	1e04      	subs	r4, r0, #0
   3e5e0:	db10      	blt.n	3e604 <mqtt_handle_rx+0x7a>
	variable_header_length = *buf->cur << 8; /* MSB */
   3e5e2:	9b02      	ldr	r3, [sp, #8]
	if (qos > MQTT_QOS_0_AT_MOST_ONCE) {
   3e5e4:	f016 0f06 	tst.w	r6, #6
   3e5e8:	881a      	ldrh	r2, [r3, #0]
	err_code = mqtt_read_message_chunk(client, buf,
   3e5ea:	4628      	mov	r0, r5
   3e5ec:	ba52      	rev16	r2, r2
   3e5ee:	b292      	uxth	r2, r2
	variable_header_length += sizeof(uint16_t);
   3e5f0:	bf0c      	ite	eq
   3e5f2:	3202      	addeq	r2, #2
		variable_header_length += sizeof(uint16_t);
   3e5f4:	3204      	addne	r2, #4
	err_code = mqtt_read_message_chunk(client, buf,
   3e5f6:	a902      	add	r1, sp, #8
   3e5f8:	f7ff ff9c 	bl	3e534 <mqtt_read_message_chunk>
	if (err_code < 0) {
   3e5fc:	ea00 74e0 	and.w	r4, r0, r0, asr #31
							&buf);
	} else {
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
	}

	if (err_code < 0) {
   3e600:	2c00      	cmp	r4, #0
   3e602:	da0d      	bge.n	3e620 <mqtt_handle_rx+0x96>
		return (err_code == -EAGAIN) ? 0 : err_code;
   3e604:	f114 0f0b 	cmn.w	r4, #11
   3e608:	d100      	bne.n	3e60c <mqtt_handle_rx+0x82>
   3e60a:	2400      	movs	r4, #0
	}

	client->internal.rx_buf_datalen = 0U;

	return 0;
}
   3e60c:	4620      	mov	r0, r4
   3e60e:	b00c      	add	sp, #48	; 0x30
   3e610:	bd70      	pop	{r4, r5, r6, pc}
		err_code = mqtt_read_message_chunk(client, &buf, var_length);
   3e612:	4628      	mov	r0, r5
   3e614:	9a01      	ldr	r2, [sp, #4]
   3e616:	a902      	add	r1, sp, #8
   3e618:	f7ff ff8c 	bl	3e534 <mqtt_read_message_chunk>
   3e61c:	4604      	mov	r4, r0
   3e61e:	e7ef      	b.n	3e600 <mqtt_handle_rx+0x76>
	evt.result = 0;
   3e620:	2200      	movs	r2, #0
	err_code = mqtt_handle_packet(client, type_and_flags, var_length, &buf);
   3e622:	f89d 0003 	ldrb.w	r0, [sp, #3]
   3e626:	9901      	ldr	r1, [sp, #4]
	evt.result = 0;
   3e628:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	switch (type_and_flags & 0xF0) {
   3e62c:	2b60      	cmp	r3, #96	; 0x60
	evt.result = 0;
   3e62e:	920b      	str	r2, [sp, #44]	; 0x2c
	switch (type_and_flags & 0xF0) {
   3e630:	d066      	beq.n	3e700 <mqtt_handle_rx+0x176>
   3e632:	d813      	bhi.n	3e65c <mqtt_handle_rx+0xd2>
   3e634:	2b40      	cmp	r3, #64	; 0x40
   3e636:	d059      	beq.n	3e6ec <mqtt_handle_rx+0x162>
   3e638:	d806      	bhi.n	3e648 <mqtt_handle_rx+0xbe>
   3e63a:	2b20      	cmp	r3, #32
   3e63c:	d02f      	beq.n	3e69e <mqtt_handle_rx+0x114>
   3e63e:	2b30      	cmp	r3, #48	; 0x30
   3e640:	d048      	beq.n	3e6d4 <mqtt_handle_rx+0x14a>
	client->internal.rx_buf_datalen = 0U;
   3e642:	2400      	movs	r4, #0
   3e644:	61ec      	str	r4, [r5, #28]
	return 0;
   3e646:	e7e1      	b.n	3e60c <mqtt_handle_rx+0x82>
	switch (type_and_flags & 0xF0) {
   3e648:	2b50      	cmp	r3, #80	; 0x50
   3e64a:	d1fa      	bne.n	3e642 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_PUBREC;
   3e64c:	2304      	movs	r3, #4
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e64e:	a905      	add	r1, sp, #20
   3e650:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREC;
   3e652:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_receive_decode(buf, &evt.param.pubrec);
   3e656:	f7ff fe3f 	bl	3e2d8 <publish_receive_decode>
   3e65a:	e04e      	b.n	3e6fa <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3e65c:	2bb0      	cmp	r3, #176	; 0xb0
   3e65e:	d05f      	beq.n	3e720 <mqtt_handle_rx+0x196>
   3e660:	d80b      	bhi.n	3e67a <mqtt_handle_rx+0xf0>
   3e662:	2b70      	cmp	r3, #112	; 0x70
   3e664:	d054      	beq.n	3e710 <mqtt_handle_rx+0x186>
   3e666:	2b90      	cmp	r3, #144	; 0x90
   3e668:	d1eb      	bne.n	3e642 <mqtt_handle_rx+0xb8>
		evt.type = MQTT_EVT_SUBACK;
   3e66a:	2307      	movs	r3, #7
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e66c:	a905      	add	r1, sp, #20
   3e66e:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_SUBACK;
   3e670:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = subscribe_ack_decode(buf, &evt.param.suback);
   3e674:	f7ff fe36 	bl	3e2e4 <subscribe_ack_decode>
   3e678:	e03f      	b.n	3e6fa <mqtt_handle_rx+0x170>
	switch (type_and_flags & 0xF0) {
   3e67a:	2bd0      	cmp	r3, #208	; 0xd0
   3e67c:	d1e1      	bne.n	3e642 <mqtt_handle_rx+0xb8>
		if (client->unacked_ping <= 0) {
   3e67e:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	int err_code = 0;
   3e682:	2400      	movs	r4, #0
		if (client->unacked_ping <= 0) {
   3e684:	2b00      	cmp	r3, #0
			client->unacked_ping--;
   3e686:	bfc8      	it	gt
   3e688:	f103 32ff 	addgt.w	r2, r3, #4294967295
		evt.type = MQTT_EVT_PINGRESP;
   3e68c:	f04f 0309 	mov.w	r3, #9
			client->unacked_ping--;
   3e690:	bfc8      	it	gt
   3e692:	b252      	sxtbgt	r2, r2
   3e694:	f885 207b 	strb.w	r2, [r5, #123]	; 0x7b
		evt.type = MQTT_EVT_PINGRESP;
   3e698:	f88d 3010 	strb.w	r3, [sp, #16]
	if (notify_event == true) {
   3e69c:	e010      	b.n	3e6c0 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_CONNACK;
   3e69e:	f88d 2010 	strb.w	r2, [sp, #16]
		err_code = connect_ack_decode(client, buf, &evt.param.connack);
   3e6a2:	4628      	mov	r0, r5
   3e6a4:	aa05      	add	r2, sp, #20
   3e6a6:	a902      	add	r1, sp, #8
   3e6a8:	f7ff fdb9 	bl	3e21e <connect_ack_decode>
		if (err_code == 0) {
   3e6ac:	4604      	mov	r4, r0
   3e6ae:	bb28      	cbnz	r0, 3e6fc <mqtt_handle_rx+0x172>
			if (evt.param.connack.return_code ==
   3e6b0:	f89d 2015 	ldrb.w	r2, [sp, #21]
   3e6b4:	b95a      	cbnz	r2, 3e6ce <mqtt_handle_rx+0x144>
				MQTT_SET_STATE(client, MQTT_STATE_CONNECTED);
   3e6b6:	69ab      	ldr	r3, [r5, #24]
   3e6b8:	f043 0304 	orr.w	r3, r3, #4
   3e6bc:	61ab      	str	r3, [r5, #24]
			evt.result = evt.param.connack.return_code;
   3e6be:	920b      	str	r2, [sp, #44]	; 0x2c
		event_notify(client, &evt);
   3e6c0:	4628      	mov	r0, r5
   3e6c2:	a904      	add	r1, sp, #16
   3e6c4:	f000 f8bd 	bl	3e842 <event_notify>
	if (err_code < 0) {
   3e6c8:	2c00      	cmp	r4, #0
   3e6ca:	daba      	bge.n	3e642 <mqtt_handle_rx+0xb8>
   3e6cc:	e79e      	b.n	3e60c <mqtt_handle_rx+0x82>
				err_code = -ECONNREFUSED;
   3e6ce:	f06f 046e 	mvn.w	r4, #110	; 0x6e
   3e6d2:	e7f4      	b.n	3e6be <mqtt_handle_rx+0x134>
		evt.type = MQTT_EVT_PUBLISH;
   3e6d4:	2302      	movs	r3, #2
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e6d6:	aa02      	add	r2, sp, #8
		evt.type = MQTT_EVT_PUBLISH;
   3e6d8:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e6dc:	ab05      	add	r3, sp, #20
   3e6de:	f7ff fdb9 	bl	3e254 <publish_decode>
		client->internal.remaining_payload =
   3e6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
		err_code = publish_decode(type_and_flags, var_length, buf,
   3e6e4:	4604      	mov	r4, r0
		evt.result = err_code;
   3e6e6:	900b      	str	r0, [sp, #44]	; 0x2c
		client->internal.remaining_payload =
   3e6e8:	622b      	str	r3, [r5, #32]
	if (notify_event == true) {
   3e6ea:	e7e9      	b.n	3e6c0 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBACK;
   3e6ec:	2303      	movs	r3, #3
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e6ee:	a905      	add	r1, sp, #20
   3e6f0:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBACK;
   3e6f2:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_ack_decode(buf, &evt.param.puback);
   3e6f6:	f7ff fded 	bl	3e2d4 <publish_ack_decode>
   3e6fa:	4604      	mov	r4, r0
		evt.result = err_code;
   3e6fc:	940b      	str	r4, [sp, #44]	; 0x2c
	if (notify_event == true) {
   3e6fe:	e7df      	b.n	3e6c0 <mqtt_handle_rx+0x136>
		evt.type = MQTT_EVT_PUBREL;
   3e700:	2305      	movs	r3, #5
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e702:	a905      	add	r1, sp, #20
   3e704:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBREL;
   3e706:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_release_decode(buf, &evt.param.pubrel);
   3e70a:	f7ff fde7 	bl	3e2dc <publish_release_decode>
   3e70e:	e7f4      	b.n	3e6fa <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_PUBCOMP;
   3e710:	2306      	movs	r3, #6
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e712:	a905      	add	r1, sp, #20
   3e714:	a802      	add	r0, sp, #8
		evt.type = MQTT_EVT_PUBCOMP;
   3e716:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = publish_complete_decode(buf, &evt.param.pubcomp);
   3e71a:	f7ff fde1 	bl	3e2e0 <publish_complete_decode>
   3e71e:	e7ec      	b.n	3e6fa <mqtt_handle_rx+0x170>
		evt.type = MQTT_EVT_UNSUBACK;
   3e720:	2308      	movs	r3, #8
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e722:	a905      	add	r1, sp, #20
   3e724:	eb0d 0003 	add.w	r0, sp, r3
		evt.type = MQTT_EVT_UNSUBACK;
   3e728:	f88d 3010 	strb.w	r3, [sp, #16]
		err_code = unsubscribe_ack_decode(buf, &evt.param.unsuback);
   3e72c:	f7ff fdea 	bl	3e304 <unsubscribe_ack_decode>
   3e730:	e7e3      	b.n	3e6fa <mqtt_handle_rx+0x170>

0003e732 <mqtt_client_tcp_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tcp_connect(struct mqtt_client *client)
{
   3e732:	b538      	push	{r3, r4, r5, lr}
	const struct sockaddr *broker = client->broker;
   3e734:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   3e736:	4604      	mov	r4, r0
	int ret;

	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3e738:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3e73a:	2206      	movs	r2, #6
   3e73c:	2101      	movs	r1, #1
   3e73e:	f7e6 f9d9 	bl	24af4 <z_impl_zsock_socket>
						  IPPROTO_TCP);
	if (client->transport.tcp.sock < 0) {
   3e742:	2800      	cmp	r0, #0
	client->transport.tcp.sock = zsock_socket(broker->sa_family, SOCK_STREAM,
   3e744:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tcp.sock < 0) {
   3e746:	da04      	bge.n	3e752 <mqtt_client_tcp_connect+0x20>

	ret = zsock_connect(client->transport.tcp.sock, client->broker,
			    peer_addr_size);
	if (ret < 0) {
		(void) zsock_close(client->transport.tcp.sock);
		return -errno;
   3e748:	f7ff fcc7 	bl	3e0da <__errno>
   3e74c:	6800      	ldr	r0, [r0, #0]
   3e74e:	4240      	negs	r0, r0
	}

	MQTT_TRC("Connect completed");
	return 0;
}
   3e750:	bd38      	pop	{r3, r4, r5, pc}
	if (broker->sa_family == AF_INET) {
   3e752:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tcp.sock, client->broker,
   3e754:	6d21      	ldr	r1, [r4, #80]	; 0x50
	if (broker->sa_family == AF_INET) {
   3e756:	2b01      	cmp	r3, #1
		peer_addr_size = sizeof(struct sockaddr_in);
   3e758:	bf14      	ite	ne
   3e75a:	2218      	movne	r2, #24
   3e75c:	2208      	moveq	r2, #8
	return z_impl_zsock_connect(sock, addr, addrlen);
   3e75e:	f7ff f951 	bl	3da04 <z_impl_zsock_connect>
	if (ret < 0) {
   3e762:	2800      	cmp	r0, #0
   3e764:	da03      	bge.n	3e76e <mqtt_client_tcp_connect+0x3c>
		(void) zsock_close(client->transport.tcp.sock);
   3e766:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e768:	f7ff f935 	bl	3d9d6 <z_impl_zsock_close>
   3e76c:	e7ec      	b.n	3e748 <mqtt_client_tcp_connect+0x16>
	return 0;
   3e76e:	2000      	movs	r0, #0
   3e770:	e7ee      	b.n	3e750 <mqtt_client_tcp_connect+0x1e>

0003e772 <mqtt_client_tcp_write>:

int mqtt_client_tcp_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3e772:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3e776:	2400      	movs	r4, #0
{
   3e778:	4606      	mov	r6, r0
   3e77a:	460f      	mov	r7, r1
   3e77c:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3e77e:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3e780:	42ac      	cmp	r4, r5
   3e782:	d301      	bcc.n	3e788 <mqtt_client_tcp_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3e784:	2000      	movs	r0, #0
   3e786:	e00d      	b.n	3e7a4 <mqtt_client_tcp_write+0x32>
		ret = zsock_send(client->transport.tcp.sock, data + offset,
   3e788:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3e78a:	2300      	movs	r3, #0
   3e78c:	e9cd 8800 	strd	r8, r8, [sp]
   3e790:	1b2a      	subs	r2, r5, r4
   3e792:	1939      	adds	r1, r7, r4
   3e794:	f7ff f94c 	bl	3da30 <z_impl_zsock_sendto>
		if (ret < 0) {
   3e798:	1e03      	subs	r3, r0, #0
   3e79a:	da06      	bge.n	3e7aa <mqtt_client_tcp_write+0x38>
			return -errno;
   3e79c:	f7ff fc9d 	bl	3e0da <__errno>
   3e7a0:	6800      	ldr	r0, [r0, #0]
   3e7a2:	4240      	negs	r0, r0
}
   3e7a4:	b002      	add	sp, #8
   3e7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3e7aa:	441c      	add	r4, r3
   3e7ac:	e7e8      	b.n	3e780 <mqtt_client_tcp_write+0xe>

0003e7ae <mqtt_client_tcp_write_msg>:

int mqtt_client_tcp_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)

{
   3e7ae:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tcp.sock, message, 0);
   3e7b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3e7b2:	2200      	movs	r2, #0
   3e7b4:	f7ff f959 	bl	3da6a <z_impl_zsock_sendmsg>
	if (ret < 0) {
   3e7b8:	2800      	cmp	r0, #0
   3e7ba:	da04      	bge.n	3e7c6 <mqtt_client_tcp_write_msg+0x18>
		return -errno;
   3e7bc:	f7ff fc8d 	bl	3e0da <__errno>
   3e7c0:	6800      	ldr	r0, [r0, #0]
   3e7c2:	4240      	negs	r0, r0
	}

	return 0;
}
   3e7c4:	bd08      	pop	{r3, pc}
	return 0;
   3e7c6:	2000      	movs	r0, #0
   3e7c8:	e7fc      	b.n	3e7c4 <mqtt_client_tcp_write_msg+0x16>

0003e7ca <mqtt_client_tcp_read>:

int mqtt_client_tcp_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3e7ca:	b513      	push	{r0, r1, r4, lr}
   3e7cc:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3e7ce:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   3e7d0:	bf14      	ite	ne
   3e7d2:	4623      	movne	r3, r4
   3e7d4:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tcp.sock, data, buflen, flags);
   3e7d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3e7d8:	e9cd 4400 	strd	r4, r4, [sp]
   3e7dc:	f7ff f95b 	bl	3da96 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3e7e0:	2800      	cmp	r0, #0
   3e7e2:	da03      	bge.n	3e7ec <mqtt_client_tcp_read+0x22>
		return -errno;
   3e7e4:	f7ff fc79 	bl	3e0da <__errno>
   3e7e8:	6800      	ldr	r0, [r0, #0]
   3e7ea:	4240      	negs	r0, r0
	}

	return ret;
}
   3e7ec:	b002      	add	sp, #8
   3e7ee:	bd10      	pop	{r4, pc}

0003e7f0 <mqtt_client_tcp_disconnect>:

int mqtt_client_tcp_disconnect(struct mqtt_client *client)
{
   3e7f0:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tcp.sock);

	ret = zsock_close(client->transport.tcp.sock);
   3e7f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3e7f4:	f7ff f8ef 	bl	3d9d6 <z_impl_zsock_close>
	if (ret < 0) {
   3e7f8:	2800      	cmp	r0, #0
   3e7fa:	da04      	bge.n	3e806 <mqtt_client_tcp_disconnect+0x16>
		return -errno;
   3e7fc:	f7ff fc6d 	bl	3e0da <__errno>
   3e800:	6800      	ldr	r0, [r0, #0]
   3e802:	4240      	negs	r0, r0
	}

	return 0;
}
   3e804:	bd08      	pop	{r3, pc}
	return 0;
   3e806:	2000      	movs	r0, #0
   3e808:	e7fc      	b.n	3e804 <mqtt_client_tcp_disconnect+0x14>

0003e80a <k_uptime_get>:
{
   3e80a:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3e80c:	f003 f964 	bl	41ad8 <z_impl_k_uptime_ticks>
   3e810:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3e814:	fba0 2304 	umull	r2, r3, r0, r4
   3e818:	fb04 3301 	mla	r3, r4, r1, r3
   3e81c:	0bd0      	lsrs	r0, r2, #15
}
   3e81e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3e822:	0bd9      	lsrs	r1, r3, #15
   3e824:	bd10      	pop	{r4, pc}

0003e826 <tx_buf_init>:
	client->internal.remaining_payload = 0U;
}

/** @brief Initialize tx buffer. */
static void tx_buf_init(struct mqtt_client *client, struct buf_ctx *buf)
{
   3e826:	b538      	push	{r3, r4, r5, lr}
   3e828:	4604      	mov	r4, r0
   3e82a:	460d      	mov	r5, r1
__ssp_bos_icheck3(memset, void *, int)
   3e82c:	6f42      	ldr	r2, [r0, #116]	; 0x74
   3e82e:	2100      	movs	r1, #0
   3e830:	6f00      	ldr	r0, [r0, #112]	; 0x70
   3e832:	f003 fa54 	bl	41cde <memset>
	memset(client->tx_buf, 0, client->tx_buf_size);
	buf->cur = client->tx_buf;
   3e836:	6f23      	ldr	r3, [r4, #112]	; 0x70
	buf->end = client->tx_buf + client->tx_buf_size;
   3e838:	6f62      	ldr	r2, [r4, #116]	; 0x74
	buf->cur = client->tx_buf;
   3e83a:	602b      	str	r3, [r5, #0]
	buf->end = client->tx_buf + client->tx_buf_size;
   3e83c:	4413      	add	r3, r2
   3e83e:	606b      	str	r3, [r5, #4]
}
   3e840:	bd38      	pop	{r3, r4, r5, pc}

0003e842 <event_notify>:

void event_notify(struct mqtt_client *client, const struct mqtt_evt *evt)
{
   3e842:	b513      	push	{r0, r1, r4, lr}
	if (client->evt_cb != NULL) {
   3e844:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
   3e846:	4604      	mov	r4, r0
   3e848:	9101      	str	r1, [sp, #4]
	if (client->evt_cb != NULL) {
   3e84a:	b15b      	cbz	r3, 3e864 <event_notify+0x22>
		mqtt_mutex_unlock(client);
   3e84c:	f7e9 f80e 	bl	2786c <mqtt_mutex_unlock>

		client->evt_cb(client, evt);
   3e850:	4620      	mov	r0, r4
   3e852:	6e63      	ldr	r3, [r4, #100]	; 0x64
   3e854:	9901      	ldr	r1, [sp, #4]
   3e856:	4798      	blx	r3

		mqtt_mutex_lock(client);
   3e858:	4620      	mov	r0, r4
	}
}
   3e85a:	b002      	add	sp, #8
   3e85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mqtt_mutex_lock(client);
   3e860:	f7e9 b830 	b.w	278c4 <mqtt_mutex_lock>
}
   3e864:	b002      	add	sp, #8
   3e866:	bd10      	pop	{r4, pc}

0003e868 <client_disconnect.constprop.0>:

static void client_disconnect(struct mqtt_client *client, int result,
   3e868:	b530      	push	{r4, r5, lr}
   3e86a:	b089      	sub	sp, #36	; 0x24
   3e86c:	4604      	mov	r4, r0
   3e86e:	460d      	mov	r5, r1
			      bool notify)
{
	int err_code;

	err_code = mqtt_transport_disconnect(client);
   3e870:	f7e8 fff2 	bl	27858 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e874:	2100      	movs	r1, #0

	/* Reset internal state. */
	client_reset(client);

	if (notify) {
		struct mqtt_evt evt = {
   3e876:	221c      	movs	r2, #28
	client->internal.last_activity = 0U;
   3e878:	e9c4 1105 	strd	r1, r1, [r4, #20]
	client->internal.remaining_payload = 0U;
   3e87c:	e9c4 1107 	strd	r1, r1, [r4, #28]
		struct mqtt_evt evt = {
   3e880:	4668      	mov	r0, sp
   3e882:	f003 fa2c 	bl	41cde <memset>
   3e886:	2301      	movs	r3, #1
			.type = MQTT_EVT_DISCONNECT,
			.result = result,
		};

		/* Notify application. */
		event_notify(client, &evt);
   3e888:	4669      	mov	r1, sp
   3e88a:	4620      	mov	r0, r4
		struct mqtt_evt evt = {
   3e88c:	f88d 3000 	strb.w	r3, [sp]
   3e890:	9507      	str	r5, [sp, #28]
		event_notify(client, &evt);
   3e892:	f7ff ffd6 	bl	3e842 <event_notify>
	}
}
   3e896:	b009      	add	sp, #36	; 0x24
   3e898:	bd30      	pop	{r4, r5, pc}

0003e89a <read_publish_payload>:
	return err_code;
}

static int read_publish_payload(struct mqtt_client *client, void *buffer,
				size_t length, bool shall_block)
{
   3e89a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3e89c:	4617      	mov	r7, r2
   3e89e:	461e      	mov	r6, r3
	int ret;

	NULL_PARAM_CHECK(client);
   3e8a0:	4605      	mov	r5, r0
{
   3e8a2:	9101      	str	r1, [sp, #4]
	NULL_PARAM_CHECK(client);
   3e8a4:	b320      	cbz	r0, 3e8f0 <read_publish_payload+0x56>

	mqtt_mutex_lock(client);
   3e8a6:	f7e9 f80d 	bl	278c4 <mqtt_mutex_lock>

	if (client->internal.remaining_payload == 0U) {
   3e8aa:	6a2c      	ldr	r4, [r5, #32]
   3e8ac:	b1b4      	cbz	r4, 3e8dc <read_publish_payload+0x42>

	if (client->internal.remaining_payload < length) {
		length = client->internal.remaining_payload;
	}

	ret = mqtt_transport_read(client, buffer, length, shall_block);
   3e8ae:	42bc      	cmp	r4, r7
   3e8b0:	4622      	mov	r2, r4
   3e8b2:	4633      	mov	r3, r6
   3e8b4:	bf28      	it	cs
   3e8b6:	463a      	movcs	r2, r7
   3e8b8:	4628      	mov	r0, r5
   3e8ba:	9901      	ldr	r1, [sp, #4]
   3e8bc:	f7e8 ffbe 	bl	2783c <mqtt_transport_read>
   3e8c0:	4604      	mov	r4, r0
	if (!shall_block && ret == -EAGAIN) {
   3e8c2:	b916      	cbnz	r6, 3e8ca <read_publish_payload+0x30>
   3e8c4:	f110 0f0b 	cmn.w	r0, #11
   3e8c8:	d008      	beq.n	3e8dc <read_publish_payload+0x42>
		goto exit;
	}

	if (ret <= 0) {
   3e8ca:	2c00      	cmp	r4, #0
   3e8cc:	dc0c      	bgt.n	3e8e8 <read_publish_payload+0x4e>
		if (ret == 0) {
			ret = -ENOTCONN;
   3e8ce:	bf08      	it	eq
   3e8d0:	f06f 047f 	mvneq.w	r4, #127	; 0x7f
		}

		client_disconnect(client, ret, true);
   3e8d4:	4628      	mov	r0, r5
   3e8d6:	4621      	mov	r1, r4
   3e8d8:	f7ff ffc6 	bl	3e868 <client_disconnect.constprop.0>
	}

	client->internal.remaining_payload -= ret;

exit:
	mqtt_mutex_unlock(client);
   3e8dc:	4628      	mov	r0, r5
   3e8de:	f7e8 ffc5 	bl	2786c <mqtt_mutex_unlock>

	return ret;
}
   3e8e2:	4620      	mov	r0, r4
   3e8e4:	b003      	add	sp, #12
   3e8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	client->internal.remaining_payload -= ret;
   3e8e8:	6a2b      	ldr	r3, [r5, #32]
   3e8ea:	1b1b      	subs	r3, r3, r4
   3e8ec:	622b      	str	r3, [r5, #32]
   3e8ee:	e7f5      	b.n	3e8dc <read_publish_payload+0x42>
	NULL_PARAM_CHECK(client);
   3e8f0:	f06f 0415 	mvn.w	r4, #21
   3e8f4:	e7f5      	b.n	3e8e2 <read_publish_payload+0x48>

0003e8f6 <client_write>:
{
   3e8f6:	b538      	push	{r3, r4, r5, lr}
   3e8f8:	4605      	mov	r5, r0
	err_code = mqtt_transport_write(client, data, datalen);
   3e8fa:	f7e8 ff85 	bl	27808 <mqtt_transport_write>
	if (err_code < 0) {
   3e8fe:	1e04      	subs	r4, r0, #0
   3e900:	da05      	bge.n	3e90e <client_write+0x18>
		client_disconnect(client, err_code, true);
   3e902:	4621      	mov	r1, r4
   3e904:	4628      	mov	r0, r5
   3e906:	f7ff ffaf 	bl	3e868 <client_disconnect.constprop.0>
}
   3e90a:	4620      	mov	r0, r4
   3e90c:	bd38      	pop	{r3, r4, r5, pc}
	return (uint32_t)k_uptime_get();
   3e90e:	f7ff ff7c 	bl	3e80a <k_uptime_get>
	return 0;
   3e912:	2400      	movs	r4, #0
   3e914:	6168      	str	r0, [r5, #20]
   3e916:	e7f8      	b.n	3e90a <client_write+0x14>

0003e918 <mqtt_client_init>:
{
   3e918:	b510      	push	{r4, lr}
	NULL_PARAM_CHECK_VOID(client);
   3e91a:	4604      	mov	r4, r0
   3e91c:	b1a0      	cbz	r0, 3e948 <mqtt_client_init+0x30>
   3e91e:	2280      	movs	r2, #128	; 0x80
   3e920:	2100      	movs	r1, #0
   3e922:	f003 f9dc 	bl	41cde <memset>
	MQTT_STATE_INIT(client);
   3e926:	2300      	movs	r3, #0
   3e928:	61a3      	str	r3, [r4, #24]
	return z_impl_k_mutex_init(mutex);
   3e92a:	4620      	mov	r0, r4
   3e92c:	f002 ffe5 	bl	418fa <z_impl_k_mutex_init>
	client->protocol_version = MQTT_VERSION_3_1_1;
   3e930:	2304      	movs	r3, #4
   3e932:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	client->clean_session = MQTT_CLEAN_SESSION;
   3e936:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   3e93a:	f043 0302 	orr.w	r3, r3, #2
   3e93e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
	client->keepalive = MQTT_KEEPALIVE;
   3e942:	2378      	movs	r3, #120	; 0x78
   3e944:	f8a4 3078 	strh.w	r3, [r4, #120]	; 0x78
}
   3e948:	bd10      	pop	{r4, pc}

0003e94a <mqtt_connect>:
{
   3e94a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3e94c:	4605      	mov	r5, r0
   3e94e:	2800      	cmp	r0, #0
   3e950:	d03b      	beq.n	3e9ca <mqtt_connect+0x80>
	NULL_PARAM_CHECK(client->client_id.utf8);
   3e952:	6c83      	ldr	r3, [r0, #72]	; 0x48
   3e954:	2b00      	cmp	r3, #0
   3e956:	d038      	beq.n	3e9ca <mqtt_connect+0x80>
	mqtt_mutex_lock(client);
   3e958:	f7e8 ffb4 	bl	278c4 <mqtt_mutex_lock>
	if ((client->tx_buf == NULL) || (client->rx_buf == NULL)) {
   3e95c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
   3e95e:	b38b      	cbz	r3, 3e9c4 <mqtt_connect+0x7a>
   3e960:	6eab      	ldr	r3, [r5, #104]	; 0x68
   3e962:	b37b      	cbz	r3, 3e9c4 <mqtt_connect+0x7a>
	err_code = mqtt_transport_connect(client);
   3e964:	4628      	mov	r0, r5
   3e966:	f7e8 ff45 	bl	277f4 <mqtt_transport_connect>
	if (err_code < 0) {
   3e96a:	1e04      	subs	r4, r0, #0
   3e96c:	db24      	blt.n	3e9b8 <mqtt_connect+0x6e>
	tx_buf_init(client, &packet);
   3e96e:	4669      	mov	r1, sp
   3e970:	4628      	mov	r0, r5
   3e972:	f7ff ff58 	bl	3e826 <tx_buf_init>
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e976:	69ab      	ldr	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e978:	4669      	mov	r1, sp
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e97a:	f043 0302 	orr.w	r3, r3, #2
	err_code = connect_request_encode(client, &packet);
   3e97e:	4628      	mov	r0, r5
	MQTT_SET_STATE(client, MQTT_STATE_TCP_CONNECTED);
   3e980:	61ab      	str	r3, [r5, #24]
	err_code = connect_request_encode(client, &packet);
   3e982:	f7e8 fe93 	bl	276ac <connect_request_encode>
	if (err_code < 0) {
   3e986:	1e04      	subs	r4, r0, #0
   3e988:	db13      	blt.n	3e9b2 <mqtt_connect+0x68>
	err_code = mqtt_transport_write(client, packet.cur,
   3e98a:	e9dd 1200 	ldrd	r1, r2, [sp]
   3e98e:	4628      	mov	r0, r5
   3e990:	1a52      	subs	r2, r2, r1
   3e992:	f7e8 ff39 	bl	27808 <mqtt_transport_write>
	if (err_code < 0) {
   3e996:	1e04      	subs	r4, r0, #0
   3e998:	db0b      	blt.n	3e9b2 <mqtt_connect+0x68>
   3e99a:	f7ff ff36 	bl	3e80a <k_uptime_get>
	client->unacked_ping = 0;
   3e99e:	2400      	movs	r4, #0
   3e9a0:	6168      	str	r0, [r5, #20]
   3e9a2:	f885 407b 	strb.w	r4, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   3e9a6:	4628      	mov	r0, r5
   3e9a8:	f7e8 ff60 	bl	2786c <mqtt_mutex_unlock>
}
   3e9ac:	4620      	mov	r0, r4
   3e9ae:	b003      	add	sp, #12
   3e9b0:	bd30      	pop	{r4, r5, pc}
	err_code = mqtt_transport_disconnect(client);
   3e9b2:	4628      	mov	r0, r5
   3e9b4:	f7e8 ff50 	bl	27858 <mqtt_transport_disconnect>
	MQTT_STATE_INIT(client);
   3e9b8:	2300      	movs	r3, #0
	client->internal.last_activity = 0U;
   3e9ba:	e9c5 3305 	strd	r3, r3, [r5, #20]
	client->internal.remaining_payload = 0U;
   3e9be:	e9c5 3307 	strd	r3, r3, [r5, #28]
}
   3e9c2:	e7f0      	b.n	3e9a6 <mqtt_connect+0x5c>
		err_code = -ENOMEM;
   3e9c4:	f06f 040b 	mvn.w	r4, #11
   3e9c8:	e7f6      	b.n	3e9b8 <mqtt_connect+0x6e>
	NULL_PARAM_CHECK(client);
   3e9ca:	f06f 0415 	mvn.w	r4, #21
   3e9ce:	e7ed      	b.n	3e9ac <mqtt_connect+0x62>

0003e9d0 <mqtt_publish>:
{
   3e9d0:	b570      	push	{r4, r5, r6, lr}
   3e9d2:	460e      	mov	r6, r1
	NULL_PARAM_CHECK(client);
   3e9d4:	4605      	mov	r5, r0
{
   3e9d6:	b08e      	sub	sp, #56	; 0x38
	NULL_PARAM_CHECK(client);
   3e9d8:	2800      	cmp	r0, #0
   3e9da:	d03b      	beq.n	3ea54 <mqtt_publish+0x84>
	NULL_PARAM_CHECK(param);
   3e9dc:	2900      	cmp	r1, #0
   3e9de:	d039      	beq.n	3ea54 <mqtt_publish+0x84>
	mqtt_mutex_lock(client);
   3e9e0:	f7e8 ff70 	bl	278c4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3e9e4:	4628      	mov	r0, r5
   3e9e6:	a901      	add	r1, sp, #4
   3e9e8:	f7ff ff1d 	bl	3e826 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3e9ec:	69ab      	ldr	r3, [r5, #24]
   3e9ee:	075b      	lsls	r3, r3, #29
   3e9f0:	d52d      	bpl.n	3ea4e <mqtt_publish+0x7e>
	err_code = publish_encode(param, &packet);
   3e9f2:	4630      	mov	r0, r6
   3e9f4:	a901      	add	r1, sp, #4
   3e9f6:	f7ff fcfb 	bl	3e3f0 <publish_encode>
	if (err_code < 0) {
   3e9fa:	1e04      	subs	r4, r0, #0
   3e9fc:	db1c      	blt.n	3ea38 <mqtt_publish+0x68>
	io_vector[0].iov_base = packet.cur;
   3e9fe:	9a01      	ldr	r2, [sp, #4]
	io_vector[0].iov_len = packet.end - packet.cur;
   3ea00:	9b02      	ldr	r3, [sp, #8]
	io_vector[0].iov_base = packet.cur;
   3ea02:	9203      	str	r2, [sp, #12]
	io_vector[0].iov_len = packet.end - packet.cur;
   3ea04:	1a9b      	subs	r3, r3, r2
	memset(&msg, 0, sizeof(msg));
   3ea06:	221c      	movs	r2, #28
	io_vector[0].iov_len = packet.end - packet.cur;
   3ea08:	9304      	str	r3, [sp, #16]
	io_vector[1].iov_base = param->message.payload.data;
   3ea0a:	68f3      	ldr	r3, [r6, #12]
	memset(&msg, 0, sizeof(msg));
   3ea0c:	2100      	movs	r1, #0
	io_vector[1].iov_base = param->message.payload.data;
   3ea0e:	9305      	str	r3, [sp, #20]
	io_vector[1].iov_len = param->message.payload.len;
   3ea10:	6933      	ldr	r3, [r6, #16]
	memset(&msg, 0, sizeof(msg));
   3ea12:	eb0d 0002 	add.w	r0, sp, r2
	io_vector[1].iov_len = param->message.payload.len;
   3ea16:	9306      	str	r3, [sp, #24]
	memset(&msg, 0, sizeof(msg));
   3ea18:	f003 f961 	bl	41cde <memset>
	msg.msg_iov = io_vector;
   3ea1c:	ab03      	add	r3, sp, #12
   3ea1e:	9309      	str	r3, [sp, #36]	; 0x24
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3ea20:	2302      	movs	r3, #2
	err_code = mqtt_transport_write_msg(client, message);
   3ea22:	4628      	mov	r0, r5
   3ea24:	a907      	add	r1, sp, #28
	msg.msg_iovlen = ARRAY_SIZE(io_vector);
   3ea26:	930a      	str	r3, [sp, #40]	; 0x28
	err_code = mqtt_transport_write_msg(client, message);
   3ea28:	f7e8 fefa 	bl	27820 <mqtt_transport_write_msg>
	if (err_code < 0) {
   3ea2c:	1e04      	subs	r4, r0, #0
   3ea2e:	da09      	bge.n	3ea44 <mqtt_publish+0x74>
		client_disconnect(client, err_code, true);
   3ea30:	4621      	mov	r1, r4
   3ea32:	4628      	mov	r0, r5
   3ea34:	f7ff ff18 	bl	3e868 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3ea38:	4628      	mov	r0, r5
   3ea3a:	f7e8 ff17 	bl	2786c <mqtt_mutex_unlock>
}
   3ea3e:	4620      	mov	r0, r4
   3ea40:	b00e      	add	sp, #56	; 0x38
   3ea42:	bd70      	pop	{r4, r5, r6, pc}
   3ea44:	f7ff fee1 	bl	3e80a <k_uptime_get>
	return 0;
   3ea48:	2400      	movs	r4, #0
   3ea4a:	6168      	str	r0, [r5, #20]
   3ea4c:	e7f4      	b.n	3ea38 <mqtt_publish+0x68>
		return -ENOTCONN;
   3ea4e:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3ea52:	e7f1      	b.n	3ea38 <mqtt_publish+0x68>
	NULL_PARAM_CHECK(client);
   3ea54:	f06f 0415 	mvn.w	r4, #21
   3ea58:	e7f1      	b.n	3ea3e <mqtt_publish+0x6e>

0003ea5a <mqtt_publish_qos1_ack>:
{
   3ea5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3ea5c:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3ea5e:	4605      	mov	r5, r0
   3ea60:	b1f8      	cbz	r0, 3eaa2 <mqtt_publish_qos1_ack+0x48>
	NULL_PARAM_CHECK(param);
   3ea62:	b1f1      	cbz	r1, 3eaa2 <mqtt_publish_qos1_ack+0x48>
	mqtt_mutex_lock(client);
   3ea64:	f7e8 ff2e 	bl	278c4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3ea68:	4669      	mov	r1, sp
   3ea6a:	4628      	mov	r0, r5
   3ea6c:	f7ff fedb 	bl	3e826 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3ea70:	69ab      	ldr	r3, [r5, #24]
   3ea72:	075b      	lsls	r3, r3, #29
   3ea74:	d512      	bpl.n	3ea9c <mqtt_publish_qos1_ack+0x42>
	err_code = publish_ack_encode(param, &packet);
   3ea76:	4620      	mov	r0, r4
   3ea78:	4669      	mov	r1, sp
   3ea7a:	f7ff fcfa 	bl	3e472 <publish_ack_encode>
	if (err_code < 0) {
   3ea7e:	1e04      	subs	r4, r0, #0
   3ea80:	db06      	blt.n	3ea90 <mqtt_publish_qos1_ack+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ea82:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ea86:	4628      	mov	r0, r5
   3ea88:	1a52      	subs	r2, r2, r1
   3ea8a:	f7ff ff34 	bl	3e8f6 <client_write>
   3ea8e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3ea90:	4628      	mov	r0, r5
   3ea92:	f7e8 feeb 	bl	2786c <mqtt_mutex_unlock>
}
   3ea96:	4620      	mov	r0, r4
   3ea98:	b003      	add	sp, #12
   3ea9a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3ea9c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3eaa0:	e7f6      	b.n	3ea90 <mqtt_publish_qos1_ack+0x36>
	NULL_PARAM_CHECK(client);
   3eaa2:	f06f 0415 	mvn.w	r4, #21
   3eaa6:	e7f6      	b.n	3ea96 <mqtt_publish_qos1_ack+0x3c>

0003eaa8 <mqtt_disconnect>:
{
   3eaa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3eaaa:	4605      	mov	r5, r0
   3eaac:	b310      	cbz	r0, 3eaf4 <mqtt_disconnect+0x4c>
	mqtt_mutex_lock(client);
   3eaae:	f7e8 ff09 	bl	278c4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eab2:	4669      	mov	r1, sp
   3eab4:	4628      	mov	r0, r5
   3eab6:	f7ff feb6 	bl	3e826 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eaba:	69ab      	ldr	r3, [r5, #24]
   3eabc:	075b      	lsls	r3, r3, #29
   3eabe:	d516      	bpl.n	3eaee <mqtt_disconnect+0x46>
	err_code = disconnect_encode(&packet);
   3eac0:	4668      	mov	r0, sp
   3eac2:	f7e8 fe73 	bl	277ac <disconnect_encode>
	if (err_code < 0) {
   3eac6:	1e04      	subs	r4, r0, #0
   3eac8:	db0b      	blt.n	3eae2 <mqtt_disconnect+0x3a>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eaca:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eace:	4628      	mov	r0, r5
   3ead0:	1a52      	subs	r2, r2, r1
   3ead2:	f7ff ff10 	bl	3e8f6 <client_write>
	if (err_code < 0) {
   3ead6:	1e04      	subs	r4, r0, #0
   3ead8:	db03      	blt.n	3eae2 <mqtt_disconnect+0x3a>
	client_disconnect(client, 0, true);
   3eada:	2100      	movs	r1, #0
   3eadc:	4628      	mov	r0, r5
   3eade:	f7ff fec3 	bl	3e868 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3eae2:	4628      	mov	r0, r5
   3eae4:	f7e8 fec2 	bl	2786c <mqtt_mutex_unlock>
}
   3eae8:	4620      	mov	r0, r4
   3eaea:	b003      	add	sp, #12
   3eaec:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3eaee:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3eaf2:	e7f6      	b.n	3eae2 <mqtt_disconnect+0x3a>
	NULL_PARAM_CHECK(client);
   3eaf4:	f06f 0415 	mvn.w	r4, #21
   3eaf8:	e7f6      	b.n	3eae8 <mqtt_disconnect+0x40>

0003eafa <mqtt_subscribe>:
{
   3eafa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3eafc:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3eafe:	4605      	mov	r5, r0
   3eb00:	b1f8      	cbz	r0, 3eb42 <mqtt_subscribe+0x48>
	NULL_PARAM_CHECK(param);
   3eb02:	b1f1      	cbz	r1, 3eb42 <mqtt_subscribe+0x48>
	mqtt_mutex_lock(client);
   3eb04:	f7e8 fede 	bl	278c4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eb08:	4669      	mov	r1, sp
   3eb0a:	4628      	mov	r0, r5
   3eb0c:	f7ff fe8b 	bl	3e826 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eb10:	69ab      	ldr	r3, [r5, #24]
   3eb12:	075b      	lsls	r3, r3, #29
   3eb14:	d512      	bpl.n	3eb3c <mqtt_subscribe+0x42>
	err_code = subscribe_encode(param, &packet);
   3eb16:	4620      	mov	r0, r4
   3eb18:	4669      	mov	r1, sp
   3eb1a:	f7ff fcaf 	bl	3e47c <subscribe_encode>
	if (err_code < 0) {
   3eb1e:	1e04      	subs	r4, r0, #0
   3eb20:	db06      	blt.n	3eb30 <mqtt_subscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eb22:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eb26:	4628      	mov	r0, r5
   3eb28:	1a52      	subs	r2, r2, r1
   3eb2a:	f7ff fee4 	bl	3e8f6 <client_write>
   3eb2e:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3eb30:	4628      	mov	r0, r5
   3eb32:	f7e8 fe9b 	bl	2786c <mqtt_mutex_unlock>
}
   3eb36:	4620      	mov	r0, r4
   3eb38:	b003      	add	sp, #12
   3eb3a:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3eb3c:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3eb40:	e7f6      	b.n	3eb30 <mqtt_subscribe+0x36>
	NULL_PARAM_CHECK(client);
   3eb42:	f06f 0415 	mvn.w	r4, #21
   3eb46:	e7f6      	b.n	3eb36 <mqtt_subscribe+0x3c>

0003eb48 <mqtt_unsubscribe>:
{
   3eb48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3eb4a:	460c      	mov	r4, r1
	NULL_PARAM_CHECK(client);
   3eb4c:	4605      	mov	r5, r0
   3eb4e:	b1f8      	cbz	r0, 3eb90 <mqtt_unsubscribe+0x48>
	NULL_PARAM_CHECK(param);
   3eb50:	b1f1      	cbz	r1, 3eb90 <mqtt_unsubscribe+0x48>
	mqtt_mutex_lock(client);
   3eb52:	f7e8 feb7 	bl	278c4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eb56:	4669      	mov	r1, sp
   3eb58:	4628      	mov	r0, r5
   3eb5a:	f7ff fe64 	bl	3e826 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eb5e:	69ab      	ldr	r3, [r5, #24]
   3eb60:	075b      	lsls	r3, r3, #29
   3eb62:	d512      	bpl.n	3eb8a <mqtt_unsubscribe+0x42>
	err_code = unsubscribe_encode(param, &packet);
   3eb64:	4620      	mov	r0, r4
   3eb66:	4669      	mov	r1, sp
   3eb68:	f7ff fcbf 	bl	3e4ea <unsubscribe_encode>
	if (err_code < 0) {
   3eb6c:	1e04      	subs	r4, r0, #0
   3eb6e:	db06      	blt.n	3eb7e <mqtt_unsubscribe+0x36>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3eb70:	e9dd 1200 	ldrd	r1, r2, [sp]
   3eb74:	4628      	mov	r0, r5
   3eb76:	1a52      	subs	r2, r2, r1
   3eb78:	f7ff febd 	bl	3e8f6 <client_write>
   3eb7c:	4604      	mov	r4, r0
	mqtt_mutex_unlock(client);
   3eb7e:	4628      	mov	r0, r5
   3eb80:	f7e8 fe74 	bl	2786c <mqtt_mutex_unlock>
}
   3eb84:	4620      	mov	r0, r4
   3eb86:	b003      	add	sp, #12
   3eb88:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3eb8a:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3eb8e:	e7f6      	b.n	3eb7e <mqtt_unsubscribe+0x36>
	NULL_PARAM_CHECK(client);
   3eb90:	f06f 0415 	mvn.w	r4, #21
   3eb94:	e7f6      	b.n	3eb84 <mqtt_unsubscribe+0x3c>

0003eb96 <mqtt_ping>:
{
   3eb96:	b537      	push	{r0, r1, r2, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3eb98:	4605      	mov	r5, r0
   3eb9a:	b320      	cbz	r0, 3ebe6 <mqtt_ping+0x50>
	mqtt_mutex_lock(client);
   3eb9c:	f7e8 fe92 	bl	278c4 <mqtt_mutex_lock>
	tx_buf_init(client, &packet);
   3eba0:	4669      	mov	r1, sp
   3eba2:	4628      	mov	r0, r5
   3eba4:	f7ff fe3f 	bl	3e826 <tx_buf_init>
	if (!MQTT_HAS_STATE(client, MQTT_STATE_CONNECTED)) {
   3eba8:	69ab      	ldr	r3, [r5, #24]
   3ebaa:	075b      	lsls	r3, r3, #29
   3ebac:	d518      	bpl.n	3ebe0 <mqtt_ping+0x4a>
	err_code = ping_request_encode(&packet);
   3ebae:	4668      	mov	r0, sp
   3ebb0:	f7e8 fe0e 	bl	277d0 <ping_request_encode>
	if (err_code < 0) {
   3ebb4:	1e04      	subs	r4, r0, #0
   3ebb6:	db0d      	blt.n	3ebd4 <mqtt_ping+0x3e>
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ebb8:	e9dd 1200 	ldrd	r1, r2, [sp]
   3ebbc:	4628      	mov	r0, r5
   3ebbe:	1a52      	subs	r2, r2, r1
   3ebc0:	f7ff fe99 	bl	3e8f6 <client_write>
	if (client->unacked_ping >= INT8_MAX) {
   3ebc4:	f995 307b 	ldrsb.w	r3, [r5, #123]	; 0x7b
	err_code = client_write(client, packet.cur, packet.end - packet.cur);
   3ebc8:	4604      	mov	r4, r0
	if (client->unacked_ping >= INT8_MAX) {
   3ebca:	2b7f      	cmp	r3, #127	; 0x7f
   3ebcc:	d002      	beq.n	3ebd4 <mqtt_ping+0x3e>
		client->unacked_ping++;
   3ebce:	3301      	adds	r3, #1
   3ebd0:	f885 307b 	strb.w	r3, [r5, #123]	; 0x7b
	mqtt_mutex_unlock(client);
   3ebd4:	4628      	mov	r0, r5
   3ebd6:	f7e8 fe49 	bl	2786c <mqtt_mutex_unlock>
}
   3ebda:	4620      	mov	r0, r4
   3ebdc:	b003      	add	sp, #12
   3ebde:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   3ebe0:	f06f 047f 	mvn.w	r4, #127	; 0x7f
   3ebe4:	e7f6      	b.n	3ebd4 <mqtt_ping+0x3e>
	NULL_PARAM_CHECK(client);
   3ebe6:	f06f 0415 	mvn.w	r4, #21
   3ebea:	e7f6      	b.n	3ebda <mqtt_ping+0x44>

0003ebec <mqtt_live>:
{
   3ebec:	b570      	push	{r4, r5, r6, lr}
	NULL_PARAM_CHECK(client);
   3ebee:	4606      	mov	r6, r0
   3ebf0:	b300      	cbz	r0, 3ec34 <mqtt_live+0x48>
	mqtt_mutex_lock(client);
   3ebf2:	f7e8 fe67 	bl	278c4 <mqtt_mutex_lock>
	elapsed_time = mqtt_elapsed_time_in_ms_get(
   3ebf6:	6974      	ldr	r4, [r6, #20]
   3ebf8:	f7ff fe07 	bl	3e80a <k_uptime_get>
 *
 * @retval Time elapsed since last_activity time.
 */
static inline uint32_t mqtt_elapsed_time_in_ms_get(uint32_t last_activity)
{
	int32_t diff = k_uptime_get_32() - last_activity;
   3ebfc:	1b00      	subs	r0, r0, r4
	if ((client->keepalive > 0) &&
   3ebfe:	f8b6 4078 	ldrh.w	r4, [r6, #120]	; 0x78

	if (diff < 0) {
		return 0;
   3ec02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   3ec06:	b19c      	cbz	r4, 3ec30 <mqtt_live+0x44>
	    (elapsed_time >= (client->keepalive * 1000))) {
   3ec08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3ec0c:	435c      	muls	r4, r3
	if ((client->keepalive > 0) &&
   3ec0e:	4284      	cmp	r4, r0
   3ec10:	d80d      	bhi.n	3ec2e <mqtt_live+0x42>
		err_code = mqtt_ping(client);
   3ec12:	4630      	mov	r0, r6
   3ec14:	f7ff ffbf 	bl	3eb96 <mqtt_ping>
		ping_sent = true;
   3ec18:	2401      	movs	r4, #1
		err_code = mqtt_ping(client);
   3ec1a:	4605      	mov	r5, r0
	mqtt_mutex_unlock(client);
   3ec1c:	4630      	mov	r0, r6
   3ec1e:	f7e8 fe25 	bl	2786c <mqtt_mutex_unlock>
		return -EAGAIN;
   3ec22:	2c00      	cmp	r4, #0
   3ec24:	bf08      	it	eq
   3ec26:	f06f 050a 	mvneq.w	r5, #10
}
   3ec2a:	4628      	mov	r0, r5
   3ec2c:	bd70      	pop	{r4, r5, r6, pc}
	bool ping_sent = false;
   3ec2e:	2400      	movs	r4, #0
	int err_code = 0;
   3ec30:	4625      	mov	r5, r4
   3ec32:	e7f3      	b.n	3ec1c <mqtt_live+0x30>
	NULL_PARAM_CHECK(client);
   3ec34:	f06f 0515 	mvn.w	r5, #21
   3ec38:	e7f7      	b.n	3ec2a <mqtt_live+0x3e>

0003ec3a <mqtt_keepalive_time_left>:
{
   3ec3a:	b538      	push	{r3, r4, r5, lr}
   3ec3c:	4604      	mov	r4, r0
	uint32_t elapsed_time = mqtt_elapsed_time_in_ms_get(
   3ec3e:	6945      	ldr	r5, [r0, #20]
   3ec40:	f7ff fde3 	bl	3e80a <k_uptime_get>
	uint32_t keepalive_ms = 1000U * client->keepalive;
   3ec44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   3ec48:	f8b4 1078 	ldrh.w	r1, [r4, #120]	; 0x78
	int32_t diff = k_uptime_get_32() - last_activity;
   3ec4c:	1b42      	subs	r2, r0, r5
   3ec4e:	434b      	muls	r3, r1
		return 0;
   3ec50:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
	if (client->keepalive == 0) {
   3ec54:	b119      	cbz	r1, 3ec5e <mqtt_keepalive_time_left+0x24>
	if (keepalive_ms <= elapsed_time) {
   3ec56:	4293      	cmp	r3, r2
   3ec58:	d904      	bls.n	3ec64 <mqtt_keepalive_time_left+0x2a>
	return keepalive_ms - elapsed_time;
   3ec5a:	1a98      	subs	r0, r3, r2
}
   3ec5c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   3ec5e:	f04f 30ff 	mov.w	r0, #4294967295
   3ec62:	e7fb      	b.n	3ec5c <mqtt_keepalive_time_left+0x22>
		return 0;
   3ec64:	2000      	movs	r0, #0
   3ec66:	e7f9      	b.n	3ec5c <mqtt_keepalive_time_left+0x22>

0003ec68 <mqtt_input>:
{
   3ec68:	b538      	push	{r3, r4, r5, lr}
	NULL_PARAM_CHECK(client);
   3ec6a:	4605      	mov	r5, r0
   3ec6c:	b1d0      	cbz	r0, 3eca4 <mqtt_input+0x3c>
	mqtt_mutex_lock(client);
   3ec6e:	f7e8 fe29 	bl	278c4 <mqtt_mutex_lock>
	if (MQTT_HAS_STATE(client, MQTT_STATE_TCP_CONNECTED)) {
   3ec72:	69ab      	ldr	r3, [r5, #24]
   3ec74:	079b      	lsls	r3, r3, #30
   3ec76:	d50f      	bpl.n	3ec98 <mqtt_input+0x30>
	if (client->internal.remaining_payload > 0) {
   3ec78:	6a2b      	ldr	r3, [r5, #32]
   3ec7a:	b983      	cbnz	r3, 3ec9e <mqtt_input+0x36>
	err_code = mqtt_handle_rx(client);
   3ec7c:	4628      	mov	r0, r5
   3ec7e:	f7ff fc84 	bl	3e58a <mqtt_handle_rx>
	if (err_code < 0) {
   3ec82:	1e04      	subs	r4, r0, #0
   3ec84:	da03      	bge.n	3ec8e <mqtt_input+0x26>
		client_disconnect(client, err_code, true);
   3ec86:	4621      	mov	r1, r4
   3ec88:	4628      	mov	r0, r5
   3ec8a:	f7ff fded 	bl	3e868 <client_disconnect.constprop.0>
	mqtt_mutex_unlock(client);
   3ec8e:	4628      	mov	r0, r5
   3ec90:	f7e8 fdec 	bl	2786c <mqtt_mutex_unlock>
}
   3ec94:	4620      	mov	r0, r4
   3ec96:	bd38      	pop	{r3, r4, r5, pc}
		err_code = -EACCES;
   3ec98:	f06f 040c 	mvn.w	r4, #12
   3ec9c:	e7f7      	b.n	3ec8e <mqtt_input+0x26>
		return -EBUSY;
   3ec9e:	f06f 040f 	mvn.w	r4, #15
   3eca2:	e7f4      	b.n	3ec8e <mqtt_input+0x26>
	NULL_PARAM_CHECK(client);
   3eca4:	f06f 0415 	mvn.w	r4, #21
   3eca8:	e7f4      	b.n	3ec94 <mqtt_input+0x2c>

0003ecaa <mqtt_read_publish_payload_blocking>:
}

int mqtt_read_publish_payload_blocking(struct mqtt_client *client, void *buffer,
				       size_t length)
{
	return read_publish_payload(client, buffer, length, true);
   3ecaa:	2301      	movs	r3, #1
   3ecac:	f7ff bdf5 	b.w	3e89a <read_publish_payload>

0003ecb0 <mqtt_readall_publish_payload>:
}

int mqtt_readall_publish_payload(struct mqtt_client *client, uint8_t *buffer,
				 size_t length)
{
   3ecb0:	b570      	push	{r4, r5, r6, lr}
   3ecb2:	4606      	mov	r6, r0
   3ecb4:	460c      	mov	r4, r1
	uint8_t *end = buffer + length;
   3ecb6:	188d      	adds	r5, r1, r2

	while (buffer < end) {
   3ecb8:	42ac      	cmp	r4, r5
   3ecba:	d301      	bcc.n	3ecc0 <mqtt_readall_publish_payload+0x10>
		}

		buffer += ret;
	}

	return 0;
   3ecbc:	2000      	movs	r0, #0
}
   3ecbe:	bd70      	pop	{r4, r5, r6, pc}
		int ret = mqtt_read_publish_payload_blocking(client, buffer,
   3ecc0:	4621      	mov	r1, r4
   3ecc2:	4630      	mov	r0, r6
   3ecc4:	1b2a      	subs	r2, r5, r4
   3ecc6:	f7ff fff0 	bl	3ecaa <mqtt_read_publish_payload_blocking>
		if (ret < 0) {
   3ecca:	2800      	cmp	r0, #0
   3eccc:	dbf7      	blt.n	3ecbe <mqtt_readall_publish_payload+0xe>
		} else if (ret == 0) {
   3ecce:	d001      	beq.n	3ecd4 <mqtt_readall_publish_payload+0x24>
		buffer += ret;
   3ecd0:	4404      	add	r4, r0
   3ecd2:	e7f1      	b.n	3ecb8 <mqtt_readall_publish_payload+0x8>
			return -EIO;
   3ecd4:	f06f 0004 	mvn.w	r0, #4
   3ecd8:	e7f1      	b.n	3ecbe <mqtt_readall_publish_payload+0xe>

0003ecda <mqtt_client_tls_connect>:
#include <net/mqtt.h>

#include "mqtt_os.h"

int mqtt_client_tls_connect(struct mqtt_client *client)
{
   3ecda:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	const struct sockaddr *broker = client->broker;
   3ecdc:	6d05      	ldr	r5, [r0, #80]	; 0x50
{
   3ecde:	4604      	mov	r4, r0
	struct mqtt_sec_config *tls_config = &client->transport.tls.config;
	int ret;

	client->transport.tls.sock = zsock_socket(broker->sa_family,
   3ece0:	8828      	ldrh	r0, [r5, #0]
	return z_impl_zsock_socket(family, type, proto);
   3ece2:	f44f 7281 	mov.w	r2, #258	; 0x102
   3ece6:	2101      	movs	r1, #1
   3ece8:	f7e5 ff04 	bl	24af4 <z_impl_zsock_socket>
						  SOCK_STREAM, IPPROTO_TLS_1_2);
	if (client->transport.tls.sock < 0) {
   3ecec:	2800      	cmp	r0, #0
	client->transport.tls.sock = zsock_socket(broker->sa_family,
   3ecee:	62a0      	str	r0, [r4, #40]	; 0x28
	if (client->transport.tls.sock < 0) {
   3ecf0:	da05      	bge.n	3ecfe <mqtt_client_tls_connect+0x24>
	MQTT_TRC("Connect completed");
	return 0;

error:
	(void) zsock_close(client->transport.tls.sock);
	return -errno;
   3ecf2:	f7ff f9f2 	bl	3e0da <__errno>
   3ecf6:	6800      	ldr	r0, [r0, #0]
   3ecf8:	4240      	negs	r0, r0
}
   3ecfa:	b004      	add	sp, #16
   3ecfc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3ecfe:	2304      	movs	r3, #4
   3ed00:	2205      	movs	r2, #5
   3ed02:	9300      	str	r3, [sp, #0]
   3ed04:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3ed08:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   3ed0c:	f7fe fefb 	bl	3db06 <z_impl_zsock_setsockopt>
	if (ret < 0) {
   3ed10:	2800      	cmp	r0, #0
   3ed12:	da03      	bge.n	3ed1c <mqtt_client_tls_connect+0x42>
	(void) zsock_close(client->transport.tls.sock);
   3ed14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3ed16:	f7fe fe5e 	bl	3d9d6 <z_impl_zsock_close>
   3ed1a:	e7ea      	b.n	3ecf2 <mqtt_client_tls_connect+0x18>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   3ed1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3ed1e:	bb03      	cbnz	r3, 3ed62 <mqtt_client_tls_connect+0x88>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   3ed20:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   3ed22:	bb63      	cbnz	r3, 3ed7e <mqtt_client_tls_connect+0xa4>
	if (tls_config->hostname) {
   3ed24:	6c23      	ldr	r3, [r4, #64]	; 0x40
   3ed26:	2b00      	cmp	r3, #0
   3ed28:	d137      	bne.n	3ed9a <mqtt_client_tls_connect+0xc0>
	if (tls_config->session_cache == TLS_SESSION_CACHE_ENABLED) {
   3ed2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   3ed2c:	2b01      	cmp	r3, #1
   3ed2e:	d10b      	bne.n	3ed48 <mqtt_client_tls_connect+0x6e>
   3ed30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3ed32:	2304      	movs	r3, #4
   3ed34:	2208      	movs	r2, #8
   3ed36:	9300      	str	r3, [sp, #0]
   3ed38:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3ed3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   3ed40:	f7fe fee1 	bl	3db06 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3ed44:	2800      	cmp	r0, #0
   3ed46:	dbe5      	blt.n	3ed14 <mqtt_client_tls_connect+0x3a>
	if (broker->sa_family == AF_INET) {
   3ed48:	882b      	ldrh	r3, [r5, #0]
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   3ed4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	size_t peer_addr_size = sizeof(struct sockaddr_in6);
   3ed4c:	2b01      	cmp	r3, #1
   3ed4e:	bf0c      	ite	eq
   3ed50:	2208      	moveq	r2, #8
   3ed52:	2218      	movne	r2, #24
	ret = zsock_connect(client->transport.tls.sock, client->broker,
   3ed54:	6d21      	ldr	r1, [r4, #80]	; 0x50
	return z_impl_zsock_connect(sock, addr, addrlen);
   3ed56:	f7fe fe55 	bl	3da04 <z_impl_zsock_connect>
	if (ret < 0) {
   3ed5a:	2800      	cmp	r0, #0
   3ed5c:	dbda      	blt.n	3ed14 <mqtt_client_tls_connect+0x3a>
	return 0;
   3ed5e:	2000      	movs	r0, #0
   3ed60:	e7cb      	b.n	3ecfa <mqtt_client_tls_connect+0x20>
	if (tls_config->cipher_list != NULL && tls_config->cipher_count > 0) {
   3ed62:	6b22      	ldr	r2, [r4, #48]	; 0x30
   3ed64:	2a00      	cmp	r2, #0
   3ed66:	d0db      	beq.n	3ed20 <mqtt_client_tls_connect+0x46>
   3ed68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3ed6a:	0092      	lsls	r2, r2, #2
	return z_impl_zsock_setsockopt(sock, level, optname, optval, optlen);
   3ed6c:	9200      	str	r2, [sp, #0]
   3ed6e:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3ed72:	2203      	movs	r2, #3
   3ed74:	f7fe fec7 	bl	3db06 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3ed78:	2800      	cmp	r0, #0
   3ed7a:	dad1      	bge.n	3ed20 <mqtt_client_tls_connect+0x46>
   3ed7c:	e7ca      	b.n	3ed14 <mqtt_client_tls_connect+0x3a>
	if (tls_config->sec_tag_list != NULL && tls_config->sec_tag_count > 0) {
   3ed7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   3ed80:	2a00      	cmp	r2, #0
   3ed82:	d0cf      	beq.n	3ed24 <mqtt_client_tls_connect+0x4a>
   3ed84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3ed86:	0092      	lsls	r2, r2, #2
   3ed88:	9200      	str	r2, [sp, #0]
   3ed8a:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3ed8e:	2201      	movs	r2, #1
   3ed90:	f7fe feb9 	bl	3db06 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3ed94:	2800      	cmp	r0, #0
   3ed96:	dac5      	bge.n	3ed24 <mqtt_client_tls_connect+0x4a>
   3ed98:	e7bc      	b.n	3ed14 <mqtt_client_tls_connect+0x3a>
		ret = zsock_setsockopt(client->transport.tls.sock, SOL_TLS,
   3ed9a:	4618      	mov	r0, r3
   3ed9c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   3ed9e:	9303      	str	r3, [sp, #12]
   3eda0:	f7de fa5c 	bl	1d25c <strlen>
   3eda4:	2202      	movs	r2, #2
   3eda6:	9000      	str	r0, [sp, #0]
   3eda8:	f44f 718d 	mov.w	r1, #282	; 0x11a
   3edac:	4630      	mov	r0, r6
   3edae:	9b03      	ldr	r3, [sp, #12]
   3edb0:	f7fe fea9 	bl	3db06 <z_impl_zsock_setsockopt>
		if (ret < 0) {
   3edb4:	2800      	cmp	r0, #0
   3edb6:	dab8      	bge.n	3ed2a <mqtt_client_tls_connect+0x50>
   3edb8:	e7ac      	b.n	3ed14 <mqtt_client_tls_connect+0x3a>

0003edba <mqtt_client_tls_write>:

int mqtt_client_tls_write(struct mqtt_client *client, const uint8_t *data,
			  uint32_t datalen)
{
   3edba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint32_t offset = 0U;
   3edbe:	2400      	movs	r4, #0
{
   3edc0:	4606      	mov	r6, r0
   3edc2:	460f      	mov	r7, r1
   3edc4:	4615      	mov	r5, r2
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3edc6:	46a0      	mov	r8, r4
	int ret;

	while (offset < datalen) {
   3edc8:	42ac      	cmp	r4, r5
   3edca:	d301      	bcc.n	3edd0 <mqtt_client_tls_write+0x16>
		}

		offset += ret;
	}

	return 0;
   3edcc:	2000      	movs	r0, #0
   3edce:	e00d      	b.n	3edec <mqtt_client_tls_write+0x32>
		ret = zsock_send(client->transport.tls.sock, data + offset,
   3edd0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   3edd2:	2300      	movs	r3, #0
   3edd4:	e9cd 8800 	strd	r8, r8, [sp]
   3edd8:	1b2a      	subs	r2, r5, r4
   3edda:	1939      	adds	r1, r7, r4
   3eddc:	f7fe fe28 	bl	3da30 <z_impl_zsock_sendto>
		if (ret < 0) {
   3ede0:	1e03      	subs	r3, r0, #0
   3ede2:	da06      	bge.n	3edf2 <mqtt_client_tls_write+0x38>
			return -errno;
   3ede4:	f7ff f979 	bl	3e0da <__errno>
   3ede8:	6800      	ldr	r0, [r0, #0]
   3edea:	4240      	negs	r0, r0
}
   3edec:	b002      	add	sp, #8
   3edee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		offset += ret;
   3edf2:	441c      	add	r4, r3
   3edf4:	e7e8      	b.n	3edc8 <mqtt_client_tls_write+0xe>

0003edf6 <mqtt_client_tls_write_msg>:

int mqtt_client_tls_write_msg(struct mqtt_client *client,
			      const struct msghdr *message)
{
   3edf6:	b508      	push	{r3, lr}
	int ret;

	ret = zsock_sendmsg(client->transport.tls.sock, message, 0);
   3edf8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_sendmsg(sock, msg, flags);
   3edfa:	2200      	movs	r2, #0
   3edfc:	f7fe fe35 	bl	3da6a <z_impl_zsock_sendmsg>
	if (ret < 0) {
   3ee00:	2800      	cmp	r0, #0
   3ee02:	da04      	bge.n	3ee0e <mqtt_client_tls_write_msg+0x18>
		return -errno;
   3ee04:	f7ff f969 	bl	3e0da <__errno>
   3ee08:	6800      	ldr	r0, [r0, #0]
   3ee0a:	4240      	negs	r0, r0
	}

	return 0;
}
   3ee0c:	bd08      	pop	{r3, pc}
	return 0;
   3ee0e:	2000      	movs	r0, #0
   3ee10:	e7fc      	b.n	3ee0c <mqtt_client_tls_write_msg+0x16>

0003ee12 <mqtt_client_tls_read>:

int mqtt_client_tls_read(struct mqtt_client *client, uint8_t *data, uint32_t buflen,
			 bool shall_block)
{
   3ee12:	b513      	push	{r0, r1, r4, lr}
   3ee14:	2400      	movs	r4, #0
	int flags = 0;
	int ret;

	if (!shall_block) {
   3ee16:	2b00      	cmp	r3, #0
		flags |= ZSOCK_MSG_DONTWAIT;
   3ee18:	bf14      	ite	ne
   3ee1a:	4623      	movne	r3, r4
   3ee1c:	2340      	moveq	r3, #64	; 0x40
	}

	ret = zsock_recv(client->transport.tls.sock, data, buflen, flags);
   3ee1e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_recvfrom(sock, buf, max_len, flags, src_addr, addrlen);
   3ee20:	e9cd 4400 	strd	r4, r4, [sp]
   3ee24:	f7fe fe37 	bl	3da96 <z_impl_zsock_recvfrom>
	if (ret < 0) {
   3ee28:	2800      	cmp	r0, #0
   3ee2a:	da03      	bge.n	3ee34 <mqtt_client_tls_read+0x22>
		return -errno;
   3ee2c:	f7ff f955 	bl	3e0da <__errno>
   3ee30:	6800      	ldr	r0, [r0, #0]
   3ee32:	4240      	negs	r0, r0
	}

	return ret;
}
   3ee34:	b002      	add	sp, #8
   3ee36:	bd10      	pop	{r4, pc}

0003ee38 <mqtt_client_tls_disconnect>:

int mqtt_client_tls_disconnect(struct mqtt_client *client)
{
   3ee38:	b508      	push	{r3, lr}
	int ret;

	MQTT_TRC("Closing socket %d", client->transport.tls.sock);
	ret = zsock_close(client->transport.tls.sock);
   3ee3a:	6a80      	ldr	r0, [r0, #40]	; 0x28
	return z_impl_zsock_close(sock);
   3ee3c:	f7fe fdcb 	bl	3d9d6 <z_impl_zsock_close>
	if (ret < 0) {
   3ee40:	2800      	cmp	r0, #0
   3ee42:	da04      	bge.n	3ee4e <mqtt_client_tls_disconnect+0x16>
		return -errno;
   3ee44:	f7ff f949 	bl	3e0da <__errno>
   3ee48:	6800      	ldr	r0, [r0, #0]
   3ee4a:	4240      	negs	r0, r0
	}

	return 0;
}
   3ee4c:	bd08      	pop	{r3, pc}
	return 0;
   3ee4e:	2000      	movs	r0, #0
   3ee50:	e7fc      	b.n	3ee4c <mqtt_client_tls_disconnect+0x14>

0003ee52 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee52:	6843      	ldr	r3, [r0, #4]
}
   3ee54:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee56:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   3ee58:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   3ee5a:	600b      	str	r3, [r1, #0]
}
   3ee5c:	4770      	bx	lr

0003ee5e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee5e:	6843      	ldr	r3, [r0, #4]
   3ee60:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   3ee62:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   3ee64:	4042      	eors	r2, r0
   3ee66:	400a      	ands	r2, r1
   3ee68:	4042      	eors	r2, r0
    p_reg->OUT = value;
   3ee6a:	605a      	str	r2, [r3, #4]
}
   3ee6c:	2000      	movs	r0, #0
   3ee6e:	4770      	bx	lr

0003ee70 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee70:	6843      	ldr	r3, [r0, #4]
}
   3ee72:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee74:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   3ee76:	6099      	str	r1, [r3, #8]
}
   3ee78:	4770      	bx	lr

0003ee7a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee7a:	6843      	ldr	r3, [r0, #4]
}
   3ee7c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee7e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   3ee80:	60d9      	str	r1, [r3, #12]
}
   3ee82:	4770      	bx	lr

0003ee84 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee84:	6843      	ldr	r3, [r0, #4]
}
   3ee86:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   3ee88:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   3ee8a:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   3ee8c:	4059      	eors	r1, r3
    p_reg->OUT = value;
   3ee8e:	6051      	str	r1, [r2, #4]
}
   3ee90:	4770      	bx	lr

0003ee92 <nrf_gpio_cfg_sense_set>:
{
   3ee92:	b513      	push	{r0, r1, r4, lr}
   3ee94:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ee96:	a801      	add	r0, sp, #4
{
   3ee98:	460c      	mov	r4, r1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   3ee9a:	f7e8 fd8b 	bl	279b4 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   3ee9e:	9b01      	ldr	r3, [sp, #4]
   3eea0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   3eea4:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   3eea8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   3eeac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   3eeb0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   3eeb4:	b002      	add	sp, #8
   3eeb6:	bd10      	pop	{r4, pc}

0003eeb8 <flash_nrf_write_protection>:
}
   3eeb8:	2000      	movs	r0, #0
   3eeba:	4770      	bx	lr

0003eebc <is_regular_addr_valid>:
{
   3eebc:	b538      	push	{r3, r4, r5, lr}
   3eebe:	4604      	mov	r4, r0
   3eec0:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   3eec2:	f002 fd06 	bl	418d2 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   3eec6:	4284      	cmp	r4, r0
   3eec8:	d209      	bcs.n	3eede <is_regular_addr_valid+0x22>
   3eeca:	2c00      	cmp	r4, #0
   3eecc:	db07      	blt.n	3eede <is_regular_addr_valid+0x22>
	    addr < 0 ||
   3eece:	42a8      	cmp	r0, r5
   3eed0:	d305      	bcc.n	3eede <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   3eed2:	1961      	adds	r1, r4, r5
	    len > flash_size ||
   3eed4:	4281      	cmp	r1, r0
   3eed6:	bf8c      	ite	hi
   3eed8:	2000      	movhi	r0, #0
   3eeda:	2001      	movls	r0, #1
}
   3eedc:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   3eede:	2000      	movs	r0, #0
   3eee0:	e7fc      	b.n	3eedc <is_regular_addr_valid+0x20>

0003eee2 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   3eee2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   3eee6:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   3eee8:	6883      	ldr	r3, [r0, #8]
{
   3eeea:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   3eeec:	695b      	ldr	r3, [r3, #20]
   3eeee:	4669      	mov	r1, sp
{
   3eef0:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   3eef2:	aa01      	add	r2, sp, #4
   3eef4:	4798      	blx	r3

	while (layout_size--) {
   3eef6:	e9dd 1000 	ldrd	r1, r0, [sp]
   3eefa:	2300      	movs	r3, #0
	off_t end = 0;
   3eefc:	461d      	mov	r5, r3
	off_t group_offs = 0;
   3eefe:	469e      	mov	lr, r3
	size_t page_count = 0;
   3ef00:	469c      	mov	ip, r3
   3ef02:	f100 38ff 	add.w	r8, r0, #4294967295
	while (layout_size--) {
   3ef06:	f1b8 3fff 	cmp.w	r8, #4294967295
   3ef0a:	d102      	bne.n	3ef12 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   3ef0c:	f06f 0015 	mvn.w	r0, #21
   3ef10:	e018      	b.n	3ef44 <flash_get_page_info+0x62>
		if (use_addr) {
   3ef12:	680a      	ldr	r2, [r1, #0]
   3ef14:	b1cf      	cbz	r7, 3ef4a <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   3ef16:	6848      	ldr	r0, [r1, #4]
   3ef18:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   3ef1c:	42a5      	cmp	r5, r4
   3ef1e:	f108 38ff 	add.w	r8, r8, #4294967295
   3ef22:	dd17      	ble.n	3ef54 <flash_get_page_info+0x72>
   3ef24:	b103      	cbz	r3, 3ef28 <flash_get_page_info+0x46>
   3ef26:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   3ef28:	9b00      	ldr	r3, [sp, #0]
   3ef2a:	685b      	ldr	r3, [r3, #4]
   3ef2c:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   3ef2e:	b177      	cbz	r7, 3ef4e <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   3ef30:	eba4 040e 	sub.w	r4, r4, lr
   3ef34:	fbb4 f4f3 	udiv	r4, r4, r3
			return 0;
   3ef38:	2000      	movs	r0, #0
			info->start_offset = group_offs +
   3ef3a:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   3ef3e:	4464      	add	r4, ip
			info->start_offset = group_offs +
   3ef40:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   3ef42:	60b4      	str	r4, [r6, #8]
}
   3ef44:	b002      	add	sp, #8
   3ef46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   3ef4a:	4415      	add	r5, r2
   3ef4c:	e7e6      	b.n	3ef1c <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   3ef4e:	eba4 040c 	sub.w	r4, r4, ip
   3ef52:	e7f1      	b.n	3ef38 <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   3ef54:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   3ef56:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   3ef58:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   3ef5c:	3108      	adds	r1, #8
   3ef5e:	2301      	movs	r3, #1
   3ef60:	e7d1      	b.n	3ef06 <flash_get_page_info+0x24>

0003ef62 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   3ef62:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   3ef64:	2201      	movs	r2, #1
   3ef66:	f7ff bfbc 	b.w	3eee2 <flash_get_page_info>

0003ef6a <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   3ef6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_driver_api *api = dev->api;
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;
   3ef6e:	2400      	movs	r4, #0

	api->page_layout(dev, &layout, &num_blocks);
   3ef70:	6883      	ldr	r3, [r0, #8]
{
   3ef72:	b086      	sub	sp, #24
   3ef74:	4688      	mov	r8, r1
   3ef76:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   3ef78:	695b      	ldr	r3, [r3, #20]
   3ef7a:	aa02      	add	r2, sp, #8
   3ef7c:	a901      	add	r1, sp, #4
   3ef7e:	4798      	blx	r3
	size_t block, num_blocks, page = 0, i;
   3ef80:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   3ef82:	4625      	mov	r5, r4
   3ef84:	9b02      	ldr	r3, [sp, #8]
   3ef86:	42ab      	cmp	r3, r5
   3ef88:	d802      	bhi.n	3ef90 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   3ef8a:	b006      	add	sp, #24
   3ef8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < l->pages_count; i++) {
   3ef90:	2600      	movs	r6, #0
		const struct flash_pages_layout *l = &layout[block];
   3ef92:	9f01      	ldr	r7, [sp, #4]
   3ef94:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		page_info.size = l->pages_size;
   3ef98:	687b      	ldr	r3, [r7, #4]
   3ef9a:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3ef9c:	683a      	ldr	r2, [r7, #0]
   3ef9e:	eb0a 0306 	add.w	r3, sl, r6
   3efa2:	42b2      	cmp	r2, r6
   3efa4:	d802      	bhi.n	3efac <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   3efa6:	469a      	mov	sl, r3
   3efa8:	3501      	adds	r5, #1
   3efaa:	e7eb      	b.n	3ef84 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   3efac:	4649      	mov	r1, r9
   3efae:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   3efb0:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   3efb2:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   3efb4:	47c0      	blx	r8
   3efb6:	2800      	cmp	r0, #0
   3efb8:	d0e7      	beq.n	3ef8a <flash_page_foreach+0x20>
			off += page_info.size;
   3efba:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   3efbc:	3601      	adds	r6, #1
			off += page_info.size;
   3efbe:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   3efc0:	e7ec      	b.n	3ef9c <flash_page_foreach+0x32>

0003efc2 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   3efc2:	6843      	ldr	r3, [r0, #4]
{
   3efc4:	b410      	push	{r4}
	return config->uarte_regs;
   3efc6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   3efc8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   3efcc:	05d2      	lsls	r2, r2, #23
   3efce:	d518      	bpl.n	3f002 <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3efd0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   3efd4:	b1aa      	cbz	r2, 3f002 <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   3efd6:	f04f 0120 	mov.w	r1, #32
   3efda:	f3ef 8211 	mrs	r2, BASEPRI
   3efde:	f381 8811 	msr	BASEPRI, r1
   3efe2:	f3bf 8f6f 	isb	sy
   3efe6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   3efea:	b131      	cbz	r1, 3effa <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3efec:	2100      	movs	r1, #0
   3efee:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   3eff2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3eff6:	2101      	movs	r1, #1
   3eff8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   3effa:	f382 8811 	msr	BASEPRI, r2
   3effe:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   3f002:	68c2      	ldr	r2, [r0, #12]
   3f004:	68d2      	ldr	r2, [r2, #12]
   3f006:	b15a      	cbz	r2, 3f020 <uarte_nrfx_isr_int+0x5e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f008:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   3f00c:	b159      	cbz	r1, 3f026 <uarte_nrfx_isr_int+0x64>
		data->int_driven->fifo_fill_lock = 0;
   3f00e:	2100      	movs	r1, #0
		if (data->int_driven->disable_tx_irq) {
   3f010:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   3f012:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   3f014:	b13c      	cbz	r4, 3f026 <uarte_nrfx_isr_int+0x64>
    p_reg->INTENCLR = mask;
   3f016:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   3f01a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   3f01e:	7391      	strb	r1, [r2, #14]
}
   3f020:	f85d 4b04 	ldr.w	r4, [sp], #4
   3f024:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f026:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   3f02a:	b121      	cbz	r1, 3f036 <uarte_nrfx_isr_int+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f02c:	2100      	movs	r1, #0
   3f02e:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   3f032:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   3f036:	6813      	ldr	r3, [r2, #0]
   3f038:	2b00      	cmp	r3, #0
   3f03a:	d0f1      	beq.n	3f020 <uarte_nrfx_isr_int+0x5e>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3f03c:	6851      	ldr	r1, [r2, #4]
}
   3f03e:	f85d 4b04 	ldr.w	r4, [sp], #4
		data->int_driven->cb(dev, data->int_driven->cb_data);
   3f042:	4718      	bx	r3

0003f044 <uarte_nrfx_config_get>:
{
   3f044:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   3f046:	68c2      	ldr	r2, [r0, #12]
   3f048:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   3f04c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   3f050:	2000      	movs	r0, #0
   3f052:	4770      	bx	lr

0003f054 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   3f054:	6843      	ldr	r3, [r0, #4]
   3f056:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   3f058:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   3f05c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   3f060:	4770      	bx	lr

0003f062 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   3f062:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   3f064:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f066:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   3f06a:	b938      	cbnz	r0, 3f07c <is_tx_ready+0x1a>
   3f06c:	7992      	ldrb	r2, [r2, #6]
   3f06e:	b932      	cbnz	r2, 3f07e <is_tx_ready+0x1c>
   3f070:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   3f074:	3800      	subs	r0, #0
   3f076:	bf18      	it	ne
   3f078:	2001      	movne	r0, #1
   3f07a:	4770      	bx	lr
   3f07c:	2001      	movs	r0, #1
}
   3f07e:	4770      	bx	lr

0003f080 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   3f080:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3f082:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   3f084:	681b      	ldr	r3, [r3, #0]
   3f086:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3f08a:	b148      	cbz	r0, 3f0a0 <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f08c:	2000      	movs	r0, #0
	*c = data->rx_data;
   3f08e:	7d52      	ldrb	r2, [r2, #21]
   3f090:	700a      	strb	r2, [r1, #0]
   3f092:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   3f096:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f09a:	2201      	movs	r2, #1
   3f09c:	601a      	str	r2, [r3, #0]
	return 0;
   3f09e:	4770      	bx	lr
		return -1;
   3f0a0:	f04f 30ff 	mov.w	r0, #4294967295
}
   3f0a4:	4770      	bx	lr

0003f0a6 <uarte_nrfx_fifo_fill>:
{
   3f0a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   3f0a8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3f0aa:	68c6      	ldr	r6, [r0, #12]
	return config->uarte_regs;
   3f0ac:	681d      	ldr	r5, [r3, #0]
	len = MIN(len, data->int_driven->tx_buff_size);
   3f0ae:	68f3      	ldr	r3, [r6, #12]
   3f0b0:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   3f0b2:	3310      	adds	r3, #16
   3f0b4:	4294      	cmp	r4, r2
   3f0b6:	bfa8      	it	ge
   3f0b8:	4614      	movge	r4, r2
   3f0ba:	2201      	movs	r2, #1
   3f0bc:	e8d3 7fef 	ldaex	r7, [r3]
   3f0c0:	2f00      	cmp	r7, #0
   3f0c2:	d104      	bne.n	3f0ce <uarte_nrfx_fifo_fill+0x28>
   3f0c4:	e8c3 2fec 	stlex	ip, r2, [r3]
   3f0c8:	f1bc 0f00 	cmp.w	ip, #0
   3f0cc:	d1f6      	bne.n	3f0bc <uarte_nrfx_fifo_fill+0x16>
   3f0ce:	bf0c      	ite	eq
   3f0d0:	4613      	moveq	r3, r2
   3f0d2:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   3f0d4:	d01c      	beq.n	3f110 <uarte_nrfx_fifo_fill+0x6a>
		return 0;
   3f0d6:	461c      	mov	r4, r3
}
   3f0d8:	4620      	mov	r0, r4
   3f0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3f0dc:	68f2      	ldr	r2, [r6, #12]
   3f0de:	5ccf      	ldrb	r7, [r1, r3]
   3f0e0:	6892      	ldr	r2, [r2, #8]
   3f0e2:	54d7      	strb	r7, [r2, r3]
	for (int i = 0; i < len; i++) {
   3f0e4:	3301      	adds	r3, #1
   3f0e6:	42a3      	cmp	r3, r4
   3f0e8:	dbf8      	blt.n	3f0dc <uarte_nrfx_fifo_fill+0x36>
	__asm__ volatile(
   3f0ea:	f04f 0320 	mov.w	r3, #32
   3f0ee:	f3ef 8111 	mrs	r1, BASEPRI
   3f0f2:	f383 8811 	msr	BASEPRI, r3
   3f0f6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   3f0fa:	f7ff ffb2 	bl	3f062 <is_tx_ready>
   3f0fe:	68f3      	ldr	r3, [r6, #12]
   3f100:	b940      	cbnz	r0, 3f114 <uarte_nrfx_fifo_fill+0x6e>
		len = 0;
   3f102:	4604      	mov	r4, r0
		data->int_driven->fifo_fill_lock = 0;
   3f104:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
   3f106:	f381 8811 	msr	BASEPRI, r1
   3f10a:	f3bf 8f6f 	isb	sy
	return len;
   3f10e:	e7e3      	b.n	3f0d8 <uarte_nrfx_fifo_fill+0x32>
	for (int i = 0; i < len; i++) {
   3f110:	2300      	movs	r3, #0
   3f112:	e7e8      	b.n	3f0e6 <uarte_nrfx_fifo_fill+0x40>
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   3f114:	689b      	ldr	r3, [r3, #8]
   3f116:	f8c5 3544 	str.w	r3, [r5, #1348]	; 0x544
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f11a:	2300      	movs	r3, #0
    p_reg->TXD.MAXCNT = length;
   3f11c:	f8c5 4548 	str.w	r4, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f120:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
   3f124:	f8d5 2120 	ldr.w	r2, [r5, #288]	; 0x120
   3f128:	f8c5 3158 	str.w	r3, [r5, #344]	; 0x158
   3f12c:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f130:	2301      	movs	r3, #1
   3f132:	60ab      	str	r3, [r5, #8]
}
   3f134:	e7e7      	b.n	3f106 <uarte_nrfx_fifo_fill+0x60>

0003f136 <uarte_nrfx_fifo_read>:
	return config->uarte_regs;
   3f136:	6843      	ldr	r3, [r0, #4]
   3f138:	681a      	ldr	r2, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f13a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   3f13e:	b153      	cbz	r3, 3f156 <uarte_nrfx_fifo_read+0x20>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   3f140:	68c3      	ldr	r3, [r0, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   3f142:	2000      	movs	r0, #0
   3f144:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
   3f148:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   3f14c:	2001      	movs	r0, #1
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   3f14e:	7d5b      	ldrb	r3, [r3, #21]
   3f150:	700b      	strb	r3, [r1, #0]
   3f152:	6010      	str	r0, [r2, #0]
}
   3f154:	4770      	bx	lr
	int num_rx = 0;
   3f156:	4618      	mov	r0, r3
}
   3f158:	4770      	bx	lr

0003f15a <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   3f15a:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   3f15c:	68c1      	ldr	r1, [r0, #12]
	return config->uarte_regs;
   3f15e:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   3f160:	f04f 0020 	mov.w	r0, #32
   3f164:	f3ef 8311 	mrs	r3, BASEPRI
   3f168:	f380 8811 	msr	BASEPRI, r0
   3f16c:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   3f170:	2000      	movs	r0, #0
   3f172:	68c9      	ldr	r1, [r1, #12]
   3f174:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   3f176:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   3f17a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   3f17e:	f383 8811 	msr	BASEPRI, r3
   3f182:	f3bf 8f6f 	isb	sy
}
   3f186:	4770      	bx	lr

0003f188 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   3f188:	2201      	movs	r2, #1
   3f18a:	68c3      	ldr	r3, [r0, #12]
   3f18c:	68db      	ldr	r3, [r3, #12]
   3f18e:	739a      	strb	r2, [r3, #14]
}
   3f190:	4770      	bx	lr

0003f192 <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   3f192:	68c3      	ldr	r3, [r0, #12]
   3f194:	68db      	ldr	r3, [r3, #12]
   3f196:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3f198:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   3f19c:	b962      	cbnz	r2, 3f1b8 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   3f19e:	6842      	ldr	r2, [r0, #4]
   3f1a0:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f1a2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   3f1a6:	b140      	cbz	r0, 3f1ba <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   3f1a8:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   3f1ac:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   3f1b0:	d003      	beq.n	3f1ba <uarte_nrfx_irq_tx_ready_complete+0x28>
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3f1b2:	2001      	movs	r0, #1
		data->int_driven->fifo_fill_lock = 0;
   3f1b4:	6119      	str	r1, [r3, #16]
   3f1b6:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   3f1b8:	2000      	movs	r0, #0
}
   3f1ba:	4770      	bx	lr

0003f1bc <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   3f1bc:	6843      	ldr	r3, [r0, #4]
   3f1be:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   3f1c0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   3f1c4:	3800      	subs	r0, #0
   3f1c6:	bf18      	it	ne
   3f1c8:	2001      	movne	r0, #1
   3f1ca:	4770      	bx	lr

0003f1cc <uarte_nrfx_irq_rx_enable>:
    p_reg->INTENSET = mask;
   3f1cc:	2210      	movs	r2, #16
	return config->uarte_regs;
   3f1ce:	6843      	ldr	r3, [r0, #4]
   3f1d0:	681b      	ldr	r3, [r3, #0]
   3f1d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f1d6:	4770      	bx	lr

0003f1d8 <uarte_nrfx_irq_rx_disable>:
    p_reg->INTENCLR = mask;
   3f1d8:	2210      	movs	r2, #16
	return config->uarte_regs;
   3f1da:	6843      	ldr	r3, [r0, #4]
   3f1dc:	681b      	ldr	r3, [r3, #0]
   3f1de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f1e2:	4770      	bx	lr

0003f1e4 <uarte_nrfx_irq_err_enable>:
    p_reg->INTENSET = mask;
   3f1e4:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3f1e8:	6843      	ldr	r3, [r0, #4]
   3f1ea:	681b      	ldr	r3, [r3, #0]
   3f1ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   3f1f0:	4770      	bx	lr

0003f1f2 <uarte_nrfx_irq_err_disable>:
    p_reg->INTENCLR = mask;
   3f1f2:	f44f 7200 	mov.w	r2, #512	; 0x200
	return config->uarte_regs;
   3f1f6:	6843      	ldr	r3, [r0, #4]
   3f1f8:	681b      	ldr	r3, [r3, #0]
   3f1fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   3f1fe:	4770      	bx	lr

0003f200 <uarte_nrfx_irq_update>:
}
   3f200:	2001      	movs	r0, #1
   3f202:	4770      	bx	lr

0003f204 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   3f204:	68c3      	ldr	r3, [r0, #12]
   3f206:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   3f208:	e9c3 1200 	strd	r1, r2, [r3]
}
   3f20c:	4770      	bx	lr

0003f20e <uarte_nrfx_irq_is_pending>:
{
   3f20e:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   3f210:	6843      	ldr	r3, [r0, #4]
{
   3f212:	4604      	mov	r4, r0
	return config->uarte_regs;
   3f214:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   3f216:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   3f21a:	025b      	lsls	r3, r3, #9
   3f21c:	d405      	bmi.n	3f22a <uarte_nrfx_irq_is_pending+0x1c>
   3f21e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   3f222:	f010 0010 	ands.w	r0, r0, #16
   3f226:	d106      	bne.n	3f236 <uarte_nrfx_irq_is_pending+0x28>
}
   3f228:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   3f22a:	f7ff ffb2 	bl	3f192 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   3f22e:	2800      	cmp	r0, #0
   3f230:	d0f5      	beq.n	3f21e <uarte_nrfx_irq_is_pending+0x10>
		||
   3f232:	2001      	movs	r0, #1
   3f234:	e7f8      	b.n	3f228 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   3f236:	4620      	mov	r0, r4
   3f238:	f7ff ffc0 	bl	3f1bc <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   3f23c:	3800      	subs	r0, #0
   3f23e:	bf18      	it	ne
   3f240:	2001      	movne	r0, #1
   3f242:	e7f1      	b.n	3f228 <uarte_nrfx_irq_is_pending+0x1a>

0003f244 <entropy_cc3xx_rng_init>:
{
	/* No initialization is required */
	(void)dev;

	return 0;
}
   3f244:	2000      	movs	r0, #0
   3f246:	4770      	bx	lr

0003f248 <parse_hex4>:
    for (i = 0; i < 4; i++)
   3f248:	2200      	movs	r2, #0
{
   3f24a:	b510      	push	{r4, lr}
   3f24c:	4604      	mov	r4, r0
    unsigned int h = 0;
   3f24e:	4610      	mov	r0, r2
        if ((input[i] >= '0') && (input[i] <= '9'))
   3f250:	5ca1      	ldrb	r1, [r4, r2]
   3f252:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   3f256:	2b09      	cmp	r3, #9
   3f258:	d80b      	bhi.n	3f272 <parse_hex4+0x2a>
            h += (unsigned int) input[i] - '0';
   3f25a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
        if (i < 3)
   3f25e:	2a03      	cmp	r2, #3
            h += (unsigned int) 10 + input[i] - 'a';
   3f260:	eb01 0003 	add.w	r0, r1, r3
    for (i = 0; i < 4; i++)
   3f264:	f102 0201 	add.w	r2, r2, #1
            h = h << 4;
   3f268:	bf18      	it	ne
   3f26a:	0100      	lslne	r0, r0, #4
    for (i = 0; i < 4; i++)
   3f26c:	2a04      	cmp	r2, #4
   3f26e:	d1ef      	bne.n	3f250 <parse_hex4+0x8>
}
   3f270:	bd10      	pop	{r4, pc}
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
   3f272:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   3f276:	2b05      	cmp	r3, #5
   3f278:	d802      	bhi.n	3f280 <parse_hex4+0x38>
            h += (unsigned int) 10 + input[i] - 'A';
   3f27a:	f1a0 0337 	sub.w	r3, r0, #55	; 0x37
   3f27e:	e7ee      	b.n	3f25e <parse_hex4+0x16>
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
   3f280:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   3f284:	2b05      	cmp	r3, #5
   3f286:	d802      	bhi.n	3f28e <parse_hex4+0x46>
            h += (unsigned int) 10 + input[i] - 'a';
   3f288:	f1a0 0357 	sub.w	r3, r0, #87	; 0x57
   3f28c:	e7e7      	b.n	3f25e <parse_hex4+0x16>
            return 0;
   3f28e:	2000      	movs	r0, #0
   3f290:	e7ee      	b.n	3f270 <parse_hex4+0x28>

0003f292 <buffer_skip_whitespace>:
{
   3f292:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->content == NULL))
   3f294:	b140      	cbz	r0, 3f2a8 <buffer_skip_whitespace+0x16>
   3f296:	6801      	ldr	r1, [r0, #0]
   3f298:	b171      	cbz	r1, 3f2b8 <buffer_skip_whitespace+0x26>
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   3f29a:	6842      	ldr	r2, [r0, #4]
   3f29c:	6883      	ldr	r3, [r0, #8]
   3f29e:	4293      	cmp	r3, r2
   3f2a0:	d206      	bcs.n	3f2b0 <buffer_skip_whitespace+0x1e>
   3f2a2:	5ccc      	ldrb	r4, [r1, r3]
   3f2a4:	2c20      	cmp	r4, #32
   3f2a6:	d900      	bls.n	3f2aa <buffer_skip_whitespace+0x18>
}
   3f2a8:	bd10      	pop	{r4, pc}
       buffer->offset++;
   3f2aa:	3301      	adds	r3, #1
   3f2ac:	6083      	str	r3, [r0, #8]
   3f2ae:	e7f5      	b.n	3f29c <buffer_skip_whitespace+0xa>
    if (buffer->offset == buffer->length)
   3f2b0:	d1fa      	bne.n	3f2a8 <buffer_skip_whitespace+0x16>
        buffer->offset--;
   3f2b2:	3a01      	subs	r2, #1
   3f2b4:	6082      	str	r2, [r0, #8]
   3f2b6:	e7f7      	b.n	3f2a8 <buffer_skip_whitespace+0x16>
        return NULL;
   3f2b8:	4608      	mov	r0, r1
   3f2ba:	e7f5      	b.n	3f2a8 <buffer_skip_whitespace+0x16>

0003f2bc <get_array_item>:
    if (array == NULL)
   3f2bc:	b110      	cbz	r0, 3f2c4 <get_array_item+0x8>
    current_child = array->child;
   3f2be:	6880      	ldr	r0, [r0, #8]
    while ((current_child != NULL) && (index > 0))
   3f2c0:	b100      	cbz	r0, 3f2c4 <get_array_item+0x8>
   3f2c2:	b901      	cbnz	r1, 3f2c6 <get_array_item+0xa>
}
   3f2c4:	4770      	bx	lr
        current_child = current_child->next;
   3f2c6:	6800      	ldr	r0, [r0, #0]
        index--;
   3f2c8:	3901      	subs	r1, #1
        current_child = current_child->next;
   3f2ca:	e7f9      	b.n	3f2c0 <get_array_item+0x4>

0003f2cc <update_offset>:
{
   3f2cc:	b510      	push	{r4, lr}
    if ((buffer == NULL) || (buffer->buffer == NULL))
   3f2ce:	4604      	mov	r4, r0
   3f2d0:	b140      	cbz	r0, 3f2e4 <update_offset+0x18>
   3f2d2:	6803      	ldr	r3, [r0, #0]
   3f2d4:	b133      	cbz	r3, 3f2e4 <update_offset+0x18>
    buffer_pointer = buffer->buffer + buffer->offset;
   3f2d6:	6880      	ldr	r0, [r0, #8]
    buffer->offset += strlen((const char*)buffer_pointer);
   3f2d8:	4418      	add	r0, r3
   3f2da:	f7dd ffbf 	bl	1d25c <strlen>
   3f2de:	68a3      	ldr	r3, [r4, #8]
   3f2e0:	4418      	add	r0, r3
   3f2e2:	60a0      	str	r0, [r4, #8]
}
   3f2e4:	bd10      	pop	{r4, pc}

0003f2e6 <add_item_to_array>:
    if ((item == NULL) || (array == NULL))
   3f2e6:	b161      	cbz	r1, 3f302 <add_item_to_array+0x1c>
   3f2e8:	b160      	cbz	r0, 3f304 <add_item_to_array+0x1e>
    child = array->child;
   3f2ea:	6883      	ldr	r3, [r0, #8]
    if (child == NULL)
   3f2ec:	b913      	cbnz	r3, 3f2f4 <add_item_to_array+0xe>
        array->child = item;
   3f2ee:	6081      	str	r1, [r0, #8]
}
   3f2f0:	2001      	movs	r0, #1
   3f2f2:	4770      	bx	lr
        while (child->next)
   3f2f4:	461a      	mov	r2, r3
   3f2f6:	681b      	ldr	r3, [r3, #0]
   3f2f8:	2b00      	cmp	r3, #0
   3f2fa:	d1fb      	bne.n	3f2f4 <add_item_to_array+0xe>
    prev->next = item;
   3f2fc:	6011      	str	r1, [r2, #0]
    item->prev = prev;
   3f2fe:	604a      	str	r2, [r1, #4]
   3f300:	e7f6      	b.n	3f2f0 <add_item_to_array+0xa>
        return false;
   3f302:	4608      	mov	r0, r1
}
   3f304:	4770      	bx	lr

0003f306 <cJSON_New_Item.isra.0>:
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   3f306:	4603      	mov	r3, r0
   3f308:	b510      	push	{r4, lr}
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   3f30a:	2028      	movs	r0, #40	; 0x28
   3f30c:	4798      	blx	r3
    if (node)
   3f30e:	4604      	mov	r4, r0
   3f310:	b118      	cbz	r0, 3f31a <cJSON_New_Item.isra.0+0x14>
   3f312:	2228      	movs	r2, #40	; 0x28
   3f314:	2100      	movs	r1, #0
   3f316:	f002 fce2 	bl	41cde <memset>
}
   3f31a:	4620      	mov	r0, r4
   3f31c:	bd10      	pop	{r4, pc}

0003f31e <ensure>:
{
   3f31e:	b570      	push	{r4, r5, r6, lr}
    if ((p == NULL) || (p->buffer == NULL))
   3f320:	4604      	mov	r4, r0
   3f322:	b1b8      	cbz	r0, 3f354 <ensure+0x36>
   3f324:	6805      	ldr	r5, [r0, #0]
   3f326:	b165      	cbz	r5, 3f342 <ensure+0x24>
    if ((p->length > 0) && (p->offset >= p->length))
   3f328:	6842      	ldr	r2, [r0, #4]
   3f32a:	b112      	cbz	r2, 3f332 <ensure+0x14>
   3f32c:	6883      	ldr	r3, [r0, #8]
   3f32e:	429a      	cmp	r2, r3
   3f330:	d910      	bls.n	3f354 <ensure+0x36>
    if (needed > INT_MAX)
   3f332:	2900      	cmp	r1, #0
   3f334:	db0e      	blt.n	3f354 <ensure+0x36>
    needed += p->offset + 1;
   3f336:	68a0      	ldr	r0, [r4, #8]
   3f338:	4401      	add	r1, r0
   3f33a:	1c4b      	adds	r3, r1, #1
    if (needed <= p->length)
   3f33c:	429a      	cmp	r2, r3
   3f33e:	d302      	bcc.n	3f346 <ensure+0x28>
        return p->buffer + p->offset;
   3f340:	4405      	add	r5, r0
}
   3f342:	4628      	mov	r0, r5
   3f344:	bd70      	pop	{r4, r5, r6, pc}
    if (p->noalloc) {
   3f346:	6922      	ldr	r2, [r4, #16]
   3f348:	b922      	cbnz	r2, 3f354 <ensure+0x36>
    if (needed > (INT_MAX / 2))
   3f34a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   3f34e:	d303      	bcc.n	3f358 <ensure+0x3a>
        if (needed <= INT_MAX)
   3f350:	2b00      	cmp	r3, #0
   3f352:	da0f      	bge.n	3f374 <ensure+0x56>
        return NULL;
   3f354:	2500      	movs	r5, #0
   3f356:	e7f4      	b.n	3f342 <ensure+0x24>
        newsize = needed + 1;
   3f358:	1c8e      	adds	r6, r1, #2
    if (p->hooks.reallocate != NULL)
   3f35a:	6a23      	ldr	r3, [r4, #32]
   3f35c:	b16b      	cbz	r3, 3f37a <ensure+0x5c>
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   3f35e:	4628      	mov	r0, r5
   3f360:	4631      	mov	r1, r6
   3f362:	4798      	blx	r3
        if (newbuffer == NULL)
   3f364:	4605      	mov	r5, r0
   3f366:	b9b0      	cbnz	r0, 3f396 <ensure+0x78>
            p->hooks.deallocate(p->buffer);
   3f368:	69e3      	ldr	r3, [r4, #28]
   3f36a:	6820      	ldr	r0, [r4, #0]
   3f36c:	4798      	blx	r3
            p->buffer = NULL;
   3f36e:	e9c4 5500 	strd	r5, r5, [r4]
            return NULL;
   3f372:	e7e6      	b.n	3f342 <ensure+0x24>
            newsize = INT_MAX;
   3f374:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   3f378:	e7ef      	b.n	3f35a <ensure+0x3c>
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   3f37a:	4630      	mov	r0, r6
   3f37c:	69a3      	ldr	r3, [r4, #24]
   3f37e:	4798      	blx	r3
        if (!newbuffer)
   3f380:	4605      	mov	r5, r0
   3f382:	2800      	cmp	r0, #0
   3f384:	d0f0      	beq.n	3f368 <ensure+0x4a>
            memcpy(newbuffer, p->buffer, p->offset + 1);
   3f386:	68a2      	ldr	r2, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f388:	6821      	ldr	r1, [r4, #0]
   3f38a:	3201      	adds	r2, #1
   3f38c:	f002 fc87 	bl	41c9e <memcpy>
        p->hooks.deallocate(p->buffer);
   3f390:	69e3      	ldr	r3, [r4, #28]
   3f392:	6820      	ldr	r0, [r4, #0]
   3f394:	4798      	blx	r3
    return newbuffer + p->offset;
   3f396:	68a3      	ldr	r3, [r4, #8]
    p->buffer = newbuffer;
   3f398:	e9c4 5600 	strd	r5, r6, [r4]
    return newbuffer + p->offset;
   3f39c:	441d      	add	r5, r3
   3f39e:	e7d0      	b.n	3f342 <ensure+0x24>

0003f3a0 <cJSON_Parse>:
    return cJSON_ParseWithOpts(value, 0, 0);
   3f3a0:	2200      	movs	r2, #0
   3f3a2:	4611      	mov	r1, r2
   3f3a4:	f7e9 bd32 	b.w	28e0c <cJSON_ParseWithOpts>

0003f3a8 <cJSON_PrintUnformatted>:
    return (char*)print(item, false, &global_hooks);
   3f3a8:	2100      	movs	r1, #0
   3f3aa:	f7e9 bc9b 	b.w	28ce4 <print.constprop.0>

0003f3ae <cJSON_GetArraySize>:
    if (array == NULL)
   3f3ae:	b110      	cbz	r0, 3f3b6 <cJSON_GetArraySize+0x8>
    child = array->child;
   3f3b0:	6883      	ldr	r3, [r0, #8]
    size_t size = 0;
   3f3b2:	2000      	movs	r0, #0
    while(child != NULL)
   3f3b4:	b903      	cbnz	r3, 3f3b8 <cJSON_GetArraySize+0xa>
}
   3f3b6:	4770      	bx	lr
        child = child->next;
   3f3b8:	681b      	ldr	r3, [r3, #0]
        size++;
   3f3ba:	3001      	adds	r0, #1
        child = child->next;
   3f3bc:	e7fa      	b.n	3f3b4 <cJSON_GetArraySize+0x6>

0003f3be <cJSON_GetArrayItem>:
    if (index < 0)
   3f3be:	2900      	cmp	r1, #0
   3f3c0:	db01      	blt.n	3f3c6 <cJSON_GetArrayItem+0x8>
    return get_array_item(array, (size_t)index);
   3f3c2:	f7ff bf7b 	b.w	3f2bc <get_array_item>
}
   3f3c6:	2000      	movs	r0, #0
   3f3c8:	4770      	bx	lr

0003f3ca <cJSON_GetObjectItem>:
    return get_object_item(object, string, false);
   3f3ca:	2200      	movs	r2, #0
   3f3cc:	f7e9 b9b4 	b.w	28738 <get_object_item>

0003f3d0 <cJSON_HasObjectItem>:
{
   3f3d0:	b508      	push	{r3, lr}
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
   3f3d2:	f7ff fffa 	bl	3f3ca <cJSON_GetObjectItem>
}
   3f3d6:	3800      	subs	r0, #0
   3f3d8:	bf18      	it	ne
   3f3da:	2001      	movne	r0, #1
   3f3dc:	bd08      	pop	{r3, pc}

0003f3de <cJSON_AddItemToArray>:
    add_item_to_array(array, item);
   3f3de:	f7ff bf82 	b.w	3f2e6 <add_item_to_array>

0003f3e2 <cJSON_AddItemToObject>:
    add_item_to_object(object, string, item, &global_hooks, false);
   3f3e2:	2300      	movs	r3, #0
   3f3e4:	f7e9 bc56 	b.w	28c94 <add_item_to_object.constprop.0>

0003f3e8 <cJSON_DetachItemViaPointer>:
    if ((parent == NULL) || (item == NULL))
   3f3e8:	b180      	cbz	r0, 3f40c <cJSON_DetachItemViaPointer+0x24>
   3f3ea:	b169      	cbz	r1, 3f408 <cJSON_DetachItemViaPointer+0x20>
    if (item->prev != NULL)
   3f3ec:	684a      	ldr	r2, [r1, #4]
   3f3ee:	b10a      	cbz	r2, 3f3f4 <cJSON_DetachItemViaPointer+0xc>
   3f3f0:	680b      	ldr	r3, [r1, #0]
        item->prev->next = item->next;
   3f3f2:	6013      	str	r3, [r2, #0]
    if (item->next != NULL)
   3f3f4:	680b      	ldr	r3, [r1, #0]
   3f3f6:	b103      	cbz	r3, 3f3fa <cJSON_DetachItemViaPointer+0x12>
        item->next->prev = item->prev;
   3f3f8:	605a      	str	r2, [r3, #4]
    if (item == parent->child)
   3f3fa:	6882      	ldr	r2, [r0, #8]
   3f3fc:	428a      	cmp	r2, r1
        parent->child = item->next;
   3f3fe:	bf08      	it	eq
   3f400:	6083      	streq	r3, [r0, #8]
    item->prev = NULL;
   3f402:	2300      	movs	r3, #0
    item->next = NULL;
   3f404:	e9c1 3300 	strd	r3, r3, [r1]
}
   3f408:	4608      	mov	r0, r1
   3f40a:	4770      	bx	lr
        return NULL;
   3f40c:	4601      	mov	r1, r0
   3f40e:	e7fb      	b.n	3f408 <cJSON_DetachItemViaPointer+0x20>

0003f410 <cJSON_DetachItemFromObject>:
{
   3f410:	b510      	push	{r4, lr}
   3f412:	4604      	mov	r4, r0
    cJSON *to_detach = cJSON_GetObjectItem(object, string);
   3f414:	f7ff ffd9 	bl	3f3ca <cJSON_GetObjectItem>
   3f418:	4601      	mov	r1, r0
    return cJSON_DetachItemViaPointer(object, to_detach);
   3f41a:	4620      	mov	r0, r4
}
   3f41c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return cJSON_DetachItemViaPointer(object, to_detach);
   3f420:	f7ff bfe2 	b.w	3f3e8 <cJSON_DetachItemViaPointer>

0003f424 <cJSON_AddNullToObject>:
{
   3f424:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f426:	4605      	mov	r5, r0
   3f428:	9101      	str	r1, [sp, #4]
    cJSON *null = cJSON_CreateNull();
   3f42a:	f7e9 fd5f 	bl	28eec <cJSON_CreateNull>
    if (add_item_to_object(object, name, null, &global_hooks, false))
   3f42e:	2300      	movs	r3, #0
   3f430:	4602      	mov	r2, r0
    cJSON *null = cJSON_CreateNull();
   3f432:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, null, &global_hooks, false))
   3f434:	9901      	ldr	r1, [sp, #4]
   3f436:	4628      	mov	r0, r5
   3f438:	f7e9 fc2c 	bl	28c94 <add_item_to_object.constprop.0>
   3f43c:	4605      	mov	r5, r0
   3f43e:	b918      	cbnz	r0, 3f448 <cJSON_AddNullToObject+0x24>
    cJSON_Delete(null);
   3f440:	4620      	mov	r0, r4
   3f442:	f7e9 fcbf 	bl	28dc4 <cJSON_Delete>
    return NULL;
   3f446:	462c      	mov	r4, r5
}
   3f448:	4620      	mov	r0, r4
   3f44a:	b003      	add	sp, #12
   3f44c:	bd30      	pop	{r4, r5, pc}

0003f44e <cJSON_AddNumberToObject>:
{
   3f44e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3f450:	4605      	mov	r5, r0
   3f452:	9101      	str	r1, [sp, #4]
    cJSON *number_item = cJSON_CreateNumber(number);
   3f454:	f7de facc 	bl	1d9f0 <cJSON_CreateNumber>
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3f458:	2300      	movs	r3, #0
   3f45a:	4602      	mov	r2, r0
    cJSON *number_item = cJSON_CreateNumber(number);
   3f45c:	4604      	mov	r4, r0
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
   3f45e:	9901      	ldr	r1, [sp, #4]
   3f460:	4628      	mov	r0, r5
   3f462:	f7e9 fc17 	bl	28c94 <add_item_to_object.constprop.0>
   3f466:	4605      	mov	r5, r0
   3f468:	b918      	cbnz	r0, 3f472 <cJSON_AddNumberToObject+0x24>
    cJSON_Delete(number_item);
   3f46a:	4620      	mov	r0, r4
   3f46c:	f7e9 fcaa 	bl	28dc4 <cJSON_Delete>
    return NULL;
   3f470:	462c      	mov	r4, r5
}
   3f472:	4620      	mov	r0, r4
   3f474:	b003      	add	sp, #12
   3f476:	bd30      	pop	{r4, r5, pc}

0003f478 <cJSON_IsTrue>:
    if (item == NULL)
   3f478:	b118      	cbz	r0, 3f482 <cJSON_IsTrue+0xa>
    return (item->type & 0xff) == cJSON_True;
   3f47a:	7b00      	ldrb	r0, [r0, #12]
   3f47c:	1e83      	subs	r3, r0, #2
   3f47e:	4258      	negs	r0, r3
   3f480:	4158      	adcs	r0, r3
}
   3f482:	4770      	bx	lr

0003f484 <cJSON_IsBool>:
    if (item == NULL)
   3f484:	b120      	cbz	r0, 3f490 <cJSON_IsBool+0xc>
    return (item->type & (cJSON_True | cJSON_False)) != 0;
   3f486:	68c0      	ldr	r0, [r0, #12]
   3f488:	f010 0003 	ands.w	r0, r0, #3
   3f48c:	bf18      	it	ne
   3f48e:	2001      	movne	r0, #1
}
   3f490:	4770      	bx	lr

0003f492 <cJSON_IsNull>:
    if (item == NULL)
   3f492:	b118      	cbz	r0, 3f49c <cJSON_IsNull+0xa>
    return (item->type & 0xFF) == cJSON_NULL;
   3f494:	7b00      	ldrb	r0, [r0, #12]
   3f496:	1f03      	subs	r3, r0, #4
   3f498:	4258      	negs	r0, r3
   3f49a:	4158      	adcs	r0, r3
}
   3f49c:	4770      	bx	lr

0003f49e <cJSON_IsNumber>:
    if (item == NULL)
   3f49e:	b120      	cbz	r0, 3f4aa <cJSON_IsNumber+0xc>
    return (item->type & 0xFF) == cJSON_Number;
   3f4a0:	7b00      	ldrb	r0, [r0, #12]
   3f4a2:	f1a0 0308 	sub.w	r3, r0, #8
   3f4a6:	4258      	negs	r0, r3
   3f4a8:	4158      	adcs	r0, r3
}
   3f4aa:	4770      	bx	lr

0003f4ac <cJSON_IsString>:
    if (item == NULL)
   3f4ac:	b120      	cbz	r0, 3f4b8 <cJSON_IsString+0xc>
    return (item->type & 0xFF) == cJSON_String;
   3f4ae:	7b00      	ldrb	r0, [r0, #12]
   3f4b0:	f1a0 0310 	sub.w	r3, r0, #16
   3f4b4:	4258      	negs	r0, r3
   3f4b6:	4158      	adcs	r0, r3
}
   3f4b8:	4770      	bx	lr

0003f4ba <cJSON_GetStringValue>:
CJSON_PUBLIC(char *) cJSON_GetStringValue(cJSON *item) {
   3f4ba:	b508      	push	{r3, lr}
   3f4bc:	4602      	mov	r2, r0
    if (!cJSON_IsString(item)) {
   3f4be:	f7ff fff5 	bl	3f4ac <cJSON_IsString>
   3f4c2:	b100      	cbz	r0, 3f4c6 <cJSON_GetStringValue+0xc>
    return item->valuestring;
   3f4c4:	6910      	ldr	r0, [r2, #16]
}
   3f4c6:	bd08      	pop	{r3, pc}

0003f4c8 <cJSON_IsArray>:
    if (item == NULL)
   3f4c8:	b120      	cbz	r0, 3f4d4 <cJSON_IsArray+0xc>
    return (item->type & 0xFF) == cJSON_Array;
   3f4ca:	7b00      	ldrb	r0, [r0, #12]
   3f4cc:	f1a0 0320 	sub.w	r3, r0, #32
   3f4d0:	4258      	negs	r0, r3
   3f4d2:	4158      	adcs	r0, r3
}
   3f4d4:	4770      	bx	lr

0003f4d6 <cJSON_IsObject>:
    if (item == NULL)
   3f4d6:	b120      	cbz	r0, 3f4e2 <cJSON_IsObject+0xc>
    return (item->type & 0xFF) == cJSON_Object;
   3f4d8:	7b00      	ldrb	r0, [r0, #12]
   3f4da:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
   3f4de:	4258      	negs	r0, r3
   3f4e0:	4158      	adcs	r0, r3
}
   3f4e2:	4770      	bx	lr

0003f4e4 <free_fn_hook>:
static void free_fn_hook(void *p_ptr) { k_free(p_ptr); }
   3f4e4:	f002 bb98 	b.w	41c18 <k_free>

0003f4e8 <malloc_fn_hook>:
static void *malloc_fn_hook(size_t sz) { return k_malloc(sz); }
   3f4e8:	4601      	mov	r1, r0
	return k_aligned_alloc(sizeof(void *), size);
   3f4ea:	2004      	movs	r0, #4
   3f4ec:	f7fb b9e2 	b.w	3a8b4 <k_aligned_alloc>

0003f4f0 <nrf_modem_lib_shutdown>:

int nrf_modem_lib_shutdown(void)
{
   3f4f0:	b508      	push	{r3, lr}
#ifdef CONFIG_LTE_LINK_CONTROL
	lte_lc_deinit();
   3f4f2:	f7ec f9f3 	bl	2b8dc <lte_lc_deinit>
#endif
	nrf_modem_shutdown();
   3f4f6:	f7f6 ffdf 	bl	364b8 <nrf_modem_shutdown>

	return 0;
}
   3f4fa:	2000      	movs	r0, #0
   3f4fc:	bd08      	pop	{r3, pc}

0003f4fe <trace_proxy_irq_handler>:
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3f4fe:	4668      	mov	r0, sp
   3f500:	f020 0107 	bic.w	r1, r0, #7
   3f504:	468d      	mov	sp, r1
   3f506:	b501      	push	{r0, lr}
	nrf_modem_os_trace_irq_handler();
   3f508:	f7f3 fbbc 	bl	32c84 <nrf_modem_os_trace_irq_handler>
	ISR_DIRECT_PM(); /* PM done after servicing interrupt for best latency
   3f50c:	f7e7 f84a 	bl	265a4 <_arch_isr_direct_pm>
   3f510:	f7e7 fc04 	bl	26d1c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(trace_proxy_irq_handler)
   3f514:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3f518:	4685      	mov	sp, r0
   3f51a:	4770      	bx	lr

0003f51c <trace_task_create>:
{
   3f51c:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(TRACE_IRQ, TRACE_IRQ_PRIORITY,
   3f51e:	201d      	movs	r0, #29
   3f520:	2200      	movs	r2, #0
   3f522:	2106      	movs	r1, #6
   3f524:	f7e7 f80c 	bl	26540 <z_arm_irq_priority_set>
}
   3f528:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(TRACE_IRQ);
   3f52c:	201d      	movs	r0, #29
   3f52e:	f7e6 bfe9 	b.w	26504 <arch_irq_enable>

0003f532 <read_task_create>:
{
   3f532:	b508      	push	{r3, lr}
	IRQ_DIRECT_CONNECT(NRF_MODEM_APPLICATION_IRQ,
   3f534:	201c      	movs	r0, #28
   3f536:	2200      	movs	r2, #0
   3f538:	2106      	movs	r1, #6
   3f53a:	f7e7 f801 	bl	26540 <z_arm_irq_priority_set>
}
   3f53e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	irq_enable(NRF_MODEM_APPLICATION_IRQ);
   3f542:	201c      	movs	r0, #28
   3f544:	f7e6 bfde 	b.w	26504 <arch_irq_enable>

0003f548 <nrf_modem_os_trace_put>:
		remaining_bytes -= transfer_len;
	}
#endif

	return 0;
}
   3f548:	2000      	movs	r0, #0
   3f54a:	4770      	bx	lr

0003f54c <z_to_nrf_flags>:
{
   3f54c:	4603      	mov	r3, r0
		nrf_flags |= NRF_MSG_DONTWAIT;
   3f54e:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   3f552:	bf18      	it	ne
   3f554:	2002      	movne	r0, #2
	if (z_flags & MSG_PEEK) {
   3f556:	0799      	lsls	r1, r3, #30
		nrf_flags |= NRF_MSG_PEEK;
   3f558:	bf48      	it	mi
   3f55a:	f040 0008 	orrmi.w	r0, r0, #8
	if (z_flags & MSG_TRUNC) {
   3f55e:	06da      	lsls	r2, r3, #27
		nrf_flags |= NRF_MSG_TRUNC;
   3f560:	bf48      	it	mi
   3f562:	f040 0020 	orrmi.w	r0, r0, #32
	if (z_flags & MSG_WAITALL) {
   3f566:	069b      	lsls	r3, r3, #26
		nrf_flags |= NRF_MSG_WAITALL;
   3f568:	bf48      	it	mi
   3f56a:	f040 0010 	orrmi.w	r0, r0, #16
}
   3f56e:	4770      	bx	lr

0003f570 <z_to_nrf_family>:
	switch (z_family) {
   3f570:	2806      	cmp	r0, #6
   3f572:	d80a      	bhi.n	3f58a <z_to_nrf_family+0x1a>
   3f574:	b198      	cbz	r0, 3f59e <z_to_nrf_family+0x2e>
   3f576:	3801      	subs	r0, #1
   3f578:	2805      	cmp	r0, #5
   3f57a:	d810      	bhi.n	3f59e <z_to_nrf_family+0x2e>
   3f57c:	e8df f000 	tbb	[pc, r0]
   3f580:	0f0d0312 	.word	0x0f0d0312
   3f584:	0b0f      	.short	0x0b0f
   3f586:	200a      	movs	r0, #10
   3f588:	4770      	bx	lr
   3f58a:	2866      	cmp	r0, #102	; 0x66
		return NRF_AF_LTE;
   3f58c:	bf14      	ite	ne
   3f58e:	f06f 0069 	mvnne.w	r0, #105	; 0x69
   3f592:	2066      	moveq	r0, #102	; 0x66
   3f594:	4770      	bx	lr
		return NRF_AF_LOCAL;
   3f596:	2001      	movs	r0, #1
   3f598:	4770      	bx	lr
		return NRF_AF_PACKET;
   3f59a:	2005      	movs	r0, #5
   3f59c:	4770      	bx	lr
		return -EAFNOSUPPORT;
   3f59e:	f06f 0069 	mvn.w	r0, #105	; 0x69
   3f5a2:	4770      	bx	lr
		return NRF_AF_INET;
   3f5a4:	2002      	movs	r0, #2
}
   3f5a6:	4770      	bx	lr

0003f5a8 <z_to_nrf_protocol>:
	switch (proto) {
   3f5a8:	f240 1311 	movw	r3, #273	; 0x111
   3f5ac:	4298      	cmp	r0, r3
   3f5ae:	d023      	beq.n	3f5f8 <z_to_nrf_protocol+0x50>
   3f5b0:	f5b0 7f89 	cmp.w	r0, #274	; 0x112
   3f5b4:	da11      	bge.n	3f5da <z_to_nrf_protocol+0x32>
   3f5b6:	2811      	cmp	r0, #17
   3f5b8:	d021      	beq.n	3f5fe <z_to_nrf_protocol+0x56>
   3f5ba:	dc06      	bgt.n	3f5ca <z_to_nrf_protocol+0x22>
   3f5bc:	b300      	cbz	r0, 3f600 <z_to_nrf_protocol+0x58>
		return NRF_IPPROTO_TCP;
   3f5be:	2806      	cmp	r0, #6
   3f5c0:	bf14      	ite	ne
   3f5c2:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3f5c6:	2001      	moveq	r0, #1
   3f5c8:	4770      	bx	lr
		return NRF_SPROTO_TLS1v2;
   3f5ca:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   3f5ce:	bf14      	ite	ne
   3f5d0:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3f5d4:	f44f 7082 	moveq.w	r0, #260	; 0x104
   3f5d8:	4770      	bx	lr
	switch (proto) {
   3f5da:	f240 2302 	movw	r3, #514	; 0x202
   3f5de:	4298      	cmp	r0, r3
   3f5e0:	d00e      	beq.n	3f600 <z_to_nrf_protocol+0x58>
   3f5e2:	f240 2303 	movw	r3, #515	; 0x203
   3f5e6:	4298      	cmp	r0, r3
   3f5e8:	d00a      	beq.n	3f600 <z_to_nrf_protocol+0x58>
   3f5ea:	f240 2301 	movw	r3, #513	; 0x201
		return -EPROTONOSUPPORT;
   3f5ee:	4298      	cmp	r0, r3
   3f5f0:	bf18      	it	ne
   3f5f2:	f06f 007a 	mvnne.w	r0, #122	; 0x7a
   3f5f6:	4770      	bx	lr
		return NRF_SPROTO_DTLS1v2;
   3f5f8:	f44f 7087 	mov.w	r0, #270	; 0x10e
   3f5fc:	4770      	bx	lr
	switch (proto) {
   3f5fe:	2002      	movs	r0, #2
}
   3f600:	4770      	bx	lr

0003f602 <nrf91_socket_is_supported>:
}
   3f602:	2001      	movs	r0, #1
   3f604:	4770      	bx	lr

0003f606 <nrf91_nrf_modem_lib_socket_offload_init>:
}
   3f606:	2000      	movs	r0, #0
   3f608:	4770      	bx	lr

0003f60a <nrf91_socket_offload_getsockopt>:
{
   3f60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f60e:	461d      	mov	r5, r3
	struct nrf_timeval nrf_timeo = {0, 0};
   3f610:	2300      	movs	r3, #0
{
   3f612:	b086      	sub	sp, #24
   3f614:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	struct nrf_timeval nrf_timeo = {0, 0};
   3f618:	e9cd 3304 	strd	r3, r3, [sp, #16]
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3f61c:	f8d8 3000 	ldr.w	r3, [r8]
{
   3f620:	460c      	mov	r4, r1
	nrf_socklen_t nrf_optlen = (nrf_socklen_t)*optlen;
   3f622:	9303      	str	r3, [sp, #12]
	switch (z_in_level) {
   3f624:	f240 2302 	movw	r3, #514	; 0x202
   3f628:	4299      	cmp	r1, r3
{
   3f62a:	4616      	mov	r6, r2
	int sd = OBJ_TO_SD(obj);
   3f62c:	f100 37ff 	add.w	r7, r0, #4294967295
	switch (z_in_level) {
   3f630:	d005      	beq.n	3f63e <nrf91_socket_offload_getsockopt+0x34>
   3f632:	dc31      	bgt.n	3f698 <nrf91_socket_offload_getsockopt+0x8e>
   3f634:	2901      	cmp	r1, #1
   3f636:	d002      	beq.n	3f63e <nrf91_socket_offload_getsockopt+0x34>
   3f638:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f63c:	d13d      	bne.n	3f6ba <nrf91_socket_offload_getsockopt+0xb0>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f63e:	4631      	mov	r1, r6
   3f640:	4620      	mov	r0, r4
   3f642:	aa02      	add	r2, sp, #8
   3f644:	f7ea f840 	bl	296c8 <z_to_nrf_optname>
   3f648:	2800      	cmp	r0, #0
   3f64a:	db36      	blt.n	3f6ba <nrf91_socket_offload_getsockopt+0xb0>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f64c:	2c01      	cmp	r4, #1
   3f64e:	d127      	bne.n	3f6a0 <nrf91_socket_offload_getsockopt+0x96>
   3f650:	f1a6 0314 	sub.w	r3, r6, #20
   3f654:	2b01      	cmp	r3, #1
   3f656:	d823      	bhi.n	3f6a0 <nrf91_socket_offload_getsockopt+0x96>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f658:	2308      	movs	r3, #8
   3f65a:	9303      	str	r3, [sp, #12]
		nrf_optval = &nrf_timeo;
   3f65c:	ab04      	add	r3, sp, #16
	retval = nrf_getsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f65e:	aa03      	add	r2, sp, #12
   3f660:	4638      	mov	r0, r7
   3f662:	9200      	str	r2, [sp, #0]
   3f664:	4621      	mov	r1, r4
   3f666:	9a02      	ldr	r2, [sp, #8]
   3f668:	f002 f8df 	bl	4182a <nrf_getsockopt>
	if ((retval == 0) && (optval != NULL)) {
   3f66c:	4607      	mov	r7, r0
   3f66e:	b978      	cbnz	r0, 3f690 <nrf91_socket_offload_getsockopt+0x86>
   3f670:	b175      	cbz	r5, 3f690 <nrf91_socket_offload_getsockopt+0x86>
		*optlen = nrf_optlen;
   3f672:	9b03      	ldr	r3, [sp, #12]
		if (level == SOL_SOCKET) {
   3f674:	2c01      	cmp	r4, #1
		*optlen = nrf_optlen;
   3f676:	f8c8 3000 	str.w	r3, [r8]
		if (level == SOL_SOCKET) {
   3f67a:	d109      	bne.n	3f690 <nrf91_socket_offload_getsockopt+0x86>
			if (optname == SO_ERROR) {
   3f67c:	2e04      	cmp	r6, #4
   3f67e:	d111      	bne.n	3f6a4 <nrf91_socket_offload_getsockopt+0x9a>
				if (*(int *)optval != 0) {
   3f680:	6828      	ldr	r0, [r5, #0]
   3f682:	b128      	cbz	r0, 3f690 <nrf91_socket_offload_getsockopt+0x86>
					nrf_modem_os_errno_set(*(int *)optval);
   3f684:	f7e9 fe20 	bl	292c8 <nrf_modem_os_errno_set>
					*(int *)optval = errno;
   3f688:	f7fe fd27 	bl	3e0da <__errno>
   3f68c:	6803      	ldr	r3, [r0, #0]
   3f68e:	602b      	str	r3, [r5, #0]
}
   3f690:	4638      	mov	r0, r7
   3f692:	b006      	add	sp, #24
   3f694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3f698:	f240 2303 	movw	r3, #515	; 0x203
   3f69c:	4299      	cmp	r1, r3
   3f69e:	e7cd      	b.n	3f63c <nrf91_socket_offload_getsockopt+0x32>
   3f6a0:	462b      	mov	r3, r5
   3f6a2:	e7dc      	b.n	3f65e <nrf91_socket_offload_getsockopt+0x54>
			} else if ((optname == SO_RCVTIMEO) ||
   3f6a4:	3e14      	subs	r6, #20
   3f6a6:	2e01      	cmp	r6, #1
   3f6a8:	d8f2      	bhi.n	3f690 <nrf91_socket_offload_getsockopt+0x86>
				((struct timeval *)optval)->tv_sec =
   3f6aa:	9b04      	ldr	r3, [sp, #16]
   3f6ac:	602b      	str	r3, [r5, #0]
				((struct timeval *)optval)->tv_usec =
   3f6ae:	9b05      	ldr	r3, [sp, #20]
   3f6b0:	606b      	str	r3, [r5, #4]
				*optlen = sizeof(struct timeval);
   3f6b2:	2308      	movs	r3, #8
   3f6b4:	f8c8 3000 	str.w	r3, [r8]
   3f6b8:	e7ea      	b.n	3f690 <nrf91_socket_offload_getsockopt+0x86>
	errno = ENOPROTOOPT;
   3f6ba:	f7fe fd0e 	bl	3e0da <__errno>
   3f6be:	236d      	movs	r3, #109	; 0x6d
	return retval;
   3f6c0:	f04f 37ff 	mov.w	r7, #4294967295
	errno = ENOPROTOOPT;
   3f6c4:	6003      	str	r3, [r0, #0]
	return retval;
   3f6c6:	e7e3      	b.n	3f690 <nrf91_socket_offload_getsockopt+0x86>

0003f6c8 <nrf91_socket_offload_listen>:
	return nrf_listen(sd, backlog);
   3f6c8:	3801      	subs	r0, #1
   3f6ca:	f002 b85c 	b.w	41786 <nrf_listen>

0003f6ce <nrf91_socket_offload_close>:
	return nrf_close(sd);
   3f6ce:	3801      	subs	r0, #1
   3f6d0:	f001 bffd 	b.w	416ce <nrf_close>

0003f6d4 <nrf91_socket_offload_freeaddrinfo>:
{
   3f6d4:	b538      	push	{r3, r4, r5, lr}
   3f6d6:	4604      	mov	r4, r0
	while (next != NULL) {
   3f6d8:	b904      	cbnz	r4, 3f6dc <nrf91_socket_offload_freeaddrinfo+0x8>
}
   3f6da:	bd38      	pop	{r3, r4, r5, pc}
		k_free(this->ai_addr);
   3f6dc:	69a0      	ldr	r0, [r4, #24]
		next = next->ai_next;
   3f6de:	6825      	ldr	r5, [r4, #0]
		k_free(this->ai_addr);
   3f6e0:	f002 fa9a 	bl	41c18 <k_free>
		k_free(this);
   3f6e4:	4620      	mov	r0, r4
   3f6e6:	f002 fa97 	bl	41c18 <k_free>
		next = next->ai_next;
   3f6ea:	462c      	mov	r4, r5
   3f6ec:	e7f4      	b.n	3f6d8 <nrf91_socket_offload_freeaddrinfo+0x4>

0003f6ee <z_to_nrf_addrinfo_hints>:
{
   3f6ee:	b538      	push	{r3, r4, r5, lr}
   3f6f0:	460c      	mov	r4, r1
   3f6f2:	4605      	mov	r5, r0
__ssp_bos_icheck3(memset, void *, int)
   3f6f4:	221c      	movs	r2, #28
   3f6f6:	2100      	movs	r1, #0
   3f6f8:	1d20      	adds	r0, r4, #4
   3f6fa:	f002 faf0 	bl	41cde <memset>
	nrf_out->ai_flags = z_to_nrf_addrinfo_flags(z_in->ai_flags);
   3f6fe:	2300      	movs	r3, #0
   3f700:	6023      	str	r3, [r4, #0]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3f702:	68eb      	ldr	r3, [r5, #12]
	switch (socktype) {
   3f704:	2b03      	cmp	r3, #3
   3f706:	d003      	beq.n	3f710 <z_to_nrf_addrinfo_hints+0x22>
   3f708:	2b04      	cmp	r3, #4
   3f70a:	bf08      	it	eq
   3f70c:	f44f 7300 	moveq.w	r3, #512	; 0x200
	family = z_to_nrf_family(z_in->ai_family);
   3f710:	8928      	ldrh	r0, [r5, #8]
	nrf_out->ai_socktype = z_to_nrf_socktype(z_in->ai_socktype);
   3f712:	60a3      	str	r3, [r4, #8]
	family = z_to_nrf_family(z_in->ai_family);
   3f714:	f7ff ff2c 	bl	3f570 <z_to_nrf_family>
	if (family == -EAFNOSUPPORT) {
   3f718:	f110 0f6a 	cmn.w	r0, #106	; 0x6a
   3f71c:	d00b      	beq.n	3f736 <z_to_nrf_addrinfo_hints+0x48>
	nrf_out->ai_family = family;
   3f71e:	6060      	str	r0, [r4, #4]
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3f720:	6928      	ldr	r0, [r5, #16]
   3f722:	f7ff ff41 	bl	3f5a8 <z_to_nrf_protocol>
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3f726:	f110 0f7b 	cmn.w	r0, #123	; 0x7b
	nrf_out->ai_protocol = z_to_nrf_protocol(z_in->ai_protocol);
   3f72a:	60e0      	str	r0, [r4, #12]
	if (nrf_out->ai_protocol == -EPROTONOSUPPORT) {
   3f72c:	d003      	beq.n	3f736 <z_to_nrf_addrinfo_hints+0x48>
	if (z_in->ai_canonname != NULL) {
   3f72e:	69e8      	ldr	r0, [r5, #28]
   3f730:	b108      	cbz	r0, 3f736 <z_to_nrf_addrinfo_hints+0x48>
		nrf_out->ai_canonname = z_in->ai_canonname;
   3f732:	61a0      	str	r0, [r4, #24]
	return 0;
   3f734:	2000      	movs	r0, #0
}
   3f736:	bd38      	pop	{r3, r4, r5, pc}

0003f738 <nrf_to_z_ipv6>:
	ptr->sin6_port = nrf_in->sin6_port;
   3f738:	890b      	ldrh	r3, [r1, #8]
	ptr->sin6_family = AF_INET6;
   3f73a:	2202      	movs	r2, #2
	ptr->sin6_port = nrf_in->sin6_port;
   3f73c:	8043      	strh	r3, [r0, #2]
	ptr->sin6_family = AF_INET6;
   3f73e:	4603      	mov	r3, r0
{
   3f740:	b530      	push	{r4, r5, lr}
	ptr->sin6_family = AF_INET6;
   3f742:	f823 2b04 	strh.w	r2, [r3], #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   3f746:	f101 0420 	add.w	r4, r1, #32
   3f74a:	f101 0210 	add.w	r2, r1, #16
   3f74e:	f852 5b04 	ldr.w	r5, [r2], #4
   3f752:	42a2      	cmp	r2, r4
   3f754:	f843 5b04 	str.w	r5, [r3], #4
   3f758:	d1f9      	bne.n	3f74e <nrf_to_z_ipv6+0x16>
	ptr->sin6_scope_id = (uint8_t)nrf_in->sin6_scope_id;
   3f75a:	6a0b      	ldr	r3, [r1, #32]
   3f75c:	7503      	strb	r3, [r0, #20]
}
   3f75e:	bd30      	pop	{r4, r5, pc}

0003f760 <nrf91_socket_offload_recvfrom>:
{
   3f760:	b5f0      	push	{r4, r5, r6, r7, lr}
	int sd = OBJ_TO_SD(obj);
   3f762:	1e45      	subs	r5, r0, #1
{
   3f764:	b08f      	sub	sp, #60	; 0x3c
   3f766:	4618      	mov	r0, r3
   3f768:	e9dd 4614 	ldrd	r4, r6, [sp, #80]	; 0x50
   3f76c:	e9cd 2102 	strd	r2, r1, [sp, #8]
   3f770:	f7ff feec 	bl	3f54c <z_to_nrf_flags>
	if (from == NULL) {
   3f774:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   3f778:	4603      	mov	r3, r0
   3f77a:	b944      	cbnz	r4, 3f78e <nrf91_socket_offload_recvfrom+0x2e>
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f77c:	4628      	mov	r0, r5
   3f77e:	e9cd 4400 	strd	r4, r4, [sp]
   3f782:	f001 ffcb 	bl	4171c <nrf_recvfrom>
   3f786:	4605      	mov	r5, r0
}
   3f788:	4628      	mov	r0, r5
   3f78a:	b00f      	add	sp, #60	; 0x3c
   3f78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f78e:	2024      	movs	r0, #36	; 0x24
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3f790:	af05      	add	r7, sp, #20
		nrf_socklen_t sock_len = sizeof(struct nrf_sockaddr_in6);
   3f792:	9004      	str	r0, [sp, #16]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3f794:	a804      	add	r0, sp, #16
   3f796:	9001      	str	r0, [sp, #4]
   3f798:	9700      	str	r7, [sp, #0]
   3f79a:	4628      	mov	r0, r5
   3f79c:	f001 ffbe 	bl	4171c <nrf_recvfrom>
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f7a0:	9b06      	ldr	r3, [sp, #24]
		retval = nrf_recvfrom(sd, buf, len, z_to_nrf_flags(flags),
   3f7a2:	4605      	mov	r5, r0
		if (cliaddr->sa_family == NRF_AF_INET) {
   3f7a4:	2b02      	cmp	r3, #2
   3f7a6:	d109      	bne.n	3f7bc <nrf91_socket_offload_recvfrom+0x5c>
	ptr->sin_port = nrf_in->sin_port;
   3f7a8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   3f7ac:	8063      	strh	r3, [r4, #2]
	ptr->sin_family = AF_INET;
   3f7ae:	2301      	movs	r3, #1
   3f7b0:	8023      	strh	r3, [r4, #0]
	ptr->sin_addr.s_addr = nrf_in->sin_addr.s_addr;
   3f7b2:	9b08      	ldr	r3, [sp, #32]
   3f7b4:	6063      	str	r3, [r4, #4]
			*fromlen = sizeof(struct sockaddr_in);
   3f7b6:	2308      	movs	r3, #8
			*fromlen = sizeof(struct sockaddr_in6);
   3f7b8:	6033      	str	r3, [r6, #0]
	return retval;
   3f7ba:	e7e5      	b.n	3f788 <nrf91_socket_offload_recvfrom+0x28>
		} else if (cliaddr->sa_family == NRF_AF_INET6) {
   3f7bc:	2b0a      	cmp	r3, #10
   3f7be:	d1e3      	bne.n	3f788 <nrf91_socket_offload_recvfrom+0x28>
			nrf_to_z_ipv6(from, (struct nrf_sockaddr_in6 *)
   3f7c0:	4639      	mov	r1, r7
   3f7c2:	4620      	mov	r0, r4
   3f7c4:	f7ff ffb8 	bl	3f738 <nrf_to_z_ipv6>
			*fromlen = sizeof(struct sockaddr_in6);
   3f7c8:	2318      	movs	r3, #24
   3f7ca:	e7f5      	b.n	3f7b8 <nrf91_socket_offload_recvfrom+0x58>

0003f7cc <nrf91_socket_offload_read>:
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f7cc:	2300      	movs	r3, #0
{
   3f7ce:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_recvfrom(obj, buffer, count, 0, NULL, 0);
   3f7d0:	e9cd 3300 	strd	r3, r3, [sp]
   3f7d4:	f7ff ffc4 	bl	3f760 <nrf91_socket_offload_recvfrom>
}
   3f7d8:	b003      	add	sp, #12
   3f7da:	f85d fb04 	ldr.w	pc, [sp], #4

0003f7de <z_to_nrf_ipv6>:
{
   3f7de:	460b      	mov	r3, r1
	nrf_out->sin6_len = sizeof(struct nrf_sockaddr_in6);
   3f7e0:	2124      	movs	r1, #36	; 0x24
   3f7e2:	7019      	strb	r1, [r3, #0]
	nrf_out->sin6_port = ptr->sin6_port;
   3f7e4:	8841      	ldrh	r1, [r0, #2]
{
   3f7e6:	4602      	mov	r2, r0
	nrf_out->sin6_port = ptr->sin6_port;
   3f7e8:	8119      	strh	r1, [r3, #8]
	nrf_out->sin6_family = NRF_AF_INET6;
   3f7ea:	210a      	movs	r1, #10
{
   3f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_out->sin6_family = NRF_AF_INET6;
   3f7ee:	6059      	str	r1, [r3, #4]
   3f7f0:	1d04      	adds	r4, r0, #4
   3f7f2:	f103 0610 	add.w	r6, r3, #16
   3f7f6:	f100 0714 	add.w	r7, r0, #20
   3f7fa:	4635      	mov	r5, r6
   3f7fc:	6820      	ldr	r0, [r4, #0]
   3f7fe:	6861      	ldr	r1, [r4, #4]
   3f800:	3408      	adds	r4, #8
   3f802:	c503      	stmia	r5!, {r0, r1}
   3f804:	42bc      	cmp	r4, r7
   3f806:	462e      	mov	r6, r5
   3f808:	d1f7      	bne.n	3f7fa <z_to_nrf_ipv6+0x1c>
	nrf_out->sin6_scope_id = (uint32_t)ptr->sin6_scope_id;
   3f80a:	7d12      	ldrb	r2, [r2, #20]
   3f80c:	621a      	str	r2, [r3, #32]
}
   3f80e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003f810 <nrf91_socket_offload_sendto>:
{
   3f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f814:	b08e      	sub	sp, #56	; 0x38
   3f816:	9c14      	ldr	r4, [sp, #80]	; 0x50
   3f818:	460e      	mov	r6, r1
   3f81a:	461f      	mov	r7, r3
	int sd = OBJ_TO_SD(obj);
   3f81c:	1e45      	subs	r5, r0, #1
	if (to == NULL) {
   3f81e:	b974      	cbnz	r4, 3f83e <nrf91_socket_offload_sendto+0x2e>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), NULL,
   3f820:	4618      	mov	r0, r3
   3f822:	9203      	str	r2, [sp, #12]
   3f824:	f7ff fe92 	bl	3f54c <z_to_nrf_flags>
   3f828:	4603      	mov	r3, r0
   3f82a:	e9cd 4400 	strd	r4, r4, [sp]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3f82e:	4631      	mov	r1, r6
   3f830:	4628      	mov	r0, r5
   3f832:	9a03      	ldr	r2, [sp, #12]
   3f834:	f001 ff58 	bl	416e8 <nrf_sendto>
}
   3f838:	b00e      	add	sp, #56	; 0x38
   3f83a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (to->sa_family == AF_INET) {
   3f83e:	8823      	ldrh	r3, [r4, #0]
   3f840:	9203      	str	r2, [sp, #12]
   3f842:	2b01      	cmp	r3, #1
   3f844:	d113      	bne.n	3f86e <nrf91_socket_offload_sendto+0x5e>
	nrf_out->sin_port = ptr->sin_port;
   3f846:	8863      	ldrh	r3, [r4, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f848:	f04f 0810 	mov.w	r8, #16
	nrf_out->sin_port = ptr->sin_port;
   3f84c:	f8ad 301c 	strh.w	r3, [sp, #28]
	nrf_out->sin_family = NRF_AF_INET;
   3f850:	2302      	movs	r3, #2
   3f852:	9306      	str	r3, [sp, #24]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f854:	6863      	ldr	r3, [r4, #4]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3f856:	4638      	mov	r0, r7
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f858:	9308      	str	r3, [sp, #32]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f85a:	f88d 8014 	strb.w	r8, [sp, #20]
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv4,
   3f85e:	f7ff fe75 	bl	3f54c <z_to_nrf_flags>
   3f862:	a905      	add	r1, sp, #20
   3f864:	4603      	mov	r3, r0
   3f866:	f8cd 8004 	str.w	r8, [sp, #4]
   3f86a:	9100      	str	r1, [sp, #0]
   3f86c:	e7df      	b.n	3f82e <nrf91_socket_offload_sendto+0x1e>
	} else if (to->sa_family == AF_INET6) {
   3f86e:	2b02      	cmp	r3, #2
   3f870:	d10d      	bne.n	3f88e <nrf91_socket_offload_sendto+0x7e>
		z_to_nrf_ipv6(to, &ipv6);
   3f872:	f10d 0814 	add.w	r8, sp, #20
   3f876:	4641      	mov	r1, r8
   3f878:	4620      	mov	r0, r4
   3f87a:	f7ff ffb0 	bl	3f7de <z_to_nrf_ipv6>
		retval = nrf_sendto(sd, buf, len, z_to_nrf_flags(flags), &ipv6,
   3f87e:	4638      	mov	r0, r7
   3f880:	f7ff fe64 	bl	3f54c <z_to_nrf_flags>
   3f884:	2124      	movs	r1, #36	; 0x24
   3f886:	4603      	mov	r3, r0
   3f888:	e9cd 8100 	strd	r8, r1, [sp]
   3f88c:	e7cf      	b.n	3f82e <nrf91_socket_offload_sendto+0x1e>
	errno = ENOTSUP;
   3f88e:	f7fe fc24 	bl	3e0da <__errno>
   3f892:	2386      	movs	r3, #134	; 0x86
   3f894:	6003      	str	r3, [r0, #0]
	return retval;
   3f896:	f04f 30ff 	mov.w	r0, #4294967295
   3f89a:	e7cd      	b.n	3f838 <nrf91_socket_offload_sendto+0x28>

0003f89c <nrf91_socket_offload_write>:
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3f89c:	2300      	movs	r3, #0
{
   3f89e:	b507      	push	{r0, r1, r2, lr}
	return nrf91_socket_offload_sendto(obj, buffer, count, 0, NULL, 0);
   3f8a0:	e9cd 3300 	strd	r3, r3, [sp]
   3f8a4:	f7ff ffb4 	bl	3f810 <nrf91_socket_offload_sendto>
}
   3f8a8:	b003      	add	sp, #12
   3f8aa:	f85d fb04 	ldr.w	pc, [sp], #4

0003f8ae <nrf91_socket_offload_connect>:
{
   3f8ae:	b510      	push	{r4, lr}
	int sd = OBJ_TO_SD(obj);
   3f8b0:	1e44      	subs	r4, r0, #1
	if (addr->sa_family == AF_INET) {
   3f8b2:	8808      	ldrh	r0, [r1, #0]
{
   3f8b4:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f8b6:	2801      	cmp	r0, #1
{
   3f8b8:	b08a      	sub	sp, #40	; 0x28
	if (addr->sa_family == AF_INET) {
   3f8ba:	d10f      	bne.n	3f8dc <nrf91_socket_offload_connect+0x2e>
	nrf_out->sin_port = ptr->sin_port;
   3f8bc:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f8be:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f8c0:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3f8c4:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f8c6:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f8c8:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3f8cc:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f8ce:	9304      	str	r3, [sp, #16]
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3f8d0:	4620      	mov	r0, r4
   3f8d2:	a901      	add	r1, sp, #4
   3f8d4:	f001 ff44 	bl	41760 <nrf_connect>
}
   3f8d8:	b00a      	add	sp, #40	; 0x28
   3f8da:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3f8dc:	2802      	cmp	r0, #2
   3f8de:	d105      	bne.n	3f8ec <nrf91_socket_offload_connect+0x3e>
		z_to_nrf_ipv6(addr, &ipv6);
   3f8e0:	4618      	mov	r0, r3
   3f8e2:	a901      	add	r1, sp, #4
   3f8e4:	f7ff ff7b 	bl	3f7de <z_to_nrf_ipv6>
		retval = nrf_connect(sd, (const struct nrf_sockaddr *)&ipv6,
   3f8e8:	2224      	movs	r2, #36	; 0x24
   3f8ea:	e7f1      	b.n	3f8d0 <nrf91_socket_offload_connect+0x22>
		retval = nrf_connect(sd, (void *)addr, addrlen);
   3f8ec:	4620      	mov	r0, r4
   3f8ee:	f001 ff37 	bl	41760 <nrf_connect>
		if (retval < 0) {
   3f8f2:	2800      	cmp	r0, #0
   3f8f4:	daf0      	bge.n	3f8d8 <nrf91_socket_offload_connect+0x2a>
	errno = ENOTSUP;
   3f8f6:	f7fe fbf0 	bl	3e0da <__errno>
   3f8fa:	2386      	movs	r3, #134	; 0x86
   3f8fc:	6003      	str	r3, [r0, #0]
   3f8fe:	f04f 30ff 	mov.w	r0, #4294967295
   3f902:	e7e9      	b.n	3f8d8 <nrf91_socket_offload_connect+0x2a>

0003f904 <nrf91_socket_offload_setsockopt>:
{
   3f904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3f908:	461e      	mov	r6, r3
	switch (z_in_level) {
   3f90a:	f240 2302 	movw	r3, #514	; 0x202
{
   3f90e:	b086      	sub	sp, #24
	switch (z_in_level) {
   3f910:	4299      	cmp	r1, r3
{
   3f912:	460c      	mov	r4, r1
   3f914:	4615      	mov	r5, r2
   3f916:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int sd = OBJ_TO_SD(obj);
   3f918:	f100 38ff 	add.w	r8, r0, #4294967295
	switch (z_in_level) {
   3f91c:	d005      	beq.n	3f92a <nrf91_socket_offload_setsockopt+0x26>
   3f91e:	dc20      	bgt.n	3f962 <nrf91_socket_offload_setsockopt+0x5e>
   3f920:	2901      	cmp	r1, #1
   3f922:	d002      	beq.n	3f92a <nrf91_socket_offload_setsockopt+0x26>
   3f924:	f5b1 7f8d 	cmp.w	r1, #282	; 0x11a
   3f928:	d126      	bne.n	3f978 <nrf91_socket_offload_setsockopt+0x74>
	if (z_to_nrf_optname(level, optname, &nrf_optname) < 0)
   3f92a:	4629      	mov	r1, r5
   3f92c:	4620      	mov	r0, r4
   3f92e:	aa03      	add	r2, sp, #12
   3f930:	f7e9 feca 	bl	296c8 <z_to_nrf_optname>
   3f934:	2800      	cmp	r0, #0
   3f936:	db1f      	blt.n	3f978 <nrf91_socket_offload_setsockopt+0x74>
	if ((level == SOL_SOCKET) && ((optname == SO_RCVTIMEO) ||
   3f938:	2c01      	cmp	r4, #1
   3f93a:	d116      	bne.n	3f96a <nrf91_socket_offload_setsockopt+0x66>
   3f93c:	3d14      	subs	r5, #20
   3f93e:	2d01      	cmp	r5, #1
   3f940:	d805      	bhi.n	3f94e <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(struct nrf_timeval);
   3f942:	2708      	movs	r7, #8
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3f944:	6832      	ldr	r2, [r6, #0]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f946:	6873      	ldr	r3, [r6, #4]
		nrf_timeo.tv_sec = ((struct timeval *)optval)->tv_sec;
   3f948:	9204      	str	r2, [sp, #16]
		nrf_timeo.tv_usec = ((struct timeval *)optval)->tv_usec;
   3f94a:	9305      	str	r3, [sp, #20]
		nrf_optval = &nrf_timeo;
   3f94c:	ae04      	add	r6, sp, #16
	retval = nrf_setsockopt(sd, nrf_level, nrf_optname, nrf_optval,
   3f94e:	4633      	mov	r3, r6
   3f950:	4621      	mov	r1, r4
   3f952:	4640      	mov	r0, r8
   3f954:	9a03      	ldr	r2, [sp, #12]
   3f956:	9700      	str	r7, [sp, #0]
   3f958:	f001 ff4e 	bl	417f8 <nrf_setsockopt>
}
   3f95c:	b006      	add	sp, #24
   3f95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (z_in_level) {
   3f962:	f240 2303 	movw	r3, #515	; 0x203
   3f966:	4299      	cmp	r1, r3
   3f968:	e7de      	b.n	3f928 <nrf91_socket_offload_setsockopt+0x24>
	} else if ((level == SOL_TLS) && (optname == TLS_SESSION_CACHE)) {
   3f96a:	f5b4 7f8d 	cmp.w	r4, #282	; 0x11a
   3f96e:	d1ee      	bne.n	3f94e <nrf91_socket_offload_setsockopt+0x4a>
		nrf_optlen = sizeof(nrf_sec_session_cache_t);
   3f970:	2d08      	cmp	r5, #8
   3f972:	bf08      	it	eq
   3f974:	2701      	moveq	r7, #1
   3f976:	e7ea      	b.n	3f94e <nrf91_socket_offload_setsockopt+0x4a>
	errno = ENOPROTOOPT;
   3f978:	f7fe fbaf 	bl	3e0da <__errno>
   3f97c:	236d      	movs	r3, #109	; 0x6d
   3f97e:	6003      	str	r3, [r0, #0]
   3f980:	f04f 30ff 	mov.w	r0, #4294967295
   3f984:	e7ea      	b.n	3f95c <nrf91_socket_offload_setsockopt+0x58>

0003f986 <nrf91_socket_offload_bind>:
{
   3f986:	b510      	push	{r4, lr}
	if (addr->sa_family == AF_INET) {
   3f988:	880a      	ldrh	r2, [r1, #0]
{
   3f98a:	460b      	mov	r3, r1
	if (addr->sa_family == AF_INET) {
   3f98c:	2a01      	cmp	r2, #1
{
   3f98e:	b08a      	sub	sp, #40	; 0x28
	int sd = OBJ_TO_SD(obj);
   3f990:	f100 34ff 	add.w	r4, r0, #4294967295
	if (addr->sa_family == AF_INET) {
   3f994:	d10f      	bne.n	3f9b6 <nrf91_socket_offload_bind+0x30>
	nrf_out->sin_port = ptr->sin_port;
   3f996:	8849      	ldrh	r1, [r1, #2]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f998:	2210      	movs	r2, #16
	nrf_out->sin_port = ptr->sin_port;
   3f99a:	f8ad 100c 	strh.w	r1, [sp, #12]
	nrf_out->sin_family = NRF_AF_INET;
   3f99e:	2102      	movs	r1, #2
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f9a0:	685b      	ldr	r3, [r3, #4]
	nrf_out->sin_len = sizeof(struct nrf_sockaddr_in);
   3f9a2:	f88d 2004 	strb.w	r2, [sp, #4]
	nrf_out->sin_family = NRF_AF_INET;
   3f9a6:	9102      	str	r1, [sp, #8]
	nrf_out->sin_addr.s_addr = ptr->sin_addr.s_addr;
   3f9a8:	9304      	str	r3, [sp, #16]
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3f9aa:	4620      	mov	r0, r4
   3f9ac:	a901      	add	r1, sp, #4
   3f9ae:	f001 ff10 	bl	417d2 <nrf_bind>
}
   3f9b2:	b00a      	add	sp, #40	; 0x28
   3f9b4:	bd10      	pop	{r4, pc}
	} else if (addr->sa_family == AF_INET6) {
   3f9b6:	2a02      	cmp	r2, #2
   3f9b8:	d105      	bne.n	3f9c6 <nrf91_socket_offload_bind+0x40>
		z_to_nrf_ipv6(addr, &ipv6);
   3f9ba:	4618      	mov	r0, r3
   3f9bc:	a901      	add	r1, sp, #4
   3f9be:	f7ff ff0e 	bl	3f7de <z_to_nrf_ipv6>
		retval = nrf_bind(sd, (const struct nrf_sockaddr *)&ipv6,
   3f9c2:	2224      	movs	r2, #36	; 0x24
   3f9c4:	e7f1      	b.n	3f9aa <nrf91_socket_offload_bind+0x24>
	errno = ENOTSUP;
   3f9c6:	f7fe fb88 	bl	3e0da <__errno>
   3f9ca:	2386      	movs	r3, #134	; 0x86
   3f9cc:	6003      	str	r3, [r0, #0]
   3f9ce:	f04f 30ff 	mov.w	r0, #4294967295
   3f9d2:	e7ee      	b.n	3f9b2 <nrf91_socket_offload_bind+0x2c>

0003f9d4 <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   3f9d4:	ea40 0301 	orr.w	r3, r0, r1
   3f9d8:	f033 030f 	bics.w	r3, r3, #15
   3f9dc:	d101      	bne.n	3f9e2 <dk_set_leds_state+0xe>
   3f9de:	f7ea bac7 	b.w	29f70 <dk_set_leds_state.part.0>
}
   3f9e2:	f06f 0015 	mvn.w	r0, #21
   3f9e6:	4770      	bx	lr

0003f9e8 <dk_set_leds>:
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
   3f9e8:	210f      	movs	r1, #15
   3f9ea:	f7ff bff3 	b.w	3f9d4 <dk_set_leds_state>

0003f9ee <z_impl_uart_irq_rx_enable>:
	if (api->irq_rx_enable) {
   3f9ee:	6883      	ldr	r3, [r0, #8]
   3f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   3f9f2:	b103      	cbz	r3, 3f9f6 <z_impl_uart_irq_rx_enable+0x8>
		api->irq_rx_enable(dev);
   3f9f4:	4718      	bx	r3
}
   3f9f6:	4770      	bx	lr

0003f9f8 <response_handler>:
	write_uart_string(response);
   3f9f8:	4608      	mov	r0, r1
   3f9fa:	f7eb b99b 	b.w	2ad34 <write_uart_string>

0003f9fe <is_lfcr>:
	if ((chr == '\r') || (chr == '\n')) {
   3f9fe:	280d      	cmp	r0, #13
   3fa00:	d004      	beq.n	3fa0c <is_lfcr+0xe>
   3fa02:	f1a0 030a 	sub.w	r3, r0, #10
   3fa06:	4258      	negs	r0, r3
   3fa08:	4158      	adcs	r0, r3
   3fa0a:	4770      	bx	lr
		return true;
   3fa0c:	2001      	movs	r0, #1
}
   3fa0e:	4770      	bx	lr

0003fa10 <skip_command_prefix>:
{
   3fa10:	b510      	push	{r4, lr}
	*cmd += sizeof("AT") - 1;
   3fa12:	6801      	ldr	r1, [r0, #0]
{
   3fa14:	4602      	mov	r2, r0
	*cmd += sizeof("AT") - 1;
   3fa16:	1c8b      	adds	r3, r1, #2
   3fa18:	6003      	str	r3, [r0, #0]
	if (is_lfcr(**cmd) || is_terminated(**cmd)) {
   3fa1a:	788c      	ldrb	r4, [r1, #2]
   3fa1c:	4620      	mov	r0, r4
   3fa1e:	f7ff ffee 	bl	3f9fe <is_lfcr>
   3fa22:	b910      	cbnz	r0, 3fa2a <skip_command_prefix+0x1a>
	if (chr == AT_CMD_BUFFER_TERMINATOR) {
   3fa24:	b10c      	cbz	r4, 3fa2a <skip_command_prefix+0x1a>
	(*cmd)++;
   3fa26:	3103      	adds	r1, #3
   3fa28:	6011      	str	r1, [r2, #0]
}
   3fa2a:	bd10      	pop	{r4, pc}

0003fa2c <at_parser_params_from_str>:
	return at_parser_max_params_from_str(at_params_str, next_params_str,
   3fa2c:	6813      	ldr	r3, [r2, #0]
   3fa2e:	f7eb bd43 	b.w	2b4b8 <at_parser_max_params_from_str>

0003fa32 <at_params_list_init>:
{
   3fa32:	b538      	push	{r3, r4, r5, lr}
   3fa34:	460d      	mov	r5, r1
	if (list == NULL) {
   3fa36:	4604      	mov	r4, r0
   3fa38:	b140      	cbz	r0, 3fa4c <at_params_list_init+0x1a>
	list->params = k_calloc(max_params_count, sizeof(struct at_param));
   3fa3a:	210c      	movs	r1, #12
   3fa3c:	4628      	mov	r0, r5
   3fa3e:	f002 f8f5 	bl	41c2c <k_calloc>
   3fa42:	6060      	str	r0, [r4, #4]
	if (list->params == NULL) {
   3fa44:	b128      	cbz	r0, 3fa52 <at_params_list_init+0x20>
	return 0;
   3fa46:	2000      	movs	r0, #0
	list->param_count = max_params_count;
   3fa48:	6025      	str	r5, [r4, #0]
}
   3fa4a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   3fa4c:	f06f 0015 	mvn.w	r0, #21
   3fa50:	e7fb      	b.n	3fa4a <at_params_list_init+0x18>
		return -ENOMEM;
   3fa52:	f06f 000b 	mvn.w	r0, #11
   3fa56:	e7f8      	b.n	3fa4a <at_params_list_init+0x18>

0003fa58 <at_params_list_free>:

void at_params_list_free(struct at_param_list *list)
{
   3fa58:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3fa5a:	4604      	mov	r4, r0
   3fa5c:	b148      	cbz	r0, 3fa72 <at_params_list_free+0x1a>
   3fa5e:	6843      	ldr	r3, [r0, #4]
   3fa60:	b13b      	cbz	r3, 3fa72 <at_params_list_free+0x1a>
		return;
	}

	at_params_list_clear(list);

	list->param_count = 0;
   3fa62:	2500      	movs	r5, #0
	at_params_list_clear(list);
   3fa64:	f7eb fe2a 	bl	2b6bc <at_params_list_clear>
	k_free(list->params);
   3fa68:	6860      	ldr	r0, [r4, #4]
	list->param_count = 0;
   3fa6a:	6025      	str	r5, [r4, #0]
	k_free(list->params);
   3fa6c:	f002 f8d4 	bl	41c18 <k_free>
	list->params = NULL;
   3fa70:	6065      	str	r5, [r4, #4]
}
   3fa72:	bd38      	pop	{r3, r4, r5, pc}

0003fa74 <at_params_short_put>:

int at_params_short_put(const struct at_param_list *list, size_t index,
			int16_t value)
{
   3fa74:	b538      	push	{r3, r4, r5, lr}
   3fa76:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3fa78:	b910      	cbnz	r0, 3fa80 <at_params_short_put+0xc>
		return -EINVAL;
   3fa7a:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_SHORT;
	param->value.int_val = value;
	return 0;
}
   3fa7e:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3fa80:	6843      	ldr	r3, [r0, #4]
   3fa82:	2b00      	cmp	r3, #0
   3fa84:	d0f9      	beq.n	3fa7a <at_params_short_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3fa86:	f7eb fdad 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fa8a:	4604      	mov	r4, r0
   3fa8c:	2800      	cmp	r0, #0
   3fa8e:	d0f4      	beq.n	3fa7a <at_params_short_put+0x6>
	at_param_clear(param);
   3fa90:	f7eb fdf2 	bl	2b678 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3fa94:	2301      	movs	r3, #1
	return 0;
   3fa96:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_SHORT;
   3fa98:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   3fa9a:	60a5      	str	r5, [r4, #8]
	return 0;
   3fa9c:	e7ef      	b.n	3fa7e <at_params_short_put+0xa>

0003fa9e <at_params_empty_put>:

int at_params_empty_put(const struct at_param_list *list, size_t index)
{
   3fa9e:	b510      	push	{r4, lr}
	if (list == NULL || list->params == NULL) {
   3faa0:	b910      	cbnz	r0, 3faa8 <at_params_empty_put+0xa>
		return -EINVAL;
   3faa2:	f06f 0015 	mvn.w	r0, #21

	param->type = AT_PARAM_TYPE_EMPTY;
	param->value.int_val = 0;

	return 0;
}
   3faa6:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL) {
   3faa8:	6843      	ldr	r3, [r0, #4]
   3faaa:	2b00      	cmp	r3, #0
   3faac:	d0f9      	beq.n	3faa2 <at_params_empty_put+0x4>
	struct at_param *param = at_params_get(list, index);
   3faae:	f7eb fd99 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fab2:	4604      	mov	r4, r0
   3fab4:	2800      	cmp	r0, #0
   3fab6:	d0f4      	beq.n	3faa2 <at_params_empty_put+0x4>
	at_param_clear(param);
   3fab8:	f7eb fdde 	bl	2b678 <at_param_clear>
	param->type = AT_PARAM_TYPE_EMPTY;
   3fabc:	2305      	movs	r3, #5
	param->value.int_val = 0;
   3fabe:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_EMPTY;
   3fac0:	7023      	strb	r3, [r4, #0]
	param->value.int_val = 0;
   3fac2:	60a0      	str	r0, [r4, #8]
	return 0;
   3fac4:	e7ef      	b.n	3faa6 <at_params_empty_put+0x8>

0003fac6 <at_params_int_put>:

int at_params_int_put(const struct at_param_list *list, size_t index,
		      int32_t value)
{
   3fac6:	b538      	push	{r3, r4, r5, lr}
   3fac8:	4615      	mov	r5, r2
	if (list == NULL || list->params == NULL) {
   3faca:	b910      	cbnz	r0, 3fad2 <at_params_int_put+0xc>
		return -EINVAL;
   3facc:	f06f 0015 	mvn.w	r0, #21
	at_param_clear(param);

	param->type = AT_PARAM_TYPE_NUM_INT;
	param->value.int_val = value;
	return 0;
}
   3fad0:	bd38      	pop	{r3, r4, r5, pc}
	if (list == NULL || list->params == NULL) {
   3fad2:	6843      	ldr	r3, [r0, #4]
   3fad4:	2b00      	cmp	r3, #0
   3fad6:	d0f9      	beq.n	3facc <at_params_int_put+0x6>
	struct at_param *param = at_params_get(list, index);
   3fad8:	f7eb fd84 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fadc:	4604      	mov	r4, r0
   3fade:	2800      	cmp	r0, #0
   3fae0:	d0f4      	beq.n	3facc <at_params_int_put+0x6>
	at_param_clear(param);
   3fae2:	f7eb fdc9 	bl	2b678 <at_param_clear>
	param->type = AT_PARAM_TYPE_NUM_INT;
   3fae6:	2302      	movs	r3, #2
	return 0;
   3fae8:	2000      	movs	r0, #0
	param->type = AT_PARAM_TYPE_NUM_INT;
   3faea:	7023      	strb	r3, [r4, #0]
	param->value.int_val = value;
   3faec:	60a5      	str	r5, [r4, #8]
	return 0;
   3faee:	e7ef      	b.n	3fad0 <at_params_int_put+0xa>

0003faf0 <at_params_string_put>:

int at_params_string_put(const struct at_param_list *list, size_t index,
			 const char *str, size_t str_len)
{
   3faf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3faf2:	4617      	mov	r7, r2
   3faf4:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || str == NULL) {
   3faf6:	b910      	cbnz	r0, 3fafe <at_params_string_put+0xe>
		return -EINVAL;
   3faf8:	f06f 0015 	mvn.w	r0, #21
	param->size = str_len;
	param->type = AT_PARAM_TYPE_STRING;
	param->value.str_val = param_value;

	return 0;
}
   3fafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || str == NULL) {
   3fafe:	6843      	ldr	r3, [r0, #4]
   3fb00:	2b00      	cmp	r3, #0
   3fb02:	d0f9      	beq.n	3faf8 <at_params_string_put+0x8>
   3fb04:	2a00      	cmp	r2, #0
   3fb06:	d0f7      	beq.n	3faf8 <at_params_string_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3fb08:	f7eb fd6c 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fb0c:	4604      	mov	r4, r0
   3fb0e:	2800      	cmp	r0, #0
   3fb10:	d0f2      	beq.n	3faf8 <at_params_string_put+0x8>
   3fb12:	2004      	movs	r0, #4
   3fb14:	1c69      	adds	r1, r5, #1
   3fb16:	f7fa fecd 	bl	3a8b4 <k_aligned_alloc>
	if (param_value == NULL) {
   3fb1a:	4606      	mov	r6, r0
   3fb1c:	b160      	cbz	r0, 3fb38 <at_params_string_put+0x48>
   3fb1e:	462a      	mov	r2, r5
   3fb20:	4639      	mov	r1, r7
   3fb22:	f002 f8bc 	bl	41c9e <memcpy>
	at_param_clear(param);
   3fb26:	4620      	mov	r0, r4
   3fb28:	f7eb fda6 	bl	2b678 <at_param_clear>
	param->type = AT_PARAM_TYPE_STRING;
   3fb2c:	2303      	movs	r3, #3
	return 0;
   3fb2e:	2000      	movs	r0, #0
	param->size = str_len;
   3fb30:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_STRING;
   3fb32:	7023      	strb	r3, [r4, #0]
	param->value.str_val = param_value;
   3fb34:	60a6      	str	r6, [r4, #8]
	return 0;
   3fb36:	e7e1      	b.n	3fafc <at_params_string_put+0xc>
		return -ENOMEM;
   3fb38:	f06f 000b 	mvn.w	r0, #11
   3fb3c:	e7de      	b.n	3fafc <at_params_string_put+0xc>

0003fb3e <at_params_array_put>:

int at_params_array_put(const struct at_param_list *list, size_t index,
			const uint32_t *array, size_t array_len)
{
   3fb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fb40:	4617      	mov	r7, r2
   3fb42:	461d      	mov	r5, r3
	if (list == NULL || list->params == NULL || array == NULL) {
   3fb44:	b910      	cbnz	r0, 3fb4c <at_params_array_put+0xe>
		return -EINVAL;
   3fb46:	f06f 0015 	mvn.w	r0, #21
	param->size = array_len;
	param->type = AT_PARAM_TYPE_ARRAY;
	param->value.array_val = param_value;

	return 0;
}
   3fb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || array == NULL) {
   3fb4c:	6843      	ldr	r3, [r0, #4]
   3fb4e:	2b00      	cmp	r3, #0
   3fb50:	d0f9      	beq.n	3fb46 <at_params_array_put+0x8>
   3fb52:	2a00      	cmp	r2, #0
   3fb54:	d0f7      	beq.n	3fb46 <at_params_array_put+0x8>
	struct at_param *param = at_params_get(list, index);
   3fb56:	f7eb fd45 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fb5a:	4604      	mov	r4, r0
   3fb5c:	2800      	cmp	r0, #0
   3fb5e:	d0f2      	beq.n	3fb46 <at_params_array_put+0x8>
   3fb60:	4629      	mov	r1, r5
   3fb62:	2004      	movs	r0, #4
   3fb64:	f7fa fea6 	bl	3a8b4 <k_aligned_alloc>
	if (param_value == NULL) {
   3fb68:	4606      	mov	r6, r0
   3fb6a:	b160      	cbz	r0, 3fb86 <at_params_array_put+0x48>
   3fb6c:	462a      	mov	r2, r5
   3fb6e:	4639      	mov	r1, r7
   3fb70:	f002 f895 	bl	41c9e <memcpy>
	at_param_clear(param);
   3fb74:	4620      	mov	r0, r4
   3fb76:	f7eb fd7f 	bl	2b678 <at_param_clear>
	param->type = AT_PARAM_TYPE_ARRAY;
   3fb7a:	2304      	movs	r3, #4
	return 0;
   3fb7c:	2000      	movs	r0, #0
	param->size = array_len;
   3fb7e:	6065      	str	r5, [r4, #4]
	param->type = AT_PARAM_TYPE_ARRAY;
   3fb80:	7023      	strb	r3, [r4, #0]
	param->value.array_val = param_value;
   3fb82:	60a6      	str	r6, [r4, #8]
	return 0;
   3fb84:	e7e1      	b.n	3fb4a <at_params_array_put+0xc>
		return -ENOMEM;
   3fb86:	f06f 000b 	mvn.w	r0, #11
   3fb8a:	e7de      	b.n	3fb4a <at_params_array_put+0xc>

0003fb8c <at_params_short_get>:
	return 0;
}

int at_params_short_get(const struct at_param_list *list, size_t index,
			int16_t *value)
{
   3fb8c:	b510      	push	{r4, lr}
   3fb8e:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fb90:	b910      	cbnz	r0, 3fb98 <at_params_short_get+0xc>
		return -EINVAL;
   3fb92:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = (int16_t)param->value.int_val;
	return 0;
}
   3fb96:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3fb98:	6843      	ldr	r3, [r0, #4]
   3fb9a:	2b00      	cmp	r3, #0
   3fb9c:	d0f9      	beq.n	3fb92 <at_params_short_get+0x6>
   3fb9e:	2a00      	cmp	r2, #0
   3fba0:	d0f7      	beq.n	3fb92 <at_params_short_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3fba2:	f7eb fd1f 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fba6:	2800      	cmp	r0, #0
   3fba8:	d0f3      	beq.n	3fb92 <at_params_short_get+0x6>
	if (param->type != AT_PARAM_TYPE_NUM_SHORT) {
   3fbaa:	7803      	ldrb	r3, [r0, #0]
   3fbac:	2b01      	cmp	r3, #1
   3fbae:	d1f0      	bne.n	3fb92 <at_params_short_get+0x6>
	*value = (int16_t)param->value.int_val;
   3fbb0:	6883      	ldr	r3, [r0, #8]
	return 0;
   3fbb2:	2000      	movs	r0, #0
	*value = (int16_t)param->value.int_val;
   3fbb4:	8023      	strh	r3, [r4, #0]
	return 0;
   3fbb6:	e7ee      	b.n	3fb96 <at_params_short_get+0xa>

0003fbb8 <at_params_int_get>:

int at_params_int_get(const struct at_param_list *list, size_t index,
		      int32_t *value)
{
   3fbb8:	b510      	push	{r4, lr}
   3fbba:	4614      	mov	r4, r2
	if (list == NULL || list->params == NULL || value == NULL) {
   3fbbc:	b910      	cbnz	r0, 3fbc4 <at_params_int_get+0xc>
		return -EINVAL;
   3fbbe:	f06f 0015 	mvn.w	r0, #21
		return -EINVAL;
	}

	*value = param->value.int_val;
	return 0;
}
   3fbc2:	bd10      	pop	{r4, pc}
	if (list == NULL || list->params == NULL || value == NULL) {
   3fbc4:	6843      	ldr	r3, [r0, #4]
   3fbc6:	2b00      	cmp	r3, #0
   3fbc8:	d0f9      	beq.n	3fbbe <at_params_int_get+0x6>
   3fbca:	2a00      	cmp	r2, #0
   3fbcc:	d0f7      	beq.n	3fbbe <at_params_int_get+0x6>
	struct at_param *param = at_params_get(list, index);
   3fbce:	f7eb fd09 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fbd2:	2800      	cmp	r0, #0
   3fbd4:	d0f3      	beq.n	3fbbe <at_params_int_get+0x6>
	if ((param->type != AT_PARAM_TYPE_NUM_INT) &&
   3fbd6:	7803      	ldrb	r3, [r0, #0]
   3fbd8:	3b01      	subs	r3, #1
   3fbda:	2b01      	cmp	r3, #1
   3fbdc:	d8ef      	bhi.n	3fbbe <at_params_int_get+0x6>
	*value = param->value.int_val;
   3fbde:	6883      	ldr	r3, [r0, #8]
	return 0;
   3fbe0:	2000      	movs	r0, #0
	*value = param->value.int_val;
   3fbe2:	6023      	str	r3, [r4, #0]
	return 0;
   3fbe4:	e7ed      	b.n	3fbc2 <at_params_int_get+0xa>

0003fbe6 <at_params_string_get>:

int at_params_string_get(const struct at_param_list *list, size_t index,
			 char *value, size_t *len)
{
   3fbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3fbe8:	4617      	mov	r7, r2
   3fbea:	461c      	mov	r4, r3
	if (list == NULL || list->params == NULL || value == NULL ||
   3fbec:	b910      	cbnz	r0, 3fbf4 <at_params_string_get+0xe>
	    value == NULL || len == NULL) {
		return -EINVAL;
   3fbee:	f06f 0015 	mvn.w	r0, #21

	memcpy(value, param->value.str_val, param_len);
	*len = param_len;

	return 0;
}
   3fbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (list == NULL || list->params == NULL || value == NULL ||
   3fbf4:	6843      	ldr	r3, [r0, #4]
   3fbf6:	2b00      	cmp	r3, #0
   3fbf8:	d0f9      	beq.n	3fbee <at_params_string_get+0x8>
   3fbfa:	2a00      	cmp	r2, #0
   3fbfc:	d0f7      	beq.n	3fbee <at_params_string_get+0x8>
	    value == NULL || len == NULL) {
   3fbfe:	2c00      	cmp	r4, #0
   3fc00:	d0f5      	beq.n	3fbee <at_params_string_get+0x8>
	struct at_param *param = at_params_get(list, index);
   3fc02:	f7eb fcef 	bl	2b5e4 <at_params_get>
	if (param == NULL) {
   3fc06:	4606      	mov	r6, r0
   3fc08:	2800      	cmp	r0, #0
   3fc0a:	d0f0      	beq.n	3fbee <at_params_string_get+0x8>
	if (param->type != AT_PARAM_TYPE_STRING) {
   3fc0c:	7803      	ldrb	r3, [r0, #0]
   3fc0e:	2b03      	cmp	r3, #3
   3fc10:	d1ed      	bne.n	3fbee <at_params_string_get+0x8>
	size_t param_len = at_param_size(param);
   3fc12:	f7eb fd09 	bl	2b628 <at_param_size>
	if (*len < param_len) {
   3fc16:	6823      	ldr	r3, [r4, #0]
	size_t param_len = at_param_size(param);
   3fc18:	4605      	mov	r5, r0
	if (*len < param_len) {
   3fc1a:	4283      	cmp	r3, r0
   3fc1c:	d307      	bcc.n	3fc2e <at_params_string_get+0x48>
   3fc1e:	4602      	mov	r2, r0
   3fc20:	68b1      	ldr	r1, [r6, #8]
   3fc22:	4638      	mov	r0, r7
   3fc24:	f002 f83b 	bl	41c9e <memcpy>
	return 0;
   3fc28:	2000      	movs	r0, #0
	*len = param_len;
   3fc2a:	6025      	str	r5, [r4, #0]
	return 0;
   3fc2c:	e7e1      	b.n	3fbf2 <at_params_string_get+0xc>
		return -ENOMEM;
   3fc2e:	f06f 000b 	mvn.w	r0, #11
   3fc32:	e7de      	b.n	3fbf2 <at_params_string_get+0xc>

0003fc34 <at_params_valid_count_get>:

	return 0;
}

uint32_t at_params_valid_count_get(const struct at_param_list *list)
{
   3fc34:	b538      	push	{r3, r4, r5, lr}
	if (list == NULL || list->params == NULL) {
   3fc36:	4605      	mov	r5, r0
   3fc38:	b180      	cbz	r0, 3fc5c <at_params_valid_count_get+0x28>
   3fc3a:	6843      	ldr	r3, [r0, #4]
   3fc3c:	b173      	cbz	r3, 3fc5c <at_params_valid_count_get+0x28>
		return -EINVAL;
	}

	size_t valid_i = 0;
	struct at_param *param = at_params_get(list, valid_i);
   3fc3e:	2100      	movs	r1, #0
   3fc40:	f7eb fcd0 	bl	2b5e4 <at_params_get>
	size_t valid_i = 0;
   3fc44:	2400      	movs	r4, #0

	while (param != NULL && param->type != AT_PARAM_TYPE_INVALID) {
   3fc46:	b108      	cbz	r0, 3fc4c <at_params_valid_count_get+0x18>
   3fc48:	7803      	ldrb	r3, [r0, #0]
   3fc4a:	b90b      	cbnz	r3, 3fc50 <at_params_valid_count_get+0x1c>
		valid_i += 1;
		param = at_params_get(list, valid_i);
	}

	return valid_i;
}
   3fc4c:	4620      	mov	r0, r4
   3fc4e:	bd38      	pop	{r3, r4, r5, pc}
		valid_i += 1;
   3fc50:	3401      	adds	r4, #1
		param = at_params_get(list, valid_i);
   3fc52:	4621      	mov	r1, r4
   3fc54:	4628      	mov	r0, r5
   3fc56:	f7eb fcc5 	bl	2b5e4 <at_params_get>
   3fc5a:	e7f4      	b.n	3fc46 <at_params_valid_count_get+0x12>
		return -EINVAL;
   3fc5c:	f06f 0415 	mvn.w	r4, #21
   3fc60:	e7f4      	b.n	3fc4c <at_params_valid_count_get+0x18>

0003fc62 <response_is_valid>:
{
   3fc62:	b537      	push	{r0, r1, r2, r4, r5, lr}
   3fc64:	4605      	mov	r5, r0
	if ((response_len < strlen(check)) ||
   3fc66:	4610      	mov	r0, r2
{
   3fc68:	460c      	mov	r4, r1
	if ((response_len < strlen(check)) ||
   3fc6a:	9201      	str	r2, [sp, #4]
   3fc6c:	f7dd faf6 	bl	1d25c <strlen>
   3fc70:	42a0      	cmp	r0, r4
   3fc72:	d809      	bhi.n	3fc88 <response_is_valid+0x26>
	    (memcmp(response, check, response_len) != 0)) {
   3fc74:	4622      	mov	r2, r4
   3fc76:	4628      	mov	r0, r5
   3fc78:	9901      	ldr	r1, [sp, #4]
   3fc7a:	f002 f802 	bl	41c82 <memcmp>
	if ((response_len < strlen(check)) ||
   3fc7e:	fab0 f080 	clz	r0, r0
   3fc82:	0940      	lsrs	r0, r0, #5
}
   3fc84:	b003      	add	sp, #12
   3fc86:	bd30      	pop	{r4, r5, pc}
		return false;
   3fc88:	2000      	movs	r0, #0
   3fc8a:	e7fb      	b.n	3fc84 <response_is_valid+0x22>

0003fc8c <lte_lc_init_and_connect>:
{
   3fc8c:	b508      	push	{r3, lr}
	ret = w_lte_lc_init();
   3fc8e:	f7ec f825 	bl	2bcdc <w_lte_lc_init>
	if (ret) {
   3fc92:	b920      	cbnz	r0, 3fc9e <lte_lc_init_and_connect+0x12>
}
   3fc94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return w_lte_lc_connect(true);
   3fc98:	2001      	movs	r0, #1
   3fc9a:	f7eb bee7 	b.w	2ba6c <w_lte_lc_connect>
}
   3fc9e:	bd08      	pop	{r3, pc}

0003fca0 <json_add_str>:
{
   3fca0:	b513      	push	{r0, r1, r4, lr}
	if (parent == NULL || str == NULL || item == NULL) {
   3fca2:	4604      	mov	r4, r0
{
   3fca4:	9101      	str	r1, [sp, #4]
	if (parent == NULL || str == NULL || item == NULL) {
   3fca6:	b160      	cbz	r0, 3fcc2 <json_add_str+0x22>
   3fca8:	b15a      	cbz	r2, 3fcc2 <json_add_str+0x22>
	json_str = cJSON_CreateString(item);
   3fcaa:	4610      	mov	r0, r2
   3fcac:	f7e9 f93a 	bl	28f24 <cJSON_CreateString>
	if (json_str == NULL) {
   3fcb0:	4602      	mov	r2, r0
   3fcb2:	b148      	cbz	r0, 3fcc8 <json_add_str+0x28>
	cJSON_AddItemToObject(parent, str, item);
   3fcb4:	4620      	mov	r0, r4
   3fcb6:	9901      	ldr	r1, [sp, #4]
   3fcb8:	f7ff fb93 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3fcbc:	2000      	movs	r0, #0
}
   3fcbe:	b002      	add	sp, #8
   3fcc0:	bd10      	pop	{r4, pc}
		return -EINVAL;
   3fcc2:	f06f 0015 	mvn.w	r0, #21
   3fcc6:	e7fa      	b.n	3fcbe <json_add_str+0x1e>
		return -ENOMEM;
   3fcc8:	f06f 000b 	mvn.w	r0, #11
   3fccc:	e7f7      	b.n	3fcbe <json_add_str+0x1e>

0003fcce <json_add_data>:
{
   3fcce:	b570      	push	{r4, r5, r6, lr}
   3fcd0:	460e      	mov	r6, r1
	if (param == NULL || json_obj == NULL) {
   3fcd2:	4604      	mov	r4, r0
{
   3fcd4:	b09c      	sub	sp, #112	; 0x70
	if (param == NULL || json_obj == NULL) {
   3fcd6:	b920      	cbnz	r0, 3fce2 <json_add_data+0x14>
		return -EINVAL;
   3fcd8:	f06f 0415 	mvn.w	r4, #21
}
   3fcdc:	4620      	mov	r0, r4
   3fcde:	b01c      	add	sp, #112	; 0x70
   3fce0:	bd70      	pop	{r4, r5, r6, pc}
	if (param == NULL || json_obj == NULL) {
   3fce2:	2900      	cmp	r1, #0
   3fce4:	d0f8      	beq.n	3fcd8 <json_add_data+0xa>
	memset(data_name, 0, MODEM_INFO_MAX_RESPONSE_SIZE);
   3fce6:	2264      	movs	r2, #100	; 0x64
   3fce8:	2100      	movs	r1, #0
   3fcea:	a803      	add	r0, sp, #12
   3fcec:	f001 fff7 	bl	41cde <memset>
	ret = modem_info_name_get(param->type,
   3fcf0:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3fcf4:	a903      	add	r1, sp, #12
   3fcf6:	f7ec f9c7 	bl	2c088 <modem_info_name_get>
	if (ret < 0) {
   3fcfa:	1e05      	subs	r5, r0, #0
   3fcfc:	dbec      	blt.n	3fcd8 <json_add_data+0xa>
	data_type = modem_info_type_get(param->type);
   3fcfe:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
   3fd02:	f7ec f9b7 	bl	2c074 <modem_info_type_get>
	if (data_type == AT_PARAM_TYPE_STRING &&
   3fd06:	2803      	cmp	r0, #3
   3fd08:	d114      	bne.n	3fd34 <json_add_data+0x66>
   3fd0a:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
   3fd0e:	2b03      	cmp	r3, #3
   3fd10:	d010      	beq.n	3fd34 <json_add_data+0x66>
		total_len += strlen(param->value_string);
   3fd12:	1ca2      	adds	r2, r4, #2
   3fd14:	4610      	mov	r0, r2
   3fd16:	9201      	str	r2, [sp, #4]
   3fd18:	f7dd faa0 	bl	1d25c <strlen>
		ret += json_add_str(json_obj, data_name, param->value_string);
   3fd1c:	9a01      	ldr	r2, [sp, #4]
		total_len += strlen(param->value_string);
   3fd1e:	4604      	mov	r4, r0
		ret += json_add_str(json_obj, data_name, param->value_string);
   3fd20:	a903      	add	r1, sp, #12
   3fd22:	4630      	mov	r0, r6
   3fd24:	f7ff ffbc 	bl	3fca0 <json_add_str>
   3fd28:	4428      	add	r0, r5
	if (ret < 0) {
   3fd2a:	ea34 0420 	bics.w	r4, r4, r0, asr #32
   3fd2e:	bf28      	it	cs
   3fd30:	4604      	movcs	r4, r0
   3fd32:	e7d3      	b.n	3fcdc <json_add_data+0xe>
		ret += json_add_num(json_obj, data_name, param->value);
   3fd34:	8820      	ldrh	r0, [r4, #0]
   3fd36:	f7dc fcc5 	bl	1c6c4 <__aeabi_ui2d>
	json_num = cJSON_CreateNumber(num);
   3fd3a:	ec41 0b10 	vmov	d0, r0, r1
   3fd3e:	f7dd fe57 	bl	1d9f0 <cJSON_CreateNumber>
	if (json_num == NULL) {
   3fd42:	4602      	mov	r2, r0
   3fd44:	b138      	cbz	r0, 3fd56 <json_add_data+0x88>
	cJSON_AddItemToObject(parent, str, item);
   3fd46:	4630      	mov	r0, r6
   3fd48:	a903      	add	r1, sp, #12
   3fd4a:	f7ff fb4a 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_num);
   3fd4e:	2000      	movs	r0, #0
		total_len += sizeof(uint16_t);
   3fd50:	2402      	movs	r4, #2
		ret += json_add_num(json_obj, data_name, param->value);
   3fd52:	4428      	add	r0, r5
   3fd54:	e7e9      	b.n	3fd2a <json_add_data+0x5c>
		return -ENOMEM;
   3fd56:	f06f 000b 	mvn.w	r0, #11
   3fd5a:	e7f9      	b.n	3fd50 <json_add_data+0x82>

0003fd5c <sim_data_add>:
{
   3fd5c:	b570      	push	{r4, r5, r6, lr}
   3fd5e:	460e      	mov	r6, r1
	if (sim == NULL || json_obj == NULL) {
   3fd60:	4605      	mov	r5, r0
   3fd62:	b180      	cbz	r0, 3fd86 <sim_data_add+0x2a>
   3fd64:	b179      	cbz	r1, 3fd86 <sim_data_add+0x2a>
	total_len = json_add_data(&sim->uicc, json_obj);
   3fd66:	f7ff ffb2 	bl	3fcce <json_add_data>
	total_len += json_add_data(&sim->iccid, json_obj);
   3fd6a:	4631      	mov	r1, r6
	total_len = json_add_data(&sim->uicc, json_obj);
   3fd6c:	4604      	mov	r4, r0
	total_len += json_add_data(&sim->iccid, json_obj);
   3fd6e:	f105 0070 	add.w	r0, r5, #112	; 0x70
   3fd72:	f7ff ffac 	bl	3fcce <json_add_data>
	total_len += json_add_data(&sim->imsi, json_obj);
   3fd76:	4631      	mov	r1, r6
	total_len += json_add_data(&sim->iccid, json_obj);
   3fd78:	4404      	add	r4, r0
	total_len += json_add_data(&sim->imsi, json_obj);
   3fd7a:	f105 00e0 	add.w	r0, r5, #224	; 0xe0
   3fd7e:	f7ff ffa6 	bl	3fcce <json_add_data>
   3fd82:	4420      	add	r0, r4
}
   3fd84:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   3fd86:	f06f 0015 	mvn.w	r0, #21
   3fd8a:	e7fb      	b.n	3fd84 <sim_data_add+0x28>

0003fd8c <k_uptime_get>:
{
   3fd8c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   3fd8e:	f001 fea3 	bl	41ad8 <z_impl_k_uptime_ticks>
   3fd92:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   3fd96:	fba0 2304 	umull	r2, r3, r0, r4
   3fd9a:	fb04 3301 	mla	r3, r4, r1, r3
   3fd9e:	0bd0      	lsrs	r0, r2, #15
}
   3fda0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   3fda4:	0bd9      	lsrs	r1, r3, #15
   3fda6:	bd10      	pop	{r4, pc}

0003fda8 <date_time_timestamp_clear>:
	return 0;
}

int date_time_timestamp_clear(int64_t *unix_timestamp)
{
	if (unix_timestamp == NULL) {
   3fda8:	b128      	cbz	r0, 3fdb6 <date_time_timestamp_clear+0xe>
		return -EINVAL;
	}

	*unix_timestamp = 0;
   3fdaa:	2200      	movs	r2, #0
   3fdac:	2300      	movs	r3, #0
   3fdae:	e9c0 2300 	strd	r2, r3, [r0]

	return 0;
   3fdb2:	2000      	movs	r0, #0
   3fdb4:	4770      	bx	lr
		return -EINVAL;
   3fdb6:	f06f 0015 	mvn.w	r0, #21
}
   3fdba:	4770      	bx	lr

0003fdbc <cloud_notify_event>:
 */
static inline void cloud_notify_event(struct cloud_backend *backend,
				      struct cloud_event *evt,
				      void *user_data)
{
	if (backend->config->handler) {
   3fdbc:	6843      	ldr	r3, [r0, #4]
   3fdbe:	685b      	ldr	r3, [r3, #4]
   3fdc0:	b103      	cbz	r3, 3fdc4 <cloud_notify_event+0x8>
		backend->config->handler(backend, evt, user_data);
   3fdc2:	4718      	bx	r3
	}
}
   3fdc4:	4770      	bx	lr

0003fdc6 <api_user_data_set>:
}

static int api_user_data_set(const struct cloud_backend *const backend,
			 void *user_data)
{
	backend->config->user_data = user_data;
   3fdc6:	6843      	ldr	r3, [r0, #4]

	return 0;
}
   3fdc8:	2000      	movs	r0, #0
	backend->config->user_data = user_data;
   3fdca:	60d9      	str	r1, [r3, #12]
}
   3fdcc:	4770      	bx	lr

0003fdce <atomic_set>:
{
   3fdce:	4603      	mov	r3, r0
}
   3fdd0:	e8d3 0fef 	ldaex	r0, [r3]
   3fdd4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   3fdd8:	2a00      	cmp	r2, #0
   3fdda:	d1f9      	bne.n	3fdd0 <atomic_set+0x2>
   3fddc:	4770      	bx	lr

0003fdde <api_ping>:
{
   3fdde:	b508      	push	{r3, lr}
	nct_process();
   3fde0:	f7ee fdf2 	bl	2e9c8 <nct_process>
}
   3fde4:	2000      	movs	r0, #0
   3fde6:	bd08      	pop	{r3, pc}

0003fde8 <api_keepalive_time_left>:
	return nct_keepalive_time_left();
   3fde8:	f7ee bdfa 	b.w	2e9e0 <nct_keepalive_time_left>

0003fdec <api_connect_error_translate>:
	switch (err) {
   3fdec:	f100 030b 	add.w	r3, r0, #11
   3fdf0:	2b0b      	cmp	r3, #11
   3fdf2:	d807      	bhi.n	3fe04 <api_connect_error_translate+0x18>
   3fdf4:	e8df f003 	tbb	[pc, r3]
   3fdf8:	08080808 	.word	0x08080808
   3fdfc:	08060808 	.word	0x08060808
   3fe00:	08080608 	.word	0x08080608
   3fe04:	f7ec bfe6 	b.w	2cdd4 <api_connect_error_translate.part.0>
}
   3fe08:	4770      	bx	lr

0003fe0a <api_input>:
   3fe0a:	b508      	push	{r3, lr}
   3fe0c:	f7ee fddc 	bl	2e9c8 <nct_process>
   3fe10:	2000      	movs	r0, #0
   3fe12:	bd08      	pop	{r3, pc}

0003fe14 <api_connect>:
{
   3fe14:	b538      	push	{r3, r4, r5, lr}
   3fe16:	4605      	mov	r5, r0
	err = nrf_cloud_connect(NULL);
   3fe18:	2000      	movs	r0, #0
   3fe1a:	f7ed f9a1 	bl	2d160 <nrf_cloud_connect>
	if (!err) {
   3fe1e:	4604      	mov	r4, r0
   3fe20:	b918      	cbnz	r0, 3fe2a <api_connect+0x16>
		backend->config->socket = nct_socket_get();
   3fe22:	686d      	ldr	r5, [r5, #4]
   3fe24:	f7ee fde2 	bl	2e9ec <nct_socket_get>
   3fe28:	60a8      	str	r0, [r5, #8]
	return api_connect_error_translate(err);
   3fe2a:	4620      	mov	r0, r4
}
   3fe2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return api_connect_error_translate(err);
   3fe30:	f7ff bfdc 	b.w	3fdec <api_connect_error_translate>

0003fe34 <api_disconnect>:
	return nrf_cloud_disconnect();
   3fe34:	f7ed b9d0 	b.w	2d1d8 <nrf_cloud_disconnect>

0003fe38 <json_add_str>:
{
   3fe38:	b513      	push	{r0, r1, r4, lr}
   3fe3a:	4604      	mov	r4, r0
	json_str = cJSON_CreateString(item);
   3fe3c:	4610      	mov	r0, r2
{
   3fe3e:	9101      	str	r1, [sp, #4]
	json_str = cJSON_CreateString(item);
   3fe40:	f7e9 f870 	bl	28f24 <cJSON_CreateString>
	if (json_str == NULL) {
   3fe44:	4602      	mov	r2, r0
   3fe46:	b130      	cbz	r0, 3fe56 <json_add_str+0x1e>
	cJSON_AddItemToObject(parent, str, item);
   3fe48:	4620      	mov	r0, r4
   3fe4a:	9901      	ldr	r1, [sp, #4]
   3fe4c:	f7ff fac9 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_str);
   3fe50:	2000      	movs	r0, #0
}
   3fe52:	b002      	add	sp, #8
   3fe54:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3fe56:	f06f 000b 	mvn.w	r0, #11
   3fe5a:	e7fa      	b.n	3fe52 <json_add_str+0x1a>

0003fe5c <json_object_decode>:
	return obj ? cJSON_GetObjectItem(obj, str) : NULL;
   3fe5c:	b108      	cbz	r0, 3fe62 <json_object_decode+0x6>
   3fe5e:	f7ff bab4 	b.w	3f3ca <cJSON_GetObjectItem>
}
   3fe62:	4770      	bx	lr

0003fe64 <json_add_null>:
{
   3fe64:	b513      	push	{r0, r1, r4, lr}
   3fe66:	4604      	mov	r4, r0
   3fe68:	9101      	str	r1, [sp, #4]
	json_null = cJSON_CreateNull();
   3fe6a:	f7e9 f83f 	bl	28eec <cJSON_CreateNull>
	if (json_null == NULL) {
   3fe6e:	4602      	mov	r2, r0
   3fe70:	b130      	cbz	r0, 3fe80 <json_add_null+0x1c>
	cJSON_AddItemToObject(parent, str, item);
   3fe72:	4620      	mov	r0, r4
   3fe74:	9901      	ldr	r1, [sp, #4]
   3fe76:	f7ff fab4 	bl	3f3e2 <cJSON_AddItemToObject>
	return json_add_obj(parent, str, json_null);
   3fe7a:	2000      	movs	r0, #0
}
   3fe7c:	b002      	add	sp, #8
   3fe7e:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   3fe80:	f06f 000b 	mvn.w	r0, #11
   3fe84:	e7fa      	b.n	3fe7c <json_add_null+0x18>

0003fe86 <json_decode_and_alloc>:
{
   3fe86:	b538      	push	{r3, r4, r5, lr}
   3fe88:	460d      	mov	r5, r1
	if (obj == NULL || (obj->type != cJSON_String)) {
   3fe8a:	4604      	mov	r4, r0
   3fe8c:	b110      	cbz	r0, 3fe94 <json_decode_and_alloc+0xe>
   3fe8e:	68c3      	ldr	r3, [r0, #12]
   3fe90:	2b10      	cmp	r3, #16
   3fe92:	d004      	beq.n	3fe9e <json_decode_and_alloc+0x18>
		data->ptr = NULL;
   3fe94:	2300      	movs	r3, #0
		return -ENOENT;
   3fe96:	f06f 0001 	mvn.w	r0, #1
		data->ptr = NULL;
   3fe9a:	606b      	str	r3, [r5, #4]
}
   3fe9c:	bd38      	pop	{r3, r4, r5, pc}
	data->len = strlen(obj->valuestring);
   3fe9e:	6900      	ldr	r0, [r0, #16]
   3fea0:	f7dd f9dc 	bl	1d25c <strlen>
   3fea4:	6028      	str	r0, [r5, #0]
	return k_aligned_alloc(sizeof(void *), size);
   3fea6:	1c41      	adds	r1, r0, #1
   3fea8:	2004      	movs	r0, #4
   3feaa:	f7fa fd03 	bl	3a8b4 <k_aligned_alloc>
	data->ptr = nrf_cloud_malloc(data->len + 1);
   3feae:	6068      	str	r0, [r5, #4]
	if (data->ptr == NULL) {
   3feb0:	b130      	cbz	r0, 3fec0 <json_decode_and_alloc+0x3a>
	strncpy((char *)data->ptr, obj->valuestring, data->len + 1);
   3feb2:	682a      	ldr	r2, [r5, #0]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   3feb4:	6921      	ldr	r1, [r4, #16]
   3feb6:	3201      	adds	r2, #1
   3feb8:	f002 f90c 	bl	420d4 <strncpy>
	return 0;
   3febc:	2000      	movs	r0, #0
   3febe:	e7ed      	b.n	3fe9c <json_decode_and_alloc+0x16>
		return -ENOMEM;
   3fec0:	f06f 000b 	mvn.w	r0, #11
   3fec4:	e7ea      	b.n	3fe9c <json_decode_and_alloc+0x16>

0003fec6 <nrf_codec_init>:
{
   3fec6:	b508      	push	{r3, lr}
	cJSON_Init();
   3fec8:	f7e9 f862 	bl	28f90 <cJSON_Init>
}
   3fecc:	2000      	movs	r0, #0
   3fece:	bd08      	pop	{r3, pc}

0003fed0 <cc_disconnection_handler>:
}

static int cc_disconnection_handler(const struct nct_evt *nct_evt)
{
	return 0; /* Nothing to do */
}
   3fed0:	2000      	movs	r0, #0
   3fed2:	4770      	bx	lr

0003fed4 <disconnection_handler>:
{
   3fed4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct nrf_cloud_evt evt = {
   3fed6:	2218      	movs	r2, #24
   3fed8:	2100      	movs	r1, #0
   3feda:	4668      	mov	r0, sp
   3fedc:	f001 feff 	bl	41cde <memset>
   3fee0:	2309      	movs	r3, #9
   3fee2:	f88d 3000 	strb.w	r3, [sp]
   3fee6:	2301      	movs	r3, #1
   3fee8:	9301      	str	r3, [sp, #4]
	if (nfsm_get_disconnect_requested()) {
   3feea:	f7ed f8fd 	bl	2d0e8 <nfsm_get_disconnect_requested>
   3feee:	b108      	cbz	r0, 3fef4 <disconnection_handler+0x20>
		evt.status = NRF_CLOUD_DISCONNECT_USER_REQUEST;
   3fef0:	2300      	movs	r3, #0
   3fef2:	9301      	str	r3, [sp, #4]
	nfsm_set_current_state_and_notify(STATE_INITIALIZED, &evt);
   3fef4:	4669      	mov	r1, sp
   3fef6:	2001      	movs	r0, #1
   3fef8:	f7ed f8ba 	bl	2d070 <nfsm_set_current_state_and_notify>
}
   3fefc:	2000      	movs	r0, #0
   3fefe:	b007      	add	sp, #28
   3ff00:	f85d fb04 	ldr.w	pc, [sp], #4

0003ff04 <dc_rx_data_handler>:
	}
	return 0;
}

static int dc_rx_data_handler(const struct nct_evt *nct_evt)
{
   3ff04:	b510      	push	{r4, lr}
	struct nrf_cloud_evt cloud_evt = {
   3ff06:	2307      	movs	r3, #7
   3ff08:	2400      	movs	r4, #0
{
   3ff0a:	b086      	sub	sp, #24
	struct nrf_cloud_evt cloud_evt = {
   3ff0c:	e9cd 4400 	strd	r4, r4, [sp]
   3ff10:	f88d 3000 	strb.w	r3, [sp]
		.type = NRF_CLOUD_EVT_RX_DATA,
		.data = nct_evt->param.dc->data,
   3ff14:	6843      	ldr	r3, [r0, #4]
	struct nrf_cloud_evt cloud_evt = {
   3ff16:	aa02      	add	r2, sp, #8
   3ff18:	e893 0003 	ldmia.w	r3, {r0, r1}
   3ff1c:	e882 0003 	stmia.w	r2, {r0, r1}
   3ff20:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   3ff24:	ab06      	add	r3, sp, #24
   3ff26:	e903 0003 	stmdb	r3, {r0, r1}
		.topic = nct_evt->param.dc->topic,
	};

	/* All data is forwared to the app */
	nfsm_set_current_state_and_notify(nfsm_get_current_state(), &cloud_evt);
   3ff2a:	f7ed f89b 	bl	2d064 <nfsm_get_current_state>
   3ff2e:	4669      	mov	r1, sp
   3ff30:	f7ed f89e 	bl	2d070 <nfsm_set_current_state_and_notify>

	return 0;
}
   3ff34:	4620      	mov	r0, r4
   3ff36:	b006      	add	sp, #24
   3ff38:	bd10      	pop	{r4, pc}

0003ff3a <dc_connection_handler>:
{
   3ff3a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (nct_evt->status == 0) {
   3ff3c:	6801      	ldr	r1, [r0, #0]
   3ff3e:	b951      	cbnz	r1, 3ff56 <dc_connection_handler+0x1c>
		struct nrf_cloud_evt evt = {
   3ff40:	2218      	movs	r2, #24
   3ff42:	4668      	mov	r0, sp
   3ff44:	f001 fecb 	bl	41cde <memset>
   3ff48:	2305      	movs	r3, #5
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3ff4a:	4669      	mov	r1, sp
   3ff4c:	2009      	movs	r0, #9
		struct nrf_cloud_evt evt = {
   3ff4e:	f88d 3000 	strb.w	r3, [sp]
		nfsm_set_current_state_and_notify(STATE_DC_CONNECTED, &evt);
   3ff52:	f7ed f88d 	bl	2d070 <nfsm_set_current_state_and_notify>
}
   3ff56:	2000      	movs	r0, #0
   3ff58:	b007      	add	sp, #28
   3ff5a:	f85d fb04 	ldr.w	pc, [sp], #4

0003ff5e <cc_tx_ack_in_state_requested_handler>:
{
   3ff5e:	b508      	push	{r3, lr}
	if (nct_evt->param.data_id == CLOUD_STATE_REQ_ID) {
   3ff60:	f241 632e 	movw	r3, #5678	; 0x162e
   3ff64:	6842      	ldr	r2, [r0, #4]
   3ff66:	429a      	cmp	r2, r3
   3ff68:	d103      	bne.n	3ff72 <cc_tx_ack_in_state_requested_handler+0x14>
		nfsm_set_current_state_and_notify(STATE_CLOUD_STATE_REQUESTED,
   3ff6a:	2100      	movs	r1, #0
   3ff6c:	2005      	movs	r0, #5
   3ff6e:	f7ed f87f 	bl	2d070 <nfsm_set_current_state_and_notify>
}
   3ff72:	2000      	movs	r0, #0
   3ff74:	bd08      	pop	{r3, pc}

0003ff76 <dc_disconnection_handler>:
   3ff76:	2000      	movs	r0, #0
   3ff78:	4770      	bx	lr

0003ff7a <dc_tx_ack_handler>:
   3ff7a:	2000      	movs	r0, #0
   3ff7c:	4770      	bx	lr

0003ff7e <nct_dc_send>:
	return dc_send(dc_data, MQTT_QOS_1_AT_LEAST_ONCE);
   3ff7e:	2101      	movs	r1, #1
   3ff80:	f7ee b836 	b.w	2dff0 <dc_send>

0003ff84 <nct_dc_stream>:
	return dc_send(dc_data, MQTT_QOS_0_AT_MOST_ONCE);
   3ff84:	2100      	movs	r1, #0
   3ff86:	f7ee b833 	b.w	2dff0 <dc_send>

0003ff8a <reset_topic>:
{
   3ff8a:	b510      	push	{r4, lr}
   3ff8c:	4604      	mov	r4, r0
	if (topic->utf8) {
   3ff8e:	6800      	ldr	r0, [r0, #0]
   3ff90:	b118      	cbz	r0, 3ff9a <reset_topic+0x10>
		nrf_cloud_free((void *)topic->utf8);
   3ff92:	f001 fe41 	bl	41c18 <k_free>
		topic->utf8 = NULL;
   3ff96:	2300      	movs	r3, #0
   3ff98:	6023      	str	r3, [r4, #0]
	topic->size = 0;
   3ff9a:	2300      	movs	r3, #0
   3ff9c:	6063      	str	r3, [r4, #4]
}
   3ff9e:	bd10      	pop	{r4, pc}

0003ffa0 <request_send>:
	switch (dl->proto) {
   3ffa0:	f8d0 3828 	ldr.w	r3, [r0, #2088]	; 0x828
   3ffa4:	2b06      	cmp	r3, #6
   3ffa6:	d002      	beq.n	3ffae <request_send+0xe>
   3ffa8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   3ffac:	d101      	bne.n	3ffb2 <request_send+0x12>
		return http_get_request_send(dl);
   3ffae:	f7f0 bf3b 	b.w	30e28 <http_get_request_send>
}
   3ffb2:	2000      	movs	r0, #0
   3ffb4:	4770      	bx	lr

0003ffb6 <error_evt_send.isra.0>:
static int error_evt_send(const struct download_client *dl, int error)
   3ffb6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct download_client_evt evt = {
   3ffb8:	2300      	movs	r3, #0
   3ffba:	9301      	str	r3, [sp, #4]
   3ffbc:	9303      	str	r3, [sp, #12]
   3ffbe:	2301      	movs	r3, #1
		.error = -error
   3ffc0:	4249      	negs	r1, r1
	const struct download_client_evt evt = {
   3ffc2:	f88d 3004 	strb.w	r3, [sp, #4]
   3ffc6:	9102      	str	r1, [sp, #8]
	return dl->callback(&evt);
   3ffc8:	6803      	ldr	r3, [r0, #0]
   3ffca:	a801      	add	r0, sp, #4
   3ffcc:	4798      	blx	r3
}
   3ffce:	b005      	add	sp, #20
   3ffd0:	f85d fb04 	ldr.w	pc, [sp], #4

0003ffd4 <socket_send>:
{
   3ffd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	size_t off = 0;
   3ffd8:	2500      	movs	r5, #0
{
   3ffda:	4606      	mov	r6, r0
   3ffdc:	460c      	mov	r4, r1
	return z_impl_zsock_sendto(sock, buf, len, flags, dest_addr, addrlen);
   3ffde:	462f      	mov	r7, r5
		sent = send(client->fd, client->buf + off, len, 0);
   3ffe0:	f100 0804 	add.w	r8, r0, #4
	while (len) {
   3ffe4:	b90c      	cbnz	r4, 3ffea <socket_send+0x16>
	return 0;
   3ffe6:	4620      	mov	r0, r4
   3ffe8:	e00e      	b.n	40008 <CONFIG_PM_SRAM_SIZE+0x8>
		sent = send(client->fd, client->buf + off, len, 0);
   3ffea:	6830      	ldr	r0, [r6, #0]
   3ffec:	2300      	movs	r3, #0
   3ffee:	4622      	mov	r2, r4
   3fff0:	e9cd 7700 	strd	r7, r7, [sp]
   3fff4:	eb08 0105 	add.w	r1, r8, r5
   3fff8:	f7fd fd1a 	bl	3da30 <z_impl_zsock_sendto>
		if (sent <= 0) {
   3fffc:	1e03      	subs	r3, r0, #0
   3fffe:	dc06      	bgt.n	4000e <CONFIG_PM_SRAM_SIZE+0xe>
			return -errno;
   40000:	f7fe f86b 	bl	3e0da <__errno>
   40004:	6800      	ldr	r0, [r0, #0]
   40006:	4240      	negs	r0, r0
}
   40008:	b002      	add	sp, #8
   4000a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		off += sent;
   4000e:	441d      	add	r5, r3
		len -= sent;
   40010:	1ae4      	subs	r4, r4, r3
   40012:	e7e7      	b.n	3ffe4 <socket_send+0x10>

00040014 <download_client_file_size_get>:
	k_thread_resume(client->tid);
}

int download_client_file_size_get(struct download_client *client, size_t *size)
{
	if (!client || !size) {
   40014:	b128      	cbz	r0, 40022 <download_client_file_size_get+0xe>
   40016:	b121      	cbz	r1, 40022 <download_client_file_size_get+0xe>
		return -EINVAL;
	}

	*size = client->file_size;
   40018:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808

	return 0;
   4001c:	2000      	movs	r0, #0
	*size = client->file_size;
   4001e:	600b      	str	r3, [r1, #0]
	return 0;
   40020:	4770      	bx	lr
		return -EINVAL;
   40022:	f06f 0015 	mvn.w	r0, #21
}
   40026:	4770      	bx	lr

00040028 <swallow>:
{
   40028:	b570      	push	{r4, r5, r6, lr}
   4002a:	4605      	mov	r5, r0
	p = strstr(*str, swallow);
   4002c:	6800      	ldr	r0, [r0, #0]
{
   4002e:	460e      	mov	r6, r1
	p = strstr(*str, swallow);
   40030:	f002 f870 	bl	42114 <strstr>
	if (!p) {
   40034:	4604      	mov	r4, r0
   40036:	b130      	cbz	r0, 40046 <swallow+0x1e>
	*str = p + strlen(swallow);
   40038:	4630      	mov	r0, r6
   4003a:	f7dd f90f 	bl	1d25c <strlen>
   4003e:	4404      	add	r4, r0
	return 0;
   40040:	2000      	movs	r0, #0
	*str = p + strlen(swallow);
   40042:	602c      	str	r4, [r5, #0]
}
   40044:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   40046:	2001      	movs	r0, #1
   40048:	e7fc      	b.n	40044 <swallow+0x1c>

0004004a <dfu_target_mcuboot_offset_get>:
	return dfu_target_stream_offset_get(out);
   4004a:	f7f1 bb17 	b.w	3167c <dfu_target_stream_offset_get>

0004004e <dfu_target_mcuboot_write>:
	return dfu_target_stream_write(buf, len);
   4004e:	f7f1 bb1f 	b.w	31690 <dfu_target_stream_write>

00040052 <sensor_sim_attr_set>:
}
   40052:	2000      	movs	r0, #0
   40054:	4770      	bx	lr

00040056 <sensor_sim_thread>:
{
   40056:	b570      	push	{r4, r5, r6, lr}
   40058:	4604      	mov	r4, r0
	struct sensor_sim_data *drv_data = dev->data;
   4005a:	68c5      	ldr	r5, [r0, #12]
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   4005c:	f105 0634 	add.w	r6, r5, #52	; 0x34
	return z_impl_k_sleep(timeout);
   40060:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   40064:	2100      	movs	r1, #0
   40066:	f7f9 f8e7 	bl	39238 <z_impl_k_sleep>
		if (drv_data->drdy_handler != NULL) {
   4006a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   4006c:	2b00      	cmp	r3, #0
   4006e:	d0f7      	beq.n	40060 <sensor_sim_thread+0xa>
			drv_data->drdy_handler(dev, &drv_data->drdy_trigger);
   40070:	4631      	mov	r1, r6
   40072:	4620      	mov	r0, r4
   40074:	4798      	blx	r3
   40076:	e7f3      	b.n	40060 <sensor_sim_thread+0xa>

00040078 <notify_event>:
	if (drv_data->handler) {
   40078:	68c3      	ldr	r3, [r0, #12]
   4007a:	685b      	ldr	r3, [r3, #4]
   4007c:	b103      	cbz	r3, 40080 <notify_event+0x8>
		drv_data->handler(dev, evt);
   4007e:	4718      	bx	r3
}
   40080:	4770      	bx	lr

00040082 <stop_work_fn>:
{
   40082:	b510      	push	{r4, lr}
	const struct device *dev = drv_data->dev;
   40084:	f5a0 6012 	sub.w	r0, r0, #2336	; 0x920
{
   40088:	b0b0      	sub	sp, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   4008a:	6804      	ldr	r4, [r0, #0]
	struct gps_event evt = {
   4008c:	22c0      	movs	r2, #192	; 0xc0
   4008e:	2100      	movs	r1, #0
   40090:	4668      	mov	r0, sp
   40092:	f001 fe24 	bl	41cde <memset>
   40096:	2301      	movs	r3, #1
	notify_event(dev, &evt);
   40098:	4669      	mov	r1, sp
   4009a:	4620      	mov	r0, r4
	struct gps_event evt = {
   4009c:	f88d 3000 	strb.w	r3, [sp]
	notify_event(dev, &evt);
   400a0:	f7ff ffea 	bl	40078 <notify_event>
}
   400a4:	b030      	add	sp, #192	; 0xc0
   400a6:	bd10      	pop	{r4, pc}

000400a8 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   400a8:	e8d0 0faf 	lda	r0, [r0]
}
   400ac:	4770      	bx	lr

000400ae <atomic_set>:
{
   400ae:	4603      	mov	r3, r0
}
   400b0:	e8d3 0fef 	ldaex	r0, [r3]
   400b4:	e8c3 1fe2 	stlex	r2, r1, [r3]
   400b8:	2a00      	cmp	r2, #0
   400ba:	d1f9      	bne.n	400b0 <atomic_set+0x2>
   400bc:	4770      	bx	lr

000400be <timeout_work_fn>:
{
   400be:	b530      	push	{r4, r5, lr}
   400c0:	b0b1      	sub	sp, #196	; 0xc4
	struct gps_event evt = {
   400c2:	22c0      	movs	r2, #192	; 0xc0
	const struct device *dev = drv_data->dev;
   400c4:	f5a0 6315 	sub.w	r3, r0, #2384	; 0x950
{
   400c8:	4604      	mov	r4, r0
	struct gps_event evt = {
   400ca:	2100      	movs	r1, #0
   400cc:	4668      	mov	r0, sp
	const struct device *dev = drv_data->dev;
   400ce:	681d      	ldr	r5, [r3, #0]
	struct gps_event evt = {
   400d0:	f001 fe05 	bl	41cde <memset>
   400d4:	2302      	movs	r3, #2
	atomic_set(&drv_data->timeout_occurred, 1);
   400d6:	2101      	movs	r1, #1
   400d8:	f6a4 102c 	subw	r0, r4, #2348	; 0x92c
	struct gps_event evt = {
   400dc:	f88d 3000 	strb.w	r3, [sp]
	atomic_set(&drv_data->timeout_occurred, 1);
   400e0:	f7ff ffe5 	bl	400ae <atomic_set>
	notify_event(dev, &evt);
   400e4:	4669      	mov	r1, sp
   400e6:	4628      	mov	r0, r5
   400e8:	f7ff ffc6 	bl	40078 <notify_event>
}
   400ec:	b031      	add	sp, #196	; 0xc4
   400ee:	bd30      	pop	{r4, r5, pc}

000400f0 <setup>:
	drv_data->socket = -1;
   400f0:	f04f 33ff 	mov.w	r3, #4294967295
{
   400f4:	b510      	push	{r4, lr}
	struct gps_drv_data *drv_data = dev->data;
   400f6:	68c4      	ldr	r4, [r0, #12]
	atomic_set(&drv_data->is_active, 0);
   400f8:	2100      	movs	r1, #0
	drv_data->socket = -1;
   400fa:	62a3      	str	r3, [r4, #40]	; 0x28
	drv_data->dev = dev;
   400fc:	4623      	mov	r3, r4
   400fe:	f843 0b1c 	str.w	r0, [r3], #28
	atomic_set(&drv_data->is_active, 0);
   40102:	4618      	mov	r0, r3
   40104:	f7ff ffd3 	bl	400ae <atomic_set>
	atomic_set(&drv_data->timeout_occurred, 0);
   40108:	2100      	movs	r1, #0
   4010a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   4010e:	f7ff ffce 	bl	400ae <atomic_set>
}
   40112:	2000      	movs	r0, #0
   40114:	bd10      	pop	{r4, pc}

00040116 <bootutil_buffer_is_erased.part.0>:
bool bootutil_buffer_is_erased(const struct flash_area *area,
   40116:	b538      	push	{r3, r4, r5, lr}
   40118:	460c      	mov	r4, r1
   4011a:	4615      	mov	r5, r2
    erased_val = flash_area_erased_val(area);
   4011c:	f7fd fda7 	bl	3dc6e <flash_area_erased_val>
    for (i = 0, u8b = (uint8_t *)buffer; i < len; i++) {
   40120:	4621      	mov	r1, r4
   40122:	4425      	add	r5, r4
   40124:	42a9      	cmp	r1, r5
   40126:	d101      	bne.n	4012c <bootutil_buffer_is_erased.part.0+0x16>
    return true;
   40128:	2001      	movs	r0, #1
}
   4012a:	bd38      	pop	{r3, r4, r5, pc}
        if (u8b[i] != erased_val) {
   4012c:	f811 3b01 	ldrb.w	r3, [r1], #1
   40130:	4298      	cmp	r0, r3
   40132:	d0f7      	beq.n	40124 <bootutil_buffer_is_erased.part.0+0xe>
            return false;
   40134:	2000      	movs	r0, #0
   40136:	e7f8      	b.n	4012a <bootutil_buffer_is_erased.part.0+0x14>

00040138 <boot_write_trailer.constprop.0>:
boot_write_trailer(const struct flash_area *fap, uint32_t off,
   40138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4013a:	4605      	mov	r5, r0
   4013c:	460e      	mov	r6, r1
   4013e:	4617      	mov	r7, r2
    align = flash_area_align(fap);
   40140:	f7fd fd8c 	bl	3dc5c <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
   40144:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
   40146:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
   40148:	d81b      	bhi.n	40182 <boot_write_trailer.constprop.0+0x4a>
    erased_val = flash_area_erased_val(fap);
   4014a:	4628      	mov	r0, r5
   4014c:	f7fd fd8f 	bl	3dc6e <flash_area_erased_val>
   40150:	2c01      	cmp	r4, #1
   40152:	bf38      	it	cc
   40154:	2401      	movcc	r4, #1
    memcpy(buf, inbuf, inlen);
   40156:	783b      	ldrb	r3, [r7, #0]
   40158:	b2e4      	uxtb	r4, r4
    erased_val = flash_area_erased_val(fap);
   4015a:	4601      	mov	r1, r0
    memcpy(buf, inbuf, inlen);
   4015c:	f88d 3000 	strb.w	r3, [sp]
    memset(&buf[inlen], erased_val, align - inlen);
   40160:	1e62      	subs	r2, r4, #1
   40162:	2307      	movs	r3, #7
   40164:	f10d 0001 	add.w	r0, sp, #1
   40168:	f001 fdc1 	bl	41cee <__memset_chk>
    rc = flash_area_write(fap, off, buf, align);
   4016c:	4623      	mov	r3, r4
   4016e:	466a      	mov	r2, sp
   40170:	4631      	mov	r1, r6
   40172:	4628      	mov	r0, r5
   40174:	f7fd fd23 	bl	3dbbe <flash_area_write>
    if (rc != 0) {
   40178:	3800      	subs	r0, #0
   4017a:	bf18      	it	ne
   4017c:	2001      	movne	r0, #1
}
   4017e:	b003      	add	sp, #12
   40180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return -1;
   40182:	f04f 30ff 	mov.w	r0, #4294967295
   40186:	e7fa      	b.n	4017e <boot_write_trailer.constprop.0+0x46>

00040188 <bootutil_buffer_is_erased>:
    if (buffer == NULL || len == 0) {
   40188:	b111      	cbz	r1, 40190 <bootutil_buffer_is_erased+0x8>
   4018a:	b10a      	cbz	r2, 40190 <bootutil_buffer_is_erased+0x8>
   4018c:	f7ff bfc3 	b.w	40116 <bootutil_buffer_is_erased.part.0>
}
   40190:	2000      	movs	r0, #0
   40192:	4770      	bx	lr

00040194 <boot_read_flag>:
{
   40194:	b538      	push	{r3, r4, r5, lr}
   40196:	460c      	mov	r4, r1
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   40198:	2301      	movs	r3, #1
{
   4019a:	4611      	mov	r1, r2
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   4019c:	4622      	mov	r2, r4
{
   4019e:	4605      	mov	r5, r0
    rc = flash_area_read(fap, off, flag, sizeof *flag);
   401a0:	f7fd fcf0 	bl	3db84 <flash_area_read>
    if (rc < 0) {
   401a4:	2800      	cmp	r0, #0
   401a6:	db10      	blt.n	401ca <boot_read_flag+0x36>
    if (bootutil_buffer_is_erased(fap, flag, sizeof *flag)) {
   401a8:	2201      	movs	r2, #1
   401aa:	4621      	mov	r1, r4
   401ac:	4628      	mov	r0, r5
   401ae:	f7ff ffeb 	bl	40188 <bootutil_buffer_is_erased>
   401b2:	b118      	cbz	r0, 401bc <boot_read_flag+0x28>
        *flag = BOOT_FLAG_UNSET;
   401b4:	2303      	movs	r3, #3
    return 0;
   401b6:	2000      	movs	r0, #0
        *flag = BOOT_FLAG_UNSET;
   401b8:	7023      	strb	r3, [r4, #0]
}
   401ba:	bd38      	pop	{r3, r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
   401bc:	7823      	ldrb	r3, [r4, #0]
   401be:	2b01      	cmp	r3, #1
        return BOOT_FLAG_BAD;
   401c0:	bf0c      	ite	eq
   401c2:	2301      	moveq	r3, #1
   401c4:	2302      	movne	r3, #2
        *flag = boot_flag_decode(*flag);
   401c6:	7023      	strb	r3, [r4, #0]
   401c8:	e7f7      	b.n	401ba <boot_read_flag+0x26>
        return BOOT_EFLASH;
   401ca:	2001      	movs	r0, #1
   401cc:	e7f5      	b.n	401ba <boot_read_flag+0x26>

000401ce <boot_write_image_ok>:
    const uint8_t buf[1] = { flag_val };
   401ce:	2301      	movs	r3, #1
{
   401d0:	b507      	push	{r0, r1, r2, lr}
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   401d2:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, buf, 1);
   401d4:	aa01      	add	r2, sp, #4
   401d6:	3918      	subs	r1, #24
    const uint8_t buf[1] = { flag_val };
   401d8:	f88d 3004 	strb.w	r3, [sp, #4]
    return boot_write_trailer(fap, off, buf, 1);
   401dc:	f7ff ffac 	bl	40138 <boot_write_trailer.constprop.0>
}
   401e0:	b003      	add	sp, #12
   401e2:	f85d fb04 	ldr.w	pc, [sp], #4

000401e6 <boot_read_image_ok>:
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
   401e6:	6882      	ldr	r2, [r0, #8]
    return boot_read_flag(fap, image_ok, boot_image_ok_off(fap));
   401e8:	3a18      	subs	r2, #24
   401ea:	f7ff bfd3 	b.w	40194 <boot_read_flag>

000401ee <boot_read_swap_state_by_id>:
{
   401ee:	b513      	push	{r0, r1, r4, lr}
   401f0:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   401f2:	b2c0      	uxtb	r0, r0
   401f4:	a901      	add	r1, sp, #4
   401f6:	f7e4 fe6d 	bl	24ed4 <flash_area_open>
    if (rc != 0) {
   401fa:	b950      	cbnz	r0, 40212 <boot_read_swap_state_by_id+0x24>
    rc = boot_read_swap_state(fap, state);
   401fc:	4621      	mov	r1, r4
   401fe:	9801      	ldr	r0, [sp, #4]
   40200:	f7f2 fc52 	bl	32aa8 <boot_read_swap_state>
   40204:	4604      	mov	r4, r0
    flash_area_close(fap);
   40206:	9801      	ldr	r0, [sp, #4]
   40208:	f7fd fcbb 	bl	3db82 <flash_area_close>
}
   4020c:	4620      	mov	r0, r4
   4020e:	b002      	add	sp, #8
   40210:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
   40212:	2401      	movs	r4, #1
   40214:	e7fa      	b.n	4020c <boot_read_swap_state_by_id+0x1e>

00040216 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   40216:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(0),
   40218:	2003      	movs	r0, #3
   4021a:	a902      	add	r1, sp, #8
   4021c:	f7ff ffe7 	bl	401ee <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   40220:	4604      	mov	r4, r0
   40222:	b9d0      	cbnz	r0, 4025a <boot_set_confirmed+0x44>
        return rc;
    }

    switch (state_primary_slot.magic) {
   40224:	f89d 3008 	ldrb.w	r3, [sp, #8]
   40228:	2b02      	cmp	r3, #2
   4022a:	d01d      	beq.n	40268 <boot_set_confirmed+0x52>
   4022c:	2b03      	cmp	r3, #3
   4022e:	d014      	beq.n	4025a <boot_set_confirmed+0x44>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(0), &fap);
   40230:	2003      	movs	r0, #3
   40232:	a901      	add	r1, sp, #4
   40234:	f7e4 fe4e 	bl	24ed4 <flash_area_open>
    if (rc) {
   40238:	4604      	mov	r4, r0
   4023a:	b988      	cbnz	r0, 40260 <boot_set_confirmed+0x4a>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   4023c:	f89d 300a 	ldrb.w	r3, [sp, #10]
   40240:	2b03      	cmp	r3, #3
   40242:	d00f      	beq.n	40264 <boot_set_confirmed+0x4e>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   40244:	f89d 300b 	ldrb.w	r3, [sp, #11]
   40248:	2b03      	cmp	r3, #3
   4024a:	d103      	bne.n	40254 <boot_set_confirmed+0x3e>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   4024c:	9801      	ldr	r0, [sp, #4]
   4024e:	f7ff ffbe 	bl	401ce <boot_write_image_ok>
   40252:	4604      	mov	r4, r0

done:
    flash_area_close(fap);
   40254:	9801      	ldr	r0, [sp, #4]
   40256:	f7fd fc94 	bl	3db82 <flash_area_close>
    return rc;
}
   4025a:	4620      	mov	r0, r4
   4025c:	b004      	add	sp, #16
   4025e:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
   40260:	2401      	movs	r4, #1
   40262:	e7f7      	b.n	40254 <boot_set_confirmed+0x3e>
        rc = BOOT_EBADVECT;
   40264:	2404      	movs	r4, #4
   40266:	e7f5      	b.n	40254 <boot_set_confirmed+0x3e>
    switch (state_primary_slot.magic) {
   40268:	2404      	movs	r4, #4
   4026a:	e7f6      	b.n	4025a <boot_set_confirmed+0x44>

0004026c <rpc_handle_ctrl_message>:
   4026c:	2902      	cmp	r1, #2
   4026e:	b510      	push	{r4, lr}
   40270:	4604      	mov	r4, r0
   40272:	d005      	beq.n	40280 <rpc_handle_ctrl_message+0x14>
   40274:	2904      	cmp	r1, #4
   40276:	d001      	beq.n	4027c <rpc_handle_ctrl_message+0x10>
   40278:	2901      	cmp	r1, #1
   4027a:	d107      	bne.n	4028c <rpc_handle_ctrl_message+0x20>
   4027c:	2000      	movs	r0, #0
   4027e:	bd10      	pop	{r4, pc}
   40280:	6880      	ldr	r0, [r0, #8]
   40282:	2800      	cmp	r0, #0
   40284:	d0fa      	beq.n	4027c <rpc_handle_ctrl_message+0x10>
   40286:	f000 f85b 	bl	40340 <rpc_transport_data_free>
   4028a:	e7f7      	b.n	4027c <rpc_handle_ctrl_message+0x10>
   4028c:	6880      	ldr	r0, [r0, #8]
   4028e:	b108      	cbz	r0, 40294 <rpc_handle_ctrl_message+0x28>
   40290:	f000 f856 	bl	40340 <rpc_transport_data_free>
   40294:	4620      	mov	r0, r4
   40296:	f000 f84f 	bl	40338 <rpc_transport_msg_free>
   4029a:	e7ef      	b.n	4027c <rpc_handle_ctrl_message+0x10>

0004029c <rpc_message_send>:
   4029c:	b150      	cbz	r0, 402b4 <rpc_message_send+0x18>
   4029e:	b159      	cbz	r1, 402b8 <rpc_message_send+0x1c>
   402a0:	684b      	ldr	r3, [r1, #4]
   402a2:	8008      	strh	r0, [r1, #0]
   402a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   402a8:	f043 0302 	orr.w	r3, r3, #2
   402ac:	4608      	mov	r0, r1
   402ae:	604b      	str	r3, [r1, #4]
   402b0:	f000 b848 	b.w	40344 <rpc_transport_data_msg_send>
   402b4:	2016      	movs	r0, #22
   402b6:	4770      	bx	lr
   402b8:	200e      	movs	r0, #14
   402ba:	4770      	bx	lr

000402bc <rpc_message_alloc>:
   402bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   402be:	4607      	mov	r7, r0
   402c0:	460d      	mov	r5, r1
   402c2:	4616      	mov	r6, r2
   402c4:	b1d2      	cbz	r2, 402fc <rpc_message_alloc+0x40>
   402c6:	b1d8      	cbz	r0, 40300 <rpc_message_alloc+0x44>
   402c8:	2300      	movs	r3, #0
   402ca:	6013      	str	r3, [r2, #0]
   402cc:	b131      	cbz	r1, 402dc <rpc_message_alloc+0x20>
   402ce:	4608      	mov	r0, r1
   402d0:	f000 f834 	bl	4033c <rpc_transport_data_alloc>
   402d4:	4604      	mov	r4, r0
   402d6:	b910      	cbnz	r0, 402de <rpc_message_alloc+0x22>
   402d8:	200c      	movs	r0, #12
   402da:	e008      	b.n	402ee <rpc_message_alloc+0x32>
   402dc:	460c      	mov	r4, r1
   402de:	f000 f829 	bl	40334 <rpc_transport_data_msg_alloc>
   402e2:	b128      	cbz	r0, 402f0 <rpc_message_alloc+0x34>
   402e4:	60c5      	str	r5, [r0, #12]
   402e6:	6084      	str	r4, [r0, #8]
   402e8:	8007      	strh	r7, [r0, #0]
   402ea:	6030      	str	r0, [r6, #0]
   402ec:	2000      	movs	r0, #0
   402ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   402f0:	2c00      	cmp	r4, #0
   402f2:	d0f1      	beq.n	402d8 <rpc_message_alloc+0x1c>
   402f4:	4620      	mov	r0, r4
   402f6:	f000 f823 	bl	40340 <rpc_transport_data_free>
   402fa:	e7ed      	b.n	402d8 <rpc_message_alloc+0x1c>
   402fc:	200e      	movs	r0, #14
   402fe:	e7f6      	b.n	402ee <rpc_message_alloc+0x32>
   40300:	2016      	movs	r0, #22
   40302:	e7f4      	b.n	402ee <rpc_message_alloc+0x32>

00040304 <rpc_message_free>:
   40304:	b508      	push	{r3, lr}
   40306:	b128      	cbz	r0, 40314 <rpc_message_free+0x10>
   40308:	b131      	cbz	r1, 40318 <rpc_message_free+0x14>
   4030a:	4608      	mov	r0, r1
   4030c:	f000 f814 	bl	40338 <rpc_transport_msg_free>
   40310:	2000      	movs	r0, #0
   40312:	bd08      	pop	{r3, pc}
   40314:	2016      	movs	r0, #22
   40316:	e7fc      	b.n	40312 <rpc_message_free+0xe>
   40318:	200e      	movs	r0, #14
   4031a:	e7fa      	b.n	40312 <rpc_message_free+0xe>

0004031c <rpc_message_data_free>:
   4031c:	b508      	push	{r3, lr}
   4031e:	b128      	cbz	r0, 4032c <rpc_message_data_free+0x10>
   40320:	b131      	cbz	r1, 40330 <rpc_message_data_free+0x14>
   40322:	4608      	mov	r0, r1
   40324:	f000 f80c 	bl	40340 <rpc_transport_data_free>
   40328:	2000      	movs	r0, #0
   4032a:	bd08      	pop	{r3, pc}
   4032c:	2016      	movs	r0, #22
   4032e:	e7fc      	b.n	4032a <rpc_message_data_free+0xe>
   40330:	200e      	movs	r0, #14
   40332:	e7fa      	b.n	4032a <rpc_message_data_free+0xe>

00040334 <rpc_transport_data_msg_alloc>:
   40334:	f7f2 be02 	b.w	32f3c <rpc_transport_ipc_data_msg_alloc>

00040338 <rpc_transport_msg_free>:
   40338:	f7f2 be38 	b.w	32fac <rpc_transport_ipc_msg_free>

0004033c <rpc_transport_data_alloc>:
   4033c:	f7f2 be1c 	b.w	32f78 <rpc_transport_ipc_data_alloc>

00040340 <rpc_transport_data_free>:
   40340:	f7f2 be5a 	b.w	32ff8 <rpc_transport_ipc_data_free>

00040344 <rpc_transport_data_msg_send>:
   40344:	f7f2 bda6 	b.w	32e94 <rpc_transport_ipc_data_msg_send>

00040348 <rpc_transport_request_shutdown>:
   40348:	f7f2 be78 	b.w	3303c <rpc_transport_ipc_request_shutdown>

0004034c <rpc_transport_shutdown_done>:
   4034c:	f7f2 be8e 	b.w	3306c <rpc_transport_ipc_shutdown_done>

00040350 <rpc_transport_shutdown>:
   40350:	f000 b85b 	b.w	4040a <rpc_transport_ipc_shutdown>

00040354 <trace_write>:
   40354:	f64b 63ef 	movw	r3, #48879	; 0xbeef
   40358:	b573      	push	{r0, r1, r4, r5, r6, lr}
   4035a:	f8ad 3000 	strh.w	r3, [sp]
   4035e:	7803      	ldrb	r3, [r0, #0]
   40360:	4604      	mov	r4, r0
   40362:	f88d 3004 	strb.w	r3, [sp, #4]
   40366:	6843      	ldr	r3, [r0, #4]
   40368:	6882      	ldr	r2, [r0, #8]
   4036a:	2105      	movs	r1, #5
   4036c:	4293      	cmp	r3, r2
   4036e:	bf96      	itet	ls
   40370:	6906      	ldrls	r6, [r0, #16]
   40372:	1a9e      	subhi	r6, r3, r2
   40374:	1ab6      	subls	r6, r6, r2
   40376:	4293      	cmp	r3, r2
   40378:	bf2c      	ite	cs
   4037a:	2500      	movcs	r5, #0
   4037c:	68c5      	ldrcc	r5, [r0, #12]
   4037e:	b2b6      	uxth	r6, r6
   40380:	bf38      	it	cc
   40382:	1b5b      	subcc	r3, r3, r5
   40384:	4668      	mov	r0, sp
   40386:	bf38      	it	cc
   40388:	b29d      	uxthcc	r5, r3
   4038a:	f8ad 6002 	strh.w	r6, [sp, #2]
   4038e:	f7ff f8db 	bl	3f548 <nrf_modem_os_trace_put>
   40392:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   40396:	68a0      	ldr	r0, [r4, #8]
   40398:	f7ff f8d6 	bl	3f548 <nrf_modem_os_trace_put>
   4039c:	68a3      	ldr	r3, [r4, #8]
   4039e:	441e      	add	r6, r3
   403a0:	6923      	ldr	r3, [r4, #16]
   403a2:	60a6      	str	r6, [r4, #8]
   403a4:	429e      	cmp	r6, r3
   403a6:	bf04      	itt	eq
   403a8:	68e3      	ldreq	r3, [r4, #12]
   403aa:	60a3      	streq	r3, [r4, #8]
   403ac:	b17d      	cbz	r5, 403ce <trace_write+0x7a>
   403ae:	2105      	movs	r1, #5
   403b0:	4668      	mov	r0, sp
   403b2:	f8ad 5002 	strh.w	r5, [sp, #2]
   403b6:	f7ff f8c7 	bl	3f548 <nrf_modem_os_trace_put>
   403ba:	f8bd 1002 	ldrh.w	r1, [sp, #2]
   403be:	68e0      	ldr	r0, [r4, #12]
   403c0:	f7ff f8c2 	bl	3f548 <nrf_modem_os_trace_put>
   403c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   403c8:	68e3      	ldr	r3, [r4, #12]
   403ca:	4413      	add	r3, r2
   403cc:	60a3      	str	r3, [r4, #8]
   403ce:	b002      	add	sp, #8
   403d0:	bd70      	pop	{r4, r5, r6, pc}

000403d2 <rpc_transport_ipc_msg_alloc>:
   403d2:	2300      	movs	r3, #0
   403d4:	b570      	push	{r4, r5, r6, lr}
   403d6:	6806      	ldr	r6, [r0, #0]
   403d8:	429e      	cmp	r6, r3
   403da:	d101      	bne.n	403e0 <rpc_transport_ipc_msg_alloc+0xe>
   403dc:	2000      	movs	r0, #0
   403de:	e00d      	b.n	403fc <rpc_transport_ipc_msg_alloc+0x2a>
   403e0:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
   403e4:	6865      	ldr	r5, [r4, #4]
   403e6:	b2ed      	uxtb	r5, r5
   403e8:	2d03      	cmp	r5, #3
   403ea:	d108      	bne.n	403fe <rpc_transport_ipc_msg_alloc+0x2c>
   403ec:	eb01 1083 	add.w	r0, r1, r3, lsl #6
   403f0:	60a0      	str	r0, [r4, #8]
   403f2:	6863      	ldr	r3, [r4, #4]
   403f4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   403f8:	6063      	str	r3, [r4, #4]
   403fa:	7102      	strb	r2, [r0, #4]
   403fc:	bd70      	pop	{r4, r5, r6, pc}
   403fe:	b915      	cbnz	r5, 40406 <rpc_transport_ipc_msg_alloc+0x34>
   40400:	68a5      	ldr	r5, [r4, #8]
   40402:	2d00      	cmp	r5, #0
   40404:	d0f2      	beq.n	403ec <rpc_transport_ipc_msg_alloc+0x1a>
   40406:	3301      	adds	r3, #1
   40408:	e7e6      	b.n	403d8 <rpc_transport_ipc_msg_alloc+0x6>

0004040a <rpc_transport_ipc_shutdown>:
   4040a:	f7f6 bbd5 	b.w	36bb8 <nrfx_ipc_uninit>

0004040e <at_client_evt_handler>:
   4040e:	b120      	cbz	r0, 4041a <at_client_evt_handler+0xc>
   40410:	f850 1b08 	ldr.w	r1, [r0], #8
   40414:	0c09      	lsrs	r1, r1, #16
   40416:	f000 bec3 	b.w	411a0 <rpc_at_event_handler>
   4041a:	4770      	bx	lr

0004041c <rpc_at_client_request_alloc>:
   4041c:	b513      	push	{r0, r1, r4, lr}
   4041e:	4604      	mov	r4, r0
   40420:	b160      	cbz	r0, 4043c <rpc_at_client_request_alloc+0x20>
   40422:	2300      	movs	r3, #0
   40424:	2003      	movs	r0, #3
   40426:	aa01      	add	r2, sp, #4
   40428:	9301      	str	r3, [sp, #4]
   4042a:	f7ff ff47 	bl	402bc <rpc_message_alloc>
   4042e:	b918      	cbnz	r0, 40438 <rpc_at_client_request_alloc+0x1c>
   40430:	9b01      	ldr	r3, [sp, #4]
   40432:	b10b      	cbz	r3, 40438 <rpc_at_client_request_alloc+0x1c>
   40434:	3308      	adds	r3, #8
   40436:	6023      	str	r3, [r4, #0]
   40438:	b002      	add	sp, #8
   4043a:	bd10      	pop	{r4, pc}
   4043c:	200e      	movs	r0, #14
   4043e:	e7fb      	b.n	40438 <rpc_at_client_request_alloc+0x1c>

00040440 <rpc_at_client_request_send>:
   40440:	b148      	cbz	r0, 40456 <rpc_at_client_request_send+0x16>
   40442:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   40446:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   4044a:	4601      	mov	r1, r0
   4044c:	2003      	movs	r0, #3
   4044e:	f841 2d08 	str.w	r2, [r1, #-8]!
   40452:	f7ff bf23 	b.w	4029c <rpc_message_send>
   40456:	200e      	movs	r0, #14
   40458:	4770      	bx	lr

0004045a <rpc_at_client_message_free>:
   4045a:	b120      	cbz	r0, 40466 <rpc_at_client_message_free+0xc>
   4045c:	f1a0 0108 	sub.w	r1, r0, #8
   40460:	2003      	movs	r0, #3
   40462:	f7ff bf4f 	b.w	40304 <rpc_message_free>
   40466:	200e      	movs	r0, #14
   40468:	4770      	bx	lr

0004046a <rpc_at_client_data_free>:
   4046a:	4601      	mov	r1, r0
   4046c:	b110      	cbz	r0, 40474 <rpc_at_client_data_free+0xa>
   4046e:	2003      	movs	r0, #3
   40470:	f7ff bf54 	b.w	4031c <rpc_message_data_free>
   40474:	200e      	movs	r0, #14
   40476:	4770      	bx	lr

00040478 <ip_client_event_handler>:
   40478:	f850 1b08 	ldr.w	r1, [r0], #8
   4047c:	0c09      	lsrs	r1, r1, #16
   4047e:	f7f3 bde7 	b.w	34050 <rpc_ip_event_handler>

00040482 <rpc_ip_client_request_alloc>:
   40482:	2300      	movs	r3, #0
   40484:	b513      	push	{r0, r1, r4, lr}
   40486:	4604      	mov	r4, r0
   40488:	9301      	str	r3, [sp, #4]
   4048a:	b150      	cbz	r0, 404a2 <rpc_ip_client_request_alloc+0x20>
   4048c:	2004      	movs	r0, #4
   4048e:	aa01      	add	r2, sp, #4
   40490:	f7ff ff14 	bl	402bc <rpc_message_alloc>
   40494:	b918      	cbnz	r0, 4049e <rpc_ip_client_request_alloc+0x1c>
   40496:	9b01      	ldr	r3, [sp, #4]
   40498:	b10b      	cbz	r3, 4049e <rpc_ip_client_request_alloc+0x1c>
   4049a:	3308      	adds	r3, #8
   4049c:	6023      	str	r3, [r4, #0]
   4049e:	b002      	add	sp, #8
   404a0:	bd10      	pop	{r4, pc}
   404a2:	200e      	movs	r0, #14
   404a4:	e7fb      	b.n	4049e <rpc_ip_client_request_alloc+0x1c>

000404a6 <rpc_ip_client_request_send>:
   404a6:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   404aa:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
   404ae:	d10a      	bne.n	404c6 <rpc_ip_client_request_send+0x20>
   404b0:	b158      	cbz	r0, 404ca <rpc_ip_client_request_send+0x24>
   404b2:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   404b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   404ba:	4601      	mov	r1, r0
   404bc:	2004      	movs	r0, #4
   404be:	f841 3d08 	str.w	r3, [r1, #-8]!
   404c2:	f7ff beeb 	b.w	4029c <rpc_message_send>
   404c6:	2001      	movs	r0, #1
   404c8:	4770      	bx	lr
   404ca:	200e      	movs	r0, #14
   404cc:	4770      	bx	lr

000404ce <rpc_ip_client_message_free>:
   404ce:	b120      	cbz	r0, 404da <rpc_ip_client_message_free+0xc>
   404d0:	f1a0 0108 	sub.w	r1, r0, #8
   404d4:	2004      	movs	r0, #4
   404d6:	f7ff bf15 	b.w	40304 <rpc_message_free>
   404da:	200e      	movs	r0, #14
   404dc:	4770      	bx	lr

000404de <rpc_ip_client_data_free>:
   404de:	4601      	mov	r1, r0
   404e0:	b110      	cbz	r0, 404e8 <rpc_ip_client_data_free+0xa>
   404e2:	2004      	movs	r0, #4
   404e4:	f7ff bf1a 	b.w	4031c <rpc_message_data_free>
   404e8:	200e      	movs	r0, #14
   404ea:	4770      	bx	lr

000404ec <dfu_client_event_handler>:
   404ec:	f850 1b08 	ldr.w	r1, [r0], #8
   404f0:	0c09      	lsrs	r1, r1, #16
   404f2:	f7f4 bc85 	b.w	34e00 <rpc_dfu_event_handler>

000404f6 <rpc_dfu_client_request_alloc>:
   404f6:	2300      	movs	r3, #0
   404f8:	b513      	push	{r0, r1, r4, lr}
   404fa:	4604      	mov	r4, r0
   404fc:	9301      	str	r3, [sp, #4]
   404fe:	b150      	cbz	r0, 40516 <rpc_dfu_client_request_alloc+0x20>
   40500:	2006      	movs	r0, #6
   40502:	aa01      	add	r2, sp, #4
   40504:	f7ff feda 	bl	402bc <rpc_message_alloc>
   40508:	b918      	cbnz	r0, 40512 <rpc_dfu_client_request_alloc+0x1c>
   4050a:	9b01      	ldr	r3, [sp, #4]
   4050c:	b10b      	cbz	r3, 40512 <rpc_dfu_client_request_alloc+0x1c>
   4050e:	3308      	adds	r3, #8
   40510:	6023      	str	r3, [r4, #0]
   40512:	b002      	add	sp, #8
   40514:	bd10      	pop	{r4, pc}
   40516:	200e      	movs	r0, #14
   40518:	e7fb      	b.n	40512 <rpc_dfu_client_request_alloc+0x1c>

0004051a <rpc_dfu_client_request_send>:
   4051a:	f411 4f70 	tst.w	r1, #61440	; 0xf000
   4051e:	d10a      	bne.n	40536 <rpc_dfu_client_request_send+0x1c>
   40520:	b158      	cbz	r0, 4053a <rpc_dfu_client_request_send+0x20>
   40522:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   40526:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   4052a:	4601      	mov	r1, r0
   4052c:	2006      	movs	r0, #6
   4052e:	f841 3d08 	str.w	r3, [r1, #-8]!
   40532:	f7ff beb3 	b.w	4029c <rpc_message_send>
   40536:	2001      	movs	r0, #1
   40538:	4770      	bx	lr
   4053a:	200e      	movs	r0, #14
   4053c:	4770      	bx	lr

0004053e <rpc_dfu_client_message_free>:
   4053e:	b120      	cbz	r0, 4054a <rpc_dfu_client_message_free+0xc>
   40540:	f1a0 0108 	sub.w	r1, r0, #8
   40544:	2006      	movs	r0, #6
   40546:	f7ff bedd 	b.w	40304 <rpc_message_free>
   4054a:	200e      	movs	r0, #14
   4054c:	4770      	bx	lr

0004054e <rpc_dfu_client_data_free>:
   4054e:	4601      	mov	r1, r0
   40550:	b110      	cbz	r0, 40558 <rpc_dfu_client_data_free+0xa>
   40552:	2006      	movs	r0, #6
   40554:	f7ff bee2 	b.w	4031c <rpc_message_data_free>
   40558:	200e      	movs	r0, #14
   4055a:	4770      	bx	lr

0004055c <gnss_client_event_handler>:
   4055c:	f850 1b08 	ldr.w	r1, [r0], #8
   40560:	0c09      	lsrs	r1, r1, #16
   40562:	f7f4 bde3 	b.w	3512c <rpc_gnss_event_handler>

00040566 <rpc_gnss_client_request_alloc>:
   40566:	2300      	movs	r3, #0
   40568:	b513      	push	{r0, r1, r4, lr}
   4056a:	4604      	mov	r4, r0
   4056c:	9301      	str	r3, [sp, #4]
   4056e:	b150      	cbz	r0, 40586 <rpc_gnss_client_request_alloc+0x20>
   40570:	2007      	movs	r0, #7
   40572:	aa01      	add	r2, sp, #4
   40574:	f7ff fea2 	bl	402bc <rpc_message_alloc>
   40578:	b918      	cbnz	r0, 40582 <rpc_gnss_client_request_alloc+0x1c>
   4057a:	9b01      	ldr	r3, [sp, #4]
   4057c:	b10b      	cbz	r3, 40582 <rpc_gnss_client_request_alloc+0x1c>
   4057e:	3308      	adds	r3, #8
   40580:	6023      	str	r3, [r4, #0]
   40582:	b002      	add	sp, #8
   40584:	bd10      	pop	{r4, pc}
   40586:	200e      	movs	r0, #14
   40588:	e7fb      	b.n	40582 <rpc_gnss_client_request_alloc+0x1c>

0004058a <rpc_gnss_client_request_send>:
   4058a:	f401 4370 	and.w	r3, r1, #61440	; 0xf000
   4058e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   40592:	d10a      	bne.n	405aa <rpc_gnss_client_request_send+0x20>
   40594:	b158      	cbz	r0, 405ae <rpc_gnss_client_request_send+0x24>
   40596:	f830 3c08 	ldrh.w	r3, [r0, #-8]
   4059a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   4059e:	4601      	mov	r1, r0
   405a0:	2007      	movs	r0, #7
   405a2:	f841 3d08 	str.w	r3, [r1, #-8]!
   405a6:	f7ff be79 	b.w	4029c <rpc_message_send>
   405aa:	2001      	movs	r0, #1
   405ac:	4770      	bx	lr
   405ae:	200e      	movs	r0, #14
   405b0:	4770      	bx	lr

000405b2 <rpc_gnss_client_message_free>:
   405b2:	b120      	cbz	r0, 405be <rpc_gnss_client_message_free+0xc>
   405b4:	f1a0 0108 	sub.w	r1, r0, #8
   405b8:	2007      	movs	r0, #7
   405ba:	f7ff bea3 	b.w	40304 <rpc_message_free>
   405be:	200e      	movs	r0, #14
   405c0:	4770      	bx	lr

000405c2 <rpc_gnss_client_data_free>:
   405c2:	4601      	mov	r1, r0
   405c4:	b110      	cbz	r0, 405cc <rpc_gnss_client_data_free+0xa>
   405c6:	2007      	movs	r0, #7
   405c8:	f7ff bea8 	b.w	4031c <rpc_message_data_free>
   405cc:	200e      	movs	r0, #14
   405ce:	4770      	bx	lr

000405d0 <rpc_gnss_serialize_utc>:
   405d0:	b1c0      	cbz	r0, 40604 <rpc_gnss_serialize_utc+0x34>
   405d2:	b1b9      	cbz	r1, 40604 <rpc_gnss_serialize_utc+0x34>
   405d4:	2301      	movs	r3, #1
   405d6:	700b      	strb	r3, [r1, #0]
   405d8:	2300      	movs	r3, #0
   405da:	704b      	strb	r3, [r1, #1]
   405dc:	6843      	ldr	r3, [r0, #4]
   405de:	f8c1 3006 	str.w	r3, [r1, #6]
   405e2:	6803      	ldr	r3, [r0, #0]
   405e4:	f8c1 3002 	str.w	r3, [r1, #2]
   405e8:	7a83      	ldrb	r3, [r0, #10]
   405ea:	730b      	strb	r3, [r1, #12]
   405ec:	7b43      	ldrb	r3, [r0, #13]
   405ee:	73cb      	strb	r3, [r1, #15]
   405f0:	7b03      	ldrb	r3, [r0, #12]
   405f2:	738b      	strb	r3, [r1, #14]
   405f4:	7a03      	ldrb	r3, [r0, #8]
   405f6:	728b      	strb	r3, [r1, #10]
   405f8:	7ac3      	ldrb	r3, [r0, #11]
   405fa:	734b      	strb	r3, [r1, #13]
   405fc:	7a43      	ldrb	r3, [r0, #9]
   405fe:	2010      	movs	r0, #16
   40600:	72cb      	strb	r3, [r1, #11]
   40602:	4770      	bx	lr
   40604:	f04f 30ff 	mov.w	r0, #4294967295
   40608:	4770      	bx	lr

0004060a <rpc_gnss_serialize_ephe>:
   4060a:	2800      	cmp	r0, #0
   4060c:	d044      	beq.n	40698 <rpc_gnss_serialize_ephe+0x8e>
   4060e:	2900      	cmp	r1, #0
   40610:	d042      	beq.n	40698 <rpc_gnss_serialize_ephe+0x8e>
   40612:	2302      	movs	r3, #2
   40614:	700b      	strb	r3, [r1, #0]
   40616:	2300      	movs	r3, #0
   40618:	704b      	strb	r3, [r1, #1]
   4061a:	68c3      	ldr	r3, [r0, #12]
   4061c:	f8c1 300b 	str.w	r3, [r1, #11]
   40620:	8903      	ldrh	r3, [r0, #8]
   40622:	f8a1 3009 	strh.w	r3, [r1, #9]
   40626:	7983      	ldrb	r3, [r0, #6]
   40628:	720b      	strb	r3, [r1, #8]
   4062a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   4062e:	878b      	strh	r3, [r1, #60]	; 0x3c
   40630:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   40632:	86cb      	strh	r3, [r1, #54]	; 0x36
   40634:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   40638:	874b      	strh	r3, [r1, #58]	; 0x3a
   4063a:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   4063c:	868b      	strh	r3, [r1, #52]	; 0x34
   4063e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
   40642:	87cb      	strh	r3, [r1, #62]	; 0x3e
   40644:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   40648:	870b      	strh	r3, [r1, #56]	; 0x38
   4064a:	8b83      	ldrh	r3, [r0, #28]
   4064c:	830b      	strh	r3, [r1, #24]
   4064e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   40650:	f8c1 3022 	str.w	r3, [r1, #34]	; 0x22
   40654:	7c83      	ldrb	r3, [r0, #18]
   40656:	744b      	strb	r3, [r1, #17]
   40658:	7843      	ldrb	r3, [r0, #1]
   4065a:	70cb      	strb	r3, [r1, #3]
   4065c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   4065e:	62cb      	str	r3, [r1, #44]	; 0x2c
   40660:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   40662:	84cb      	strh	r3, [r1, #38]	; 0x26
   40664:	8843      	ldrh	r3, [r0, #2]
   40666:	808b      	strh	r3, [r1, #4]
   40668:	6a03      	ldr	r3, [r0, #32]
   4066a:	f8c1 301a 	str.w	r3, [r1, #26]
   4066e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   40670:	630b      	str	r3, [r1, #48]	; 0x30
   40672:	6a43      	ldr	r3, [r0, #36]	; 0x24
   40674:	f8c1 301e 	str.w	r3, [r1, #30]
   40678:	6b03      	ldr	r3, [r0, #48]	; 0x30
   4067a:	628b      	str	r3, [r1, #40]	; 0x28
   4067c:	7803      	ldrb	r3, [r0, #0]
   4067e:	708b      	strb	r3, [r1, #2]
   40680:	7c03      	ldrb	r3, [r0, #16]
   40682:	73cb      	strb	r3, [r1, #15]
   40684:	8883      	ldrh	r3, [r0, #4]
   40686:	80cb      	strh	r3, [r1, #6]
   40688:	8a83      	ldrh	r3, [r0, #20]
   4068a:	824b      	strh	r3, [r1, #18]
   4068c:	7c43      	ldrb	r3, [r0, #17]
   4068e:	740b      	strb	r3, [r1, #16]
   40690:	6983      	ldr	r3, [r0, #24]
   40692:	2040      	movs	r0, #64	; 0x40
   40694:	614b      	str	r3, [r1, #20]
   40696:	4770      	bx	lr
   40698:	f04f 30ff 	mov.w	r0, #4294967295
   4069c:	4770      	bx	lr

0004069e <rpc_gnss_serialize_alm>:
   4069e:	b340      	cbz	r0, 406f2 <rpc_gnss_serialize_alm+0x54>
   406a0:	b339      	cbz	r1, 406f2 <rpc_gnss_serialize_alm+0x54>
   406a2:	2303      	movs	r3, #3
   406a4:	700b      	strb	r3, [r1, #0]
   406a6:	2300      	movs	r3, #0
   406a8:	704b      	strb	r3, [r1, #1]
   406aa:	8b83      	ldrh	r3, [r0, #28]
   406ac:	f8a1 301d 	strh.w	r3, [r1, #29]
   406b0:	8bc3      	ldrh	r3, [r0, #30]
   406b2:	f8a1 301f 	strh.w	r3, [r1, #31]
   406b6:	88c3      	ldrh	r3, [r0, #6]
   406b8:	810b      	strh	r3, [r1, #8]
   406ba:	8883      	ldrh	r3, [r0, #4]
   406bc:	80cb      	strh	r3, [r1, #6]
   406be:	78c3      	ldrb	r3, [r0, #3]
   406c0:	714b      	strb	r3, [r1, #5]
   406c2:	6983      	ldr	r3, [r0, #24]
   406c4:	f8c1 3019 	str.w	r3, [r1, #25]
   406c8:	6903      	ldr	r3, [r0, #16]
   406ca:	f8c1 3011 	str.w	r3, [r1, #17]
   406ce:	8903      	ldrh	r3, [r0, #8]
   406d0:	814b      	strh	r3, [r1, #10]
   406d2:	68c3      	ldr	r3, [r0, #12]
   406d4:	f8c1 300d 	str.w	r3, [r1, #13]
   406d8:	7a83      	ldrb	r3, [r0, #10]
   406da:	730b      	strb	r3, [r1, #12]
   406dc:	7803      	ldrb	r3, [r0, #0]
   406de:	708b      	strb	r3, [r1, #2]
   406e0:	7883      	ldrb	r3, [r0, #2]
   406e2:	710b      	strb	r3, [r1, #4]
   406e4:	6943      	ldr	r3, [r0, #20]
   406e6:	f8c1 3015 	str.w	r3, [r1, #21]
   406ea:	7843      	ldrb	r3, [r0, #1]
   406ec:	2021      	movs	r0, #33	; 0x21
   406ee:	70cb      	strb	r3, [r1, #3]
   406f0:	4770      	bx	lr
   406f2:	f04f 30ff 	mov.w	r0, #4294967295
   406f6:	4770      	bx	lr

000406f8 <rpc_gnss_serialize_klob>:
   406f8:	b1b0      	cbz	r0, 40728 <rpc_gnss_serialize_klob+0x30>
   406fa:	b1a9      	cbz	r1, 40728 <rpc_gnss_serialize_klob+0x30>
   406fc:	2304      	movs	r3, #4
   406fe:	700b      	strb	r3, [r1, #0]
   40700:	2300      	movs	r3, #0
   40702:	704b      	strb	r3, [r1, #1]
   40704:	7803      	ldrb	r3, [r0, #0]
   40706:	708b      	strb	r3, [r1, #2]
   40708:	7843      	ldrb	r3, [r0, #1]
   4070a:	70cb      	strb	r3, [r1, #3]
   4070c:	7883      	ldrb	r3, [r0, #2]
   4070e:	710b      	strb	r3, [r1, #4]
   40710:	78c3      	ldrb	r3, [r0, #3]
   40712:	714b      	strb	r3, [r1, #5]
   40714:	7903      	ldrb	r3, [r0, #4]
   40716:	718b      	strb	r3, [r1, #6]
   40718:	7943      	ldrb	r3, [r0, #5]
   4071a:	71cb      	strb	r3, [r1, #7]
   4071c:	7983      	ldrb	r3, [r0, #6]
   4071e:	720b      	strb	r3, [r1, #8]
   40720:	79c3      	ldrb	r3, [r0, #7]
   40722:	200a      	movs	r0, #10
   40724:	724b      	strb	r3, [r1, #9]
   40726:	4770      	bx	lr
   40728:	f04f 30ff 	mov.w	r0, #4294967295
   4072c:	4770      	bx	lr

0004072e <rpc_gnss_serialize_nequick>:
   4072e:	b180      	cbz	r0, 40752 <rpc_gnss_serialize_nequick+0x24>
   40730:	b179      	cbz	r1, 40752 <rpc_gnss_serialize_nequick+0x24>
   40732:	2305      	movs	r3, #5
   40734:	700b      	strb	r3, [r1, #0]
   40736:	2300      	movs	r3, #0
   40738:	704b      	strb	r3, [r1, #1]
   4073a:	8803      	ldrh	r3, [r0, #0]
   4073c:	804b      	strh	r3, [r1, #2]
   4073e:	8843      	ldrh	r3, [r0, #2]
   40740:	808b      	strh	r3, [r1, #4]
   40742:	8883      	ldrh	r3, [r0, #4]
   40744:	80cb      	strh	r3, [r1, #6]
   40746:	7983      	ldrb	r3, [r0, #6]
   40748:	720b      	strb	r3, [r1, #8]
   4074a:	79c3      	ldrb	r3, [r0, #7]
   4074c:	200a      	movs	r0, #10
   4074e:	724b      	strb	r3, [r1, #9]
   40750:	4770      	bx	lr
   40752:	f04f 30ff 	mov.w	r0, #4294967295
   40756:	4770      	bx	lr

00040758 <rpc_gnss_serialize_time_and_sv_tow>:
   40758:	b570      	push	{r4, r5, r6, lr}
   4075a:	b1e8      	cbz	r0, 40798 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   4075c:	b1e1      	cbz	r1, 40798 <rpc_gnss_serialize_time_and_sv_tow+0x40>
   4075e:	2206      	movs	r2, #6
   40760:	2300      	movs	r3, #0
   40762:	700a      	strb	r2, [r1, #0]
   40764:	8802      	ldrh	r2, [r0, #0]
   40766:	704b      	strb	r3, [r1, #1]
   40768:	804a      	strh	r2, [r1, #2]
   4076a:	68c2      	ldr	r2, [r0, #12]
   4076c:	f101 0410 	add.w	r4, r1, #16
   40770:	f8c1 200a 	str.w	r2, [r1, #10]
   40774:	8902      	ldrh	r2, [r0, #8]
   40776:	810a      	strh	r2, [r1, #8]
   40778:	6842      	ldr	r2, [r0, #4]
   4077a:	604a      	str	r2, [r1, #4]
   4077c:	8a06      	ldrh	r6, [r0, #16]
   4077e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   40782:	188d      	adds	r5, r1, r2
   40784:	81ee      	strh	r6, [r5, #14]
   40786:	7c85      	ldrb	r5, [r0, #18]
   40788:	3301      	adds	r3, #1
   4078a:	2b20      	cmp	r3, #32
   4078c:	54a5      	strb	r5, [r4, r2]
   4078e:	f100 0004 	add.w	r0, r0, #4
   40792:	d1f3      	bne.n	4077c <rpc_gnss_serialize_time_and_sv_tow+0x24>
   40794:	206e      	movs	r0, #110	; 0x6e
   40796:	bd70      	pop	{r4, r5, r6, pc}
   40798:	f04f 30ff 	mov.w	r0, #4294967295
   4079c:	e7fb      	b.n	40796 <rpc_gnss_serialize_time_and_sv_tow+0x3e>

0004079e <rpc_gnss_serialize_location>:
   4079e:	b1c0      	cbz	r0, 407d2 <rpc_gnss_serialize_location+0x34>
   407a0:	b1b9      	cbz	r1, 407d2 <rpc_gnss_serialize_location+0x34>
   407a2:	2307      	movs	r3, #7
   407a4:	700b      	strb	r3, [r1, #0]
   407a6:	2300      	movs	r3, #0
   407a8:	704b      	strb	r3, [r1, #1]
   407aa:	8903      	ldrh	r3, [r0, #8]
   407ac:	814b      	strh	r3, [r1, #10]
   407ae:	7b83      	ldrb	r3, [r0, #14]
   407b0:	740b      	strb	r3, [r1, #16]
   407b2:	6803      	ldr	r3, [r0, #0]
   407b4:	f8c1 3002 	str.w	r3, [r1, #2]
   407b8:	6843      	ldr	r3, [r0, #4]
   407ba:	f8c1 3006 	str.w	r3, [r1, #6]
   407be:	7b03      	ldrb	r3, [r0, #12]
   407c0:	738b      	strb	r3, [r1, #14]
   407c2:	7b43      	ldrb	r3, [r0, #13]
   407c4:	73cb      	strb	r3, [r1, #15]
   407c6:	7a83      	ldrb	r3, [r0, #10]
   407c8:	730b      	strb	r3, [r1, #12]
   407ca:	7ac3      	ldrb	r3, [r0, #11]
   407cc:	2011      	movs	r0, #17
   407ce:	734b      	strb	r3, [r1, #13]
   407d0:	4770      	bx	lr
   407d2:	f04f 30ff 	mov.w	r0, #4294967295
   407d6:	4770      	bx	lr

000407d8 <rpc_gnss_serialize_integrity>:
   407d8:	b148      	cbz	r0, 407ee <rpc_gnss_serialize_integrity+0x16>
   407da:	b141      	cbz	r1, 407ee <rpc_gnss_serialize_integrity+0x16>
   407dc:	2308      	movs	r3, #8
   407de:	700b      	strb	r3, [r1, #0]
   407e0:	2300      	movs	r3, #0
   407e2:	704b      	strb	r3, [r1, #1]
   407e4:	6803      	ldr	r3, [r0, #0]
   407e6:	2006      	movs	r0, #6
   407e8:	f8c1 3002 	str.w	r3, [r1, #2]
   407ec:	4770      	bx	lr
   407ee:	f04f 30ff 	mov.w	r0, #4294967295
   407f2:	4770      	bx	lr

000407f4 <packet_handler_alloc_and_init>:
   407f4:	b538      	push	{r3, r4, r5, lr}
   407f6:	4604      	mov	r4, r0
   407f8:	4608      	mov	r0, r1
   407fa:	4611      	mov	r1, r2
   407fc:	4622      	mov	r2, r4
   407fe:	f7f5 fdf7 	bl	363f0 <packet_handler_create>
   40802:	61e0      	str	r0, [r4, #28]
   40804:	b158      	cbz	r0, 4081e <packet_handler_alloc_and_init+0x2a>
   40806:	6803      	ldr	r3, [r0, #0]
   40808:	681b      	ldr	r3, [r3, #0]
   4080a:	4798      	blx	r3
   4080c:	4605      	mov	r5, r0
   4080e:	b120      	cbz	r0, 4081a <packet_handler_alloc_and_init+0x26>
   40810:	69e0      	ldr	r0, [r4, #28]
   40812:	f000 feb6 	bl	41582 <packet_handler_delete>
   40816:	2300      	movs	r3, #0
   40818:	61e3      	str	r3, [r4, #28]
   4081a:	4628      	mov	r0, r5
   4081c:	bd38      	pop	{r3, r4, r5, pc}
   4081e:	250c      	movs	r5, #12
   40820:	e7fb      	b.n	4081a <packet_handler_alloc_and_init+0x26>

00040822 <socket_free>:
   40822:	b510      	push	{r4, lr}
   40824:	4604      	mov	r4, r0
   40826:	69c0      	ldr	r0, [r0, #28]
   40828:	b108      	cbz	r0, 4082e <socket_free+0xc>
   4082a:	f000 feaa 	bl	41582 <packet_handler_delete>
   4082e:	4620      	mov	r0, r4
   40830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40834:	2228      	movs	r2, #40	; 0x28
   40836:	2100      	movs	r1, #0
   40838:	f001 ba51 	b.w	41cde <memset>

0004083c <interface_socket_event_get>:
   4083c:	b508      	push	{r3, lr}
   4083e:	b169      	cbz	r1, 4085c <interface_socket_event_get+0x20>
   40840:	f7f2 fe10 	bl	33464 <interface_socket_from_handle_get>
   40844:	b158      	cbz	r0, 4085e <interface_socket_event_get+0x22>
   40846:	6803      	ldr	r3, [r0, #0]
   40848:	0c1b      	lsrs	r3, r3, #16
   4084a:	f003 020a 	and.w	r2, r3, #10
   4084e:	2a0a      	cmp	r2, #10
   40850:	bf14      	ite	ne
   40852:	f003 030f 	andne.w	r3, r3, #15
   40856:	f003 030d 	andeq.w	r3, r3, #13
   4085a:	600b      	str	r3, [r1, #0]
   4085c:	bd08      	pop	{r3, pc}
   4085e:	2310      	movs	r3, #16
   40860:	e7fb      	b.n	4085a <interface_socket_event_get+0x1e>

00040862 <ip_recvd_packet_free_cb>:
   40862:	b510      	push	{r4, lr}
   40864:	4604      	mov	r4, r0
   40866:	6800      	ldr	r0, [r0, #0]
   40868:	f7ff fe39 	bl	404de <rpc_ip_client_data_free>
   4086c:	68a0      	ldr	r0, [r4, #8]
   4086e:	b118      	cbz	r0, 40878 <ip_recvd_packet_free_cb+0x16>
   40870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40874:	f7e8 bee4 	b.w	29640 <nrf_modem_os_free>
   40878:	bd10      	pop	{r4, pc}

0004087a <ip_addr_parse>:
   4087a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   4087c:	684d      	ldr	r5, [r1, #4]
   4087e:	e9dd 7606 	ldrd	r7, r6, [sp, #24]
   40882:	4285      	cmp	r5, r0
   40884:	d11a      	bne.n	408bc <ip_addr_parse+0x42>
   40886:	780c      	ldrb	r4, [r1, #0]
   40888:	4294      	cmp	r4, r2
   4088a:	d119      	bne.n	408c0 <ip_addr_parse+0x46>
   4088c:	2d02      	cmp	r5, #2
   4088e:	d10b      	bne.n	408a8 <ip_addr_parse+0x2e>
   40890:	2c10      	cmp	r4, #16
   40892:	d115      	bne.n	408c0 <ip_addr_parse+0x46>
   40894:	890a      	ldrh	r2, [r1, #8]
   40896:	310c      	adds	r1, #12
   40898:	803a      	strh	r2, [r7, #0]
   4089a:	2204      	movs	r2, #4
   4089c:	801a      	strh	r2, [r3, #0]
   4089e:	4630      	mov	r0, r6
   408a0:	f001 f9fd 	bl	41c9e <memcpy>
   408a4:	2000      	movs	r0, #0
   408a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   408a8:	2d0a      	cmp	r5, #10
   408aa:	d109      	bne.n	408c0 <ip_addr_parse+0x46>
   408ac:	2c24      	cmp	r4, #36	; 0x24
   408ae:	d107      	bne.n	408c0 <ip_addr_parse+0x46>
   408b0:	890a      	ldrh	r2, [r1, #8]
   408b2:	803a      	strh	r2, [r7, #0]
   408b4:	2210      	movs	r2, #16
   408b6:	801a      	strh	r2, [r3, #0]
   408b8:	4411      	add	r1, r2
   408ba:	e7f0      	b.n	4089e <ip_addr_parse+0x24>
   408bc:	202f      	movs	r0, #47	; 0x2f
   408be:	e7f2      	b.n	408a6 <ip_addr_parse+0x2c>
   408c0:	2016      	movs	r0, #22
   408c2:	e7f0      	b.n	408a6 <ip_addr_parse+0x2c>

000408c4 <ip_interface_request_create>:
   408c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   408c6:	4614      	mov	r4, r2
   408c8:	2200      	movs	r2, #0
   408ca:	4606      	mov	r6, r0
   408cc:	460d      	mov	r5, r1
   408ce:	a801      	add	r0, sp, #4
   408d0:	4619      	mov	r1, r3
   408d2:	9201      	str	r2, [sp, #4]
   408d4:	f7ff fdd5 	bl	40482 <rpc_ip_client_request_alloc>
   408d8:	9b01      	ldr	r3, [sp, #4]
   408da:	b940      	cbnz	r0, 408ee <ip_interface_request_create+0x2a>
   408dc:	2208      	movs	r2, #8
   408de:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   408e2:	60dc      	str	r4, [r3, #12]
   408e4:	611d      	str	r5, [r3, #16]
   408e6:	721a      	strb	r2, [r3, #8]
   408e8:	7258      	strb	r0, [r3, #9]
   408ea:	7298      	strb	r0, [r3, #10]
   408ec:	72d8      	strb	r0, [r3, #11]
   408ee:	4618      	mov	r0, r3
   408f0:	b002      	add	sp, #8
   408f2:	bd70      	pop	{r4, r5, r6, pc}

000408f4 <ip_interface_request_send>:
   408f4:	b570      	push	{r4, r5, r6, lr}
   408f6:	460c      	mov	r4, r1
   408f8:	4605      	mov	r5, r0
   408fa:	4611      	mov	r1, r2
   408fc:	4620      	mov	r0, r4
   408fe:	461e      	mov	r6, r3
   40900:	f7ff fdd1 	bl	404a6 <rpc_ip_client_request_send>
   40904:	b140      	cbz	r0, 40918 <ip_interface_request_send+0x24>
   40906:	6820      	ldr	r0, [r4, #0]
   40908:	b108      	cbz	r0, 4090e <ip_interface_request_send+0x1a>
   4090a:	f7ff fde8 	bl	404de <rpc_ip_client_data_free>
   4090e:	4620      	mov	r0, r4
   40910:	f7ff fddd 	bl	404ce <rpc_ip_client_message_free>
   40914:	2023      	movs	r0, #35	; 0x23
   40916:	602e      	str	r6, [r5, #0]
   40918:	bd70      	pop	{r4, r5, r6, pc}

0004091a <ip_interface_wait>:
   4091a:	b538      	push	{r3, r4, r5, lr}
   4091c:	4605      	mov	r5, r0
   4091e:	f7f2 fd63 	bl	333e8 <interface_socket_wait>
   40922:	4604      	mov	r4, r0
   40924:	b938      	cbnz	r0, 40936 <ip_interface_wait+0x1c>
   40926:	4628      	mov	r0, r5
   40928:	f7f2 fd9c 	bl	33464 <interface_socket_from_handle_get>
   4092c:	b118      	cbz	r0, 40936 <ip_interface_wait+0x1c>
   4092e:	6844      	ldr	r4, [r0, #4]
   40930:	b10c      	cbz	r4, 40936 <ip_interface_wait+0x1c>
   40932:	2300      	movs	r3, #0
   40934:	6043      	str	r3, [r0, #4]
   40936:	4620      	mov	r0, r4
   40938:	bd38      	pop	{r3, r4, r5, pc}

0004093a <ip_interface_recvfrom>:
   4093a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4093e:	b087      	sub	sp, #28
   40940:	4681      	mov	r9, r0
   40942:	461e      	mov	r6, r3
   40944:	4690      	mov	r8, r2
   40946:	9f11      	ldr	r7, [sp, #68]	; 0x44
   40948:	9101      	str	r1, [sp, #4]
   4094a:	2a00      	cmp	r2, #0
   4094c:	f000 80ee 	beq.w	40b2c <ip_interface_recvfrom+0x1f2>
   40950:	b11b      	cbz	r3, 4095a <ip_interface_recvfrom+0x20>
   40952:	f013 0f3a 	tst.w	r3, #58	; 0x3a
   40956:	f000 80eb 	beq.w	40b30 <ip_interface_recvfrom+0x1f6>
   4095a:	4648      	mov	r0, r9
   4095c:	f7f2 fd82 	bl	33464 <interface_socket_from_handle_get>
   40960:	4604      	mov	r4, r0
   40962:	2800      	cmp	r0, #0
   40964:	f000 80e6 	beq.w	40b34 <ip_interface_recvfrom+0x1fa>
   40968:	6803      	ldr	r3, [r0, #0]
   4096a:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
   4096e:	d10f      	bne.n	40990 <ip_interface_recvfrom+0x56>
   40970:	6802      	ldr	r2, [r0, #0]
   40972:	b292      	uxth	r2, r2
   40974:	2a06      	cmp	r2, #6
   40976:	f000 8097 	beq.w	40aa8 <ip_interface_recvfrom+0x16e>
   4097a:	6802      	ldr	r2, [r0, #0]
   4097c:	461e      	mov	r6, r3
   4097e:	b292      	uxth	r2, r2
   40980:	2a07      	cmp	r2, #7
   40982:	469a      	mov	sl, r3
   40984:	f000 8092 	beq.w	40aac <ip_interface_recvfrom+0x172>
   40988:	2239      	movs	r2, #57	; 0x39
   4098a:	f04f 35ff 	mov.w	r5, #4294967295
   4098e:	e07b      	b.n	40a88 <ip_interface_recvfrom+0x14e>
   40990:	07b5      	lsls	r5, r6, #30
   40992:	bf48      	it	mi
   40994:	f04f 0a00 	movmi.w	sl, #0
   40998:	f04f 35ff 	mov.w	r5, #4294967295
   4099c:	bf58      	it	pl
   4099e:	6803      	ldrpl	r3, [r0, #0]
   409a0:	f006 0b10 	and.w	fp, r6, #16
   409a4:	bf5c      	itt	pl
   409a6:	f083 5380 	eorpl.w	r3, r3, #268435456	; 0x10000000
   409aa:	f3c3 7a00 	ubfxpl	sl, r3, #28, #1
   409ae:	6822      	ldr	r2, [r4, #0]
   409b0:	03d0      	lsls	r0, r2, #15
   409b2:	d532      	bpl.n	40a1a <ip_interface_recvfrom+0xe0>
   409b4:	6822      	ldr	r2, [r4, #0]
   409b6:	69e0      	ldr	r0, [r4, #28]
   409b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   409bc:	6022      	str	r2, [r4, #0]
   409be:	6802      	ldr	r2, [r0, #0]
   409c0:	68d2      	ldr	r2, [r2, #12]
   409c2:	4790      	blx	r2
   409c4:	1c41      	adds	r1, r0, #1
   409c6:	4605      	mov	r5, r0
   409c8:	d00d      	beq.n	409e6 <ip_interface_recvfrom+0xac>
   409ca:	4580      	cmp	r8, r0
   409cc:	dd08      	ble.n	409e0 <ip_interface_recvfrom+0xa6>
   409ce:	6923      	ldr	r3, [r4, #16]
   409d0:	2b01      	cmp	r3, #1
   409d2:	d105      	bne.n	409e0 <ip_interface_recvfrom+0xa6>
   409d4:	f1bb 0f00 	cmp.w	fp, #0
   409d8:	d064      	beq.n	40aa4 <ip_interface_recvfrom+0x16a>
   409da:	6823      	ldr	r3, [r4, #0]
   409dc:	00da      	lsls	r2, r3, #3
   409de:	d520      	bpl.n	40a22 <ip_interface_recvfrom+0xe8>
   409e0:	f04f 0a00 	mov.w	sl, #0
   409e4:	e03b      	b.n	40a5e <ip_interface_recvfrom+0x124>
   409e6:	6822      	ldr	r2, [r4, #0]
   409e8:	0313      	lsls	r3, r2, #12
   409ea:	d516      	bpl.n	40a1a <ip_interface_recvfrom+0xe0>
   409ec:	6822      	ldr	r2, [r4, #0]
   409ee:	b292      	uxth	r2, r2
   409f0:	2a0d      	cmp	r2, #13
   409f2:	d012      	beq.n	40a1a <ip_interface_recvfrom+0xe0>
   409f4:	6923      	ldr	r3, [r4, #16]
   409f6:	2b01      	cmp	r3, #1
   409f8:	f000 80a4 	beq.w	40b44 <ip_interface_recvfrom+0x20a>
   409fc:	f04f 0a00 	mov.w	sl, #0
   40a00:	2239      	movs	r2, #57	; 0x39
   40a02:	6823      	ldr	r3, [r4, #0]
   40a04:	0c1b      	lsrs	r3, r3, #16
   40a06:	041b      	lsls	r3, r3, #16
   40a08:	f043 030d 	orr.w	r3, r3, #13
   40a0c:	6023      	str	r3, [r4, #0]
   40a0e:	6823      	ldr	r3, [r4, #0]
   40a10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   40a14:	6023      	str	r3, [r4, #0]
   40a16:	2600      	movs	r6, #0
   40a18:	e036      	b.n	40a88 <ip_interface_recvfrom+0x14e>
   40a1a:	f1ba 0f00 	cmp.w	sl, #0
   40a1e:	f000 8092 	beq.w	40b46 <ip_interface_recvfrom+0x20c>
   40a22:	6a23      	ldr	r3, [r4, #32]
   40a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   40a28:	2b00      	cmp	r3, #0
   40a2a:	bf08      	it	eq
   40a2c:	f04f 33ff 	moveq.w	r3, #4294967295
   40a30:	4611      	mov	r1, r2
   40a32:	9302      	str	r3, [sp, #8]
   40a34:	4648      	mov	r0, r9
   40a36:	ab02      	add	r3, sp, #8
   40a38:	f7ff ff6f 	bl	4091a <ip_interface_wait>
   40a3c:	4602      	mov	r2, r0
   40a3e:	2800      	cmp	r0, #0
   40a40:	d07a      	beq.n	40b38 <ip_interface_recvfrom+0x1fe>
   40a42:	6823      	ldr	r3, [r4, #0]
   40a44:	f413 2300 	ands.w	r3, r3, #524288	; 0x80000
   40a48:	d079      	beq.n	40b3e <ip_interface_recvfrom+0x204>
   40a4a:	6823      	ldr	r3, [r4, #0]
   40a4c:	b29b      	uxth	r3, r3
   40a4e:	2b0d      	cmp	r3, #13
   40a50:	d075      	beq.n	40b3e <ip_interface_recvfrom+0x204>
   40a52:	6923      	ldr	r3, [r4, #16]
   40a54:	1e5d      	subs	r5, r3, #1
   40a56:	f1d5 0a00 	rsbs	sl, r5, #0
   40a5a:	eb4a 0a05 	adc.w	sl, sl, r5
   40a5e:	b107      	cbz	r7, 40a62 <ip_interface_recvfrom+0x128>
   40a60:	683f      	ldr	r7, [r7, #0]
   40a62:	9a10      	ldr	r2, [sp, #64]	; 0x40
   40a64:	69e0      	ldr	r0, [r4, #28]
   40a66:	e9cd 2704 	strd	r2, r7, [sp, #16]
   40a6a:	9b01      	ldr	r3, [sp, #4]
   40a6c:	6802      	ldr	r2, [r0, #0]
   40a6e:	e9cd 3802 	strd	r3, r8, [sp, #8]
   40a72:	6895      	ldr	r5, [r2, #8]
   40a74:	a902      	add	r1, sp, #8
   40a76:	4632      	mov	r2, r6
   40a78:	47a8      	blx	r5
   40a7a:	4605      	mov	r5, r0
   40a7c:	1c68      	adds	r0, r5, #1
   40a7e:	bf0b      	itete	eq
   40a80:	2600      	moveq	r6, #0
   40a82:	2601      	movne	r6, #1
   40a84:	2223      	moveq	r2, #35	; 0x23
   40a86:	2200      	movne	r2, #0
   40a88:	69e0      	ldr	r0, [r4, #28]
   40a8a:	9201      	str	r2, [sp, #4]
   40a8c:	6801      	ldr	r1, [r0, #0]
   40a8e:	68c9      	ldr	r1, [r1, #12]
   40a90:	4788      	blx	r1
   40a92:	3001      	adds	r0, #1
   40a94:	9a01      	ldr	r2, [sp, #4]
   40a96:	d00b      	beq.n	40ab0 <ip_interface_recvfrom+0x176>
   40a98:	6823      	ldr	r3, [r4, #0]
   40a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   40a9e:	6023      	str	r3, [r4, #0]
   40aa0:	b1aa      	cbz	r2, 40ace <ip_interface_recvfrom+0x194>
   40aa2:	e032      	b.n	40b0a <ip_interface_recvfrom+0x1d0>
   40aa4:	46da      	mov	sl, fp
   40aa6:	e7da      	b.n	40a5e <ip_interface_recvfrom+0x124>
   40aa8:	461e      	mov	r6, r3
   40aaa:	469a      	mov	sl, r3
   40aac:	2209      	movs	r2, #9
   40aae:	e76c      	b.n	4098a <ip_interface_recvfrom+0x50>
   40ab0:	f1ba 0f00 	cmp.w	sl, #0
   40ab4:	d00f      	beq.n	40ad6 <ip_interface_recvfrom+0x19c>
   40ab6:	b97e      	cbnz	r6, 40ad8 <ip_interface_recvfrom+0x19e>
   40ab8:	4635      	mov	r5, r6
   40aba:	6823      	ldr	r3, [r4, #0]
   40abc:	0c1b      	lsrs	r3, r3, #16
   40abe:	041b      	lsls	r3, r3, #16
   40ac0:	f043 030d 	orr.w	r3, r3, #13
   40ac4:	6023      	str	r3, [r4, #0]
   40ac6:	6823      	ldr	r3, [r4, #0]
   40ac8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   40acc:	6023      	str	r3, [r4, #0]
   40ace:	4628      	mov	r0, r5
   40ad0:	b007      	add	sp, #28
   40ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40ad6:	b14e      	cbz	r6, 40aec <ip_interface_recvfrom+0x1b2>
   40ad8:	6823      	ldr	r3, [r4, #0]
   40ada:	0319      	lsls	r1, r3, #12
   40adc:	d506      	bpl.n	40aec <ip_interface_recvfrom+0x1b2>
   40ade:	6823      	ldr	r3, [r4, #0]
   40ae0:	b29b      	uxth	r3, r3
   40ae2:	2b0d      	cmp	r3, #13
   40ae4:	d002      	beq.n	40aec <ip_interface_recvfrom+0x1b2>
   40ae6:	6923      	ldr	r3, [r4, #16]
   40ae8:	2b01      	cmp	r3, #1
   40aea:	d0d5      	beq.n	40a98 <ip_interface_recvfrom+0x15e>
   40aec:	6823      	ldr	r3, [r4, #0]
   40aee:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   40af2:	6823      	ldr	r3, [r4, #0]
   40af4:	d00f      	beq.n	40b16 <ip_interface_recvfrom+0x1dc>
   40af6:	2269      	movs	r2, #105	; 0x69
   40af8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
   40afc:	6023      	str	r3, [r4, #0]
   40afe:	6823      	ldr	r3, [r4, #0]
   40b00:	0c1b      	lsrs	r3, r3, #16
   40b02:	041b      	lsls	r3, r3, #16
   40b04:	f043 030d 	orr.w	r3, r3, #13
   40b08:	6023      	str	r3, [r4, #0]
   40b0a:	4610      	mov	r0, r2
   40b0c:	f7e8 fbdc 	bl	292c8 <nrf_modem_os_errno_set>
   40b10:	f04f 35ff 	mov.w	r5, #4294967295
   40b14:	e7db      	b.n	40ace <ip_interface_recvfrom+0x194>
   40b16:	031b      	lsls	r3, r3, #12
   40b18:	d5c2      	bpl.n	40aa0 <ip_interface_recvfrom+0x166>
   40b1a:	6823      	ldr	r3, [r4, #0]
   40b1c:	b29b      	uxth	r3, r3
   40b1e:	2b0d      	cmp	r3, #13
   40b20:	d1be      	bne.n	40aa0 <ip_interface_recvfrom+0x166>
   40b22:	68a3      	ldr	r3, [r4, #8]
   40b24:	2b00      	cmp	r3, #0
   40b26:	d0bb      	beq.n	40aa0 <ip_interface_recvfrom+0x166>
   40b28:	68a2      	ldr	r2, [r4, #8]
   40b2a:	e7b9      	b.n	40aa0 <ip_interface_recvfrom+0x166>
   40b2c:	2216      	movs	r2, #22
   40b2e:	e7ec      	b.n	40b0a <ip_interface_recvfrom+0x1d0>
   40b30:	222d      	movs	r2, #45	; 0x2d
   40b32:	e7ea      	b.n	40b0a <ip_interface_recvfrom+0x1d0>
   40b34:	2209      	movs	r2, #9
   40b36:	e7e8      	b.n	40b0a <ip_interface_recvfrom+0x1d0>
   40b38:	f04f 0a01 	mov.w	sl, #1
   40b3c:	e737      	b.n	409ae <ip_interface_recvfrom+0x74>
   40b3e:	2600      	movs	r6, #0
   40b40:	46b2      	mov	sl, r6
   40b42:	e7a1      	b.n	40a88 <ip_interface_recvfrom+0x14e>
   40b44:	469a      	mov	sl, r3
   40b46:	2223      	movs	r2, #35	; 0x23
   40b48:	e765      	b.n	40a16 <ip_interface_recvfrom+0xdc>

00040b4a <ip_interface_connect>:
   40b4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   40b4e:	4606      	mov	r6, r0
   40b50:	4691      	mov	r9, r2
   40b52:	460f      	mov	r7, r1
   40b54:	b085      	sub	sp, #20
   40b56:	2900      	cmp	r1, #0
   40b58:	d065      	beq.n	40c26 <ip_interface_connect+0xdc>
   40b5a:	2a00      	cmp	r2, #0
   40b5c:	d063      	beq.n	40c26 <ip_interface_connect+0xdc>
   40b5e:	f7f2 fc81 	bl	33464 <interface_socket_from_handle_get>
   40b62:	4604      	mov	r4, r0
   40b64:	2800      	cmp	r0, #0
   40b66:	d060      	beq.n	40c2a <ip_interface_connect+0xe0>
   40b68:	6803      	ldr	r3, [r0, #0]
   40b6a:	b29b      	uxth	r3, r3
   40b6c:	2b02      	cmp	r3, #2
   40b6e:	d003      	beq.n	40b78 <ip_interface_connect+0x2e>
   40b70:	6803      	ldr	r3, [r0, #0]
   40b72:	b29b      	uxth	r3, r3
   40b74:	2b04      	cmp	r3, #4
   40b76:	d14f      	bne.n	40c18 <ip_interface_connect+0xce>
   40b78:	6823      	ldr	r3, [r4, #0]
   40b7a:	f013 5300 	ands.w	r3, r3, #536870912	; 0x20000000
   40b7e:	d156      	bne.n	40c2e <ip_interface_connect+0xe4>
   40b80:	f247 0202 	movw	r2, #28674	; 0x7002
   40b84:	4630      	mov	r0, r6
   40b86:	69a1      	ldr	r1, [r4, #24]
   40b88:	f7ff fe9c 	bl	408c4 <ip_interface_request_create>
   40b8c:	4605      	mov	r5, r0
   40b8e:	2800      	cmp	r0, #0
   40b90:	d04f      	beq.n	40c32 <ip_interface_connect+0xe8>
   40b92:	f247 0802 	movw	r8, #28674	; 0x7002
   40b96:	ea48 4306 	orr.w	r3, r8, r6, lsl #16
   40b9a:	60c3      	str	r3, [r0, #12]
   40b9c:	69a3      	ldr	r3, [r4, #24]
   40b9e:	464a      	mov	r2, r9
   40ba0:	6103      	str	r3, [r0, #16]
   40ba2:	6883      	ldr	r3, [r0, #8]
   40ba4:	4639      	mov	r1, r7
   40ba6:	3304      	adds	r3, #4
   40ba8:	6083      	str	r3, [r0, #8]
   40baa:	f100 0318 	add.w	r3, r0, #24
   40bae:	9301      	str	r3, [sp, #4]
   40bb0:	f100 0314 	add.w	r3, r0, #20
   40bb4:	9300      	str	r3, [sp, #0]
   40bb6:	f100 0316 	add.w	r3, r0, #22
   40bba:	68e0      	ldr	r0, [r4, #12]
   40bbc:	f7ff fe5d 	bl	4087a <ip_addr_parse>
   40bc0:	bb18      	cbnz	r0, 40c0a <ip_interface_connect+0xc0>
   40bc2:	68ab      	ldr	r3, [r5, #8]
   40bc4:	8aea      	ldrh	r2, [r5, #22]
   40bc6:	6827      	ldr	r7, [r4, #0]
   40bc8:	4413      	add	r3, r2
   40bca:	60ab      	str	r3, [r5, #8]
   40bcc:	6823      	ldr	r3, [r4, #0]
   40bce:	4642      	mov	r2, r8
   40bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   40bd4:	6023      	str	r3, [r4, #0]
   40bd6:	4629      	mov	r1, r5
   40bd8:	463b      	mov	r3, r7
   40bda:	4620      	mov	r0, r4
   40bdc:	f7ff fe8a 	bl	408f4 <ip_interface_request_send>
   40be0:	b998      	cbnz	r0, 40c0a <ip_interface_connect+0xc0>
   40be2:	6823      	ldr	r3, [r4, #0]
   40be4:	00db      	lsls	r3, r3, #3
   40be6:	d426      	bmi.n	40c36 <ip_interface_connect+0xec>
   40be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   40bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   40bee:	2b00      	cmp	r3, #0
   40bf0:	bf08      	it	eq
   40bf2:	f04f 33ff 	moveq.w	r3, #4294967295
   40bf6:	2105      	movs	r1, #5
   40bf8:	9303      	str	r3, [sp, #12]
   40bfa:	4630      	mov	r0, r6
   40bfc:	ab03      	add	r3, sp, #12
   40bfe:	f7ff fe8c 	bl	4091a <ip_interface_wait>
   40c02:	b130      	cbz	r0, 40c12 <ip_interface_connect+0xc8>
   40c04:	2873      	cmp	r0, #115	; 0x73
   40c06:	d000      	beq.n	40c0a <ip_interface_connect+0xc0>
   40c08:	6027      	str	r7, [r4, #0]
   40c0a:	f7e8 fb5d 	bl	292c8 <nrf_modem_os_errno_set>
   40c0e:	f04f 30ff 	mov.w	r0, #4294967295
   40c12:	b005      	add	sp, #20
   40c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   40c18:	6803      	ldr	r3, [r0, #0]
   40c1a:	b29b      	uxth	r3, r3
   40c1c:	2b05      	cmp	r3, #5
   40c1e:	bf14      	ite	ne
   40c20:	2009      	movne	r0, #9
   40c22:	2038      	moveq	r0, #56	; 0x38
   40c24:	e7f1      	b.n	40c0a <ip_interface_connect+0xc0>
   40c26:	2016      	movs	r0, #22
   40c28:	e7ef      	b.n	40c0a <ip_interface_connect+0xc0>
   40c2a:	2009      	movs	r0, #9
   40c2c:	e7ed      	b.n	40c0a <ip_interface_connect+0xc0>
   40c2e:	2072      	movs	r0, #114	; 0x72
   40c30:	e7eb      	b.n	40c0a <ip_interface_connect+0xc0>
   40c32:	200c      	movs	r0, #12
   40c34:	e7e9      	b.n	40c0a <ip_interface_connect+0xc0>
   40c36:	2073      	movs	r0, #115	; 0x73
   40c38:	e7e7      	b.n	40c0a <ip_interface_connect+0xc0>

00040c3a <getopt_check_and_send_int>:
   40c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   40c3c:	4604      	mov	r4, r0
   40c3e:	460d      	mov	r5, r1
   40c40:	4618      	mov	r0, r3
   40c42:	4611      	mov	r1, r2
   40c44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   40c48:	b193      	cbz	r3, 40c70 <getopt_check_and_send_int+0x36>
   40c4a:	681e      	ldr	r6, [r3, #0]
   40c4c:	2e04      	cmp	r6, #4
   40c4e:	d10f      	bne.n	40c70 <getopt_check_and_send_int+0x36>
   40c50:	b172      	cbz	r2, 40c70 <getopt_check_and_send_int+0x36>
   40c52:	e9cd 2300 	strd	r2, r3, [sp]
   40c56:	462b      	mov	r3, r5
   40c58:	4622      	mov	r2, r4
   40c5a:	f7f2 fef5 	bl	33a48 <ip_interface_socketoption_get>
   40c5e:	4603      	mov	r3, r0
   40c60:	b118      	cbz	r0, 40c6a <getopt_check_and_send_int+0x30>
   40c62:	f7e8 fb31 	bl	292c8 <nrf_modem_os_errno_set>
   40c66:	f04f 33ff 	mov.w	r3, #4294967295
   40c6a:	4618      	mov	r0, r3
   40c6c:	b002      	add	sp, #8
   40c6e:	bd70      	pop	{r4, r5, r6, pc}
   40c70:	2016      	movs	r0, #22
   40c72:	e7f6      	b.n	40c62 <getopt_check_and_send_int+0x28>

00040c74 <ip_interface_socketoption_send>:
   40c74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   40c78:	4699      	mov	r9, r3
   40c7a:	e9dd b70c 	ldrd	fp, r7, [sp, #48]	; 0x30
   40c7e:	f04f 33ff 	mov.w	r3, #4294967295
   40c82:	9301      	str	r3, [sp, #4]
   40c84:	680b      	ldr	r3, [r1, #0]
   40c86:	4606      	mov	r6, r0
   40c88:	025d      	lsls	r5, r3, #9
   40c8a:	460c      	mov	r4, r1
   40c8c:	4692      	mov	sl, r2
   40c8e:	d43c      	bmi.n	40d0a <ip_interface_socketoption_send+0x96>
   40c90:	680b      	ldr	r3, [r1, #0]
   40c92:	0219      	lsls	r1, r3, #8
   40c94:	d439      	bmi.n	40d0a <ip_interface_socketoption_send+0x96>
   40c96:	6823      	ldr	r3, [r4, #0]
   40c98:	01da      	lsls	r2, r3, #7
   40c9a:	d436      	bmi.n	40d0a <ip_interface_socketoption_send+0x96>
   40c9c:	6823      	ldr	r3, [r4, #0]
   40c9e:	019b      	lsls	r3, r3, #6
   40ca0:	d433      	bmi.n	40d0a <ip_interface_socketoption_send+0x96>
   40ca2:	f8d4 8000 	ldr.w	r8, [r4]
   40ca6:	6823      	ldr	r3, [r4, #0]
   40ca8:	f247 0203 	movw	r2, #28675	; 0x7003
   40cac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
   40cb0:	6023      	str	r3, [r4, #0]
   40cb2:	69a1      	ldr	r1, [r4, #24]
   40cb4:	463b      	mov	r3, r7
   40cb6:	f7ff fe05 	bl	408c4 <ip_interface_request_create>
   40cba:	4605      	mov	r5, r0
   40cbc:	b318      	cbz	r0, 40d06 <ip_interface_socketoption_send+0x92>
   40cbe:	6883      	ldr	r3, [r0, #8]
   40cc0:	f8c0 a014 	str.w	sl, [r0, #20]
   40cc4:	3308      	adds	r3, #8
   40cc6:	6083      	str	r3, [r0, #8]
   40cc8:	f8c0 9018 	str.w	r9, [r0, #24]
   40ccc:	b13f      	cbz	r7, 40cde <ip_interface_socketoption_send+0x6a>
   40cce:	f1bb 0f00 	cmp.w	fp, #0
   40cd2:	d004      	beq.n	40cde <ip_interface_socketoption_send+0x6a>
   40cd4:	463a      	mov	r2, r7
   40cd6:	4659      	mov	r1, fp
   40cd8:	6800      	ldr	r0, [r0, #0]
   40cda:	f000 ffe0 	bl	41c9e <memcpy>
   40cde:	4643      	mov	r3, r8
   40ce0:	f247 0203 	movw	r2, #28675	; 0x7003
   40ce4:	4629      	mov	r1, r5
   40ce6:	4620      	mov	r0, r4
   40ce8:	f7ff fe04 	bl	408f4 <ip_interface_request_send>
   40cec:	b930      	cbnz	r0, 40cfc <ip_interface_socketoption_send+0x88>
   40cee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   40cf2:	4630      	mov	r0, r6
   40cf4:	4611      	mov	r1, r2
   40cf6:	ab01      	add	r3, sp, #4
   40cf8:	f7ff fe0f 	bl	4091a <ip_interface_wait>
   40cfc:	f8c4 8000 	str.w	r8, [r4]
   40d00:	b003      	add	sp, #12
   40d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40d06:	200c      	movs	r0, #12
   40d08:	e7f8      	b.n	40cfc <ip_interface_socketoption_send+0x88>
   40d0a:	2023      	movs	r0, #35	; 0x23
   40d0c:	e7f8      	b.n	40d00 <ip_interface_socketoption_send+0x8c>

00040d0e <setopt_check_and_send_int>:
   40d0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   40d10:	4604      	mov	r4, r0
   40d12:	460d      	mov	r5, r1
   40d14:	4618      	mov	r0, r3
   40d16:	4611      	mov	r1, r2
   40d18:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
   40d1c:	2a04      	cmp	r2, #4
   40d1e:	d10f      	bne.n	40d40 <setopt_check_and_send_int+0x32>
   40d20:	b173      	cbz	r3, 40d40 <setopt_check_and_send_int+0x32>
   40d22:	e9cd 3200 	strd	r3, r2, [sp]
   40d26:	462b      	mov	r3, r5
   40d28:	4622      	mov	r2, r4
   40d2a:	f7ff ffa3 	bl	40c74 <ip_interface_socketoption_send>
   40d2e:	4603      	mov	r3, r0
   40d30:	b118      	cbz	r0, 40d3a <setopt_check_and_send_int+0x2c>
   40d32:	f7e8 fac9 	bl	292c8 <nrf_modem_os_errno_set>
   40d36:	f04f 33ff 	mov.w	r3, #4294967295
   40d3a:	4618      	mov	r0, r3
   40d3c:	b003      	add	sp, #12
   40d3e:	bd30      	pop	{r4, r5, pc}
   40d40:	2016      	movs	r0, #22
   40d42:	e7f6      	b.n	40d32 <setopt_check_and_send_int+0x24>

00040d44 <ip_interface_setopt>:
   40d44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   40d48:	2901      	cmp	r1, #1
   40d4a:	4606      	mov	r6, r0
   40d4c:	4690      	mov	r8, r2
   40d4e:	461c      	mov	r4, r3
   40d50:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   40d52:	d007      	beq.n	40d64 <ip_interface_setopt+0x20>
   40d54:	202a      	movs	r0, #42	; 0x2a
   40d56:	f7e8 fab7 	bl	292c8 <nrf_modem_os_errno_set>
   40d5a:	f04f 30ff 	mov.w	r0, #4294967295
   40d5e:	b004      	add	sp, #16
   40d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   40d64:	f7f2 fb7e 	bl	33464 <interface_socket_from_handle_get>
   40d68:	4605      	mov	r5, r0
   40d6a:	b908      	cbnz	r0, 40d70 <ip_interface_setopt+0x2c>
   40d6c:	2009      	movs	r0, #9
   40d6e:	e7f2      	b.n	40d56 <ip_interface_setopt+0x12>
   40d70:	f1b8 0f19 	cmp.w	r8, #25
   40d74:	d00d      	beq.n	40d92 <ip_interface_setopt+0x4e>
   40d76:	f1a8 031e 	sub.w	r3, r8, #30
   40d7a:	2b0a      	cmp	r3, #10
   40d7c:	d84d      	bhi.n	40e1a <ip_interface_setopt+0xd6>
   40d7e:	2b0a      	cmp	r3, #10
   40d80:	d84b      	bhi.n	40e1a <ip_interface_setopt+0xd6>
   40d82:	e8df f003 	tbb	[pc, r3]
   40d86:	3429      	.short	0x3429
   40d88:	4a4a4a3b 	.word	0x4a4a4a3b
   40d8c:	4a4a4a4a 	.word	0x4a4a4a4a
   40d90:	42          	.byte	0x42
   40d91:	00          	.byte	0x00
   40d92:	b90c      	cbnz	r4, 40d98 <ip_interface_setopt+0x54>
   40d94:	200e      	movs	r0, #14
   40d96:	e7de      	b.n	40d56 <ip_interface_setopt+0x12>
   40d98:	4620      	mov	r0, r4
   40d9a:	f7dc fa5f 	bl	1d25c <strlen>
   40d9e:	42b8      	cmp	r0, r7
   40da0:	d1f8      	bne.n	40d94 <ip_interface_setopt+0x50>
   40da2:	682b      	ldr	r3, [r5, #0]
   40da4:	b29b      	uxth	r3, r3
   40da6:	2b02      	cmp	r3, #2
   40da8:	d1e0      	bne.n	40d6c <ip_interface_setopt+0x28>
   40daa:	4621      	mov	r1, r4
   40dac:	68e8      	ldr	r0, [r5, #12]
   40dae:	f7f5 fa39 	bl	36224 <pdn_interface_pdn_id_get>
   40db2:	9003      	str	r0, [sp, #12]
   40db4:	3001      	adds	r0, #1
   40db6:	d101      	bne.n	40dbc <ip_interface_setopt+0x78>
   40db8:	2016      	movs	r0, #22
   40dba:	e7cc      	b.n	40d56 <ip_interface_setopt+0x12>
   40dbc:	2304      	movs	r3, #4
   40dbe:	9301      	str	r3, [sp, #4]
   40dc0:	ab03      	add	r3, sp, #12
   40dc2:	9300      	str	r3, [sp, #0]
   40dc4:	2208      	movs	r2, #8
   40dc6:	f243 0310 	movw	r3, #12304	; 0x3010
   40dca:	4629      	mov	r1, r5
   40dcc:	4630      	mov	r0, r6
   40dce:	f7ff ff51 	bl	40c74 <ip_interface_socketoption_send>
   40dd2:	2800      	cmp	r0, #0
   40dd4:	d0c3      	beq.n	40d5e <ip_interface_setopt+0x1a>
   40dd6:	e7be      	b.n	40d56 <ip_interface_setopt+0x12>
   40dd8:	4633      	mov	r3, r6
   40dda:	4602      	mov	r2, r0
   40ddc:	f248 0101 	movw	r1, #32769	; 0x8001
   40de0:	e9cd 4700 	strd	r4, r7, [sp]
   40de4:	f44f 7000 	mov.w	r0, #512	; 0x200
   40de8:	f7ff ff91 	bl	40d0e <setopt_check_and_send_int>
   40dec:	e7b7      	b.n	40d5e <ip_interface_setopt+0x1a>
   40dee:	4633      	mov	r3, r6
   40df0:	4602      	mov	r2, r0
   40df2:	f244 0110 	movw	r1, #16400	; 0x4010
   40df6:	e9cd 4700 	strd	r4, r7, [sp]
   40dfa:	e7f3      	b.n	40de4 <ip_interface_setopt+0xa0>
   40dfc:	4633      	mov	r3, r6
   40dfe:	4602      	mov	r2, r0
   40e00:	f246 0110 	movw	r1, #24592	; 0x6010
   40e04:	e9cd 4700 	strd	r4, r7, [sp]
   40e08:	e7ec      	b.n	40de4 <ip_interface_setopt+0xa0>
   40e0a:	4602      	mov	r2, r0
   40e0c:	4633      	mov	r3, r6
   40e0e:	f241 0104 	movw	r1, #4100	; 0x1004
   40e12:	2008      	movs	r0, #8
   40e14:	e9cd 4700 	strd	r4, r7, [sp]
   40e18:	e7e6      	b.n	40de8 <ip_interface_setopt+0xa4>
   40e1a:	4623      	mov	r3, r4
   40e1c:	4642      	mov	r2, r8
   40e1e:	2101      	movs	r1, #1
   40e20:	4630      	mov	r0, r6
   40e22:	9700      	str	r7, [sp, #0]
   40e24:	f7f2 fb2e 	bl	33484 <interface_socket_setopt>
   40e28:	e799      	b.n	40d5e <ip_interface_setopt+0x1a>

00040e2a <ip_interface_getopt>:
   40e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40e2c:	2901      	cmp	r1, #1
   40e2e:	4604      	mov	r4, r0
   40e30:	4617      	mov	r7, r2
   40e32:	461d      	mov	r5, r3
   40e34:	9e08      	ldr	r6, [sp, #32]
   40e36:	d006      	beq.n	40e46 <ip_interface_getopt+0x1c>
   40e38:	202a      	movs	r0, #42	; 0x2a
   40e3a:	f7e8 fa45 	bl	292c8 <nrf_modem_os_errno_set>
   40e3e:	f04f 30ff 	mov.w	r0, #4294967295
   40e42:	b003      	add	sp, #12
   40e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40e46:	f7f2 fb0d 	bl	33464 <interface_socket_from_handle_get>
   40e4a:	4602      	mov	r2, r0
   40e4c:	b908      	cbnz	r0, 40e52 <ip_interface_getopt+0x28>
   40e4e:	2009      	movs	r0, #9
   40e50:	e7f3      	b.n	40e3a <ip_interface_getopt+0x10>
   40e52:	f1a7 031e 	sub.w	r3, r7, #30
   40e56:	2b0a      	cmp	r3, #10
   40e58:	d824      	bhi.n	40ea4 <ip_interface_getopt+0x7a>
   40e5a:	e8df f003 	tbb	[pc, r3]
   40e5e:	1006      	.short	0x1006
   40e60:	23232316 	.word	0x23232316
   40e64:	23232323 	.word	0x23232323
   40e68:	1c          	.byte	0x1c
   40e69:	00          	.byte	0x00
   40e6a:	4623      	mov	r3, r4
   40e6c:	f248 0101 	movw	r1, #32769	; 0x8001
   40e70:	e9cd 5600 	strd	r5, r6, [sp]
   40e74:	f44f 7000 	mov.w	r0, #512	; 0x200
   40e78:	f7ff fedf 	bl	40c3a <getopt_check_and_send_int>
   40e7c:	e7e1      	b.n	40e42 <ip_interface_getopt+0x18>
   40e7e:	4623      	mov	r3, r4
   40e80:	f244 0110 	movw	r1, #16400	; 0x4010
   40e84:	e9cd 5600 	strd	r5, r6, [sp]
   40e88:	e7f4      	b.n	40e74 <ip_interface_getopt+0x4a>
   40e8a:	4623      	mov	r3, r4
   40e8c:	f246 0110 	movw	r1, #24592	; 0x6010
   40e90:	e9cd 5600 	strd	r5, r6, [sp]
   40e94:	e7ee      	b.n	40e74 <ip_interface_getopt+0x4a>
   40e96:	4623      	mov	r3, r4
   40e98:	f241 0104 	movw	r1, #4100	; 0x1004
   40e9c:	2008      	movs	r0, #8
   40e9e:	e9cd 5600 	strd	r5, r6, [sp]
   40ea2:	e7e9      	b.n	40e78 <ip_interface_getopt+0x4e>
   40ea4:	462b      	mov	r3, r5
   40ea6:	463a      	mov	r2, r7
   40ea8:	2101      	movs	r1, #1
   40eaa:	4620      	mov	r0, r4
   40eac:	9608      	str	r6, [sp, #32]
   40eae:	b003      	add	sp, #12
   40eb0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   40eb4:	f7f2 bb1a 	b.w	334ec <interface_socket_getopt>

00040eb8 <attach_trigger_condition_verify>:
   40eb8:	6903      	ldr	r3, [r0, #16]
   40eba:	2b01      	cmp	r3, #1
   40ebc:	d105      	bne.n	40eca <attach_trigger_condition_verify+0x12>
   40ebe:	6800      	ldr	r0, [r0, #0]
   40ec0:	b280      	uxth	r0, r0
   40ec2:	1f43      	subs	r3, r0, #5
   40ec4:	4258      	negs	r0, r3
   40ec6:	4158      	adcs	r0, r3
   40ec8:	4770      	bx	lr
   40eca:	2b02      	cmp	r3, #2
   40ecc:	d109      	bne.n	40ee2 <attach_trigger_condition_verify+0x2a>
   40ece:	6803      	ldr	r3, [r0, #0]
   40ed0:	b29b      	uxth	r3, r3
   40ed2:	2b02      	cmp	r3, #2
   40ed4:	d003      	beq.n	40ede <attach_trigger_condition_verify+0x26>
   40ed6:	6803      	ldr	r3, [r0, #0]
   40ed8:	b29b      	uxth	r3, r3
   40eda:	2b04      	cmp	r3, #4
   40edc:	d1ef      	bne.n	40ebe <attach_trigger_condition_verify+0x6>
   40ede:	2001      	movs	r0, #1
   40ee0:	4770      	bx	lr
   40ee2:	2000      	movs	r0, #0
   40ee4:	4770      	bx	lr

00040ee6 <secure_client_socket>:
   40ee6:	f04f 33ff 	mov.w	r3, #4294967295
   40eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   40eec:	9301      	str	r3, [sp, #4]
   40eee:	680b      	ldr	r3, [r1, #0]
   40ef0:	4606      	mov	r6, r0
   40ef2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   40ef6:	600b      	str	r3, [r1, #0]
   40ef8:	680b      	ldr	r3, [r1, #0]
   40efa:	460c      	mov	r4, r1
   40efc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   40f00:	600b      	str	r3, [r1, #0]
   40f02:	680f      	ldr	r7, [r1, #0]
   40f04:	463a      	mov	r2, r7
   40f06:	f7f3 fafb 	bl	34500 <secure_socket_attach_initiate>
   40f0a:	4605      	mov	r5, r0
   40f0c:	b950      	cbnz	r0, 40f24 <secure_client_socket+0x3e>
   40f0e:	220c      	movs	r2, #12
   40f10:	4630      	mov	r0, r6
   40f12:	4611      	mov	r1, r2
   40f14:	ab01      	add	r3, sp, #4
   40f16:	f7ff fd00 	bl	4091a <ip_interface_wait>
   40f1a:	4605      	mov	r5, r0
   40f1c:	b128      	cbz	r0, 40f2a <secure_client_socket+0x44>
   40f1e:	2873      	cmp	r0, #115	; 0x73
   40f20:	d000      	beq.n	40f24 <secure_client_socket+0x3e>
   40f22:	6027      	str	r7, [r4, #0]
   40f24:	4628      	mov	r0, r5
   40f26:	b003      	add	sp, #12
   40f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
   40f2a:	4630      	mov	r0, r6
   40f2c:	f7f3 fad6 	bl	344dc <hostname_free>
   40f30:	6823      	ldr	r3, [r4, #0]
   40f32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   40f36:	6023      	str	r3, [r4, #0]
   40f38:	6823      	ldr	r3, [r4, #0]
   40f3a:	0c1b      	lsrs	r3, r3, #16
   40f3c:	041b      	lsls	r3, r3, #16
   40f3e:	f043 030c 	orr.w	r3, r3, #12
   40f42:	6023      	str	r3, [r4, #0]
   40f44:	6823      	ldr	r3, [r4, #0]
   40f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   40f4a:	6023      	str	r3, [r4, #0]
   40f4c:	6823      	ldr	r3, [r4, #0]
   40f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   40f52:	6023      	str	r3, [r4, #0]
   40f54:	e7e6      	b.n	40f24 <secure_client_socket+0x3e>

00040f56 <tls_interface_close>:
   40f56:	b510      	push	{r4, lr}
   40f58:	4604      	mov	r4, r0
   40f5a:	f7f2 fa83 	bl	33464 <interface_socket_from_handle_get>
   40f5e:	b138      	cbz	r0, 40f70 <tls_interface_close+0x1a>
   40f60:	4620      	mov	r0, r4
   40f62:	f7f3 fabb 	bl	344dc <hostname_free>
   40f66:	4620      	mov	r0, r4
   40f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   40f6c:	f7f2 bc02 	b.w	33774 <ip_interface_close>
   40f70:	2009      	movs	r0, #9
   40f72:	f7e8 f9a9 	bl	292c8 <nrf_modem_os_errno_set>
   40f76:	f04f 30ff 	mov.w	r0, #4294967295
   40f7a:	bd10      	pop	{r4, pc}

00040f7c <packet_free_cb>:
   40f7c:	6800      	ldr	r0, [r0, #0]
   40f7e:	f7ff ba74 	b.w	4046a <rpc_at_client_data_free>

00040f82 <at_interface_wait>:
   40f82:	b538      	push	{r3, r4, r5, lr}
   40f84:	4605      	mov	r5, r0
   40f86:	f7f2 fa2f 	bl	333e8 <interface_socket_wait>
   40f8a:	4604      	mov	r4, r0
   40f8c:	b938      	cbnz	r0, 40f9e <at_interface_wait+0x1c>
   40f8e:	4628      	mov	r0, r5
   40f90:	f7f2 fa68 	bl	33464 <interface_socket_from_handle_get>
   40f94:	b118      	cbz	r0, 40f9e <at_interface_wait+0x1c>
   40f96:	6844      	ldr	r4, [r0, #4]
   40f98:	b10c      	cbz	r4, 40f9e <at_interface_wait+0x1c>
   40f9a:	2300      	movs	r3, #0
   40f9c:	6043      	str	r3, [r0, #4]
   40f9e:	4620      	mov	r0, r4
   40fa0:	bd38      	pop	{r3, r4, r5, pc}

00040fa2 <send_message>:
   40fa2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   40fa6:	4606      	mov	r6, r0
   40fa8:	4668      	mov	r0, sp
   40faa:	460f      	mov	r7, r1
   40fac:	4692      	mov	sl, r2
   40fae:	4699      	mov	r9, r3
   40fb0:	f7ff fa34 	bl	4041c <rpc_at_client_request_alloc>
   40fb4:	4605      	mov	r5, r0
   40fb6:	4630      	mov	r0, r6
   40fb8:	f7f2 fa54 	bl	33464 <interface_socket_from_handle_get>
   40fbc:	4680      	mov	r8, r0
   40fbe:	bb5d      	cbnz	r5, 41018 <send_message+0x76>
   40fc0:	2304      	movs	r3, #4
   40fc2:	9c00      	ldr	r4, [sp, #0]
   40fc4:	7223      	strb	r3, [r4, #8]
   40fc6:	7265      	strb	r5, [r4, #9]
   40fc8:	72a5      	strb	r5, [r4, #10]
   40fca:	72e5      	strb	r5, [r4, #11]
   40fcc:	60e6      	str	r6, [r4, #12]
   40fce:	b127      	cbz	r7, 40fda <send_message+0x38>
   40fd0:	463a      	mov	r2, r7
   40fd2:	4651      	mov	r1, sl
   40fd4:	6820      	ldr	r0, [r4, #0]
   40fd6:	f000 fe62 	bl	41c9e <memcpy>
   40fda:	4649      	mov	r1, r9
   40fdc:	9800      	ldr	r0, [sp, #0]
   40fde:	f7ff fa2f 	bl	40440 <rpc_at_client_request_send>
   40fe2:	b158      	cbz	r0, 40ffc <send_message+0x5a>
   40fe4:	b11f      	cbz	r7, 40fee <send_message+0x4c>
   40fe6:	9b00      	ldr	r3, [sp, #0]
   40fe8:	6818      	ldr	r0, [r3, #0]
   40fea:	f7ff fa3e 	bl	4046a <rpc_at_client_data_free>
   40fee:	9800      	ldr	r0, [sp, #0]
   40ff0:	f7ff fa33 	bl	4045a <rpc_at_client_message_free>
   40ff4:	2023      	movs	r0, #35	; 0x23
   40ff6:	b002      	add	sp, #8
   40ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   40ffc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   41000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   41002:	2b00      	cmp	r3, #0
   41004:	bf08      	it	eq
   41006:	f04f 33ff 	moveq.w	r3, #4294967295
   4100a:	4611      	mov	r1, r2
   4100c:	9301      	str	r3, [sp, #4]
   4100e:	4630      	mov	r0, r6
   41010:	ab01      	add	r3, sp, #4
   41012:	f7ff ffb6 	bl	40f82 <at_interface_wait>
   41016:	e7ee      	b.n	40ff6 <send_message+0x54>
   41018:	200c      	movs	r0, #12
   4101a:	e7ec      	b.n	40ff6 <send_message+0x54>

0004101c <at_interface_write>:
   4101c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   41020:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   41022:	4607      	mov	r7, r0
   41024:	4688      	mov	r8, r1
   41026:	4615      	mov	r5, r2
   41028:	4699      	mov	r9, r3
   4102a:	b146      	cbz	r6, 4103e <at_interface_write+0x22>
   4102c:	2038      	movs	r0, #56	; 0x38
   4102e:	f7e8 f94b 	bl	292c8 <nrf_modem_os_errno_set>
   41032:	f04f 35ff 	mov.w	r5, #4294967295
   41036:	4628      	mov	r0, r5
   41038:	b003      	add	sp, #12
   4103a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   4103e:	f7f2 fa11 	bl	33464 <interface_socket_from_handle_get>
   41042:	4604      	mov	r4, r0
   41044:	f1b9 0f00 	cmp.w	r9, #0
   41048:	d124      	bne.n	41094 <at_interface_write+0x78>
   4104a:	b908      	cbnz	r0, 41050 <at_interface_write+0x34>
   4104c:	2016      	movs	r0, #22
   4104e:	e7ee      	b.n	4102e <at_interface_write+0x12>
   41050:	2601      	movs	r6, #1
   41052:	6822      	ldr	r2, [r4, #0]
   41054:	0393      	lsls	r3, r2, #14
   41056:	d518      	bpl.n	4108a <at_interface_write+0x6e>
   41058:	b1f6      	cbz	r6, 41098 <at_interface_write+0x7c>
   4105a:	6823      	ldr	r3, [r4, #0]
   4105c:	4642      	mov	r2, r8
   4105e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
   41062:	6023      	str	r3, [r4, #0]
   41064:	6823      	ldr	r3, [r4, #0]
   41066:	4629      	mov	r1, r5
   41068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
   4106c:	6023      	str	r3, [r4, #0]
   4106e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   41072:	4638      	mov	r0, r7
   41074:	9300      	str	r3, [sp, #0]
   41076:	2301      	movs	r3, #1
   41078:	f7ff ff93 	bl	40fa2 <send_message>
   4107c:	2800      	cmp	r0, #0
   4107e:	d0da      	beq.n	41036 <at_interface_write+0x1a>
   41080:	6823      	ldr	r3, [r4, #0]
   41082:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   41086:	6023      	str	r3, [r4, #0]
   41088:	e7d1      	b.n	4102e <at_interface_write+0x12>
   4108a:	2e00      	cmp	r6, #0
   4108c:	bf14      	ite	ne
   4108e:	2016      	movne	r0, #22
   41090:	202d      	moveq	r0, #45	; 0x2d
   41092:	e7cc      	b.n	4102e <at_interface_write+0x12>
   41094:	2800      	cmp	r0, #0
   41096:	d1dc      	bne.n	41052 <at_interface_write+0x36>
   41098:	202d      	movs	r0, #45	; 0x2d
   4109a:	e7c8      	b.n	4102e <at_interface_write+0x12>

0004109c <at_interface_close>:
   4109c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   4109e:	4606      	mov	r6, r0
   410a0:	f7f2 f9e0 	bl	33464 <interface_socket_from_handle_get>
   410a4:	4604      	mov	r4, r0
   410a6:	b308      	cbz	r0, 410ec <at_interface_close+0x50>
   410a8:	230d      	movs	r3, #13
   410aa:	6807      	ldr	r7, [r0, #0]
   410ac:	6003      	str	r3, [r0, #0]
   410ae:	6803      	ldr	r3, [r0, #0]
   410b0:	2200      	movs	r2, #0
   410b2:	039b      	lsls	r3, r3, #14
   410b4:	bf48      	it	mi
   410b6:	6803      	ldrmi	r3, [r0, #0]
   410b8:	4611      	mov	r1, r2
   410ba:	bf44      	itt	mi
   410bc:	f423 3300 	bicmi.w	r3, r3, #131072	; 0x20000
   410c0:	6003      	strmi	r3, [r0, #0]
   410c2:	230e      	movs	r3, #14
   410c4:	4630      	mov	r0, r6
   410c6:	9300      	str	r3, [sp, #0]
   410c8:	2306      	movs	r3, #6
   410ca:	f7ff ff6a 	bl	40fa2 <send_message>
   410ce:	4605      	mov	r5, r0
   410d0:	b130      	cbz	r0, 410e0 <at_interface_close+0x44>
   410d2:	6027      	str	r7, [r4, #0]
   410d4:	4628      	mov	r0, r5
   410d6:	f7e8 f8f7 	bl	292c8 <nrf_modem_os_errno_set>
   410da:	f04f 35ff 	mov.w	r5, #4294967295
   410de:	e002      	b.n	410e6 <at_interface_close+0x4a>
   410e0:	4630      	mov	r0, r6
   410e2:	f7f2 f95b 	bl	3339c <interface_socket_free>
   410e6:	4628      	mov	r0, r5
   410e8:	b003      	add	sp, #12
   410ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   410ec:	2516      	movs	r5, #22
   410ee:	e7f1      	b.n	410d4 <at_interface_close+0x38>

000410f0 <at_interface_read>:
   410f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   410f4:	b087      	sub	sp, #28
   410f6:	4680      	mov	r8, r0
   410f8:	460e      	mov	r6, r1
   410fa:	4614      	mov	r4, r2
   410fc:	461f      	mov	r7, r3
   410fe:	f7f2 f9b1 	bl	33464 <interface_socket_from_handle_get>
   41102:	4605      	mov	r5, r0
   41104:	2800      	cmp	r0, #0
   41106:	d045      	beq.n	41194 <at_interface_read+0xa4>
   41108:	2300      	movs	r3, #0
   4110a:	e9cd 6402 	strd	r6, r4, [sp, #8]
   4110e:	9304      	str	r3, [sp, #16]
   41110:	b117      	cbz	r7, 41118 <at_interface_read+0x28>
   41112:	f017 0f2a 	tst.w	r7, #42	; 0x2a
   41116:	d022      	beq.n	4115e <at_interface_read+0x6e>
   41118:	2400      	movs	r4, #0
   4111a:	9305      	str	r3, [sp, #20]
   4111c:	f007 0902 	and.w	r9, r7, #2
   41120:	682b      	ldr	r3, [r5, #0]
   41122:	69e8      	ldr	r0, [r5, #28]
   41124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   41128:	602b      	str	r3, [r5, #0]
   4112a:	6803      	ldr	r3, [r0, #0]
   4112c:	463a      	mov	r2, r7
   4112e:	689b      	ldr	r3, [r3, #8]
   41130:	a902      	add	r1, sp, #8
   41132:	4798      	blx	r3
   41134:	1e06      	subs	r6, r0, #0
   41136:	da1b      	bge.n	41170 <at_interface_read+0x80>
   41138:	f1b9 0f00 	cmp.w	r9, #0
   4113c:	d113      	bne.n	41166 <at_interface_read+0x76>
   4113e:	b9bc      	cbnz	r4, 41170 <at_interface_read+0x80>
   41140:	6a2b      	ldr	r3, [r5, #32]
   41142:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   41146:	2b00      	cmp	r3, #0
   41148:	bf08      	it	eq
   4114a:	f04f 33ff 	moveq.w	r3, #4294967295
   4114e:	4611      	mov	r1, r2
   41150:	9301      	str	r3, [sp, #4]
   41152:	4640      	mov	r0, r8
   41154:	ab01      	add	r3, sp, #4
   41156:	f7ff ff14 	bl	40f82 <at_interface_wait>
   4115a:	4604      	mov	r4, r0
   4115c:	e7e0      	b.n	41120 <at_interface_read+0x30>
   4115e:	242d      	movs	r4, #45	; 0x2d
   41160:	f04f 36ff 	mov.w	r6, #4294967295
   41164:	e00f      	b.n	41186 <at_interface_read+0x96>
   41166:	1c73      	adds	r3, r6, #1
   41168:	d102      	bne.n	41170 <at_interface_read+0x80>
   4116a:	2c00      	cmp	r4, #0
   4116c:	bf08      	it	eq
   4116e:	2423      	moveq	r4, #35	; 0x23
   41170:	69e8      	ldr	r0, [r5, #28]
   41172:	6803      	ldr	r3, [r0, #0]
   41174:	68db      	ldr	r3, [r3, #12]
   41176:	4798      	blx	r3
   41178:	3001      	adds	r0, #1
   4117a:	bf1e      	ittt	ne
   4117c:	682b      	ldrne	r3, [r5, #0]
   4117e:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
   41182:	602b      	strne	r3, [r5, #0]
   41184:	b114      	cbz	r4, 4118c <at_interface_read+0x9c>
   41186:	4620      	mov	r0, r4
   41188:	f7e8 f89e 	bl	292c8 <nrf_modem_os_errno_set>
   4118c:	4630      	mov	r0, r6
   4118e:	b007      	add	sp, #28
   41190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   41194:	2416      	movs	r4, #22
   41196:	e7e3      	b.n	41160 <at_interface_read+0x70>

00041198 <at_interface_getopt>:
   41198:	f7f2 b9a8 	b.w	334ec <interface_socket_getopt>

0004119c <at_interface_setopt>:
   4119c:	f7f2 b972 	b.w	33484 <interface_socket_setopt>

000411a0 <rpc_at_event_handler>:
   411a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   411a2:	4606      	mov	r6, r0
   411a4:	68c0      	ldr	r0, [r0, #12]
   411a6:	460d      	mov	r5, r1
   411a8:	f7f2 f95c 	bl	33464 <interface_socket_from_handle_get>
   411ac:	4604      	mov	r4, r0
   411ae:	2800      	cmp	r0, #0
   411b0:	d03a      	beq.n	41228 <rpc_at_event_handler+0x88>
   411b2:	6803      	ldr	r3, [r0, #0]
   411b4:	b29b      	uxth	r3, r3
   411b6:	2b01      	cmp	r3, #1
   411b8:	d104      	bne.n	411c4 <rpc_at_event_handler+0x24>
   411ba:	2d02      	cmp	r5, #2
   411bc:	d11c      	bne.n	411f8 <rpc_at_event_handler+0x58>
   411be:	6005      	str	r5, [r0, #0]
   411c0:	2000      	movs	r0, #0
   411c2:	e02b      	b.n	4121c <rpc_at_event_handler+0x7c>
   411c4:	6803      	ldr	r3, [r0, #0]
   411c6:	b29b      	uxth	r3, r3
   411c8:	2b0d      	cmp	r3, #13
   411ca:	d104      	bne.n	411d6 <rpc_at_event_handler+0x36>
   411cc:	2d02      	cmp	r5, #2
   411ce:	d113      	bne.n	411f8 <rpc_at_event_handler+0x58>
   411d0:	230e      	movs	r3, #14
   411d2:	6023      	str	r3, [r4, #0]
   411d4:	e7f4      	b.n	411c0 <rpc_at_event_handler+0x20>
   411d6:	6803      	ldr	r3, [r0, #0]
   411d8:	b29b      	uxth	r3, r3
   411da:	2b02      	cmp	r3, #2
   411dc:	d10c      	bne.n	411f8 <rpc_at_event_handler+0x58>
   411de:	6803      	ldr	r3, [r0, #0]
   411e0:	029b      	lsls	r3, r3, #10
   411e2:	d509      	bpl.n	411f8 <rpc_at_event_handler+0x58>
   411e4:	2d02      	cmp	r5, #2
   411e6:	d107      	bne.n	411f8 <rpc_at_event_handler+0x58>
   411e8:	6803      	ldr	r3, [r0, #0]
   411ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   411ee:	6003      	str	r3, [r0, #0]
   411f0:	6803      	ldr	r3, [r0, #0]
   411f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   411f6:	e7ec      	b.n	411d2 <rpc_at_event_handler+0x32>
   411f8:	3d03      	subs	r5, #3
   411fa:	2d01      	cmp	r5, #1
   411fc:	d8e0      	bhi.n	411c0 <rpc_at_event_handler+0x20>
   411fe:	2500      	movs	r5, #0
   41200:	6833      	ldr	r3, [r6, #0]
   41202:	69e0      	ldr	r0, [r4, #28]
   41204:	9300      	str	r3, [sp, #0]
   41206:	6873      	ldr	r3, [r6, #4]
   41208:	4669      	mov	r1, sp
   4120a:	9301      	str	r3, [sp, #4]
   4120c:	6803      	ldr	r3, [r0, #0]
   4120e:	e9cd 5502 	strd	r5, r5, [sp, #8]
   41212:	685b      	ldr	r3, [r3, #4]
   41214:	4798      	blx	r3
   41216:	3001      	adds	r0, #1
   41218:	d102      	bne.n	41220 <rpc_at_event_handler+0x80>
   4121a:	2002      	movs	r0, #2
   4121c:	b004      	add	sp, #16
   4121e:	bd70      	pop	{r4, r5, r6, pc}
   41220:	6823      	ldr	r3, [r4, #0]
   41222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   41226:	e7d4      	b.n	411d2 <rpc_at_event_handler+0x32>
   41228:	6830      	ldr	r0, [r6, #0]
   4122a:	2800      	cmp	r0, #0
   4122c:	d0c8      	beq.n	411c0 <rpc_at_event_handler+0x20>
   4122e:	f7ff f91c 	bl	4046a <rpc_at_client_data_free>
   41232:	e7c5      	b.n	411c0 <rpc_at_event_handler+0x20>

00041234 <packet_free_cb>:
   41234:	b510      	push	{r4, lr}
   41236:	4604      	mov	r4, r0
   41238:	b118      	cbz	r0, 41242 <packet_free_cb+0xe>
   4123a:	6800      	ldr	r0, [r0, #0]
   4123c:	b108      	cbz	r0, 41242 <packet_free_cb+0xe>
   4123e:	f7ff f9c0 	bl	405c2 <rpc_gnss_client_data_free>
   41242:	68a0      	ldr	r0, [r4, #8]
   41244:	b118      	cbz	r0, 4124e <packet_free_cb+0x1a>
   41246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4124a:	f7e8 b9f9 	b.w	29640 <nrf_modem_os_free>
   4124e:	bd10      	pop	{r4, pc}

00041250 <spaces_remove>:
   41250:	2200      	movs	r2, #0
   41252:	b510      	push	{r4, lr}
   41254:	1e44      	subs	r4, r0, #1
   41256:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   4125a:	1881      	adds	r1, r0, r2
   4125c:	b90b      	cbnz	r3, 41262 <spaces_remove+0x12>
   4125e:	700b      	strb	r3, [r1, #0]
   41260:	bd10      	pop	{r4, pc}
   41262:	2b20      	cmp	r3, #32
   41264:	bf1c      	itt	ne
   41266:	700b      	strbne	r3, [r1, #0]
   41268:	3201      	addne	r2, #1
   4126a:	e7f4      	b.n	41256 <spaces_remove+0x6>

0004126c <ok_rsp_parser>:
   4126c:	2000      	movs	r0, #0
   4126e:	4770      	bx	lr

00041270 <context_query_parser>:
   41270:	f06f 0004 	mvn.w	r0, #4
   41274:	4770      	bx	lr

00041276 <null_handler_init>:
   41276:	2000      	movs	r0, #0
   41278:	4770      	bx	lr

0004127a <null_handler_put>:
   4127a:	b510      	push	{r4, lr}
   4127c:	460c      	mov	r4, r1
   4127e:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
   41282:	4620      	mov	r0, r4
   41284:	4798      	blx	r3
   41286:	6860      	ldr	r0, [r4, #4]
   41288:	bd10      	pop	{r4, pc}

0004128a <null_handler_get>:
   4128a:	f04f 30ff 	mov.w	r0, #4294967295
   4128e:	4770      	bx	lr

00041290 <null_handler_available>:
   41290:	f04f 30ff 	mov.w	r0, #4294967295
   41294:	4770      	bx	lr

00041296 <null_handler_flush>:
   41296:	2000      	movs	r0, #0
   41298:	4770      	bx	lr

0004129a <null_handler_free>:
   4129a:	4770      	bx	lr

0004129c <stream_handler_free_packet>:
   4129c:	b530      	push	{r4, r5, lr}
   4129e:	4605      	mov	r5, r0
   412a0:	b085      	sub	sp, #20
   412a2:	68c0      	ldr	r0, [r0, #12]
   412a4:	f000 fafe 	bl	418a4 <linked_list_pop>
   412a8:	4604      	mov	r4, r0
   412aa:	b170      	cbz	r0, 412ca <stream_handler_free_packet+0x2e>
   412ac:	6843      	ldr	r3, [r0, #4]
   412ae:	9300      	str	r3, [sp, #0]
   412b0:	6883      	ldr	r3, [r0, #8]
   412b2:	9301      	str	r3, [sp, #4]
   412b4:	6903      	ldr	r3, [r0, #16]
   412b6:	9302      	str	r3, [sp, #8]
   412b8:	68c3      	ldr	r3, [r0, #12]
   412ba:	4668      	mov	r0, sp
   412bc:	9303      	str	r3, [sp, #12]
   412be:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   412c2:	4798      	blx	r3
   412c4:	4620      	mov	r0, r4
   412c6:	f7e8 f9bb 	bl	29640 <nrf_modem_os_free>
   412ca:	b005      	add	sp, #20
   412cc:	bd30      	pop	{r4, r5, pc}

000412ce <stream_handler_init>:
   412ce:	b510      	push	{r4, lr}
   412d0:	4604      	mov	r4, r0
   412d2:	200c      	movs	r0, #12
   412d4:	f7e8 f9a4 	bl	29620 <nrf_modem_os_alloc>
   412d8:	60e0      	str	r0, [r4, #12]
   412da:	b128      	cbz	r0, 412e8 <stream_handler_init+0x1a>
   412dc:	2300      	movs	r3, #0
   412de:	6123      	str	r3, [r4, #16]
   412e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   412e4:	f000 bac2 	b.w	4186c <linked_list_init>
   412e8:	200c      	movs	r0, #12
   412ea:	bd10      	pop	{r4, pc}

000412ec <stream_handler_put>:
   412ec:	b570      	push	{r4, r5, r6, lr}
   412ee:	4606      	mov	r6, r0
   412f0:	2014      	movs	r0, #20
   412f2:	460d      	mov	r5, r1
   412f4:	f7e8 f994 	bl	29620 <nrf_modem_os_alloc>
   412f8:	4604      	mov	r4, r0
   412fa:	b178      	cbz	r0, 4131c <stream_handler_put+0x30>
   412fc:	682b      	ldr	r3, [r5, #0]
   412fe:	4601      	mov	r1, r0
   41300:	6043      	str	r3, [r0, #4]
   41302:	686b      	ldr	r3, [r5, #4]
   41304:	6083      	str	r3, [r0, #8]
   41306:	68eb      	ldr	r3, [r5, #12]
   41308:	60c3      	str	r3, [r0, #12]
   4130a:	68ab      	ldr	r3, [r5, #8]
   4130c:	6103      	str	r3, [r0, #16]
   4130e:	68f0      	ldr	r0, [r6, #12]
   41310:	f000 fab5 	bl	4187e <linked_list_push>
   41314:	b128      	cbz	r0, 41322 <stream_handler_put+0x36>
   41316:	4620      	mov	r0, r4
   41318:	f7e8 f992 	bl	29640 <nrf_modem_os_free>
   4131c:	f04f 30ff 	mov.w	r0, #4294967295
   41320:	e000      	b.n	41324 <stream_handler_put+0x38>
   41322:	6868      	ldr	r0, [r5, #4]
   41324:	bd70      	pop	{r4, r5, r6, pc}

00041326 <stream_handler_get>:
   41326:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4132a:	4606      	mov	r6, r0
   4132c:	b085      	sub	sp, #20
   4132e:	68c0      	ldr	r0, [r0, #12]
   41330:	468a      	mov	sl, r1
   41332:	4617      	mov	r7, r2
   41334:	f000 fac0 	bl	418b8 <linked_list_peek>
   41338:	4604      	mov	r4, r0
   4133a:	2800      	cmp	r0, #0
   4133c:	d055      	beq.n	413ea <stream_handler_get+0xc4>
   4133e:	f8da 0008 	ldr.w	r0, [sl, #8]
   41342:	2800      	cmp	r0, #0
   41344:	d049      	beq.n	413da <stream_handler_get+0xb4>
   41346:	6921      	ldr	r1, [r4, #16]
   41348:	2900      	cmp	r1, #0
   4134a:	d046      	beq.n	413da <stream_handler_get+0xb4>
   4134c:	68e2      	ldr	r2, [r4, #12]
   4134e:	2a00      	cmp	r2, #0
   41350:	d043      	beq.n	413da <stream_handler_get+0xb4>
   41352:	f8da 500c 	ldr.w	r5, [sl, #12]
   41356:	42aa      	cmp	r2, r5
   41358:	bf28      	it	cs
   4135a:	462a      	movcs	r2, r5
   4135c:	f8ca 200c 	str.w	r2, [sl, #12]
   41360:	f000 fc9d 	bl	41c9e <memcpy>
   41364:	2500      	movs	r5, #0
   41366:	f8da 3004 	ldr.w	r3, [sl, #4]
   4136a:	6931      	ldr	r1, [r6, #16]
   4136c:	9301      	str	r3, [sp, #4]
   4136e:	f8da 3000 	ldr.w	r3, [sl]
   41372:	9302      	str	r3, [sp, #8]
   41374:	f007 0320 	and.w	r3, r7, #32
   41378:	9303      	str	r3, [sp, #12]
   4137a:	f007 0708 	and.w	r7, r7, #8
   4137e:	9b01      	ldr	r3, [sp, #4]
   41380:	42ab      	cmp	r3, r5
   41382:	d924      	bls.n	413ce <stream_handler_get+0xa8>
   41384:	68a2      	ldr	r2, [r4, #8]
   41386:	9b01      	ldr	r3, [sp, #4]
   41388:	eba2 0801 	sub.w	r8, r2, r1
   4138c:	eba3 0b05 	sub.w	fp, r3, r5
   41390:	f8da 2000 	ldr.w	r2, [sl]
   41394:	45d8      	cmp	r8, fp
   41396:	46c1      	mov	r9, r8
   41398:	bf28      	it	cs
   4139a:	46d9      	movcs	r9, fp
   4139c:	b142      	cbz	r2, 413b0 <stream_handler_get+0x8a>
   4139e:	9b03      	ldr	r3, [sp, #12]
   413a0:	b933      	cbnz	r3, 413b0 <stream_handler_get+0x8a>
   413a2:	6860      	ldr	r0, [r4, #4]
   413a4:	9b02      	ldr	r3, [sp, #8]
   413a6:	4401      	add	r1, r0
   413a8:	464a      	mov	r2, r9
   413aa:	1958      	adds	r0, r3, r5
   413ac:	f000 fc77 	bl	41c9e <memcpy>
   413b0:	4620      	mov	r0, r4
   413b2:	f000 fa89 	bl	418c8 <linked_list_get_next>
   413b6:	4604      	mov	r4, r0
   413b8:	b92f      	cbnz	r7, 413c6 <stream_handler_get+0xa0>
   413ba:	45d8      	cmp	r8, fp
   413bc:	d811      	bhi.n	413e2 <stream_handler_get+0xbc>
   413be:	4630      	mov	r0, r6
   413c0:	f7ff ff6c 	bl	4129c <stream_handler_free_packet>
   413c4:	6137      	str	r7, [r6, #16]
   413c6:	2100      	movs	r1, #0
   413c8:	444d      	add	r5, r9
   413ca:	2c00      	cmp	r4, #0
   413cc:	d1d7      	bne.n	4137e <stream_handler_get+0x58>
   413ce:	4628      	mov	r0, r5
   413d0:	f8ca 5004 	str.w	r5, [sl, #4]
   413d4:	b005      	add	sp, #20
   413d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   413da:	2200      	movs	r2, #0
   413dc:	f8ca 200c 	str.w	r2, [sl, #12]
   413e0:	e7c0      	b.n	41364 <stream_handler_get+0x3e>
   413e2:	6932      	ldr	r2, [r6, #16]
   413e4:	444a      	add	r2, r9
   413e6:	6132      	str	r2, [r6, #16]
   413e8:	e7ed      	b.n	413c6 <stream_handler_get+0xa0>
   413ea:	f04f 30ff 	mov.w	r0, #4294967295
   413ee:	e7f1      	b.n	413d4 <stream_handler_get+0xae>

000413f0 <stream_handler_available>:
   413f0:	b510      	push	{r4, lr}
   413f2:	4604      	mov	r4, r0
   413f4:	68c0      	ldr	r0, [r0, #12]
   413f6:	f000 fa5f 	bl	418b8 <linked_list_peek>
   413fa:	b150      	cbz	r0, 41412 <stream_handler_available+0x22>
   413fc:	6924      	ldr	r4, [r4, #16]
   413fe:	4264      	negs	r4, r4
   41400:	6883      	ldr	r3, [r0, #8]
   41402:	441c      	add	r4, r3
   41404:	f000 fa60 	bl	418c8 <linked_list_get_next>
   41408:	2800      	cmp	r0, #0
   4140a:	d1f9      	bne.n	41400 <stream_handler_available+0x10>
   4140c:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
   41410:	bd10      	pop	{r4, pc}
   41412:	f04f 30ff 	mov.w	r0, #4294967295
   41416:	e7fb      	b.n	41410 <stream_handler_available+0x20>

00041418 <stream_handler_flush>:
   41418:	68c3      	ldr	r3, [r0, #12]
   4141a:	b510      	push	{r4, lr}
   4141c:	4604      	mov	r4, r0
   4141e:	b923      	cbnz	r3, 4142a <stream_handler_flush+0x12>
   41420:	2016      	movs	r0, #22
   41422:	e007      	b.n	41434 <stream_handler_flush+0x1c>
   41424:	4620      	mov	r0, r4
   41426:	f7ff ff39 	bl	4129c <stream_handler_free_packet>
   4142a:	68e0      	ldr	r0, [r4, #12]
   4142c:	f000 fa4a 	bl	418c4 <linked_list_size_get>
   41430:	2800      	cmp	r0, #0
   41432:	d1f7      	bne.n	41424 <stream_handler_flush+0xc>
   41434:	bd10      	pop	{r4, pc}

00041436 <stream_handler_free>:
   41436:	68c3      	ldr	r3, [r0, #12]
   41438:	b510      	push	{r4, lr}
   4143a:	4604      	mov	r4, r0
   4143c:	b133      	cbz	r3, 4144c <stream_handler_free+0x16>
   4143e:	f7ff ffeb 	bl	41418 <stream_handler_flush>
   41442:	68e0      	ldr	r0, [r4, #12]
   41444:	f7e8 f8fc 	bl	29640 <nrf_modem_os_free>
   41448:	2300      	movs	r3, #0
   4144a:	60e3      	str	r3, [r4, #12]
   4144c:	bd10      	pop	{r4, pc}

0004144e <datagram_handler_free_packet>:
   4144e:	b530      	push	{r4, r5, lr}
   41450:	4605      	mov	r5, r0
   41452:	b085      	sub	sp, #20
   41454:	68c0      	ldr	r0, [r0, #12]
   41456:	f000 fa25 	bl	418a4 <linked_list_pop>
   4145a:	4604      	mov	r4, r0
   4145c:	b170      	cbz	r0, 4147c <datagram_handler_free_packet+0x2e>
   4145e:	6843      	ldr	r3, [r0, #4]
   41460:	9300      	str	r3, [sp, #0]
   41462:	6883      	ldr	r3, [r0, #8]
   41464:	9301      	str	r3, [sp, #4]
   41466:	6903      	ldr	r3, [r0, #16]
   41468:	9302      	str	r3, [sp, #8]
   4146a:	68c3      	ldr	r3, [r0, #12]
   4146c:	4668      	mov	r0, sp
   4146e:	9303      	str	r3, [sp, #12]
   41470:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
   41474:	4798      	blx	r3
   41476:	4620      	mov	r0, r4
   41478:	f7e8 f8e2 	bl	29640 <nrf_modem_os_free>
   4147c:	b005      	add	sp, #20
   4147e:	bd30      	pop	{r4, r5, pc}

00041480 <datagram_handler_init>:
   41480:	b510      	push	{r4, lr}
   41482:	4604      	mov	r4, r0
   41484:	200c      	movs	r0, #12
   41486:	f7e8 f8cb 	bl	29620 <nrf_modem_os_alloc>
   4148a:	60e0      	str	r0, [r4, #12]
   4148c:	b118      	cbz	r0, 41496 <datagram_handler_init+0x16>
   4148e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   41492:	f000 b9eb 	b.w	4186c <linked_list_init>
   41496:	200c      	movs	r0, #12
   41498:	bd10      	pop	{r4, pc}

0004149a <datagram_handler_put>:
   4149a:	b570      	push	{r4, r5, r6, lr}
   4149c:	4606      	mov	r6, r0
   4149e:	2014      	movs	r0, #20
   414a0:	460d      	mov	r5, r1
   414a2:	f7e8 f8bd 	bl	29620 <nrf_modem_os_alloc>
   414a6:	4604      	mov	r4, r0
   414a8:	b178      	cbz	r0, 414ca <datagram_handler_put+0x30>
   414aa:	682b      	ldr	r3, [r5, #0]
   414ac:	4601      	mov	r1, r0
   414ae:	6043      	str	r3, [r0, #4]
   414b0:	686b      	ldr	r3, [r5, #4]
   414b2:	6083      	str	r3, [r0, #8]
   414b4:	68eb      	ldr	r3, [r5, #12]
   414b6:	60c3      	str	r3, [r0, #12]
   414b8:	68ab      	ldr	r3, [r5, #8]
   414ba:	6103      	str	r3, [r0, #16]
   414bc:	68f0      	ldr	r0, [r6, #12]
   414be:	f000 f9de 	bl	4187e <linked_list_push>
   414c2:	b128      	cbz	r0, 414d0 <datagram_handler_put+0x36>
   414c4:	4620      	mov	r0, r4
   414c6:	f7e8 f8bb 	bl	29640 <nrf_modem_os_free>
   414ca:	f04f 30ff 	mov.w	r0, #4294967295
   414ce:	e000      	b.n	414d2 <datagram_handler_put+0x38>
   414d0:	6868      	ldr	r0, [r5, #4]
   414d2:	bd70      	pop	{r4, r5, r6, pc}

000414d4 <datagram_handler_get>:
   414d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   414d6:	4607      	mov	r7, r0
   414d8:	68c0      	ldr	r0, [r0, #12]
   414da:	460c      	mov	r4, r1
   414dc:	4616      	mov	r6, r2
   414de:	f000 f9eb 	bl	418b8 <linked_list_peek>
   414e2:	4605      	mov	r5, r0
   414e4:	b328      	cbz	r0, 41532 <datagram_handler_get+0x5e>
   414e6:	6882      	ldr	r2, [r0, #8]
   414e8:	6863      	ldr	r3, [r4, #4]
   414ea:	6820      	ldr	r0, [r4, #0]
   414ec:	429a      	cmp	r2, r3
   414ee:	bf28      	it	cs
   414f0:	461a      	movcs	r2, r3
   414f2:	6062      	str	r2, [r4, #4]
   414f4:	b110      	cbz	r0, 414fc <datagram_handler_get+0x28>
   414f6:	6869      	ldr	r1, [r5, #4]
   414f8:	f000 fbd1 	bl	41c9e <memcpy>
   414fc:	68a0      	ldr	r0, [r4, #8]
   414fe:	b1a8      	cbz	r0, 4152c <datagram_handler_get+0x58>
   41500:	6929      	ldr	r1, [r5, #16]
   41502:	b199      	cbz	r1, 4152c <datagram_handler_get+0x58>
   41504:	68eb      	ldr	r3, [r5, #12]
   41506:	b18b      	cbz	r3, 4152c <datagram_handler_get+0x58>
   41508:	68e2      	ldr	r2, [r4, #12]
   4150a:	429a      	cmp	r2, r3
   4150c:	bf28      	it	cs
   4150e:	461a      	movcs	r2, r3
   41510:	60e2      	str	r2, [r4, #12]
   41512:	f000 fbc4 	bl	41c9e <memcpy>
   41516:	0732      	lsls	r2, r6, #28
   41518:	68ad      	ldr	r5, [r5, #8]
   4151a:	d402      	bmi.n	41522 <datagram_handler_get+0x4e>
   4151c:	4638      	mov	r0, r7
   4151e:	f7ff ff96 	bl	4144e <datagram_handler_free_packet>
   41522:	06b3      	lsls	r3, r6, #26
   41524:	bf4c      	ite	mi
   41526:	4628      	movmi	r0, r5
   41528:	6860      	ldrpl	r0, [r4, #4]
   4152a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   4152c:	2300      	movs	r3, #0
   4152e:	60e3      	str	r3, [r4, #12]
   41530:	e7f1      	b.n	41516 <datagram_handler_get+0x42>
   41532:	f04f 30ff 	mov.w	r0, #4294967295
   41536:	e7f8      	b.n	4152a <datagram_handler_get+0x56>

00041538 <datagram_handler_available>:
   41538:	b508      	push	{r3, lr}
   4153a:	68c0      	ldr	r0, [r0, #12]
   4153c:	f000 f9bc 	bl	418b8 <linked_list_peek>
   41540:	b108      	cbz	r0, 41546 <datagram_handler_available+0xe>
   41542:	6880      	ldr	r0, [r0, #8]
   41544:	bd08      	pop	{r3, pc}
   41546:	f04f 30ff 	mov.w	r0, #4294967295
   4154a:	e7fb      	b.n	41544 <datagram_handler_available+0xc>

0004154c <datagram_handler_flush>:
   4154c:	68c3      	ldr	r3, [r0, #12]
   4154e:	b510      	push	{r4, lr}
   41550:	4604      	mov	r4, r0
   41552:	b923      	cbnz	r3, 4155e <datagram_handler_flush+0x12>
   41554:	2016      	movs	r0, #22
   41556:	e007      	b.n	41568 <datagram_handler_flush+0x1c>
   41558:	4620      	mov	r0, r4
   4155a:	f7ff ff78 	bl	4144e <datagram_handler_free_packet>
   4155e:	68e0      	ldr	r0, [r4, #12]
   41560:	f000 f9b0 	bl	418c4 <linked_list_size_get>
   41564:	2800      	cmp	r0, #0
   41566:	d1f7      	bne.n	41558 <datagram_handler_flush+0xc>
   41568:	bd10      	pop	{r4, pc}

0004156a <datagram_handler_free>:
   4156a:	68c3      	ldr	r3, [r0, #12]
   4156c:	b510      	push	{r4, lr}
   4156e:	4604      	mov	r4, r0
   41570:	b133      	cbz	r3, 41580 <datagram_handler_free+0x16>
   41572:	f7ff ffeb 	bl	4154c <datagram_handler_flush>
   41576:	68e0      	ldr	r0, [r4, #12]
   41578:	f7e8 f862 	bl	29640 <nrf_modem_os_free>
   4157c:	2300      	movs	r3, #0
   4157e:	60e3      	str	r3, [r4, #12]
   41580:	bd10      	pop	{r4, pc}

00041582 <packet_handler_delete>:
   41582:	b510      	push	{r4, lr}
   41584:	4604      	mov	r4, r0
   41586:	6803      	ldr	r3, [r0, #0]
   41588:	691b      	ldr	r3, [r3, #16]
   4158a:	4798      	blx	r3
   4158c:	6823      	ldr	r3, [r4, #0]
   4158e:	4620      	mov	r0, r4
   41590:	695b      	ldr	r3, [r3, #20]
   41592:	4798      	blx	r3
   41594:	4620      	mov	r0, r4
   41596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4159a:	f7e8 b851 	b.w	29640 <nrf_modem_os_free>

0004159e <nrf_modem_platform_error_handler>:
   4159e:	b508      	push	{r3, lr}
   415a0:	f7fb fb6c 	bl	3cc7c <nrf_modem_recoverable_error_handler>
   415a4:	bd08      	pop	{r3, pc}

000415a6 <unimplemented_method>:
   415a6:	b40f      	push	{r0, r1, r2, r3}
   415a8:	b508      	push	{r3, lr}
   415aa:	202d      	movs	r0, #45	; 0x2d
   415ac:	f7e7 fe8c 	bl	292c8 <nrf_modem_os_errno_set>
   415b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   415b4:	f04f 30ff 	mov.w	r0, #4294967295
   415b8:	b004      	add	sp, #16
   415ba:	4770      	bx	lr

000415bc <rpc_transport_ipc_fault_handler>:
   415bc:	f7ff bfef 	b.w	4159e <nrf_modem_platform_error_handler>

000415c0 <nrf_modem_platform_init>:
   415c0:	b513      	push	{r0, r1, r4, lr}
   415c2:	4604      	mov	r4, r0
   415c4:	f7e8 f858 	bl	29678 <nrf_modem_os_init>
   415c8:	6a23      	ldr	r3, [r4, #32]
   415ca:	4668      	mov	r0, sp
   415cc:	9400      	str	r4, [sp, #0]
   415ce:	f88d 3004 	strb.w	r3, [sp, #4]
   415d2:	f7f1 fd53 	bl	3307c <rpc_transport_ipc_init>
   415d6:	b920      	cbnz	r0, 415e2 <nrf_modem_platform_init+0x22>
   415d8:	f7f1 feae 	bl	33338 <interface_init>
   415dc:	b118      	cbz	r0, 415e6 <nrf_modem_platform_init+0x26>
   415de:	f04f 30ff 	mov.w	r0, #4294967295
   415e2:	b002      	add	sp, #8
   415e4:	bd10      	pop	{r4, pc}
   415e6:	f7f3 fb67 	bl	34cb8 <at_interface_init>
   415ea:	2800      	cmp	r0, #0
   415ec:	d1f7      	bne.n	415de <nrf_modem_platform_init+0x1e>
   415ee:	f7f2 f81f 	bl	33630 <ip_interface_init>
   415f2:	2800      	cmp	r0, #0
   415f4:	d1f3      	bne.n	415de <nrf_modem_platform_init+0x1e>
   415f6:	f7f2 ffd1 	bl	3459c <tls_interface_init>
   415fa:	2800      	cmp	r0, #0
   415fc:	d1ef      	bne.n	415de <nrf_modem_platform_init+0x1e>
   415fe:	f7f3 fc15 	bl	34e2c <mfu_interface_init>
   41602:	2800      	cmp	r0, #0
   41604:	d1eb      	bne.n	415de <nrf_modem_platform_init+0x1e>
   41606:	f7f4 fb05 	bl	35c14 <pdn_interface_init>
   4160a:	2800      	cmp	r0, #0
   4160c:	d1e7      	bne.n	415de <nrf_modem_platform_init+0x1e>
   4160e:	f7f4 f96b 	bl	358e8 <gnss_interface_init>
   41612:	3800      	subs	r0, #0
   41614:	bf18      	it	ne
   41616:	2001      	movne	r0, #1
   41618:	4240      	negs	r0, r0
   4161a:	e7e2      	b.n	415e2 <nrf_modem_platform_init+0x22>

0004161c <internal_poll>:
   4161c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   41620:	2600      	movs	r6, #0
   41622:	4688      	mov	r8, r1
   41624:	4605      	mov	r5, r0
   41626:	4637      	mov	r7, r6
   41628:	4546      	cmp	r6, r8
   4162a:	d103      	bne.n	41634 <internal_poll+0x18>
   4162c:	4638      	mov	r0, r7
   4162e:	b002      	add	sp, #8
   41630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   41634:	88ab      	ldrh	r3, [r5, #4]
   41636:	6828      	ldr	r0, [r5, #0]
   41638:	f003 0303 	and.w	r3, r3, #3
   4163c:	a901      	add	r1, sp, #4
   4163e:	f043 041c 	orr.w	r4, r3, #28
   41642:	f7ff f8fb 	bl	4083c <interface_socket_event_get>
   41646:	9b01      	ldr	r3, [sp, #4]
   41648:	4023      	ands	r3, r4
   4164a:	80eb      	strh	r3, [r5, #6]
   4164c:	b103      	cbz	r3, 41650 <internal_poll+0x34>
   4164e:	3701      	adds	r7, #1
   41650:	3601      	adds	r6, #1
   41652:	3508      	adds	r5, #8
   41654:	e7e8      	b.n	41628 <internal_poll+0xc>

00041656 <nrf_modem_platform_getaddrinfo>:
   41656:	f7f2 bc0d 	b.w	33e74 <ip_interface_getaddrinfo>

0004165a <nrf_modem_platform_freeaddrinfo>:
   4165a:	f7f2 bcdf 	b.w	3401c <ip_interface_freeaddrinfo>

0004165e <nrf_modem_platform_poll>:
   4165e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   41660:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
   41664:	460e      	mov	r6, r1
   41666:	4605      	mov	r5, r0
   41668:	9201      	str	r2, [sp, #4]
   4166a:	b110      	cbz	r0, 41672 <nrf_modem_platform_poll+0x14>
   4166c:	1e4b      	subs	r3, r1, #1
   4166e:	2b08      	cmp	r3, #8
   41670:	d906      	bls.n	41680 <nrf_modem_platform_poll+0x22>
   41672:	2016      	movs	r0, #22
   41674:	f7e7 fe28 	bl	292c8 <nrf_modem_os_errno_set>
   41678:	f04f 30ff 	mov.w	r0, #4294967295
   4167c:	b002      	add	sp, #8
   4167e:	bd70      	pop	{r4, r5, r6, pc}
   41680:	f7ff ffcc 	bl	4161c <internal_poll>
   41684:	2400      	movs	r4, #0
   41686:	2800      	cmp	r0, #0
   41688:	d1f8      	bne.n	4167c <nrf_modem_platform_poll+0x1e>
   4168a:	2c00      	cmp	r4, #0
   4168c:	d1f6      	bne.n	4167c <nrf_modem_platform_poll+0x1e>
   4168e:	4628      	mov	r0, r5
   41690:	a901      	add	r1, sp, #4
   41692:	f7e7 fd61 	bl	29158 <nrf_modem_os_timedwait>
   41696:	4604      	mov	r4, r0
   41698:	b118      	cbz	r0, 416a2 <nrf_modem_platform_poll+0x44>
   4169a:	283c      	cmp	r0, #60	; 0x3c
   4169c:	d001      	beq.n	416a2 <nrf_modem_platform_poll+0x44>
   4169e:	2023      	movs	r0, #35	; 0x23
   416a0:	e7e8      	b.n	41674 <nrf_modem_platform_poll+0x16>
   416a2:	4631      	mov	r1, r6
   416a4:	4628      	mov	r0, r5
   416a6:	f7ff ffb9 	bl	4161c <internal_poll>
   416aa:	e7ec      	b.n	41686 <nrf_modem_platform_poll+0x28>

000416ac <nrf_socket>:
   416ac:	b570      	push	{r4, r5, r6, lr}
   416ae:	4604      	mov	r4, r0
   416b0:	460d      	mov	r5, r1
   416b2:	4616      	mov	r6, r2
   416b4:	f7f4 ff6c 	bl	36590 <nrf_modem_platform_af_method_table_get>
   416b8:	b130      	cbz	r0, 416c8 <nrf_socket+0x1c>
   416ba:	4632      	mov	r2, r6
   416bc:	4629      	mov	r1, r5
   416be:	6803      	ldr	r3, [r0, #0]
   416c0:	4620      	mov	r0, r4
   416c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   416c6:	4718      	bx	r3
   416c8:	f04f 30ff 	mov.w	r0, #4294967295
   416cc:	bd70      	pop	{r4, r5, r6, pc}

000416ce <nrf_close>:
   416ce:	b510      	push	{r4, lr}
   416d0:	4604      	mov	r4, r0
   416d2:	f7f4 ffaf 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   416d6:	b120      	cbz	r0, 416e2 <nrf_close+0x14>
   416d8:	6843      	ldr	r3, [r0, #4]
   416da:	4620      	mov	r0, r4
   416dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   416e0:	4718      	bx	r3
   416e2:	f04f 30ff 	mov.w	r0, #4294967295
   416e6:	bd10      	pop	{r4, pc}

000416e8 <nrf_sendto>:
   416e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   416ea:	4604      	mov	r4, r0
   416ec:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   416f0:	e9cd 2102 	strd	r2, r1, [sp, #8]
   416f4:	9301      	str	r3, [sp, #4]
   416f6:	f7f4 ff9d 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   416fa:	b158      	cbz	r0, 41714 <nrf_sendto+0x2c>
   416fc:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   41700:	e9cd 5608 	strd	r5, r6, [sp, #32]
   41704:	6885      	ldr	r5, [r0, #8]
   41706:	4620      	mov	r0, r4
   41708:	46ac      	mov	ip, r5
   4170a:	9903      	ldr	r1, [sp, #12]
   4170c:	b004      	add	sp, #16
   4170e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   41712:	4760      	bx	ip
   41714:	f04f 30ff 	mov.w	r0, #4294967295
   41718:	b004      	add	sp, #16
   4171a:	bd70      	pop	{r4, r5, r6, pc}

0004171c <nrf_recvfrom>:
   4171c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   4171e:	4604      	mov	r4, r0
   41720:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   41724:	e9cd 2102 	strd	r2, r1, [sp, #8]
   41728:	9301      	str	r3, [sp, #4]
   4172a:	f7f4 ff83 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   4172e:	b158      	cbz	r0, 41748 <nrf_recvfrom+0x2c>
   41730:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   41734:	e9cd 5608 	strd	r5, r6, [sp, #32]
   41738:	68c5      	ldr	r5, [r0, #12]
   4173a:	4620      	mov	r0, r4
   4173c:	46ac      	mov	ip, r5
   4173e:	9903      	ldr	r1, [sp, #12]
   41740:	b004      	add	sp, #16
   41742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   41746:	4760      	bx	ip
   41748:	f04f 30ff 	mov.w	r0, #4294967295
   4174c:	b004      	add	sp, #16
   4174e:	bd70      	pop	{r4, r5, r6, pc}

00041750 <nrf_recv>:
   41750:	b513      	push	{r0, r1, r4, lr}
   41752:	2400      	movs	r4, #0
   41754:	e9cd 4400 	strd	r4, r4, [sp]
   41758:	f7ff ffe0 	bl	4171c <nrf_recvfrom>
   4175c:	b002      	add	sp, #8
   4175e:	bd10      	pop	{r4, pc}

00041760 <nrf_connect>:
   41760:	b513      	push	{r0, r1, r4, lr}
   41762:	4604      	mov	r4, r0
   41764:	e9cd 2100 	strd	r2, r1, [sp]
   41768:	f7f4 ff64 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   4176c:	b138      	cbz	r0, 4177e <nrf_connect+0x1e>
   4176e:	e9dd 2100 	ldrd	r2, r1, [sp]
   41772:	6943      	ldr	r3, [r0, #20]
   41774:	4620      	mov	r0, r4
   41776:	b002      	add	sp, #8
   41778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4177c:	4718      	bx	r3
   4177e:	f04f 30ff 	mov.w	r0, #4294967295
   41782:	b002      	add	sp, #8
   41784:	bd10      	pop	{r4, pc}

00041786 <nrf_listen>:
   41786:	b513      	push	{r0, r1, r4, lr}
   41788:	4604      	mov	r4, r0
   4178a:	9101      	str	r1, [sp, #4]
   4178c:	f7f4 ff52 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   41790:	b130      	cbz	r0, 417a0 <nrf_listen+0x1a>
   41792:	6983      	ldr	r3, [r0, #24]
   41794:	4620      	mov	r0, r4
   41796:	9901      	ldr	r1, [sp, #4]
   41798:	b002      	add	sp, #8
   4179a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   4179e:	4718      	bx	r3
   417a0:	f04f 30ff 	mov.w	r0, #4294967295
   417a4:	b002      	add	sp, #8
   417a6:	bd10      	pop	{r4, pc}

000417a8 <nrf_accept>:
   417a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   417aa:	4604      	mov	r4, r0
   417ac:	e9cd 2100 	strd	r2, r1, [sp]
   417b0:	f7f4 ff40 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   417b4:	b148      	cbz	r0, 417ca <nrf_accept+0x22>
   417b6:	e9dd 2100 	ldrd	r2, r1, [sp]
   417ba:	69c5      	ldr	r5, [r0, #28]
   417bc:	2300      	movs	r3, #0
   417be:	4620      	mov	r0, r4
   417c0:	46ac      	mov	ip, r5
   417c2:	b003      	add	sp, #12
   417c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   417c8:	4760      	bx	ip
   417ca:	f04f 30ff 	mov.w	r0, #4294967295
   417ce:	b003      	add	sp, #12
   417d0:	bd30      	pop	{r4, r5, pc}

000417d2 <nrf_bind>:
   417d2:	b513      	push	{r0, r1, r4, lr}
   417d4:	4604      	mov	r4, r0
   417d6:	e9cd 2100 	strd	r2, r1, [sp]
   417da:	f7f4 ff2b 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   417de:	b138      	cbz	r0, 417f0 <nrf_bind+0x1e>
   417e0:	e9dd 2100 	ldrd	r2, r1, [sp]
   417e4:	6903      	ldr	r3, [r0, #16]
   417e6:	4620      	mov	r0, r4
   417e8:	b002      	add	sp, #8
   417ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   417ee:	4718      	bx	r3
   417f0:	f04f 30ff 	mov.w	r0, #4294967295
   417f4:	b002      	add	sp, #8
   417f6:	bd10      	pop	{r4, pc}

000417f8 <nrf_setsockopt>:
   417f8:	b530      	push	{r4, r5, lr}
   417fa:	b085      	sub	sp, #20
   417fc:	4604      	mov	r4, r0
   417fe:	e9cd 2102 	strd	r2, r1, [sp, #8]
   41802:	9d08      	ldr	r5, [sp, #32]
   41804:	9301      	str	r3, [sp, #4]
   41806:	f7f4 ff15 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   4180a:	b150      	cbz	r0, 41822 <nrf_setsockopt+0x2a>
   4180c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   41810:	9508      	str	r5, [sp, #32]
   41812:	6a05      	ldr	r5, [r0, #32]
   41814:	4620      	mov	r0, r4
   41816:	46ac      	mov	ip, r5
   41818:	9903      	ldr	r1, [sp, #12]
   4181a:	b005      	add	sp, #20
   4181c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   41820:	4760      	bx	ip
   41822:	f04f 30ff 	mov.w	r0, #4294967295
   41826:	b005      	add	sp, #20
   41828:	bd30      	pop	{r4, r5, pc}

0004182a <nrf_getsockopt>:
   4182a:	b530      	push	{r4, r5, lr}
   4182c:	b085      	sub	sp, #20
   4182e:	4604      	mov	r4, r0
   41830:	e9cd 2102 	strd	r2, r1, [sp, #8]
   41834:	9d08      	ldr	r5, [sp, #32]
   41836:	9301      	str	r3, [sp, #4]
   41838:	f7f4 fefc 	bl	36634 <nrf_modem_platform_fd_method_table_get>
   4183c:	b150      	cbz	r0, 41854 <nrf_getsockopt+0x2a>
   4183e:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   41842:	9508      	str	r5, [sp, #32]
   41844:	6a45      	ldr	r5, [r0, #36]	; 0x24
   41846:	4620      	mov	r0, r4
   41848:	46ac      	mov	ip, r5
   4184a:	9903      	ldr	r1, [sp, #12]
   4184c:	b005      	add	sp, #20
   4184e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   41852:	4760      	bx	ip
   41854:	f04f 30ff 	mov.w	r0, #4294967295
   41858:	b005      	add	sp, #20
   4185a:	bd30      	pop	{r4, r5, pc}

0004185c <nrf_getaddrinfo>:
   4185c:	f7ff befb 	b.w	41656 <nrf_modem_platform_getaddrinfo>

00041860 <nrf_freeaddrinfo>:
   41860:	f7ff befb 	b.w	4165a <nrf_modem_platform_freeaddrinfo>

00041864 <nrf_poll>:
   41864:	f7ff befb 	b.w	4165e <nrf_modem_platform_poll>

00041868 <nrf_fcntl>:
   41868:	f7f4 bf14 	b.w	36694 <nrf_modem_platform_fcntl>

0004186c <linked_list_init>:
   4186c:	b128      	cbz	r0, 4187a <linked_list_init+0xe>
   4186e:	2300      	movs	r3, #0
   41870:	e9c0 3301 	strd	r3, r3, [r0, #4]
   41874:	6003      	str	r3, [r0, #0]
   41876:	4618      	mov	r0, r3
   41878:	4770      	bx	lr
   4187a:	2016      	movs	r0, #22
   4187c:	4770      	bx	lr

0004187e <linked_list_push>:
   4187e:	6803      	ldr	r3, [r0, #0]
   41880:	3301      	adds	r3, #1
   41882:	d00d      	beq.n	418a0 <linked_list_push+0x22>
   41884:	2300      	movs	r3, #0
   41886:	600b      	str	r3, [r1, #0]
   41888:	6803      	ldr	r3, [r0, #0]
   4188a:	b933      	cbnz	r3, 4189a <linked_list_push+0x1c>
   4188c:	6041      	str	r1, [r0, #4]
   4188e:	6803      	ldr	r3, [r0, #0]
   41890:	6081      	str	r1, [r0, #8]
   41892:	3301      	adds	r3, #1
   41894:	6003      	str	r3, [r0, #0]
   41896:	2000      	movs	r0, #0
   41898:	4770      	bx	lr
   4189a:	6883      	ldr	r3, [r0, #8]
   4189c:	6019      	str	r1, [r3, #0]
   4189e:	e7f6      	b.n	4188e <linked_list_push+0x10>
   418a0:	200c      	movs	r0, #12
   418a2:	4770      	bx	lr

000418a4 <linked_list_pop>:
   418a4:	4603      	mov	r3, r0
   418a6:	6800      	ldr	r0, [r0, #0]
   418a8:	b128      	cbz	r0, 418b6 <linked_list_pop+0x12>
   418aa:	6858      	ldr	r0, [r3, #4]
   418ac:	6802      	ldr	r2, [r0, #0]
   418ae:	605a      	str	r2, [r3, #4]
   418b0:	681a      	ldr	r2, [r3, #0]
   418b2:	3a01      	subs	r2, #1
   418b4:	601a      	str	r2, [r3, #0]
   418b6:	4770      	bx	lr

000418b8 <linked_list_peek>:
   418b8:	6803      	ldr	r3, [r0, #0]
   418ba:	b10b      	cbz	r3, 418c0 <linked_list_peek+0x8>
   418bc:	6840      	ldr	r0, [r0, #4]
   418be:	4770      	bx	lr
   418c0:	4618      	mov	r0, r3
   418c2:	4770      	bx	lr

000418c4 <linked_list_size_get>:
   418c4:	6800      	ldr	r0, [r0, #0]
   418c6:	4770      	bx	lr

000418c8 <linked_list_get_next>:
   418c8:	6800      	ldr	r0, [r0, #0]
   418ca:	4770      	bx	lr

000418cc <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   418cc:	4700      	bx	r0

000418ce <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   418ce:	f000 b89d 	b.w	41a0c <z_impl_k_busy_wait>

000418d2 <nrfx_nvmc_flash_size_get>:
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   418d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   418d6:	4770      	bx	lr

000418d8 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   418d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   418dc:	4770      	bx	lr

000418de <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   418de:	f44f 7080 	mov.w	r0, #256	; 0x100
   418e2:	4770      	bx	lr

000418e4 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
   418e4:	f7fc bb85 	b.w	3dff2 <z_clock_idle_exit>

000418e8 <k_heap_init>:
{
   418e8:	b410      	push	{r4}
   418ea:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   418ee:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   418f2:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   418f6:	f7e1 bdd1 	b.w	2349c <sys_heap_init>

000418fa <z_impl_k_mutex_init>:
	mutex->owner = NULL;
   418fa:	2300      	movs	r3, #0
   418fc:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
   41900:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
   41904:	4618      	mov	r0, r3
   41906:	4770      	bx	lr

00041908 <z_queue_node_peek>:
{
   41908:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   4190a:	4604      	mov	r4, r0
   4190c:	b130      	cbz	r0, 4191c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   4190e:	6802      	ldr	r2, [r0, #0]
   41910:	0793      	lsls	r3, r2, #30
   41912:	d003      	beq.n	4191c <z_queue_node_peek+0x14>
		ret = anode->data;
   41914:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   41916:	b109      	cbz	r1, 4191c <z_queue_node_peek+0x14>
			k_free(anode);
   41918:	f000 f97e 	bl	41c18 <k_free>
}
   4191c:	4620      	mov	r0, r4
   4191e:	bd10      	pop	{r4, pc}

00041920 <z_impl_k_queue_init>:
	list->head = NULL;
   41920:	2300      	movs	r3, #0
	list->tail = NULL;
   41922:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   41926:	6083      	str	r3, [r0, #8]
   41928:	f100 030c 	add.w	r3, r0, #12
   4192c:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   41930:	f100 0314 	add.w	r3, r0, #20
   41934:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   41938:	4770      	bx	lr

0004193a <k_queue_append>:
	(void)queue_insert(queue, NULL, data, false, true);
   4193a:	2301      	movs	r3, #1
{
   4193c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   4193e:	9300      	str	r3, [sp, #0]
   41940:	2300      	movs	r3, #0
{
   41942:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   41944:	4619      	mov	r1, r3
   41946:	f7f6 f989 	bl	37c5c <queue_insert>
}
   4194a:	b003      	add	sp, #12
   4194c:	f85d fb04 	ldr.w	pc, [sp], #4

00041950 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   41950:	f990 000e 	ldrsb.w	r0, [r0, #14]
   41954:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   41958:	4298      	cmp	r0, r3
   4195a:	bfac      	ite	ge
   4195c:	2000      	movge	r0, #0
   4195e:	2001      	movlt	r0, #1
   41960:	4770      	bx	lr

00041962 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   41962:	4603      	mov	r3, r0
   41964:	b920      	cbnz	r0, 41970 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   41966:	f3ef 8205 	mrs	r2, IPSR
   4196a:	b90a      	cbnz	r2, 41970 <z_reschedule_irqlock+0xe>
   4196c:	f7e4 bd44 	b.w	263f8 <arch_swap>
   41970:	f383 8811 	msr	BASEPRI, r3
   41974:	f3bf 8f6f 	isb	sy
}
   41978:	4770      	bx	lr

0004197a <z_reschedule_unlocked>:
	__asm__ volatile(
   4197a:	f04f 0320 	mov.w	r3, #32
   4197e:	f3ef 8011 	mrs	r0, BASEPRI
   41982:	f383 8811 	msr	BASEPRI, r3
   41986:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   4198a:	f7ff bfea 	b.w	41962 <z_reschedule_irqlock>

0004198e <unpend_thread_no_timeout>:
{
   4198e:	b510      	push	{r4, lr}
   41990:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   41992:	3008      	adds	r0, #8
   41994:	f7f6 fa6c 	bl	37e70 <pended_on.isra.0>
   41998:	4621      	mov	r1, r4
   4199a:	f7f6 fbb3 	bl	38104 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   4199e:	7b63      	ldrb	r3, [r4, #13]
   419a0:	f023 0302 	bic.w	r3, r3, #2
   419a4:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   419a6:	2300      	movs	r3, #0
   419a8:	60a3      	str	r3, [r4, #8]
}
   419aa:	bd10      	pop	{r4, pc}

000419ac <z_priq_dumb_best>:
	return list->head == list;
   419ac:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   419ae:	4298      	cmp	r0, r3
   419b0:	d004      	beq.n	419bc <z_priq_dumb_best+0x10>
	if (n != NULL) {
   419b2:	2b00      	cmp	r3, #0
   419b4:	bf38      	it	cc
   419b6:	2300      	movcc	r3, #0
   419b8:	4618      	mov	r0, r3
   419ba:	4770      	bx	lr
	struct k_thread *thread = NULL;
   419bc:	2000      	movs	r0, #0
}
   419be:	4770      	bx	lr

000419c0 <z_unpend_all>:
{
   419c0:	b538      	push	{r3, r4, r5, lr}
   419c2:	4605      	mov	r5, r0
	int need_sched = 0;
   419c4:	2000      	movs	r0, #0
	return list->head == list;
   419c6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   419c8:	42a5      	cmp	r5, r4
   419ca:	d000      	beq.n	419ce <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   419cc:	b904      	cbnz	r4, 419d0 <z_unpend_all+0x10>
}
   419ce:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   419d0:	4620      	mov	r0, r4
   419d2:	f7f6 fbc5 	bl	38160 <z_unpend_thread>
		z_ready_thread(thread);
   419d6:	4620      	mov	r0, r4
   419d8:	f7f6 fd1e 	bl	38418 <z_ready_thread>
		need_sched = 1;
   419dc:	2001      	movs	r0, #1
   419de:	e7f2      	b.n	419c6 <z_unpend_all+0x6>

000419e0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   419e0:	b15a      	cbz	r2, 419fa <z_impl_k_sem_init+0x1a>
   419e2:	428a      	cmp	r2, r1
   419e4:	d309      	bcc.n	419fa <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   419e6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   419ea:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   419ee:	e9c0 0000 	strd	r0, r0, [r0]
   419f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   419f6:	2000      	movs	r0, #0
   419f8:	4770      	bx	lr
		return -EINVAL;
   419fa:	f06f 0015 	mvn.w	r0, #21
}
   419fe:	4770      	bx	lr

00041a00 <k_is_in_isr>:
   41a00:	f3ef 8005 	mrs	r0, IPSR
}
   41a04:	3800      	subs	r0, #0
   41a06:	bf18      	it	ne
   41a08:	2001      	movne	r0, #1
   41a0a:	4770      	bx	lr

00041a0c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   41a0c:	b108      	cbz	r0, 41a12 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   41a0e:	f7e2 bcef 	b.w	243f0 <arch_busy_wait>
}
   41a12:	4770      	bx	lr

00041a14 <z_impl_k_thread_name_set>:
}
   41a14:	f06f 0057 	mvn.w	r0, #87	; 0x57
   41a18:	4770      	bx	lr

00041a1a <k_thread_name_get>:
}
   41a1a:	2000      	movs	r0, #0
   41a1c:	4770      	bx	lr

00041a1e <k_work_submit_to_queue>:
{
   41a1e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   41a20:	f101 0308 	add.w	r3, r1, #8
   41a24:	e8d3 2fef 	ldaex	r2, [r3]
   41a28:	f042 0c01 	orr.w	ip, r2, #1
   41a2c:	e8c3 cfee 	stlex	lr, ip, [r3]
   41a30:	f1be 0f00 	cmp.w	lr, #0
   41a34:	d1f6      	bne.n	41a24 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   41a36:	07d3      	lsls	r3, r2, #31
   41a38:	d403      	bmi.n	41a42 <k_work_submit_to_queue+0x24>
}
   41a3a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   41a3e:	f7ff bf7c 	b.w	4193a <k_queue_append>
}
   41a42:	f85d fb04 	ldr.w	pc, [sp], #4

00041a46 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   41a46:	f1a0 0110 	sub.w	r1, r0, #16
   41a4a:	6980      	ldr	r0, [r0, #24]
   41a4c:	f7ff bfe7 	b.w	41a1e <k_work_submit_to_queue>

00041a50 <work_cancel>:
{
   41a50:	b570      	push	{r4, r5, r6, lr}
   41a52:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   41a54:	f100 0508 	add.w	r5, r0, #8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   41a58:	e8d5 3faf 	lda	r3, [r5]
	if (k_work_pending(&work->work)) {
   41a5c:	07db      	lsls	r3, r3, #31
   41a5e:	d52f      	bpl.n	41ac0 <work_cancel+0x70>
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   41a60:	2100      	movs	r1, #0
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   41a62:	6a82      	ldr	r2, [r0, #40]	; 0x28
   41a64:	6813      	ldr	r3, [r2, #0]
   41a66:	b913      	cbnz	r3, 41a6e <work_cancel+0x1e>
			return -EINVAL;
   41a68:	f06f 0015 	mvn.w	r0, #21
}
   41a6c:	bd70      	pop	{r4, r5, r6, pc}
   41a6e:	429c      	cmp	r4, r3
   41a70:	d121      	bne.n	41ab6 <work_cancel+0x66>
Z_GENLIST_REMOVE(sflist, sfnode)
   41a72:	6823      	ldr	r3, [r4, #0]
   41a74:	6856      	ldr	r6, [r2, #4]
   41a76:	f023 0003 	bic.w	r0, r3, #3
   41a7a:	b991      	cbnz	r1, 41aa2 <work_cancel+0x52>
   41a7c:	42b4      	cmp	r4, r6
	list->head = node;
   41a7e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   41a80:	d100      	bne.n	41a84 <work_cancel+0x34>
	list->tail = node;
   41a82:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   41a84:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   41a86:	f003 0303 	and.w	r3, r3, #3
   41a8a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   41a8c:	2000      	movs	r0, #0
   41a8e:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   41a90:	e8d5 3fef 	ldaex	r3, [r5]
   41a94:	f023 0301 	bic.w	r3, r3, #1
   41a98:	e8c5 3fe2 	stlex	r2, r3, [r5]
   41a9c:	2a00      	cmp	r2, #0
   41a9e:	d0e5      	beq.n	41a6c <work_cancel+0x1c>
   41aa0:	e7f6      	b.n	41a90 <work_cancel+0x40>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   41aa2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   41aa4:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   41aa6:	f003 0303 	and.w	r3, r3, #3
   41aaa:	ea43 0300 	orr.w	r3, r3, r0
   41aae:	600b      	str	r3, [r1, #0]
	list->tail = node;
   41ab0:	bf08      	it	eq
   41ab2:	6051      	streq	r1, [r2, #4]
}
   41ab4:	e7e6      	b.n	41a84 <work_cancel+0x34>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   41ab6:	6818      	ldr	r0, [r3, #0]
   41ab8:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   41aba:	f020 0303 	bic.w	r3, r0, #3
   41abe:	e7d2      	b.n	41a66 <work_cancel+0x16>
		int err = z_abort_timeout(&work->timeout);
   41ac0:	3010      	adds	r0, #16
   41ac2:	f7f8 f911 	bl	39ce8 <z_abort_timeout>
		if (err) {
   41ac6:	2800      	cmp	r0, #0
   41ac8:	d0e0      	beq.n	41a8c <work_cancel+0x3c>
			return -EALREADY;
   41aca:	f06f 0077 	mvn.w	r0, #119	; 0x77
   41ace:	e7cd      	b.n	41a6c <work_cancel+0x1c>

00041ad0 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   41ad0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   41ad2:	f7f8 fb05 	bl	3a0e0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   41ad6:	bd08      	pop	{r3, pc}

00041ad8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   41ad8:	f7f8 bb02 	b.w	3a0e0 <z_tick_get>

00041adc <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   41adc:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41ade:	1c4b      	adds	r3, r1, #1
   41ae0:	bf08      	it	eq
   41ae2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   41ae6:	4604      	mov	r4, r0
   41ae8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   41aea:	d013      	beq.n	41b14 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   41aec:	ea54 0105 	orrs.w	r1, r4, r5
   41af0:	d103      	bne.n	41afa <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   41af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   41af6:	f7f8 baf3 	b.w	3a0e0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   41afa:	f06f 0101 	mvn.w	r1, #1
   41afe:	1a0a      	subs	r2, r1, r0
   41b00:	f04f 31ff 	mov.w	r1, #4294967295
   41b04:	eb61 0305 	sbc.w	r3, r1, r5
   41b08:	2a00      	cmp	r2, #0
   41b0a:	f173 0100 	sbcs.w	r1, r3, #0
   41b0e:	db02      	blt.n	41b16 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   41b10:	4610      	mov	r0, r2
   41b12:	4619      	mov	r1, r3
}
   41b14:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   41b16:	f7f8 fae3 	bl	3a0e0 <z_tick_get>
   41b1a:	2c01      	cmp	r4, #1
   41b1c:	f175 0300 	sbcs.w	r3, r5, #0
   41b20:	bfbc      	itt	lt
   41b22:	2401      	movlt	r4, #1
   41b24:	2500      	movlt	r5, #0
   41b26:	1820      	adds	r0, r4, r0
   41b28:	eb45 0101 	adc.w	r1, r5, r1
   41b2c:	e7f2      	b.n	41b14 <z_timeout_end_calc+0x38>

00041b2e <k_work_submit_to_queue>:
{
   41b2e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   41b30:	f101 0308 	add.w	r3, r1, #8
   41b34:	e8d3 2fef 	ldaex	r2, [r3]
   41b38:	f042 0c01 	orr.w	ip, r2, #1
   41b3c:	e8c3 cfee 	stlex	lr, ip, [r3]
   41b40:	f1be 0f00 	cmp.w	lr, #0
   41b44:	d1f6      	bne.n	41b34 <k_work_submit_to_queue+0x6>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   41b46:	07d3      	lsls	r3, r2, #31
   41b48:	d403      	bmi.n	41b52 <k_work_submit_to_queue+0x24>
}
   41b4a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   41b4e:	f7ff bef4 	b.w	4193a <k_queue_append>
}
   41b52:	f85d fb04 	ldr.w	pc, [sp], #4

00041b56 <add_event>:
{
   41b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41b58:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   41b5a:	e9d0 2300 	ldrd	r2, r3, [r0]
   41b5e:	4290      	cmp	r0, r2
   41b60:	4604      	mov	r4, r0
   41b62:	460d      	mov	r5, r1
   41b64:	d106      	bne.n	41b74 <add_event+0x1e>
	node->prev = list->tail;
   41b66:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   41b68:	602c      	str	r4, [r5, #0]
	node->prev = list->tail;
   41b6a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   41b6c:	6863      	ldr	r3, [r4, #4]
   41b6e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   41b70:	6065      	str	r5, [r4, #4]
}
   41b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   41b74:	2b00      	cmp	r3, #0
   41b76:	d0f6      	beq.n	41b66 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   41b78:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   41b7a:	b100      	cbz	r0, 41b7e <add_event+0x28>
   41b7c:	386c      	subs	r0, #108	; 0x6c
   41b7e:	b107      	cbz	r7, 41b82 <add_event+0x2c>
   41b80:	3f6c      	subs	r7, #108	; 0x6c
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   41b82:	4639      	mov	r1, r7
   41b84:	f7ff fee4 	bl	41950 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   41b88:	2800      	cmp	r0, #0
   41b8a:	d1ec      	bne.n	41b66 <add_event+0x10>
	return list->head == list;
   41b8c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   41b8e:	42b4      	cmp	r4, r6
   41b90:	d0e9      	beq.n	41b66 <add_event+0x10>
   41b92:	2e00      	cmp	r6, #0
   41b94:	bf38      	it	cc
   41b96:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   41b98:	2e00      	cmp	r6, #0
   41b9a:	d0e4      	beq.n	41b66 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   41b9c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   41b9e:	b101      	cbz	r1, 41ba2 <add_event+0x4c>
   41ba0:	396c      	subs	r1, #108	; 0x6c
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   41ba2:	4638      	mov	r0, r7
   41ba4:	f7ff fed4 	bl	41950 <z_is_t1_higher_prio_than_t2>
   41ba8:	b128      	cbz	r0, 41bb6 <add_event+0x60>
	node->prev = successor->prev;
   41baa:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   41bac:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   41bb0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   41bb2:	6075      	str	r5, [r6, #4]
			return;
   41bb4:	e7dd      	b.n	41b72 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   41bb6:	6863      	ldr	r3, [r4, #4]
   41bb8:	42b3      	cmp	r3, r6
   41bba:	d0d4      	beq.n	41b66 <add_event+0x10>
   41bbc:	6836      	ldr	r6, [r6, #0]
   41bbe:	e7eb      	b.n	41b98 <add_event+0x42>

00041bc0 <z_handle_obj_poll_events>:
{
   41bc0:	4603      	mov	r3, r0
	return list->head == list;
   41bc2:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   41bc4:	4283      	cmp	r3, r0
   41bc6:	d008      	beq.n	41bda <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   41bc8:	e9d0 3200 	ldrd	r3, r2, [r0]
   41bcc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   41bce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   41bd0:	2300      	movs	r3, #0
	node->prev = NULL;
   41bd2:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   41bd6:	f7f8 bb8b 	b.w	3a2f0 <signal_poll_event>
}
   41bda:	4770      	bx	lr

00041bdc <z_heap_aligned_alloc>:
	size_t excess = MAX(sizeof(struct k_heap *), align);
   41bdc:	2904      	cmp	r1, #4
{
   41bde:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
	size_t excess = MAX(sizeof(struct k_heap *), align);
   41be2:	460d      	mov	r5, r1
   41be4:	bf38      	it	cc
   41be6:	2504      	movcc	r5, #4
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   41be8:	18aa      	adds	r2, r5, r2
{
   41bea:	4606      	mov	r6, r0
   41bec:	d209      	bcs.n	41c02 <z_heap_aligned_alloc+0x26>
	mem = k_heap_aligned_alloc(heap, align, size, K_NO_WAIT);
   41bee:	f04f 0800 	mov.w	r8, #0
   41bf2:	f04f 0900 	mov.w	r9, #0
   41bf6:	e9cd 8900 	strd	r8, r9, [sp]
   41bfa:	f7f5 fbdb 	bl	373b4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   41bfe:	4604      	mov	r4, r0
   41c00:	b918      	cbnz	r0, 41c0a <z_heap_aligned_alloc+0x2e>
		return NULL;
   41c02:	2000      	movs	r0, #0
}
   41c04:	b002      	add	sp, #8
   41c06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
   41c0a:	462a      	mov	r2, r5
   41c0c:	21ff      	movs	r1, #255	; 0xff
   41c0e:	f000 f866 	bl	41cde <memset>
	*heap_ref = heap;
   41c12:	6026      	str	r6, [r4, #0]
	return mem + excess;
   41c14:	1960      	adds	r0, r4, r5
   41c16:	e7f5      	b.n	41c04 <z_heap_aligned_alloc+0x28>

00041c18 <k_free>:
	if (ptr != NULL) {
   41c18:	b138      	cbz	r0, 41c2a <k_free+0x12>
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   41c1a:	1f03      	subs	r3, r0, #4
   41c1c:	4619      	mov	r1, r3
			*heap_ref == (struct k_heap *)-1; --heap_ref) {
   41c1e:	f853 0904 	ldr.w	r0, [r3], #-4
		for (heap_ref = &((struct k_heap **)ptr)[-1];
   41c22:	1c42      	adds	r2, r0, #1
   41c24:	d0fa      	beq.n	41c1c <k_free+0x4>
		k_heap_free(*heap_ref, ptr);
   41c26:	f7f5 bc73 	b.w	37510 <k_heap_free>
}
   41c2a:	4770      	bx	lr

00041c2c <k_calloc>:
{
   41c2c:	b513      	push	{r0, r1, r4, lr}
	return a != 0 && (c / a) != b;
}

static inline bool size_mul_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a * b;
   41c2e:	fb01 f200 	mul.w	r2, r1, r0

	*result = c;

	return a != 0 && (c / a) != b;
   41c32:	b118      	cbz	r0, 41c3c <k_calloc+0x10>
   41c34:	fbb2 f0f0 	udiv	r0, r2, r0
   41c38:	4281      	cmp	r1, r0
   41c3a:	d10d      	bne.n	41c58 <k_calloc+0x2c>
	return k_aligned_alloc(sizeof(void *), size);
   41c3c:	4611      	mov	r1, r2
   41c3e:	2004      	movs	r0, #4
   41c40:	9201      	str	r2, [sp, #4]
   41c42:	f7f8 fe37 	bl	3a8b4 <k_aligned_alloc>
	if (ret != NULL) {
   41c46:	4604      	mov	r4, r0
   41c48:	b118      	cbz	r0, 41c52 <k_calloc+0x26>
   41c4a:	2100      	movs	r1, #0
   41c4c:	9a01      	ldr	r2, [sp, #4]
   41c4e:	f000 f846 	bl	41cde <memset>
}
   41c52:	4620      	mov	r0, r4
   41c54:	b002      	add	sp, #8
   41c56:	bd10      	pop	{r4, pc}
		return NULL;
   41c58:	2400      	movs	r4, #0
   41c5a:	e7fa      	b.n	41c52 <k_calloc+0x26>

00041c5c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   41c5c:	4770      	bx	lr

00041c5e <atoi>:
   41c5e:	220a      	movs	r2, #10
   41c60:	2100      	movs	r1, #0
   41c62:	f7f9 bd47 	b.w	3b6f4 <strtol>

00041c66 <memchr>:
   41c66:	b2c9      	uxtb	r1, r1
   41c68:	4402      	add	r2, r0
   41c6a:	b510      	push	{r4, lr}
   41c6c:	4290      	cmp	r0, r2
   41c6e:	4603      	mov	r3, r0
   41c70:	d101      	bne.n	41c76 <memchr+0x10>
   41c72:	2300      	movs	r3, #0
   41c74:	e003      	b.n	41c7e <memchr+0x18>
   41c76:	781c      	ldrb	r4, [r3, #0]
   41c78:	3001      	adds	r0, #1
   41c7a:	428c      	cmp	r4, r1
   41c7c:	d1f6      	bne.n	41c6c <memchr+0x6>
   41c7e:	4618      	mov	r0, r3
   41c80:	bd10      	pop	{r4, pc}

00041c82 <memcmp>:
   41c82:	b530      	push	{r4, r5, lr}
   41c84:	3901      	subs	r1, #1
   41c86:	2400      	movs	r4, #0
   41c88:	42a2      	cmp	r2, r4
   41c8a:	d101      	bne.n	41c90 <memcmp+0xe>
   41c8c:	2000      	movs	r0, #0
   41c8e:	e005      	b.n	41c9c <memcmp+0x1a>
   41c90:	5d03      	ldrb	r3, [r0, r4]
   41c92:	3401      	adds	r4, #1
   41c94:	5d0d      	ldrb	r5, [r1, r4]
   41c96:	42ab      	cmp	r3, r5
   41c98:	d0f6      	beq.n	41c88 <memcmp+0x6>
   41c9a:	1b58      	subs	r0, r3, r5
   41c9c:	bd30      	pop	{r4, r5, pc}

00041c9e <memcpy>:
   41c9e:	440a      	add	r2, r1
   41ca0:	1e43      	subs	r3, r0, #1
   41ca2:	4291      	cmp	r1, r2
   41ca4:	d100      	bne.n	41ca8 <memcpy+0xa>
   41ca6:	4770      	bx	lr
   41ca8:	b510      	push	{r4, lr}
   41caa:	f811 4b01 	ldrb.w	r4, [r1], #1
   41cae:	4291      	cmp	r1, r2
   41cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
   41cb4:	d1f9      	bne.n	41caa <memcpy+0xc>
   41cb6:	bd10      	pop	{r4, pc}

00041cb8 <__memcpy_chk>:
   41cb8:	429a      	cmp	r2, r3
   41cba:	b508      	push	{r3, lr}
   41cbc:	d901      	bls.n	41cc2 <__memcpy_chk+0xa>
   41cbe:	f7e5 fb17 	bl	272f0 <__chk_fail>
   41cc2:	4281      	cmp	r1, r0
   41cc4:	d804      	bhi.n	41cd0 <__memcpy_chk+0x18>
   41cc6:	188b      	adds	r3, r1, r2
   41cc8:	4298      	cmp	r0, r3
   41cca:	d3f8      	bcc.n	41cbe <__memcpy_chk+0x6>
   41ccc:	4281      	cmp	r1, r0
   41cce:	d102      	bne.n	41cd6 <__memcpy_chk+0x1e>
   41cd0:	1883      	adds	r3, r0, r2
   41cd2:	4299      	cmp	r1, r3
   41cd4:	d3f3      	bcc.n	41cbe <__memcpy_chk+0x6>
   41cd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   41cda:	f7ff bfe0 	b.w	41c9e <memcpy>

00041cde <memset>:
   41cde:	4402      	add	r2, r0
   41ce0:	4603      	mov	r3, r0
   41ce2:	4293      	cmp	r3, r2
   41ce4:	d100      	bne.n	41ce8 <memset+0xa>
   41ce6:	4770      	bx	lr
   41ce8:	f803 1b01 	strb.w	r1, [r3], #1
   41cec:	e7f9      	b.n	41ce2 <memset+0x4>

00041cee <__memset_chk>:
   41cee:	429a      	cmp	r2, r3
   41cf0:	b508      	push	{r3, lr}
   41cf2:	d901      	bls.n	41cf8 <__memset_chk+0xa>
   41cf4:	f7e5 fafc 	bl	272f0 <__chk_fail>
   41cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   41cfc:	f7ff bfef 	b.w	41cde <memset>

00041d00 <__sfputc_r>:
   41d00:	6893      	ldr	r3, [r2, #8]
   41d02:	3b01      	subs	r3, #1
   41d04:	2b00      	cmp	r3, #0
   41d06:	6093      	str	r3, [r2, #8]
   41d08:	b410      	push	{r4}
   41d0a:	da08      	bge.n	41d1e <__sfputc_r+0x1e>
   41d0c:	6994      	ldr	r4, [r2, #24]
   41d0e:	42a3      	cmp	r3, r4
   41d10:	db01      	blt.n	41d16 <__sfputc_r+0x16>
   41d12:	290a      	cmp	r1, #10
   41d14:	d103      	bne.n	41d1e <__sfputc_r+0x1e>
   41d16:	f85d 4b04 	ldr.w	r4, [sp], #4
   41d1a:	f7f9 bda7 	b.w	3b86c <__swbuf_r>
   41d1e:	6813      	ldr	r3, [r2, #0]
   41d20:	1c58      	adds	r0, r3, #1
   41d22:	6010      	str	r0, [r2, #0]
   41d24:	4608      	mov	r0, r1
   41d26:	7019      	strb	r1, [r3, #0]
   41d28:	f85d 4b04 	ldr.w	r4, [sp], #4
   41d2c:	4770      	bx	lr

00041d2e <__sfputs_r>:
   41d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   41d30:	4606      	mov	r6, r0
   41d32:	460f      	mov	r7, r1
   41d34:	4614      	mov	r4, r2
   41d36:	18d5      	adds	r5, r2, r3
   41d38:	42ac      	cmp	r4, r5
   41d3a:	d101      	bne.n	41d40 <__sfputs_r+0x12>
   41d3c:	2000      	movs	r0, #0
   41d3e:	e007      	b.n	41d50 <__sfputs_r+0x22>
   41d40:	463a      	mov	r2, r7
   41d42:	f814 1b01 	ldrb.w	r1, [r4], #1
   41d46:	4630      	mov	r0, r6
   41d48:	f7ff ffda 	bl	41d00 <__sfputc_r>
   41d4c:	1c43      	adds	r3, r0, #1
   41d4e:	d1f3      	bne.n	41d38 <__sfputs_r+0xa>
   41d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00041d52 <__cvt>:
   41d52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   41d56:	ec55 4b10 	vmov	r4, r5, d0
   41d5a:	2d00      	cmp	r5, #0
   41d5c:	460e      	mov	r6, r1
   41d5e:	4619      	mov	r1, r3
   41d60:	462b      	mov	r3, r5
   41d62:	bfb4      	ite	lt
   41d64:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
   41d68:	2300      	movge	r3, #0
   41d6a:	4691      	mov	r9, r2
   41d6c:	bfbf      	itttt	lt
   41d6e:	4622      	movlt	r2, r4
   41d70:	461d      	movlt	r5, r3
   41d72:	232d      	movlt	r3, #45	; 0x2d
   41d74:	4614      	movlt	r4, r2
   41d76:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   41d7a:	700b      	strb	r3, [r1, #0]
   41d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   41d7e:	f023 0820 	bic.w	r8, r3, #32
   41d82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   41d86:	d005      	beq.n	41d94 <__cvt+0x42>
   41d88:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   41d8c:	d100      	bne.n	41d90 <__cvt+0x3e>
   41d8e:	3601      	adds	r6, #1
   41d90:	2102      	movs	r1, #2
   41d92:	e000      	b.n	41d96 <__cvt+0x44>
   41d94:	2103      	movs	r1, #3
   41d96:	ab03      	add	r3, sp, #12
   41d98:	4632      	mov	r2, r6
   41d9a:	9301      	str	r3, [sp, #4]
   41d9c:	ab02      	add	r3, sp, #8
   41d9e:	ec45 4b10 	vmov	d0, r4, r5
   41da2:	9300      	str	r3, [sp, #0]
   41da4:	4653      	mov	r3, sl
   41da6:	f7dd f8d3 	bl	1ef50 <_dtoa_r>
   41daa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   41dae:	4607      	mov	r7, r0
   41db0:	d102      	bne.n	41db8 <__cvt+0x66>
   41db2:	f019 0f01 	tst.w	r9, #1
   41db6:	d022      	beq.n	41dfe <__cvt+0xac>
   41db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   41dbc:	eb07 0906 	add.w	r9, r7, r6
   41dc0:	d110      	bne.n	41de4 <__cvt+0x92>
   41dc2:	783b      	ldrb	r3, [r7, #0]
   41dc4:	2b30      	cmp	r3, #48	; 0x30
   41dc6:	d10a      	bne.n	41dde <__cvt+0x8c>
   41dc8:	2200      	movs	r2, #0
   41dca:	2300      	movs	r3, #0
   41dcc:	4620      	mov	r0, r4
   41dce:	4629      	mov	r1, r5
   41dd0:	f7da ff5a 	bl	1cc88 <__aeabi_dcmpeq>
   41dd4:	b918      	cbnz	r0, 41dde <__cvt+0x8c>
   41dd6:	f1c6 0601 	rsb	r6, r6, #1
   41dda:	f8ca 6000 	str.w	r6, [sl]
   41dde:	f8da 3000 	ldr.w	r3, [sl]
   41de2:	4499      	add	r9, r3
   41de4:	2200      	movs	r2, #0
   41de6:	2300      	movs	r3, #0
   41de8:	4620      	mov	r0, r4
   41dea:	4629      	mov	r1, r5
   41dec:	f7da ff4c 	bl	1cc88 <__aeabi_dcmpeq>
   41df0:	b108      	cbz	r0, 41df6 <__cvt+0xa4>
   41df2:	f8cd 900c 	str.w	r9, [sp, #12]
   41df6:	2230      	movs	r2, #48	; 0x30
   41df8:	9b03      	ldr	r3, [sp, #12]
   41dfa:	454b      	cmp	r3, r9
   41dfc:	d307      	bcc.n	41e0e <__cvt+0xbc>
   41dfe:	9b03      	ldr	r3, [sp, #12]
   41e00:	4638      	mov	r0, r7
   41e02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   41e04:	1bdb      	subs	r3, r3, r7
   41e06:	6013      	str	r3, [r2, #0]
   41e08:	b004      	add	sp, #16
   41e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41e0e:	1c59      	adds	r1, r3, #1
   41e10:	9103      	str	r1, [sp, #12]
   41e12:	701a      	strb	r2, [r3, #0]
   41e14:	e7f0      	b.n	41df8 <__cvt+0xa6>

00041e16 <__exponent>:
   41e16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   41e18:	2900      	cmp	r1, #0
   41e1a:	4603      	mov	r3, r0
   41e1c:	bfb8      	it	lt
   41e1e:	4249      	neglt	r1, r1
   41e20:	f803 2b02 	strb.w	r2, [r3], #2
   41e24:	bfb4      	ite	lt
   41e26:	222d      	movlt	r2, #45	; 0x2d
   41e28:	222b      	movge	r2, #43	; 0x2b
   41e2a:	2909      	cmp	r1, #9
   41e2c:	7042      	strb	r2, [r0, #1]
   41e2e:	dd2a      	ble.n	41e86 <__exponent+0x70>
   41e30:	f10d 0407 	add.w	r4, sp, #7
   41e34:	270a      	movs	r7, #10
   41e36:	46a4      	mov	ip, r4
   41e38:	460a      	mov	r2, r1
   41e3a:	46a6      	mov	lr, r4
   41e3c:	3c01      	subs	r4, #1
   41e3e:	2a63      	cmp	r2, #99	; 0x63
   41e40:	fb91 f6f7 	sdiv	r6, r1, r7
   41e44:	fb07 1516 	mls	r5, r7, r6, r1
   41e48:	4631      	mov	r1, r6
   41e4a:	f105 0530 	add.w	r5, r5, #48	; 0x30
   41e4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
   41e52:	dcf1      	bgt.n	41e38 <__exponent+0x22>
   41e54:	3130      	adds	r1, #48	; 0x30
   41e56:	f1ae 0502 	sub.w	r5, lr, #2
   41e5a:	f804 1c01 	strb.w	r1, [r4, #-1]
   41e5e:	1c44      	adds	r4, r0, #1
   41e60:	4629      	mov	r1, r5
   41e62:	4561      	cmp	r1, ip
   41e64:	d30a      	bcc.n	41e7c <__exponent+0x66>
   41e66:	f10d 0209 	add.w	r2, sp, #9
   41e6a:	eba2 020e 	sub.w	r2, r2, lr
   41e6e:	4565      	cmp	r5, ip
   41e70:	bf88      	it	hi
   41e72:	2200      	movhi	r2, #0
   41e74:	4413      	add	r3, r2
   41e76:	1a18      	subs	r0, r3, r0
   41e78:	b003      	add	sp, #12
   41e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   41e7c:	f811 2b01 	ldrb.w	r2, [r1], #1
   41e80:	f804 2f01 	strb.w	r2, [r4, #1]!
   41e84:	e7ed      	b.n	41e62 <__exponent+0x4c>
   41e86:	2330      	movs	r3, #48	; 0x30
   41e88:	3130      	adds	r1, #48	; 0x30
   41e8a:	7083      	strb	r3, [r0, #2]
   41e8c:	1d03      	adds	r3, r0, #4
   41e8e:	70c1      	strb	r1, [r0, #3]
   41e90:	e7f1      	b.n	41e76 <__exponent+0x60>

00041e92 <_printf_common>:
   41e92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   41e96:	4616      	mov	r6, r2
   41e98:	4699      	mov	r9, r3
   41e9a:	688a      	ldr	r2, [r1, #8]
   41e9c:	4607      	mov	r7, r0
   41e9e:	690b      	ldr	r3, [r1, #16]
   41ea0:	460c      	mov	r4, r1
   41ea2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   41ea6:	4293      	cmp	r3, r2
   41ea8:	bfb8      	it	lt
   41eaa:	4613      	movlt	r3, r2
   41eac:	6033      	str	r3, [r6, #0]
   41eae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   41eb2:	b10a      	cbz	r2, 41eb8 <_printf_common+0x26>
   41eb4:	3301      	adds	r3, #1
   41eb6:	6033      	str	r3, [r6, #0]
   41eb8:	6823      	ldr	r3, [r4, #0]
   41eba:	0699      	lsls	r1, r3, #26
   41ebc:	bf42      	ittt	mi
   41ebe:	6833      	ldrmi	r3, [r6, #0]
   41ec0:	3302      	addmi	r3, #2
   41ec2:	6033      	strmi	r3, [r6, #0]
   41ec4:	6825      	ldr	r5, [r4, #0]
   41ec6:	f015 0506 	ands.w	r5, r5, #6
   41eca:	d106      	bne.n	41eda <_printf_common+0x48>
   41ecc:	f104 0a19 	add.w	sl, r4, #25
   41ed0:	68e3      	ldr	r3, [r4, #12]
   41ed2:	6832      	ldr	r2, [r6, #0]
   41ed4:	1a9b      	subs	r3, r3, r2
   41ed6:	42ab      	cmp	r3, r5
   41ed8:	dc29      	bgt.n	41f2e <_printf_common+0x9c>
   41eda:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   41ede:	1e13      	subs	r3, r2, #0
   41ee0:	6822      	ldr	r2, [r4, #0]
   41ee2:	bf18      	it	ne
   41ee4:	2301      	movne	r3, #1
   41ee6:	0692      	lsls	r2, r2, #26
   41ee8:	d42e      	bmi.n	41f48 <_printf_common+0xb6>
   41eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
   41eee:	4649      	mov	r1, r9
   41ef0:	4638      	mov	r0, r7
   41ef2:	47c0      	blx	r8
   41ef4:	3001      	adds	r0, #1
   41ef6:	d021      	beq.n	41f3c <_printf_common+0xaa>
   41ef8:	6823      	ldr	r3, [r4, #0]
   41efa:	341a      	adds	r4, #26
   41efc:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   41f00:	f003 0306 	and.w	r3, r3, #6
   41f04:	6832      	ldr	r2, [r6, #0]
   41f06:	2600      	movs	r6, #0
   41f08:	2b04      	cmp	r3, #4
   41f0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
   41f0e:	bf08      	it	eq
   41f10:	1aad      	subeq	r5, r5, r2
   41f12:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   41f16:	bf14      	ite	ne
   41f18:	2500      	movne	r5, #0
   41f1a:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   41f1e:	4293      	cmp	r3, r2
   41f20:	bfc4      	itt	gt
   41f22:	1a9b      	subgt	r3, r3, r2
   41f24:	18ed      	addgt	r5, r5, r3
   41f26:	42b5      	cmp	r5, r6
   41f28:	d11a      	bne.n	41f60 <_printf_common+0xce>
   41f2a:	2000      	movs	r0, #0
   41f2c:	e008      	b.n	41f40 <_printf_common+0xae>
   41f2e:	2301      	movs	r3, #1
   41f30:	4652      	mov	r2, sl
   41f32:	4649      	mov	r1, r9
   41f34:	4638      	mov	r0, r7
   41f36:	47c0      	blx	r8
   41f38:	3001      	adds	r0, #1
   41f3a:	d103      	bne.n	41f44 <_printf_common+0xb2>
   41f3c:	f04f 30ff 	mov.w	r0, #4294967295
   41f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   41f44:	3501      	adds	r5, #1
   41f46:	e7c3      	b.n	41ed0 <_printf_common+0x3e>
   41f48:	18e1      	adds	r1, r4, r3
   41f4a:	1c5a      	adds	r2, r3, #1
   41f4c:	2030      	movs	r0, #48	; 0x30
   41f4e:	3302      	adds	r3, #2
   41f50:	4422      	add	r2, r4
   41f52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   41f56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   41f5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   41f5e:	e7c4      	b.n	41eea <_printf_common+0x58>
   41f60:	2301      	movs	r3, #1
   41f62:	4622      	mov	r2, r4
   41f64:	4649      	mov	r1, r9
   41f66:	4638      	mov	r0, r7
   41f68:	47c0      	blx	r8
   41f6a:	3001      	adds	r0, #1
   41f6c:	d0e6      	beq.n	41f3c <_printf_common+0xaa>
   41f6e:	3601      	adds	r6, #1
   41f70:	e7d9      	b.n	41f26 <_printf_common+0x94>

00041f72 <__sprintf_chk>:
   41f72:	b408      	push	{r3}
   41f74:	b517      	push	{r0, r1, r2, r4, lr}
   41f76:	ab05      	add	r3, sp, #20
   41f78:	1e14      	subs	r4, r2, #0
   41f7a:	f853 1b04 	ldr.w	r1, [r3], #4
   41f7e:	9301      	str	r3, [sp, #4]
   41f80:	da07      	bge.n	41f92 <__sprintf_chk+0x20>
   41f82:	461a      	mov	r2, r3
   41f84:	f7f9 fc68 	bl	3b858 <vsiprintf>
   41f88:	b003      	add	sp, #12
   41f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   41f8e:	b001      	add	sp, #4
   41f90:	4770      	bx	lr
   41f92:	460a      	mov	r2, r1
   41f94:	4621      	mov	r1, r4
   41f96:	f7f9 fc3b 	bl	3b810 <vsniprintf>
   41f9a:	2800      	cmp	r0, #0
   41f9c:	dbf4      	blt.n	41f88 <__sprintf_chk+0x16>
   41f9e:	42a0      	cmp	r0, r4
   41fa0:	d3f2      	bcc.n	41f88 <__sprintf_chk+0x16>
   41fa2:	f7e5 f9a5 	bl	272f0 <__chk_fail>

00041fa6 <__sread>:
   41fa6:	b510      	push	{r4, lr}
   41fa8:	460c      	mov	r4, r1
   41faa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41fae:	f7fa fde3 	bl	3cb78 <_read_r>
   41fb2:	2800      	cmp	r0, #0
   41fb4:	bfab      	itete	ge
   41fb6:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   41fb8:	89a3      	ldrhlt	r3, [r4, #12]
   41fba:	181b      	addge	r3, r3, r0
   41fbc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   41fc0:	bfac      	ite	ge
   41fc2:	6563      	strge	r3, [r4, #84]	; 0x54
   41fc4:	81a3      	strhlt	r3, [r4, #12]
   41fc6:	bd10      	pop	{r4, pc}

00041fc8 <__seofread>:
   41fc8:	2000      	movs	r0, #0
   41fca:	4770      	bx	lr

00041fcc <__swrite>:
   41fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   41fd0:	461f      	mov	r7, r3
   41fd2:	898b      	ldrh	r3, [r1, #12]
   41fd4:	4605      	mov	r5, r0
   41fd6:	460c      	mov	r4, r1
   41fd8:	05db      	lsls	r3, r3, #23
   41fda:	4616      	mov	r6, r2
   41fdc:	d505      	bpl.n	41fea <__swrite+0x1e>
   41fde:	2302      	movs	r3, #2
   41fe0:	2200      	movs	r2, #0
   41fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   41fe6:	f7fa f8db 	bl	3c1a0 <_lseek_r>
   41fea:	89a3      	ldrh	r3, [r4, #12]
   41fec:	4632      	mov	r2, r6
   41fee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   41ff2:	4628      	mov	r0, r5
   41ff4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   41ff8:	81a3      	strh	r3, [r4, #12]
   41ffa:	463b      	mov	r3, r7
   41ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   42000:	f7f9 bc86 	b.w	3b910 <_write_r>

00042004 <__sseek>:
   42004:	b510      	push	{r4, lr}
   42006:	460c      	mov	r4, r1
   42008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4200c:	f7fa f8c8 	bl	3c1a0 <_lseek_r>
   42010:	1c43      	adds	r3, r0, #1
   42012:	89a3      	ldrh	r3, [r4, #12]
   42014:	bf15      	itete	ne
   42016:	6560      	strne	r0, [r4, #84]	; 0x54
   42018:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   4201c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   42020:	81a3      	strheq	r3, [r4, #12]
   42022:	bf18      	it	ne
   42024:	81a3      	strhne	r3, [r4, #12]
   42026:	bd10      	pop	{r4, pc}

00042028 <__sclose>:
   42028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   4202c:	f7f9 bcf0 	b.w	3ba10 <_close_r>

00042030 <strcat>:
   42030:	4602      	mov	r2, r0
   42032:	b510      	push	{r4, lr}
   42034:	7814      	ldrb	r4, [r2, #0]
   42036:	4613      	mov	r3, r2
   42038:	3201      	adds	r2, #1
   4203a:	2c00      	cmp	r4, #0
   4203c:	d1fa      	bne.n	42034 <strcat+0x4>
   4203e:	3b01      	subs	r3, #1
   42040:	f811 2b01 	ldrb.w	r2, [r1], #1
   42044:	f803 2f01 	strb.w	r2, [r3, #1]!
   42048:	2a00      	cmp	r2, #0
   4204a:	d1f9      	bne.n	42040 <strcat+0x10>
   4204c:	bd10      	pop	{r4, pc}

0004204e <strchr>:
   4204e:	b2c9      	uxtb	r1, r1
   42050:	4603      	mov	r3, r0
   42052:	f810 2b01 	ldrb.w	r2, [r0], #1
   42056:	b11a      	cbz	r2, 42060 <strchr+0x12>
   42058:	428a      	cmp	r2, r1
   4205a:	d1f9      	bne.n	42050 <strchr+0x2>
   4205c:	4618      	mov	r0, r3
   4205e:	4770      	bx	lr
   42060:	2900      	cmp	r1, #0
   42062:	bf18      	it	ne
   42064:	2300      	movne	r3, #0
   42066:	e7f9      	b.n	4205c <strchr+0xe>

00042068 <strcpy>:
   42068:	4603      	mov	r3, r0
   4206a:	f811 2b01 	ldrb.w	r2, [r1], #1
   4206e:	f803 2b01 	strb.w	r2, [r3], #1
   42072:	2a00      	cmp	r2, #0
   42074:	d1f9      	bne.n	4206a <strcpy+0x2>
   42076:	4770      	bx	lr

00042078 <__strcpy_chk>:
   42078:	b570      	push	{r4, r5, r6, lr}
   4207a:	4605      	mov	r5, r0
   4207c:	4608      	mov	r0, r1
   4207e:	4616      	mov	r6, r2
   42080:	460c      	mov	r4, r1
   42082:	f7db f8eb 	bl	1d25c <strlen>
   42086:	1c42      	adds	r2, r0, #1
   42088:	42b2      	cmp	r2, r6
   4208a:	d901      	bls.n	42090 <__strcpy_chk+0x18>
   4208c:	f7e5 f930 	bl	272f0 <__chk_fail>
   42090:	42ac      	cmp	r4, r5
   42092:	d804      	bhi.n	4209e <__strcpy_chk+0x26>
   42094:	18a3      	adds	r3, r4, r2
   42096:	429d      	cmp	r5, r3
   42098:	d3f8      	bcc.n	4208c <__strcpy_chk+0x14>
   4209a:	42ac      	cmp	r4, r5
   4209c:	d102      	bne.n	420a4 <__strcpy_chk+0x2c>
   4209e:	18ab      	adds	r3, r5, r2
   420a0:	429c      	cmp	r4, r3
   420a2:	d3f3      	bcc.n	4208c <__strcpy_chk+0x14>
   420a4:	4621      	mov	r1, r4
   420a6:	4628      	mov	r0, r5
   420a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   420ac:	f7ff bdf7 	b.w	41c9e <memcpy>

000420b0 <strncmp>:
   420b0:	b510      	push	{r4, lr}
   420b2:	b16a      	cbz	r2, 420d0 <strncmp+0x20>
   420b4:	3901      	subs	r1, #1
   420b6:	1884      	adds	r4, r0, r2
   420b8:	f810 3b01 	ldrb.w	r3, [r0], #1
   420bc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   420c0:	4293      	cmp	r3, r2
   420c2:	d103      	bne.n	420cc <strncmp+0x1c>
   420c4:	42a0      	cmp	r0, r4
   420c6:	d001      	beq.n	420cc <strncmp+0x1c>
   420c8:	2b00      	cmp	r3, #0
   420ca:	d1f5      	bne.n	420b8 <strncmp+0x8>
   420cc:	1a98      	subs	r0, r3, r2
   420ce:	bd10      	pop	{r4, pc}
   420d0:	4610      	mov	r0, r2
   420d2:	e7fc      	b.n	420ce <strncmp+0x1e>

000420d4 <strncpy>:
   420d4:	3901      	subs	r1, #1
   420d6:	4603      	mov	r3, r0
   420d8:	b510      	push	{r4, lr}
   420da:	b132      	cbz	r2, 420ea <strncpy+0x16>
   420dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   420e0:	3a01      	subs	r2, #1
   420e2:	f803 4b01 	strb.w	r4, [r3], #1
   420e6:	2c00      	cmp	r4, #0
   420e8:	d1f7      	bne.n	420da <strncpy+0x6>
   420ea:	441a      	add	r2, r3
   420ec:	2100      	movs	r1, #0
   420ee:	4293      	cmp	r3, r2
   420f0:	d100      	bne.n	420f4 <strncpy+0x20>
   420f2:	bd10      	pop	{r4, pc}
   420f4:	f803 1b01 	strb.w	r1, [r3], #1
   420f8:	e7f9      	b.n	420ee <strncpy+0x1a>

000420fa <strnlen>:
   420fa:	4602      	mov	r2, r0
   420fc:	4401      	add	r1, r0
   420fe:	b510      	push	{r4, lr}
   42100:	428a      	cmp	r2, r1
   42102:	4613      	mov	r3, r2
   42104:	d101      	bne.n	4210a <strnlen+0x10>
   42106:	1a18      	subs	r0, r3, r0
   42108:	bd10      	pop	{r4, pc}
   4210a:	781c      	ldrb	r4, [r3, #0]
   4210c:	3201      	adds	r2, #1
   4210e:	2c00      	cmp	r4, #0
   42110:	d1f6      	bne.n	42100 <strnlen+0x6>
   42112:	e7f8      	b.n	42106 <strnlen+0xc>

00042114 <strstr>:
   42114:	b5f0      	push	{r4, r5, r6, r7, lr}
   42116:	780c      	ldrb	r4, [r1, #0]
   42118:	b164      	cbz	r4, 42134 <strstr+0x20>
   4211a:	4603      	mov	r3, r0
   4211c:	781a      	ldrb	r2, [r3, #0]
   4211e:	4618      	mov	r0, r3
   42120:	1c5e      	adds	r6, r3, #1
   42122:	b90a      	cbnz	r2, 42128 <strstr+0x14>
   42124:	4610      	mov	r0, r2
   42126:	e005      	b.n	42134 <strstr+0x20>
   42128:	4294      	cmp	r4, r2
   4212a:	d108      	bne.n	4213e <strstr+0x2a>
   4212c:	460d      	mov	r5, r1
   4212e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   42132:	b902      	cbnz	r2, 42136 <strstr+0x22>
   42134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   42136:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   4213a:	4297      	cmp	r7, r2
   4213c:	d0f7      	beq.n	4212e <strstr+0x1a>
   4213e:	4633      	mov	r3, r6
   42140:	e7ec      	b.n	4211c <strstr+0x8>

00042142 <sulp>:
   42142:	b570      	push	{r4, r5, r6, lr}
   42144:	4604      	mov	r4, r0
   42146:	460d      	mov	r5, r1
   42148:	4616      	mov	r6, r2
   4214a:	ec45 4b10 	vmov	d0, r4, r5
   4214e:	f7fa f8d3 	bl	3c2f8 <__ulp>
   42152:	ec51 0b10 	vmov	r0, r1, d0
   42156:	b17e      	cbz	r6, 42178 <sulp+0x36>
   42158:	f3c5 530a 	ubfx	r3, r5, #20, #11
   4215c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   42160:	2b00      	cmp	r3, #0
   42162:	dd09      	ble.n	42178 <sulp+0x36>
   42164:	051b      	lsls	r3, r3, #20
   42166:	2400      	movs	r4, #0
   42168:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   4216c:	4622      	mov	r2, r4
   4216e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   42172:	462b      	mov	r3, r5
   42174:	f7da fb20 	bl	1c7b8 <__aeabi_dmul>
   42178:	bd70      	pop	{r4, r5, r6, pc}

0004217a <_strtol_r>:
   4217a:	f7f9 ba43 	b.w	3b604 <_strtol_l.isra.0>

0004217e <_strtoul_r>:
   4217e:	f7f9 bac3 	b.w	3b708 <_strtoul_l.isra.0>

00042182 <_vsniprintf_r>:
   42182:	b530      	push	{r4, r5, lr}
   42184:	1e14      	subs	r4, r2, #0
   42186:	4605      	mov	r5, r0
   42188:	b09b      	sub	sp, #108	; 0x6c
   4218a:	4618      	mov	r0, r3
   4218c:	da05      	bge.n	4219a <_vsniprintf_r+0x18>
   4218e:	238b      	movs	r3, #139	; 0x8b
   42190:	f04f 30ff 	mov.w	r0, #4294967295
   42194:	602b      	str	r3, [r5, #0]
   42196:	b01b      	add	sp, #108	; 0x6c
   42198:	bd30      	pop	{r4, r5, pc}
   4219a:	f44f 7302 	mov.w	r3, #520	; 0x208
   4219e:	4602      	mov	r2, r0
   421a0:	9100      	str	r1, [sp, #0]
   421a2:	4628      	mov	r0, r5
   421a4:	f8ad 300c 	strh.w	r3, [sp, #12]
   421a8:	bf14      	ite	ne
   421aa:	f104 33ff 	addne.w	r3, r4, #4294967295
   421ae:	4623      	moveq	r3, r4
   421b0:	9104      	str	r1, [sp, #16]
   421b2:	4669      	mov	r1, sp
   421b4:	9302      	str	r3, [sp, #8]
   421b6:	9305      	str	r3, [sp, #20]
   421b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   421bc:	f8ad 300e 	strh.w	r3, [sp, #14]
   421c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   421c2:	f7fa f913 	bl	3c3ec <_svfiprintf_r>
   421c6:	1c43      	adds	r3, r0, #1
   421c8:	bfbc      	itt	lt
   421ca:	238b      	movlt	r3, #139	; 0x8b
   421cc:	602b      	strlt	r3, [r5, #0]
   421ce:	2c00      	cmp	r4, #0
   421d0:	d0e1      	beq.n	42196 <_vsniprintf_r+0x14>
   421d2:	9b00      	ldr	r3, [sp, #0]
   421d4:	2200      	movs	r2, #0
   421d6:	701a      	strb	r2, [r3, #0]
   421d8:	e7dd      	b.n	42196 <_vsniprintf_r+0x14>

000421da <abort>:
   421da:	2006      	movs	r0, #6
   421dc:	b508      	push	{r3, lr}
   421de:	f7fa fcdd 	bl	3cb9c <raise>
   421e2:	2001      	movs	r0, #1
   421e4:	f7e5 f85a 	bl	2729c <_exit>

000421e8 <quorem>:
   421e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   421ec:	6903      	ldr	r3, [r0, #16]
   421ee:	4607      	mov	r7, r0
   421f0:	690c      	ldr	r4, [r1, #16]
   421f2:	42a3      	cmp	r3, r4
   421f4:	f2c0 8085 	blt.w	42302 <quorem+0x11a>
   421f8:	3c01      	subs	r4, #1
   421fa:	f100 0514 	add.w	r5, r0, #20
   421fe:	f101 0814 	add.w	r8, r1, #20
   42202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   42206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   4220a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   4220e:	9301      	str	r3, [sp, #4]
   42210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   42214:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   42218:	3301      	adds	r3, #1
   4221a:	429a      	cmp	r2, r3
   4221c:	fbb2 f6f3 	udiv	r6, r2, r3
   42220:	d333      	bcc.n	4228a <quorem+0xa2>
   42222:	f04f 0e00 	mov.w	lr, #0
   42226:	4640      	mov	r0, r8
   42228:	46ac      	mov	ip, r5
   4222a:	46f2      	mov	sl, lr
   4222c:	f850 2b04 	ldr.w	r2, [r0], #4
   42230:	b293      	uxth	r3, r2
   42232:	4581      	cmp	r9, r0
   42234:	ea4f 4212 	mov.w	r2, r2, lsr #16
   42238:	fb06 e303 	mla	r3, r6, r3, lr
   4223c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   42240:	b29b      	uxth	r3, r3
   42242:	fb06 e202 	mla	r2, r6, r2, lr
   42246:	ebaa 0303 	sub.w	r3, sl, r3
   4224a:	f8dc a000 	ldr.w	sl, [ip]
   4224e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   42252:	fa1f fa8a 	uxth.w	sl, sl
   42256:	4453      	add	r3, sl
   42258:	fa1f fa82 	uxth.w	sl, r2
   4225c:	f8dc 2000 	ldr.w	r2, [ip]
   42260:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   42264:	eb02 4223 	add.w	r2, r2, r3, asr #16
   42268:	b29b      	uxth	r3, r3
   4226a:	ea4f 4a22 	mov.w	sl, r2, asr #16
   4226e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   42272:	f84c 3b04 	str.w	r3, [ip], #4
   42276:	d2d9      	bcs.n	4222c <quorem+0x44>
   42278:	f855 300b 	ldr.w	r3, [r5, fp]
   4227c:	b92b      	cbnz	r3, 4228a <quorem+0xa2>
   4227e:	9b01      	ldr	r3, [sp, #4]
   42280:	3b04      	subs	r3, #4
   42282:	429d      	cmp	r5, r3
   42284:	461a      	mov	r2, r3
   42286:	d330      	bcc.n	422ea <quorem+0x102>
   42288:	613c      	str	r4, [r7, #16]
   4228a:	4638      	mov	r0, r7
   4228c:	f000 fc06 	bl	42a9c <__mcmp>
   42290:	2800      	cmp	r0, #0
   42292:	db26      	blt.n	422e2 <quorem+0xfa>
   42294:	3601      	adds	r6, #1
   42296:	4628      	mov	r0, r5
   42298:	f04f 0c00 	mov.w	ip, #0
   4229c:	f858 1b04 	ldr.w	r1, [r8], #4
   422a0:	f8d0 e000 	ldr.w	lr, [r0]
   422a4:	b28b      	uxth	r3, r1
   422a6:	45c1      	cmp	r9, r8
   422a8:	fa1f f28e 	uxth.w	r2, lr
   422ac:	ebac 0303 	sub.w	r3, ip, r3
   422b0:	4413      	add	r3, r2
   422b2:	ea4f 4211 	mov.w	r2, r1, lsr #16
   422b6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   422ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
   422be:	b29b      	uxth	r3, r3
   422c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
   422c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   422c8:	f840 3b04 	str.w	r3, [r0], #4
   422cc:	d2e6      	bcs.n	4229c <quorem+0xb4>
   422ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   422d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   422d6:	b922      	cbnz	r2, 422e2 <quorem+0xfa>
   422d8:	3b04      	subs	r3, #4
   422da:	429d      	cmp	r5, r3
   422dc:	461a      	mov	r2, r3
   422de:	d30a      	bcc.n	422f6 <quorem+0x10e>
   422e0:	613c      	str	r4, [r7, #16]
   422e2:	4630      	mov	r0, r6
   422e4:	b003      	add	sp, #12
   422e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   422ea:	6812      	ldr	r2, [r2, #0]
   422ec:	3b04      	subs	r3, #4
   422ee:	2a00      	cmp	r2, #0
   422f0:	d1ca      	bne.n	42288 <quorem+0xa0>
   422f2:	3c01      	subs	r4, #1
   422f4:	e7c5      	b.n	42282 <quorem+0x9a>
   422f6:	6812      	ldr	r2, [r2, #0]
   422f8:	3b04      	subs	r3, #4
   422fa:	2a00      	cmp	r2, #0
   422fc:	d1f0      	bne.n	422e0 <quorem+0xf8>
   422fe:	3c01      	subs	r4, #1
   42300:	e7eb      	b.n	422da <quorem+0xf2>
   42302:	2000      	movs	r0, #0
   42304:	e7ee      	b.n	422e4 <quorem+0xfc>

00042306 <__sfmoreglue>:
   42306:	b570      	push	{r4, r5, r6, lr}
   42308:	1e4a      	subs	r2, r1, #1
   4230a:	2568      	movs	r5, #104	; 0x68
   4230c:	460e      	mov	r6, r1
   4230e:	4355      	muls	r5, r2
   42310:	f105 0174 	add.w	r1, r5, #116	; 0x74
   42314:	f7f8 fbb4 	bl	3aa80 <_malloc_r>
   42318:	4604      	mov	r4, r0
   4231a:	b140      	cbz	r0, 4232e <__sfmoreglue+0x28>
   4231c:	2100      	movs	r1, #0
   4231e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   42322:	e9c0 1600 	strd	r1, r6, [r0]
   42326:	300c      	adds	r0, #12
   42328:	60a0      	str	r0, [r4, #8]
   4232a:	f7ff fcd8 	bl	41cde <memset>
   4232e:	4620      	mov	r0, r4
   42330:	bd70      	pop	{r4, r5, r6, pc}

00042332 <_fwalk_reent>:
   42332:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   42336:	4606      	mov	r6, r0
   42338:	4688      	mov	r8, r1
   4233a:	f100 0448 	add.w	r4, r0, #72	; 0x48
   4233e:	2700      	movs	r7, #0
   42340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   42344:	f1b9 0901 	subs.w	r9, r9, #1
   42348:	d505      	bpl.n	42356 <_fwalk_reent+0x24>
   4234a:	6824      	ldr	r4, [r4, #0]
   4234c:	2c00      	cmp	r4, #0
   4234e:	d1f7      	bne.n	42340 <_fwalk_reent+0xe>
   42350:	4638      	mov	r0, r7
   42352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   42356:	89ab      	ldrh	r3, [r5, #12]
   42358:	2b01      	cmp	r3, #1
   4235a:	d907      	bls.n	4236c <_fwalk_reent+0x3a>
   4235c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   42360:	3301      	adds	r3, #1
   42362:	d003      	beq.n	4236c <_fwalk_reent+0x3a>
   42364:	4629      	mov	r1, r5
   42366:	4630      	mov	r0, r6
   42368:	47c0      	blx	r8
   4236a:	4307      	orrs	r7, r0
   4236c:	3568      	adds	r5, #104	; 0x68
   4236e:	e7e9      	b.n	42344 <_fwalk_reent+0x12>

00042370 <rshift>:
   42370:	6903      	ldr	r3, [r0, #16]
   42372:	114a      	asrs	r2, r1, #5
   42374:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   42378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   4237c:	f100 0414 	add.w	r4, r0, #20
   42380:	dd45      	ble.n	4240e <rshift+0x9e>
   42382:	f011 011f 	ands.w	r1, r1, #31
   42386:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   4238a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   4238e:	d10c      	bne.n	423aa <rshift+0x3a>
   42390:	f100 0710 	add.w	r7, r0, #16
   42394:	4629      	mov	r1, r5
   42396:	42b1      	cmp	r1, r6
   42398:	d334      	bcc.n	42404 <rshift+0x94>
   4239a:	1a9b      	subs	r3, r3, r2
   4239c:	1eea      	subs	r2, r5, #3
   4239e:	009b      	lsls	r3, r3, #2
   423a0:	4296      	cmp	r6, r2
   423a2:	bf38      	it	cc
   423a4:	2300      	movcc	r3, #0
   423a6:	4423      	add	r3, r4
   423a8:	e015      	b.n	423d6 <rshift+0x66>
   423aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   423ae:	f1c1 0820 	rsb	r8, r1, #32
   423b2:	f105 0e04 	add.w	lr, r5, #4
   423b6:	46a1      	mov	r9, r4
   423b8:	40cf      	lsrs	r7, r1
   423ba:	4576      	cmp	r6, lr
   423bc:	46f4      	mov	ip, lr
   423be:	d815      	bhi.n	423ec <rshift+0x7c>
   423c0:	1a9b      	subs	r3, r3, r2
   423c2:	3501      	adds	r5, #1
   423c4:	009a      	lsls	r2, r3, #2
   423c6:	3a04      	subs	r2, #4
   423c8:	42ae      	cmp	r6, r5
   423ca:	bf38      	it	cc
   423cc:	2200      	movcc	r2, #0
   423ce:	18a3      	adds	r3, r4, r2
   423d0:	50a7      	str	r7, [r4, r2]
   423d2:	b107      	cbz	r7, 423d6 <rshift+0x66>
   423d4:	3304      	adds	r3, #4
   423d6:	1b1a      	subs	r2, r3, r4
   423d8:	42a3      	cmp	r3, r4
   423da:	ea4f 02a2 	mov.w	r2, r2, asr #2
   423de:	bf08      	it	eq
   423e0:	2300      	moveq	r3, #0
   423e2:	6102      	str	r2, [r0, #16]
   423e4:	bf08      	it	eq
   423e6:	6143      	streq	r3, [r0, #20]
   423e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   423ec:	f8dc c000 	ldr.w	ip, [ip]
   423f0:	fa0c fc08 	lsl.w	ip, ip, r8
   423f4:	ea4c 0707 	orr.w	r7, ip, r7
   423f8:	f849 7b04 	str.w	r7, [r9], #4
   423fc:	f85e 7b04 	ldr.w	r7, [lr], #4
   42400:	40cf      	lsrs	r7, r1
   42402:	e7da      	b.n	423ba <rshift+0x4a>
   42404:	f851 cb04 	ldr.w	ip, [r1], #4
   42408:	f847 cf04 	str.w	ip, [r7, #4]!
   4240c:	e7c3      	b.n	42396 <rshift+0x26>
   4240e:	4623      	mov	r3, r4
   42410:	e7e1      	b.n	423d6 <rshift+0x66>

00042412 <__hexdig_fun>:
   42412:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   42416:	2b09      	cmp	r3, #9
   42418:	d802      	bhi.n	42420 <__hexdig_fun+0xe>
   4241a:	3820      	subs	r0, #32
   4241c:	b2c0      	uxtb	r0, r0
   4241e:	4770      	bx	lr
   42420:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   42424:	2b05      	cmp	r3, #5
   42426:	d801      	bhi.n	4242c <__hexdig_fun+0x1a>
   42428:	3847      	subs	r0, #71	; 0x47
   4242a:	e7f7      	b.n	4241c <__hexdig_fun+0xa>
   4242c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   42430:	2b05      	cmp	r3, #5
   42432:	d801      	bhi.n	42438 <__hexdig_fun+0x26>
   42434:	3827      	subs	r0, #39	; 0x27
   42436:	e7f1      	b.n	4241c <__hexdig_fun+0xa>
   42438:	2000      	movs	r0, #0
   4243a:	4770      	bx	lr

0004243c <L_shift>:
   4243c:	f1c2 0208 	rsb	r2, r2, #8
   42440:	0092      	lsls	r2, r2, #2
   42442:	b570      	push	{r4, r5, r6, lr}
   42444:	f1c2 0620 	rsb	r6, r2, #32
   42448:	6843      	ldr	r3, [r0, #4]
   4244a:	6804      	ldr	r4, [r0, #0]
   4244c:	fa03 f506 	lsl.w	r5, r3, r6
   42450:	40d3      	lsrs	r3, r2
   42452:	432c      	orrs	r4, r5
   42454:	6004      	str	r4, [r0, #0]
   42456:	f840 3f04 	str.w	r3, [r0, #4]!
   4245a:	4288      	cmp	r0, r1
   4245c:	d3f4      	bcc.n	42448 <L_shift+0xc>
   4245e:	bd70      	pop	{r4, r5, r6, pc}

00042460 <__match>:
   42460:	6803      	ldr	r3, [r0, #0]
   42462:	3301      	adds	r3, #1
   42464:	b530      	push	{r4, r5, lr}
   42466:	f811 4b01 	ldrb.w	r4, [r1], #1
   4246a:	b914      	cbnz	r4, 42472 <__match+0x12>
   4246c:	6003      	str	r3, [r0, #0]
   4246e:	2001      	movs	r0, #1
   42470:	bd30      	pop	{r4, r5, pc}
   42472:	f813 2b01 	ldrb.w	r2, [r3], #1
   42476:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   4247a:	2d19      	cmp	r5, #25
   4247c:	bf98      	it	ls
   4247e:	3220      	addls	r2, #32
   42480:	42a2      	cmp	r2, r4
   42482:	d0f0      	beq.n	42466 <__match+0x6>
   42484:	2000      	movs	r0, #0
   42486:	e7f3      	b.n	42470 <__match+0x10>

00042488 <__hexnan>:
   42488:	680b      	ldr	r3, [r1, #0]
   4248a:	6801      	ldr	r1, [r0, #0]
   4248c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42490:	115e      	asrs	r6, r3, #5
   42492:	f013 031f 	ands.w	r3, r3, #31
   42496:	f04f 0500 	mov.w	r5, #0
   4249a:	b087      	sub	sp, #28
   4249c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   424a0:	4682      	mov	sl, r0
   424a2:	4690      	mov	r8, r2
   424a4:	46ab      	mov	fp, r5
   424a6:	bf18      	it	ne
   424a8:	3604      	addne	r6, #4
   424aa:	9301      	str	r3, [sp, #4]
   424ac:	9502      	str	r5, [sp, #8]
   424ae:	1f37      	subs	r7, r6, #4
   424b0:	f846 5c04 	str.w	r5, [r6, #-4]
   424b4:	46b9      	mov	r9, r7
   424b6:	463c      	mov	r4, r7
   424b8:	1c4b      	adds	r3, r1, #1
   424ba:	784a      	ldrb	r2, [r1, #1]
   424bc:	9303      	str	r3, [sp, #12]
   424be:	b342      	cbz	r2, 42512 <__hexnan+0x8a>
   424c0:	4610      	mov	r0, r2
   424c2:	9105      	str	r1, [sp, #20]
   424c4:	9204      	str	r2, [sp, #16]
   424c6:	f7ff ffa4 	bl	42412 <__hexdig_fun>
   424ca:	2800      	cmp	r0, #0
   424cc:	d14f      	bne.n	4256e <__hexnan+0xe6>
   424ce:	9a04      	ldr	r2, [sp, #16]
   424d0:	9905      	ldr	r1, [sp, #20]
   424d2:	2a20      	cmp	r2, #32
   424d4:	d818      	bhi.n	42508 <__hexnan+0x80>
   424d6:	9b02      	ldr	r3, [sp, #8]
   424d8:	459b      	cmp	fp, r3
   424da:	dd13      	ble.n	42504 <__hexnan+0x7c>
   424dc:	454c      	cmp	r4, r9
   424de:	d206      	bcs.n	424ee <__hexnan+0x66>
   424e0:	2d07      	cmp	r5, #7
   424e2:	dc04      	bgt.n	424ee <__hexnan+0x66>
   424e4:	462a      	mov	r2, r5
   424e6:	4649      	mov	r1, r9
   424e8:	4620      	mov	r0, r4
   424ea:	f7ff ffa7 	bl	4243c <L_shift>
   424ee:	4544      	cmp	r4, r8
   424f0:	d94f      	bls.n	42592 <__hexnan+0x10a>
   424f2:	2300      	movs	r3, #0
   424f4:	f1a4 0904 	sub.w	r9, r4, #4
   424f8:	f8cd b008 	str.w	fp, [sp, #8]
   424fc:	f844 3c04 	str.w	r3, [r4, #-4]
   42500:	461d      	mov	r5, r3
   42502:	464c      	mov	r4, r9
   42504:	9903      	ldr	r1, [sp, #12]
   42506:	e7d7      	b.n	424b8 <__hexnan+0x30>
   42508:	2a29      	cmp	r2, #41	; 0x29
   4250a:	d155      	bne.n	425b8 <__hexnan+0x130>
   4250c:	3102      	adds	r1, #2
   4250e:	f8ca 1000 	str.w	r1, [sl]
   42512:	f1bb 0f00 	cmp.w	fp, #0
   42516:	d04f      	beq.n	425b8 <__hexnan+0x130>
   42518:	454c      	cmp	r4, r9
   4251a:	d206      	bcs.n	4252a <__hexnan+0xa2>
   4251c:	2d07      	cmp	r5, #7
   4251e:	dc04      	bgt.n	4252a <__hexnan+0xa2>
   42520:	462a      	mov	r2, r5
   42522:	4649      	mov	r1, r9
   42524:	4620      	mov	r0, r4
   42526:	f7ff ff89 	bl	4243c <L_shift>
   4252a:	4544      	cmp	r4, r8
   4252c:	d933      	bls.n	42596 <__hexnan+0x10e>
   4252e:	f1a8 0204 	sub.w	r2, r8, #4
   42532:	4623      	mov	r3, r4
   42534:	f853 1b04 	ldr.w	r1, [r3], #4
   42538:	429f      	cmp	r7, r3
   4253a:	f842 1f04 	str.w	r1, [r2, #4]!
   4253e:	d2f9      	bcs.n	42534 <__hexnan+0xac>
   42540:	1b3b      	subs	r3, r7, r4
   42542:	3e03      	subs	r6, #3
   42544:	3401      	adds	r4, #1
   42546:	2200      	movs	r2, #0
   42548:	f023 0303 	bic.w	r3, r3, #3
   4254c:	3304      	adds	r3, #4
   4254e:	42b4      	cmp	r4, r6
   42550:	bf88      	it	hi
   42552:	2304      	movhi	r3, #4
   42554:	4443      	add	r3, r8
   42556:	f843 2b04 	str.w	r2, [r3], #4
   4255a:	429f      	cmp	r7, r3
   4255c:	d2fb      	bcs.n	42556 <__hexnan+0xce>
   4255e:	683b      	ldr	r3, [r7, #0]
   42560:	b91b      	cbnz	r3, 4256a <__hexnan+0xe2>
   42562:	4547      	cmp	r7, r8
   42564:	d126      	bne.n	425b4 <__hexnan+0x12c>
   42566:	2301      	movs	r3, #1
   42568:	603b      	str	r3, [r7, #0]
   4256a:	2005      	movs	r0, #5
   4256c:	e025      	b.n	425ba <__hexnan+0x132>
   4256e:	3501      	adds	r5, #1
   42570:	f10b 0b01 	add.w	fp, fp, #1
   42574:	2d08      	cmp	r5, #8
   42576:	dd05      	ble.n	42584 <__hexnan+0xfc>
   42578:	4544      	cmp	r4, r8
   4257a:	d9c3      	bls.n	42504 <__hexnan+0x7c>
   4257c:	2300      	movs	r3, #0
   4257e:	3c04      	subs	r4, #4
   42580:	2501      	movs	r5, #1
   42582:	6023      	str	r3, [r4, #0]
   42584:	6822      	ldr	r2, [r4, #0]
   42586:	f000 000f 	and.w	r0, r0, #15
   4258a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   4258e:	6022      	str	r2, [r4, #0]
   42590:	e7b8      	b.n	42504 <__hexnan+0x7c>
   42592:	2508      	movs	r5, #8
   42594:	e7b6      	b.n	42504 <__hexnan+0x7c>
   42596:	9b01      	ldr	r3, [sp, #4]
   42598:	2b00      	cmp	r3, #0
   4259a:	d0e0      	beq.n	4255e <__hexnan+0xd6>
   4259c:	f04f 32ff 	mov.w	r2, #4294967295
   425a0:	f1c3 0320 	rsb	r3, r3, #32
   425a4:	fa22 f303 	lsr.w	r3, r2, r3
   425a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
   425ac:	401a      	ands	r2, r3
   425ae:	f846 2c04 	str.w	r2, [r6, #-4]
   425b2:	e7d4      	b.n	4255e <__hexnan+0xd6>
   425b4:	3f04      	subs	r7, #4
   425b6:	e7d2      	b.n	4255e <__hexnan+0xd6>
   425b8:	2004      	movs	r0, #4
   425ba:	b007      	add	sp, #28
   425bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000425c0 <__retarget_lock_init_recursive>:
   425c0:	4770      	bx	lr

000425c2 <__retarget_lock_acquire_recursive>:
   425c2:	4770      	bx	lr

000425c4 <__retarget_lock_release_recursive>:
   425c4:	4770      	bx	lr

000425c6 <__swhatbuf_r>:
   425c6:	b570      	push	{r4, r5, r6, lr}
   425c8:	460e      	mov	r6, r1
   425ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   425ce:	b096      	sub	sp, #88	; 0x58
   425d0:	4614      	mov	r4, r2
   425d2:	2900      	cmp	r1, #0
   425d4:	461d      	mov	r5, r3
   425d6:	da07      	bge.n	425e8 <__swhatbuf_r+0x22>
   425d8:	2300      	movs	r3, #0
   425da:	602b      	str	r3, [r5, #0]
   425dc:	89b3      	ldrh	r3, [r6, #12]
   425de:	061a      	lsls	r2, r3, #24
   425e0:	d410      	bmi.n	42604 <__swhatbuf_r+0x3e>
   425e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   425e6:	e00e      	b.n	42606 <__swhatbuf_r+0x40>
   425e8:	466a      	mov	r2, sp
   425ea:	f7fa faf1 	bl	3cbd0 <_fstat_r>
   425ee:	2800      	cmp	r0, #0
   425f0:	dbf2      	blt.n	425d8 <__swhatbuf_r+0x12>
   425f2:	9a01      	ldr	r2, [sp, #4]
   425f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   425f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   425fc:	425a      	negs	r2, r3
   425fe:	415a      	adcs	r2, r3
   42600:	602a      	str	r2, [r5, #0]
   42602:	e7ee      	b.n	425e2 <__swhatbuf_r+0x1c>
   42604:	2340      	movs	r3, #64	; 0x40
   42606:	2000      	movs	r0, #0
   42608:	6023      	str	r3, [r4, #0]
   4260a:	b016      	add	sp, #88	; 0x58
   4260c:	bd70      	pop	{r4, r5, r6, pc}

0004260e <__ascii_mbtowc>:
   4260e:	b082      	sub	sp, #8
   42610:	b901      	cbnz	r1, 42614 <__ascii_mbtowc+0x6>
   42612:	a901      	add	r1, sp, #4
   42614:	b142      	cbz	r2, 42628 <__ascii_mbtowc+0x1a>
   42616:	b14b      	cbz	r3, 4262c <__ascii_mbtowc+0x1e>
   42618:	7813      	ldrb	r3, [r2, #0]
   4261a:	600b      	str	r3, [r1, #0]
   4261c:	7812      	ldrb	r2, [r2, #0]
   4261e:	1e10      	subs	r0, r2, #0
   42620:	bf18      	it	ne
   42622:	2001      	movne	r0, #1
   42624:	b002      	add	sp, #8
   42626:	4770      	bx	lr
   42628:	4610      	mov	r0, r2
   4262a:	e7fb      	b.n	42624 <__ascii_mbtowc+0x16>
   4262c:	f06f 0001 	mvn.w	r0, #1
   42630:	e7f8      	b.n	42624 <__ascii_mbtowc+0x16>

00042632 <memmove>:
   42632:	4288      	cmp	r0, r1
   42634:	b510      	push	{r4, lr}
   42636:	eb01 0402 	add.w	r4, r1, r2
   4263a:	d902      	bls.n	42642 <memmove+0x10>
   4263c:	4284      	cmp	r4, r0
   4263e:	4623      	mov	r3, r4
   42640:	d807      	bhi.n	42652 <memmove+0x20>
   42642:	1e43      	subs	r3, r0, #1
   42644:	42a1      	cmp	r1, r4
   42646:	d008      	beq.n	4265a <memmove+0x28>
   42648:	f811 2b01 	ldrb.w	r2, [r1], #1
   4264c:	f803 2f01 	strb.w	r2, [r3, #1]!
   42650:	e7f8      	b.n	42644 <memmove+0x12>
   42652:	4402      	add	r2, r0
   42654:	4601      	mov	r1, r0
   42656:	428a      	cmp	r2, r1
   42658:	d100      	bne.n	4265c <memmove+0x2a>
   4265a:	bd10      	pop	{r4, pc}
   4265c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   42660:	f802 4d01 	strb.w	r4, [r2, #-1]!
   42664:	e7f7      	b.n	42656 <memmove+0x24>

00042666 <_Balloc>:
   42666:	b570      	push	{r4, r5, r6, lr}
   42668:	6a46      	ldr	r6, [r0, #36]	; 0x24
   4266a:	4604      	mov	r4, r0
   4266c:	460d      	mov	r5, r1
   4266e:	b93e      	cbnz	r6, 42680 <_Balloc+0x1a>
   42670:	2010      	movs	r0, #16
   42672:	f7f8 f9a5 	bl	3a9c0 <malloc>
   42676:	6260      	str	r0, [r4, #36]	; 0x24
   42678:	6006      	str	r6, [r0, #0]
   4267a:	60c6      	str	r6, [r0, #12]
   4267c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   42680:	6a66      	ldr	r6, [r4, #36]	; 0x24
   42682:	68f3      	ldr	r3, [r6, #12]
   42684:	b183      	cbz	r3, 426a8 <_Balloc+0x42>
   42686:	6a63      	ldr	r3, [r4, #36]	; 0x24
   42688:	68db      	ldr	r3, [r3, #12]
   4268a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   4268e:	b9b8      	cbnz	r0, 426c0 <_Balloc+0x5a>
   42690:	2101      	movs	r1, #1
   42692:	4620      	mov	r0, r4
   42694:	fa01 f605 	lsl.w	r6, r1, r5
   42698:	1d72      	adds	r2, r6, #5
   4269a:	0092      	lsls	r2, r2, #2
   4269c:	f000 fb5e 	bl	42d5c <_calloc_r>
   426a0:	b160      	cbz	r0, 426bc <_Balloc+0x56>
   426a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
   426a6:	e00e      	b.n	426c6 <_Balloc+0x60>
   426a8:	2221      	movs	r2, #33	; 0x21
   426aa:	2104      	movs	r1, #4
   426ac:	4620      	mov	r0, r4
   426ae:	f000 fb55 	bl	42d5c <_calloc_r>
   426b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   426b4:	60f0      	str	r0, [r6, #12]
   426b6:	68db      	ldr	r3, [r3, #12]
   426b8:	2b00      	cmp	r3, #0
   426ba:	d1e4      	bne.n	42686 <_Balloc+0x20>
   426bc:	2000      	movs	r0, #0
   426be:	bd70      	pop	{r4, r5, r6, pc}
   426c0:	6802      	ldr	r2, [r0, #0]
   426c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   426c6:	2300      	movs	r3, #0
   426c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
   426cc:	e7f7      	b.n	426be <_Balloc+0x58>

000426ce <_Bfree>:
   426ce:	b570      	push	{r4, r5, r6, lr}
   426d0:	6a46      	ldr	r6, [r0, #36]	; 0x24
   426d2:	4605      	mov	r5, r0
   426d4:	460c      	mov	r4, r1
   426d6:	b93e      	cbnz	r6, 426e8 <_Bfree+0x1a>
   426d8:	2010      	movs	r0, #16
   426da:	f7f8 f971 	bl	3a9c0 <malloc>
   426de:	6268      	str	r0, [r5, #36]	; 0x24
   426e0:	6006      	str	r6, [r0, #0]
   426e2:	60c6      	str	r6, [r0, #12]
   426e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   426e8:	b13c      	cbz	r4, 426fa <_Bfree+0x2c>
   426ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   426ec:	6862      	ldr	r2, [r4, #4]
   426ee:	68db      	ldr	r3, [r3, #12]
   426f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   426f4:	6021      	str	r1, [r4, #0]
   426f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   426fa:	bd70      	pop	{r4, r5, r6, pc}

000426fc <__multadd>:
   426fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42700:	4607      	mov	r7, r0
   42702:	4698      	mov	r8, r3
   42704:	460c      	mov	r4, r1
   42706:	690e      	ldr	r6, [r1, #16]
   42708:	f101 0014 	add.w	r0, r1, #20
   4270c:	2300      	movs	r3, #0
   4270e:	6805      	ldr	r5, [r0, #0]
   42710:	3301      	adds	r3, #1
   42712:	b2a9      	uxth	r1, r5
   42714:	429e      	cmp	r6, r3
   42716:	ea4f 4515 	mov.w	r5, r5, lsr #16
   4271a:	fb02 8101 	mla	r1, r2, r1, r8
   4271e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   42722:	b289      	uxth	r1, r1
   42724:	fb02 c505 	mla	r5, r2, r5, ip
   42728:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   4272c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   42730:	f840 1b04 	str.w	r1, [r0], #4
   42734:	dceb      	bgt.n	4270e <__multadd+0x12>
   42736:	f1b8 0f00 	cmp.w	r8, #0
   4273a:	d01b      	beq.n	42774 <__multadd+0x78>
   4273c:	68a3      	ldr	r3, [r4, #8]
   4273e:	42b3      	cmp	r3, r6
   42740:	dc12      	bgt.n	42768 <__multadd+0x6c>
   42742:	6861      	ldr	r1, [r4, #4]
   42744:	4638      	mov	r0, r7
   42746:	3101      	adds	r1, #1
   42748:	f7ff ff8d 	bl	42666 <_Balloc>
   4274c:	6922      	ldr	r2, [r4, #16]
   4274e:	4605      	mov	r5, r0
   42750:	f104 010c 	add.w	r1, r4, #12
   42754:	3202      	adds	r2, #2
   42756:	300c      	adds	r0, #12
   42758:	0092      	lsls	r2, r2, #2
   4275a:	f7ff faa0 	bl	41c9e <memcpy>
   4275e:	4621      	mov	r1, r4
   42760:	462c      	mov	r4, r5
   42762:	4638      	mov	r0, r7
   42764:	f7ff ffb3 	bl	426ce <_Bfree>
   42768:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   4276c:	3601      	adds	r6, #1
   4276e:	f8c3 8014 	str.w	r8, [r3, #20]
   42772:	6126      	str	r6, [r4, #16]
   42774:	4620      	mov	r0, r4
   42776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0004277a <__s2b>:
   4277a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   4277e:	4615      	mov	r5, r2
   42780:	461f      	mov	r7, r3
   42782:	2209      	movs	r2, #9
   42784:	3308      	adds	r3, #8
   42786:	460c      	mov	r4, r1
   42788:	4606      	mov	r6, r0
   4278a:	2100      	movs	r1, #0
   4278c:	fb93 f3f2 	sdiv	r3, r3, r2
   42790:	2201      	movs	r2, #1
   42792:	429a      	cmp	r2, r3
   42794:	db20      	blt.n	427d8 <__s2b+0x5e>
   42796:	4630      	mov	r0, r6
   42798:	f7ff ff65 	bl	42666 <_Balloc>
   4279c:	9b08      	ldr	r3, [sp, #32]
   4279e:	2d09      	cmp	r5, #9
   427a0:	6143      	str	r3, [r0, #20]
   427a2:	f04f 0301 	mov.w	r3, #1
   427a6:	6103      	str	r3, [r0, #16]
   427a8:	dd19      	ble.n	427de <__s2b+0x64>
   427aa:	f104 0909 	add.w	r9, r4, #9
   427ae:	442c      	add	r4, r5
   427b0:	46c8      	mov	r8, r9
   427b2:	f818 3b01 	ldrb.w	r3, [r8], #1
   427b6:	4601      	mov	r1, r0
   427b8:	220a      	movs	r2, #10
   427ba:	4630      	mov	r0, r6
   427bc:	3b30      	subs	r3, #48	; 0x30
   427be:	f7ff ff9d 	bl	426fc <__multadd>
   427c2:	45a0      	cmp	r8, r4
   427c4:	d1f5      	bne.n	427b2 <__s2b+0x38>
   427c6:	f1a5 0408 	sub.w	r4, r5, #8
   427ca:	444c      	add	r4, r9
   427cc:	1b2d      	subs	r5, r5, r4
   427ce:	1963      	adds	r3, r4, r5
   427d0:	42bb      	cmp	r3, r7
   427d2:	db07      	blt.n	427e4 <__s2b+0x6a>
   427d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   427d8:	0052      	lsls	r2, r2, #1
   427da:	3101      	adds	r1, #1
   427dc:	e7d9      	b.n	42792 <__s2b+0x18>
   427de:	340a      	adds	r4, #10
   427e0:	2509      	movs	r5, #9
   427e2:	e7f3      	b.n	427cc <__s2b+0x52>
   427e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   427e8:	4601      	mov	r1, r0
   427ea:	220a      	movs	r2, #10
   427ec:	4630      	mov	r0, r6
   427ee:	3b30      	subs	r3, #48	; 0x30
   427f0:	f7ff ff84 	bl	426fc <__multadd>
   427f4:	e7eb      	b.n	427ce <__s2b+0x54>

000427f6 <__hi0bits>:
   427f6:	0c03      	lsrs	r3, r0, #16
   427f8:	041b      	lsls	r3, r3, #16
   427fa:	b9d3      	cbnz	r3, 42832 <__hi0bits+0x3c>
   427fc:	0400      	lsls	r0, r0, #16
   427fe:	2310      	movs	r3, #16
   42800:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   42804:	bf04      	itt	eq
   42806:	0200      	lsleq	r0, r0, #8
   42808:	3308      	addeq	r3, #8
   4280a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   4280e:	bf04      	itt	eq
   42810:	0100      	lsleq	r0, r0, #4
   42812:	3304      	addeq	r3, #4
   42814:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   42818:	bf04      	itt	eq
   4281a:	0080      	lsleq	r0, r0, #2
   4281c:	3302      	addeq	r3, #2
   4281e:	2800      	cmp	r0, #0
   42820:	db05      	blt.n	4282e <__hi0bits+0x38>
   42822:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   42826:	f103 0301 	add.w	r3, r3, #1
   4282a:	bf08      	it	eq
   4282c:	2320      	moveq	r3, #32
   4282e:	4618      	mov	r0, r3
   42830:	4770      	bx	lr
   42832:	2300      	movs	r3, #0
   42834:	e7e4      	b.n	42800 <__hi0bits+0xa>

00042836 <__lo0bits>:
   42836:	6803      	ldr	r3, [r0, #0]
   42838:	4601      	mov	r1, r0
   4283a:	f013 0207 	ands.w	r2, r3, #7
   4283e:	d00b      	beq.n	42858 <__lo0bits+0x22>
   42840:	07da      	lsls	r2, r3, #31
   42842:	d424      	bmi.n	4288e <__lo0bits+0x58>
   42844:	0798      	lsls	r0, r3, #30
   42846:	bf47      	ittee	mi
   42848:	085b      	lsrmi	r3, r3, #1
   4284a:	2001      	movmi	r0, #1
   4284c:	089b      	lsrpl	r3, r3, #2
   4284e:	2002      	movpl	r0, #2
   42850:	bf4c      	ite	mi
   42852:	600b      	strmi	r3, [r1, #0]
   42854:	600b      	strpl	r3, [r1, #0]
   42856:	4770      	bx	lr
   42858:	b298      	uxth	r0, r3
   4285a:	b9b0      	cbnz	r0, 4288a <__lo0bits+0x54>
   4285c:	0c1b      	lsrs	r3, r3, #16
   4285e:	2010      	movs	r0, #16
   42860:	f013 0fff 	tst.w	r3, #255	; 0xff
   42864:	bf04      	itt	eq
   42866:	0a1b      	lsreq	r3, r3, #8
   42868:	3008      	addeq	r0, #8
   4286a:	071a      	lsls	r2, r3, #28
   4286c:	bf04      	itt	eq
   4286e:	091b      	lsreq	r3, r3, #4
   42870:	3004      	addeq	r0, #4
   42872:	079a      	lsls	r2, r3, #30
   42874:	bf04      	itt	eq
   42876:	089b      	lsreq	r3, r3, #2
   42878:	3002      	addeq	r0, #2
   4287a:	07da      	lsls	r2, r3, #31
   4287c:	d403      	bmi.n	42886 <__lo0bits+0x50>
   4287e:	085b      	lsrs	r3, r3, #1
   42880:	f100 0001 	add.w	r0, r0, #1
   42884:	d005      	beq.n	42892 <__lo0bits+0x5c>
   42886:	600b      	str	r3, [r1, #0]
   42888:	4770      	bx	lr
   4288a:	4610      	mov	r0, r2
   4288c:	e7e8      	b.n	42860 <__lo0bits+0x2a>
   4288e:	2000      	movs	r0, #0
   42890:	4770      	bx	lr
   42892:	2020      	movs	r0, #32
   42894:	4770      	bx	lr

00042896 <__i2b>:
   42896:	b510      	push	{r4, lr}
   42898:	460c      	mov	r4, r1
   4289a:	2101      	movs	r1, #1
   4289c:	f7ff fee3 	bl	42666 <_Balloc>
   428a0:	2201      	movs	r2, #1
   428a2:	6144      	str	r4, [r0, #20]
   428a4:	6102      	str	r2, [r0, #16]
   428a6:	bd10      	pop	{r4, pc}

000428a8 <__multiply>:
   428a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   428ac:	4615      	mov	r5, r2
   428ae:	690a      	ldr	r2, [r1, #16]
   428b0:	460c      	mov	r4, r1
   428b2:	b085      	sub	sp, #20
   428b4:	692b      	ldr	r3, [r5, #16]
   428b6:	429a      	cmp	r2, r3
   428b8:	bfbe      	ittt	lt
   428ba:	460b      	movlt	r3, r1
   428bc:	462c      	movlt	r4, r5
   428be:	461d      	movlt	r5, r3
   428c0:	6927      	ldr	r7, [r4, #16]
   428c2:	68a3      	ldr	r3, [r4, #8]
   428c4:	f8d5 9010 	ldr.w	r9, [r5, #16]
   428c8:	6861      	ldr	r1, [r4, #4]
   428ca:	eb07 0609 	add.w	r6, r7, r9
   428ce:	42b3      	cmp	r3, r6
   428d0:	bfb8      	it	lt
   428d2:	3101      	addlt	r1, #1
   428d4:	f7ff fec7 	bl	42666 <_Balloc>
   428d8:	f100 0114 	add.w	r1, r0, #20
   428dc:	2200      	movs	r2, #0
   428de:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   428e2:	460b      	mov	r3, r1
   428e4:	4543      	cmp	r3, r8
   428e6:	d31d      	bcc.n	42924 <__multiply+0x7c>
   428e8:	f104 0314 	add.w	r3, r4, #20
   428ec:	f105 0214 	add.w	r2, r5, #20
   428f0:	f104 0515 	add.w	r5, r4, #21
   428f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   428f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   428fc:	9302      	str	r3, [sp, #8]
   428fe:	1b3b      	subs	r3, r7, r4
   42900:	3b15      	subs	r3, #21
   42902:	f023 0303 	bic.w	r3, r3, #3
   42906:	3304      	adds	r3, #4
   42908:	42af      	cmp	r7, r5
   4290a:	bf38      	it	cc
   4290c:	2304      	movcc	r3, #4
   4290e:	9301      	str	r3, [sp, #4]
   42910:	9b02      	ldr	r3, [sp, #8]
   42912:	9203      	str	r2, [sp, #12]
   42914:	4293      	cmp	r3, r2
   42916:	d808      	bhi.n	4292a <__multiply+0x82>
   42918:	2e00      	cmp	r6, #0
   4291a:	dc5a      	bgt.n	429d2 <__multiply+0x12a>
   4291c:	6106      	str	r6, [r0, #16]
   4291e:	b005      	add	sp, #20
   42920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42924:	f843 2b04 	str.w	r2, [r3], #4
   42928:	e7dc      	b.n	428e4 <__multiply+0x3c>
   4292a:	f8b2 a000 	ldrh.w	sl, [r2]
   4292e:	f1ba 0f00 	cmp.w	sl, #0
   42932:	d024      	beq.n	4297e <__multiply+0xd6>
   42934:	f104 0e14 	add.w	lr, r4, #20
   42938:	4689      	mov	r9, r1
   4293a:	f04f 0c00 	mov.w	ip, #0
   4293e:	f85e 5b04 	ldr.w	r5, [lr], #4
   42942:	f8d9 b000 	ldr.w	fp, [r9]
   42946:	b2ab      	uxth	r3, r5
   42948:	4577      	cmp	r7, lr
   4294a:	fa1f fb8b 	uxth.w	fp, fp
   4294e:	fb0a b303 	mla	r3, sl, r3, fp
   42952:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   42956:	f8d9 5000 	ldr.w	r5, [r9]
   4295a:	4463      	add	r3, ip
   4295c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   42960:	fb0a c50b 	mla	r5, sl, fp, ip
   42964:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   42968:	b29b      	uxth	r3, r3
   4296a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   4296e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   42972:	f849 3b04 	str.w	r3, [r9], #4
   42976:	d8e2      	bhi.n	4293e <__multiply+0x96>
   42978:	9b01      	ldr	r3, [sp, #4]
   4297a:	f841 c003 	str.w	ip, [r1, r3]
   4297e:	9b03      	ldr	r3, [sp, #12]
   42980:	3204      	adds	r2, #4
   42982:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   42986:	f1b9 0f00 	cmp.w	r9, #0
   4298a:	d020      	beq.n	429ce <__multiply+0x126>
   4298c:	680b      	ldr	r3, [r1, #0]
   4298e:	f104 0c14 	add.w	ip, r4, #20
   42992:	468e      	mov	lr, r1
   42994:	f04f 0a00 	mov.w	sl, #0
   42998:	f8bc 5000 	ldrh.w	r5, [ip]
   4299c:	b29b      	uxth	r3, r3
   4299e:	f8be b002 	ldrh.w	fp, [lr, #2]
   429a2:	fb09 b505 	mla	r5, r9, r5, fp
   429a6:	44aa      	add	sl, r5
   429a8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   429ac:	f84e 3b04 	str.w	r3, [lr], #4
   429b0:	f85c 3b04 	ldr.w	r3, [ip], #4
   429b4:	f8be 5000 	ldrh.w	r5, [lr]
   429b8:	0c1b      	lsrs	r3, r3, #16
   429ba:	4567      	cmp	r7, ip
   429bc:	fb09 5303 	mla	r3, r9, r3, r5
   429c0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   429c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   429c8:	d8e6      	bhi.n	42998 <__multiply+0xf0>
   429ca:	9d01      	ldr	r5, [sp, #4]
   429cc:	514b      	str	r3, [r1, r5]
   429ce:	3104      	adds	r1, #4
   429d0:	e79e      	b.n	42910 <__multiply+0x68>
   429d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   429d6:	2b00      	cmp	r3, #0
   429d8:	d1a0      	bne.n	4291c <__multiply+0x74>
   429da:	3e01      	subs	r6, #1
   429dc:	e79c      	b.n	42918 <__multiply+0x70>

000429de <__lshift>:
   429de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   429e2:	460c      	mov	r4, r1
   429e4:	4607      	mov	r7, r0
   429e6:	4691      	mov	r9, r2
   429e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   429ec:	6923      	ldr	r3, [r4, #16]
   429ee:	6849      	ldr	r1, [r1, #4]
   429f0:	eb03 1862 	add.w	r8, r3, r2, asr #5
   429f4:	68a3      	ldr	r3, [r4, #8]
   429f6:	f108 0601 	add.w	r6, r8, #1
   429fa:	42b3      	cmp	r3, r6
   429fc:	db3f      	blt.n	42a7e <__lshift+0xa0>
   429fe:	4638      	mov	r0, r7
   42a00:	f7ff fe31 	bl	42666 <_Balloc>
   42a04:	2300      	movs	r3, #0
   42a06:	4605      	mov	r5, r0
   42a08:	f100 0114 	add.w	r1, r0, #20
   42a0c:	f100 0210 	add.w	r2, r0, #16
   42a10:	4618      	mov	r0, r3
   42a12:	4553      	cmp	r3, sl
   42a14:	db36      	blt.n	42a84 <__lshift+0xa6>
   42a16:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   42a1a:	f104 0314 	add.w	r3, r4, #20
   42a1e:	6920      	ldr	r0, [r4, #16]
   42a20:	f019 091f 	ands.w	r9, r9, #31
   42a24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   42a28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   42a2c:	d02e      	beq.n	42a8c <__lshift+0xae>
   42a2e:	f1c9 0e20 	rsb	lr, r9, #32
   42a32:	468a      	mov	sl, r1
   42a34:	2200      	movs	r2, #0
   42a36:	6818      	ldr	r0, [r3, #0]
   42a38:	fa00 f009 	lsl.w	r0, r0, r9
   42a3c:	4302      	orrs	r2, r0
   42a3e:	f84a 2b04 	str.w	r2, [sl], #4
   42a42:	f853 2b04 	ldr.w	r2, [r3], #4
   42a46:	459c      	cmp	ip, r3
   42a48:	fa22 f20e 	lsr.w	r2, r2, lr
   42a4c:	d8f3      	bhi.n	42a36 <__lshift+0x58>
   42a4e:	ebac 0304 	sub.w	r3, ip, r4
   42a52:	f104 0015 	add.w	r0, r4, #21
   42a56:	3b15      	subs	r3, #21
   42a58:	f023 0303 	bic.w	r3, r3, #3
   42a5c:	3304      	adds	r3, #4
   42a5e:	4560      	cmp	r0, ip
   42a60:	bf88      	it	hi
   42a62:	2304      	movhi	r3, #4
   42a64:	50ca      	str	r2, [r1, r3]
   42a66:	b10a      	cbz	r2, 42a6c <__lshift+0x8e>
   42a68:	f108 0602 	add.w	r6, r8, #2
   42a6c:	3e01      	subs	r6, #1
   42a6e:	4638      	mov	r0, r7
   42a70:	4621      	mov	r1, r4
   42a72:	612e      	str	r6, [r5, #16]
   42a74:	f7ff fe2b 	bl	426ce <_Bfree>
   42a78:	4628      	mov	r0, r5
   42a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   42a7e:	3101      	adds	r1, #1
   42a80:	005b      	lsls	r3, r3, #1
   42a82:	e7ba      	b.n	429fa <__lshift+0x1c>
   42a84:	3301      	adds	r3, #1
   42a86:	f842 0f04 	str.w	r0, [r2, #4]!
   42a8a:	e7c2      	b.n	42a12 <__lshift+0x34>
   42a8c:	3904      	subs	r1, #4
   42a8e:	f853 2b04 	ldr.w	r2, [r3], #4
   42a92:	459c      	cmp	ip, r3
   42a94:	f841 2f04 	str.w	r2, [r1, #4]!
   42a98:	d8f9      	bhi.n	42a8e <__lshift+0xb0>
   42a9a:	e7e7      	b.n	42a6c <__lshift+0x8e>

00042a9c <__mcmp>:
   42a9c:	6902      	ldr	r2, [r0, #16]
   42a9e:	b530      	push	{r4, r5, lr}
   42aa0:	690c      	ldr	r4, [r1, #16]
   42aa2:	1b12      	subs	r2, r2, r4
   42aa4:	d10e      	bne.n	42ac4 <__mcmp+0x28>
   42aa6:	f100 0314 	add.w	r3, r0, #20
   42aaa:	3114      	adds	r1, #20
   42aac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   42ab0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   42ab4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   42ab8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   42abc:	42a5      	cmp	r5, r4
   42abe:	d003      	beq.n	42ac8 <__mcmp+0x2c>
   42ac0:	d305      	bcc.n	42ace <__mcmp+0x32>
   42ac2:	2201      	movs	r2, #1
   42ac4:	4610      	mov	r0, r2
   42ac6:	bd30      	pop	{r4, r5, pc}
   42ac8:	4283      	cmp	r3, r0
   42aca:	d3f3      	bcc.n	42ab4 <__mcmp+0x18>
   42acc:	e7fa      	b.n	42ac4 <__mcmp+0x28>
   42ace:	f04f 32ff 	mov.w	r2, #4294967295
   42ad2:	e7f7      	b.n	42ac4 <__mcmp+0x28>

00042ad4 <__mdiff>:
   42ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42ad8:	460c      	mov	r4, r1
   42ada:	4606      	mov	r6, r0
   42adc:	4611      	mov	r1, r2
   42ade:	4692      	mov	sl, r2
   42ae0:	4620      	mov	r0, r4
   42ae2:	f7ff ffdb 	bl	42a9c <__mcmp>
   42ae6:	1e05      	subs	r5, r0, #0
   42ae8:	d108      	bne.n	42afc <__mdiff+0x28>
   42aea:	4629      	mov	r1, r5
   42aec:	4630      	mov	r0, r6
   42aee:	f7ff fdba 	bl	42666 <_Balloc>
   42af2:	2301      	movs	r3, #1
   42af4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   42af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   42afc:	bfa3      	ittte	ge
   42afe:	4653      	movge	r3, sl
   42b00:	46a2      	movge	sl, r4
   42b02:	2500      	movge	r5, #0
   42b04:	2501      	movlt	r5, #1
   42b06:	bfa8      	it	ge
   42b08:	461c      	movge	r4, r3
   42b0a:	f8da 1004 	ldr.w	r1, [sl, #4]
   42b0e:	4630      	mov	r0, r6
   42b10:	f7ff fda9 	bl	42666 <_Balloc>
   42b14:	f104 0914 	add.w	r9, r4, #20
   42b18:	f8da 7010 	ldr.w	r7, [sl, #16]
   42b1c:	f100 0814 	add.w	r8, r0, #20
   42b20:	6926      	ldr	r6, [r4, #16]
   42b22:	f10a 0210 	add.w	r2, sl, #16
   42b26:	60c5      	str	r5, [r0, #12]
   42b28:	f10a 0514 	add.w	r5, sl, #20
   42b2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   42b30:	46c2      	mov	sl, r8
   42b32:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
   42b36:	f04f 0c00 	mov.w	ip, #0
   42b3a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   42b3e:	f859 3b04 	ldr.w	r3, [r9], #4
   42b42:	fa1f f18b 	uxth.w	r1, fp
   42b46:	454e      	cmp	r6, r9
   42b48:	4461      	add	r1, ip
   42b4a:	fa1f fc83 	uxth.w	ip, r3
   42b4e:	ea4f 4313 	mov.w	r3, r3, lsr #16
   42b52:	eba1 010c 	sub.w	r1, r1, ip
   42b56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   42b5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
   42b5e:	b289      	uxth	r1, r1
   42b60:	ea4f 4c23 	mov.w	ip, r3, asr #16
   42b64:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   42b68:	f84a 3b04 	str.w	r3, [sl], #4
   42b6c:	d8e5      	bhi.n	42b3a <__mdiff+0x66>
   42b6e:	1b33      	subs	r3, r6, r4
   42b70:	3415      	adds	r4, #21
   42b72:	3b15      	subs	r3, #21
   42b74:	f023 0303 	bic.w	r3, r3, #3
   42b78:	3304      	adds	r3, #4
   42b7a:	42a6      	cmp	r6, r4
   42b7c:	bf38      	it	cc
   42b7e:	2304      	movcc	r3, #4
   42b80:	441d      	add	r5, r3
   42b82:	4443      	add	r3, r8
   42b84:	462c      	mov	r4, r5
   42b86:	461e      	mov	r6, r3
   42b88:	4574      	cmp	r4, lr
   42b8a:	d30e      	bcc.n	42baa <__mdiff+0xd6>
   42b8c:	f10e 0203 	add.w	r2, lr, #3
   42b90:	1b52      	subs	r2, r2, r5
   42b92:	3d03      	subs	r5, #3
   42b94:	f022 0203 	bic.w	r2, r2, #3
   42b98:	45ae      	cmp	lr, r5
   42b9a:	bf38      	it	cc
   42b9c:	2200      	movcc	r2, #0
   42b9e:	441a      	add	r2, r3
   42ba0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   42ba4:	b18b      	cbz	r3, 42bca <__mdiff+0xf6>
   42ba6:	6107      	str	r7, [r0, #16]
   42ba8:	e7a6      	b.n	42af8 <__mdiff+0x24>
   42baa:	f854 8b04 	ldr.w	r8, [r4], #4
   42bae:	fa1f f288 	uxth.w	r2, r8
   42bb2:	4462      	add	r2, ip
   42bb4:	1411      	asrs	r1, r2, #16
   42bb6:	b292      	uxth	r2, r2
   42bb8:	eb01 4118 	add.w	r1, r1, r8, lsr #16
   42bbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   42bc0:	ea4f 4c21 	mov.w	ip, r1, asr #16
   42bc4:	f846 2b04 	str.w	r2, [r6], #4
   42bc8:	e7de      	b.n	42b88 <__mdiff+0xb4>
   42bca:	3f01      	subs	r7, #1
   42bcc:	e7e8      	b.n	42ba0 <__mdiff+0xcc>

00042bce <__d2b>:
   42bce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   42bd2:	ec57 6b10 	vmov	r6, r7, d0
   42bd6:	f3c7 550a 	ubfx	r5, r7, #20, #11
   42bda:	4689      	mov	r9, r1
   42bdc:	2101      	movs	r1, #1
   42bde:	4690      	mov	r8, r2
   42be0:	f7ff fd41 	bl	42666 <_Balloc>
   42be4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   42be8:	4604      	mov	r4, r0
   42bea:	bb35      	cbnz	r5, 42c3a <__d2b+0x6c>
   42bec:	2e00      	cmp	r6, #0
   42bee:	9301      	str	r3, [sp, #4]
   42bf0:	d028      	beq.n	42c44 <__d2b+0x76>
   42bf2:	4668      	mov	r0, sp
   42bf4:	9600      	str	r6, [sp, #0]
   42bf6:	f7ff fe1e 	bl	42836 <__lo0bits>
   42bfa:	9900      	ldr	r1, [sp, #0]
   42bfc:	b300      	cbz	r0, 42c40 <__d2b+0x72>
   42bfe:	9a01      	ldr	r2, [sp, #4]
   42c00:	f1c0 0320 	rsb	r3, r0, #32
   42c04:	fa02 f303 	lsl.w	r3, r2, r3
   42c08:	40c2      	lsrs	r2, r0
   42c0a:	430b      	orrs	r3, r1
   42c0c:	9201      	str	r2, [sp, #4]
   42c0e:	6163      	str	r3, [r4, #20]
   42c10:	9b01      	ldr	r3, [sp, #4]
   42c12:	2b00      	cmp	r3, #0
   42c14:	61a3      	str	r3, [r4, #24]
   42c16:	bf14      	ite	ne
   42c18:	2202      	movne	r2, #2
   42c1a:	2201      	moveq	r2, #1
   42c1c:	6122      	str	r2, [r4, #16]
   42c1e:	b1d5      	cbz	r5, 42c56 <__d2b+0x88>
   42c20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   42c24:	4405      	add	r5, r0
   42c26:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   42c2a:	f8c9 5000 	str.w	r5, [r9]
   42c2e:	f8c8 0000 	str.w	r0, [r8]
   42c32:	4620      	mov	r0, r4
   42c34:	b003      	add	sp, #12
   42c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   42c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   42c3e:	e7d5      	b.n	42bec <__d2b+0x1e>
   42c40:	6161      	str	r1, [r4, #20]
   42c42:	e7e5      	b.n	42c10 <__d2b+0x42>
   42c44:	a801      	add	r0, sp, #4
   42c46:	f7ff fdf6 	bl	42836 <__lo0bits>
   42c4a:	9b01      	ldr	r3, [sp, #4]
   42c4c:	2201      	movs	r2, #1
   42c4e:	3020      	adds	r0, #32
   42c50:	6163      	str	r3, [r4, #20]
   42c52:	6122      	str	r2, [r4, #16]
   42c54:	e7e3      	b.n	42c1e <__d2b+0x50>
   42c56:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   42c5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   42c5e:	f8c9 0000 	str.w	r0, [r9]
   42c62:	6918      	ldr	r0, [r3, #16]
   42c64:	f7ff fdc7 	bl	427f6 <__hi0bits>
   42c68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   42c6c:	e7df      	b.n	42c2e <__d2b+0x60>

00042c6e <__ratio>:
   42c6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   42c72:	4688      	mov	r8, r1
   42c74:	4681      	mov	r9, r0
   42c76:	4669      	mov	r1, sp
   42c78:	f7f9 fb68 	bl	3c34c <__b2d>
   42c7c:	a901      	add	r1, sp, #4
   42c7e:	4640      	mov	r0, r8
   42c80:	ec55 4b10 	vmov	r4, r5, d0
   42c84:	f7f9 fb62 	bl	3c34c <__b2d>
   42c88:	f8d9 3010 	ldr.w	r3, [r9, #16]
   42c8c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   42c90:	462f      	mov	r7, r5
   42c92:	eba3 0c02 	sub.w	ip, r3, r2
   42c96:	e9dd 3200 	ldrd	r3, r2, [sp]
   42c9a:	ec51 0b10 	vmov	r0, r1, d0
   42c9e:	1a9b      	subs	r3, r3, r2
   42ca0:	468b      	mov	fp, r1
   42ca2:	4620      	mov	r0, r4
   42ca4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   42ca8:	2b00      	cmp	r3, #0
   42caa:	bfd5      	itete	le
   42cac:	460a      	movle	r2, r1
   42cae:	462a      	movgt	r2, r5
   42cb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   42cb4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   42cb8:	bfd8      	it	le
   42cba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   42cbe:	ee10 2a10 	vmov	r2, s0
   42cc2:	4639      	mov	r1, r7
   42cc4:	465b      	mov	r3, fp
   42cc6:	f7d9 fea1 	bl	1ca0c <__aeabi_ddiv>
   42cca:	ec41 0b10 	vmov	d0, r0, r1
   42cce:	b003      	add	sp, #12
   42cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00042cd4 <__copybits>:
   42cd4:	3901      	subs	r1, #1
   42cd6:	f102 0314 	add.w	r3, r2, #20
   42cda:	1149      	asrs	r1, r1, #5
   42cdc:	b570      	push	{r4, r5, r6, lr}
   42cde:	3101      	adds	r1, #1
   42ce0:	6914      	ldr	r4, [r2, #16]
   42ce2:	1f05      	subs	r5, r0, #4
   42ce4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   42ce8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   42cec:	42a3      	cmp	r3, r4
   42cee:	d30c      	bcc.n	42d0a <__copybits+0x36>
   42cf0:	1aa3      	subs	r3, r4, r2
   42cf2:	3211      	adds	r2, #17
   42cf4:	3b11      	subs	r3, #17
   42cf6:	f023 0303 	bic.w	r3, r3, #3
   42cfa:	42a2      	cmp	r2, r4
   42cfc:	bf88      	it	hi
   42cfe:	2300      	movhi	r3, #0
   42d00:	4418      	add	r0, r3
   42d02:	2300      	movs	r3, #0
   42d04:	4288      	cmp	r0, r1
   42d06:	d305      	bcc.n	42d14 <__copybits+0x40>
   42d08:	bd70      	pop	{r4, r5, r6, pc}
   42d0a:	f853 6b04 	ldr.w	r6, [r3], #4
   42d0e:	f845 6f04 	str.w	r6, [r5, #4]!
   42d12:	e7eb      	b.n	42cec <__copybits+0x18>
   42d14:	f840 3b04 	str.w	r3, [r0], #4
   42d18:	e7f4      	b.n	42d04 <__copybits+0x30>

00042d1a <__any_on>:
   42d1a:	f100 0214 	add.w	r2, r0, #20
   42d1e:	114b      	asrs	r3, r1, #5
   42d20:	6900      	ldr	r0, [r0, #16]
   42d22:	4298      	cmp	r0, r3
   42d24:	b510      	push	{r4, lr}
   42d26:	db11      	blt.n	42d4c <__any_on+0x32>
   42d28:	dd0a      	ble.n	42d40 <__any_on+0x26>
   42d2a:	f011 011f 	ands.w	r1, r1, #31
   42d2e:	d007      	beq.n	42d40 <__any_on+0x26>
   42d30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   42d34:	fa24 f001 	lsr.w	r0, r4, r1
   42d38:	fa00 f101 	lsl.w	r1, r0, r1
   42d3c:	428c      	cmp	r4, r1
   42d3e:	d10b      	bne.n	42d58 <__any_on+0x3e>
   42d40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   42d44:	4293      	cmp	r3, r2
   42d46:	d803      	bhi.n	42d50 <__any_on+0x36>
   42d48:	2000      	movs	r0, #0
   42d4a:	bd10      	pop	{r4, pc}
   42d4c:	4603      	mov	r3, r0
   42d4e:	e7f7      	b.n	42d40 <__any_on+0x26>
   42d50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   42d54:	2900      	cmp	r1, #0
   42d56:	d0f5      	beq.n	42d44 <__any_on+0x2a>
   42d58:	2001      	movs	r0, #1
   42d5a:	e7f6      	b.n	42d4a <__any_on+0x30>

00042d5c <_calloc_r>:
   42d5c:	434a      	muls	r2, r1
   42d5e:	b513      	push	{r0, r1, r4, lr}
   42d60:	4611      	mov	r1, r2
   42d62:	9201      	str	r2, [sp, #4]
   42d64:	f7f7 fe8c 	bl	3aa80 <_malloc_r>
   42d68:	4604      	mov	r4, r0
   42d6a:	b118      	cbz	r0, 42d74 <_calloc_r+0x18>
   42d6c:	9a01      	ldr	r2, [sp, #4]
   42d6e:	2100      	movs	r1, #0
   42d70:	f7fe ffb5 	bl	41cde <memset>
   42d74:	4620      	mov	r0, r4
   42d76:	b002      	add	sp, #8
   42d78:	bd10      	pop	{r4, pc}

00042d7a <_realloc_r>:
   42d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   42d7c:	4607      	mov	r7, r0
   42d7e:	4614      	mov	r4, r2
   42d80:	460e      	mov	r6, r1
   42d82:	b921      	cbnz	r1, 42d8e <_realloc_r+0x14>
   42d84:	4611      	mov	r1, r2
   42d86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   42d8a:	f7f7 be79 	b.w	3aa80 <_malloc_r>
   42d8e:	b922      	cbnz	r2, 42d9a <_realloc_r+0x20>
   42d90:	4625      	mov	r5, r4
   42d92:	f7f7 fe25 	bl	3a9e0 <_free_r>
   42d96:	4628      	mov	r0, r5
   42d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   42d9a:	f000 f970 	bl	4307e <_malloc_usable_size_r>
   42d9e:	42a0      	cmp	r0, r4
   42da0:	d20f      	bcs.n	42dc2 <_realloc_r+0x48>
   42da2:	4621      	mov	r1, r4
   42da4:	4638      	mov	r0, r7
   42da6:	f7f7 fe6b 	bl	3aa80 <_malloc_r>
   42daa:	4605      	mov	r5, r0
   42dac:	2800      	cmp	r0, #0
   42dae:	d0f2      	beq.n	42d96 <_realloc_r+0x1c>
   42db0:	4631      	mov	r1, r6
   42db2:	4622      	mov	r2, r4
   42db4:	f7fe ff73 	bl	41c9e <memcpy>
   42db8:	4631      	mov	r1, r6
   42dba:	4638      	mov	r0, r7
   42dbc:	f7f7 fe10 	bl	3a9e0 <_free_r>
   42dc0:	e7e9      	b.n	42d96 <_realloc_r+0x1c>
   42dc2:	4635      	mov	r5, r6
   42dc4:	e7e7      	b.n	42d96 <_realloc_r+0x1c>

00042dc6 <__ssputs_r>:
   42dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   42dca:	688e      	ldr	r6, [r1, #8]
   42dcc:	4682      	mov	sl, r0
   42dce:	460c      	mov	r4, r1
   42dd0:	4690      	mov	r8, r2
   42dd2:	429e      	cmp	r6, r3
   42dd4:	461f      	mov	r7, r3
   42dd6:	d838      	bhi.n	42e4a <__ssputs_r+0x84>
   42dd8:	898a      	ldrh	r2, [r1, #12]
   42dda:	f412 6f90 	tst.w	r2, #1152	; 0x480
   42dde:	d032      	beq.n	42e46 <__ssputs_r+0x80>
   42de0:	6825      	ldr	r5, [r4, #0]
   42de2:	3301      	adds	r3, #1
   42de4:	6909      	ldr	r1, [r1, #16]
   42de6:	eba5 0901 	sub.w	r9, r5, r1
   42dea:	6965      	ldr	r5, [r4, #20]
   42dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   42df0:	444b      	add	r3, r9
   42df2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   42df6:	106d      	asrs	r5, r5, #1
   42df8:	429d      	cmp	r5, r3
   42dfa:	bf38      	it	cc
   42dfc:	461d      	movcc	r5, r3
   42dfe:	0553      	lsls	r3, r2, #21
   42e00:	d531      	bpl.n	42e66 <__ssputs_r+0xa0>
   42e02:	4629      	mov	r1, r5
   42e04:	f7f7 fe3c 	bl	3aa80 <_malloc_r>
   42e08:	4606      	mov	r6, r0
   42e0a:	b950      	cbnz	r0, 42e22 <__ssputs_r+0x5c>
   42e0c:	230c      	movs	r3, #12
   42e0e:	f04f 30ff 	mov.w	r0, #4294967295
   42e12:	f8ca 3000 	str.w	r3, [sl]
   42e16:	89a3      	ldrh	r3, [r4, #12]
   42e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   42e1c:	81a3      	strh	r3, [r4, #12]
   42e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   42e22:	464a      	mov	r2, r9
   42e24:	6921      	ldr	r1, [r4, #16]
   42e26:	f7fe ff3a 	bl	41c9e <memcpy>
   42e2a:	89a3      	ldrh	r3, [r4, #12]
   42e2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   42e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   42e34:	81a3      	strh	r3, [r4, #12]
   42e36:	6126      	str	r6, [r4, #16]
   42e38:	444e      	add	r6, r9
   42e3a:	6165      	str	r5, [r4, #20]
   42e3c:	eba5 0509 	sub.w	r5, r5, r9
   42e40:	6026      	str	r6, [r4, #0]
   42e42:	463e      	mov	r6, r7
   42e44:	60a5      	str	r5, [r4, #8]
   42e46:	42be      	cmp	r6, r7
   42e48:	d900      	bls.n	42e4c <__ssputs_r+0x86>
   42e4a:	463e      	mov	r6, r7
   42e4c:	4632      	mov	r2, r6
   42e4e:	4641      	mov	r1, r8
   42e50:	6820      	ldr	r0, [r4, #0]
   42e52:	f7ff fbee 	bl	42632 <memmove>
   42e56:	68a3      	ldr	r3, [r4, #8]
   42e58:	6822      	ldr	r2, [r4, #0]
   42e5a:	2000      	movs	r0, #0
   42e5c:	1b9b      	subs	r3, r3, r6
   42e5e:	4432      	add	r2, r6
   42e60:	60a3      	str	r3, [r4, #8]
   42e62:	6022      	str	r2, [r4, #0]
   42e64:	e7db      	b.n	42e1e <__ssputs_r+0x58>
   42e66:	462a      	mov	r2, r5
   42e68:	f7ff ff87 	bl	42d7a <_realloc_r>
   42e6c:	4606      	mov	r6, r0
   42e6e:	2800      	cmp	r0, #0
   42e70:	d1e1      	bne.n	42e36 <__ssputs_r+0x70>
   42e72:	6921      	ldr	r1, [r4, #16]
   42e74:	4650      	mov	r0, sl
   42e76:	f7f7 fdb3 	bl	3a9e0 <_free_r>
   42e7a:	e7c7      	b.n	42e0c <__ssputs_r+0x46>

00042e7c <_sungetc_r>:
   42e7c:	b538      	push	{r3, r4, r5, lr}
   42e7e:	1c4b      	adds	r3, r1, #1
   42e80:	4614      	mov	r4, r2
   42e82:	d103      	bne.n	42e8c <_sungetc_r+0x10>
   42e84:	f04f 35ff 	mov.w	r5, #4294967295
   42e88:	4628      	mov	r0, r5
   42e8a:	bd38      	pop	{r3, r4, r5, pc}
   42e8c:	8993      	ldrh	r3, [r2, #12]
   42e8e:	b2cd      	uxtb	r5, r1
   42e90:	f023 0320 	bic.w	r3, r3, #32
   42e94:	8193      	strh	r3, [r2, #12]
   42e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
   42e98:	6852      	ldr	r2, [r2, #4]
   42e9a:	b18b      	cbz	r3, 42ec0 <_sungetc_r+0x44>
   42e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   42e9e:	4293      	cmp	r3, r2
   42ea0:	dd08      	ble.n	42eb4 <_sungetc_r+0x38>
   42ea2:	6823      	ldr	r3, [r4, #0]
   42ea4:	1e5a      	subs	r2, r3, #1
   42ea6:	6022      	str	r2, [r4, #0]
   42ea8:	f803 5c01 	strb.w	r5, [r3, #-1]
   42eac:	6863      	ldr	r3, [r4, #4]
   42eae:	3301      	adds	r3, #1
   42eb0:	6063      	str	r3, [r4, #4]
   42eb2:	e7e9      	b.n	42e88 <_sungetc_r+0xc>
   42eb4:	4621      	mov	r1, r4
   42eb6:	f000 f89e 	bl	42ff6 <__submore>
   42eba:	2800      	cmp	r0, #0
   42ebc:	d0f1      	beq.n	42ea2 <_sungetc_r+0x26>
   42ebe:	e7e1      	b.n	42e84 <_sungetc_r+0x8>
   42ec0:	6921      	ldr	r1, [r4, #16]
   42ec2:	6823      	ldr	r3, [r4, #0]
   42ec4:	b151      	cbz	r1, 42edc <_sungetc_r+0x60>
   42ec6:	4299      	cmp	r1, r3
   42ec8:	d208      	bcs.n	42edc <_sungetc_r+0x60>
   42eca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   42ece:	42a9      	cmp	r1, r5
   42ed0:	d104      	bne.n	42edc <_sungetc_r+0x60>
   42ed2:	3b01      	subs	r3, #1
   42ed4:	3201      	adds	r2, #1
   42ed6:	6023      	str	r3, [r4, #0]
   42ed8:	6062      	str	r2, [r4, #4]
   42eda:	e7d5      	b.n	42e88 <_sungetc_r+0xc>
   42edc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   42ee0:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42ee4:	6363      	str	r3, [r4, #52]	; 0x34
   42ee6:	2303      	movs	r3, #3
   42ee8:	63a3      	str	r3, [r4, #56]	; 0x38
   42eea:	4623      	mov	r3, r4
   42eec:	f803 5f46 	strb.w	r5, [r3, #70]!
   42ef0:	6023      	str	r3, [r4, #0]
   42ef2:	2301      	movs	r3, #1
   42ef4:	e7dc      	b.n	42eb0 <_sungetc_r+0x34>

00042ef6 <__ssrefill_r>:
   42ef6:	b510      	push	{r4, lr}
   42ef8:	460c      	mov	r4, r1
   42efa:	6b49      	ldr	r1, [r1, #52]	; 0x34
   42efc:	b169      	cbz	r1, 42f1a <__ssrefill_r+0x24>
   42efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   42f02:	4299      	cmp	r1, r3
   42f04:	d001      	beq.n	42f0a <__ssrefill_r+0x14>
   42f06:	f7f7 fd6b 	bl	3a9e0 <_free_r>
   42f0a:	2000      	movs	r0, #0
   42f0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   42f0e:	6360      	str	r0, [r4, #52]	; 0x34
   42f10:	6063      	str	r3, [r4, #4]
   42f12:	b113      	cbz	r3, 42f1a <__ssrefill_r+0x24>
   42f14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   42f16:	6023      	str	r3, [r4, #0]
   42f18:	bd10      	pop	{r4, pc}
   42f1a:	6923      	ldr	r3, [r4, #16]
   42f1c:	f04f 30ff 	mov.w	r0, #4294967295
   42f20:	6023      	str	r3, [r4, #0]
   42f22:	2300      	movs	r3, #0
   42f24:	6063      	str	r3, [r4, #4]
   42f26:	89a3      	ldrh	r3, [r4, #12]
   42f28:	f043 0320 	orr.w	r3, r3, #32
   42f2c:	81a3      	strh	r3, [r4, #12]
   42f2e:	e7f3      	b.n	42f18 <__ssrefill_r+0x22>

00042f30 <__sccl>:
   42f30:	b570      	push	{r4, r5, r6, lr}
   42f32:	780b      	ldrb	r3, [r1, #0]
   42f34:	4604      	mov	r4, r0
   42f36:	2b5e      	cmp	r3, #94	; 0x5e
   42f38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   42f3c:	bf13      	iteet	ne
   42f3e:	1c48      	addne	r0, r1, #1
   42f40:	1c88      	addeq	r0, r1, #2
   42f42:	784b      	ldrbeq	r3, [r1, #1]
   42f44:	2200      	movne	r2, #0
   42f46:	bf08      	it	eq
   42f48:	2201      	moveq	r2, #1
   42f4a:	1e61      	subs	r1, r4, #1
   42f4c:	f801 2f01 	strb.w	r2, [r1, #1]!
   42f50:	42a9      	cmp	r1, r5
   42f52:	d1fb      	bne.n	42f4c <__sccl+0x1c>
   42f54:	b90b      	cbnz	r3, 42f5a <__sccl+0x2a>
   42f56:	3801      	subs	r0, #1
   42f58:	bd70      	pop	{r4, r5, r6, pc}
   42f5a:	f082 0101 	eor.w	r1, r2, #1
   42f5e:	1c42      	adds	r2, r0, #1
   42f60:	54e1      	strb	r1, [r4, r3]
   42f62:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   42f66:	1e56      	subs	r6, r2, #1
   42f68:	4610      	mov	r0, r2
   42f6a:	2d2d      	cmp	r5, #45	; 0x2d
   42f6c:	d006      	beq.n	42f7c <__sccl+0x4c>
   42f6e:	2d5d      	cmp	r5, #93	; 0x5d
   42f70:	d0f2      	beq.n	42f58 <__sccl+0x28>
   42f72:	b90d      	cbnz	r5, 42f78 <__sccl+0x48>
   42f74:	4630      	mov	r0, r6
   42f76:	e7ef      	b.n	42f58 <__sccl+0x28>
   42f78:	462b      	mov	r3, r5
   42f7a:	e7f0      	b.n	42f5e <__sccl+0x2e>
   42f7c:	7816      	ldrb	r6, [r2, #0]
   42f7e:	2e5d      	cmp	r6, #93	; 0x5d
   42f80:	d0fa      	beq.n	42f78 <__sccl+0x48>
   42f82:	42b3      	cmp	r3, r6
   42f84:	dcf8      	bgt.n	42f78 <__sccl+0x48>
   42f86:	4618      	mov	r0, r3
   42f88:	3001      	adds	r0, #1
   42f8a:	4286      	cmp	r6, r0
   42f8c:	5421      	strb	r1, [r4, r0]
   42f8e:	dcfb      	bgt.n	42f88 <__sccl+0x58>
   42f90:	43d8      	mvns	r0, r3
   42f92:	1c5d      	adds	r5, r3, #1
   42f94:	3202      	adds	r2, #2
   42f96:	4430      	add	r0, r6
   42f98:	42b3      	cmp	r3, r6
   42f9a:	bfa8      	it	ge
   42f9c:	2000      	movge	r0, #0
   42f9e:	182b      	adds	r3, r5, r0
   42fa0:	e7df      	b.n	42f62 <__sccl+0x32>

00042fa2 <_raise_r>:
   42fa2:	291f      	cmp	r1, #31
   42fa4:	b538      	push	{r3, r4, r5, lr}
   42fa6:	4604      	mov	r4, r0
   42fa8:	460d      	mov	r5, r1
   42faa:	d904      	bls.n	42fb6 <_raise_r+0x14>
   42fac:	2316      	movs	r3, #22
   42fae:	6003      	str	r3, [r0, #0]
   42fb0:	f04f 30ff 	mov.w	r0, #4294967295
   42fb4:	bd38      	pop	{r3, r4, r5, pc}
   42fb6:	6c42      	ldr	r2, [r0, #68]	; 0x44
   42fb8:	b112      	cbz	r2, 42fc0 <_raise_r+0x1e>
   42fba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   42fbe:	b94b      	cbnz	r3, 42fd4 <_raise_r+0x32>
   42fc0:	4620      	mov	r0, r4
   42fc2:	f000 f816 	bl	42ff2 <_getpid_r>
   42fc6:	462a      	mov	r2, r5
   42fc8:	4601      	mov	r1, r0
   42fca:	4620      	mov	r0, r4
   42fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   42fd0:	f7f9 bdec 	b.w	3cbac <_kill_r>
   42fd4:	2b01      	cmp	r3, #1
   42fd6:	d00a      	beq.n	42fee <_raise_r+0x4c>
   42fd8:	1c59      	adds	r1, r3, #1
   42fda:	d103      	bne.n	42fe4 <_raise_r+0x42>
   42fdc:	2316      	movs	r3, #22
   42fde:	6003      	str	r3, [r0, #0]
   42fe0:	2001      	movs	r0, #1
   42fe2:	e7e7      	b.n	42fb4 <_raise_r+0x12>
   42fe4:	2400      	movs	r4, #0
   42fe6:	4628      	mov	r0, r5
   42fe8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   42fec:	4798      	blx	r3
   42fee:	2000      	movs	r0, #0
   42ff0:	e7e0      	b.n	42fb4 <_raise_r+0x12>

00042ff2 <_getpid_r>:
   42ff2:	f7fb b86b 	b.w	3e0cc <_getpid>

00042ff6 <__submore>:
   42ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   42ffa:	460c      	mov	r4, r1
   42ffc:	6b49      	ldr	r1, [r1, #52]	; 0x34
   42ffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
   43002:	4299      	cmp	r1, r3
   43004:	d11a      	bne.n	4303c <__submore+0x46>
   43006:	f44f 6180 	mov.w	r1, #1024	; 0x400
   4300a:	f7f7 fd39 	bl	3aa80 <_malloc_r>
   4300e:	b918      	cbnz	r0, 43018 <__submore+0x22>
   43010:	f04f 30ff 	mov.w	r0, #4294967295
   43014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   43018:	f44f 6380 	mov.w	r3, #1024	; 0x400
   4301c:	6360      	str	r0, [r4, #52]	; 0x34
   4301e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   43022:	63a3      	str	r3, [r4, #56]	; 0x38
   43024:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   43028:	7083      	strb	r3, [r0, #2]
   4302a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   4302e:	7043      	strb	r3, [r0, #1]
   43030:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   43034:	7003      	strb	r3, [r0, #0]
   43036:	6020      	str	r0, [r4, #0]
   43038:	2000      	movs	r0, #0
   4303a:	e7eb      	b.n	43014 <__submore+0x1e>
   4303c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   4303e:	0077      	lsls	r7, r6, #1
   43040:	463a      	mov	r2, r7
   43042:	f7ff fe9a 	bl	42d7a <_realloc_r>
   43046:	4605      	mov	r5, r0
   43048:	2800      	cmp	r0, #0
   4304a:	d0e1      	beq.n	43010 <__submore+0x1a>
   4304c:	eb00 0806 	add.w	r8, r0, r6
   43050:	4601      	mov	r1, r0
   43052:	4632      	mov	r2, r6
   43054:	4640      	mov	r0, r8
   43056:	f7fe fe22 	bl	41c9e <memcpy>
   4305a:	f8c4 8000 	str.w	r8, [r4]
   4305e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   43062:	e7e9      	b.n	43038 <__submore+0x42>

00043064 <__ascii_wctomb>:
   43064:	b149      	cbz	r1, 4307a <__ascii_wctomb+0x16>
   43066:	2aff      	cmp	r2, #255	; 0xff
   43068:	bf8d      	iteet	hi
   4306a:	238a      	movhi	r3, #138	; 0x8a
   4306c:	2001      	movls	r0, #1
   4306e:	700a      	strbls	r2, [r1, #0]
   43070:	6003      	strhi	r3, [r0, #0]
   43072:	bf88      	it	hi
   43074:	f04f 30ff 	movhi.w	r0, #4294967295
   43078:	4770      	bx	lr
   4307a:	4608      	mov	r0, r1
   4307c:	4770      	bx	lr

0004307e <_malloc_usable_size_r>:
   4307e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   43082:	1f18      	subs	r0, r3, #4
   43084:	2b00      	cmp	r3, #0
   43086:	bfbc      	itt	lt
   43088:	580b      	ldrlt	r3, [r1, r0]
   4308a:	18c0      	addlt	r0, r0, r3
   4308c:	4770      	bx	lr
